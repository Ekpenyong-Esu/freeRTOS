
DMA_UART_STREAM_BUFF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009480  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  08009630  08009630  00019630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009998  08009998  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08009998  08009998  00019998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099a0  080099a0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099a0  080099a0  000199a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099a4  080099a4  000199a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080099a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00014568  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001457c  2001457c  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c036  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d95  00000000  00000000  0003c07a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001730  00000000  00000000  0003fe10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001588  00000000  00000000  00041540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000045e2  00000000  00000000  00042ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f7b5  00000000  00000000  000470aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea111  00000000  00000000  0006685f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00150970  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006108  00000000  00000000  001509c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000014 	.word	0x20000014
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009618 	.word	0x08009618

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000018 	.word	0x20000018
 80001ec:	08009618 	.word	0x08009618

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20012f04 	.word	0x20012f04

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b974 	b.w	8000584 <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9d08      	ldr	r5, [sp, #32]
 80002ba:	4604      	mov	r4, r0
 80002bc:	468e      	mov	lr, r1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d14d      	bne.n	800035e <__udivmoddi4+0xaa>
 80002c2:	428a      	cmp	r2, r1
 80002c4:	4694      	mov	ip, r2
 80002c6:	d969      	bls.n	800039c <__udivmoddi4+0xe8>
 80002c8:	fab2 f282 	clz	r2, r2
 80002cc:	b152      	cbz	r2, 80002e4 <__udivmoddi4+0x30>
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	f1c2 0120 	rsb	r1, r2, #32
 80002d6:	fa20 f101 	lsr.w	r1, r0, r1
 80002da:	fa0c fc02 	lsl.w	ip, ip, r2
 80002de:	ea41 0e03 	orr.w	lr, r1, r3
 80002e2:	4094      	lsls	r4, r2
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	0c21      	lsrs	r1, r4, #16
 80002ea:	fbbe f6f8 	udiv	r6, lr, r8
 80002ee:	fa1f f78c 	uxth.w	r7, ip
 80002f2:	fb08 e316 	mls	r3, r8, r6, lr
 80002f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002fa:	fb06 f107 	mul.w	r1, r6, r7
 80002fe:	4299      	cmp	r1, r3
 8000300:	d90a      	bls.n	8000318 <__udivmoddi4+0x64>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 30ff 	add.w	r0, r6, #4294967295
 800030a:	f080 811f 	bcs.w	800054c <__udivmoddi4+0x298>
 800030e:	4299      	cmp	r1, r3
 8000310:	f240 811c 	bls.w	800054c <__udivmoddi4+0x298>
 8000314:	3e02      	subs	r6, #2
 8000316:	4463      	add	r3, ip
 8000318:	1a5b      	subs	r3, r3, r1
 800031a:	b2a4      	uxth	r4, r4
 800031c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000320:	fb08 3310 	mls	r3, r8, r0, r3
 8000324:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000328:	fb00 f707 	mul.w	r7, r0, r7
 800032c:	42a7      	cmp	r7, r4
 800032e:	d90a      	bls.n	8000346 <__udivmoddi4+0x92>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	f080 810a 	bcs.w	8000550 <__udivmoddi4+0x29c>
 800033c:	42a7      	cmp	r7, r4
 800033e:	f240 8107 	bls.w	8000550 <__udivmoddi4+0x29c>
 8000342:	4464      	add	r4, ip
 8000344:	3802      	subs	r0, #2
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	1be4      	subs	r4, r4, r7
 800034c:	2600      	movs	r6, #0
 800034e:	b11d      	cbz	r5, 8000358 <__udivmoddi4+0xa4>
 8000350:	40d4      	lsrs	r4, r2
 8000352:	2300      	movs	r3, #0
 8000354:	e9c5 4300 	strd	r4, r3, [r5]
 8000358:	4631      	mov	r1, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0xc2>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80ef 	beq.w	8000546 <__udivmoddi4+0x292>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x160>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xd4>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80f9 	bhi.w	800057a <__udivmoddi4+0x2c6>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0303 	sbc.w	r3, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	469e      	mov	lr, r3
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e0      	beq.n	8000358 <__udivmoddi4+0xa4>
 8000396:	e9c5 4e00 	strd	r4, lr, [r5]
 800039a:	e7dd      	b.n	8000358 <__udivmoddi4+0xa4>
 800039c:	b902      	cbnz	r2, 80003a0 <__udivmoddi4+0xec>
 800039e:	deff      	udf	#255	; 0xff
 80003a0:	fab2 f282 	clz	r2, r2
 80003a4:	2a00      	cmp	r2, #0
 80003a6:	f040 8092 	bne.w	80004ce <__udivmoddi4+0x21a>
 80003aa:	eba1 010c 	sub.w	r1, r1, ip
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	2601      	movs	r6, #1
 80003b8:	0c20      	lsrs	r0, r4, #16
 80003ba:	fbb1 f3f7 	udiv	r3, r1, r7
 80003be:	fb07 1113 	mls	r1, r7, r3, r1
 80003c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c6:	fb0e f003 	mul.w	r0, lr, r3
 80003ca:	4288      	cmp	r0, r1
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x12c>
 80003ce:	eb1c 0101 	adds.w	r1, ip, r1
 80003d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x12a>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f200 80cb 	bhi.w	8000574 <__udivmoddi4+0x2c0>
 80003de:	4643      	mov	r3, r8
 80003e0:	1a09      	subs	r1, r1, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e8:	fb07 1110 	mls	r1, r7, r0, r1
 80003ec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003f0:	fb0e fe00 	mul.w	lr, lr, r0
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x156>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x154>
 8000402:	45a6      	cmp	lr, r4
 8000404:	f200 80bb 	bhi.w	800057e <__udivmoddi4+0x2ca>
 8000408:	4608      	mov	r0, r1
 800040a:	eba4 040e 	sub.w	r4, r4, lr
 800040e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000412:	e79c      	b.n	800034e <__udivmoddi4+0x9a>
 8000414:	f1c6 0720 	rsb	r7, r6, #32
 8000418:	40b3      	lsls	r3, r6
 800041a:	fa22 fc07 	lsr.w	ip, r2, r7
 800041e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000422:	fa20 f407 	lsr.w	r4, r0, r7
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	431c      	orrs	r4, r3
 800042c:	40f9      	lsrs	r1, r7
 800042e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000432:	fa00 f306 	lsl.w	r3, r0, r6
 8000436:	fbb1 f8f9 	udiv	r8, r1, r9
 800043a:	0c20      	lsrs	r0, r4, #16
 800043c:	fa1f fe8c 	uxth.w	lr, ip
 8000440:	fb09 1118 	mls	r1, r9, r8, r1
 8000444:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000448:	fb08 f00e 	mul.w	r0, r8, lr
 800044c:	4288      	cmp	r0, r1
 800044e:	fa02 f206 	lsl.w	r2, r2, r6
 8000452:	d90b      	bls.n	800046c <__udivmoddi4+0x1b8>
 8000454:	eb1c 0101 	adds.w	r1, ip, r1
 8000458:	f108 3aff 	add.w	sl, r8, #4294967295
 800045c:	f080 8088 	bcs.w	8000570 <__udivmoddi4+0x2bc>
 8000460:	4288      	cmp	r0, r1
 8000462:	f240 8085 	bls.w	8000570 <__udivmoddi4+0x2bc>
 8000466:	f1a8 0802 	sub.w	r8, r8, #2
 800046a:	4461      	add	r1, ip
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f9 	udiv	r0, r1, r9
 8000474:	fb09 1110 	mls	r1, r9, r0, r1
 8000478:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800047c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000480:	458e      	cmp	lr, r1
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x1e2>
 8000484:	eb1c 0101 	adds.w	r1, ip, r1
 8000488:	f100 34ff 	add.w	r4, r0, #4294967295
 800048c:	d26c      	bcs.n	8000568 <__udivmoddi4+0x2b4>
 800048e:	458e      	cmp	lr, r1
 8000490:	d96a      	bls.n	8000568 <__udivmoddi4+0x2b4>
 8000492:	3802      	subs	r0, #2
 8000494:	4461      	add	r1, ip
 8000496:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800049a:	fba0 9402 	umull	r9, r4, r0, r2
 800049e:	eba1 010e 	sub.w	r1, r1, lr
 80004a2:	42a1      	cmp	r1, r4
 80004a4:	46c8      	mov	r8, r9
 80004a6:	46a6      	mov	lr, r4
 80004a8:	d356      	bcc.n	8000558 <__udivmoddi4+0x2a4>
 80004aa:	d053      	beq.n	8000554 <__udivmoddi4+0x2a0>
 80004ac:	b15d      	cbz	r5, 80004c6 <__udivmoddi4+0x212>
 80004ae:	ebb3 0208 	subs.w	r2, r3, r8
 80004b2:	eb61 010e 	sbc.w	r1, r1, lr
 80004b6:	fa01 f707 	lsl.w	r7, r1, r7
 80004ba:	fa22 f306 	lsr.w	r3, r2, r6
 80004be:	40f1      	lsrs	r1, r6
 80004c0:	431f      	orrs	r7, r3
 80004c2:	e9c5 7100 	strd	r7, r1, [r5]
 80004c6:	2600      	movs	r6, #0
 80004c8:	4631      	mov	r1, r6
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	40d8      	lsrs	r0, r3
 80004d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d8:	fa21 f303 	lsr.w	r3, r1, r3
 80004dc:	4091      	lsls	r1, r2
 80004de:	4301      	orrs	r1, r0
 80004e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e4:	fa1f fe8c 	uxth.w	lr, ip
 80004e8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004ec:	fb07 3610 	mls	r6, r7, r0, r3
 80004f0:	0c0b      	lsrs	r3, r1, #16
 80004f2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f6:	fb00 f60e 	mul.w	r6, r0, lr
 80004fa:	429e      	cmp	r6, r3
 80004fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x260>
 8000502:	eb1c 0303 	adds.w	r3, ip, r3
 8000506:	f100 38ff 	add.w	r8, r0, #4294967295
 800050a:	d22f      	bcs.n	800056c <__udivmoddi4+0x2b8>
 800050c:	429e      	cmp	r6, r3
 800050e:	d92d      	bls.n	800056c <__udivmoddi4+0x2b8>
 8000510:	3802      	subs	r0, #2
 8000512:	4463      	add	r3, ip
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	b289      	uxth	r1, r1
 8000518:	fbb3 f6f7 	udiv	r6, r3, r7
 800051c:	fb07 3316 	mls	r3, r7, r6, r3
 8000520:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000524:	fb06 f30e 	mul.w	r3, r6, lr
 8000528:	428b      	cmp	r3, r1
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x28a>
 800052c:	eb1c 0101 	adds.w	r1, ip, r1
 8000530:	f106 38ff 	add.w	r8, r6, #4294967295
 8000534:	d216      	bcs.n	8000564 <__udivmoddi4+0x2b0>
 8000536:	428b      	cmp	r3, r1
 8000538:	d914      	bls.n	8000564 <__udivmoddi4+0x2b0>
 800053a:	3e02      	subs	r6, #2
 800053c:	4461      	add	r1, ip
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000544:	e738      	b.n	80003b8 <__udivmoddi4+0x104>
 8000546:	462e      	mov	r6, r5
 8000548:	4628      	mov	r0, r5
 800054a:	e705      	b.n	8000358 <__udivmoddi4+0xa4>
 800054c:	4606      	mov	r6, r0
 800054e:	e6e3      	b.n	8000318 <__udivmoddi4+0x64>
 8000550:	4618      	mov	r0, r3
 8000552:	e6f8      	b.n	8000346 <__udivmoddi4+0x92>
 8000554:	454b      	cmp	r3, r9
 8000556:	d2a9      	bcs.n	80004ac <__udivmoddi4+0x1f8>
 8000558:	ebb9 0802 	subs.w	r8, r9, r2
 800055c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000560:	3801      	subs	r0, #1
 8000562:	e7a3      	b.n	80004ac <__udivmoddi4+0x1f8>
 8000564:	4646      	mov	r6, r8
 8000566:	e7ea      	b.n	800053e <__udivmoddi4+0x28a>
 8000568:	4620      	mov	r0, r4
 800056a:	e794      	b.n	8000496 <__udivmoddi4+0x1e2>
 800056c:	4640      	mov	r0, r8
 800056e:	e7d1      	b.n	8000514 <__udivmoddi4+0x260>
 8000570:	46d0      	mov	r8, sl
 8000572:	e77b      	b.n	800046c <__udivmoddi4+0x1b8>
 8000574:	3b02      	subs	r3, #2
 8000576:	4461      	add	r1, ip
 8000578:	e732      	b.n	80003e0 <__udivmoddi4+0x12c>
 800057a:	4630      	mov	r0, r6
 800057c:	e709      	b.n	8000392 <__udivmoddi4+0xde>
 800057e:	4464      	add	r4, ip
 8000580:	3802      	subs	r0, #2
 8000582:	e742      	b.n	800040a <__udivmoddi4+0x156>

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <initUart1Pins>:
#include "UartQuickDirtyInit.h"
#include <stm32f4xx_hal.h>
#include <main.h>

void initUart1Pins( void )
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	603b      	str	r3, [r7, #0]
 80005a0:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <initUart1Pins+0x58>)
 80005a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a4:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <initUart1Pins+0x58>)
 80005a6:	f043 0301 	orr.w	r3, r3, #1
 80005aa:	6313      	str	r3, [r2, #48]	; 0x30
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <initUart1Pins+0x58>)
 80005ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b0:	f003 0301 	and.w	r3, r3, #1
 80005b4:	603b      	str	r3, [r7, #0]
 80005b6:	683b      	ldr	r3, [r7, #0]

	//PA9 is USART1_RX PA10 is USART1_TX
	GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80005b8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80005bc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005be:	2302      	movs	r3, #2
 80005c0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005c6:	2303      	movs	r3, #3
 80005c8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80005ca:	2307      	movs	r3, #7
 80005cc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	4619      	mov	r1, r3
 80005d2:	4804      	ldr	r0, [pc, #16]	; (80005e4 <initUart1Pins+0x5c>)
 80005d4:	f001 fcc8 	bl	8001f68 <HAL_GPIO_Init>
}
 80005d8:	bf00      	nop
 80005da:	3718      	adds	r7, #24
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40020000 	.word	0x40020000

080005e8 <initUart5Pins>:

void initUart5Pins( void )
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <initUart5Pins+0x98>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a1e      	ldr	r2, [pc, #120]	; (8000680 <initUart5Pins+0x98>)
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <initUart5Pins+0x98>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0304 	and.w	r3, r3, #4
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	4b18      	ldr	r3, [pc, #96]	; (8000680 <initUart5Pins+0x98>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a17      	ldr	r2, [pc, #92]	; (8000680 <initUart5Pins+0x98>)
 8000624:	f043 0308 	orr.w	r3, r3, #8
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b15      	ldr	r3, [pc, #84]	; (8000680 <initUart5Pins+0x98>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]


	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063c:	2302      	movs	r3, #2
 800063e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000644:	2303      	movs	r3, #3
 8000646:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000648:	2308      	movs	r3, #8
 800064a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	4619      	mov	r1, r3
 8000652:	480c      	ldr	r0, [pc, #48]	; (8000684 <initUart5Pins+0x9c>)
 8000654:	f001 fc88 	bl	8001f68 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000658:	2304      	movs	r3, #4
 800065a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065c:	2302      	movs	r3, #2
 800065e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000664:	2303      	movs	r3, #3
 8000666:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000668:	2308      	movs	r3, #8
 800066a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	4619      	mov	r1, r3
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <initUart5Pins+0xa0>)
 8000674:	f001 fc78 	bl	8001f68 <HAL_GPIO_Init>

}
 8000678:	bf00      	nop
 800067a:	3720      	adds	r7, #32
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40023800 	.word	0x40023800
 8000684:	40020800 	.word	0x40020800
 8000688:	40020c00 	.word	0x40020c00

0800068c <STM_UartInit>:
 * @param Baudrate desired baudrate the UART will be setup to use
 * @param DmaTx pointer to DMA struct to use when transmitting via DMA
 * @param DmaRx pointer to DMA struct to use when receiving via DMA
 */
void STM_UartInit( USART_TypeDef* STM_UART_PERIPH, uint32_t Baudrate, DMA_HandleTypeDef* DmaTx, DMA_HandleTypeDef* DmaRx )
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b098      	sub	sp, #96	; 0x60
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
 8000698:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef retVal;
	UART_HandleTypeDef uartInitStruct;
	assert_param(	STM_UART_PERIPH == USART1 ||
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	4a2e      	ldr	r2, [pc, #184]	; (8000758 <STM_UartInit+0xcc>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d007      	beq.n	80006b2 <STM_UartInit+0x26>
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4a2d      	ldr	r2, [pc, #180]	; (800075c <STM_UartInit+0xd0>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d003      	beq.n	80006b2 <STM_UartInit+0x26>
 80006aa:	2154      	movs	r1, #84	; 0x54
 80006ac:	482c      	ldr	r0, [pc, #176]	; (8000760 <STM_UartInit+0xd4>)
 80006ae:	f000 fe59 	bl	8001364 <assert_failed>
					STM_UART_PERIPH == UART5 );

	if(STM_UART_PERIPH == USART1)
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	4a28      	ldr	r2, [pc, #160]	; (8000758 <STM_UartInit+0xcc>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d110      	bne.n	80006dc <STM_UartInit+0x50>
	{
		initUart1Pins();
 80006ba:	f7ff ff65 	bl	8000588 <initUart1Pins>
		__USART1_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
 80006c2:	4b28      	ldr	r3, [pc, #160]	; (8000764 <STM_UartInit+0xd8>)
 80006c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c6:	4a27      	ldr	r2, [pc, #156]	; (8000764 <STM_UartInit+0xd8>)
 80006c8:	f043 0310 	orr.w	r3, r3, #16
 80006cc:	6453      	str	r3, [r2, #68]	; 0x44
 80006ce:	4b25      	ldr	r3, [pc, #148]	; (8000764 <STM_UartInit+0xd8>)
 80006d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d2:	f003 0310 	and.w	r3, r3, #16
 80006d6:	617b      	str	r3, [r7, #20]
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	e013      	b.n	8000704 <STM_UartInit+0x78>
	}
	else if (STM_UART_PERIPH == UART5)
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	4a1f      	ldr	r2, [pc, #124]	; (800075c <STM_UartInit+0xd0>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d10f      	bne.n	8000704 <STM_UartInit+0x78>
	{
		initUart5Pins();
 80006e4:	f7ff ff80 	bl	80005e8 <initUart5Pins>
		__UART5_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <STM_UartInit+0xd8>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	4a1c      	ldr	r2, [pc, #112]	; (8000764 <STM_UartInit+0xd8>)
 80006f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006f6:	6413      	str	r3, [r2, #64]	; 0x40
 80006f8:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <STM_UartInit+0xd8>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000700:	613b      	str	r3, [r7, #16]
 8000702:	693b      	ldr	r3, [r7, #16]
	}

	uartInitStruct.Instance = STM_UART_PERIPH;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	61bb      	str	r3, [r7, #24]
	uartInitStruct.Init.BaudRate = Baudrate;
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	61fb      	str	r3, [r7, #28]
	uartInitStruct.Init.WordLength = UART_WORDLENGTH_8B;
 800070c:	2300      	movs	r3, #0
 800070e:	623b      	str	r3, [r7, #32]
	uartInitStruct.Init.StopBits = UART_STOPBITS_1;
 8000710:	2300      	movs	r3, #0
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
	uartInitStruct.Init.Parity = UART_PARITY_NONE;
 8000714:	2300      	movs	r3, #0
 8000716:	62bb      	str	r3, [r7, #40]	; 0x28
	uartInitStruct.Init.Mode = UART_MODE_TX_RX;
 8000718:	230c      	movs	r3, #12
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uartInitStruct.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071c:	2300      	movs	r3, #0
 800071e:	633b      	str	r3, [r7, #48]	; 0x30
	uartInitStruct.Init.OverSampling = UART_OVERSAMPLING_8;
 8000720:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000724:	637b      	str	r3, [r7, #52]	; 0x34
	//uartInitStruct.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	uartInitStruct.hdmatx = DmaTx;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	64fb      	str	r3, [r7, #76]	; 0x4c
	uartInitStruct.hdmarx = DmaRx;
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	653b      	str	r3, [r7, #80]	; 0x50
	//uartInitStruct.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;

	retVal = HAL_UART_Init(&uartInitStruct);
 800072e:	f107 0318 	add.w	r3, r7, #24
 8000732:	4618      	mov	r0, r3
 8000734:	f003 f954 	bl	80039e0 <HAL_UART_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	assert_param(retVal == HAL_OK);
 800073e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000742:	2b00      	cmp	r3, #0
 8000744:	d003      	beq.n	800074e <STM_UartInit+0xc2>
 8000746:	2170      	movs	r1, #112	; 0x70
 8000748:	4805      	ldr	r0, [pc, #20]	; (8000760 <STM_UartInit+0xd4>)
 800074a:	f000 fe0b 	bl	8001364 <assert_failed>

}
 800074e:	bf00      	nop
 8000750:	3760      	adds	r7, #96	; 0x60
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40011000 	.word	0x40011000
 800075c:	40005000 	.word	0x40005000
 8000760:	08009630 	.word	0x08009630
 8000764:	40023800 	.word	0x40023800

08000768 <SetupUart5ExternalSim>:
 * @param Baudrate desired baudrate for the UART4
 *
 * This is a quick and dirty setup. . .
 */
void SetupUart5ExternalSim( uint32_t BaudRate )
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	//setup DMA
	uart5TxDmaSetup();
 8000770:	f000 f81a 	bl	80007a8 <uart5TxDmaSetup>

	//GPIO pins are setup in BSP/Nucleo_F767ZI_Init
	STM_UartInit(UART5, BaudRate, &hdma_uart5_tx, NULL);
 8000774:	2300      	movs	r3, #0
 8000776:	4a09      	ldr	r2, [pc, #36]	; (800079c <SetupUart5ExternalSim+0x34>)
 8000778:	6879      	ldr	r1, [r7, #4]
 800077a:	4809      	ldr	r0, [pc, #36]	; (80007a0 <SetupUart5ExternalSim+0x38>)
 800077c:	f7ff ff86 	bl	800068c <STM_UartInit>

	//also enable DMA for UART5 Transmits
	UART5->CR3 |= USART_CR3_DMAT;
 8000780:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <SetupUart5ExternalSim+0x38>)
 8000782:	695b      	ldr	r3, [r3, #20]
 8000784:	4a06      	ldr	r2, [pc, #24]	; (80007a0 <SetupUart5ExternalSim+0x38>)
 8000786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800078a:	6153      	str	r3, [r2, #20]
	 *	start the repeating DMA transfer.  Eventually, non-circular
	 *	receivers will loose a character here or there at high baudrates.
	 *	When this happens, SEGGER_SYSVIEW_Print() will stop printing when it hits
	 *	the first NULL character.
	 */
	uart5TxDmaStartRepeat(uart5Msg, sizeof(uart5Msg));
 800078c:	2110      	movs	r1, #16
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <SetupUart5ExternalSim+0x3c>)
 8000790:	f000 f874 	bl	800087c <uart5TxDmaStartRepeat>
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000030 	.word	0x20000030
 80007a0:	40005000 	.word	0x40005000
 80007a4:	08009940 	.word	0x08009940

080007a8 <uart5TxDmaSetup>:

static void uart5TxDmaSetup( void )
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	4b2d      	ldr	r3, [pc, #180]	; (8000868 <uart5TxDmaSetup+0xc0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a2c      	ldr	r2, [pc, #176]	; (8000868 <uart5TxDmaSetup+0xc0>)
 80007b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b2a      	ldr	r3, [pc, #168]	; (8000868 <uart5TxDmaSetup+0xc0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]

	  /* DMA interrupt init */
	  /* DMA1_Stream7_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2100      	movs	r1, #0
 80007ce:	202f      	movs	r0, #47	; 0x2f
 80007d0:	f000 ffd2 	bl	8001778 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80007d4:	202f      	movs	r0, #47	; 0x2f
 80007d6:	f000 fffb 	bl	80017d0 <HAL_NVIC_EnableIRQ>

	//initialize the DMA peripheral to transfer uart4Msg
	//to UART4 repeatedly
	memset(&hdma_uart5_tx, 0, sizeof(hdma_uart5_tx));
 80007da:	2260      	movs	r2, #96	; 0x60
 80007dc:	2100      	movs	r1, #0
 80007de:	4823      	ldr	r0, [pc, #140]	; (800086c <uart5TxDmaSetup+0xc4>)
 80007e0:	f008 ff12 	bl	8009608 <memset>
	hdma_uart5_tx.Instance = DMA1_Stream7;
 80007e4:	4b21      	ldr	r3, [pc, #132]	; (800086c <uart5TxDmaSetup+0xc4>)
 80007e6:	4a22      	ldr	r2, [pc, #136]	; (8000870 <uart5TxDmaSetup+0xc8>)
 80007e8:	601a      	str	r2, [r3, #0]
	hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;			//channel 4 is for UART5 Tx
 80007ea:	4b20      	ldr	r3, [pc, #128]	; (800086c <uart5TxDmaSetup+0xc4>)
 80007ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007f0:	605a      	str	r2, [r3, #4]
	hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;	//transfering out of memory and into the peripheral register
 80007f2:	4b1e      	ldr	r3, [pc, #120]	; (800086c <uart5TxDmaSetup+0xc4>)
 80007f4:	2240      	movs	r2, #64	; 0x40
 80007f6:	609a      	str	r2, [r3, #8]
	hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;	//no fifo
 80007f8:	4b1c      	ldr	r3, [pc, #112]	; (800086c <uart5TxDmaSetup+0xc4>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_uart5_tx.Init.MemBurst = DMA_MBURST_SINGLE;		//transfer 1 at a time
 80007fe:	4b1b      	ldr	r3, [pc, #108]	; (800086c <uart5TxDmaSetup+0xc4>)
 8000800:	2200      	movs	r2, #0
 8000802:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000804:	4b19      	ldr	r3, [pc, #100]	; (800086c <uart5TxDmaSetup+0xc4>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
	hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;			//increment 1 byte at a time
 800080a:	4b18      	ldr	r3, [pc, #96]	; (800086c <uart5TxDmaSetup+0xc4>)
 800080c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000810:	611a      	str	r2, [r3, #16]
	hdma_uart5_tx.Init.Mode = DMA_CIRCULAR;				//this will automatically restart the transfer at the beginning after it has finished
 8000812:	4b16      	ldr	r3, [pc, #88]	; (800086c <uart5TxDmaSetup+0xc4>)
 8000814:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000818:	61da      	str	r2, [r3, #28]
	hdma_uart5_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;	//write 1 at a time to the peripheral
 800081a:	4b14      	ldr	r3, [pc, #80]	; (800086c <uart5TxDmaSetup+0xc4>)
 800081c:	2200      	movs	r2, #0
 800081e:	631a      	str	r2, [r3, #48]	; 0x30
	hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;		//always keep the peripheral address the same (the Tx data register is always in the same location)
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <uart5TxDmaSetup+0xc4>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
	hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <uart5TxDmaSetup+0xc4>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
	//we're setting low priority since this is meant to be simulated data - the DMA
	//transfers of the active code should take priority
	hdma_uart5_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <uart5TxDmaSetup+0xc4>)
 800082e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000832:	621a      	str	r2, [r3, #32]
	assert_param(HAL_DMA_Init(&hdma_uart5_tx) == HAL_OK);
 8000834:	480d      	ldr	r0, [pc, #52]	; (800086c <uart5TxDmaSetup+0xc4>)
 8000836:	f000 ffe3 	bl	8001800 <HAL_DMA_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d003      	beq.n	8000848 <uart5TxDmaSetup+0xa0>
 8000840:	2165      	movs	r1, #101	; 0x65
 8000842:	480c      	ldr	r0, [pc, #48]	; (8000874 <uart5TxDmaSetup+0xcc>)
 8000844:	f000 fd8e 	bl	8001364 <assert_failed>
	DMA1_Stream7->CR &= ~DMA_SxCR_EN;
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <uart5TxDmaSetup+0xc8>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a08      	ldr	r2, [pc, #32]	; (8000870 <uart5TxDmaSetup+0xc8>)
 800084e:	f023 0301 	bic.w	r3, r3, #1
 8000852:	6013      	str	r3, [r2, #0]

	//set the DMA transmit mode flag to enable DMA transfers
	UART5->CR3 |= USART_CR3_DMAT;
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <uart5TxDmaSetup+0xd0>)
 8000856:	695b      	ldr	r3, [r3, #20]
 8000858:	4a07      	ldr	r2, [pc, #28]	; (8000878 <uart5TxDmaSetup+0xd0>)
 800085a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800085e:	6153      	str	r3, [r2, #20]
}
 8000860:	bf00      	nop
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40023800 	.word	0x40023800
 800086c:	20000030 	.word	0x20000030
 8000870:	400260b8 	.word	0x400260b8
 8000874:	08009654 	.word	0x08009654
 8000878:	40005000 	.word	0x40005000

0800087c <uart5TxDmaStartRepeat>:
 * that will automatically repeat after it is finished
 * @param Msg pointer to array to transfer
 * @param Len number of elements in the array
 */
static void uart5TxDmaStartRepeat( const uint8_t* Msg, uint16_t Len )
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	460b      	mov	r3, r1
 8000886:	807b      	strh	r3, [r7, #2]

	//clear the transfer complete flag to make sure our transfer starts
	//UART5->CR |= USART_SR_TC;
	UART5->SR &= ~USART_SR_TC;
 8000888:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <uart5TxDmaStartRepeat+0x3c>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <uart5TxDmaStartRepeat+0x3c>)
 800088e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000892:	6013      	str	r3, [r2, #0]
	assert_param(HAL_DMA_Start(&hdma_uart5_tx, (uint32_t)Msg, (uint32_t)&(UART5->DR), Len) == HAL_OK);
 8000894:	6879      	ldr	r1, [r7, #4]
 8000896:	887b      	ldrh	r3, [r7, #2]
 8000898:	4a08      	ldr	r2, [pc, #32]	; (80008bc <uart5TxDmaStartRepeat+0x40>)
 800089a:	4809      	ldr	r0, [pc, #36]	; (80008c0 <uart5TxDmaStartRepeat+0x44>)
 800089c:	f001 f9ca 	bl	8001c34 <HAL_DMA_Start>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d003      	beq.n	80008ae <uart5TxDmaStartRepeat+0x32>
 80008a6:	2178      	movs	r1, #120	; 0x78
 80008a8:	4806      	ldr	r0, [pc, #24]	; (80008c4 <uart5TxDmaStartRepeat+0x48>)
 80008aa:	f000 fd5b 	bl	8001364 <assert_failed>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40005000 	.word	0x40005000
 80008bc:	40005004 	.word	0x40005004
 80008c0:	20000030 	.word	0x20000030
 80008c4:	08009654 	.word	0x08009654

080008c8 <DMA1_Stream7_IRQHandler>:

void DMA1_Stream7_IRQHandler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
	//shouldn't ever get here - interrupts are not enabled
	while(1);
 80008cc:	e7fe      	b.n	80008cc <DMA1_Stream7_IRQHandler+0x4>
	...

080008d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f003 0307 	and.w	r3, r3, #7
 80008de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <__NVIC_SetPriorityGrouping+0x44>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008ec:	4013      	ands	r3, r2
 80008ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000902:	4a04      	ldr	r2, [pc, #16]	; (8000914 <__NVIC_SetPriorityGrouping+0x44>)
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	60d3      	str	r3, [r2, #12]
}
 8000908:	bf00      	nop
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000926:	2b00      	cmp	r3, #0
 8000928:	db0b      	blt.n	8000942 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	f003 021f 	and.w	r2, r3, #31
 8000930:	4907      	ldr	r1, [pc, #28]	; (8000950 <__NVIC_EnableIRQ+0x38>)
 8000932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000936:	095b      	lsrs	r3, r3, #5
 8000938:	2001      	movs	r0, #1
 800093a:	fa00 f202 	lsl.w	r2, r0, r2
 800093e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000e100 	.word	0xe000e100

08000954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	6039      	str	r1, [r7, #0]
 800095e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000964:	2b00      	cmp	r3, #0
 8000966:	db0a      	blt.n	800097e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	b2da      	uxtb	r2, r3
 800096c:	490c      	ldr	r1, [pc, #48]	; (80009a0 <__NVIC_SetPriority+0x4c>)
 800096e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000972:	0112      	lsls	r2, r2, #4
 8000974:	b2d2      	uxtb	r2, r2
 8000976:	440b      	add	r3, r1
 8000978:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800097c:	e00a      	b.n	8000994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	b2da      	uxtb	r2, r3
 8000982:	4908      	ldr	r1, [pc, #32]	; (80009a4 <__NVIC_SetPriority+0x50>)
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	f003 030f 	and.w	r3, r3, #15
 800098a:	3b04      	subs	r3, #4
 800098c:	0112      	lsls	r2, r2, #4
 800098e:	b2d2      	uxtb	r2, r2
 8000990:	440b      	add	r3, r1
 8000992:	761a      	strb	r2, [r3, #24]
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	e000e100 	.word	0xe000e100
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <main>:
static uint_fast16_t rxLen = 0;

static DMA_HandleTypeDef usart1DmaRx;

int main()
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af02      	add	r7, sp, #8


	HWInit();
 80009ae:	f000 f9dd 	bl	8000d6c <HWInit>
	SEGGER_SYSVIEW_Conf();
 80009b2:	f008 fcbb 	bl	800932c <SEGGER_SYSVIEW_Conf>

	//ensure proper priority grouping for freeRTOS
	NVIC_SetPriorityGrouping(0);
 80009b6:	2000      	movs	r0, #0
 80009b8:	f7ff ff8a 	bl	80008d0 <__NVIC_SetPriorityGrouping>
	//this delay is only present since we're using a simple
	//block-based buffer for receiving data - the transmission
	//needs to start after the receiver is ready for data for the
	//strings to start in the correct position in this simple setup
	TimerHandle_t oneShotHandle =
			xTimerCreate(	"startUart5Traffic",
 80009bc:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <main+0x94>)
 80009be:	9300      	str	r3, [sp, #0]
 80009c0:	2300      	movs	r3, #0
 80009c2:	2200      	movs	r2, #0
 80009c4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009c8:	481d      	ldr	r0, [pc, #116]	; (8000a40 <main+0x98>)
 80009ca:	f005 fef9 	bl	80067c0 <xTimerCreate>
 80009ce:	6078      	str	r0, [r7, #4]
					500 /portTICK_PERIOD_MS,
					pdFALSE,
					NULL,
					startUart5Traffic);
	assert_param(oneShotHandle != NULL);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d103      	bne.n	80009de <main+0x36>
 80009d6:	213f      	movs	r1, #63	; 0x3f
 80009d8:	481a      	ldr	r0, [pc, #104]	; (8000a44 <main+0x9c>)
 80009da:	f000 fcc3 	bl	8001364 <assert_failed>
	xTimerStart(oneShotHandle, 0);
 80009de:	f004 ff93 	bl	8005908 <xTaskGetTickCount>
 80009e2:	4602      	mov	r2, r0
 80009e4:	2300      	movs	r3, #0
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	2300      	movs	r3, #0
 80009ea:	2101      	movs	r1, #1
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f005 ff43 	bl	8006878 <xTimerGenericCommand>

	//setup tasks, making sure they have been properly created before moving on
	rxStream = xStreamBufferCreate( 100, 1);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2101      	movs	r1, #1
 80009f6:	2064      	movs	r0, #100	; 0x64
 80009f8:	f004 f9a2 	bl	8004d40 <xStreamBufferGenericCreate>
 80009fc:	4603      	mov	r3, r0
 80009fe:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <main+0xa0>)
 8000a00:	6013      	str	r3, [r2, #0]
	assert_param(rxStream != NULL);
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <main+0xa0>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d103      	bne.n	8000a12 <main+0x6a>
 8000a0a:	2144      	movs	r1, #68	; 0x44
 8000a0c:	480d      	ldr	r0, [pc, #52]	; (8000a44 <main+0x9c>)
 8000a0e:	f000 fca9 	bl	8001364 <assert_failed>

	assert_param(xTaskCreate(uartPrintOutTask, "uartPrint", STACK_SIZE, NULL, tskIDLE_PRIORITY + 3, NULL) == pdPASS);
 8000a12:	2300      	movs	r3, #0
 8000a14:	9301      	str	r3, [sp, #4]
 8000a16:	2303      	movs	r3, #3
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	2280      	movs	r2, #128	; 0x80
 8000a1e:	490b      	ldr	r1, [pc, #44]	; (8000a4c <main+0xa4>)
 8000a20:	480b      	ldr	r0, [pc, #44]	; (8000a50 <main+0xa8>)
 8000a22:	f004 fcfd 	bl	8005420 <xTaskCreate>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d003      	beq.n	8000a34 <main+0x8c>
 8000a2c:	2146      	movs	r1, #70	; 0x46
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <main+0x9c>)
 8000a30:	f000 fc98 	bl	8001364 <assert_failed>

	//start the scheduler - shouldn't return unless there's a problem
	vTaskStartScheduler();
 8000a34:	f004 fe58 	bl	80056e8 <vTaskStartScheduler>

	//if you've wound up here, there is likely an issue with overrunning the freeRTOS heap
	while(1)
 8000a38:	e7fe      	b.n	8000a38 <main+0x90>
 8000a3a:	bf00      	nop
 8000a3c:	08000bbd 	.word	0x08000bbd
 8000a40:	0800966c 	.word	0x0800966c
 8000a44:	08009680 	.word	0x08009680
 8000a48:	200000a4 	.word	0x200000a4
 8000a4c:	080096a8 	.word	0x080096a8
 8000a50:	08000bf1 	.word	0x08000bf1

08000a54 <setupUSART1DMA>:
}
	/**
	 * sets up DMA for USART2 reception into a single buffer.
	 */
void setupUSART1DMA( void )
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0

	__HAL_RCC_DMA2_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	4b2b      	ldr	r3, [pc, #172]	; (8000b0c <setupUSART1DMA+0xb8>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a2a      	ldr	r2, [pc, #168]	; (8000b0c <setupUSART1DMA+0xb8>)
 8000a64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b28      	ldr	r3, [pc, #160]	; (8000b0c <setupUSART1DMA+0xb8>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]

	NVIC_SetPriority(DMA2_Stream5_IRQn, 6);
 8000a76:	2106      	movs	r1, #6
 8000a78:	2044      	movs	r0, #68	; 0x44
 8000a7a:	f7ff ff6b 	bl	8000954 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000a7e:	2044      	movs	r0, #68	; 0x44
 8000a80:	f7ff ff4a 	bl	8000918 <__NVIC_EnableIRQ>


	//initialize the DMA peripheral to transfer uart4Msg
	//to UART5 repeatedly
	memset(&usart1DmaRx, 0, sizeof(usart1DmaRx));
 8000a84:	2260      	movs	r2, #96	; 0x60
 8000a86:	2100      	movs	r1, #0
 8000a88:	4821      	ldr	r0, [pc, #132]	; (8000b10 <setupUSART1DMA+0xbc>)
 8000a8a:	f008 fdbd 	bl	8009608 <memset>
//		Error_Handler();
//	}


 /* USART1_RX Init */
	usart1DmaRx.Instance = DMA2_Stream5;
 8000a8e:	4b20      	ldr	r3, [pc, #128]	; (8000b10 <setupUSART1DMA+0xbc>)
 8000a90:	4a20      	ldr	r2, [pc, #128]	; (8000b14 <setupUSART1DMA+0xc0>)
 8000a92:	601a      	str	r2, [r3, #0]
	usart1DmaRx.Init.Channel = DMA_CHANNEL_4;
 8000a94:	4b1e      	ldr	r3, [pc, #120]	; (8000b10 <setupUSART1DMA+0xbc>)
 8000a96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a9a:	605a      	str	r2, [r3, #4]
	usart1DmaRx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a9c:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <setupUSART1DMA+0xbc>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
	usart1DmaRx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aa2:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <setupUSART1DMA+0xbc>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
	usart1DmaRx.Init.MemInc = DMA_MINC_ENABLE;
 8000aa8:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <setupUSART1DMA+0xbc>)
 8000aaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aae:	611a      	str	r2, [r3, #16]
	usart1DmaRx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ab0:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <setupUSART1DMA+0xbc>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	615a      	str	r2, [r3, #20]
	usart1DmaRx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ab6:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <setupUSART1DMA+0xbc>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
	usart1DmaRx.Init.Mode = DMA_NORMAL;
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <setupUSART1DMA+0xbc>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
	usart1DmaRx.Init.Priority = DMA_PRIORITY_HIGH;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <setupUSART1DMA+0xbc>)
 8000ac4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ac8:	621a      	str	r2, [r3, #32]
	usart1DmaRx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <setupUSART1DMA+0xbc>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	625a      	str	r2, [r3, #36]	; 0x24
	usart1DmaRx.Init.PeriphBurst = DMA_PBURST_SINGLE;		//write 1 at a time to the peripheral
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <setupUSART1DMA+0xbc>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	631a      	str	r2, [r3, #48]	; 0x30
	usart1DmaRx.Init.MemBurst = DMA_MBURST_SINGLE;		//transfer 1 at a time
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <setupUSART1DMA+0xbc>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_DMA_Init(&usart1DmaRx) != HAL_OK)
 8000adc:	480c      	ldr	r0, [pc, #48]	; (8000b10 <setupUSART1DMA+0xbc>)
 8000ade:	f000 fe8f 	bl	8001800 <HAL_DMA_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <setupUSART1DMA+0x98>
	{
	  Error_Handler();
 8000ae8:	f000 fc34 	bl	8001354 <Error_Handler>
	}

	DMA2_Stream5->CR |= DMA_SxCR_TCIE;	//enable transfer complete interrupts
 8000aec:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <setupUSART1DMA+0xc0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a08      	ldr	r2, [pc, #32]	; (8000b14 <setupUSART1DMA+0xc0>)
 8000af2:	f043 0310 	orr.w	r3, r3, #16
 8000af6:	6013      	str	r3, [r2, #0]
	USART1->CR3 |= USART_CR3_DMAR; //  USART_CR3_DMAR_Msk;	//set the DMA receive mode flag in the USART
 8000af8:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <setupUSART1DMA+0xc4>)
 8000afa:	695b      	ldr	r3, [r3, #20]
 8000afc:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <setupUSART1DMA+0xc4>)
 8000afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b02:	6153      	str	r3, [r2, #20]
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	200000b0 	.word	0x200000b0
 8000b14:	40026488 	.word	0x40026488
 8000b18:	40011000 	.word	0x40011000

08000b1c <startReceiveDMA>:
/**
 * Start an interrupt driven receive.  This particular ISR is hard-coded
 * to give a semaphore when the reception is finished
 */
int32_t startReceiveDMA( uint8_t* Buffer, uint_fast16_t Len )
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
	if(!rxInProgress && (Buffer != NULL))
 8000b26:	4b20      	ldr	r3, [pc, #128]	; (8000ba8 <startReceiveDMA+0x8c>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	f083 0301 	eor.w	r3, r3, #1
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d033      	beq.n	8000b9c <startReceiveDMA+0x80>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d030      	beq.n	8000b9c <startReceiveDMA+0x80>
	{
		rxInProgress = true;
 8000b3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <startReceiveDMA+0x8c>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	701a      	strb	r2, [r3, #0]
		rxLen = Len;
 8000b40:	4a1a      	ldr	r2, [pc, #104]	; (8000bac <startReceiveDMA+0x90>)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	6013      	str	r3, [r2, #0]

		//get the DMA peripheral ready to receive data immediately before enabling UART
		//so there is no chance of overrun
		//dma stream enable bit must be toggled before a transfer will properly restart
		__HAL_DMA_DISABLE(&usart1DmaRx);
 8000b46:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <startReceiveDMA+0x94>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <startReceiveDMA+0x94>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f022 0201 	bic.w	r2, r2, #1
 8000b54:	601a      	str	r2, [r3, #0]
		setupUSART1DMA();
 8000b56:	f7ff ff7d 	bl	8000a54 <setupUSART1DMA>
		if(HAL_DMA_Start(&usart1DmaRx, (uint32_t)&(USART1->DR), (uint32_t) Buffer, Len) != HAL_OK)
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	4915      	ldr	r1, [pc, #84]	; (8000bb4 <startReceiveDMA+0x98>)
 8000b60:	4813      	ldr	r0, [pc, #76]	; (8000bb0 <startReceiveDMA+0x94>)
 8000b62:	f001 f867 	bl	8001c34 <HAL_DMA_Start>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d002      	beq.n	8000b72 <startReceiveDMA+0x56>
		{
			return -1;
 8000b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b70:	e016      	b.n	8000ba0 <startReceiveDMA+0x84>
		}

		//enable the UART
		//clears error flags
		//clear error flags
		USART1->SR &= ~(USART_SR_ORE |  // overun error
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <startReceiveDMA+0x9c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a10      	ldr	r2, [pc, #64]	; (8000bb8 <startReceiveDMA+0x9c>)
 8000b78:	f023 030f 	bic.w	r3, r3, #15
 8000b7c:	6013      	str	r3, [r2, #0]
		//we'll wind up with a lot of noise on the line (the way the ISR is written will
		//cause a transfer to terminate if there are any errors are detected, rather than simply
		//continue with what data it can).  In this specific application, most of the "errors" at baudrates below
		//460800 are noise detection
		//USART2->CR3 |= (USART_CR3_EIE);	//enable error interrupts
		NVIC_SetPriority(USART1_IRQn, 6);
 8000b7e:	2106      	movs	r1, #6
 8000b80:	2025      	movs	r0, #37	; 0x25
 8000b82:	f7ff fee7 	bl	8000954 <__NVIC_SetPriority>
		NVIC_EnableIRQ(USART1_IRQn);
 8000b86:	2025      	movs	r0, #37	; 0x25
 8000b88:	f7ff fec6 	bl	8000918 <__NVIC_EnableIRQ>
		USART1->CR1 |= (USART_CR1_UE);
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <startReceiveDMA+0x9c>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	4a09      	ldr	r2, [pc, #36]	; (8000bb8 <startReceiveDMA+0x9c>)
 8000b92:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b96:	60d3      	str	r3, [r2, #12]
		return 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	e001      	b.n	8000ba0 <startReceiveDMA+0x84>
	}

	return -1;
 8000b9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	200000a8 	.word	0x200000a8
 8000bac:	200000ac 	.word	0x200000ac
 8000bb0:	200000b0 	.word	0x200000b0
 8000bb4:	40011004 	.word	0x40011004
 8000bb8:	40011000 	.word	0x40011000

08000bbc <startUart5Traffic>:



void startUart5Traffic( TimerHandle_t xTimer )
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	SetupUart5ExternalSim(BAUDRATE);
 8000bc4:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000bc8:	f7ff fdce 	bl	8000768 <SetupUart5ExternalSim>
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <stopReceiveDMA>:

void stopReceiveDMA( void )
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	rxInProgress = false;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <stopReceiveDMA+0x14>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
	HAL_DMA_Abort(&usart1DmaRx);
 8000bde:	4803      	ldr	r0, [pc, #12]	; (8000bec <stopReceiveDMA+0x18>)
 8000be0:	f001 f872 	bl	8001cc8 <HAL_DMA_Abort>
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	200000a8 	.word	0x200000a8
 8000bec:	200000b0 	.word	0x200000b0

08000bf0 <uartPrintOutTask>:


void uartPrintOutTask( void* NotUsed)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b088      	sub	sp, #32
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	uint8_t rxBufferedData[20];
	uint8_t numBytesReceived = 16;
 8000bf8:	2310      	movs	r3, #16
 8000bfa:	77fb      	strb	r3, [r7, #31]

	setupUSART1DMA();
 8000bfc:	f7ff ff2a 	bl	8000a54 <setupUSART1DMA>
	STM_UartInit(USART1, BAUDRATE, NULL, &usart1DmaRx);
 8000c00:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <uartPrintOutTask+0x70>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8000c08:	4816      	ldr	r0, [pc, #88]	; (8000c64 <uartPrintOutTask+0x74>)
 8000c0a:	f7ff fd3f 	bl	800068c <STM_UartInit>
	while(1)
	{
		//memset(rxBufferedData, 0, sizeof(rxBufferedData));
		memset(rxBufferedData, 0, 20);
 8000c0e:	f107 0308 	add.w	r3, r7, #8
 8000c12:	2214      	movs	r2, #20
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f008 fcf6 	bl	8009608 <memset>
		startReceiveDMA(rxData, expectedLen);
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <uartPrintOutTask+0x78>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	4619      	mov	r1, r3
 8000c22:	4812      	ldr	r0, [pc, #72]	; (8000c6c <uartPrintOutTask+0x7c>)
 8000c24:	f7ff ff7a 	bl	8000b1c <startReceiveDMA>
		uint8_t numBytes = xStreamBufferReceive(	rxStream,
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <uartPrintOutTask+0x80>)
 8000c2a:	6818      	ldr	r0, [r3, #0]
 8000c2c:	7ffa      	ldrb	r2, [r7, #31]
 8000c2e:	f107 0108 	add.w	r1, r7, #8
 8000c32:	2364      	movs	r3, #100	; 0x64
 8000c34:	f004 f9dc 	bl	8004ff0 <xStreamBufferReceive>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	77bb      	strb	r3, [r7, #30]
													rxBufferedData,
													numBytesReceived,
													100 );
		if(numBytes > 0)
 8000c3c:	7fbb      	ldrb	r3, [r7, #30]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d008      	beq.n	8000c54 <uartPrintOutTask+0x64>
		{
			SEGGER_SYSVIEW_PrintfHost("received: ");
 8000c42:	480c      	ldr	r0, [pc, #48]	; (8000c74 <uartPrintOutTask+0x84>)
 8000c44:	f008 fa98 	bl	8009178 <SEGGER_SYSVIEW_PrintfHost>
			SEGGER_SYSVIEW_Print((char*)rxBufferedData);
 8000c48:	f107 0308 	add.w	r3, r7, #8
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f008 faa7 	bl	80091a0 <SEGGER_SYSVIEW_Print>
 8000c52:	e7dc      	b.n	8000c0e <uartPrintOutTask+0x1e>
		}
		else
		{
	        stopReceiveDMA();
 8000c54:	f7ff ffbe 	bl	8000bd4 <stopReceiveDMA>
			SEGGER_SYSVIEW_PrintfHost("timeout");
 8000c58:	4807      	ldr	r0, [pc, #28]	; (8000c78 <uartPrintOutTask+0x88>)
 8000c5a:	f008 fa8d 	bl	8009178 <SEGGER_SYSVIEW_PrintfHost>
	{
 8000c5e:	e7d6      	b.n	8000c0e <uartPrintOutTask+0x1e>
 8000c60:	200000b0 	.word	0x200000b0
 8000c64:	40011000 	.word	0x40011000
 8000c68:	20000000 	.word	0x20000000
 8000c6c:	20000090 	.word	0x20000090
 8000c70:	200000a4 	.word	0x200000a4
 8000c74:	080096b4 	.word	0x080096b4
 8000c78:	080096c0 	.word	0x080096c0

08000c7c <DMA2_Stream5_IRQHandler>:
/**
 * Given the DMA setup performed by setupUSART2DMA
 * this ISR will only execute when a DMA transfer is complete
 */
void DMA2_Stream5_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
	SEGGER_SYSVIEW_RecordEnterISR();
 8000c86:	f007 ffcf 	bl	8008c28 <SEGGER_SYSVIEW_RecordEnterISR>

	if(rxInProgress && (DMA2->HISR & DMA_HISR_TCIF5))
 8000c8a:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <DMA2_Stream5_IRQHandler+0x78>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d01a      	beq.n	8000cc8 <DMA2_Stream5_IRQHandler+0x4c>
 8000c92:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <DMA2_Stream5_IRQHandler+0x7c>)
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d014      	beq.n	8000cc8 <DMA2_Stream5_IRQHandler+0x4c>
	{
		rxInProgress = false;
 8000c9e:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <DMA2_Stream5_IRQHandler+0x78>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
		DMA2->HIFCR |= DMA_HIFCR_CTCIF5;
 8000ca4:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <DMA2_Stream5_IRQHandler+0x7c>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	4a13      	ldr	r2, [pc, #76]	; (8000cf8 <DMA2_Stream5_IRQHandler+0x7c>)
 8000caa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cae:	60d3      	str	r3, [r2, #12]
		xStreamBufferSendFromISR(	rxStream,
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <DMA2_Stream5_IRQHandler+0x80>)
 8000cb2:	6818      	ldr	r0, [r3, #0]
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <DMA2_Stream5_IRQHandler+0x84>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	461a      	mov	r2, r3
				rxData,
				expectedLen - DMA1_Stream5->NDTR,
 8000cba:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <DMA2_Stream5_IRQHandler+0x88>)
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	1ad2      	subs	r2, r2, r3
		xStreamBufferSendFromISR(	rxStream,
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	4911      	ldr	r1, [pc, #68]	; (8000d08 <DMA2_Stream5_IRQHandler+0x8c>)
 8000cc4:	f004 f8de 	bl	8004e84 <xStreamBufferSendFromISR>
				&xHigherPriorityTaskWoken);
	}
	SEGGER_SYSVIEW_RecordExitISR();
 8000cc8:	f007 fff0 	bl	8008cac <SEGGER_SYSVIEW_RecordExitISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d00a      	beq.n	8000ce8 <DMA2_Stream5_IRQHandler+0x6c>
 8000cd2:	f008 f807 	bl	8008ce4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8000cd6:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <DMA2_Stream5_IRQHandler+0x90>)
 8000cd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	f3bf 8f4f 	dsb	sy
 8000ce2:	f3bf 8f6f 	isb	sy
}
 8000ce6:	e001      	b.n	8000cec <DMA2_Stream5_IRQHandler+0x70>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000ce8:	f007 ffe0 	bl	8008cac <SEGGER_SYSVIEW_RecordExitISR>
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	200000a8 	.word	0x200000a8
 8000cf8:	40026400 	.word	0x40026400
 8000cfc:	200000a4 	.word	0x200000a4
 8000d00:	20000000 	.word	0x20000000
 8000d04:	40026088 	.word	0x40026088
 8000d08:	20000090 	.word	0x20000090
 8000d0c:	e000ed04 	.word	0xe000ed04

08000d10 <USART1_IRQHandler>:

/**
 * This ISR should only execute when there is an error
 */
void USART1_IRQHandler( void )
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	607b      	str	r3, [r7, #4]
	SEGGER_SYSVIEW_RecordEnterISR();
 8000d1a:	f007 ff85 	bl	8008c28 <SEGGER_SYSVIEW_RecordEnterISR>

	//first check for errors
		if(	USART1->SR & (	USART_SR_ORE_Msk |
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <USART1_IRQHandler+0x54>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 030f 	and.w	r3, r3, #15
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d005      	beq.n	8000d36 <USART1_IRQHandler+0x26>
				USART_SR_NE_Msk |
				USART_SR_FE_Msk |
				USART_SR_PE_Msk ))
		{
			//clear error flags
			USART1->SR &= ~(USART_SR_ORE |  // overun error
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <USART1_IRQHandler+0x54>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a0d      	ldr	r2, [pc, #52]	; (8000d64 <USART1_IRQHandler+0x54>)
 8000d30:	f023 030f 	bic.w	r3, r3, #15
 8000d34:	6013      	str	r3, [r2, #0]
	//there is no need to check receive not empty, since
	//receive interrupt requests are triggering transfers
	//through DMA1 channel 4 stream 5
	//	if(	USART2->ISR & USART_ISR_RXNE_Msk)

	SEGGER_SYSVIEW_RecordExitISR();
 8000d36:	f007 ffb9 	bl	8008cac <SEGGER_SYSVIEW_RecordExitISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d00a      	beq.n	8000d56 <USART1_IRQHandler+0x46>
 8000d40:	f007 ffd0 	bl	8008ce4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <USART1_IRQHandler+0x58>)
 8000d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	f3bf 8f4f 	dsb	sy
 8000d50:	f3bf 8f6f 	isb	sy
}
 8000d54:	e001      	b.n	8000d5a <USART1_IRQHandler+0x4a>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000d56:	f007 ffa9 	bl	8008cac <SEGGER_SYSVIEW_RecordExitISR>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40011000 	.word	0x40011000
 8000d68:	e000ed04 	.word	0xe000ed04

08000d6c <HWInit>:
 * Initialize the minimum amount of hardware that will be used in all examples
 * Other initialization might also be necessary (PWM for LED's, USART's, USB, etc)
 * and should be performed after the initial call to HWInit
 */
void HWInit( void )
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
	HAL_Init();
 8000d70:	f000 fc06 	bl	8001580 <HAL_Init>
	SystemClock_Config();
 8000d74:	f000 f806 	bl	8000d84 <SystemClock_Config>
	gpioPinsInit();			//initialize GPIO lines for LED's
 8000d78:	f000 f870 	bl	8000e5c <gpioPinsInit>
	rngInit();
 8000d7c:	f000 fac8 	bl	8001310 <rngInit>
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <SystemClock_Config>:
	return RNG->DR %Max + Min;
}


void SystemClock_Config(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b094      	sub	sp, #80	; 0x50
 8000d88:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8a:	f107 0320 	add.w	r3, r7, #32
 8000d8e:	2230      	movs	r2, #48	; 0x30
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f008 fc38 	bl	8009608 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d98:	f107 030c 	add.w	r3, r7, #12
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000da8:	2300      	movs	r3, #0
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	4b29      	ldr	r3, [pc, #164]	; (8000e54 <SystemClock_Config+0xd0>)
 8000dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db0:	4a28      	ldr	r2, [pc, #160]	; (8000e54 <SystemClock_Config+0xd0>)
 8000db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db6:	6413      	str	r3, [r2, #64]	; 0x40
 8000db8:	4b26      	ldr	r3, [pc, #152]	; (8000e54 <SystemClock_Config+0xd0>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	4b23      	ldr	r3, [pc, #140]	; (8000e58 <SystemClock_Config+0xd4>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dd0:	4a21      	ldr	r2, [pc, #132]	; (8000e58 <SystemClock_Config+0xd4>)
 8000dd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd6:	6013      	str	r3, [r2, #0]
 8000dd8:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <SystemClock_Config+0xd4>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000de4:	2302      	movs	r3, #2
 8000de6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000de8:	2301      	movs	r3, #1
 8000dea:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dec:	2310      	movs	r3, #16
 8000dee:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df0:	2302      	movs	r3, #2
 8000df2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000df4:	2300      	movs	r3, #0
 8000df6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000df8:	2308      	movs	r3, #8
 8000dfa:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 50;
 8000dfc:	2332      	movs	r3, #50	; 0x32
 8000dfe:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e00:	2304      	movs	r3, #4
 8000e02:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e04:	2307      	movs	r3, #7
 8000e06:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e08:	f107 0320 	add.w	r3, r7, #32
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f001 fbff 	bl	8002610 <HAL_RCC_OscConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <SystemClock_Config+0x98>
	{
		Error_Handler();
 8000e18:	f000 fa9c 	bl	8001354 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e20:	2302      	movs	r3, #2
 8000e22:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000e28:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e2c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000e2e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e32:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f001 ff10 	bl	8002c60 <HAL_RCC_ClockConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <SystemClock_Config+0xc6>
	{
		Error_Handler();
 8000e46:	f000 fa85 	bl	8001354 <Error_Handler>
	}

}
 8000e4a:	bf00      	nop
 8000e4c:	3750      	adds	r7, #80	; 0x50
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40007000 	.word	0x40007000

08000e5c <gpioPinsInit>:
/**
  * Initialize all relevant GPIO lines for LED's used in examples, as well as
  * USB pins
  */
static void gpioPinsInit(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08e      	sub	sp, #56	; 0x38
 8000e60:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
 8000e70:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	623b      	str	r3, [r7, #32]
 8000e76:	4bb2      	ldr	r3, [pc, #712]	; (8001140 <gpioPinsInit+0x2e4>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4ab1      	ldr	r2, [pc, #708]	; (8001140 <gpioPinsInit+0x2e4>)
 8000e7c:	f043 0304 	orr.w	r3, r3, #4
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4baf      	ldr	r3, [pc, #700]	; (8001140 <gpioPinsInit+0x2e4>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0304 	and.w	r3, r3, #4
 8000e8a:	623b      	str	r3, [r7, #32]
 8000e8c:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
 8000e92:	4bab      	ldr	r3, [pc, #684]	; (8001140 <gpioPinsInit+0x2e4>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4aaa      	ldr	r2, [pc, #680]	; (8001140 <gpioPinsInit+0x2e4>)
 8000e98:	f043 0320 	orr.w	r3, r3, #32
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4ba8      	ldr	r3, [pc, #672]	; (8001140 <gpioPinsInit+0x2e4>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0320 	and.w	r3, r3, #32
 8000ea6:	61fb      	str	r3, [r7, #28]
 8000ea8:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
 8000eae:	4ba4      	ldr	r3, [pc, #656]	; (8001140 <gpioPinsInit+0x2e4>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4aa3      	ldr	r2, [pc, #652]	; (8001140 <gpioPinsInit+0x2e4>)
 8000eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4ba1      	ldr	r3, [pc, #644]	; (8001140 <gpioPinsInit+0x2e4>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ec2:	61bb      	str	r3, [r7, #24]
 8000ec4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	4b9d      	ldr	r3, [pc, #628]	; (8001140 <gpioPinsInit+0x2e4>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a9c      	ldr	r2, [pc, #624]	; (8001140 <gpioPinsInit+0x2e4>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b9a      	ldr	r3, [pc, #616]	; (8001140 <gpioPinsInit+0x2e4>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	617b      	str	r3, [r7, #20]
 8000ee0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	4b96      	ldr	r3, [pc, #600]	; (8001140 <gpioPinsInit+0x2e4>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a95      	ldr	r2, [pc, #596]	; (8001140 <gpioPinsInit+0x2e4>)
 8000eec:	f043 0302 	orr.w	r3, r3, #2
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b93      	ldr	r3, [pc, #588]	; (8001140 <gpioPinsInit+0x2e4>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0302 	and.w	r3, r3, #2
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b8f      	ldr	r3, [pc, #572]	; (8001140 <gpioPinsInit+0x2e4>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a8e      	ldr	r2, [pc, #568]	; (8001140 <gpioPinsInit+0x2e4>)
 8000f08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b8c      	ldr	r3, [pc, #560]	; (8001140 <gpioPinsInit+0x2e4>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	4b88      	ldr	r3, [pc, #544]	; (8001140 <gpioPinsInit+0x2e4>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a87      	ldr	r2, [pc, #540]	; (8001140 <gpioPinsInit+0x2e4>)
 8000f24:	f043 0310 	orr.w	r3, r3, #16
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b85      	ldr	r3, [pc, #532]	; (8001140 <gpioPinsInit+0x2e4>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0310 	and.w	r3, r3, #16
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	4b81      	ldr	r3, [pc, #516]	; (8001140 <gpioPinsInit+0x2e4>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a80      	ldr	r2, [pc, #512]	; (8001140 <gpioPinsInit+0x2e4>)
 8000f40:	f043 0308 	orr.w	r3, r3, #8
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b7e      	ldr	r3, [pc, #504]	; (8001140 <gpioPinsInit+0x2e4>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0308 	and.w	r3, r3, #8
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2116      	movs	r1, #22
 8000f56:	487b      	ldr	r0, [pc, #492]	; (8001144 <gpioPinsInit+0x2e8>)
 8000f58:	f001 fb28 	bl	80025ac <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2180      	movs	r1, #128	; 0x80
 8000f60:	4879      	ldr	r0, [pc, #484]	; (8001148 <gpioPinsInit+0x2ec>)
 8000f62:	f001 fb23 	bl	80025ac <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000f6c:	4877      	ldr	r0, [pc, #476]	; (800114c <gpioPinsInit+0x2f0>)
 8000f6e:	f001 fb1d 	bl	80025ac <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000f78:	4875      	ldr	r0, [pc, #468]	; (8001150 <gpioPinsInit+0x2f4>)
 8000f7a:	f001 fb17 	bl	80025ac <HAL_GPIO_WritePin>

	/*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
	                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
	                           A7_Pin A8_Pin A9_Pin */
	GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000f7e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
			|A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
			|A7_Pin|A8_Pin|A9_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f90:	230c      	movs	r3, #12
 8000f92:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f98:	4619      	mov	r1, r3
 8000f9a:	486e      	ldr	r0, [pc, #440]	; (8001154 <gpioPinsInit+0x2f8>)
 8000f9c:	f000 ffe4 	bl	8001f68 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
	GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000fa0:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000fb2:	2305      	movs	r3, #5
 8000fb4:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4865      	ldr	r0, [pc, #404]	; (8001154 <gpioPinsInit+0x2f8>)
 8000fbe:	f000 ffd3 	bl	8001f68 <HAL_GPIO_Init>

	/*Configure GPIO pin : ENABLE_Pin */
	GPIO_InitStruct.Pin = ENABLE_Pin;
 8000fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fd4:	230e      	movs	r3, #14
 8000fd6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fdc:	4619      	mov	r1, r3
 8000fde:	485d      	ldr	r0, [pc, #372]	; (8001154 <gpioPinsInit+0x2f8>)
 8000fe0:	f000 ffc2 	bl	8001f68 <HAL_GPIO_Init>

	/*Configure GPIO pin : SDNWE_Pin */
	GPIO_InitStruct.Pin = SDNWE_Pin;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ff4:	230c      	movs	r3, #12
 8000ff6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4851      	ldr	r0, [pc, #324]	; (8001144 <gpioPinsInit+0x2e8>)
 8001000:	f000 ffb2 	bl	8001f68 <HAL_GPIO_Init>

	/*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
	GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001004:	2316      	movs	r3, #22
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001008:	2301      	movs	r3, #1
 800100a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	2300      	movs	r3, #0
 8001012:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001018:	4619      	mov	r1, r3
 800101a:	484a      	ldr	r0, [pc, #296]	; (8001144 <gpioPinsInit+0x2e8>)
 800101c:	f000 ffa4 	bl	8001f68 <HAL_GPIO_Init>

	/*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
	GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001020:	f248 0307 	movw	r3, #32775	; 0x8007
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001026:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001030:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001034:	4619      	mov	r1, r3
 8001036:	4844      	ldr	r0, [pc, #272]	; (8001148 <gpioPinsInit+0x2ec>)
 8001038:	f000 ff96 	bl	8001f68 <HAL_GPIO_Init>

	/*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
	                           R5_Pin */
	GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800103c:	f641 0358 	movw	r3, #6232	; 0x1858
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
			|R5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2300      	movs	r3, #0
 800104c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800104e:	230e      	movs	r3, #14
 8001050:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001056:	4619      	mov	r1, r3
 8001058:	483b      	ldr	r0, [pc, #236]	; (8001148 <gpioPinsInit+0x2ec>)
 800105a:	f000 ff85 	bl	8001f68 <HAL_GPIO_Init>

	/*Configure GPIO pin : ACP_RST_Pin */
	GPIO_InitStruct.Pin = ACP_RST_Pin;
 800105e:	2380      	movs	r3, #128	; 0x80
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001062:	2301      	movs	r3, #1
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800106e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001072:	4619      	mov	r1, r3
 8001074:	4834      	ldr	r0, [pc, #208]	; (8001148 <gpioPinsInit+0x2ec>)
 8001076:	f000 ff77 	bl	8001f68 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OC_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800107a:	2320      	movs	r3, #32
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800107e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001082:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108c:	4619      	mov	r1, r3
 800108e:	482d      	ldr	r0, [pc, #180]	; (8001144 <gpioPinsInit+0x2e8>)
 8001090:	f000 ff6a 	bl	8001f68 <HAL_GPIO_Init>

	/*Configure GPIO pins : R3_Pin R6_Pin */
	GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001094:	2303      	movs	r3, #3
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80010a4:	2309      	movs	r3, #9
 80010a6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ac:	4619      	mov	r1, r3
 80010ae:	482a      	ldr	r0, [pc, #168]	; (8001158 <gpioPinsInit+0x2fc>)
 80010b0:	f000 ff5a 	bl	8001f68 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 80010b4:	2304      	movs	r3, #4
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80010c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c4:	4619      	mov	r1, r3
 80010c6:	4824      	ldr	r0, [pc, #144]	; (8001158 <gpioPinsInit+0x2fc>)
 80010c8:	f000 ff4e 	bl	8001f68 <HAL_GPIO_Init>

	/*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
	                           SDCLK_Pin SDNCAS_Pin */
	GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80010cc:	f248 1333 	movw	r3, #33075	; 0x8133
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
			|SDCLK_Pin|SDNCAS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d2:	2302      	movs	r3, #2
 80010d4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010da:	2303      	movs	r3, #3
 80010dc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010de:	230c      	movs	r3, #12
 80010e0:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e6:	4619      	mov	r1, r3
 80010e8:	4819      	ldr	r0, [pc, #100]	; (8001150 <gpioPinsInit+0x2f4>)
 80010ea:	f000 ff3d 	bl	8001f68 <HAL_GPIO_Init>

	/*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
	                           D8_Pin D9_Pin D10_Pin D11_Pin
	                           D12_Pin NBL0_Pin NBL1_Pin */
	GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80010ee:	f64f 7383 	movw	r3, #65411	; 0xff83
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
			|D8_Pin|D9_Pin|D10_Pin|D11_Pin
			|D12_Pin|NBL0_Pin|NBL1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001100:	230c      	movs	r3, #12
 8001102:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001108:	4619      	mov	r1, r3
 800110a:	4814      	ldr	r0, [pc, #80]	; (800115c <gpioPinsInit+0x300>)
 800110c:	f000 ff2c 	bl	8001f68 <HAL_GPIO_Init>

	/*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
	GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001110:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2300      	movs	r3, #0
 8001120:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001122:	230e      	movs	r3, #14
 8001124:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001126:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112a:	4619      	mov	r1, r3
 800112c:	480a      	ldr	r0, [pc, #40]	; (8001158 <gpioPinsInit+0x2fc>)
 800112e:	f000 ff1b 	bl	8001f68 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
	GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001132:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28
 800113c:	e010      	b.n	8001160 <gpioPinsInit+0x304>
 800113e:	bf00      	nop
 8001140:	40023800 	.word	0x40023800
 8001144:	40020800 	.word	0x40020800
 8001148:	40020000 	.word	0x40020000
 800114c:	40020c00 	.word	0x40020c00
 8001150:	40021800 	.word	0x40021800
 8001154:	40021400 	.word	0x40021400
 8001158:	40020400 	.word	0x40020400
 800115c:	40021000 	.word	0x40021000
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001168:	230c      	movs	r3, #12
 800116a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001170:	4619      	mov	r1, r3
 8001172:	4862      	ldr	r0, [pc, #392]	; (80012fc <gpioPinsInit+0x4a0>)
 8001174:	f000 fef8 	bl	8001f68 <HAL_GPIO_Init>

	/*Configure GPIO pin : VBUS_HS_Pin */
	GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001178:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800117e:	2300      	movs	r3, #0
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118a:	4619      	mov	r1, r3
 800118c:	485b      	ldr	r0, [pc, #364]	; (80012fc <gpioPinsInit+0x4a0>)
 800118e:	f000 feeb 	bl	8001f68 <HAL_GPIO_Init>

	/*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
	                           D1_Pin D2_Pin D3_Pin */
	GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001192:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
			|D1_Pin|D2_Pin|D3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a0:	2303      	movs	r3, #3
 80011a2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011a4:	230c      	movs	r3, #12
 80011a6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ac:	4619      	mov	r1, r3
 80011ae:	4854      	ldr	r0, [pc, #336]	; (8001300 <gpioPinsInit+0x4a4>)
 80011b0:	f000 feda 	bl	8001f68 <HAL_GPIO_Init>

	/*Configure GPIO pin : TE_Pin */
	GPIO_InitStruct.Pin = TE_Pin;
 80011b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ba:	2300      	movs	r3, #0
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80011c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c6:	4619      	mov	r1, r3
 80011c8:	484d      	ldr	r0, [pc, #308]	; (8001300 <gpioPinsInit+0x4a4>)
 80011ca:	f000 fecd 	bl	8001f68 <HAL_GPIO_Init>

	/*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
	GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80011ce:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d4:	2301      	movs	r3, #1
 80011d6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e4:	4619      	mov	r1, r3
 80011e6:	4846      	ldr	r0, [pc, #280]	; (8001300 <gpioPinsInit+0x4a4>)
 80011e8:	f000 febe 	bl	8001f68 <HAL_GPIO_Init>

	/*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
	GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80011ec:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	2300      	movs	r3, #0
 80011fc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011fe:	230e      	movs	r3, #14
 8001200:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001206:	4619      	mov	r1, r3
 8001208:	483e      	ldr	r0, [pc, #248]	; (8001304 <gpioPinsInit+0x4a8>)
 800120a:	f000 fead 	bl	8001f68 <HAL_GPIO_Init>

	/*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
	GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800120e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	2300      	movs	r3, #0
 800121e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001220:	230e      	movs	r3, #14
 8001222:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001228:	4619      	mov	r1, r3
 800122a:	4837      	ldr	r0, [pc, #220]	; (8001308 <gpioPinsInit+0x4ac>)
 800122c:	f000 fe9c 	bl	8001f68 <HAL_GPIO_Init>

	/*Configure GPIO pin : I2C3_SDA_Pin */
	GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001230:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001236:	2312      	movs	r3, #18
 8001238:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001242:	2304      	movs	r3, #4
 8001244:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124a:	4619      	mov	r1, r3
 800124c:	482e      	ldr	r0, [pc, #184]	; (8001308 <gpioPinsInit+0x4ac>)
 800124e:	f000 fe8b 	bl	8001f68 <HAL_GPIO_Init>

	/*Configure GPIO pin : I2C3_SCL_Pin */
	GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001252:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001258:	2312      	movs	r3, #18
 800125a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001260:	2300      	movs	r3, #0
 8001262:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001264:	2304      	movs	r3, #4
 8001266:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126c:	4619      	mov	r1, r3
 800126e:	4827      	ldr	r0, [pc, #156]	; (800130c <gpioPinsInit+0x4b0>)
 8001270:	f000 fe7a 	bl	8001f68 <HAL_GPIO_Init>

	/*Configure GPIO pins : G7_Pin B2_Pin */
	GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001274:	2348      	movs	r3, #72	; 0x48
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001280:	2300      	movs	r3, #0
 8001282:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001284:	230e      	movs	r3, #14
 8001286:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128c:	4619      	mov	r1, r3
 800128e:	481c      	ldr	r0, [pc, #112]	; (8001300 <gpioPinsInit+0x4a4>)
 8001290:	f000 fe6a 	bl	8001f68 <HAL_GPIO_Init>

	/*Configure GPIO pins : G3_Pin B4_Pin */
	GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001294:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129a:	2302      	movs	r3, #2
 800129c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2300      	movs	r3, #0
 80012a4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80012a6:	2309      	movs	r3, #9
 80012a8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ae:	4619      	mov	r1, r3
 80012b0:	4814      	ldr	r0, [pc, #80]	; (8001304 <gpioPinsInit+0x4a8>)
 80012b2:	f000 fe59 	bl	8001f68 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin LD4_Pin */
	GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80012b6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012bc:	2301      	movs	r3, #1
 80012be:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2300      	movs	r3, #0
 80012c6:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012cc:	4619      	mov	r1, r3
 80012ce:	480d      	ldr	r0, [pc, #52]	; (8001304 <gpioPinsInit+0x4a8>)
 80012d0:	f000 fe4a 	bl	8001f68 <HAL_GPIO_Init>

	/*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
	GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80012d4:	2360      	movs	r3, #96	; 0x60
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d8:	2302      	movs	r3, #2
 80012da:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e0:	2303      	movs	r3, #3
 80012e2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012e4:	230c      	movs	r3, #12
 80012e6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ec:	4619      	mov	r1, r3
 80012ee:	4803      	ldr	r0, [pc, #12]	; (80012fc <gpioPinsInit+0x4a0>)
 80012f0:	f000 fe3a 	bl	8001f68 <HAL_GPIO_Init>

}
 80012f4:	bf00      	nop
 80012f6:	3738      	adds	r7, #56	; 0x38
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40020400 	.word	0x40020400
 8001300:	40020c00 	.word	0x40020c00
 8001304:	40021800 	.word	0x40021800
 8001308:	40020800 	.word	0x40020800
 800130c:	40020000 	.word	0x40020000

08001310 <rngInit>:

/**
 * Init the random number generator (RNG) peripheral
 */
static void rngInit( void )
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
	//start the peripheral clock
	__HAL_RCC_RNG_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <rngInit+0x3c>)
 800131c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800131e:	4a0b      	ldr	r2, [pc, #44]	; (800134c <rngInit+0x3c>)
 8001320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001324:	6353      	str	r3, [r2, #52]	; 0x34
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <rngInit+0x3c>)
 8001328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800132a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]

	//enable the random number generator
	RNG->CR |= RNG_CR_RNGEN;
 8001332:	4b07      	ldr	r3, [pc, #28]	; (8001350 <rngInit+0x40>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a06      	ldr	r2, [pc, #24]	; (8001350 <rngInit+0x40>)
 8001338:	f043 0304 	orr.w	r3, r3, #4
 800133c:	6013      	str	r3, [r2, #0]
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800
 8001350:	50060800 	.word	0x50060800

08001354 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
	...

08001364 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  SEGGER_SYSVIEW_PrintfHost("Assertion Failed:file %s \
 800136e:	683a      	ldr	r2, [r7, #0]
 8001370:	6879      	ldr	r1, [r7, #4]
 8001372:	4802      	ldr	r0, [pc, #8]	; (800137c <assert_failed+0x18>)
 8001374:	f007 ff00 	bl	8009178 <SEGGER_SYSVIEW_PrintfHost>
                            on line %d\r\n", file, line);
  while(1);
 8001378:	e7fe      	b.n	8001378 <assert_failed+0x14>
 800137a:	bf00      	nop
 800137c:	080096c8 	.word	0x080096c8

08001380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <HAL_MspInit+0x4c>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	4a0f      	ldr	r2, [pc, #60]	; (80013cc <HAL_MspInit+0x4c>)
 8001390:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001394:	6453      	str	r3, [r2, #68]	; 0x44
 8001396:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <HAL_MspInit+0x4c>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	603b      	str	r3, [r7, #0]
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <HAL_MspInit+0x4c>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	4a08      	ldr	r2, [pc, #32]	; (80013cc <HAL_MspInit+0x4c>)
 80013ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b0:	6413      	str	r3, [r2, #64]	; 0x40
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_MspInit+0x4c>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ba:	603b      	str	r3, [r7, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013be:	2007      	movs	r0, #7
 80013c0:	f000 f9ba 	bl	8001738 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40023800 	.word	0x40023800

080013d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08e      	sub	sp, #56	; 0x38
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80013d8:	2300      	movs	r3, #0
 80013da:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80013dc:	2300      	movs	r3, #0
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	4b33      	ldr	r3, [pc, #204]	; (80014b4 <HAL_InitTick+0xe4>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	4a32      	ldr	r2, [pc, #200]	; (80014b4 <HAL_InitTick+0xe4>)
 80013ea:	f043 0310 	orr.w	r3, r3, #16
 80013ee:	6413      	str	r3, [r2, #64]	; 0x40
 80013f0:	4b30      	ldr	r3, [pc, #192]	; (80014b4 <HAL_InitTick+0xe4>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	f003 0310 	and.w	r3, r3, #16
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013fc:	f107 0210 	add.w	r2, r7, #16
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	4611      	mov	r1, r2
 8001406:	4618      	mov	r0, r3
 8001408:	f001 ff0a 	bl	8003220 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800140c:	6a3b      	ldr	r3, [r7, #32]
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001412:	2b00      	cmp	r3, #0
 8001414:	d103      	bne.n	800141e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001416:	f001 fedb 	bl	80031d0 <HAL_RCC_GetPCLK1Freq>
 800141a:	6378      	str	r0, [r7, #52]	; 0x34
 800141c:	e004      	b.n	8001428 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800141e:	f001 fed7 	bl	80031d0 <HAL_RCC_GetPCLK1Freq>
 8001422:	4603      	mov	r3, r0
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800142a:	4a23      	ldr	r2, [pc, #140]	; (80014b8 <HAL_InitTick+0xe8>)
 800142c:	fba2 2303 	umull	r2, r3, r2, r3
 8001430:	0c9b      	lsrs	r3, r3, #18
 8001432:	3b01      	subs	r3, #1
 8001434:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001436:	4b21      	ldr	r3, [pc, #132]	; (80014bc <HAL_InitTick+0xec>)
 8001438:	4a21      	ldr	r2, [pc, #132]	; (80014c0 <HAL_InitTick+0xf0>)
 800143a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800143c:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <HAL_InitTick+0xec>)
 800143e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001442:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001444:	4a1d      	ldr	r2, [pc, #116]	; (80014bc <HAL_InitTick+0xec>)
 8001446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001448:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800144a:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <HAL_InitTick+0xec>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001450:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <HAL_InitTick+0xec>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001456:	4b19      	ldr	r3, [pc, #100]	; (80014bc <HAL_InitTick+0xec>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800145c:	4817      	ldr	r0, [pc, #92]	; (80014bc <HAL_InitTick+0xec>)
 800145e:	f001 ff11 	bl	8003284 <HAL_TIM_Base_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001468:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800146c:	2b00      	cmp	r3, #0
 800146e:	d11b      	bne.n	80014a8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001470:	4812      	ldr	r0, [pc, #72]	; (80014bc <HAL_InitTick+0xec>)
 8001472:	f002 f801 	bl	8003478 <HAL_TIM_Base_Start_IT>
 8001476:	4603      	mov	r3, r0
 8001478:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800147c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001480:	2b00      	cmp	r3, #0
 8001482:	d111      	bne.n	80014a8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001484:	2036      	movs	r0, #54	; 0x36
 8001486:	f000 f9a3 	bl	80017d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b0f      	cmp	r3, #15
 800148e:	d808      	bhi.n	80014a2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001490:	2200      	movs	r2, #0
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	2036      	movs	r0, #54	; 0x36
 8001496:	f000 f96f 	bl	8001778 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800149a:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <HAL_InitTick+0xf4>)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	e002      	b.n	80014a8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80014a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3738      	adds	r7, #56	; 0x38
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40023800 	.word	0x40023800
 80014b8:	431bde83 	.word	0x431bde83
 80014bc:	20000110 	.word	0x20000110
 80014c0:	40001000 	.word	0x40001000
 80014c4:	20000008 	.word	0x20000008

080014c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <NMI_Handler+0x4>

080014ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d2:	e7fe      	b.n	80014d2 <HardFault_Handler+0x4>

080014d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <MemManage_Handler+0x4>

080014da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014de:	e7fe      	b.n	80014de <BusFault_Handler+0x4>

080014e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <UsageFault_Handler+0x4>

080014e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014f8:	4802      	ldr	r0, [pc, #8]	; (8001504 <TIM6_DAC_IRQHandler+0x10>)
 80014fa:	f002 f883 	bl	8003604 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000110 	.word	0x20000110

08001508 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <SystemInit+0x20>)
 800150e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001512:	4a05      	ldr	r2, [pc, #20]	; (8001528 <SystemInit+0x20>)
 8001514:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001518:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800152c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001564 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001530:	480d      	ldr	r0, [pc, #52]	; (8001568 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001532:	490e      	ldr	r1, [pc, #56]	; (800156c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001534:	4a0e      	ldr	r2, [pc, #56]	; (8001570 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001538:	e002      	b.n	8001540 <LoopCopyDataInit>

0800153a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800153a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800153c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153e:	3304      	adds	r3, #4

08001540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001544:	d3f9      	bcc.n	800153a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001546:	4a0b      	ldr	r2, [pc, #44]	; (8001574 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001548:	4c0b      	ldr	r4, [pc, #44]	; (8001578 <LoopFillZerobss+0x26>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800154c:	e001      	b.n	8001552 <LoopFillZerobss>

0800154e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001550:	3204      	adds	r2, #4

08001552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001554:	d3fb      	bcc.n	800154e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001556:	f7ff ffd7 	bl	8001508 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800155a:	f008 f813 	bl	8009584 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800155e:	f7ff fa23 	bl	80009a8 <main>
  bx  lr    
 8001562:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001564:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800156c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001570:	080099a8 	.word	0x080099a8
  ldr r2, =_sbss
 8001574:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001578:	2001457c 	.word	0x2001457c

0800157c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800157c:	e7fe      	b.n	800157c <ADC_IRQHandler>
	...

08001580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001584:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <HAL_Init+0x40>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a0d      	ldr	r2, [pc, #52]	; (80015c0 <HAL_Init+0x40>)
 800158a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800158e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <HAL_Init+0x40>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <HAL_Init+0x40>)
 8001596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800159a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <HAL_Init+0x40>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a07      	ldr	r2, [pc, #28]	; (80015c0 <HAL_Init+0x40>)
 80015a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a8:	2003      	movs	r0, #3
 80015aa:	f000 f8c5 	bl	8001738 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ae:	2000      	movs	r0, #0
 80015b0:	f7ff ff0e 	bl	80013d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015b4:	f7ff fee4 	bl	8001380 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40023c00 	.word	0x40023c00

080015c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return uwTick;
 80015c8:	4b03      	ldr	r3, [pc, #12]	; (80015d8 <HAL_GetTick+0x14>)
 80015ca:	681b      	ldr	r3, [r3, #0]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	20000158 	.word	0x20000158

080015dc <__NVIC_SetPriorityGrouping>:
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <__NVIC_SetPriorityGrouping+0x44>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015f8:	4013      	ands	r3, r2
 80015fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800160c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800160e:	4a04      	ldr	r2, [pc, #16]	; (8001620 <__NVIC_SetPriorityGrouping+0x44>)
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	60d3      	str	r3, [r2, #12]
}
 8001614:	bf00      	nop
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <__NVIC_GetPriorityGrouping>:
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001628:	4b04      	ldr	r3, [pc, #16]	; (800163c <__NVIC_GetPriorityGrouping+0x18>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	0a1b      	lsrs	r3, r3, #8
 800162e:	f003 0307 	and.w	r3, r3, #7
}
 8001632:	4618      	mov	r0, r3
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <__NVIC_EnableIRQ>:
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	2b00      	cmp	r3, #0
 8001650:	db0b      	blt.n	800166a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	f003 021f 	and.w	r2, r3, #31
 8001658:	4907      	ldr	r1, [pc, #28]	; (8001678 <__NVIC_EnableIRQ+0x38>)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	095b      	lsrs	r3, r3, #5
 8001660:	2001      	movs	r0, #1
 8001662:	fa00 f202 	lsl.w	r2, r0, r2
 8001666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000e100 	.word	0xe000e100

0800167c <__NVIC_SetPriority>:
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	6039      	str	r1, [r7, #0]
 8001686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168c:	2b00      	cmp	r3, #0
 800168e:	db0a      	blt.n	80016a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	b2da      	uxtb	r2, r3
 8001694:	490c      	ldr	r1, [pc, #48]	; (80016c8 <__NVIC_SetPriority+0x4c>)
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	0112      	lsls	r2, r2, #4
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	440b      	add	r3, r1
 80016a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80016a4:	e00a      	b.n	80016bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4908      	ldr	r1, [pc, #32]	; (80016cc <__NVIC_SetPriority+0x50>)
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	f003 030f 	and.w	r3, r3, #15
 80016b2:	3b04      	subs	r3, #4
 80016b4:	0112      	lsls	r2, r2, #4
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	440b      	add	r3, r1
 80016ba:	761a      	strb	r2, [r3, #24]
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000e100 	.word	0xe000e100
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b089      	sub	sp, #36	; 0x24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f1c3 0307 	rsb	r3, r3, #7
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	bf28      	it	cs
 80016ee:	2304      	movcs	r3, #4
 80016f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3304      	adds	r3, #4
 80016f6:	2b06      	cmp	r3, #6
 80016f8:	d902      	bls.n	8001700 <NVIC_EncodePriority+0x30>
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3b03      	subs	r3, #3
 80016fe:	e000      	b.n	8001702 <NVIC_EncodePriority+0x32>
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	f04f 32ff 	mov.w	r2, #4294967295
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43da      	mvns	r2, r3
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	401a      	ands	r2, r3
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001718:	f04f 31ff 	mov.w	r1, #4294967295
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	fa01 f303 	lsl.w	r3, r1, r3
 8001722:	43d9      	mvns	r1, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001728:	4313      	orrs	r3, r2
         );
}
 800172a:	4618      	mov	r0, r3
 800172c:	3724      	adds	r7, #36	; 0x24
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
	...

08001738 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b07      	cmp	r3, #7
 8001744:	d00f      	beq.n	8001766 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b06      	cmp	r3, #6
 800174a:	d00c      	beq.n	8001766 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b05      	cmp	r3, #5
 8001750:	d009      	beq.n	8001766 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b04      	cmp	r3, #4
 8001756:	d006      	beq.n	8001766 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b03      	cmp	r3, #3
 800175c:	d003      	beq.n	8001766 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800175e:	2190      	movs	r1, #144	; 0x90
 8001760:	4804      	ldr	r0, [pc, #16]	; (8001774 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001762:	f7ff fdff 	bl	8001364 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff ff38 	bl	80015dc <__NVIC_SetPriorityGrouping>
}
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	0800970c 	.word	0x0800970c

08001778 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
 8001784:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b0f      	cmp	r3, #15
 800178e:	d903      	bls.n	8001798 <HAL_NVIC_SetPriority+0x20>
 8001790:	21a8      	movs	r1, #168	; 0xa8
 8001792:	480e      	ldr	r0, [pc, #56]	; (80017cc <HAL_NVIC_SetPriority+0x54>)
 8001794:	f7ff fde6 	bl	8001364 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	2b0f      	cmp	r3, #15
 800179c:	d903      	bls.n	80017a6 <HAL_NVIC_SetPriority+0x2e>
 800179e:	21a9      	movs	r1, #169	; 0xa9
 80017a0:	480a      	ldr	r0, [pc, #40]	; (80017cc <HAL_NVIC_SetPriority+0x54>)
 80017a2:	f7ff fddf 	bl	8001364 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a6:	f7ff ff3d 	bl	8001624 <__NVIC_GetPriorityGrouping>
 80017aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	68b9      	ldr	r1, [r7, #8]
 80017b0:	6978      	ldr	r0, [r7, #20]
 80017b2:	f7ff ff8d 	bl	80016d0 <NVIC_EncodePriority>
 80017b6:	4602      	mov	r2, r0
 80017b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017bc:	4611      	mov	r1, r2
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff ff5c 	bl	800167c <__NVIC_SetPriority>
}
 80017c4:	bf00      	nop
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	0800970c 	.word	0x0800970c

080017d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	da03      	bge.n	80017ea <HAL_NVIC_EnableIRQ+0x1a>
 80017e2:	21bc      	movs	r1, #188	; 0xbc
 80017e4:	4805      	ldr	r0, [pc, #20]	; (80017fc <HAL_NVIC_EnableIRQ+0x2c>)
 80017e6:	f7ff fdbd 	bl	8001364 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff ff26 	bl	8001640 <__NVIC_EnableIRQ>
}
 80017f4:	bf00      	nop
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	0800970c 	.word	0x0800970c

08001800 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800180c:	f7ff feda 	bl	80015c4 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e203      	b.n	8001c24 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a8b      	ldr	r2, [pc, #556]	; (8001a50 <HAL_DMA_Init+0x250>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d04e      	beq.n	80018c4 <HAL_DMA_Init+0xc4>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a8a      	ldr	r2, [pc, #552]	; (8001a54 <HAL_DMA_Init+0x254>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d049      	beq.n	80018c4 <HAL_DMA_Init+0xc4>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a88      	ldr	r2, [pc, #544]	; (8001a58 <HAL_DMA_Init+0x258>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d044      	beq.n	80018c4 <HAL_DMA_Init+0xc4>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a87      	ldr	r2, [pc, #540]	; (8001a5c <HAL_DMA_Init+0x25c>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d03f      	beq.n	80018c4 <HAL_DMA_Init+0xc4>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a85      	ldr	r2, [pc, #532]	; (8001a60 <HAL_DMA_Init+0x260>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d03a      	beq.n	80018c4 <HAL_DMA_Init+0xc4>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a84      	ldr	r2, [pc, #528]	; (8001a64 <HAL_DMA_Init+0x264>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d035      	beq.n	80018c4 <HAL_DMA_Init+0xc4>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a82      	ldr	r2, [pc, #520]	; (8001a68 <HAL_DMA_Init+0x268>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d030      	beq.n	80018c4 <HAL_DMA_Init+0xc4>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a81      	ldr	r2, [pc, #516]	; (8001a6c <HAL_DMA_Init+0x26c>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d02b      	beq.n	80018c4 <HAL_DMA_Init+0xc4>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a7f      	ldr	r2, [pc, #508]	; (8001a70 <HAL_DMA_Init+0x270>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d026      	beq.n	80018c4 <HAL_DMA_Init+0xc4>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a7e      	ldr	r2, [pc, #504]	; (8001a74 <HAL_DMA_Init+0x274>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d021      	beq.n	80018c4 <HAL_DMA_Init+0xc4>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a7c      	ldr	r2, [pc, #496]	; (8001a78 <HAL_DMA_Init+0x278>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d01c      	beq.n	80018c4 <HAL_DMA_Init+0xc4>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a7b      	ldr	r2, [pc, #492]	; (8001a7c <HAL_DMA_Init+0x27c>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d017      	beq.n	80018c4 <HAL_DMA_Init+0xc4>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a79      	ldr	r2, [pc, #484]	; (8001a80 <HAL_DMA_Init+0x280>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d012      	beq.n	80018c4 <HAL_DMA_Init+0xc4>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a78      	ldr	r2, [pc, #480]	; (8001a84 <HAL_DMA_Init+0x284>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d00d      	beq.n	80018c4 <HAL_DMA_Init+0xc4>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a76      	ldr	r2, [pc, #472]	; (8001a88 <HAL_DMA_Init+0x288>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d008      	beq.n	80018c4 <HAL_DMA_Init+0xc4>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a75      	ldr	r2, [pc, #468]	; (8001a8c <HAL_DMA_Init+0x28c>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d003      	beq.n	80018c4 <HAL_DMA_Init+0xc4>
 80018bc:	21b7      	movs	r1, #183	; 0xb7
 80018be:	4874      	ldr	r0, [pc, #464]	; (8001a90 <HAL_DMA_Init+0x290>)
 80018c0:	f7ff fd50 	bl	8001364 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d026      	beq.n	800191a <HAL_DMA_Init+0x11a>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80018d4:	d021      	beq.n	800191a <HAL_DMA_Init+0x11a>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80018de:	d01c      	beq.n	800191a <HAL_DMA_Init+0x11a>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80018e8:	d017      	beq.n	800191a <HAL_DMA_Init+0x11a>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80018f2:	d012      	beq.n	800191a <HAL_DMA_Init+0x11a>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80018fc:	d00d      	beq.n	800191a <HAL_DMA_Init+0x11a>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001906:	d008      	beq.n	800191a <HAL_DMA_Init+0x11a>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8001910:	d003      	beq.n	800191a <HAL_DMA_Init+0x11a>
 8001912:	21b8      	movs	r1, #184	; 0xb8
 8001914:	485e      	ldr	r0, [pc, #376]	; (8001a90 <HAL_DMA_Init+0x290>)
 8001916:	f7ff fd25 	bl	8001364 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00b      	beq.n	800193a <HAL_DMA_Init+0x13a>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	2b40      	cmp	r3, #64	; 0x40
 8001928:	d007      	beq.n	800193a <HAL_DMA_Init+0x13a>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2b80      	cmp	r3, #128	; 0x80
 8001930:	d003      	beq.n	800193a <HAL_DMA_Init+0x13a>
 8001932:	21b9      	movs	r1, #185	; 0xb9
 8001934:	4856      	ldr	r0, [pc, #344]	; (8001a90 <HAL_DMA_Init+0x290>)
 8001936:	f7ff fd15 	bl	8001364 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001942:	d007      	beq.n	8001954 <HAL_DMA_Init+0x154>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_DMA_Init+0x154>
 800194c:	21ba      	movs	r1, #186	; 0xba
 800194e:	4850      	ldr	r0, [pc, #320]	; (8001a90 <HAL_DMA_Init+0x290>)
 8001950:	f7ff fd08 	bl	8001364 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800195c:	d007      	beq.n	800196e <HAL_DMA_Init+0x16e>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_DMA_Init+0x16e>
 8001966:	21bb      	movs	r1, #187	; 0xbb
 8001968:	4849      	ldr	r0, [pc, #292]	; (8001a90 <HAL_DMA_Init+0x290>)
 800196a:	f7ff fcfb 	bl	8001364 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00d      	beq.n	8001992 <HAL_DMA_Init+0x192>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800197e:	d008      	beq.n	8001992 <HAL_DMA_Init+0x192>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001988:	d003      	beq.n	8001992 <HAL_DMA_Init+0x192>
 800198a:	21bc      	movs	r1, #188	; 0xbc
 800198c:	4840      	ldr	r0, [pc, #256]	; (8001a90 <HAL_DMA_Init+0x290>)
 800198e:	f7ff fce9 	bl	8001364 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00d      	beq.n	80019b6 <HAL_DMA_Init+0x1b6>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019a2:	d008      	beq.n	80019b6 <HAL_DMA_Init+0x1b6>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019ac:	d003      	beq.n	80019b6 <HAL_DMA_Init+0x1b6>
 80019ae:	21bd      	movs	r1, #189	; 0xbd
 80019b0:	4837      	ldr	r0, [pc, #220]	; (8001a90 <HAL_DMA_Init+0x290>)
 80019b2:	f7ff fcd7 	bl	8001364 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d00c      	beq.n	80019d8 <HAL_DMA_Init+0x1d8>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019c6:	d007      	beq.n	80019d8 <HAL_DMA_Init+0x1d8>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	69db      	ldr	r3, [r3, #28]
 80019cc:	2b20      	cmp	r3, #32
 80019ce:	d003      	beq.n	80019d8 <HAL_DMA_Init+0x1d8>
 80019d0:	21be      	movs	r1, #190	; 0xbe
 80019d2:	482f      	ldr	r0, [pc, #188]	; (8001a90 <HAL_DMA_Init+0x290>)
 80019d4:	f7ff fcc6 	bl	8001364 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d012      	beq.n	8001a06 <HAL_DMA_Init+0x206>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e8:	d00d      	beq.n	8001a06 <HAL_DMA_Init+0x206>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019f2:	d008      	beq.n	8001a06 <HAL_DMA_Init+0x206>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80019fc:	d003      	beq.n	8001a06 <HAL_DMA_Init+0x206>
 80019fe:	21bf      	movs	r1, #191	; 0xbf
 8001a00:	4823      	ldr	r0, [pc, #140]	; (8001a90 <HAL_DMA_Init+0x290>)
 8001a02:	f7ff fcaf 	bl	8001364 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d007      	beq.n	8001a1e <HAL_DMA_Init+0x21e>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	d003      	beq.n	8001a1e <HAL_DMA_Init+0x21e>
 8001a16:	21c0      	movs	r1, #192	; 0xc0
 8001a18:	481d      	ldr	r0, [pc, #116]	; (8001a90 <HAL_DMA_Init+0x290>)
 8001a1a:	f7ff fca3 	bl	8001364 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d064      	beq.n	8001af0 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d032      	beq.n	8001a94 <HAL_DMA_Init+0x294>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d02e      	beq.n	8001a94 <HAL_DMA_Init+0x294>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d02a      	beq.n	8001a94 <HAL_DMA_Init+0x294>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a42:	2b03      	cmp	r3, #3
 8001a44:	d026      	beq.n	8001a94 <HAL_DMA_Init+0x294>
 8001a46:	21c5      	movs	r1, #197	; 0xc5
 8001a48:	4811      	ldr	r0, [pc, #68]	; (8001a90 <HAL_DMA_Init+0x290>)
 8001a4a:	f7ff fc8b 	bl	8001364 <assert_failed>
 8001a4e:	e021      	b.n	8001a94 <HAL_DMA_Init+0x294>
 8001a50:	40026010 	.word	0x40026010
 8001a54:	40026028 	.word	0x40026028
 8001a58:	40026040 	.word	0x40026040
 8001a5c:	40026058 	.word	0x40026058
 8001a60:	40026070 	.word	0x40026070
 8001a64:	40026088 	.word	0x40026088
 8001a68:	400260a0 	.word	0x400260a0
 8001a6c:	400260b8 	.word	0x400260b8
 8001a70:	40026410 	.word	0x40026410
 8001a74:	40026428 	.word	0x40026428
 8001a78:	40026440 	.word	0x40026440
 8001a7c:	40026458 	.word	0x40026458
 8001a80:	40026470 	.word	0x40026470
 8001a84:	40026488 	.word	0x40026488
 8001a88:	400264a0 	.word	0x400264a0
 8001a8c:	400264b8 	.word	0x400264b8
 8001a90:	08009748 	.word	0x08009748
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d012      	beq.n	8001ac2 <HAL_DMA_Init+0x2c2>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001aa4:	d00d      	beq.n	8001ac2 <HAL_DMA_Init+0x2c2>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aaa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aae:	d008      	beq.n	8001ac2 <HAL_DMA_Init+0x2c2>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ab8:	d003      	beq.n	8001ac2 <HAL_DMA_Init+0x2c2>
 8001aba:	21c6      	movs	r1, #198	; 0xc6
 8001abc:	485b      	ldr	r0, [pc, #364]	; (8001c2c <HAL_DMA_Init+0x42c>)
 8001abe:	f7ff fc51 	bl	8001364 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d012      	beq.n	8001af0 <HAL_DMA_Init+0x2f0>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ad2:	d00d      	beq.n	8001af0 <HAL_DMA_Init+0x2f0>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001adc:	d008      	beq.n	8001af0 <HAL_DMA_Init+0x2f0>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001ae6:	d003      	beq.n	8001af0 <HAL_DMA_Init+0x2f0>
 8001ae8:	21c7      	movs	r1, #199	; 0xc7
 8001aea:	4850      	ldr	r0, [pc, #320]	; (8001c2c <HAL_DMA_Init+0x42c>)
 8001aec:	f7ff fc3a 	bl	8001364 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2202      	movs	r2, #2
 8001af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 0201 	bic.w	r2, r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b10:	e00f      	b.n	8001b32 <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b12:	f7ff fd57 	bl	80015c4 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b05      	cmp	r3, #5
 8001b1e:	d908      	bls.n	8001b32 <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2220      	movs	r2, #32
 8001b24:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2203      	movs	r2, #3
 8001b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e078      	b.n	8001c24 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1e8      	bne.n	8001b12 <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	4b39      	ldr	r3, [pc, #228]	; (8001c30 <HAL_DMA_Init+0x430>)
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	2b04      	cmp	r3, #4
 8001b8a:	d107      	bne.n	8001b9c <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b94:	4313      	orrs	r3, r2
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f023 0307 	bic.w	r3, r3, #7
 8001bb2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d117      	bne.n	8001bf6 <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d00e      	beq.n	8001bf6 <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f949 	bl	8001e70 <DMA_CheckFifoParam>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d008      	beq.n	8001bf6 <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2240      	movs	r2, #64	; 0x40
 8001be8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e016      	b.n	8001c24 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f900 	bl	8001e04 <DMA_CalcBaseAndBitshift>
 8001c04:	4603      	mov	r3, r0
 8001c06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c0c:	223f      	movs	r2, #63	; 0x3f
 8001c0e:	409a      	lsls	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	08009748 	.word	0x08009748
 8001c30:	f010803f 	.word	0xf010803f

08001c34 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
 8001c40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_DMA_Start+0x20>
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c52:	d304      	bcc.n	8001c5e <HAL_DMA_Start+0x2a>
 8001c54:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8001c58:	481a      	ldr	r0, [pc, #104]	; (8001cc4 <HAL_DMA_Start+0x90>)
 8001c5a:	f7ff fb83 	bl	8001364 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d101      	bne.n	8001c6c <HAL_DMA_Start+0x38>
 8001c68:	2302      	movs	r3, #2
 8001c6a:	e026      	b.n	8001cba <HAL_DMA_Start+0x86>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d115      	bne.n	8001cac <HAL_DMA_Start+0x78>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2202      	movs	r2, #2
 8001c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	68b9      	ldr	r1, [r7, #8]
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f000 f887 	bl	8001da8 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f042 0201 	orr.w	r2, r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	e005      	b.n	8001cb8 <HAL_DMA_Start+0x84>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8001cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	08009748 	.word	0x08009748

08001cc8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001cd6:	f7ff fc75 	bl	80015c4 <HAL_GetTick>
 8001cda:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d008      	beq.n	8001cfa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2280      	movs	r2, #128	; 0x80
 8001cec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e052      	b.n	8001da0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0216 	bic.w	r2, r2, #22
 8001d08:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	695a      	ldr	r2, [r3, #20]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d18:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d103      	bne.n	8001d2a <HAL_DMA_Abort+0x62>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d007      	beq.n	8001d3a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0208 	bic.w	r2, r2, #8
 8001d38:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0201 	bic.w	r2, r2, #1
 8001d48:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d4a:	e013      	b.n	8001d74 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d4c:	f7ff fc3a 	bl	80015c4 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b05      	cmp	r3, #5
 8001d58:	d90c      	bls.n	8001d74 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2220      	movs	r2, #32
 8001d5e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2203      	movs	r2, #3
 8001d64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e015      	b.n	8001da0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1e4      	bne.n	8001d4c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d86:	223f      	movs	r2, #63	; 0x3f
 8001d88:	409a      	lsls	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
 8001db4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001dc4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	2b40      	cmp	r3, #64	; 0x40
 8001dd4:	d108      	bne.n	8001de8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001de6:	e007      	b.n	8001df8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68ba      	ldr	r2, [r7, #8]
 8001dee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	60da      	str	r2, [r3, #12]
}
 8001df8:	bf00      	nop
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	3b10      	subs	r3, #16
 8001e14:	4a14      	ldr	r2, [pc, #80]	; (8001e68 <DMA_CalcBaseAndBitshift+0x64>)
 8001e16:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1a:	091b      	lsrs	r3, r3, #4
 8001e1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e1e:	4a13      	ldr	r2, [pc, #76]	; (8001e6c <DMA_CalcBaseAndBitshift+0x68>)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4413      	add	r3, r2
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	461a      	mov	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2b03      	cmp	r3, #3
 8001e30:	d909      	bls.n	8001e46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e3a:	f023 0303 	bic.w	r3, r3, #3
 8001e3e:	1d1a      	adds	r2, r3, #4
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	659a      	str	r2, [r3, #88]	; 0x58
 8001e44:	e007      	b.n	8001e56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e4e:	f023 0303 	bic.w	r3, r3, #3
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	aaaaaaab 	.word	0xaaaaaaab
 8001e6c:	08009968 	.word	0x08009968

08001e70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d11f      	bne.n	8001eca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	2b03      	cmp	r3, #3
 8001e8e:	d856      	bhi.n	8001f3e <DMA_CheckFifoParam+0xce>
 8001e90:	a201      	add	r2, pc, #4	; (adr r2, 8001e98 <DMA_CheckFifoParam+0x28>)
 8001e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e96:	bf00      	nop
 8001e98:	08001ea9 	.word	0x08001ea9
 8001e9c:	08001ebb 	.word	0x08001ebb
 8001ea0:	08001ea9 	.word	0x08001ea9
 8001ea4:	08001f3f 	.word	0x08001f3f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d046      	beq.n	8001f42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eb8:	e043      	b.n	8001f42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ec2:	d140      	bne.n	8001f46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ec8:	e03d      	b.n	8001f46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ed2:	d121      	bne.n	8001f18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	2b03      	cmp	r3, #3
 8001ed8:	d837      	bhi.n	8001f4a <DMA_CheckFifoParam+0xda>
 8001eda:	a201      	add	r2, pc, #4	; (adr r2, 8001ee0 <DMA_CheckFifoParam+0x70>)
 8001edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee0:	08001ef1 	.word	0x08001ef1
 8001ee4:	08001ef7 	.word	0x08001ef7
 8001ee8:	08001ef1 	.word	0x08001ef1
 8001eec:	08001f09 	.word	0x08001f09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ef4:	e030      	b.n	8001f58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d025      	beq.n	8001f4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f06:	e022      	b.n	8001f4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f10:	d11f      	bne.n	8001f52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f16:	e01c      	b.n	8001f52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d903      	bls.n	8001f26 <DMA_CheckFifoParam+0xb6>
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	2b03      	cmp	r3, #3
 8001f22:	d003      	beq.n	8001f2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f24:	e018      	b.n	8001f58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	73fb      	strb	r3, [r7, #15]
      break;
 8001f2a:	e015      	b.n	8001f58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00e      	beq.n	8001f56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8001f3c:	e00b      	b.n	8001f56 <DMA_CheckFifoParam+0xe6>
      break;
 8001f3e:	bf00      	nop
 8001f40:	e00a      	b.n	8001f58 <DMA_CheckFifoParam+0xe8>
      break;
 8001f42:	bf00      	nop
 8001f44:	e008      	b.n	8001f58 <DMA_CheckFifoParam+0xe8>
      break;
 8001f46:	bf00      	nop
 8001f48:	e006      	b.n	8001f58 <DMA_CheckFifoParam+0xe8>
      break;
 8001f4a:	bf00      	nop
 8001f4c:	e004      	b.n	8001f58 <DMA_CheckFifoParam+0xe8>
      break;
 8001f4e:	bf00      	nop
 8001f50:	e002      	b.n	8001f58 <DMA_CheckFifoParam+0xe8>
      break;   
 8001f52:	bf00      	nop
 8001f54:	e000      	b.n	8001f58 <DMA_CheckFifoParam+0xe8>
      break;
 8001f56:	bf00      	nop
    }
  } 
  
  return status; 
 8001f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop

08001f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a3d      	ldr	r2, [pc, #244]	; (8002078 <HAL_GPIO_Init+0x110>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d02b      	beq.n	8001fde <HAL_GPIO_Init+0x76>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a3c      	ldr	r2, [pc, #240]	; (800207c <HAL_GPIO_Init+0x114>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d027      	beq.n	8001fde <HAL_GPIO_Init+0x76>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a3b      	ldr	r2, [pc, #236]	; (8002080 <HAL_GPIO_Init+0x118>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d023      	beq.n	8001fde <HAL_GPIO_Init+0x76>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a3a      	ldr	r2, [pc, #232]	; (8002084 <HAL_GPIO_Init+0x11c>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d01f      	beq.n	8001fde <HAL_GPIO_Init+0x76>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a39      	ldr	r2, [pc, #228]	; (8002088 <HAL_GPIO_Init+0x120>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d01b      	beq.n	8001fde <HAL_GPIO_Init+0x76>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a38      	ldr	r2, [pc, #224]	; (800208c <HAL_GPIO_Init+0x124>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d017      	beq.n	8001fde <HAL_GPIO_Init+0x76>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a37      	ldr	r2, [pc, #220]	; (8002090 <HAL_GPIO_Init+0x128>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d013      	beq.n	8001fde <HAL_GPIO_Init+0x76>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a36      	ldr	r2, [pc, #216]	; (8002094 <HAL_GPIO_Init+0x12c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d00f      	beq.n	8001fde <HAL_GPIO_Init+0x76>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a35      	ldr	r2, [pc, #212]	; (8002098 <HAL_GPIO_Init+0x130>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d00b      	beq.n	8001fde <HAL_GPIO_Init+0x76>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a34      	ldr	r2, [pc, #208]	; (800209c <HAL_GPIO_Init+0x134>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d007      	beq.n	8001fde <HAL_GPIO_Init+0x76>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a33      	ldr	r2, [pc, #204]	; (80020a0 <HAL_GPIO_Init+0x138>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_Init+0x76>
 8001fd6:	21ac      	movs	r1, #172	; 0xac
 8001fd8:	4832      	ldr	r0, [pc, #200]	; (80020a4 <HAL_GPIO_Init+0x13c>)
 8001fda:	f7ff f9c3 	bl	8001364 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d005      	beq.n	8001ff4 <HAL_GPIO_Init+0x8c>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	0c1b      	lsrs	r3, r3, #16
 8001fee:	041b      	lsls	r3, r3, #16
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <HAL_GPIO_Init+0x94>
 8001ff4:	21ad      	movs	r1, #173	; 0xad
 8001ff6:	482b      	ldr	r0, [pc, #172]	; (80020a4 <HAL_GPIO_Init+0x13c>)
 8001ff8:	f7ff f9b4 	bl	8001364 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d035      	beq.n	8002070 <HAL_GPIO_Init+0x108>
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d031      	beq.n	8002070 <HAL_GPIO_Init+0x108>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b11      	cmp	r3, #17
 8002012:	d02d      	beq.n	8002070 <HAL_GPIO_Init+0x108>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b02      	cmp	r3, #2
 800201a:	d029      	beq.n	8002070 <HAL_GPIO_Init+0x108>
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2b12      	cmp	r3, #18
 8002022:	d025      	beq.n	8002070 <HAL_GPIO_Init+0x108>
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800202c:	d020      	beq.n	8002070 <HAL_GPIO_Init+0x108>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002036:	d01b      	beq.n	8002070 <HAL_GPIO_Init+0x108>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8002040:	d016      	beq.n	8002070 <HAL_GPIO_Init+0x108>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800204a:	d011      	beq.n	8002070 <HAL_GPIO_Init+0x108>
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8002054:	d00c      	beq.n	8002070 <HAL_GPIO_Init+0x108>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800205e:	d007      	beq.n	8002070 <HAL_GPIO_Init+0x108>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b03      	cmp	r3, #3
 8002066:	d003      	beq.n	8002070 <HAL_GPIO_Init+0x108>
 8002068:	21ae      	movs	r1, #174	; 0xae
 800206a:	480e      	ldr	r0, [pc, #56]	; (80020a4 <HAL_GPIO_Init+0x13c>)
 800206c:	f7ff f97a 	bl	8001364 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002070:	2300      	movs	r3, #0
 8002072:	61fb      	str	r3, [r7, #28]
 8002074:	e274      	b.n	8002560 <HAL_GPIO_Init+0x5f8>
 8002076:	bf00      	nop
 8002078:	40020000 	.word	0x40020000
 800207c:	40020400 	.word	0x40020400
 8002080:	40020800 	.word	0x40020800
 8002084:	40020c00 	.word	0x40020c00
 8002088:	40021000 	.word	0x40021000
 800208c:	40021400 	.word	0x40021400
 8002090:	40021800 	.word	0x40021800
 8002094:	40021c00 	.word	0x40021c00
 8002098:	40022000 	.word	0x40022000
 800209c:	40022400 	.word	0x40022400
 80020a0:	40022800 	.word	0x40022800
 80020a4:	08009780 	.word	0x08009780
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020a8:	2201      	movs	r2, #1
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	4013      	ands	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	f040 824a 	bne.w	800255a <HAL_GPIO_Init+0x5f2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d005      	beq.n	80020de <HAL_GPIO_Init+0x176>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d144      	bne.n	8002168 <HAL_GPIO_Init+0x200>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00f      	beq.n	8002106 <HAL_GPIO_Init+0x19e>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d00b      	beq.n	8002106 <HAL_GPIO_Init+0x19e>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d007      	beq.n	8002106 <HAL_GPIO_Init+0x19e>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	2b03      	cmp	r3, #3
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_Init+0x19e>
 80020fe:	21c0      	movs	r1, #192	; 0xc0
 8002100:	4831      	ldr	r0, [pc, #196]	; (80021c8 <HAL_GPIO_Init+0x260>)
 8002102:	f7ff f92f 	bl	8001364 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	2203      	movs	r2, #3
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43db      	mvns	r3, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4013      	ands	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800213c:	2201      	movs	r2, #1
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	f003 0201 	and.w	r2, r3, #1
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4313      	orrs	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	2b03      	cmp	r3, #3
 8002172:	d02b      	beq.n	80021cc <HAL_GPIO_Init+0x264>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00b      	beq.n	8002194 <HAL_GPIO_Init+0x22c>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d007      	beq.n	8002194 <HAL_GPIO_Init+0x22c>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	2b02      	cmp	r3, #2
 800218a:	d003      	beq.n	8002194 <HAL_GPIO_Init+0x22c>
 800218c:	21d1      	movs	r1, #209	; 0xd1
 800218e:	480e      	ldr	r0, [pc, #56]	; (80021c8 <HAL_GPIO_Init+0x260>)
 8002190:	f7ff f8e8 	bl	8001364 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	2203      	movs	r2, #3
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	60da      	str	r2, [r3, #12]
 80021c4:	e002      	b.n	80021cc <HAL_GPIO_Init+0x264>
 80021c6:	bf00      	nop
 80021c8:	08009780 	.word	0x08009780
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 0303 	and.w	r3, r3, #3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	f040 80df 	bne.w	8002398 <HAL_GPIO_Init+0x430>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 80b6 	beq.w	8002350 <HAL_GPIO_Init+0x3e8>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	2b09      	cmp	r3, #9
 80021ea:	f000 80b1 	beq.w	8002350 <HAL_GPIO_Init+0x3e8>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 80ac 	beq.w	8002350 <HAL_GPIO_Init+0x3e8>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 80a7 	beq.w	8002350 <HAL_GPIO_Init+0x3e8>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 80a2 	beq.w	8002350 <HAL_GPIO_Init+0x3e8>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 809d 	beq.w	8002350 <HAL_GPIO_Init+0x3e8>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	2b01      	cmp	r3, #1
 800221c:	f000 8098 	beq.w	8002350 <HAL_GPIO_Init+0x3e8>
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	2b01      	cmp	r3, #1
 8002226:	f000 8093 	beq.w	8002350 <HAL_GPIO_Init+0x3e8>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	2b02      	cmp	r3, #2
 8002230:	f000 808e 	beq.w	8002350 <HAL_GPIO_Init+0x3e8>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	2b02      	cmp	r3, #2
 800223a:	f000 8089 	beq.w	8002350 <HAL_GPIO_Init+0x3e8>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	2b02      	cmp	r3, #2
 8002244:	f000 8084 	beq.w	8002350 <HAL_GPIO_Init+0x3e8>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	2b03      	cmp	r3, #3
 800224e:	d07f      	beq.n	8002350 <HAL_GPIO_Init+0x3e8>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	2b04      	cmp	r3, #4
 8002256:	d07b      	beq.n	8002350 <HAL_GPIO_Init+0x3e8>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	2b04      	cmp	r3, #4
 800225e:	d077      	beq.n	8002350 <HAL_GPIO_Init+0x3e8>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	2b04      	cmp	r3, #4
 8002266:	d073      	beq.n	8002350 <HAL_GPIO_Init+0x3e8>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	2b05      	cmp	r3, #5
 800226e:	d06f      	beq.n	8002350 <HAL_GPIO_Init+0x3e8>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	2b05      	cmp	r3, #5
 8002276:	d06b      	beq.n	8002350 <HAL_GPIO_Init+0x3e8>
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	2b09      	cmp	r3, #9
 800227e:	d067      	beq.n	8002350 <HAL_GPIO_Init+0x3e8>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	2b06      	cmp	r3, #6
 8002286:	d063      	beq.n	8002350 <HAL_GPIO_Init+0x3e8>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	2b09      	cmp	r3, #9
 800228e:	d05f      	beq.n	8002350 <HAL_GPIO_Init+0x3e8>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	2b07      	cmp	r3, #7
 8002296:	d05b      	beq.n	8002350 <HAL_GPIO_Init+0x3e8>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	2b07      	cmp	r3, #7
 800229e:	d057      	beq.n	8002350 <HAL_GPIO_Init+0x3e8>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	2b07      	cmp	r3, #7
 80022a6:	d053      	beq.n	8002350 <HAL_GPIO_Init+0x3e8>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d04f      	beq.n	8002350 <HAL_GPIO_Init+0x3e8>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	d04b      	beq.n	8002350 <HAL_GPIO_Init+0x3e8>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d047      	beq.n	8002350 <HAL_GPIO_Init+0x3e8>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	2b09      	cmp	r3, #9
 80022c6:	d043      	beq.n	8002350 <HAL_GPIO_Init+0x3e8>
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	2b09      	cmp	r3, #9
 80022ce:	d03f      	beq.n	8002350 <HAL_GPIO_Init+0x3e8>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	2b0a      	cmp	r3, #10
 80022d6:	d03b      	beq.n	8002350 <HAL_GPIO_Init+0x3e8>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	2b0a      	cmp	r3, #10
 80022de:	d037      	beq.n	8002350 <HAL_GPIO_Init+0x3e8>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	2b0b      	cmp	r3, #11
 80022e6:	d033      	beq.n	8002350 <HAL_GPIO_Init+0x3e8>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	2b0c      	cmp	r3, #12
 80022ee:	d02f      	beq.n	8002350 <HAL_GPIO_Init+0x3e8>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	2b0c      	cmp	r3, #12
 80022f6:	d02b      	beq.n	8002350 <HAL_GPIO_Init+0x3e8>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	2b0d      	cmp	r3, #13
 80022fe:	d027      	beq.n	8002350 <HAL_GPIO_Init+0x3e8>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	2b0f      	cmp	r3, #15
 8002306:	d023      	beq.n	8002350 <HAL_GPIO_Init+0x3e8>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	2b05      	cmp	r3, #5
 800230e:	d01f      	beq.n	8002350 <HAL_GPIO_Init+0x3e8>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	2b05      	cmp	r3, #5
 8002316:	d01b      	beq.n	8002350 <HAL_GPIO_Init+0x3e8>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	2b05      	cmp	r3, #5
 800231e:	d017      	beq.n	8002350 <HAL_GPIO_Init+0x3e8>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	2b08      	cmp	r3, #8
 8002326:	d013      	beq.n	8002350 <HAL_GPIO_Init+0x3e8>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	2b08      	cmp	r3, #8
 800232e:	d00f      	beq.n	8002350 <HAL_GPIO_Init+0x3e8>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	2b0c      	cmp	r3, #12
 8002336:	d00b      	beq.n	8002350 <HAL_GPIO_Init+0x3e8>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	2b06      	cmp	r3, #6
 800233e:	d007      	beq.n	8002350 <HAL_GPIO_Init+0x3e8>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	2b0e      	cmp	r3, #14
 8002346:	d003      	beq.n	8002350 <HAL_GPIO_Init+0x3e8>
 8002348:	21de      	movs	r1, #222	; 0xde
 800234a:	488a      	ldr	r0, [pc, #552]	; (8002574 <HAL_GPIO_Init+0x60c>)
 800234c:	f7ff f80a 	bl	8001364 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	08da      	lsrs	r2, r3, #3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3208      	adds	r2, #8
 8002358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800235c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	220f      	movs	r2, #15
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	691a      	ldr	r2, [r3, #16]
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4313      	orrs	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	08da      	lsrs	r2, r3, #3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3208      	adds	r2, #8
 8002392:	69b9      	ldr	r1, [r7, #24]
 8002394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	2203      	movs	r2, #3
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4013      	ands	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 0203 	and.w	r2, r3, #3
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 80c0 	beq.w	800255a <HAL_GPIO_Init+0x5f2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	4b66      	ldr	r3, [pc, #408]	; (8002578 <HAL_GPIO_Init+0x610>)
 80023e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e2:	4a65      	ldr	r2, [pc, #404]	; (8002578 <HAL_GPIO_Init+0x610>)
 80023e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023e8:	6453      	str	r3, [r2, #68]	; 0x44
 80023ea:	4b63      	ldr	r3, [pc, #396]	; (8002578 <HAL_GPIO_Init+0x610>)
 80023ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023f6:	4a61      	ldr	r2, [pc, #388]	; (800257c <HAL_GPIO_Init+0x614>)
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	089b      	lsrs	r3, r3, #2
 80023fc:	3302      	adds	r3, #2
 80023fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	220f      	movs	r2, #15
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4013      	ands	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a58      	ldr	r2, [pc, #352]	; (8002580 <HAL_GPIO_Init+0x618>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d037      	beq.n	8002492 <HAL_GPIO_Init+0x52a>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a57      	ldr	r2, [pc, #348]	; (8002584 <HAL_GPIO_Init+0x61c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d031      	beq.n	800248e <HAL_GPIO_Init+0x526>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a56      	ldr	r2, [pc, #344]	; (8002588 <HAL_GPIO_Init+0x620>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d02b      	beq.n	800248a <HAL_GPIO_Init+0x522>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a55      	ldr	r2, [pc, #340]	; (800258c <HAL_GPIO_Init+0x624>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d025      	beq.n	8002486 <HAL_GPIO_Init+0x51e>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a54      	ldr	r2, [pc, #336]	; (8002590 <HAL_GPIO_Init+0x628>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d01f      	beq.n	8002482 <HAL_GPIO_Init+0x51a>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a53      	ldr	r2, [pc, #332]	; (8002594 <HAL_GPIO_Init+0x62c>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d019      	beq.n	800247e <HAL_GPIO_Init+0x516>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a52      	ldr	r2, [pc, #328]	; (8002598 <HAL_GPIO_Init+0x630>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d013      	beq.n	800247a <HAL_GPIO_Init+0x512>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a51      	ldr	r2, [pc, #324]	; (800259c <HAL_GPIO_Init+0x634>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d00d      	beq.n	8002476 <HAL_GPIO_Init+0x50e>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a50      	ldr	r2, [pc, #320]	; (80025a0 <HAL_GPIO_Init+0x638>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d007      	beq.n	8002472 <HAL_GPIO_Init+0x50a>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a4f      	ldr	r2, [pc, #316]	; (80025a4 <HAL_GPIO_Init+0x63c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d101      	bne.n	800246e <HAL_GPIO_Init+0x506>
 800246a:	2309      	movs	r3, #9
 800246c:	e012      	b.n	8002494 <HAL_GPIO_Init+0x52c>
 800246e:	230a      	movs	r3, #10
 8002470:	e010      	b.n	8002494 <HAL_GPIO_Init+0x52c>
 8002472:	2308      	movs	r3, #8
 8002474:	e00e      	b.n	8002494 <HAL_GPIO_Init+0x52c>
 8002476:	2307      	movs	r3, #7
 8002478:	e00c      	b.n	8002494 <HAL_GPIO_Init+0x52c>
 800247a:	2306      	movs	r3, #6
 800247c:	e00a      	b.n	8002494 <HAL_GPIO_Init+0x52c>
 800247e:	2305      	movs	r3, #5
 8002480:	e008      	b.n	8002494 <HAL_GPIO_Init+0x52c>
 8002482:	2304      	movs	r3, #4
 8002484:	e006      	b.n	8002494 <HAL_GPIO_Init+0x52c>
 8002486:	2303      	movs	r3, #3
 8002488:	e004      	b.n	8002494 <HAL_GPIO_Init+0x52c>
 800248a:	2302      	movs	r3, #2
 800248c:	e002      	b.n	8002494 <HAL_GPIO_Init+0x52c>
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <HAL_GPIO_Init+0x52c>
 8002492:	2300      	movs	r3, #0
 8002494:	69fa      	ldr	r2, [r7, #28]
 8002496:	f002 0203 	and.w	r2, r2, #3
 800249a:	0092      	lsls	r2, r2, #2
 800249c:	4093      	lsls	r3, r2
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024a4:	4935      	ldr	r1, [pc, #212]	; (800257c <HAL_GPIO_Init+0x614>)
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	089b      	lsrs	r3, r3, #2
 80024aa:	3302      	adds	r3, #2
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024b2:	4b3d      	ldr	r3, [pc, #244]	; (80025a8 <HAL_GPIO_Init+0x640>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	43db      	mvns	r3, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4013      	ands	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_GPIO_Init+0x56e>
        {
          temp |= iocurrent;
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024d6:	4a34      	ldr	r2, [pc, #208]	; (80025a8 <HAL_GPIO_Init+0x640>)
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024dc:	4b32      	ldr	r3, [pc, #200]	; (80025a8 <HAL_GPIO_Init+0x640>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d003      	beq.n	8002500 <HAL_GPIO_Init+0x598>
        {
          temp |= iocurrent;
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002500:	4a29      	ldr	r2, [pc, #164]	; (80025a8 <HAL_GPIO_Init+0x640>)
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002506:	4b28      	ldr	r3, [pc, #160]	; (80025a8 <HAL_GPIO_Init+0x640>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	43db      	mvns	r3, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_GPIO_Init+0x5c2>
        {
          temp |= iocurrent;
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800252a:	4a1f      	ldr	r2, [pc, #124]	; (80025a8 <HAL_GPIO_Init+0x640>)
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002530:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <HAL_GPIO_Init+0x640>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_GPIO_Init+0x5ec>
        {
          temp |= iocurrent;
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002554:	4a14      	ldr	r2, [pc, #80]	; (80025a8 <HAL_GPIO_Init+0x640>)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	3301      	adds	r3, #1
 800255e:	61fb      	str	r3, [r7, #28]
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	2b0f      	cmp	r3, #15
 8002564:	f67f ada0 	bls.w	80020a8 <HAL_GPIO_Init+0x140>
      }
    }
  }
}
 8002568:	bf00      	nop
 800256a:	bf00      	nop
 800256c:	3720      	adds	r7, #32
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	08009780 	.word	0x08009780
 8002578:	40023800 	.word	0x40023800
 800257c:	40013800 	.word	0x40013800
 8002580:	40020000 	.word	0x40020000
 8002584:	40020400 	.word	0x40020400
 8002588:	40020800 	.word	0x40020800
 800258c:	40020c00 	.word	0x40020c00
 8002590:	40021000 	.word	0x40021000
 8002594:	40021400 	.word	0x40021400
 8002598:	40021800 	.word	0x40021800
 800259c:	40021c00 	.word	0x40021c00
 80025a0:	40022000 	.word	0x40022000
 80025a4:	40022400 	.word	0x40022400
 80025a8:	40013c00 	.word	0x40013c00

080025ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	460b      	mov	r3, r1
 80025b6:	807b      	strh	r3, [r7, #2]
 80025b8:	4613      	mov	r3, r2
 80025ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80025bc:	887b      	ldrh	r3, [r7, #2]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d004      	beq.n	80025cc <HAL_GPIO_WritePin+0x20>
 80025c2:	887b      	ldrh	r3, [r7, #2]
 80025c4:	0c1b      	lsrs	r3, r3, #16
 80025c6:	041b      	lsls	r3, r3, #16
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d004      	beq.n	80025d6 <HAL_GPIO_WritePin+0x2a>
 80025cc:	f240 119d 	movw	r1, #413	; 0x19d
 80025d0:	480e      	ldr	r0, [pc, #56]	; (800260c <HAL_GPIO_WritePin+0x60>)
 80025d2:	f7fe fec7 	bl	8001364 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80025d6:	787b      	ldrb	r3, [r7, #1]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d007      	beq.n	80025ec <HAL_GPIO_WritePin+0x40>
 80025dc:	787b      	ldrb	r3, [r7, #1]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d004      	beq.n	80025ec <HAL_GPIO_WritePin+0x40>
 80025e2:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80025e6:	4809      	ldr	r0, [pc, #36]	; (800260c <HAL_GPIO_WritePin+0x60>)
 80025e8:	f7fe febc 	bl	8001364 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80025ec:	787b      	ldrb	r3, [r7, #1]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025f2:	887a      	ldrh	r2, [r7, #2]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025f8:	e003      	b.n	8002602 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025fa:	887b      	ldrh	r3, [r7, #2]
 80025fc:	041a      	lsls	r2, r3, #16
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	619a      	str	r2, [r3, #24]
}
 8002602:	bf00      	nop
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	08009780 	.word	0x08009780

08002610 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e314      	b.n	8002c4c <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2b0f      	cmp	r3, #15
 8002628:	d903      	bls.n	8002632 <HAL_RCC_OscConfig+0x22>
 800262a:	21e6      	movs	r1, #230	; 0xe6
 800262c:	4897      	ldr	r0, [pc, #604]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 800262e:	f7fe fe99 	bl	8001364 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 8088 	beq.w	8002750 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00d      	beq.n	8002664 <HAL_RCC_OscConfig+0x54>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002650:	d008      	beq.n	8002664 <HAL_RCC_OscConfig+0x54>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800265a:	d003      	beq.n	8002664 <HAL_RCC_OscConfig+0x54>
 800265c:	21eb      	movs	r1, #235	; 0xeb
 800265e:	488b      	ldr	r0, [pc, #556]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 8002660:	f7fe fe80 	bl	8001364 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002664:	4b8a      	ldr	r3, [pc, #552]	; (8002890 <HAL_RCC_OscConfig+0x280>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f003 030c 	and.w	r3, r3, #12
 800266c:	2b04      	cmp	r3, #4
 800266e:	d00c      	beq.n	800268a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002670:	4b87      	ldr	r3, [pc, #540]	; (8002890 <HAL_RCC_OscConfig+0x280>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002678:	2b08      	cmp	r3, #8
 800267a:	d112      	bne.n	80026a2 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800267c:	4b84      	ldr	r3, [pc, #528]	; (8002890 <HAL_RCC_OscConfig+0x280>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002684:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002688:	d10b      	bne.n	80026a2 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800268a:	4b81      	ldr	r3, [pc, #516]	; (8002890 <HAL_RCC_OscConfig+0x280>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d05b      	beq.n	800274e <HAL_RCC_OscConfig+0x13e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d157      	bne.n	800274e <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e2d4      	b.n	8002c4c <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026aa:	d106      	bne.n	80026ba <HAL_RCC_OscConfig+0xaa>
 80026ac:	4b78      	ldr	r3, [pc, #480]	; (8002890 <HAL_RCC_OscConfig+0x280>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a77      	ldr	r2, [pc, #476]	; (8002890 <HAL_RCC_OscConfig+0x280>)
 80026b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b6:	6013      	str	r3, [r2, #0]
 80026b8:	e01d      	b.n	80026f6 <HAL_RCC_OscConfig+0xe6>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026c2:	d10c      	bne.n	80026de <HAL_RCC_OscConfig+0xce>
 80026c4:	4b72      	ldr	r3, [pc, #456]	; (8002890 <HAL_RCC_OscConfig+0x280>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a71      	ldr	r2, [pc, #452]	; (8002890 <HAL_RCC_OscConfig+0x280>)
 80026ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026ce:	6013      	str	r3, [r2, #0]
 80026d0:	4b6f      	ldr	r3, [pc, #444]	; (8002890 <HAL_RCC_OscConfig+0x280>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a6e      	ldr	r2, [pc, #440]	; (8002890 <HAL_RCC_OscConfig+0x280>)
 80026d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026da:	6013      	str	r3, [r2, #0]
 80026dc:	e00b      	b.n	80026f6 <HAL_RCC_OscConfig+0xe6>
 80026de:	4b6c      	ldr	r3, [pc, #432]	; (8002890 <HAL_RCC_OscConfig+0x280>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a6b      	ldr	r2, [pc, #428]	; (8002890 <HAL_RCC_OscConfig+0x280>)
 80026e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	4b69      	ldr	r3, [pc, #420]	; (8002890 <HAL_RCC_OscConfig+0x280>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a68      	ldr	r2, [pc, #416]	; (8002890 <HAL_RCC_OscConfig+0x280>)
 80026f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026f4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d013      	beq.n	8002726 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fe:	f7fe ff61 	bl	80015c4 <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002706:	f7fe ff5d 	bl	80015c4 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b64      	cmp	r3, #100	; 0x64
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e299      	b.n	8002c4c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002718:	4b5d      	ldr	r3, [pc, #372]	; (8002890 <HAL_RCC_OscConfig+0x280>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0f0      	beq.n	8002706 <HAL_RCC_OscConfig+0xf6>
 8002724:	e014      	b.n	8002750 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002726:	f7fe ff4d 	bl	80015c4 <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800272e:	f7fe ff49 	bl	80015c4 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b64      	cmp	r3, #100	; 0x64
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e285      	b.n	8002c4c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002740:	4b53      	ldr	r3, [pc, #332]	; (8002890 <HAL_RCC_OscConfig+0x280>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1f0      	bne.n	800272e <HAL_RCC_OscConfig+0x11e>
 800274c:	e000      	b.n	8002750 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800274e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d079      	beq.n	8002850 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <HAL_RCC_OscConfig+0x166>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d004      	beq.n	8002776 <HAL_RCC_OscConfig+0x166>
 800276c:	f240 111d 	movw	r1, #285	; 0x11d
 8002770:	4846      	ldr	r0, [pc, #280]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 8002772:	f7fe fdf7 	bl	8001364 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	2b1f      	cmp	r3, #31
 800277c:	d904      	bls.n	8002788 <HAL_RCC_OscConfig+0x178>
 800277e:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8002782:	4842      	ldr	r0, [pc, #264]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 8002784:	f7fe fdee 	bl	8001364 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002788:	4b41      	ldr	r3, [pc, #260]	; (8002890 <HAL_RCC_OscConfig+0x280>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 030c 	and.w	r3, r3, #12
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00b      	beq.n	80027ac <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002794:	4b3e      	ldr	r3, [pc, #248]	; (8002890 <HAL_RCC_OscConfig+0x280>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800279c:	2b08      	cmp	r3, #8
 800279e:	d11c      	bne.n	80027da <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027a0:	4b3b      	ldr	r3, [pc, #236]	; (8002890 <HAL_RCC_OscConfig+0x280>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d116      	bne.n	80027da <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ac:	4b38      	ldr	r3, [pc, #224]	; (8002890 <HAL_RCC_OscConfig+0x280>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d005      	beq.n	80027c4 <HAL_RCC_OscConfig+0x1b4>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d001      	beq.n	80027c4 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e243      	b.n	8002c4c <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c4:	4b32      	ldr	r3, [pc, #200]	; (8002890 <HAL_RCC_OscConfig+0x280>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	492f      	ldr	r1, [pc, #188]	; (8002890 <HAL_RCC_OscConfig+0x280>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d8:	e03a      	b.n	8002850 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d020      	beq.n	8002824 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027e2:	4b2c      	ldr	r3, [pc, #176]	; (8002894 <HAL_RCC_OscConfig+0x284>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e8:	f7fe feec 	bl	80015c4 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027f0:	f7fe fee8 	bl	80015c4 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e224      	b.n	8002c4c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002802:	4b23      	ldr	r3, [pc, #140]	; (8002890 <HAL_RCC_OscConfig+0x280>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280e:	4b20      	ldr	r3, [pc, #128]	; (8002890 <HAL_RCC_OscConfig+0x280>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	491c      	ldr	r1, [pc, #112]	; (8002890 <HAL_RCC_OscConfig+0x280>)
 800281e:	4313      	orrs	r3, r2
 8002820:	600b      	str	r3, [r1, #0]
 8002822:	e015      	b.n	8002850 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002824:	4b1b      	ldr	r3, [pc, #108]	; (8002894 <HAL_RCC_OscConfig+0x284>)
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282a:	f7fe fecb 	bl	80015c4 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002832:	f7fe fec7 	bl	80015c4 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e203      	b.n	8002c4c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002844:	4b12      	ldr	r3, [pc, #72]	; (8002890 <HAL_RCC_OscConfig+0x280>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1f0      	bne.n	8002832 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0308 	and.w	r3, r3, #8
 8002858:	2b00      	cmp	r3, #0
 800285a:	d045      	beq.n	80028e8 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d008      	beq.n	8002876 <HAL_RCC_OscConfig+0x266>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d004      	beq.n	8002876 <HAL_RCC_OscConfig+0x266>
 800286c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002870:	4806      	ldr	r0, [pc, #24]	; (800288c <HAL_RCC_OscConfig+0x27c>)
 8002872:	f7fe fd77 	bl	8001364 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d01e      	beq.n	80028bc <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800287e:	4b06      	ldr	r3, [pc, #24]	; (8002898 <HAL_RCC_OscConfig+0x288>)
 8002880:	2201      	movs	r2, #1
 8002882:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002884:	f7fe fe9e 	bl	80015c4 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800288a:	e010      	b.n	80028ae <HAL_RCC_OscConfig+0x29e>
 800288c:	080097bc 	.word	0x080097bc
 8002890:	40023800 	.word	0x40023800
 8002894:	42470000 	.word	0x42470000
 8002898:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800289c:	f7fe fe92 	bl	80015c4 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e1ce      	b.n	8002c4c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ae:	4b5e      	ldr	r3, [pc, #376]	; (8002a28 <HAL_RCC_OscConfig+0x418>)
 80028b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0f0      	beq.n	800289c <HAL_RCC_OscConfig+0x28c>
 80028ba:	e015      	b.n	80028e8 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028bc:	4b5b      	ldr	r3, [pc, #364]	; (8002a2c <HAL_RCC_OscConfig+0x41c>)
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c2:	f7fe fe7f 	bl	80015c4 <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ca:	f7fe fe7b 	bl	80015c4 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e1b7      	b.n	8002c4c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028dc:	4b52      	ldr	r3, [pc, #328]	; (8002a28 <HAL_RCC_OscConfig+0x418>)
 80028de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1f0      	bne.n	80028ca <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 80b0 	beq.w	8002a56 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028f6:	2300      	movs	r3, #0
 80028f8:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00c      	beq.n	800291c <HAL_RCC_OscConfig+0x30c>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d008      	beq.n	800291c <HAL_RCC_OscConfig+0x30c>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2b05      	cmp	r3, #5
 8002910:	d004      	beq.n	800291c <HAL_RCC_OscConfig+0x30c>
 8002912:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8002916:	4846      	ldr	r0, [pc, #280]	; (8002a30 <HAL_RCC_OscConfig+0x420>)
 8002918:	f7fe fd24 	bl	8001364 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800291c:	4b42      	ldr	r3, [pc, #264]	; (8002a28 <HAL_RCC_OscConfig+0x418>)
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10f      	bne.n	8002948 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002928:	2300      	movs	r3, #0
 800292a:	60bb      	str	r3, [r7, #8]
 800292c:	4b3e      	ldr	r3, [pc, #248]	; (8002a28 <HAL_RCC_OscConfig+0x418>)
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	4a3d      	ldr	r2, [pc, #244]	; (8002a28 <HAL_RCC_OscConfig+0x418>)
 8002932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002936:	6413      	str	r3, [r2, #64]	; 0x40
 8002938:	4b3b      	ldr	r3, [pc, #236]	; (8002a28 <HAL_RCC_OscConfig+0x418>)
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002944:	2301      	movs	r3, #1
 8002946:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002948:	4b3a      	ldr	r3, [pc, #232]	; (8002a34 <HAL_RCC_OscConfig+0x424>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002950:	2b00      	cmp	r3, #0
 8002952:	d118      	bne.n	8002986 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002954:	4b37      	ldr	r3, [pc, #220]	; (8002a34 <HAL_RCC_OscConfig+0x424>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a36      	ldr	r2, [pc, #216]	; (8002a34 <HAL_RCC_OscConfig+0x424>)
 800295a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800295e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002960:	f7fe fe30 	bl	80015c4 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002968:	f7fe fe2c 	bl	80015c4 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e168      	b.n	8002c4c <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800297a:	4b2e      	ldr	r3, [pc, #184]	; (8002a34 <HAL_RCC_OscConfig+0x424>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d106      	bne.n	800299c <HAL_RCC_OscConfig+0x38c>
 800298e:	4b26      	ldr	r3, [pc, #152]	; (8002a28 <HAL_RCC_OscConfig+0x418>)
 8002990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002992:	4a25      	ldr	r2, [pc, #148]	; (8002a28 <HAL_RCC_OscConfig+0x418>)
 8002994:	f043 0301 	orr.w	r3, r3, #1
 8002998:	6713      	str	r3, [r2, #112]	; 0x70
 800299a:	e01c      	b.n	80029d6 <HAL_RCC_OscConfig+0x3c6>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2b05      	cmp	r3, #5
 80029a2:	d10c      	bne.n	80029be <HAL_RCC_OscConfig+0x3ae>
 80029a4:	4b20      	ldr	r3, [pc, #128]	; (8002a28 <HAL_RCC_OscConfig+0x418>)
 80029a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a8:	4a1f      	ldr	r2, [pc, #124]	; (8002a28 <HAL_RCC_OscConfig+0x418>)
 80029aa:	f043 0304 	orr.w	r3, r3, #4
 80029ae:	6713      	str	r3, [r2, #112]	; 0x70
 80029b0:	4b1d      	ldr	r3, [pc, #116]	; (8002a28 <HAL_RCC_OscConfig+0x418>)
 80029b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b4:	4a1c      	ldr	r2, [pc, #112]	; (8002a28 <HAL_RCC_OscConfig+0x418>)
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	6713      	str	r3, [r2, #112]	; 0x70
 80029bc:	e00b      	b.n	80029d6 <HAL_RCC_OscConfig+0x3c6>
 80029be:	4b1a      	ldr	r3, [pc, #104]	; (8002a28 <HAL_RCC_OscConfig+0x418>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c2:	4a19      	ldr	r2, [pc, #100]	; (8002a28 <HAL_RCC_OscConfig+0x418>)
 80029c4:	f023 0301 	bic.w	r3, r3, #1
 80029c8:	6713      	str	r3, [r2, #112]	; 0x70
 80029ca:	4b17      	ldr	r3, [pc, #92]	; (8002a28 <HAL_RCC_OscConfig+0x418>)
 80029cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ce:	4a16      	ldr	r2, [pc, #88]	; (8002a28 <HAL_RCC_OscConfig+0x418>)
 80029d0:	f023 0304 	bic.w	r3, r3, #4
 80029d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d015      	beq.n	8002a0a <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029de:	f7fe fdf1 	bl	80015c4 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e4:	e00a      	b.n	80029fc <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029e6:	f7fe fded 	bl	80015c4 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e127      	b.n	8002c4c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029fc:	4b0a      	ldr	r3, [pc, #40]	; (8002a28 <HAL_RCC_OscConfig+0x418>)
 80029fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0ee      	beq.n	80029e6 <HAL_RCC_OscConfig+0x3d6>
 8002a08:	e01c      	b.n	8002a44 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a0a:	f7fe fddb 	bl	80015c4 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a10:	e012      	b.n	8002a38 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a12:	f7fe fdd7 	bl	80015c4 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d909      	bls.n	8002a38 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e111      	b.n	8002c4c <HAL_RCC_OscConfig+0x63c>
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	42470e80 	.word	0x42470e80
 8002a30:	080097bc 	.word	0x080097bc
 8002a34:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a38:	4b86      	ldr	r3, [pc, #536]	; (8002c54 <HAL_RCC_OscConfig+0x644>)
 8002a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1e6      	bne.n	8002a12 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a44:	7dfb      	ldrb	r3, [r7, #23]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d105      	bne.n	8002a56 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a4a:	4b82      	ldr	r3, [pc, #520]	; (8002c54 <HAL_RCC_OscConfig+0x644>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	4a81      	ldr	r2, [pc, #516]	; (8002c54 <HAL_RCC_OscConfig+0x644>)
 8002a50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00c      	beq.n	8002a78 <HAL_RCC_OscConfig+0x468>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d008      	beq.n	8002a78 <HAL_RCC_OscConfig+0x468>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d004      	beq.n	8002a78 <HAL_RCC_OscConfig+0x468>
 8002a6e:	f240 11cd 	movw	r1, #461	; 0x1cd
 8002a72:	4879      	ldr	r0, [pc, #484]	; (8002c58 <HAL_RCC_OscConfig+0x648>)
 8002a74:	f7fe fc76 	bl	8001364 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 80e4 	beq.w	8002c4a <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a82:	4b74      	ldr	r3, [pc, #464]	; (8002c54 <HAL_RCC_OscConfig+0x644>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 030c 	and.w	r3, r3, #12
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	f000 80a5 	beq.w	8002bda <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	f040 8089 	bne.w	8002bac <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d009      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x4a6>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aaa:	d004      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x4a6>
 8002aac:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8002ab0:	4869      	ldr	r0, [pc, #420]	; (8002c58 <HAL_RCC_OscConfig+0x648>)
 8002ab2:	f7fe fc57 	bl	8001364 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	2b3f      	cmp	r3, #63	; 0x3f
 8002abc:	d904      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x4b8>
 8002abe:	f240 11d7 	movw	r1, #471	; 0x1d7
 8002ac2:	4865      	ldr	r0, [pc, #404]	; (8002c58 <HAL_RCC_OscConfig+0x648>)
 8002ac4:	f7fe fc4e 	bl	8001364 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002acc:	2b31      	cmp	r3, #49	; 0x31
 8002ace:	d904      	bls.n	8002ada <HAL_RCC_OscConfig+0x4ca>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8002ad8:	d904      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x4d4>
 8002ada:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8002ade:	485e      	ldr	r0, [pc, #376]	; (8002c58 <HAL_RCC_OscConfig+0x648>)
 8002ae0:	f7fe fc40 	bl	8001364 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d010      	beq.n	8002b0e <HAL_RCC_OscConfig+0x4fe>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d00c      	beq.n	8002b0e <HAL_RCC_OscConfig+0x4fe>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af8:	2b06      	cmp	r3, #6
 8002afa:	d008      	beq.n	8002b0e <HAL_RCC_OscConfig+0x4fe>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d004      	beq.n	8002b0e <HAL_RCC_OscConfig+0x4fe>
 8002b04:	f240 11d9 	movw	r1, #473	; 0x1d9
 8002b08:	4853      	ldr	r0, [pc, #332]	; (8002c58 <HAL_RCC_OscConfig+0x648>)
 8002b0a:	f7fe fc2b 	bl	8001364 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d903      	bls.n	8002b1e <HAL_RCC_OscConfig+0x50e>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1a:	2b0f      	cmp	r3, #15
 8002b1c:	d904      	bls.n	8002b28 <HAL_RCC_OscConfig+0x518>
 8002b1e:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8002b22:	484d      	ldr	r0, [pc, #308]	; (8002c58 <HAL_RCC_OscConfig+0x648>)
 8002b24:	f7fe fc1e 	bl	8001364 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b28:	4b4c      	ldr	r3, [pc, #304]	; (8002c5c <HAL_RCC_OscConfig+0x64c>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2e:	f7fe fd49 	bl	80015c4 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b36:	f7fe fd45 	bl	80015c4 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e081      	b.n	8002c4c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b48:	4b42      	ldr	r3, [pc, #264]	; (8002c54 <HAL_RCC_OscConfig+0x644>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1f0      	bne.n	8002b36 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69da      	ldr	r2, [r3, #28]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	019b      	lsls	r3, r3, #6
 8002b64:	431a      	orrs	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6a:	085b      	lsrs	r3, r3, #1
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	041b      	lsls	r3, r3, #16
 8002b70:	431a      	orrs	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b76:	061b      	lsls	r3, r3, #24
 8002b78:	4936      	ldr	r1, [pc, #216]	; (8002c54 <HAL_RCC_OscConfig+0x644>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b7e:	4b37      	ldr	r3, [pc, #220]	; (8002c5c <HAL_RCC_OscConfig+0x64c>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b84:	f7fe fd1e 	bl	80015c4 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b8c:	f7fe fd1a 	bl	80015c4 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e056      	b.n	8002c4c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b9e:	4b2d      	ldr	r3, [pc, #180]	; (8002c54 <HAL_RCC_OscConfig+0x644>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0f0      	beq.n	8002b8c <HAL_RCC_OscConfig+0x57c>
 8002baa:	e04e      	b.n	8002c4a <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bac:	4b2b      	ldr	r3, [pc, #172]	; (8002c5c <HAL_RCC_OscConfig+0x64c>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb2:	f7fe fd07 	bl	80015c4 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bba:	f7fe fd03 	bl	80015c4 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e03f      	b.n	8002c4c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bcc:	4b21      	ldr	r3, [pc, #132]	; (8002c54 <HAL_RCC_OscConfig+0x644>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1f0      	bne.n	8002bba <HAL_RCC_OscConfig+0x5aa>
 8002bd8:	e037      	b.n	8002c4a <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d101      	bne.n	8002be6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e032      	b.n	8002c4c <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002be6:	4b1b      	ldr	r3, [pc, #108]	; (8002c54 <HAL_RCC_OscConfig+0x644>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d028      	beq.n	8002c46 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d121      	bne.n	8002c46 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d11a      	bne.n	8002c46 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c16:	4013      	ands	r3, r2
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c1c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d111      	bne.n	8002c46 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2c:	085b      	lsrs	r3, r3, #1
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d107      	bne.n	8002c46 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c40:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d001      	beq.n	8002c4a <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e000      	b.n	8002c4c <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3718      	adds	r7, #24
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40023800 	.word	0x40023800
 8002c58:	080097bc 	.word	0x080097bc
 8002c5c:	42470060 	.word	0x42470060

08002c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e18c      	b.n	8002f8e <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x24>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b0f      	cmp	r3, #15
 8002c82:	d904      	bls.n	8002c8e <HAL_RCC_ClockConfig+0x2e>
 8002c84:	f240 215a 	movw	r1, #602	; 0x25a
 8002c88:	4887      	ldr	r0, [pc, #540]	; (8002ea8 <HAL_RCC_ClockConfig+0x248>)
 8002c8a:	f7fe fb6b 	bl	8001364 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d031      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x98>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d02e      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x98>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d02b      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x98>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	2b03      	cmp	r3, #3
 8002ca4:	d028      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x98>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2b04      	cmp	r3, #4
 8002caa:	d025      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x98>
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	2b05      	cmp	r3, #5
 8002cb0:	d022      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x98>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b06      	cmp	r3, #6
 8002cb6:	d01f      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x98>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	2b07      	cmp	r3, #7
 8002cbc:	d01c      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x98>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d019      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x98>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	2b09      	cmp	r3, #9
 8002cc8:	d016      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x98>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2b0a      	cmp	r3, #10
 8002cce:	d013      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x98>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	2b0b      	cmp	r3, #11
 8002cd4:	d010      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x98>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b0c      	cmp	r3, #12
 8002cda:	d00d      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x98>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	2b0d      	cmp	r3, #13
 8002ce0:	d00a      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x98>
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	2b0e      	cmp	r3, #14
 8002ce6:	d007      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x98>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	2b0f      	cmp	r3, #15
 8002cec:	d004      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x98>
 8002cee:	f240 215b 	movw	r1, #603	; 0x25b
 8002cf2:	486d      	ldr	r0, [pc, #436]	; (8002ea8 <HAL_RCC_ClockConfig+0x248>)
 8002cf4:	f7fe fb36 	bl	8001364 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf8:	4b6c      	ldr	r3, [pc, #432]	; (8002eac <HAL_RCC_ClockConfig+0x24c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 030f 	and.w	r3, r3, #15
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d90c      	bls.n	8002d20 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d06:	4b69      	ldr	r3, [pc, #420]	; (8002eac <HAL_RCC_ClockConfig+0x24c>)
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0e:	4b67      	ldr	r3, [pc, #412]	; (8002eac <HAL_RCC_ClockConfig+0x24c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d001      	beq.n	8002d20 <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e136      	b.n	8002f8e <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d049      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d38:	4b5d      	ldr	r3, [pc, #372]	; (8002eb0 <HAL_RCC_ClockConfig+0x250>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	4a5c      	ldr	r2, [pc, #368]	; (8002eb0 <HAL_RCC_ClockConfig+0x250>)
 8002d3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0308 	and.w	r3, r3, #8
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d005      	beq.n	8002d5c <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d50:	4b57      	ldr	r3, [pc, #348]	; (8002eb0 <HAL_RCC_ClockConfig+0x250>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	4a56      	ldr	r2, [pc, #344]	; (8002eb0 <HAL_RCC_ClockConfig+0x250>)
 8002d56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d024      	beq.n	8002dae <HAL_RCC_ClockConfig+0x14e>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	2b80      	cmp	r3, #128	; 0x80
 8002d6a:	d020      	beq.n	8002dae <HAL_RCC_ClockConfig+0x14e>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	2b90      	cmp	r3, #144	; 0x90
 8002d72:	d01c      	beq.n	8002dae <HAL_RCC_ClockConfig+0x14e>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2ba0      	cmp	r3, #160	; 0xa0
 8002d7a:	d018      	beq.n	8002dae <HAL_RCC_ClockConfig+0x14e>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	2bb0      	cmp	r3, #176	; 0xb0
 8002d82:	d014      	beq.n	8002dae <HAL_RCC_ClockConfig+0x14e>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	2bc0      	cmp	r3, #192	; 0xc0
 8002d8a:	d010      	beq.n	8002dae <HAL_RCC_ClockConfig+0x14e>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	2bd0      	cmp	r3, #208	; 0xd0
 8002d92:	d00c      	beq.n	8002dae <HAL_RCC_ClockConfig+0x14e>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	2be0      	cmp	r3, #224	; 0xe0
 8002d9a:	d008      	beq.n	8002dae <HAL_RCC_ClockConfig+0x14e>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	2bf0      	cmp	r3, #240	; 0xf0
 8002da2:	d004      	beq.n	8002dae <HAL_RCC_ClockConfig+0x14e>
 8002da4:	f240 217e 	movw	r1, #638	; 0x27e
 8002da8:	483f      	ldr	r0, [pc, #252]	; (8002ea8 <HAL_RCC_ClockConfig+0x248>)
 8002daa:	f7fe fadb 	bl	8001364 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dae:	4b40      	ldr	r3, [pc, #256]	; (8002eb0 <HAL_RCC_ClockConfig+0x250>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	493d      	ldr	r1, [pc, #244]	; (8002eb0 <HAL_RCC_ClockConfig+0x250>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d059      	beq.n	8002e80 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d010      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x196>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d00c      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x196>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d008      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x196>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	d004      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x196>
 8002dec:	f240 2185 	movw	r1, #645	; 0x285
 8002df0:	482d      	ldr	r0, [pc, #180]	; (8002ea8 <HAL_RCC_ClockConfig+0x248>)
 8002df2:	f7fe fab7 	bl	8001364 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d107      	bne.n	8002e0e <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dfe:	4b2c      	ldr	r3, [pc, #176]	; (8002eb0 <HAL_RCC_ClockConfig+0x250>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d119      	bne.n	8002e3e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e0bf      	b.n	8002f8e <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d003      	beq.n	8002e1e <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	d107      	bne.n	8002e2e <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e1e:	4b24      	ldr	r3, [pc, #144]	; (8002eb0 <HAL_RCC_ClockConfig+0x250>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d109      	bne.n	8002e3e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e0af      	b.n	8002f8e <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e2e:	4b20      	ldr	r3, [pc, #128]	; (8002eb0 <HAL_RCC_ClockConfig+0x250>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e0a7      	b.n	8002f8e <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e3e:	4b1c      	ldr	r3, [pc, #112]	; (8002eb0 <HAL_RCC_ClockConfig+0x250>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f023 0203 	bic.w	r2, r3, #3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	4919      	ldr	r1, [pc, #100]	; (8002eb0 <HAL_RCC_ClockConfig+0x250>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e50:	f7fe fbb8 	bl	80015c4 <HAL_GetTick>
 8002e54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e56:	e00a      	b.n	8002e6e <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e58:	f7fe fbb4 	bl	80015c4 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e08f      	b.n	8002f8e <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e6e:	4b10      	ldr	r3, [pc, #64]	; (8002eb0 <HAL_RCC_ClockConfig+0x250>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 020c 	and.w	r2, r3, #12
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d1eb      	bne.n	8002e58 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e80:	4b0a      	ldr	r3, [pc, #40]	; (8002eac <HAL_RCC_ClockConfig+0x24c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 030f 	and.w	r3, r3, #15
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d212      	bcs.n	8002eb4 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8e:	4b07      	ldr	r3, [pc, #28]	; (8002eac <HAL_RCC_ClockConfig+0x24c>)
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e96:	4b05      	ldr	r3, [pc, #20]	; (8002eac <HAL_RCC_ClockConfig+0x24c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d007      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e072      	b.n	8002f8e <HAL_RCC_ClockConfig+0x32e>
 8002ea8:	080097bc 	.word	0x080097bc
 8002eac:	40023c00 	.word	0x40023c00
 8002eb0:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d025      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d018      	beq.n	8002efa <HAL_RCC_ClockConfig+0x29a>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed0:	d013      	beq.n	8002efa <HAL_RCC_ClockConfig+0x29a>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002eda:	d00e      	beq.n	8002efa <HAL_RCC_ClockConfig+0x29a>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002ee4:	d009      	beq.n	8002efa <HAL_RCC_ClockConfig+0x29a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002eee:	d004      	beq.n	8002efa <HAL_RCC_ClockConfig+0x29a>
 8002ef0:	f240 21c3 	movw	r1, #707	; 0x2c3
 8002ef4:	4828      	ldr	r0, [pc, #160]	; (8002f98 <HAL_RCC_ClockConfig+0x338>)
 8002ef6:	f7fe fa35 	bl	8001364 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002efa:	4b28      	ldr	r3, [pc, #160]	; (8002f9c <HAL_RCC_ClockConfig+0x33c>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	4925      	ldr	r1, [pc, #148]	; (8002f9c <HAL_RCC_ClockConfig+0x33c>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0308 	and.w	r3, r3, #8
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d026      	beq.n	8002f66 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d018      	beq.n	8002f52 <HAL_RCC_ClockConfig+0x2f2>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f28:	d013      	beq.n	8002f52 <HAL_RCC_ClockConfig+0x2f2>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002f32:	d00e      	beq.n	8002f52 <HAL_RCC_ClockConfig+0x2f2>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002f3c:	d009      	beq.n	8002f52 <HAL_RCC_ClockConfig+0x2f2>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002f46:	d004      	beq.n	8002f52 <HAL_RCC_ClockConfig+0x2f2>
 8002f48:	f240 21ca 	movw	r1, #714	; 0x2ca
 8002f4c:	4812      	ldr	r0, [pc, #72]	; (8002f98 <HAL_RCC_ClockConfig+0x338>)
 8002f4e:	f7fe fa09 	bl	8001364 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f52:	4b12      	ldr	r3, [pc, #72]	; (8002f9c <HAL_RCC_ClockConfig+0x33c>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	490e      	ldr	r1, [pc, #56]	; (8002f9c <HAL_RCC_ClockConfig+0x33c>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f66:	f000 f821 	bl	8002fac <HAL_RCC_GetSysClockFreq>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <HAL_RCC_ClockConfig+0x33c>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	091b      	lsrs	r3, r3, #4
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	490a      	ldr	r1, [pc, #40]	; (8002fa0 <HAL_RCC_ClockConfig+0x340>)
 8002f78:	5ccb      	ldrb	r3, [r1, r3]
 8002f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f7e:	4a09      	ldr	r2, [pc, #36]	; (8002fa4 <HAL_RCC_ClockConfig+0x344>)
 8002f80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f82:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <HAL_RCC_ClockConfig+0x348>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fe fa22 	bl	80013d0 <HAL_InitTick>

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	080097bc 	.word	0x080097bc
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	08009950 	.word	0x08009950
 8002fa4:	20000004 	.word	0x20000004
 8002fa8:	20000008 	.word	0x20000008

08002fac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fb0:	b094      	sub	sp, #80	; 0x50
 8002fb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	647b      	str	r3, [r7, #68]	; 0x44
 8002fb8:	2300      	movs	r3, #0
 8002fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fc4:	4b79      	ldr	r3, [pc, #484]	; (80031ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f003 030c 	and.w	r3, r3, #12
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d00d      	beq.n	8002fec <HAL_RCC_GetSysClockFreq+0x40>
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	f200 80e1 	bhi.w	8003198 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d002      	beq.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x34>
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d003      	beq.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002fde:	e0db      	b.n	8003198 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fe0:	4b73      	ldr	r3, [pc, #460]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fe2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002fe4:	e0db      	b.n	800319e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fe6:	4b73      	ldr	r3, [pc, #460]	; (80031b4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002fe8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fea:	e0d8      	b.n	800319e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fec:	4b6f      	ldr	r3, [pc, #444]	; (80031ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ff4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ff6:	4b6d      	ldr	r3, [pc, #436]	; (80031ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d063      	beq.n	80030ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003002:	4b6a      	ldr	r3, [pc, #424]	; (80031ac <HAL_RCC_GetSysClockFreq+0x200>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	099b      	lsrs	r3, r3, #6
 8003008:	2200      	movs	r2, #0
 800300a:	63bb      	str	r3, [r7, #56]	; 0x38
 800300c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800300e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003014:	633b      	str	r3, [r7, #48]	; 0x30
 8003016:	2300      	movs	r3, #0
 8003018:	637b      	str	r3, [r7, #52]	; 0x34
 800301a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800301e:	4622      	mov	r2, r4
 8003020:	462b      	mov	r3, r5
 8003022:	f04f 0000 	mov.w	r0, #0
 8003026:	f04f 0100 	mov.w	r1, #0
 800302a:	0159      	lsls	r1, r3, #5
 800302c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003030:	0150      	lsls	r0, r2, #5
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	4621      	mov	r1, r4
 8003038:	1a51      	subs	r1, r2, r1
 800303a:	6139      	str	r1, [r7, #16]
 800303c:	4629      	mov	r1, r5
 800303e:	eb63 0301 	sbc.w	r3, r3, r1
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	f04f 0300 	mov.w	r3, #0
 800304c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003050:	4659      	mov	r1, fp
 8003052:	018b      	lsls	r3, r1, #6
 8003054:	4651      	mov	r1, sl
 8003056:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800305a:	4651      	mov	r1, sl
 800305c:	018a      	lsls	r2, r1, #6
 800305e:	4651      	mov	r1, sl
 8003060:	ebb2 0801 	subs.w	r8, r2, r1
 8003064:	4659      	mov	r1, fp
 8003066:	eb63 0901 	sbc.w	r9, r3, r1
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003076:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800307a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800307e:	4690      	mov	r8, r2
 8003080:	4699      	mov	r9, r3
 8003082:	4623      	mov	r3, r4
 8003084:	eb18 0303 	adds.w	r3, r8, r3
 8003088:	60bb      	str	r3, [r7, #8]
 800308a:	462b      	mov	r3, r5
 800308c:	eb49 0303 	adc.w	r3, r9, r3
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	f04f 0300 	mov.w	r3, #0
 800309a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800309e:	4629      	mov	r1, r5
 80030a0:	024b      	lsls	r3, r1, #9
 80030a2:	4621      	mov	r1, r4
 80030a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030a8:	4621      	mov	r1, r4
 80030aa:	024a      	lsls	r2, r1, #9
 80030ac:	4610      	mov	r0, r2
 80030ae:	4619      	mov	r1, r3
 80030b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030b2:	2200      	movs	r2, #0
 80030b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80030b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030bc:	f7fd f8e2 	bl	8000284 <__aeabi_uldivmod>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4613      	mov	r3, r2
 80030c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030c8:	e058      	b.n	800317c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ca:	4b38      	ldr	r3, [pc, #224]	; (80031ac <HAL_RCC_GetSysClockFreq+0x200>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	099b      	lsrs	r3, r3, #6
 80030d0:	2200      	movs	r2, #0
 80030d2:	4618      	mov	r0, r3
 80030d4:	4611      	mov	r1, r2
 80030d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030da:	623b      	str	r3, [r7, #32]
 80030dc:	2300      	movs	r3, #0
 80030de:	627b      	str	r3, [r7, #36]	; 0x24
 80030e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030e4:	4642      	mov	r2, r8
 80030e6:	464b      	mov	r3, r9
 80030e8:	f04f 0000 	mov.w	r0, #0
 80030ec:	f04f 0100 	mov.w	r1, #0
 80030f0:	0159      	lsls	r1, r3, #5
 80030f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030f6:	0150      	lsls	r0, r2, #5
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4641      	mov	r1, r8
 80030fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8003102:	4649      	mov	r1, r9
 8003104:	eb63 0b01 	sbc.w	fp, r3, r1
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003114:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003118:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800311c:	ebb2 040a 	subs.w	r4, r2, sl
 8003120:	eb63 050b 	sbc.w	r5, r3, fp
 8003124:	f04f 0200 	mov.w	r2, #0
 8003128:	f04f 0300 	mov.w	r3, #0
 800312c:	00eb      	lsls	r3, r5, #3
 800312e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003132:	00e2      	lsls	r2, r4, #3
 8003134:	4614      	mov	r4, r2
 8003136:	461d      	mov	r5, r3
 8003138:	4643      	mov	r3, r8
 800313a:	18e3      	adds	r3, r4, r3
 800313c:	603b      	str	r3, [r7, #0]
 800313e:	464b      	mov	r3, r9
 8003140:	eb45 0303 	adc.w	r3, r5, r3
 8003144:	607b      	str	r3, [r7, #4]
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003152:	4629      	mov	r1, r5
 8003154:	028b      	lsls	r3, r1, #10
 8003156:	4621      	mov	r1, r4
 8003158:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800315c:	4621      	mov	r1, r4
 800315e:	028a      	lsls	r2, r1, #10
 8003160:	4610      	mov	r0, r2
 8003162:	4619      	mov	r1, r3
 8003164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003166:	2200      	movs	r2, #0
 8003168:	61bb      	str	r3, [r7, #24]
 800316a:	61fa      	str	r2, [r7, #28]
 800316c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003170:	f7fd f888 	bl	8000284 <__aeabi_uldivmod>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	4613      	mov	r3, r2
 800317a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800317c:	4b0b      	ldr	r3, [pc, #44]	; (80031ac <HAL_RCC_GetSysClockFreq+0x200>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	0c1b      	lsrs	r3, r3, #16
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	3301      	adds	r3, #1
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800318c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800318e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003190:	fbb2 f3f3 	udiv	r3, r2, r3
 8003194:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003196:	e002      	b.n	800319e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003198:	4b05      	ldr	r3, [pc, #20]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800319a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800319c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800319e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3750      	adds	r7, #80	; 0x50
 80031a4:	46bd      	mov	sp, r7
 80031a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031aa:	bf00      	nop
 80031ac:	40023800 	.word	0x40023800
 80031b0:	00f42400 	.word	0x00f42400
 80031b4:	007a1200 	.word	0x007a1200

080031b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031bc:	4b03      	ldr	r3, [pc, #12]	; (80031cc <HAL_RCC_GetHCLKFreq+0x14>)
 80031be:	681b      	ldr	r3, [r3, #0]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	20000004 	.word	0x20000004

080031d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031d4:	f7ff fff0 	bl	80031b8 <HAL_RCC_GetHCLKFreq>
 80031d8:	4602      	mov	r2, r0
 80031da:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	0a9b      	lsrs	r3, r3, #10
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	4903      	ldr	r1, [pc, #12]	; (80031f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031e6:	5ccb      	ldrb	r3, [r1, r3]
 80031e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40023800 	.word	0x40023800
 80031f4:	08009960 	.word	0x08009960

080031f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031fc:	f7ff ffdc 	bl	80031b8 <HAL_RCC_GetHCLKFreq>
 8003200:	4602      	mov	r2, r0
 8003202:	4b05      	ldr	r3, [pc, #20]	; (8003218 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	0b5b      	lsrs	r3, r3, #13
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	4903      	ldr	r1, [pc, #12]	; (800321c <HAL_RCC_GetPCLK2Freq+0x24>)
 800320e:	5ccb      	ldrb	r3, [r1, r3]
 8003210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003214:	4618      	mov	r0, r3
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40023800 	.word	0x40023800
 800321c:	08009960 	.word	0x08009960

08003220 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	220f      	movs	r2, #15
 800322e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003230:	4b12      	ldr	r3, [pc, #72]	; (800327c <HAL_RCC_GetClockConfig+0x5c>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 0203 	and.w	r2, r3, #3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800323c:	4b0f      	ldr	r3, [pc, #60]	; (800327c <HAL_RCC_GetClockConfig+0x5c>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003248:	4b0c      	ldr	r3, [pc, #48]	; (800327c <HAL_RCC_GetClockConfig+0x5c>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003254:	4b09      	ldr	r3, [pc, #36]	; (800327c <HAL_RCC_GetClockConfig+0x5c>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	08db      	lsrs	r3, r3, #3
 800325a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003262:	4b07      	ldr	r3, [pc, #28]	; (8003280 <HAL_RCC_GetClockConfig+0x60>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 020f 	and.w	r2, r3, #15
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	601a      	str	r2, [r3, #0]
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40023800 	.word	0x40023800
 8003280:	40023c00 	.word	0x40023c00

08003284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e0c5      	b.n	8003422 <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a64      	ldr	r2, [pc, #400]	; (800342c <HAL_TIM_Base_Init+0x1a8>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d045      	beq.n	800332c <HAL_TIM_Base_Init+0xa8>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a8:	d040      	beq.n	800332c <HAL_TIM_Base_Init+0xa8>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a60      	ldr	r2, [pc, #384]	; (8003430 <HAL_TIM_Base_Init+0x1ac>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d03b      	beq.n	800332c <HAL_TIM_Base_Init+0xa8>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a5e      	ldr	r2, [pc, #376]	; (8003434 <HAL_TIM_Base_Init+0x1b0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d036      	beq.n	800332c <HAL_TIM_Base_Init+0xa8>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a5d      	ldr	r2, [pc, #372]	; (8003438 <HAL_TIM_Base_Init+0x1b4>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d031      	beq.n	800332c <HAL_TIM_Base_Init+0xa8>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a5b      	ldr	r2, [pc, #364]	; (800343c <HAL_TIM_Base_Init+0x1b8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d02c      	beq.n	800332c <HAL_TIM_Base_Init+0xa8>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a5a      	ldr	r2, [pc, #360]	; (8003440 <HAL_TIM_Base_Init+0x1bc>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d027      	beq.n	800332c <HAL_TIM_Base_Init+0xa8>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a58      	ldr	r2, [pc, #352]	; (8003444 <HAL_TIM_Base_Init+0x1c0>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d022      	beq.n	800332c <HAL_TIM_Base_Init+0xa8>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a57      	ldr	r2, [pc, #348]	; (8003448 <HAL_TIM_Base_Init+0x1c4>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d01d      	beq.n	800332c <HAL_TIM_Base_Init+0xa8>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a55      	ldr	r2, [pc, #340]	; (800344c <HAL_TIM_Base_Init+0x1c8>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d018      	beq.n	800332c <HAL_TIM_Base_Init+0xa8>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a54      	ldr	r2, [pc, #336]	; (8003450 <HAL_TIM_Base_Init+0x1cc>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d013      	beq.n	800332c <HAL_TIM_Base_Init+0xa8>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a52      	ldr	r2, [pc, #328]	; (8003454 <HAL_TIM_Base_Init+0x1d0>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00e      	beq.n	800332c <HAL_TIM_Base_Init+0xa8>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a51      	ldr	r2, [pc, #324]	; (8003458 <HAL_TIM_Base_Init+0x1d4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d009      	beq.n	800332c <HAL_TIM_Base_Init+0xa8>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a4f      	ldr	r2, [pc, #316]	; (800345c <HAL_TIM_Base_Init+0x1d8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d004      	beq.n	800332c <HAL_TIM_Base_Init+0xa8>
 8003322:	f240 1113 	movw	r1, #275	; 0x113
 8003326:	484e      	ldr	r0, [pc, #312]	; (8003460 <HAL_TIM_Base_Init+0x1dc>)
 8003328:	f7fe f81c 	bl	8001364 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d014      	beq.n	800335e <HAL_TIM_Base_Init+0xda>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	2b10      	cmp	r3, #16
 800333a:	d010      	beq.n	800335e <HAL_TIM_Base_Init+0xda>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	2b20      	cmp	r3, #32
 8003342:	d00c      	beq.n	800335e <HAL_TIM_Base_Init+0xda>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	2b40      	cmp	r3, #64	; 0x40
 800334a:	d008      	beq.n	800335e <HAL_TIM_Base_Init+0xda>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	2b60      	cmp	r3, #96	; 0x60
 8003352:	d004      	beq.n	800335e <HAL_TIM_Base_Init+0xda>
 8003354:	f44f 718a 	mov.w	r1, #276	; 0x114
 8003358:	4841      	ldr	r0, [pc, #260]	; (8003460 <HAL_TIM_Base_Init+0x1dc>)
 800335a:	f7fe f803 	bl	8001364 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00e      	beq.n	8003384 <HAL_TIM_Base_Init+0x100>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800336e:	d009      	beq.n	8003384 <HAL_TIM_Base_Init+0x100>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003378:	d004      	beq.n	8003384 <HAL_TIM_Base_Init+0x100>
 800337a:	f240 1115 	movw	r1, #277	; 0x115
 800337e:	4838      	ldr	r0, [pc, #224]	; (8003460 <HAL_TIM_Base_Init+0x1dc>)
 8003380:	f7fd fff0 	bl	8001364 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d008      	beq.n	800339e <HAL_TIM_Base_Init+0x11a>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	2b80      	cmp	r3, #128	; 0x80
 8003392:	d004      	beq.n	800339e <HAL_TIM_Base_Init+0x11a>
 8003394:	f44f 718b 	mov.w	r1, #278	; 0x116
 8003398:	4831      	ldr	r0, [pc, #196]	; (8003460 <HAL_TIM_Base_Init+0x1dc>)
 800339a:	f7fd ffe3 	bl	8001364 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d106      	bne.n	80033b8 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f856 	bl	8003464 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2202      	movs	r2, #2
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3304      	adds	r3, #4
 80033c8:	4619      	mov	r1, r3
 80033ca:	4610      	mov	r0, r2
 80033cc:	f000 fa54 	bl	8003878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	40010000 	.word	0x40010000
 8003430:	40000400 	.word	0x40000400
 8003434:	40000800 	.word	0x40000800
 8003438:	40000c00 	.word	0x40000c00
 800343c:	40001000 	.word	0x40001000
 8003440:	40001400 	.word	0x40001400
 8003444:	40010400 	.word	0x40010400
 8003448:	40014000 	.word	0x40014000
 800344c:	40014400 	.word	0x40014400
 8003450:	40014800 	.word	0x40014800
 8003454:	40001800 	.word	0x40001800
 8003458:	40001c00 	.word	0x40001c00
 800345c:	40002000 	.word	0x40002000
 8003460:	080097f4 	.word	0x080097f4

08003464 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a51      	ldr	r2, [pc, #324]	; (80035cc <HAL_TIM_Base_Start_IT+0x154>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d045      	beq.n	8003516 <HAL_TIM_Base_Start_IT+0x9e>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003492:	d040      	beq.n	8003516 <HAL_TIM_Base_Start_IT+0x9e>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a4d      	ldr	r2, [pc, #308]	; (80035d0 <HAL_TIM_Base_Start_IT+0x158>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d03b      	beq.n	8003516 <HAL_TIM_Base_Start_IT+0x9e>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a4c      	ldr	r2, [pc, #304]	; (80035d4 <HAL_TIM_Base_Start_IT+0x15c>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d036      	beq.n	8003516 <HAL_TIM_Base_Start_IT+0x9e>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a4a      	ldr	r2, [pc, #296]	; (80035d8 <HAL_TIM_Base_Start_IT+0x160>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d031      	beq.n	8003516 <HAL_TIM_Base_Start_IT+0x9e>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a49      	ldr	r2, [pc, #292]	; (80035dc <HAL_TIM_Base_Start_IT+0x164>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d02c      	beq.n	8003516 <HAL_TIM_Base_Start_IT+0x9e>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a47      	ldr	r2, [pc, #284]	; (80035e0 <HAL_TIM_Base_Start_IT+0x168>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d027      	beq.n	8003516 <HAL_TIM_Base_Start_IT+0x9e>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a46      	ldr	r2, [pc, #280]	; (80035e4 <HAL_TIM_Base_Start_IT+0x16c>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d022      	beq.n	8003516 <HAL_TIM_Base_Start_IT+0x9e>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a44      	ldr	r2, [pc, #272]	; (80035e8 <HAL_TIM_Base_Start_IT+0x170>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d01d      	beq.n	8003516 <HAL_TIM_Base_Start_IT+0x9e>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a43      	ldr	r2, [pc, #268]	; (80035ec <HAL_TIM_Base_Start_IT+0x174>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d018      	beq.n	8003516 <HAL_TIM_Base_Start_IT+0x9e>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a41      	ldr	r2, [pc, #260]	; (80035f0 <HAL_TIM_Base_Start_IT+0x178>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d013      	beq.n	8003516 <HAL_TIM_Base_Start_IT+0x9e>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a40      	ldr	r2, [pc, #256]	; (80035f4 <HAL_TIM_Base_Start_IT+0x17c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d00e      	beq.n	8003516 <HAL_TIM_Base_Start_IT+0x9e>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a3e      	ldr	r2, [pc, #248]	; (80035f8 <HAL_TIM_Base_Start_IT+0x180>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d009      	beq.n	8003516 <HAL_TIM_Base_Start_IT+0x9e>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a3d      	ldr	r2, [pc, #244]	; (80035fc <HAL_TIM_Base_Start_IT+0x184>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d004      	beq.n	8003516 <HAL_TIM_Base_Start_IT+0x9e>
 800350c:	f240 11cf 	movw	r1, #463	; 0x1cf
 8003510:	483b      	ldr	r0, [pc, #236]	; (8003600 <HAL_TIM_Base_Start_IT+0x188>)
 8003512:	f7fd ff27 	bl	8001364 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b01      	cmp	r3, #1
 8003520:	d001      	beq.n	8003526 <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e04e      	b.n	80035c4 <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2202      	movs	r2, #2
 800352a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68da      	ldr	r2, [r3, #12]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f042 0201 	orr.w	r2, r2, #1
 800353c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a22      	ldr	r2, [pc, #136]	; (80035cc <HAL_TIM_Base_Start_IT+0x154>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d022      	beq.n	800358e <HAL_TIM_Base_Start_IT+0x116>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003550:	d01d      	beq.n	800358e <HAL_TIM_Base_Start_IT+0x116>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a1e      	ldr	r2, [pc, #120]	; (80035d0 <HAL_TIM_Base_Start_IT+0x158>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d018      	beq.n	800358e <HAL_TIM_Base_Start_IT+0x116>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a1c      	ldr	r2, [pc, #112]	; (80035d4 <HAL_TIM_Base_Start_IT+0x15c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d013      	beq.n	800358e <HAL_TIM_Base_Start_IT+0x116>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a1b      	ldr	r2, [pc, #108]	; (80035d8 <HAL_TIM_Base_Start_IT+0x160>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d00e      	beq.n	800358e <HAL_TIM_Base_Start_IT+0x116>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a1b      	ldr	r2, [pc, #108]	; (80035e4 <HAL_TIM_Base_Start_IT+0x16c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d009      	beq.n	800358e <HAL_TIM_Base_Start_IT+0x116>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a1a      	ldr	r2, [pc, #104]	; (80035e8 <HAL_TIM_Base_Start_IT+0x170>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d004      	beq.n	800358e <HAL_TIM_Base_Start_IT+0x116>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a1a      	ldr	r2, [pc, #104]	; (80035f4 <HAL_TIM_Base_Start_IT+0x17c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d111      	bne.n	80035b2 <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2b06      	cmp	r3, #6
 800359e:	d010      	beq.n	80035c2 <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0201 	orr.w	r2, r2, #1
 80035ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b0:	e007      	b.n	80035c2 <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f042 0201 	orr.w	r2, r2, #1
 80035c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40010000 	.word	0x40010000
 80035d0:	40000400 	.word	0x40000400
 80035d4:	40000800 	.word	0x40000800
 80035d8:	40000c00 	.word	0x40000c00
 80035dc:	40001000 	.word	0x40001000
 80035e0:	40001400 	.word	0x40001400
 80035e4:	40010400 	.word	0x40010400
 80035e8:	40014000 	.word	0x40014000
 80035ec:	40014400 	.word	0x40014400
 80035f0:	40014800 	.word	0x40014800
 80035f4:	40001800 	.word	0x40001800
 80035f8:	40001c00 	.word	0x40001c00
 80035fc:	40002000 	.word	0x40002000
 8003600:	080097f4 	.word	0x080097f4

08003604 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b02      	cmp	r3, #2
 8003618:	d122      	bne.n	8003660 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b02      	cmp	r3, #2
 8003626:	d11b      	bne.n	8003660 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f06f 0202 	mvn.w	r2, #2
 8003630:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f8f8 	bl	800383c <HAL_TIM_IC_CaptureCallback>
 800364c:	e005      	b.n	800365a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f8ea 	bl	8003828 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f8fb 	bl	8003850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	f003 0304 	and.w	r3, r3, #4
 800366a:	2b04      	cmp	r3, #4
 800366c:	d122      	bne.n	80036b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b04      	cmp	r3, #4
 800367a:	d11b      	bne.n	80036b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f06f 0204 	mvn.w	r2, #4
 8003684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2202      	movs	r2, #2
 800368a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f8ce 	bl	800383c <HAL_TIM_IC_CaptureCallback>
 80036a0:	e005      	b.n	80036ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f8c0 	bl	8003828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f8d1 	bl	8003850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b08      	cmp	r3, #8
 80036c0:	d122      	bne.n	8003708 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f003 0308 	and.w	r3, r3, #8
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d11b      	bne.n	8003708 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f06f 0208 	mvn.w	r2, #8
 80036d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2204      	movs	r2, #4
 80036de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f8a4 	bl	800383c <HAL_TIM_IC_CaptureCallback>
 80036f4:	e005      	b.n	8003702 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f896 	bl	8003828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f8a7 	bl	8003850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	f003 0310 	and.w	r3, r3, #16
 8003712:	2b10      	cmp	r3, #16
 8003714:	d122      	bne.n	800375c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f003 0310 	and.w	r3, r3, #16
 8003720:	2b10      	cmp	r3, #16
 8003722:	d11b      	bne.n	800375c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f06f 0210 	mvn.w	r2, #16
 800372c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2208      	movs	r2, #8
 8003732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f87a 	bl	800383c <HAL_TIM_IC_CaptureCallback>
 8003748:	e005      	b.n	8003756 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f86c 	bl	8003828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f87d 	bl	8003850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b01      	cmp	r3, #1
 8003768:	d10e      	bne.n	8003788 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b01      	cmp	r3, #1
 8003776:	d107      	bne.n	8003788 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f06f 0201 	mvn.w	r2, #1
 8003780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f846 	bl	8003814 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003792:	2b80      	cmp	r3, #128	; 0x80
 8003794:	d10e      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a0:	2b80      	cmp	r3, #128	; 0x80
 80037a2:	d107      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f90c 	bl	80039cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037be:	2b40      	cmp	r3, #64	; 0x40
 80037c0:	d10e      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037cc:	2b40      	cmp	r3, #64	; 0x40
 80037ce:	d107      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f842 	bl	8003864 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	f003 0320 	and.w	r3, r3, #32
 80037ea:	2b20      	cmp	r3, #32
 80037ec:	d10e      	bne.n	800380c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f003 0320 	and.w	r3, r3, #32
 80037f8:	2b20      	cmp	r3, #32
 80037fa:	d107      	bne.n	800380c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f06f 0220 	mvn.w	r2, #32
 8003804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f8d6 	bl	80039b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800380c:	bf00      	nop
 800380e:	3708      	adds	r7, #8
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a40      	ldr	r2, [pc, #256]	; (800398c <TIM_Base_SetConfig+0x114>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d013      	beq.n	80038b8 <TIM_Base_SetConfig+0x40>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003896:	d00f      	beq.n	80038b8 <TIM_Base_SetConfig+0x40>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a3d      	ldr	r2, [pc, #244]	; (8003990 <TIM_Base_SetConfig+0x118>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d00b      	beq.n	80038b8 <TIM_Base_SetConfig+0x40>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a3c      	ldr	r2, [pc, #240]	; (8003994 <TIM_Base_SetConfig+0x11c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d007      	beq.n	80038b8 <TIM_Base_SetConfig+0x40>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a3b      	ldr	r2, [pc, #236]	; (8003998 <TIM_Base_SetConfig+0x120>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d003      	beq.n	80038b8 <TIM_Base_SetConfig+0x40>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a3a      	ldr	r2, [pc, #232]	; (800399c <TIM_Base_SetConfig+0x124>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d108      	bne.n	80038ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a2f      	ldr	r2, [pc, #188]	; (800398c <TIM_Base_SetConfig+0x114>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d02b      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d8:	d027      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a2c      	ldr	r2, [pc, #176]	; (8003990 <TIM_Base_SetConfig+0x118>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d023      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a2b      	ldr	r2, [pc, #172]	; (8003994 <TIM_Base_SetConfig+0x11c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d01f      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a2a      	ldr	r2, [pc, #168]	; (8003998 <TIM_Base_SetConfig+0x120>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d01b      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a29      	ldr	r2, [pc, #164]	; (800399c <TIM_Base_SetConfig+0x124>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d017      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a28      	ldr	r2, [pc, #160]	; (80039a0 <TIM_Base_SetConfig+0x128>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d013      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a27      	ldr	r2, [pc, #156]	; (80039a4 <TIM_Base_SetConfig+0x12c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00f      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a26      	ldr	r2, [pc, #152]	; (80039a8 <TIM_Base_SetConfig+0x130>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d00b      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a25      	ldr	r2, [pc, #148]	; (80039ac <TIM_Base_SetConfig+0x134>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d007      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a24      	ldr	r2, [pc, #144]	; (80039b0 <TIM_Base_SetConfig+0x138>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d003      	beq.n	800392a <TIM_Base_SetConfig+0xb2>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a23      	ldr	r2, [pc, #140]	; (80039b4 <TIM_Base_SetConfig+0x13c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d108      	bne.n	800393c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	4313      	orrs	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	4313      	orrs	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	689a      	ldr	r2, [r3, #8]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a0a      	ldr	r2, [pc, #40]	; (800398c <TIM_Base_SetConfig+0x114>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d003      	beq.n	8003970 <TIM_Base_SetConfig+0xf8>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a0c      	ldr	r2, [pc, #48]	; (800399c <TIM_Base_SetConfig+0x124>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d103      	bne.n	8003978 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	615a      	str	r2, [r3, #20]
}
 800397e:	bf00      	nop
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	40010000 	.word	0x40010000
 8003990:	40000400 	.word	0x40000400
 8003994:	40000800 	.word	0x40000800
 8003998:	40000c00 	.word	0x40000c00
 800399c:	40010400 	.word	0x40010400
 80039a0:	40014000 	.word	0x40014000
 80039a4:	40014400 	.word	0x40014400
 80039a8:	40014800 	.word	0x40014800
 80039ac:	40001800 	.word	0x40001800
 80039b0:	40001c00 	.word	0x40001c00
 80039b4:	40002000 	.word	0x40002000

080039b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e0be      	b.n	8003b70 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d031      	beq.n	8003a5e <HAL_UART_Init+0x7e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a5e      	ldr	r2, [pc, #376]	; (8003b78 <HAL_UART_Init+0x198>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d013      	beq.n	8003a2c <HAL_UART_Init+0x4c>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a5c      	ldr	r2, [pc, #368]	; (8003b7c <HAL_UART_Init+0x19c>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d00e      	beq.n	8003a2c <HAL_UART_Init+0x4c>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a5b      	ldr	r2, [pc, #364]	; (8003b80 <HAL_UART_Init+0x1a0>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d009      	beq.n	8003a2c <HAL_UART_Init+0x4c>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a59      	ldr	r2, [pc, #356]	; (8003b84 <HAL_UART_Init+0x1a4>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d004      	beq.n	8003a2c <HAL_UART_Init+0x4c>
 8003a22:	f240 1173 	movw	r1, #371	; 0x173
 8003a26:	4858      	ldr	r0, [pc, #352]	; (8003b88 <HAL_UART_Init+0x1a8>)
 8003a28:	f7fd fc9c 	bl	8001364 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d041      	beq.n	8003ab8 <HAL_UART_Init+0xd8>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a3c:	d03c      	beq.n	8003ab8 <HAL_UART_Init+0xd8>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a46:	d037      	beq.n	8003ab8 <HAL_UART_Init+0xd8>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a50:	d032      	beq.n	8003ab8 <HAL_UART_Init+0xd8>
 8003a52:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8003a56:	484c      	ldr	r0, [pc, #304]	; (8003b88 <HAL_UART_Init+0x1a8>)
 8003a58:	f7fd fc84 	bl	8001364 <assert_failed>
 8003a5c:	e02c      	b.n	8003ab8 <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a45      	ldr	r2, [pc, #276]	; (8003b78 <HAL_UART_Init+0x198>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d027      	beq.n	8003ab8 <HAL_UART_Init+0xd8>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a43      	ldr	r2, [pc, #268]	; (8003b7c <HAL_UART_Init+0x19c>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d022      	beq.n	8003ab8 <HAL_UART_Init+0xd8>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a42      	ldr	r2, [pc, #264]	; (8003b80 <HAL_UART_Init+0x1a0>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d01d      	beq.n	8003ab8 <HAL_UART_Init+0xd8>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a42      	ldr	r2, [pc, #264]	; (8003b8c <HAL_UART_Init+0x1ac>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d018      	beq.n	8003ab8 <HAL_UART_Init+0xd8>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a41      	ldr	r2, [pc, #260]	; (8003b90 <HAL_UART_Init+0x1b0>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d013      	beq.n	8003ab8 <HAL_UART_Init+0xd8>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a3b      	ldr	r2, [pc, #236]	; (8003b84 <HAL_UART_Init+0x1a4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d00e      	beq.n	8003ab8 <HAL_UART_Init+0xd8>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a3d      	ldr	r2, [pc, #244]	; (8003b94 <HAL_UART_Init+0x1b4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d009      	beq.n	8003ab8 <HAL_UART_Init+0xd8>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a3b      	ldr	r2, [pc, #236]	; (8003b98 <HAL_UART_Init+0x1b8>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d004      	beq.n	8003ab8 <HAL_UART_Init+0xd8>
 8003aae:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8003ab2:	4835      	ldr	r0, [pc, #212]	; (8003b88 <HAL_UART_Init+0x1a8>)
 8003ab4:	f7fd fc56 	bl	8001364 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d009      	beq.n	8003ad4 <HAL_UART_Init+0xf4>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ac8:	d004      	beq.n	8003ad4 <HAL_UART_Init+0xf4>
 8003aca:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8003ace:	482e      	ldr	r0, [pc, #184]	; (8003b88 <HAL_UART_Init+0x1a8>)
 8003ad0:	f7fd fc48 	bl	8001364 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d009      	beq.n	8003af0 <HAL_UART_Init+0x110>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ae4:	d004      	beq.n	8003af0 <HAL_UART_Init+0x110>
 8003ae6:	f240 117b 	movw	r1, #379	; 0x17b
 8003aea:	4827      	ldr	r0, [pc, #156]	; (8003b88 <HAL_UART_Init+0x1a8>)
 8003aec:	f7fd fc3a 	bl	8001364 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d106      	bne.n	8003b0a <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f849 	bl	8003b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2224      	movs	r2, #36	; 0x24
 8003b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68da      	ldr	r2, [r3, #12]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b20:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f844 	bl	8003bb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	691a      	ldr	r2, [r3, #16]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b36:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	695a      	ldr	r2, [r3, #20]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b46:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68da      	ldr	r2, [r3, #12]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b56:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40011000 	.word	0x40011000
 8003b7c:	40004400 	.word	0x40004400
 8003b80:	40004800 	.word	0x40004800
 8003b84:	40011400 	.word	0x40011400
 8003b88:	0800982c 	.word	0x0800982c
 8003b8c:	40004c00 	.word	0x40004c00
 8003b90:	40005000 	.word	0x40005000
 8003b94:	40007800 	.word	0x40007800
 8003b98:	40007c00 	.word	0x40007c00

08003b9c <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bb4:	b0c0      	sub	sp, #256	; 0x100
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8003bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	4bcf      	ldr	r3, [pc, #828]	; (8003f00 <UART_SetConfig+0x350>)
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d904      	bls.n	8003bd2 <UART_SetConfig+0x22>
 8003bc8:	f640 6161 	movw	r1, #3681	; 0xe61
 8003bcc:	48cd      	ldr	r0, [pc, #820]	; (8003f04 <UART_SetConfig+0x354>)
 8003bce:	f7fd fbc9 	bl	8001364 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8003bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00a      	beq.n	8003bf2 <UART_SetConfig+0x42>
 8003bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003be6:	d004      	beq.n	8003bf2 <UART_SetConfig+0x42>
 8003be8:	f640 6162 	movw	r1, #3682	; 0xe62
 8003bec:	48c5      	ldr	r0, [pc, #788]	; (8003f04 <UART_SetConfig+0x354>)
 8003bee:	f7fd fbb9 	bl	8001364 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8003bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d010      	beq.n	8003c1e <UART_SetConfig+0x6e>
 8003bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c06:	d00a      	beq.n	8003c1e <UART_SetConfig+0x6e>
 8003c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c12:	d004      	beq.n	8003c1e <UART_SetConfig+0x6e>
 8003c14:	f640 6163 	movw	r1, #3683	; 0xe63
 8003c18:	48ba      	ldr	r0, [pc, #744]	; (8003f04 <UART_SetConfig+0x354>)
 8003c1a:	f7fd fba3 	bl	8001364 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8003c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c22:	695a      	ldr	r2, [r3, #20]
 8003c24:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8003c28:	4013      	ands	r3, r2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d104      	bne.n	8003c38 <UART_SetConfig+0x88>
 8003c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d104      	bne.n	8003c42 <UART_SetConfig+0x92>
 8003c38:	f640 6164 	movw	r1, #3684	; 0xe64
 8003c3c:	48b1      	ldr	r0, [pc, #708]	; (8003f04 <UART_SetConfig+0x354>)
 8003c3e:	f7fd fb91 	bl	8001364 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c52:	68d9      	ldr	r1, [r3, #12]
 8003c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	ea40 0301 	orr.w	r3, r0, r1
 8003c5e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	431a      	orrs	r2, r3
 8003c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c7a:	69db      	ldr	r3, [r3, #28]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c8e:	f021 010c 	bic.w	r1, r1, #12
 8003c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c9c:	430b      	orrs	r3, r1
 8003c9e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb0:	6999      	ldr	r1, [r3, #24]
 8003cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	ea40 0301 	orr.w	r3, r0, r1
 8003cbc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	4b90      	ldr	r3, [pc, #576]	; (8003f08 <UART_SetConfig+0x358>)
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d005      	beq.n	8003cd6 <UART_SetConfig+0x126>
 8003cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	4b8e      	ldr	r3, [pc, #568]	; (8003f0c <UART_SetConfig+0x35c>)
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d104      	bne.n	8003ce0 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cd6:	f7ff fa8f 	bl	80031f8 <HAL_RCC_GetPCLK2Freq>
 8003cda:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003cde:	e003      	b.n	8003ce8 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ce0:	f7ff fa76 	bl	80031d0 <HAL_RCC_GetPCLK1Freq>
 8003ce4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cf2:	f040 810f 	bne.w	8003f14 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d00:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d04:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003d08:	4622      	mov	r2, r4
 8003d0a:	462b      	mov	r3, r5
 8003d0c:	1891      	adds	r1, r2, r2
 8003d0e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d10:	415b      	adcs	r3, r3
 8003d12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d14:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d18:	4621      	mov	r1, r4
 8003d1a:	eb12 0801 	adds.w	r8, r2, r1
 8003d1e:	4629      	mov	r1, r5
 8003d20:	eb43 0901 	adc.w	r9, r3, r1
 8003d24:	f04f 0200 	mov.w	r2, #0
 8003d28:	f04f 0300 	mov.w	r3, #0
 8003d2c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d30:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d34:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d38:	4690      	mov	r8, r2
 8003d3a:	4699      	mov	r9, r3
 8003d3c:	4623      	mov	r3, r4
 8003d3e:	eb18 0303 	adds.w	r3, r8, r3
 8003d42:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d46:	462b      	mov	r3, r5
 8003d48:	eb49 0303 	adc.w	r3, r9, r3
 8003d4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d5c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003d60:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d64:	460b      	mov	r3, r1
 8003d66:	18db      	adds	r3, r3, r3
 8003d68:	653b      	str	r3, [r7, #80]	; 0x50
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	eb42 0303 	adc.w	r3, r2, r3
 8003d70:	657b      	str	r3, [r7, #84]	; 0x54
 8003d72:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d76:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003d7a:	f7fc fa83 	bl	8000284 <__aeabi_uldivmod>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	460b      	mov	r3, r1
 8003d82:	4b63      	ldr	r3, [pc, #396]	; (8003f10 <UART_SetConfig+0x360>)
 8003d84:	fba3 2302 	umull	r2, r3, r3, r2
 8003d88:	095b      	lsrs	r3, r3, #5
 8003d8a:	011c      	lsls	r4, r3, #4
 8003d8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d90:	2200      	movs	r2, #0
 8003d92:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d96:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003d9a:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003d9e:	4642      	mov	r2, r8
 8003da0:	464b      	mov	r3, r9
 8003da2:	1891      	adds	r1, r2, r2
 8003da4:	64b9      	str	r1, [r7, #72]	; 0x48
 8003da6:	415b      	adcs	r3, r3
 8003da8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003daa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003dae:	4641      	mov	r1, r8
 8003db0:	eb12 0a01 	adds.w	sl, r2, r1
 8003db4:	4649      	mov	r1, r9
 8003db6:	eb43 0b01 	adc.w	fp, r3, r1
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	f04f 0300 	mov.w	r3, #0
 8003dc2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003dc6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003dca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dce:	4692      	mov	sl, r2
 8003dd0:	469b      	mov	fp, r3
 8003dd2:	4643      	mov	r3, r8
 8003dd4:	eb1a 0303 	adds.w	r3, sl, r3
 8003dd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ddc:	464b      	mov	r3, r9
 8003dde:	eb4b 0303 	adc.w	r3, fp, r3
 8003de2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003df2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003df6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	18db      	adds	r3, r3, r3
 8003dfe:	643b      	str	r3, [r7, #64]	; 0x40
 8003e00:	4613      	mov	r3, r2
 8003e02:	eb42 0303 	adc.w	r3, r2, r3
 8003e06:	647b      	str	r3, [r7, #68]	; 0x44
 8003e08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e0c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003e10:	f7fc fa38 	bl	8000284 <__aeabi_uldivmod>
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4611      	mov	r1, r2
 8003e1a:	4b3d      	ldr	r3, [pc, #244]	; (8003f10 <UART_SetConfig+0x360>)
 8003e1c:	fba3 2301 	umull	r2, r3, r3, r1
 8003e20:	095b      	lsrs	r3, r3, #5
 8003e22:	2264      	movs	r2, #100	; 0x64
 8003e24:	fb02 f303 	mul.w	r3, r2, r3
 8003e28:	1acb      	subs	r3, r1, r3
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003e30:	4b37      	ldr	r3, [pc, #220]	; (8003f10 <UART_SetConfig+0x360>)
 8003e32:	fba3 2302 	umull	r2, r3, r3, r2
 8003e36:	095b      	lsrs	r3, r3, #5
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e3e:	441c      	add	r4, r3
 8003e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e44:	2200      	movs	r2, #0
 8003e46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e4a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003e4e:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003e52:	4642      	mov	r2, r8
 8003e54:	464b      	mov	r3, r9
 8003e56:	1891      	adds	r1, r2, r2
 8003e58:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e5a:	415b      	adcs	r3, r3
 8003e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e5e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e62:	4641      	mov	r1, r8
 8003e64:	1851      	adds	r1, r2, r1
 8003e66:	6339      	str	r1, [r7, #48]	; 0x30
 8003e68:	4649      	mov	r1, r9
 8003e6a:	414b      	adcs	r3, r1
 8003e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e6e:	f04f 0200 	mov.w	r2, #0
 8003e72:	f04f 0300 	mov.w	r3, #0
 8003e76:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003e7a:	4659      	mov	r1, fp
 8003e7c:	00cb      	lsls	r3, r1, #3
 8003e7e:	4651      	mov	r1, sl
 8003e80:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e84:	4651      	mov	r1, sl
 8003e86:	00ca      	lsls	r2, r1, #3
 8003e88:	4610      	mov	r0, r2
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	4642      	mov	r2, r8
 8003e90:	189b      	adds	r3, r3, r2
 8003e92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e96:	464b      	mov	r3, r9
 8003e98:	460a      	mov	r2, r1
 8003e9a:	eb42 0303 	adc.w	r3, r2, r3
 8003e9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003eae:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003eb2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	18db      	adds	r3, r3, r3
 8003eba:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	eb42 0303 	adc.w	r3, r2, r3
 8003ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ec4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ec8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003ecc:	f7fc f9da 	bl	8000284 <__aeabi_uldivmod>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4b0e      	ldr	r3, [pc, #56]	; (8003f10 <UART_SetConfig+0x360>)
 8003ed6:	fba3 1302 	umull	r1, r3, r3, r2
 8003eda:	095b      	lsrs	r3, r3, #5
 8003edc:	2164      	movs	r1, #100	; 0x64
 8003ede:	fb01 f303 	mul.w	r3, r1, r3
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	3332      	adds	r3, #50	; 0x32
 8003ee8:	4a09      	ldr	r2, [pc, #36]	; (8003f10 <UART_SetConfig+0x360>)
 8003eea:	fba2 2303 	umull	r2, r3, r2, r3
 8003eee:	095b      	lsrs	r3, r3, #5
 8003ef0:	f003 0207 	and.w	r2, r3, #7
 8003ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4422      	add	r2, r4
 8003efc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003efe:	e108      	b.n	8004112 <UART_SetConfig+0x562>
 8003f00:	00a037a0 	.word	0x00a037a0
 8003f04:	0800982c 	.word	0x0800982c
 8003f08:	40011000 	.word	0x40011000
 8003f0c:	40011400 	.word	0x40011400
 8003f10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003f22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003f26:	4642      	mov	r2, r8
 8003f28:	464b      	mov	r3, r9
 8003f2a:	1891      	adds	r1, r2, r2
 8003f2c:	6239      	str	r1, [r7, #32]
 8003f2e:	415b      	adcs	r3, r3
 8003f30:	627b      	str	r3, [r7, #36]	; 0x24
 8003f32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f36:	4641      	mov	r1, r8
 8003f38:	1854      	adds	r4, r2, r1
 8003f3a:	4649      	mov	r1, r9
 8003f3c:	eb43 0501 	adc.w	r5, r3, r1
 8003f40:	f04f 0200 	mov.w	r2, #0
 8003f44:	f04f 0300 	mov.w	r3, #0
 8003f48:	00eb      	lsls	r3, r5, #3
 8003f4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f4e:	00e2      	lsls	r2, r4, #3
 8003f50:	4614      	mov	r4, r2
 8003f52:	461d      	mov	r5, r3
 8003f54:	4643      	mov	r3, r8
 8003f56:	18e3      	adds	r3, r4, r3
 8003f58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f5c:	464b      	mov	r3, r9
 8003f5e:	eb45 0303 	adc.w	r3, r5, r3
 8003f62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f76:	f04f 0200 	mov.w	r2, #0
 8003f7a:	f04f 0300 	mov.w	r3, #0
 8003f7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f82:	4629      	mov	r1, r5
 8003f84:	008b      	lsls	r3, r1, #2
 8003f86:	4621      	mov	r1, r4
 8003f88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f8c:	4621      	mov	r1, r4
 8003f8e:	008a      	lsls	r2, r1, #2
 8003f90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003f94:	f7fc f976 	bl	8000284 <__aeabi_uldivmod>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4b60      	ldr	r3, [pc, #384]	; (8004120 <UART_SetConfig+0x570>)
 8003f9e:	fba3 2302 	umull	r2, r3, r3, r2
 8003fa2:	095b      	lsrs	r3, r3, #5
 8003fa4:	011c      	lsls	r4, r3, #4
 8003fa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003faa:	2200      	movs	r2, #0
 8003fac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003fb0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003fb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003fb8:	4642      	mov	r2, r8
 8003fba:	464b      	mov	r3, r9
 8003fbc:	1891      	adds	r1, r2, r2
 8003fbe:	61b9      	str	r1, [r7, #24]
 8003fc0:	415b      	adcs	r3, r3
 8003fc2:	61fb      	str	r3, [r7, #28]
 8003fc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fc8:	4641      	mov	r1, r8
 8003fca:	1851      	adds	r1, r2, r1
 8003fcc:	6139      	str	r1, [r7, #16]
 8003fce:	4649      	mov	r1, r9
 8003fd0:	414b      	adcs	r3, r1
 8003fd2:	617b      	str	r3, [r7, #20]
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	f04f 0300 	mov.w	r3, #0
 8003fdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fe0:	4659      	mov	r1, fp
 8003fe2:	00cb      	lsls	r3, r1, #3
 8003fe4:	4651      	mov	r1, sl
 8003fe6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fea:	4651      	mov	r1, sl
 8003fec:	00ca      	lsls	r2, r1, #3
 8003fee:	4610      	mov	r0, r2
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	4642      	mov	r2, r8
 8003ff6:	189b      	adds	r3, r3, r2
 8003ff8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ffc:	464b      	mov	r3, r9
 8003ffe:	460a      	mov	r2, r1
 8004000:	eb42 0303 	adc.w	r3, r2, r3
 8004004:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	67bb      	str	r3, [r7, #120]	; 0x78
 8004012:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004014:	f04f 0200 	mov.w	r2, #0
 8004018:	f04f 0300 	mov.w	r3, #0
 800401c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004020:	4649      	mov	r1, r9
 8004022:	008b      	lsls	r3, r1, #2
 8004024:	4641      	mov	r1, r8
 8004026:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800402a:	4641      	mov	r1, r8
 800402c:	008a      	lsls	r2, r1, #2
 800402e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004032:	f7fc f927 	bl	8000284 <__aeabi_uldivmod>
 8004036:	4602      	mov	r2, r0
 8004038:	460b      	mov	r3, r1
 800403a:	4b39      	ldr	r3, [pc, #228]	; (8004120 <UART_SetConfig+0x570>)
 800403c:	fba3 1302 	umull	r1, r3, r3, r2
 8004040:	095b      	lsrs	r3, r3, #5
 8004042:	2164      	movs	r1, #100	; 0x64
 8004044:	fb01 f303 	mul.w	r3, r1, r3
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	3332      	adds	r3, #50	; 0x32
 800404e:	4a34      	ldr	r2, [pc, #208]	; (8004120 <UART_SetConfig+0x570>)
 8004050:	fba2 2303 	umull	r2, r3, r2, r3
 8004054:	095b      	lsrs	r3, r3, #5
 8004056:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800405a:	441c      	add	r4, r3
 800405c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004060:	2200      	movs	r2, #0
 8004062:	673b      	str	r3, [r7, #112]	; 0x70
 8004064:	677a      	str	r2, [r7, #116]	; 0x74
 8004066:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800406a:	4642      	mov	r2, r8
 800406c:	464b      	mov	r3, r9
 800406e:	1891      	adds	r1, r2, r2
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	415b      	adcs	r3, r3
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800407a:	4641      	mov	r1, r8
 800407c:	1851      	adds	r1, r2, r1
 800407e:	6039      	str	r1, [r7, #0]
 8004080:	4649      	mov	r1, r9
 8004082:	414b      	adcs	r3, r1
 8004084:	607b      	str	r3, [r7, #4]
 8004086:	f04f 0200 	mov.w	r2, #0
 800408a:	f04f 0300 	mov.w	r3, #0
 800408e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004092:	4659      	mov	r1, fp
 8004094:	00cb      	lsls	r3, r1, #3
 8004096:	4651      	mov	r1, sl
 8004098:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800409c:	4651      	mov	r1, sl
 800409e:	00ca      	lsls	r2, r1, #3
 80040a0:	4610      	mov	r0, r2
 80040a2:	4619      	mov	r1, r3
 80040a4:	4603      	mov	r3, r0
 80040a6:	4642      	mov	r2, r8
 80040a8:	189b      	adds	r3, r3, r2
 80040aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80040ac:	464b      	mov	r3, r9
 80040ae:	460a      	mov	r2, r1
 80040b0:	eb42 0303 	adc.w	r3, r2, r3
 80040b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	663b      	str	r3, [r7, #96]	; 0x60
 80040c0:	667a      	str	r2, [r7, #100]	; 0x64
 80040c2:	f04f 0200 	mov.w	r2, #0
 80040c6:	f04f 0300 	mov.w	r3, #0
 80040ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80040ce:	4649      	mov	r1, r9
 80040d0:	008b      	lsls	r3, r1, #2
 80040d2:	4641      	mov	r1, r8
 80040d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040d8:	4641      	mov	r1, r8
 80040da:	008a      	lsls	r2, r1, #2
 80040dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80040e0:	f7fc f8d0 	bl	8000284 <__aeabi_uldivmod>
 80040e4:	4602      	mov	r2, r0
 80040e6:	460b      	mov	r3, r1
 80040e8:	4b0d      	ldr	r3, [pc, #52]	; (8004120 <UART_SetConfig+0x570>)
 80040ea:	fba3 1302 	umull	r1, r3, r3, r2
 80040ee:	095b      	lsrs	r3, r3, #5
 80040f0:	2164      	movs	r1, #100	; 0x64
 80040f2:	fb01 f303 	mul.w	r3, r1, r3
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	3332      	adds	r3, #50	; 0x32
 80040fc:	4a08      	ldr	r2, [pc, #32]	; (8004120 <UART_SetConfig+0x570>)
 80040fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004102:	095b      	lsrs	r3, r3, #5
 8004104:	f003 020f 	and.w	r2, r3, #15
 8004108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4422      	add	r2, r4
 8004110:	609a      	str	r2, [r3, #8]
}
 8004112:	bf00      	nop
 8004114:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004118:	46bd      	mov	sp, r7
 800411a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800411e:	bf00      	nop
 8004120:	51eb851f 	.word	0x51eb851f

08004124 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f103 0208 	add.w	r2, r3, #8
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f04f 32ff 	mov.w	r2, #4294967295
 800413c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f103 0208 	add.w	r2, r3, #8
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f103 0208 	add.w	r2, r3, #8
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800417e:	b480      	push	{r7}
 8004180:	b085      	sub	sp, #20
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
 8004186:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	1c5a      	adds	r2, r3, #1
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	601a      	str	r2, [r3, #0]
}
 80041ba:	bf00      	nop
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80041c6:	b480      	push	{r7}
 80041c8:	b085      	sub	sp, #20
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041dc:	d103      	bne.n	80041e6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	e00c      	b.n	8004200 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	3308      	adds	r3, #8
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	e002      	b.n	80041f4 <vListInsert+0x2e>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d2f6      	bcs.n	80041ee <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	1c5a      	adds	r2, r3, #1
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	601a      	str	r2, [r3, #0]
}
 800422c:	bf00      	nop
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6892      	ldr	r2, [r2, #8]
 800424e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6852      	ldr	r2, [r2, #4]
 8004258:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	429a      	cmp	r2, r3
 8004262:	d103      	bne.n	800426c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	1e5a      	subs	r2, r3, #1
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10a      	bne.n	80042b6 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80042a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a4:	f383 8811 	msr	BASEPRI, r3
 80042a8:	f3bf 8f6f 	isb	sy
 80042ac:	f3bf 8f4f 	dsb	sy
 80042b0:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80042b2:	bf00      	nop
 80042b4:	e7fe      	b.n	80042b4 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80042b6:	f002 feef 	bl	8007098 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c2:	68f9      	ldr	r1, [r7, #12]
 80042c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042c6:	fb01 f303 	mul.w	r3, r1, r3
 80042ca:	441a      	add	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e6:	3b01      	subs	r3, #1
 80042e8:	68f9      	ldr	r1, [r7, #12]
 80042ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042ec:	fb01 f303 	mul.w	r3, r1, r3
 80042f0:	441a      	add	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	22ff      	movs	r2, #255	; 0xff
 80042fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	22ff      	movs	r2, #255	; 0xff
 8004302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d114      	bne.n	8004336 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d01a      	beq.n	800434a <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	3310      	adds	r3, #16
 8004318:	4618      	mov	r0, r3
 800431a:	f001 fc8f 	bl	8005c3c <xTaskRemoveFromEventList>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d012      	beq.n	800434a <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8004324:	4b0c      	ldr	r3, [pc, #48]	; (8004358 <xQueueGenericReset+0xcc>)
 8004326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	f3bf 8f6f 	isb	sy
 8004334:	e009      	b.n	800434a <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	3310      	adds	r3, #16
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff fef2 	bl	8004124 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	3324      	adds	r3, #36	; 0x24
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff feed 	bl	8004124 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800434a:	f002 fed5 	bl	80070f8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800434e:	2301      	movs	r3, #1
}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	e000ed04 	.word	0xe000ed04

0800435c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800435c:	b580      	push	{r7, lr}
 800435e:	b08c      	sub	sp, #48	; 0x30
 8004360:	af02      	add	r7, sp, #8
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	4613      	mov	r3, r2
 8004368:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10a      	bne.n	8004386 <xQueueGenericCreate+0x2a>
        __asm volatile
 8004370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	61bb      	str	r3, [r7, #24]
    }
 8004382:	bf00      	nop
 8004384:	e7fe      	b.n	8004384 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	fb02 f303 	mul.w	r3, r2, r3
 800438e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d006      	beq.n	80043a4 <xQueueGenericCreate+0x48>
 8004396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	fbb2 f3f3 	udiv	r3, r2, r3
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d101      	bne.n	80043a8 <xQueueGenericCreate+0x4c>
 80043a4:	2301      	movs	r3, #1
 80043a6:	e000      	b.n	80043aa <xQueueGenericCreate+0x4e>
 80043a8:	2300      	movs	r3, #0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10a      	bne.n	80043c4 <xQueueGenericCreate+0x68>
        __asm volatile
 80043ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b2:	f383 8811 	msr	BASEPRI, r3
 80043b6:	f3bf 8f6f 	isb	sy
 80043ba:	f3bf 8f4f 	dsb	sy
 80043be:	617b      	str	r3, [r7, #20]
    }
 80043c0:	bf00      	nop
 80043c2:	e7fe      	b.n	80043c2 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80043ca:	d90a      	bls.n	80043e2 <xQueueGenericCreate+0x86>
        __asm volatile
 80043cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d0:	f383 8811 	msr	BASEPRI, r3
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	613b      	str	r3, [r7, #16]
    }
 80043de:	bf00      	nop
 80043e0:	e7fe      	b.n	80043e0 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80043e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e4:	3350      	adds	r3, #80	; 0x50
 80043e6:	4618      	mov	r0, r3
 80043e8:	f002 ff80 	bl	80072ec <pvPortMalloc>
 80043ec:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80043ee:	6a3b      	ldr	r3, [r7, #32]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00d      	beq.n	8004410 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80043f4:	6a3b      	ldr	r3, [r7, #32]
 80043f6:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	3350      	adds	r3, #80	; 0x50
 80043fc:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80043fe:	79fa      	ldrb	r2, [r7, #7]
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	4613      	mov	r3, r2
 8004406:	69fa      	ldr	r2, [r7, #28]
 8004408:	68b9      	ldr	r1, [r7, #8]
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 f805 	bl	800441a <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004410:	6a3b      	ldr	r3, [r7, #32]
    }
 8004412:	4618      	mov	r0, r3
 8004414:	3728      	adds	r7, #40	; 0x28
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b084      	sub	sp, #16
 800441e:	af00      	add	r7, sp, #0
 8004420:	60f8      	str	r0, [r7, #12]
 8004422:	60b9      	str	r1, [r7, #8]
 8004424:	607a      	str	r2, [r7, #4]
 8004426:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d103      	bne.n	8004436 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	e002      	b.n	800443c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004448:	2101      	movs	r1, #1
 800444a:	69b8      	ldr	r0, [r7, #24]
 800444c:	f7ff ff1e 	bl	800428c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	78fa      	ldrb	r2, [r7, #3]
 8004454:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8004458:	78fb      	ldrb	r3, [r7, #3]
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	68f9      	ldr	r1, [r7, #12]
 800445e:	2073      	movs	r0, #115	; 0x73
 8004460:	f003 ff64 	bl	800832c <SEGGER_SYSVIEW_RecordU32x3>
}
 8004464:	bf00      	nop
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b090      	sub	sp, #64	; 0x40
 8004470:	af02      	add	r7, sp, #8
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
 8004478:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800447a:	2300      	movs	r3, #0
 800447c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8004482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10a      	bne.n	800449e <xQueueGenericSend+0x32>
        __asm volatile
 8004488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448c:	f383 8811 	msr	BASEPRI, r3
 8004490:	f3bf 8f6f 	isb	sy
 8004494:	f3bf 8f4f 	dsb	sy
 8004498:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800449a:	bf00      	nop
 800449c:	e7fe      	b.n	800449c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d103      	bne.n	80044ac <xQueueGenericSend+0x40>
 80044a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d101      	bne.n	80044b0 <xQueueGenericSend+0x44>
 80044ac:	2301      	movs	r3, #1
 80044ae:	e000      	b.n	80044b2 <xQueueGenericSend+0x46>
 80044b0:	2300      	movs	r3, #0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10a      	bne.n	80044cc <xQueueGenericSend+0x60>
        __asm volatile
 80044b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ba:	f383 8811 	msr	BASEPRI, r3
 80044be:	f3bf 8f6f 	isb	sy
 80044c2:	f3bf 8f4f 	dsb	sy
 80044c6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80044c8:	bf00      	nop
 80044ca:	e7fe      	b.n	80044ca <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d103      	bne.n	80044da <xQueueGenericSend+0x6e>
 80044d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d101      	bne.n	80044de <xQueueGenericSend+0x72>
 80044da:	2301      	movs	r3, #1
 80044dc:	e000      	b.n	80044e0 <xQueueGenericSend+0x74>
 80044de:	2300      	movs	r3, #0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10a      	bne.n	80044fa <xQueueGenericSend+0x8e>
        __asm volatile
 80044e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e8:	f383 8811 	msr	BASEPRI, r3
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	623b      	str	r3, [r7, #32]
    }
 80044f6:	bf00      	nop
 80044f8:	e7fe      	b.n	80044f8 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044fa:	f001 fd4f 	bl	8005f9c <xTaskGetSchedulerState>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d102      	bne.n	800450a <xQueueGenericSend+0x9e>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <xQueueGenericSend+0xa2>
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <xQueueGenericSend+0xa4>
 800450e:	2300      	movs	r3, #0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10a      	bne.n	800452a <xQueueGenericSend+0xbe>
        __asm volatile
 8004514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	61fb      	str	r3, [r7, #28]
    }
 8004526:	bf00      	nop
 8004528:	e7fe      	b.n	8004528 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800452a:	f002 fdb5 	bl	8007098 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800452e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004536:	429a      	cmp	r2, r3
 8004538:	d302      	bcc.n	8004540 <xQueueGenericSend+0xd4>
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2b02      	cmp	r3, #2
 800453e:	d136      	bne.n	80045ae <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8004540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004542:	4618      	mov	r0, r3
 8004544:	f004 fd2c 	bl	8008fa0 <SEGGER_SYSVIEW_ShrinkId>
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	6879      	ldr	r1, [r7, #4]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	9300      	str	r3, [sp, #0]
 8004550:	460b      	mov	r3, r1
 8004552:	4601      	mov	r1, r0
 8004554:	205a      	movs	r0, #90	; 0x5a
 8004556:	f003 ff5f 	bl	8008418 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	68b9      	ldr	r1, [r7, #8]
 800455e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004560:	f000 fa78 	bl	8004a54 <prvCopyDataToQueue>
 8004564:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456a:	2b00      	cmp	r3, #0
 800456c:	d010      	beq.n	8004590 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800456e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004570:	3324      	adds	r3, #36	; 0x24
 8004572:	4618      	mov	r0, r3
 8004574:	f001 fb62 	bl	8005c3c <xTaskRemoveFromEventList>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d013      	beq.n	80045a6 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800457e:	4b4d      	ldr	r3, [pc, #308]	; (80046b4 <xQueueGenericSend+0x248>)
 8004580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	f3bf 8f6f 	isb	sy
 800458e:	e00a      	b.n	80045a6 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8004590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004592:	2b00      	cmp	r3, #0
 8004594:	d007      	beq.n	80045a6 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004596:	4b47      	ldr	r3, [pc, #284]	; (80046b4 <xQueueGenericSend+0x248>)
 8004598:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80045a6:	f002 fda7 	bl	80070f8 <vPortExitCritical>
                return pdPASS;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e07d      	b.n	80046aa <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d110      	bne.n	80045d6 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80045b4:	f002 fda0 	bl	80070f8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80045b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ba:	4618      	mov	r0, r3
 80045bc:	f004 fcf0 	bl	8008fa0 <SEGGER_SYSVIEW_ShrinkId>
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	460b      	mov	r3, r1
 80045ca:	4601      	mov	r1, r0
 80045cc:	205a      	movs	r0, #90	; 0x5a
 80045ce:	f003 ff23 	bl	8008418 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80045d2:	2300      	movs	r3, #0
 80045d4:	e069      	b.n	80046aa <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80045d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d106      	bne.n	80045ea <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80045dc:	f107 0314 	add.w	r3, r7, #20
 80045e0:	4618      	mov	r0, r3
 80045e2:	f001 fb91 	bl	8005d08 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80045e6:	2301      	movs	r3, #1
 80045e8:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80045ea:	f002 fd85 	bl	80070f8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80045ee:	f001 f8dd 	bl	80057ac <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80045f2:	f002 fd51 	bl	8007098 <vPortEnterCritical>
 80045f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045fc:	b25b      	sxtb	r3, r3
 80045fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004602:	d103      	bne.n	800460c <xQueueGenericSend+0x1a0>
 8004604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004606:	2200      	movs	r2, #0
 8004608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800460c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004612:	b25b      	sxtb	r3, r3
 8004614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004618:	d103      	bne.n	8004622 <xQueueGenericSend+0x1b6>
 800461a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004622:	f002 fd69 	bl	80070f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004626:	1d3a      	adds	r2, r7, #4
 8004628:	f107 0314 	add.w	r3, r7, #20
 800462c:	4611      	mov	r1, r2
 800462e:	4618      	mov	r0, r3
 8004630:	f001 fb80 	bl	8005d34 <xTaskCheckForTimeOut>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d124      	bne.n	8004684 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800463a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800463c:	f000 fb02 	bl	8004c44 <prvIsQueueFull>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d018      	beq.n	8004678 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004648:	3310      	adds	r3, #16
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	4611      	mov	r1, r2
 800464e:	4618      	mov	r0, r3
 8004650:	f001 faa2 	bl	8005b98 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004654:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004656:	f000 fa8d 	bl	8004b74 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800465a:	f001 f8b5 	bl	80057c8 <xTaskResumeAll>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	f47f af62 	bne.w	800452a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8004666:	4b13      	ldr	r3, [pc, #76]	; (80046b4 <xQueueGenericSend+0x248>)
 8004668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800466c:	601a      	str	r2, [r3, #0]
 800466e:	f3bf 8f4f 	dsb	sy
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	e758      	b.n	800452a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004678:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800467a:	f000 fa7b 	bl	8004b74 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800467e:	f001 f8a3 	bl	80057c8 <xTaskResumeAll>
 8004682:	e752      	b.n	800452a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004684:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004686:	f000 fa75 	bl	8004b74 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800468a:	f001 f89d 	bl	80057c8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 800468e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004690:	4618      	mov	r0, r3
 8004692:	f004 fc85 	bl	8008fa0 <SEGGER_SYSVIEW_ShrinkId>
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	6879      	ldr	r1, [r7, #4]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	460b      	mov	r3, r1
 80046a0:	4601      	mov	r1, r0
 80046a2:	205a      	movs	r0, #90	; 0x5a
 80046a4:	f003 feb8 	bl	8008418 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80046a8:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3738      	adds	r7, #56	; 0x38
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	e000ed04 	.word	0xe000ed04

080046b8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b090      	sub	sp, #64	; 0x40
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
 80046c4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80046ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10a      	bne.n	80046e6 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80046d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d4:	f383 8811 	msr	BASEPRI, r3
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80046e2:	bf00      	nop
 80046e4:	e7fe      	b.n	80046e4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d103      	bne.n	80046f4 <xQueueGenericSendFromISR+0x3c>
 80046ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <xQueueGenericSendFromISR+0x40>
 80046f4:	2301      	movs	r3, #1
 80046f6:	e000      	b.n	80046fa <xQueueGenericSendFromISR+0x42>
 80046f8:	2300      	movs	r3, #0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10a      	bne.n	8004714 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80046fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004702:	f383 8811 	msr	BASEPRI, r3
 8004706:	f3bf 8f6f 	isb	sy
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004710:	bf00      	nop
 8004712:	e7fe      	b.n	8004712 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	2b02      	cmp	r3, #2
 8004718:	d103      	bne.n	8004722 <xQueueGenericSendFromISR+0x6a>
 800471a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800471e:	2b01      	cmp	r3, #1
 8004720:	d101      	bne.n	8004726 <xQueueGenericSendFromISR+0x6e>
 8004722:	2301      	movs	r3, #1
 8004724:	e000      	b.n	8004728 <xQueueGenericSendFromISR+0x70>
 8004726:	2300      	movs	r3, #0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10a      	bne.n	8004742 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 800472c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004730:	f383 8811 	msr	BASEPRI, r3
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	623b      	str	r3, [r7, #32]
    }
 800473e:	bf00      	nop
 8004740:	e7fe      	b.n	8004740 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004742:	f002 fd93 	bl	800726c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8004746:	f3ef 8211 	mrs	r2, BASEPRI
 800474a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474e:	f383 8811 	msr	BASEPRI, r3
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	f3bf 8f4f 	dsb	sy
 800475a:	61fa      	str	r2, [r7, #28]
 800475c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800475e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004760:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004764:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476a:	429a      	cmp	r2, r3
 800476c:	d302      	bcc.n	8004774 <xQueueGenericSendFromISR+0xbc>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b02      	cmp	r3, #2
 8004772:	d148      	bne.n	8004806 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004776:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800477a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800477e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004782:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8004784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004786:	4618      	mov	r0, r3
 8004788:	f004 fc0a 	bl	8008fa0 <SEGGER_SYSVIEW_ShrinkId>
 800478c:	4601      	mov	r1, r0
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	461a      	mov	r2, r3
 8004792:	2060      	movs	r0, #96	; 0x60
 8004794:	f003 fd70 	bl	8008278 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	68b9      	ldr	r1, [r7, #8]
 800479c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800479e:	f000 f959 	bl	8004a54 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80047a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80047a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047aa:	d112      	bne.n	80047d2 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d025      	beq.n	8004800 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b6:	3324      	adds	r3, #36	; 0x24
 80047b8:	4618      	mov	r0, r3
 80047ba:	f001 fa3f 	bl	8005c3c <xTaskRemoveFromEventList>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d01d      	beq.n	8004800 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d01a      	beq.n	8004800 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	e016      	b.n	8004800 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80047d2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80047d6:	2b7f      	cmp	r3, #127	; 0x7f
 80047d8:	d10a      	bne.n	80047f0 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 80047da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047de:	f383 8811 	msr	BASEPRI, r3
 80047e2:	f3bf 8f6f 	isb	sy
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	617b      	str	r3, [r7, #20]
    }
 80047ec:	bf00      	nop
 80047ee:	e7fe      	b.n	80047ee <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80047f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80047f4:	3301      	adds	r3, #1
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	b25a      	sxtb	r2, r3
 80047fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8004800:	2301      	movs	r3, #1
 8004802:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8004804:	e00b      	b.n	800481e <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8004806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004808:	4618      	mov	r0, r3
 800480a:	f004 fbc9 	bl	8008fa0 <SEGGER_SYSVIEW_ShrinkId>
 800480e:	4601      	mov	r1, r0
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	461a      	mov	r2, r3
 8004814:	2060      	movs	r0, #96	; 0x60
 8004816:	f003 fd2f 	bl	8008278 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800481a:	2300      	movs	r3, #0
 800481c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800481e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004820:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004828:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800482a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800482c:	4618      	mov	r0, r3
 800482e:	3740      	adds	r7, #64	; 0x40
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004834:	b590      	push	{r4, r7, lr}
 8004836:	b08f      	sub	sp, #60	; 0x3c
 8004838:	af02      	add	r7, sp, #8
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004840:	2300      	movs	r3, #0
 8004842:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10a      	bne.n	8004864 <xQueueReceive+0x30>
        __asm volatile
 800484e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004852:	f383 8811 	msr	BASEPRI, r3
 8004856:	f3bf 8f6f 	isb	sy
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	623b      	str	r3, [r7, #32]
    }
 8004860:	bf00      	nop
 8004862:	e7fe      	b.n	8004862 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d103      	bne.n	8004872 <xQueueReceive+0x3e>
 800486a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <xQueueReceive+0x42>
 8004872:	2301      	movs	r3, #1
 8004874:	e000      	b.n	8004878 <xQueueReceive+0x44>
 8004876:	2300      	movs	r3, #0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10a      	bne.n	8004892 <xQueueReceive+0x5e>
        __asm volatile
 800487c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004880:	f383 8811 	msr	BASEPRI, r3
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	61fb      	str	r3, [r7, #28]
    }
 800488e:	bf00      	nop
 8004890:	e7fe      	b.n	8004890 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004892:	f001 fb83 	bl	8005f9c <xTaskGetSchedulerState>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d102      	bne.n	80048a2 <xQueueReceive+0x6e>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <xQueueReceive+0x72>
 80048a2:	2301      	movs	r3, #1
 80048a4:	e000      	b.n	80048a8 <xQueueReceive+0x74>
 80048a6:	2300      	movs	r3, #0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10a      	bne.n	80048c2 <xQueueReceive+0x8e>
        __asm volatile
 80048ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b0:	f383 8811 	msr	BASEPRI, r3
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	61bb      	str	r3, [r7, #24]
    }
 80048be:	bf00      	nop
 80048c0:	e7fe      	b.n	80048c0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80048c2:	f002 fbe9 	bl	8007098 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ca:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d02f      	beq.n	8004932 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80048d2:	68b9      	ldr	r1, [r7, #8]
 80048d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048d6:	f000 f927 	bl	8004b28 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80048da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048dc:	4618      	mov	r0, r3
 80048de:	f004 fb5f 	bl	8008fa0 <SEGGER_SYSVIEW_ShrinkId>
 80048e2:	4604      	mov	r4, r0
 80048e4:	2000      	movs	r0, #0
 80048e6:	f004 fb5b 	bl	8008fa0 <SEGGER_SYSVIEW_ShrinkId>
 80048ea:	4602      	mov	r2, r0
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2101      	movs	r1, #1
 80048f0:	9100      	str	r1, [sp, #0]
 80048f2:	4621      	mov	r1, r4
 80048f4:	205c      	movs	r0, #92	; 0x5c
 80048f6:	f003 fd8f 	bl	8008418 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	1e5a      	subs	r2, r3, #1
 80048fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004900:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00f      	beq.n	800492a <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800490a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490c:	3310      	adds	r3, #16
 800490e:	4618      	mov	r0, r3
 8004910:	f001 f994 	bl	8005c3c <xTaskRemoveFromEventList>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d007      	beq.n	800492a <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800491a:	4b4d      	ldr	r3, [pc, #308]	; (8004a50 <xQueueReceive+0x21c>)
 800491c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	f3bf 8f4f 	dsb	sy
 8004926:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800492a:	f002 fbe5 	bl	80070f8 <vPortExitCritical>
                return pdPASS;
 800492e:	2301      	movs	r3, #1
 8004930:	e08a      	b.n	8004a48 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d113      	bne.n	8004960 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004938:	f002 fbde 	bl	80070f8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800493c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493e:	4618      	mov	r0, r3
 8004940:	f004 fb2e 	bl	8008fa0 <SEGGER_SYSVIEW_ShrinkId>
 8004944:	4604      	mov	r4, r0
 8004946:	2000      	movs	r0, #0
 8004948:	f004 fb2a 	bl	8008fa0 <SEGGER_SYSVIEW_ShrinkId>
 800494c:	4602      	mov	r2, r0
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2101      	movs	r1, #1
 8004952:	9100      	str	r1, [sp, #0]
 8004954:	4621      	mov	r1, r4
 8004956:	205c      	movs	r0, #92	; 0x5c
 8004958:	f003 fd5e 	bl	8008418 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800495c:	2300      	movs	r3, #0
 800495e:	e073      	b.n	8004a48 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004962:	2b00      	cmp	r3, #0
 8004964:	d106      	bne.n	8004974 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004966:	f107 0310 	add.w	r3, r7, #16
 800496a:	4618      	mov	r0, r3
 800496c:	f001 f9cc 	bl	8005d08 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004970:	2301      	movs	r3, #1
 8004972:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004974:	f002 fbc0 	bl	80070f8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004978:	f000 ff18 	bl	80057ac <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800497c:	f002 fb8c 	bl	8007098 <vPortEnterCritical>
 8004980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004982:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004986:	b25b      	sxtb	r3, r3
 8004988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498c:	d103      	bne.n	8004996 <xQueueReceive+0x162>
 800498e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004998:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800499c:	b25b      	sxtb	r3, r3
 800499e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a2:	d103      	bne.n	80049ac <xQueueReceive+0x178>
 80049a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049ac:	f002 fba4 	bl	80070f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049b0:	1d3a      	adds	r2, r7, #4
 80049b2:	f107 0310 	add.w	r3, r7, #16
 80049b6:	4611      	mov	r1, r2
 80049b8:	4618      	mov	r0, r3
 80049ba:	f001 f9bb 	bl	8005d34 <xTaskCheckForTimeOut>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d124      	bne.n	8004a0e <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049c6:	f000 f927 	bl	8004c18 <prvIsQueueEmpty>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d018      	beq.n	8004a02 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80049d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d2:	3324      	adds	r3, #36	; 0x24
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	4611      	mov	r1, r2
 80049d8:	4618      	mov	r0, r3
 80049da:	f001 f8dd 	bl	8005b98 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80049de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049e0:	f000 f8c8 	bl	8004b74 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80049e4:	f000 fef0 	bl	80057c8 <xTaskResumeAll>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f47f af69 	bne.w	80048c2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80049f0:	4b17      	ldr	r3, [pc, #92]	; (8004a50 <xQueueReceive+0x21c>)
 80049f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	e75f      	b.n	80048c2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004a02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a04:	f000 f8b6 	bl	8004b74 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004a08:	f000 fede 	bl	80057c8 <xTaskResumeAll>
 8004a0c:	e759      	b.n	80048c2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004a0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a10:	f000 f8b0 	bl	8004b74 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004a14:	f000 fed8 	bl	80057c8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a1a:	f000 f8fd 	bl	8004c18 <prvIsQueueEmpty>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f43f af4e 	beq.w	80048c2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f004 fab9 	bl	8008fa0 <SEGGER_SYSVIEW_ShrinkId>
 8004a2e:	4604      	mov	r4, r0
 8004a30:	2000      	movs	r0, #0
 8004a32:	f004 fab5 	bl	8008fa0 <SEGGER_SYSVIEW_ShrinkId>
 8004a36:	4602      	mov	r2, r0
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2101      	movs	r1, #1
 8004a3c:	9100      	str	r1, [sp, #0]
 8004a3e:	4621      	mov	r1, r4
 8004a40:	205c      	movs	r0, #92	; 0x5c
 8004a42:	f003 fce9 	bl	8008418 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8004a46:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3734      	adds	r7, #52	; 0x34
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd90      	pop	{r4, r7, pc}
 8004a50:	e000ed04 	.word	0xe000ed04

08004a54 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8004a60:	2300      	movs	r3, #0
 8004a62:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a68:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10d      	bne.n	8004a8e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d14d      	bne.n	8004b16 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f001 faaa 	bl	8005fd8 <xTaskPriorityDisinherit>
 8004a84:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	609a      	str	r2, [r3, #8]
 8004a8c:	e043      	b.n	8004b16 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d119      	bne.n	8004ac8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6858      	ldr	r0, [r3, #4]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	68b9      	ldr	r1, [r7, #8]
 8004aa0:	f004 fda4 	bl	80095ec <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aac:	441a      	add	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d32b      	bcc.n	8004b16 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	605a      	str	r2, [r3, #4]
 8004ac6:	e026      	b.n	8004b16 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	68d8      	ldr	r0, [r3, #12]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	68b9      	ldr	r1, [r7, #8]
 8004ad4:	f004 fd8a 	bl	80095ec <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	68da      	ldr	r2, [r3, #12]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae0:	425b      	negs	r3, r3
 8004ae2:	441a      	add	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d207      	bcs.n	8004b04 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	689a      	ldr	r2, [r3, #8]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afc:	425b      	negs	r3, r3
 8004afe:	441a      	add	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d105      	bne.n	8004b16 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d002      	beq.n	8004b16 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	3b01      	subs	r3, #1
 8004b14:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1c5a      	adds	r2, r3, #1
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8004b1e:	697b      	ldr	r3, [r7, #20]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3718      	adds	r7, #24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d018      	beq.n	8004b6c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68da      	ldr	r2, [r3, #12]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	441a      	add	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68da      	ldr	r2, [r3, #12]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d303      	bcc.n	8004b5c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	68d9      	ldr	r1, [r3, #12]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b64:	461a      	mov	r2, r3
 8004b66:	6838      	ldr	r0, [r7, #0]
 8004b68:	f004 fd40 	bl	80095ec <memcpy>
    }
}
 8004b6c:	bf00      	nop
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004b7c:	f002 fa8c 	bl	8007098 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b86:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b88:	e011      	b.n	8004bae <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d012      	beq.n	8004bb8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	3324      	adds	r3, #36	; 0x24
 8004b96:	4618      	mov	r0, r3
 8004b98:	f001 f850 	bl	8005c3c <xTaskRemoveFromEventList>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8004ba2:	f001 f92d 	bl	8005e00 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004ba6:	7bfb      	ldrb	r3, [r7, #15]
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	dce9      	bgt.n	8004b8a <prvUnlockQueue+0x16>
 8004bb6:	e000      	b.n	8004bba <prvUnlockQueue+0x46>
                        break;
 8004bb8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	22ff      	movs	r2, #255	; 0xff
 8004bbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8004bc2:	f002 fa99 	bl	80070f8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004bc6:	f002 fa67 	bl	8007098 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bd0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bd2:	e011      	b.n	8004bf8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d012      	beq.n	8004c02 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	3310      	adds	r3, #16
 8004be0:	4618      	mov	r0, r3
 8004be2:	f001 f82b 	bl	8005c3c <xTaskRemoveFromEventList>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d001      	beq.n	8004bf0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004bec:	f001 f908 	bl	8005e00 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004bf0:	7bbb      	ldrb	r3, [r7, #14]
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	dce9      	bgt.n	8004bd4 <prvUnlockQueue+0x60>
 8004c00:	e000      	b.n	8004c04 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004c02:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	22ff      	movs	r2, #255	; 0xff
 8004c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8004c0c:	f002 fa74 	bl	80070f8 <vPortExitCritical>
}
 8004c10:	bf00      	nop
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004c20:	f002 fa3a 	bl	8007098 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d102      	bne.n	8004c32 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	60fb      	str	r3, [r7, #12]
 8004c30:	e001      	b.n	8004c36 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004c32:	2300      	movs	r3, #0
 8004c34:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004c36:	f002 fa5f 	bl	80070f8 <vPortExitCritical>

    return xReturn;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004c4c:	f002 fa24 	bl	8007098 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d102      	bne.n	8004c62 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	60fb      	str	r3, [r7, #12]
 8004c60:	e001      	b.n	8004c66 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8004c62:	2300      	movs	r3, #0
 8004c64:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004c66:	f002 fa47 	bl	80070f8 <vPortExitCritical>

    return xReturn;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c7e:	2300      	movs	r3, #0
 8004c80:	60fb      	str	r3, [r7, #12]
 8004c82:	e01e      	b.n	8004cc2 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004c84:	4a13      	ldr	r2, [pc, #76]	; (8004cd4 <vQueueAddToRegistry+0x60>)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d115      	bne.n	8004cbc <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004c90:	4910      	ldr	r1, [pc, #64]	; (8004cd4 <vQueueAddToRegistry+0x60>)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	683a      	ldr	r2, [r7, #0]
 8004c96:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8004c9a:	4a0e      	ldr	r2, [pc, #56]	; (8004cd4 <vQueueAddToRegistry+0x60>)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	4413      	add	r3, r2
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f004 f979 	bl	8008fa0 <SEGGER_SYSVIEW_ShrinkId>
 8004cae:	4601      	mov	r1, r0
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	2071      	movs	r0, #113	; 0x71
 8004cb6:	f003 fadf 	bl	8008278 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8004cba:	e006      	b.n	8004cca <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	60fb      	str	r3, [r7, #12]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2b07      	cmp	r3, #7
 8004cc6:	d9dd      	bls.n	8004c84 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8004cc8:	bf00      	nop
 8004cca:	bf00      	nop
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	2000015c 	.word	0x2000015c

08004cd8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004ce8:	f002 f9d6 	bl	8007098 <vPortEnterCritical>
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cf2:	b25b      	sxtb	r3, r3
 8004cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf8:	d103      	bne.n	8004d02 <vQueueWaitForMessageRestricted+0x2a>
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d08:	b25b      	sxtb	r3, r3
 8004d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0e:	d103      	bne.n	8004d18 <vQueueWaitForMessageRestricted+0x40>
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d18:	f002 f9ee 	bl	80070f8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d106      	bne.n	8004d32 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	3324      	adds	r3, #36	; 0x24
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	68b9      	ldr	r1, [r7, #8]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 ff57 	bl	8005be0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004d32:	6978      	ldr	r0, [r7, #20]
 8004d34:	f7ff ff1e 	bl	8004b74 <prvUnlockQueue>
    }
 8004d38:	bf00      	nop
 8004d3a:	3718      	adds	r7, #24
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <xStreamBufferGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes,
                                                     size_t xTriggerLevelBytes,
                                                     BaseType_t xIsMessageBuffer )
    {
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b08c      	sub	sp, #48	; 0x30
 8004d44:	af02      	add	r7, sp, #8
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]

        /* In case the stream buffer is going to be used as a message buffer
         * (that is, it will hold discrete messages with a little meta data that
         * says how big the next message is) check the buffer will be large enough
         * to hold at least one message. */
        if( xIsMessageBuffer == pdTRUE )
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d110      	bne.n	8004d74 <xStreamBufferGenericCreate+0x34>
        {
            /* Is a message buffer but not statically allocated. */
            ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8004d52:	2301      	movs	r3, #1
 8004d54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	d81b      	bhi.n	8004d96 <xStreamBufferGenericCreate+0x56>
        __asm volatile
 8004d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d62:	f383 8811 	msr	BASEPRI, r3
 8004d66:	f3bf 8f6f 	isb	sy
 8004d6a:	f3bf 8f4f 	dsb	sy
 8004d6e:	61fb      	str	r3, [r7, #28]
    }
 8004d70:	bf00      	nop
 8004d72:	e7fe      	b.n	8004d72 <xStreamBufferGenericCreate+0x32>
        }
        else
        {
            /* Not a message buffer and not statically allocated. */
            ucFlags = 0;
 8004d74:	2300      	movs	r3, #0
 8004d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            configASSERT( xBufferSizeBytes > 0 );
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10a      	bne.n	8004d96 <xStreamBufferGenericCreate+0x56>
        __asm volatile
 8004d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d84:	f383 8811 	msr	BASEPRI, r3
 8004d88:	f3bf 8f6f 	isb	sy
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	61bb      	str	r3, [r7, #24]
    }
 8004d92:	bf00      	nop
 8004d94:	e7fe      	b.n	8004d94 <xStreamBufferGenericCreate+0x54>
        }

        configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d90a      	bls.n	8004db4 <xStreamBufferGenericCreate+0x74>
        __asm volatile
 8004d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da2:	f383 8811 	msr	BASEPRI, r3
 8004da6:	f3bf 8f6f 	isb	sy
 8004daa:	f3bf 8f4f 	dsb	sy
 8004dae:	617b      	str	r3, [r7, #20]
    }
 8004db0:	bf00      	nop
 8004db2:	e7fe      	b.n	8004db2 <xStreamBufferGenericCreate+0x72>

        /* A trigger level of 0 would cause a waiting task to unblock even when
         * the buffer was empty. */
        if( xTriggerLevelBytes == ( size_t ) 0 )
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <xStreamBufferGenericCreate+0x7e>
        {
            xTriggerLevelBytes = ( size_t ) 1;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	60bb      	str	r3, [r7, #8]
         * and the buffer follows immediately after.  The requested size is
         * incremented so the free space is returned as the user would expect -
         * this is a quirk of the implementation that means otherwise the free
         * space would be reported as one byte smaller than would be logically
         * expected. */
        if( xBufferSizeBytes < ( xBufferSizeBytes + 1 + sizeof( StreamBuffer_t ) ) )
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f113 0f26 	cmn.w	r3, #38	; 0x26
 8004dc4:	d809      	bhi.n	8004dda <xStreamBufferGenericCreate+0x9a>
        {
            xBufferSizeBytes++;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	3301      	adds	r3, #1
 8004dca:	60fb      	str	r3, [r7, #12]
            pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	3324      	adds	r3, #36	; 0x24
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f002 fa8b 	bl	80072ec <pvPortMalloc>
 8004dd6:	6278      	str	r0, [r7, #36]	; 0x24
 8004dd8:	e001      	b.n	8004dde <xStreamBufferGenericCreate+0x9e>
        }
        else
        {
            pucAllocatedMemory = NULL;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	627b      	str	r3, [r7, #36]	; 0x24
        }
        

        if( pucAllocatedMemory != NULL )
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d011      	beq.n	8004e08 <xStreamBufferGenericCreate+0xc8>
        {
            prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory,       /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8004dea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004df6:	f000 fae0 	bl	80053ba <prvInitialiseNewStreamBuffer>
                                          pucAllocatedMemory + sizeof( StreamBuffer_t ), /* Storage area follows. */ /*lint !e9016 Indexing past structure valid for uint8_t pointer, also storage area has no alignment requirement. */
                                          xBufferSizeBytes,
                                          xTriggerLevelBytes,
                                          ucFlags );

            traceSTREAM_BUFFER_CREATE( ( ( StreamBuffer_t * ) pucAllocatedMemory ), xIsMessageBuffer );
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dfe:	4619      	mov	r1, r3
 8004e00:	2089      	movs	r0, #137	; 0x89
 8004e02:	f003 fa39 	bl	8008278 <SEGGER_SYSVIEW_RecordU32x2>
 8004e06:	e005      	b.n	8004e14 <xStreamBufferGenericCreate+0xd4>
        }
        else
        {
            traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	2089      	movs	r0, #137	; 0x89
 8004e10:	f003 fa32 	bl	8008278 <SEGGER_SYSVIEW_RecordU32x2>
        }

        return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004e16:	4618      	mov	r0, r3
 8004e18:	3728      	adds	r7, #40	; 0x28
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <xStreamBufferSpacesAvailable>:
    return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b087      	sub	sp, #28
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
    const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	613b      	str	r3, [r7, #16]
    size_t xSpace;

    configASSERT( pxStreamBuffer );
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10a      	bne.n	8004e46 <xStreamBufferSpacesAvailable+0x28>
        __asm volatile
 8004e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e34:	f383 8811 	msr	BASEPRI, r3
 8004e38:	f3bf 8f6f 	isb	sy
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	60fb      	str	r3, [r7, #12]
    }
 8004e42:	bf00      	nop
 8004e44:	e7fe      	b.n	8004e44 <xStreamBufferSpacesAvailable+0x26>

    xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	689a      	ldr	r2, [r3, #8]
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4413      	add	r3, r2
 8004e50:	617b      	str	r3, [r7, #20]
    xSpace -= pxStreamBuffer->xHead;
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	617b      	str	r3, [r7, #20]
    xSpace -= ( size_t ) 1;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	617b      	str	r3, [r7, #20]

    if( xSpace >= pxStreamBuffer->xLength )
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d304      	bcc.n	8004e76 <xStreamBufferSpacesAvailable+0x58>
    {
        xSpace -= pxStreamBuffer->xLength;
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	617b      	str	r3, [r7, #20]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xSpace;
 8004e76:	697b      	ldr	r3, [r7, #20]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	371c      	adds	r7, #28
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b090      	sub	sp, #64	; 0x40
 8004e88:	af02      	add	r7, sp, #8
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
 8004e90:	603b      	str	r3, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	633b      	str	r3, [r7, #48]	; 0x30
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	637b      	str	r3, [r7, #52]	; 0x34

    configASSERT( pvTxData );
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10a      	bne.n	8004eb6 <xStreamBufferSendFromISR+0x32>
        __asm volatile
 8004ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	623b      	str	r3, [r7, #32]
    }
 8004eb2:	bf00      	nop
 8004eb4:	e7fe      	b.n	8004eb4 <xStreamBufferSendFromISR+0x30>
    configASSERT( pxStreamBuffer );
 8004eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10a      	bne.n	8004ed2 <xStreamBufferSendFromISR+0x4e>
        __asm volatile
 8004ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec0:	f383 8811 	msr	BASEPRI, r3
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	61fb      	str	r3, [r7, #28]
    }
 8004ece:	bf00      	nop
 8004ed0:	e7fe      	b.n	8004ed0 <xStreamBufferSendFromISR+0x4c>

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8004ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed4:	7f1b      	ldrb	r3, [r3, #28]
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d002      	beq.n	8004ee4 <xStreamBufferSendFromISR+0x60>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8004ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee0:	3304      	adds	r3, #4
 8004ee2:	637b      	str	r3, [r7, #52]	; 0x34
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8004ee4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ee6:	f7ff ff9a 	bl	8004e1e <xStreamBufferSpacesAvailable>
 8004eea:	62f8      	str	r0, [r7, #44]	; 0x2c
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8004eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	68b9      	ldr	r1, [r7, #8]
 8004ef6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ef8:	f000 f83d 	bl	8004f76 <prvWriteMessageToBuffer>
 8004efc:	62b8      	str	r0, [r7, #40]	; 0x28

    if( xReturn > ( size_t ) 0 )
 8004efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d02d      	beq.n	8004f60 <xStreamBufferSendFromISR+0xdc>
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8004f04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f06:	f000 fa38 	bl	800537a <prvBytesInBuffer>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d325      	bcc.n	8004f60 <xStreamBufferSendFromISR+0xdc>
        __asm volatile
 8004f14:	f3ef 8211 	mrs	r2, BASEPRI
 8004f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1c:	f383 8811 	msr	BASEPRI, r3
 8004f20:	f3bf 8f6f 	isb	sy
 8004f24:	f3bf 8f4f 	dsb	sy
 8004f28:	61ba      	str	r2, [r7, #24]
 8004f2a:	617b      	str	r3, [r7, #20]
        return ulOriginalBASEPRI;
 8004f2c:	69bb      	ldr	r3, [r7, #24]
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8004f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00d      	beq.n	8004f54 <xStreamBufferSendFromISR+0xd0>
 8004f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3a:	6918      	ldr	r0, [r3, #16]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	9301      	str	r3, [sp, #4]
 8004f40:	2300      	movs	r3, #0
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	2300      	movs	r3, #0
 8004f46:	2200      	movs	r2, #0
 8004f48:	2100      	movs	r1, #0
 8004f4a:	f001 fa3f 	bl	80063cc <xTaskGenericNotifyFromISR>
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f50:	2200      	movs	r2, #0
 8004f52:	611a      	str	r2, [r3, #16]
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	613b      	str	r3, [r7, #16]
        __asm volatile
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	f383 8811 	msr	BASEPRI, r3
    }
 8004f5e:	bf00      	nop
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f64:	4619      	mov	r1, r3
 8004f66:	208d      	movs	r0, #141	; 0x8d
 8004f68:	f003 f986 	bl	8008278 <SEGGER_SYSVIEW_RecordU32x2>

    return xReturn;
 8004f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3738      	adds	r7, #56	; 0x38
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
                                       const void * pvTxData,
                                       size_t xDataLengthBytes,
                                       size_t xSpace,
                                       size_t xRequiredSpace )
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b086      	sub	sp, #24
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	60f8      	str	r0, [r7, #12]
 8004f7e:	60b9      	str	r1, [r7, #8]
 8004f80:	607a      	str	r2, [r7, #4]
 8004f82:	603b      	str	r3, [r7, #0]
    BaseType_t xShouldWrite;
    size_t xReturn;

    if( xSpace == ( size_t ) 0 )
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d102      	bne.n	8004f90 <prvWriteMessageToBuffer+0x1a>
    {
        /* Doesn't matter if this is a stream buffer or a message buffer, there
         * is no space to write. */
        xShouldWrite = pdFALSE;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	617b      	str	r3, [r7, #20]
 8004f8e:	e01d      	b.n	8004fcc <prvWriteMessageToBuffer+0x56>
    }
    else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	7f1b      	ldrb	r3, [r3, #28]
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d108      	bne.n	8004fae <prvWriteMessageToBuffer+0x38>
    {
        /* This is a stream buffer, as opposed to a message buffer, so writing a
         * stream of bytes rather than discrete messages.  Write as many bytes as
         * possible. */
        xShouldWrite = pdTRUE;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	617b      	str	r3, [r7, #20]
        xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	bf28      	it	cs
 8004fa8:	4613      	movcs	r3, r2
 8004faa:	607b      	str	r3, [r7, #4]
 8004fac:	e00e      	b.n	8004fcc <prvWriteMessageToBuffer+0x56>
    }
    else if( xSpace >= xRequiredSpace )
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d308      	bcc.n	8004fc8 <prvWriteMessageToBuffer+0x52>
    {
        /* This is a message buffer, as opposed to a stream buffer, and there
         * is enough space to write both the message length and the message itself
         * into the buffer.  Start by writing the length of the data, the data
         * itself will be written later in this function. */
        xShouldWrite = pdTRUE;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	617b      	str	r3, [r7, #20]
        ( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8004fba:	1d3b      	adds	r3, r7, #4
 8004fbc:	2204      	movs	r2, #4
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f000 f8ee 	bl	80051a2 <prvWriteBytesToBuffer>
 8004fc6:	e001      	b.n	8004fcc <prvWriteMessageToBuffer+0x56>
    }
    else
    {
        /* There is space available, but not enough space. */
        xShouldWrite = pdFALSE;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	617b      	str	r3, [r7, #20]
    }

    if( xShouldWrite != pdFALSE )
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d007      	beq.n	8004fe2 <prvWriteMessageToBuffer+0x6c>
    {
        /* Writes the data itself. */
        xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alignment and access. */
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	68b9      	ldr	r1, [r7, #8]
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f000 f8e2 	bl	80051a2 <prvWriteBytesToBuffer>
 8004fde:	6138      	str	r0, [r7, #16]
 8004fe0:	e001      	b.n	8004fe6 <prvWriteMessageToBuffer+0x70>
    }
    else
    {
        xReturn = 0;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	613b      	str	r3, [r7, #16]
    }

    return xReturn;
 8004fe6:	693b      	ldr	r3, [r7, #16]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3718      	adds	r7, #24
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08e      	sub	sp, #56	; 0x38
 8004ff4:	af02      	add	r7, sp, #8
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
 8004ffc:	603b      	str	r3, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	623b      	str	r3, [r7, #32]
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8005002:	2300      	movs	r3, #0
 8005004:	62fb      	str	r3, [r7, #44]	; 0x2c

    configASSERT( pvRxData );
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10a      	bne.n	8005022 <xStreamBufferReceive+0x32>
        __asm volatile
 800500c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005010:	f383 8811 	msr	BASEPRI, r3
 8005014:	f3bf 8f6f 	isb	sy
 8005018:	f3bf 8f4f 	dsb	sy
 800501c:	61fb      	str	r3, [r7, #28]
    }
 800501e:	bf00      	nop
 8005020:	e7fe      	b.n	8005020 <xStreamBufferReceive+0x30>
    configASSERT( pxStreamBuffer );
 8005022:	6a3b      	ldr	r3, [r7, #32]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10a      	bne.n	800503e <xStreamBufferReceive+0x4e>
        __asm volatile
 8005028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502c:	f383 8811 	msr	BASEPRI, r3
 8005030:	f3bf 8f6f 	isb	sy
 8005034:	f3bf 8f4f 	dsb	sy
 8005038:	61bb      	str	r3, [r7, #24]
    }
 800503a:	bf00      	nop
 800503c:	e7fe      	b.n	800503c <xStreamBufferReceive+0x4c>
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800503e:	6a3b      	ldr	r3, [r7, #32]
 8005040:	7f1b      	ldrb	r3, [r3, #28]
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b00      	cmp	r3, #0
 8005048:	d002      	beq.n	8005050 <xStreamBufferReceive+0x60>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800504a:	2304      	movs	r3, #4
 800504c:	627b      	str	r3, [r7, #36]	; 0x24
 800504e:	e001      	b.n	8005054 <xStreamBufferReceive+0x64>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
 8005050:	2300      	movs	r3, #0
 8005052:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if( xTicksToWait != ( TickType_t ) 0 )
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d037      	beq.n	80050ca <xStreamBufferReceive+0xda>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
 800505a:	f002 f81d 	bl	8007098 <vPortEnterCritical>
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800505e:	6a38      	ldr	r0, [r7, #32]
 8005060:	f000 f98b 	bl	800537a <prvBytesInBuffer>
 8005064:	62b8      	str	r0, [r7, #40]	; 0x28
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
 8005066:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506a:	429a      	cmp	r2, r3
 800506c:	d817      	bhi.n	800509e <xStreamBufferReceive+0xae>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
 800506e:	2100      	movs	r1, #0
 8005070:	2000      	movs	r0, #0
 8005072:	f001 fac1 	bl	80065f8 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00a      	beq.n	8005094 <xStreamBufferReceive+0xa4>
        __asm volatile
 800507e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	617b      	str	r3, [r7, #20]
    }
 8005090:	bf00      	nop
 8005092:	e7fe      	b.n	8005092 <xStreamBufferReceive+0xa2>
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8005094:	f000 ff72 	bl	8005f7c <xTaskGetCurrentTaskHandle>
 8005098:	4602      	mov	r2, r0
 800509a:	6a3b      	ldr	r3, [r7, #32]
 800509c:	611a      	str	r2, [r3, #16]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800509e:	f002 f82b 	bl	80070f8 <vPortExitCritical>

        if( xBytesAvailable <= xBytesToStoreMessageLength )
 80050a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d813      	bhi.n	80050d2 <xStreamBufferReceive+0xe2>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	2300      	movs	r3, #0
 80050b0:	2200      	movs	r2, #0
 80050b2:	2100      	movs	r1, #0
 80050b4:	2000      	movs	r0, #0
 80050b6:	f001 f80f 	bl	80060d8 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	2200      	movs	r2, #0
 80050be:	611a      	str	r2, [r3, #16]

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80050c0:	6a38      	ldr	r0, [r7, #32]
 80050c2:	f000 f95a 	bl	800537a <prvBytesInBuffer>
 80050c6:	62b8      	str	r0, [r7, #40]	; 0x28
 80050c8:	e003      	b.n	80050d2 <xStreamBufferReceive+0xe2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80050ca:	6a38      	ldr	r0, [r7, #32]
 80050cc:	f000 f955 	bl	800537a <prvBytesInBuffer>
 80050d0:	62b8      	str	r0, [r7, #40]	; 0x28
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
 80050d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d926      	bls.n	8005128 <xStreamBufferReceive+0x138>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	68b9      	ldr	r1, [r7, #8]
 80050e4:	6a38      	ldr	r0, [r7, #32]
 80050e6:	f000 f82a 	bl	800513e <prvReadMessageFromBuffer>
 80050ea:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
 80050ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d020      	beq.n	8005134 <xStreamBufferReceive+0x144>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050f6:	4619      	mov	r1, r3
 80050f8:	208e      	movs	r0, #142	; 0x8e
 80050fa:	f003 f8bd 	bl	8008278 <SEGGER_SYSVIEW_RecordU32x2>
            sbRECEIVE_COMPLETED( pxStreamBuffer );
 80050fe:	f000 fb55 	bl	80057ac <vTaskSuspendAll>
 8005102:	6a3b      	ldr	r3, [r7, #32]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00b      	beq.n	8005122 <xStreamBufferReceive+0x132>
 800510a:	6a3b      	ldr	r3, [r7, #32]
 800510c:	6958      	ldr	r0, [r3, #20]
 800510e:	2300      	movs	r3, #0
 8005110:	9300      	str	r3, [sp, #0]
 8005112:	2300      	movs	r3, #0
 8005114:	2200      	movs	r2, #0
 8005116:	2100      	movs	r1, #0
 8005118:	f001 f866 	bl	80061e8 <xTaskGenericNotify>
 800511c:	6a3b      	ldr	r3, [r7, #32]
 800511e:	2200      	movs	r2, #0
 8005120:	615a      	str	r2, [r3, #20]
 8005122:	f000 fb51 	bl	80057c8 <xTaskResumeAll>
 8005126:	e005      	b.n	8005134 <xStreamBufferReceive+0x144>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	4619      	mov	r1, r3
 800512e:	208e      	movs	r0, #142	; 0x8e
 8005130:	f003 f8a2 	bl	8008278 <SEGGER_SYSVIEW_RecordU32x2>
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
 8005134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005136:	4618      	mov	r0, r3
 8005138:	3730      	adds	r7, #48	; 0x30
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t * pxStreamBuffer,
                                        void * pvRxData,
                                        size_t xBufferLengthBytes,
                                        size_t xBytesAvailable,
                                        size_t xBytesToStoreMessageLength )
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b088      	sub	sp, #32
 8005142:	af00      	add	r7, sp, #0
 8005144:	60f8      	str	r0, [r7, #12]
 8005146:	60b9      	str	r1, [r7, #8]
 8005148:	607a      	str	r2, [r7, #4]
 800514a:	603b      	str	r3, [r7, #0]
    size_t xOriginalTail, xReceivedLength, xNextMessageLength;
    configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
 800514c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514e:	2b00      	cmp	r3, #0
 8005150:	d019      	beq.n	8005186 <prvReadMessageFromBuffer+0x48>
    {
        /* A discrete message is being received.  First receive the length
         * of the message.  A copy of the tail is stored so the buffer can be
         * returned to its prior state if the length of the message is too
         * large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	61bb      	str	r3, [r7, #24]
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8005158:	f107 0110 	add.w	r1, r7, #16
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 f890 	bl	8005286 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	61fb      	str	r3, [r7, #28]

        /* Reduce the number of bytes available by the number of bytes just
         * read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	603b      	str	r3, [r7, #0]

        /* Check there is enough space in the buffer provided by the
         * user. */
        if( xNextMessageLength > xBufferLengthBytes )
 8005172:	69fa      	ldr	r2, [r7, #28]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	429a      	cmp	r2, r3
 8005178:	d907      	bls.n	800518a <prvReadMessageFromBuffer+0x4c>
        {
            /* The user has provided insufficient space to read the message
             * so return the buffer to its previous state (so the length of
             * the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	601a      	str	r2, [r3, #0]
            xNextMessageLength = 0;
 8005180:	2300      	movs	r3, #0
 8005182:	61fb      	str	r3, [r7, #28]
 8005184:	e001      	b.n	800518a <prvReadMessageFromBuffer+0x4c>
    }
    else
    {
        /* A stream of bytes is being received (as opposed to a discrete
         * message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	61fb      	str	r3, [r7, #28]
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	69fa      	ldr	r2, [r7, #28]
 800518e:	68b9      	ldr	r1, [r7, #8]
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f000 f878 	bl	8005286 <prvReadBytesFromBuffer>
 8005196:	6178      	str	r0, [r7, #20]

    return xReceivedLength;
 8005198:	697b      	ldr	r3, [r7, #20]
}
 800519a:	4618      	mov	r0, r3
 800519c:	3720      	adds	r7, #32
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer,
                                     const uint8_t * pucData,
                                     size_t xCount )
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b08a      	sub	sp, #40	; 0x28
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	60f8      	str	r0, [r7, #12]
 80051aa:	60b9      	str	r1, [r7, #8]
 80051ac:	607a      	str	r2, [r7, #4]
    size_t xNextHead, xFirstLength;

    configASSERT( xCount > ( size_t ) 0 );
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10a      	bne.n	80051ca <prvWriteBytesToBuffer+0x28>
        __asm volatile
 80051b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b8:	f383 8811 	msr	BASEPRI, r3
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	f3bf 8f4f 	dsb	sy
 80051c4:	61fb      	str	r3, [r7, #28]
    }
 80051c6:	bf00      	nop
 80051c8:	e7fe      	b.n	80051c8 <prvWriteBytesToBuffer+0x26>

    xNextHead = pxStreamBuffer->xHead;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	627b      	str	r3, [r7, #36]	; 0x24

    /* Calculate the number of bytes that can be added in the first write -
     * which may be less than the total number of bytes that need to be added if
     * the buffer will wrap back to the beginning. */
    xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	4293      	cmp	r3, r2
 80051dc:	bf28      	it	cs
 80051de:	4613      	movcs	r3, r2
 80051e0:	623b      	str	r3, [r7, #32]

    /* Write as many bytes as can be written in the first write. */
    configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 80051e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051e4:	6a3b      	ldr	r3, [r7, #32]
 80051e6:	441a      	add	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d90a      	bls.n	8005206 <prvWriteBytesToBuffer+0x64>
        __asm volatile
 80051f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	61bb      	str	r3, [r7, #24]
    }
 8005202:	bf00      	nop
 8005204:	e7fe      	b.n	8005204 <prvWriteBytesToBuffer+0x62>
    ( void ) memcpy( ( void * ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	699a      	ldr	r2, [r3, #24]
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	4413      	add	r3, r2
 800520e:	6a3a      	ldr	r2, [r7, #32]
 8005210:	68b9      	ldr	r1, [r7, #8]
 8005212:	4618      	mov	r0, r3
 8005214:	f004 f9ea 	bl	80095ec <memcpy>

    /* If the number of bytes written was less than the number that could be
     * written in the first write... */
    if( xCount > xFirstLength )
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	6a3b      	ldr	r3, [r7, #32]
 800521c:	429a      	cmp	r2, r3
 800521e:	d91c      	bls.n	800525a <prvWriteBytesToBuffer+0xb8>
    {
        /* ...then write the remaining bytes to the start of the buffer. */
        configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	6a3b      	ldr	r3, [r7, #32]
 8005224:	1ad2      	subs	r2, r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	429a      	cmp	r2, r3
 800522c:	d90a      	bls.n	8005244 <prvWriteBytesToBuffer+0xa2>
        __asm volatile
 800522e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	617b      	str	r3, [r7, #20]
    }
 8005240:	bf00      	nop
 8005242:	e7fe      	b.n	8005242 <prvWriteBytesToBuffer+0xa0>
        ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6998      	ldr	r0, [r3, #24]
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	18d1      	adds	r1, r2, r3
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	461a      	mov	r2, r3
 8005256:	f004 f9c9 	bl	80095ec <memcpy>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xNextHead += xCount;
 800525a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4413      	add	r3, r2
 8005260:	627b      	str	r3, [r7, #36]	; 0x24

    if( xNextHead >= pxStreamBuffer->xLength )
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005268:	429a      	cmp	r2, r3
 800526a:	d304      	bcc.n	8005276 <prvWriteBytesToBuffer+0xd4>
    {
        xNextHead -= pxStreamBuffer->xLength;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	627b      	str	r3, [r7, #36]	; 0x24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxStreamBuffer->xHead = xNextHead;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800527a:	605a      	str	r2, [r3, #4]

    return xCount;
 800527c:	687b      	ldr	r3, [r7, #4]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3728      	adds	r7, #40	; 0x28
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <prvReadBytesFromBuffer>:

static size_t prvReadBytesFromBuffer( StreamBuffer_t * pxStreamBuffer,
                                      uint8_t * pucData,
                                      size_t xMaxCount,
                                      size_t xBytesAvailable )
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b08a      	sub	sp, #40	; 0x28
 800528a:	af00      	add	r7, sp, #0
 800528c:	60f8      	str	r0, [r7, #12]
 800528e:	60b9      	str	r1, [r7, #8]
 8005290:	607a      	str	r2, [r7, #4]
 8005292:	603b      	str	r3, [r7, #0]
    size_t xCount, xFirstLength, xNextTail;

    /* Use the minimum of the wanted bytes and the available bytes. */
    xCount = configMIN( xBytesAvailable, xMaxCount );
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	4293      	cmp	r3, r2
 800529a:	bf28      	it	cs
 800529c:	4613      	movcs	r3, r2
 800529e:	623b      	str	r3, [r7, #32]

    if( xCount > ( size_t ) 0 )
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d064      	beq.n	8005370 <prvReadBytesFromBuffer+0xea>
    {
        xNextTail = pxStreamBuffer->xTail;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* Calculate the number of bytes that can be read - which may be
         * less than the number wanted if the data wraps around to the start of
         * the buffer. */
        xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	6a3a      	ldr	r2, [r7, #32]
 80052b6:	4293      	cmp	r3, r2
 80052b8:	bf28      	it	cs
 80052ba:	4613      	movcs	r3, r2
 80052bc:	61fb      	str	r3, [r7, #28]

        /* Obtain the number of bytes it is possible to obtain in the first
         * read.  Asserts check bounds of read and write. */
        configASSERT( xFirstLength <= xMaxCount );
 80052be:	69fa      	ldr	r2, [r7, #28]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d90a      	bls.n	80052dc <prvReadBytesFromBuffer+0x56>
        __asm volatile
 80052c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ca:	f383 8811 	msr	BASEPRI, r3
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	61bb      	str	r3, [r7, #24]
    }
 80052d8:	bf00      	nop
 80052da:	e7fe      	b.n	80052da <prvReadBytesFromBuffer+0x54>
        configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 80052dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	441a      	add	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d90a      	bls.n	8005300 <prvReadBytesFromBuffer+0x7a>
        __asm volatile
 80052ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	617b      	str	r3, [r7, #20]
    }
 80052fc:	bf00      	nop
 80052fe:	e7fe      	b.n	80052fe <prvReadBytesFromBuffer+0x78>
        ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	699a      	ldr	r2, [r3, #24]
 8005304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005306:	4413      	add	r3, r2
 8005308:	69fa      	ldr	r2, [r7, #28]
 800530a:	4619      	mov	r1, r3
 800530c:	68b8      	ldr	r0, [r7, #8]
 800530e:	f004 f96d 	bl	80095ec <memcpy>

        /* If the total number of wanted bytes is greater than the number
         * that could be read in the first read... */
        if( xCount > xFirstLength )
 8005312:	6a3a      	ldr	r2, [r7, #32]
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	429a      	cmp	r2, r3
 8005318:	d919      	bls.n	800534e <prvReadBytesFromBuffer+0xc8>
        {
            /*...then read the remaining bytes from the start of the buffer. */
            configASSERT( xCount <= xMaxCount );
 800531a:	6a3a      	ldr	r2, [r7, #32]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	429a      	cmp	r2, r3
 8005320:	d90a      	bls.n	8005338 <prvReadBytesFromBuffer+0xb2>
        __asm volatile
 8005322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	613b      	str	r3, [r7, #16]
    }
 8005334:	bf00      	nop
 8005336:	e7fe      	b.n	8005336 <prvReadBytesFromBuffer+0xb0>
            ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	18d0      	adds	r0, r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6999      	ldr	r1, [r3, #24]
 8005342:	6a3a      	ldr	r2, [r7, #32]
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	461a      	mov	r2, r3
 800534a:	f004 f94f 	bl	80095ec <memcpy>
            mtCOVERAGE_TEST_MARKER();
        }

        /* Move the tail pointer to effectively remove the data read from
         * the buffer. */
        xNextTail += xCount;
 800534e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	4413      	add	r3, r2
 8005354:	627b      	str	r3, [r7, #36]	; 0x24

        if( xNextTail >= pxStreamBuffer->xLength )
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800535c:	429a      	cmp	r2, r3
 800535e:	d304      	bcc.n	800536a <prvReadBytesFromBuffer+0xe4>
        {
            xNextTail -= pxStreamBuffer->xLength;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	627b      	str	r3, [r7, #36]	; 0x24
        }

        pxStreamBuffer->xTail = xNextTail;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800536e:	601a      	str	r2, [r3, #0]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
 8005370:	6a3b      	ldr	r3, [r7, #32]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3728      	adds	r7, #40	; 0x28
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 800537a:	b480      	push	{r7}
 800537c:	b085      	sub	sp, #20
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
    size_t xCount;

    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	689a      	ldr	r2, [r3, #8]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	4413      	add	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]
    xCount -= pxStreamBuffer->xTail;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	60fb      	str	r3, [r7, #12]

    if( xCount >= pxStreamBuffer->xLength )
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d304      	bcc.n	80053ac <prvBytesInBuffer+0x32>
    {
        xCount -= pxStreamBuffer->xLength;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	60fb      	str	r3, [r7, #12]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
 80053ac:	68fb      	ldr	r3, [r7, #12]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
                                          uint8_t * const pucBuffer,
                                          size_t xBufferSizeBytes,
                                          size_t xTriggerLevelBytes,
                                          uint8_t ucFlags )
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b086      	sub	sp, #24
 80053be:	af00      	add	r7, sp, #0
 80053c0:	60f8      	str	r0, [r7, #12]
 80053c2:	60b9      	str	r1, [r7, #8]
 80053c4:	607a      	str	r2, [r7, #4]
 80053c6:	603b      	str	r3, [r7, #0]
    #if ( configASSERT_DEFINED == 1 )
        {
            /* The value written just has to be identifiable when looking at the
             * memory.  Don't use 0xA5 as that is the stack fill value and could
             * result in confusion as to what is actually being observed. */
            const BaseType_t xWriteValue = 0x55;
 80053c8:	2355      	movs	r3, #85	; 0x55
 80053ca:	617b      	str	r3, [r7, #20]
            configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	6979      	ldr	r1, [r7, #20]
 80053d0:	68b8      	ldr	r0, [r7, #8]
 80053d2:	f004 f919 	bl	8009608 <memset>
 80053d6:	4602      	mov	r2, r0
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	4293      	cmp	r3, r2
 80053dc:	d00a      	beq.n	80053f4 <prvInitialiseNewStreamBuffer+0x3a>
        __asm volatile
 80053de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	613b      	str	r3, [r7, #16]
    }
 80053f0:	bf00      	nop
 80053f2:	e7fe      	b.n	80053f2 <prvInitialiseNewStreamBuffer+0x38>
        } /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 80053f4:	2224      	movs	r2, #36	; 0x24
 80053f6:	2100      	movs	r1, #0
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f004 f905 	bl	8009608 <memset>
    pxStreamBuffer->pucBuffer = pucBuffer;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	619a      	str	r2, [r3, #24]
    pxStreamBuffer->xLength = xBufferSizeBytes;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	609a      	str	r2, [r3, #8]
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	683a      	ldr	r2, [r7, #0]
 800540e:	60da      	str	r2, [r3, #12]
    pxStreamBuffer->ucFlags = ucFlags;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005416:	771a      	strb	r2, [r3, #28]
}
 8005418:	bf00      	nop
 800541a:	3718      	adds	r7, #24
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005420:	b580      	push	{r7, lr}
 8005422:	b08c      	sub	sp, #48	; 0x30
 8005424:	af04      	add	r7, sp, #16
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	603b      	str	r3, [r7, #0]
 800542c:	4613      	mov	r3, r2
 800542e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005430:	88fb      	ldrh	r3, [r7, #6]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4618      	mov	r0, r3
 8005436:	f001 ff59 	bl	80072ec <pvPortMalloc>
 800543a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00e      	beq.n	8005460 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005442:	2058      	movs	r0, #88	; 0x58
 8005444:	f001 ff52 	bl	80072ec <pvPortMalloc>
 8005448:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d003      	beq.n	8005458 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	631a      	str	r2, [r3, #48]	; 0x30
 8005456:	e005      	b.n	8005464 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8005458:	6978      	ldr	r0, [r7, #20]
 800545a:	f002 f827 	bl	80074ac <vPortFree>
 800545e:	e001      	b.n	8005464 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8005460:	2300      	movs	r3, #0
 8005462:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d013      	beq.n	8005492 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800546a:	88fa      	ldrh	r2, [r7, #6]
 800546c:	2300      	movs	r3, #0
 800546e:	9303      	str	r3, [sp, #12]
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	9302      	str	r3, [sp, #8]
 8005474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005476:	9301      	str	r3, [sp, #4]
 8005478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	68b9      	ldr	r1, [r7, #8]
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f000 f80e 	bl	80054a2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005486:	69f8      	ldr	r0, [r7, #28]
 8005488:	f000 f8a2 	bl	80055d0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800548c:	2301      	movs	r3, #1
 800548e:	61bb      	str	r3, [r7, #24]
 8005490:	e002      	b.n	8005498 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005492:	f04f 33ff 	mov.w	r3, #4294967295
 8005496:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005498:	69bb      	ldr	r3, [r7, #24]
    }
 800549a:	4618      	mov	r0, r3
 800549c:	3720      	adds	r7, #32
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b088      	sub	sp, #32
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	60f8      	str	r0, [r7, #12]
 80054aa:	60b9      	str	r1, [r7, #8]
 80054ac:	607a      	str	r2, [r7, #4]
 80054ae:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80054b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	461a      	mov	r2, r3
 80054ba:	21a5      	movs	r1, #165	; 0xa5
 80054bc:	f004 f8a4 	bl	8009608 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80054c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80054ca:	3b01      	subs	r3, #1
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4413      	add	r3, r2
 80054d0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	f023 0307 	bic.w	r3, r3, #7
 80054d8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	f003 0307 	and.w	r3, r3, #7
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00a      	beq.n	80054fa <prvInitialiseNewTask+0x58>
        __asm volatile
 80054e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e8:	f383 8811 	msr	BASEPRI, r3
 80054ec:	f3bf 8f6f 	isb	sy
 80054f0:	f3bf 8f4f 	dsb	sy
 80054f4:	617b      	str	r3, [r7, #20]
    }
 80054f6:	bf00      	nop
 80054f8:	e7fe      	b.n	80054f8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d01f      	beq.n	8005540 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005500:	2300      	movs	r3, #0
 8005502:	61fb      	str	r3, [r7, #28]
 8005504:	e012      	b.n	800552c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	4413      	add	r3, r2
 800550c:	7819      	ldrb	r1, [r3, #0]
 800550e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	4413      	add	r3, r2
 8005514:	3334      	adds	r3, #52	; 0x34
 8005516:	460a      	mov	r2, r1
 8005518:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	4413      	add	r3, r2
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d006      	beq.n	8005534 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	3301      	adds	r3, #1
 800552a:	61fb      	str	r3, [r7, #28]
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	2b09      	cmp	r3, #9
 8005530:	d9e9      	bls.n	8005506 <prvInitialiseNewTask+0x64>
 8005532:	e000      	b.n	8005536 <prvInitialiseNewTask+0x94>
            {
                break;
 8005534:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005538:	2200      	movs	r2, #0
 800553a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800553e:	e003      	b.n	8005548 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005542:	2200      	movs	r2, #0
 8005544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554a:	2b04      	cmp	r3, #4
 800554c:	d901      	bls.n	8005552 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800554e:	2304      	movs	r3, #4
 8005550:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005554:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005556:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8005558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800555c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800555e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005560:	2200      	movs	r2, #0
 8005562:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005566:	3304      	adds	r3, #4
 8005568:	4618      	mov	r0, r3
 800556a:	f7fe fdfb 	bl	8004164 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800556e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005570:	3318      	adds	r3, #24
 8005572:	4618      	mov	r0, r3
 8005574:	f7fe fdf6 	bl	8004164 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800557c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800557e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005580:	f1c3 0205 	rsb	r2, r3, #5
 8005584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005586:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800558c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800558e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005590:	3350      	adds	r3, #80	; 0x50
 8005592:	2204      	movs	r2, #4
 8005594:	2100      	movs	r1, #0
 8005596:	4618      	mov	r0, r3
 8005598:	f004 f836 	bl	8009608 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800559c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559e:	3354      	adds	r3, #84	; 0x54
 80055a0:	2201      	movs	r2, #1
 80055a2:	2100      	movs	r1, #0
 80055a4:	4618      	mov	r0, r3
 80055a6:	f004 f82f 	bl	8009608 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	68f9      	ldr	r1, [r7, #12]
 80055ae:	69b8      	ldr	r0, [r7, #24]
 80055b0:	f001 fc42 	bl	8006e38 <pxPortInitialiseStack>
 80055b4:	4602      	mov	r2, r0
 80055b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80055ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d002      	beq.n	80055c6 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055c4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80055c6:	bf00      	nop
 80055c8:	3720      	adds	r7, #32
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
	...

080055d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80055d0:	b5b0      	push	{r4, r5, r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af02      	add	r7, sp, #8
 80055d6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80055d8:	f001 fd5e 	bl	8007098 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80055dc:	4b3b      	ldr	r3, [pc, #236]	; (80056cc <prvAddNewTaskToReadyList+0xfc>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	3301      	adds	r3, #1
 80055e2:	4a3a      	ldr	r2, [pc, #232]	; (80056cc <prvAddNewTaskToReadyList+0xfc>)
 80055e4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80055e6:	4b3a      	ldr	r3, [pc, #232]	; (80056d0 <prvAddNewTaskToReadyList+0x100>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d109      	bne.n	8005602 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80055ee:	4a38      	ldr	r2, [pc, #224]	; (80056d0 <prvAddNewTaskToReadyList+0x100>)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80055f4:	4b35      	ldr	r3, [pc, #212]	; (80056cc <prvAddNewTaskToReadyList+0xfc>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d110      	bne.n	800561e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80055fc:	f000 fc24 	bl	8005e48 <prvInitialiseTaskLists>
 8005600:	e00d      	b.n	800561e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8005602:	4b34      	ldr	r3, [pc, #208]	; (80056d4 <prvAddNewTaskToReadyList+0x104>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d109      	bne.n	800561e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800560a:	4b31      	ldr	r3, [pc, #196]	; (80056d0 <prvAddNewTaskToReadyList+0x100>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005614:	429a      	cmp	r2, r3
 8005616:	d802      	bhi.n	800561e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005618:	4a2d      	ldr	r2, [pc, #180]	; (80056d0 <prvAddNewTaskToReadyList+0x100>)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800561e:	4b2e      	ldr	r3, [pc, #184]	; (80056d8 <prvAddNewTaskToReadyList+0x108>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	3301      	adds	r3, #1
 8005624:	4a2c      	ldr	r2, [pc, #176]	; (80056d8 <prvAddNewTaskToReadyList+0x108>)
 8005626:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005628:	4b2b      	ldr	r3, [pc, #172]	; (80056d8 <prvAddNewTaskToReadyList+0x108>)
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d016      	beq.n	8005664 <prvAddNewTaskToReadyList+0x94>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4618      	mov	r0, r3
 800563a:	f003 fb8b 	bl	8008d54 <SEGGER_SYSVIEW_OnTaskCreate>
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564e:	461d      	mov	r5, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	461c      	mov	r4, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565a:	1ae3      	subs	r3, r4, r3
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	462b      	mov	r3, r5
 8005660:	f003 ff06 	bl	8009470 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4618      	mov	r0, r3
 8005668:	f003 fbf8 	bl	8008e5c <SEGGER_SYSVIEW_OnTaskStartReady>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005670:	2201      	movs	r2, #1
 8005672:	409a      	lsls	r2, r3
 8005674:	4b19      	ldr	r3, [pc, #100]	; (80056dc <prvAddNewTaskToReadyList+0x10c>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4313      	orrs	r3, r2
 800567a:	4a18      	ldr	r2, [pc, #96]	; (80056dc <prvAddNewTaskToReadyList+0x10c>)
 800567c:	6013      	str	r3, [r2, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005682:	4613      	mov	r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4413      	add	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4a15      	ldr	r2, [pc, #84]	; (80056e0 <prvAddNewTaskToReadyList+0x110>)
 800568c:	441a      	add	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	3304      	adds	r3, #4
 8005692:	4619      	mov	r1, r3
 8005694:	4610      	mov	r0, r2
 8005696:	f7fe fd72 	bl	800417e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800569a:	f001 fd2d 	bl	80070f8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800569e:	4b0d      	ldr	r3, [pc, #52]	; (80056d4 <prvAddNewTaskToReadyList+0x104>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00e      	beq.n	80056c4 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80056a6:	4b0a      	ldr	r3, [pc, #40]	; (80056d0 <prvAddNewTaskToReadyList+0x100>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d207      	bcs.n	80056c4 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80056b4:	4b0b      	ldr	r3, [pc, #44]	; (80056e4 <prvAddNewTaskToReadyList+0x114>)
 80056b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ba:	601a      	str	r2, [r3, #0]
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80056c4:	bf00      	nop
 80056c6:	3708      	adds	r7, #8
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bdb0      	pop	{r4, r5, r7, pc}
 80056cc:	20000274 	.word	0x20000274
 80056d0:	2000019c 	.word	0x2000019c
 80056d4:	20000280 	.word	0x20000280
 80056d8:	20000290 	.word	0x20000290
 80056dc:	2000027c 	.word	0x2000027c
 80056e0:	200001a0 	.word	0x200001a0
 80056e4:	e000ed04 	.word	0xe000ed04

080056e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80056ee:	4b27      	ldr	r3, [pc, #156]	; (800578c <vTaskStartScheduler+0xa4>)
 80056f0:	9301      	str	r3, [sp, #4]
 80056f2:	2300      	movs	r3, #0
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	2300      	movs	r3, #0
 80056f8:	2282      	movs	r2, #130	; 0x82
 80056fa:	4925      	ldr	r1, [pc, #148]	; (8005790 <vTaskStartScheduler+0xa8>)
 80056fc:	4825      	ldr	r0, [pc, #148]	; (8005794 <vTaskStartScheduler+0xac>)
 80056fe:	f7ff fe8f 	bl	8005420 <xTaskCreate>
 8005702:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d102      	bne.n	8005710 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800570a:	f001 f827 	bl	800675c <xTimerCreateTimerTask>
 800570e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d124      	bne.n	8005760 <vTaskStartScheduler+0x78>
        __asm volatile
 8005716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571a:	f383 8811 	msr	BASEPRI, r3
 800571e:	f3bf 8f6f 	isb	sy
 8005722:	f3bf 8f4f 	dsb	sy
 8005726:	60bb      	str	r3, [r7, #8]
    }
 8005728:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800572a:	4b1b      	ldr	r3, [pc, #108]	; (8005798 <vTaskStartScheduler+0xb0>)
 800572c:	f04f 32ff 	mov.w	r2, #4294967295
 8005730:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005732:	4b1a      	ldr	r3, [pc, #104]	; (800579c <vTaskStartScheduler+0xb4>)
 8005734:	2201      	movs	r2, #1
 8005736:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005738:	4b19      	ldr	r3, [pc, #100]	; (80057a0 <vTaskStartScheduler+0xb8>)
 800573a:	2200      	movs	r2, #0
 800573c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800573e:	4b19      	ldr	r3, [pc, #100]	; (80057a4 <vTaskStartScheduler+0xbc>)
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	4b12      	ldr	r3, [pc, #72]	; (800578c <vTaskStartScheduler+0xa4>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	429a      	cmp	r2, r3
 8005748:	d102      	bne.n	8005750 <vTaskStartScheduler+0x68>
 800574a:	f003 fae7 	bl	8008d1c <SEGGER_SYSVIEW_OnIdle>
 800574e:	e004      	b.n	800575a <vTaskStartScheduler+0x72>
 8005750:	4b14      	ldr	r3, [pc, #80]	; (80057a4 <vTaskStartScheduler+0xbc>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4618      	mov	r0, r3
 8005756:	f003 fb3f 	bl	8008dd8 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800575a:	f001 fbfb 	bl	8006f54 <xPortStartScheduler>
 800575e:	e00e      	b.n	800577e <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005766:	d10a      	bne.n	800577e <vTaskStartScheduler+0x96>
        __asm volatile
 8005768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576c:	f383 8811 	msr	BASEPRI, r3
 8005770:	f3bf 8f6f 	isb	sy
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	607b      	str	r3, [r7, #4]
    }
 800577a:	bf00      	nop
 800577c:	e7fe      	b.n	800577c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800577e:	4b0a      	ldr	r3, [pc, #40]	; (80057a8 <vTaskStartScheduler+0xc0>)
 8005780:	681b      	ldr	r3, [r3, #0]
}
 8005782:	bf00      	nop
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	20000298 	.word	0x20000298
 8005790:	08009868 	.word	0x08009868
 8005794:	08005e19 	.word	0x08005e19
 8005798:	20000294 	.word	0x20000294
 800579c:	20000280 	.word	0x20000280
 80057a0:	20000278 	.word	0x20000278
 80057a4:	2000019c 	.word	0x2000019c
 80057a8:	2000000c 	.word	0x2000000c

080057ac <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80057ac:	b480      	push	{r7}
 80057ae:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80057b0:	4b04      	ldr	r3, [pc, #16]	; (80057c4 <vTaskSuspendAll+0x18>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	3301      	adds	r3, #1
 80057b6:	4a03      	ldr	r2, [pc, #12]	; (80057c4 <vTaskSuspendAll+0x18>)
 80057b8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80057ba:	bf00      	nop
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr
 80057c4:	2000029c 	.word	0x2000029c

080057c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80057ce:	2300      	movs	r3, #0
 80057d0:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80057d2:	2300      	movs	r3, #0
 80057d4:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80057d6:	4b43      	ldr	r3, [pc, #268]	; (80058e4 <xTaskResumeAll+0x11c>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10a      	bne.n	80057f4 <xTaskResumeAll+0x2c>
        __asm volatile
 80057de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	603b      	str	r3, [r7, #0]
    }
 80057f0:	bf00      	nop
 80057f2:	e7fe      	b.n	80057f2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80057f4:	f001 fc50 	bl	8007098 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80057f8:	4b3a      	ldr	r3, [pc, #232]	; (80058e4 <xTaskResumeAll+0x11c>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3b01      	subs	r3, #1
 80057fe:	4a39      	ldr	r2, [pc, #228]	; (80058e4 <xTaskResumeAll+0x11c>)
 8005800:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005802:	4b38      	ldr	r3, [pc, #224]	; (80058e4 <xTaskResumeAll+0x11c>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d165      	bne.n	80058d6 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800580a:	4b37      	ldr	r3, [pc, #220]	; (80058e8 <xTaskResumeAll+0x120>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d061      	beq.n	80058d6 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005812:	e032      	b.n	800587a <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005814:	4b35      	ldr	r3, [pc, #212]	; (80058ec <xTaskResumeAll+0x124>)
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	3318      	adds	r3, #24
 8005820:	4618      	mov	r0, r3
 8005822:	f7fe fd09 	bl	8004238 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	3304      	adds	r3, #4
 800582a:	4618      	mov	r0, r3
 800582c:	f7fe fd04 	bl	8004238 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4618      	mov	r0, r3
 8005834:	f003 fb12 	bl	8008e5c <SEGGER_SYSVIEW_OnTaskStartReady>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583c:	2201      	movs	r2, #1
 800583e:	409a      	lsls	r2, r3
 8005840:	4b2b      	ldr	r3, [pc, #172]	; (80058f0 <xTaskResumeAll+0x128>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4313      	orrs	r3, r2
 8005846:	4a2a      	ldr	r2, [pc, #168]	; (80058f0 <xTaskResumeAll+0x128>)
 8005848:	6013      	str	r3, [r2, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800584e:	4613      	mov	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4a27      	ldr	r2, [pc, #156]	; (80058f4 <xTaskResumeAll+0x12c>)
 8005858:	441a      	add	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	3304      	adds	r3, #4
 800585e:	4619      	mov	r1, r3
 8005860:	4610      	mov	r0, r2
 8005862:	f7fe fc8c 	bl	800417e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800586a:	4b23      	ldr	r3, [pc, #140]	; (80058f8 <xTaskResumeAll+0x130>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005870:	429a      	cmp	r2, r3
 8005872:	d302      	bcc.n	800587a <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8005874:	4b21      	ldr	r3, [pc, #132]	; (80058fc <xTaskResumeAll+0x134>)
 8005876:	2201      	movs	r2, #1
 8005878:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800587a:	4b1c      	ldr	r3, [pc, #112]	; (80058ec <xTaskResumeAll+0x124>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1c8      	bne.n	8005814 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d001      	beq.n	800588c <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005888:	f000 fb5c 	bl	8005f44 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800588c:	4b1c      	ldr	r3, [pc, #112]	; (8005900 <xTaskResumeAll+0x138>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d010      	beq.n	80058ba <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005898:	f000 f858 	bl	800594c <xTaskIncrementTick>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d002      	beq.n	80058a8 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80058a2:	4b16      	ldr	r3, [pc, #88]	; (80058fc <xTaskResumeAll+0x134>)
 80058a4:	2201      	movs	r2, #1
 80058a6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	3b01      	subs	r3, #1
 80058ac:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1f1      	bne.n	8005898 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80058b4:	4b12      	ldr	r3, [pc, #72]	; (8005900 <xTaskResumeAll+0x138>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80058ba:	4b10      	ldr	r3, [pc, #64]	; (80058fc <xTaskResumeAll+0x134>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d009      	beq.n	80058d6 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80058c2:	2301      	movs	r3, #1
 80058c4:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80058c6:	4b0f      	ldr	r3, [pc, #60]	; (8005904 <xTaskResumeAll+0x13c>)
 80058c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058cc:	601a      	str	r2, [r3, #0]
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80058d6:	f001 fc0f 	bl	80070f8 <vPortExitCritical>

    return xAlreadyYielded;
 80058da:	68bb      	ldr	r3, [r7, #8]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	2000029c 	.word	0x2000029c
 80058e8:	20000274 	.word	0x20000274
 80058ec:	20000234 	.word	0x20000234
 80058f0:	2000027c 	.word	0x2000027c
 80058f4:	200001a0 	.word	0x200001a0
 80058f8:	2000019c 	.word	0x2000019c
 80058fc:	20000288 	.word	0x20000288
 8005900:	20000284 	.word	0x20000284
 8005904:	e000ed04 	.word	0xe000ed04

08005908 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800590e:	4b05      	ldr	r3, [pc, #20]	; (8005924 <xTaskGetTickCount+0x1c>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005914:	687b      	ldr	r3, [r7, #4]
}
 8005916:	4618      	mov	r0, r3
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	20000278 	.word	0x20000278

08005928 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800592e:	f001 fc9d 	bl	800726c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005932:	2300      	movs	r3, #0
 8005934:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8005936:	4b04      	ldr	r3, [pc, #16]	; (8005948 <xTaskGetTickCountFromISR+0x20>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800593c:	683b      	ldr	r3, [r7, #0]
}
 800593e:	4618      	mov	r0, r3
 8005940:	3708      	adds	r7, #8
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	20000278 	.word	0x20000278

0800594c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005952:	2300      	movs	r3, #0
 8005954:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005956:	4b50      	ldr	r3, [pc, #320]	; (8005a98 <xTaskIncrementTick+0x14c>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	f040 8092 	bne.w	8005a84 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005960:	4b4e      	ldr	r3, [pc, #312]	; (8005a9c <xTaskIncrementTick+0x150>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	3301      	adds	r3, #1
 8005966:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005968:	4a4c      	ldr	r2, [pc, #304]	; (8005a9c <xTaskIncrementTick+0x150>)
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d120      	bne.n	80059b6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8005974:	4b4a      	ldr	r3, [pc, #296]	; (8005aa0 <xTaskIncrementTick+0x154>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00a      	beq.n	8005994 <xTaskIncrementTick+0x48>
        __asm volatile
 800597e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005982:	f383 8811 	msr	BASEPRI, r3
 8005986:	f3bf 8f6f 	isb	sy
 800598a:	f3bf 8f4f 	dsb	sy
 800598e:	603b      	str	r3, [r7, #0]
    }
 8005990:	bf00      	nop
 8005992:	e7fe      	b.n	8005992 <xTaskIncrementTick+0x46>
 8005994:	4b42      	ldr	r3, [pc, #264]	; (8005aa0 <xTaskIncrementTick+0x154>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	60fb      	str	r3, [r7, #12]
 800599a:	4b42      	ldr	r3, [pc, #264]	; (8005aa4 <xTaskIncrementTick+0x158>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a40      	ldr	r2, [pc, #256]	; (8005aa0 <xTaskIncrementTick+0x154>)
 80059a0:	6013      	str	r3, [r2, #0]
 80059a2:	4a40      	ldr	r2, [pc, #256]	; (8005aa4 <xTaskIncrementTick+0x158>)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6013      	str	r3, [r2, #0]
 80059a8:	4b3f      	ldr	r3, [pc, #252]	; (8005aa8 <xTaskIncrementTick+0x15c>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	3301      	adds	r3, #1
 80059ae:	4a3e      	ldr	r2, [pc, #248]	; (8005aa8 <xTaskIncrementTick+0x15c>)
 80059b0:	6013      	str	r3, [r2, #0]
 80059b2:	f000 fac7 	bl	8005f44 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80059b6:	4b3d      	ldr	r3, [pc, #244]	; (8005aac <xTaskIncrementTick+0x160>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d34c      	bcc.n	8005a5a <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059c0:	4b37      	ldr	r3, [pc, #220]	; (8005aa0 <xTaskIncrementTick+0x154>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d104      	bne.n	80059d4 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059ca:	4b38      	ldr	r3, [pc, #224]	; (8005aac <xTaskIncrementTick+0x160>)
 80059cc:	f04f 32ff 	mov.w	r2, #4294967295
 80059d0:	601a      	str	r2, [r3, #0]
                    break;
 80059d2:	e042      	b.n	8005a5a <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059d4:	4b32      	ldr	r3, [pc, #200]	; (8005aa0 <xTaskIncrementTick+0x154>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d203      	bcs.n	80059f4 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80059ec:	4a2f      	ldr	r2, [pc, #188]	; (8005aac <xTaskIncrementTick+0x160>)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80059f2:	e032      	b.n	8005a5a <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	3304      	adds	r3, #4
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7fe fc1d 	bl	8004238 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d004      	beq.n	8005a10 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	3318      	adds	r3, #24
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fe fc14 	bl	8004238 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f003 fa22 	bl	8008e5c <SEGGER_SYSVIEW_OnTaskStartReady>
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	409a      	lsls	r2, r3
 8005a20:	4b23      	ldr	r3, [pc, #140]	; (8005ab0 <xTaskIncrementTick+0x164>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	4a22      	ldr	r2, [pc, #136]	; (8005ab0 <xTaskIncrementTick+0x164>)
 8005a28:	6013      	str	r3, [r2, #0]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a2e:	4613      	mov	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4a1f      	ldr	r2, [pc, #124]	; (8005ab4 <xTaskIncrementTick+0x168>)
 8005a38:	441a      	add	r2, r3
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	4619      	mov	r1, r3
 8005a40:	4610      	mov	r0, r2
 8005a42:	f7fe fb9c 	bl	800417e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a4a:	4b1b      	ldr	r3, [pc, #108]	; (8005ab8 <xTaskIncrementTick+0x16c>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d3b5      	bcc.n	80059c0 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8005a54:	2301      	movs	r3, #1
 8005a56:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a58:	e7b2      	b.n	80059c0 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a5a:	4b17      	ldr	r3, [pc, #92]	; (8005ab8 <xTaskIncrementTick+0x16c>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a60:	4914      	ldr	r1, [pc, #80]	; (8005ab4 <xTaskIncrementTick+0x168>)
 8005a62:	4613      	mov	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4413      	add	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	440b      	add	r3, r1
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d901      	bls.n	8005a76 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8005a72:	2301      	movs	r3, #1
 8005a74:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8005a76:	4b11      	ldr	r3, [pc, #68]	; (8005abc <xTaskIncrementTick+0x170>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d007      	beq.n	8005a8e <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	617b      	str	r3, [r7, #20]
 8005a82:	e004      	b.n	8005a8e <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005a84:	4b0e      	ldr	r3, [pc, #56]	; (8005ac0 <xTaskIncrementTick+0x174>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	4a0d      	ldr	r2, [pc, #52]	; (8005ac0 <xTaskIncrementTick+0x174>)
 8005a8c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8005a8e:	697b      	ldr	r3, [r7, #20]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3718      	adds	r7, #24
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	2000029c 	.word	0x2000029c
 8005a9c:	20000278 	.word	0x20000278
 8005aa0:	2000022c 	.word	0x2000022c
 8005aa4:	20000230 	.word	0x20000230
 8005aa8:	2000028c 	.word	0x2000028c
 8005aac:	20000294 	.word	0x20000294
 8005ab0:	2000027c 	.word	0x2000027c
 8005ab4:	200001a0 	.word	0x200001a0
 8005ab8:	2000019c 	.word	0x2000019c
 8005abc:	20000288 	.word	0x20000288
 8005ac0:	20000284 	.word	0x20000284

08005ac4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005aca:	4b2d      	ldr	r3, [pc, #180]	; (8005b80 <vTaskSwitchContext+0xbc>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005ad2:	4b2c      	ldr	r3, [pc, #176]	; (8005b84 <vTaskSwitchContext+0xc0>)
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8005ad8:	e04d      	b.n	8005b76 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8005ada:	4b2a      	ldr	r3, [pc, #168]	; (8005b84 <vTaskSwitchContext+0xc0>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ae0:	4b29      	ldr	r3, [pc, #164]	; (8005b88 <vTaskSwitchContext+0xc4>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	fab3 f383 	clz	r3, r3
 8005aec:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005aee:	7afb      	ldrb	r3, [r7, #11]
 8005af0:	f1c3 031f 	rsb	r3, r3, #31
 8005af4:	617b      	str	r3, [r7, #20]
 8005af6:	4925      	ldr	r1, [pc, #148]	; (8005b8c <vTaskSwitchContext+0xc8>)
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	4613      	mov	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4413      	add	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	440b      	add	r3, r1
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10a      	bne.n	8005b20 <vTaskSwitchContext+0x5c>
        __asm volatile
 8005b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0e:	f383 8811 	msr	BASEPRI, r3
 8005b12:	f3bf 8f6f 	isb	sy
 8005b16:	f3bf 8f4f 	dsb	sy
 8005b1a:	607b      	str	r3, [r7, #4]
    }
 8005b1c:	bf00      	nop
 8005b1e:	e7fe      	b.n	8005b1e <vTaskSwitchContext+0x5a>
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	4613      	mov	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4413      	add	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4a18      	ldr	r2, [pc, #96]	; (8005b8c <vTaskSwitchContext+0xc8>)
 8005b2c:	4413      	add	r3, r2
 8005b2e:	613b      	str	r3, [r7, #16]
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	685a      	ldr	r2, [r3, #4]
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	605a      	str	r2, [r3, #4]
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	3308      	adds	r3, #8
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d104      	bne.n	8005b50 <vTaskSwitchContext+0x8c>
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	685a      	ldr	r2, [r3, #4]
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	605a      	str	r2, [r3, #4]
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	4a0e      	ldr	r2, [pc, #56]	; (8005b90 <vTaskSwitchContext+0xcc>)
 8005b58:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8005b5a:	4b0d      	ldr	r3, [pc, #52]	; (8005b90 <vTaskSwitchContext+0xcc>)
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	4b0d      	ldr	r3, [pc, #52]	; (8005b94 <vTaskSwitchContext+0xd0>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d102      	bne.n	8005b6c <vTaskSwitchContext+0xa8>
 8005b66:	f003 f8d9 	bl	8008d1c <SEGGER_SYSVIEW_OnIdle>
}
 8005b6a:	e004      	b.n	8005b76 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8005b6c:	4b08      	ldr	r3, [pc, #32]	; (8005b90 <vTaskSwitchContext+0xcc>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4618      	mov	r0, r3
 8005b72:	f003 f931 	bl	8008dd8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8005b76:	bf00      	nop
 8005b78:	3718      	adds	r7, #24
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	2000029c 	.word	0x2000029c
 8005b84:	20000288 	.word	0x20000288
 8005b88:	2000027c 	.word	0x2000027c
 8005b8c:	200001a0 	.word	0x200001a0
 8005b90:	2000019c 	.word	0x2000019c
 8005b94:	20000298 	.word	0x20000298

08005b98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10a      	bne.n	8005bbe <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8005ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bac:	f383 8811 	msr	BASEPRI, r3
 8005bb0:	f3bf 8f6f 	isb	sy
 8005bb4:	f3bf 8f4f 	dsb	sy
 8005bb8:	60fb      	str	r3, [r7, #12]
    }
 8005bba:	bf00      	nop
 8005bbc:	e7fe      	b.n	8005bbc <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005bbe:	4b07      	ldr	r3, [pc, #28]	; (8005bdc <vTaskPlaceOnEventList+0x44>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	3318      	adds	r3, #24
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f7fe fafd 	bl	80041c6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005bcc:	2101      	movs	r1, #1
 8005bce:	6838      	ldr	r0, [r7, #0]
 8005bd0:	f000 fd4c 	bl	800666c <prvAddCurrentTaskToDelayedList>
}
 8005bd4:	bf00      	nop
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	2000019c 	.word	0x2000019c

08005be0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10a      	bne.n	8005c08 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8005bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf6:	f383 8811 	msr	BASEPRI, r3
 8005bfa:	f3bf 8f6f 	isb	sy
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	617b      	str	r3, [r7, #20]
    }
 8005c04:	bf00      	nop
 8005c06:	e7fe      	b.n	8005c06 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c08:	4b0b      	ldr	r3, [pc, #44]	; (8005c38 <vTaskPlaceOnEventListRestricted+0x58>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	3318      	adds	r3, #24
 8005c0e:	4619      	mov	r1, r3
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f7fe fab4 	bl	800417e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d002      	beq.n	8005c22 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8005c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c20:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8005c22:	2024      	movs	r0, #36	; 0x24
 8005c24:	f002 face 	bl	80081c4 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c28:	6879      	ldr	r1, [r7, #4]
 8005c2a:	68b8      	ldr	r0, [r7, #8]
 8005c2c:	f000 fd1e 	bl	800666c <prvAddCurrentTaskToDelayedList>
    }
 8005c30:	bf00      	nop
 8005c32:	3718      	adds	r7, #24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	2000019c 	.word	0x2000019c

08005c3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10a      	bne.n	8005c68 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8005c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c56:	f383 8811 	msr	BASEPRI, r3
 8005c5a:	f3bf 8f6f 	isb	sy
 8005c5e:	f3bf 8f4f 	dsb	sy
 8005c62:	60fb      	str	r3, [r7, #12]
    }
 8005c64:	bf00      	nop
 8005c66:	e7fe      	b.n	8005c66 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	3318      	adds	r3, #24
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7fe fae3 	bl	8004238 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c72:	4b1f      	ldr	r3, [pc, #124]	; (8005cf0 <xTaskRemoveFromEventList+0xb4>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d120      	bne.n	8005cbc <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	3304      	adds	r3, #4
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7fe fada 	bl	8004238 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f003 f8e8 	bl	8008e5c <SEGGER_SYSVIEW_OnTaskStartReady>
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c90:	2201      	movs	r2, #1
 8005c92:	409a      	lsls	r2, r3
 8005c94:	4b17      	ldr	r3, [pc, #92]	; (8005cf4 <xTaskRemoveFromEventList+0xb8>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	4a16      	ldr	r2, [pc, #88]	; (8005cf4 <xTaskRemoveFromEventList+0xb8>)
 8005c9c:	6013      	str	r3, [r2, #0]
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4a13      	ldr	r2, [pc, #76]	; (8005cf8 <xTaskRemoveFromEventList+0xbc>)
 8005cac:	441a      	add	r2, r3
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	3304      	adds	r3, #4
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	4610      	mov	r0, r2
 8005cb6:	f7fe fa62 	bl	800417e <vListInsertEnd>
 8005cba:	e005      	b.n	8005cc8 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	3318      	adds	r3, #24
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	480e      	ldr	r0, [pc, #56]	; (8005cfc <xTaskRemoveFromEventList+0xc0>)
 8005cc4:	f7fe fa5b 	bl	800417e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ccc:	4b0c      	ldr	r3, [pc, #48]	; (8005d00 <xTaskRemoveFromEventList+0xc4>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d905      	bls.n	8005ce2 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005cda:	4b0a      	ldr	r3, [pc, #40]	; (8005d04 <xTaskRemoveFromEventList+0xc8>)
 8005cdc:	2201      	movs	r2, #1
 8005cde:	601a      	str	r2, [r3, #0]
 8005ce0:	e001      	b.n	8005ce6 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005ce6:	697b      	ldr	r3, [r7, #20]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3718      	adds	r7, #24
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	2000029c 	.word	0x2000029c
 8005cf4:	2000027c 	.word	0x2000027c
 8005cf8:	200001a0 	.word	0x200001a0
 8005cfc:	20000234 	.word	0x20000234
 8005d00:	2000019c 	.word	0x2000019c
 8005d04:	20000288 	.word	0x20000288

08005d08 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d10:	4b06      	ldr	r3, [pc, #24]	; (8005d2c <vTaskInternalSetTimeOutState+0x24>)
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005d18:	4b05      	ldr	r3, [pc, #20]	; (8005d30 <vTaskInternalSetTimeOutState+0x28>)
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	605a      	str	r2, [r3, #4]
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	2000028c 	.word	0x2000028c
 8005d30:	20000278 	.word	0x20000278

08005d34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b088      	sub	sp, #32
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10a      	bne.n	8005d5a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8005d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d48:	f383 8811 	msr	BASEPRI, r3
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	f3bf 8f4f 	dsb	sy
 8005d54:	613b      	str	r3, [r7, #16]
    }
 8005d56:	bf00      	nop
 8005d58:	e7fe      	b.n	8005d58 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10a      	bne.n	8005d76 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8005d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d64:	f383 8811 	msr	BASEPRI, r3
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	60fb      	str	r3, [r7, #12]
    }
 8005d72:	bf00      	nop
 8005d74:	e7fe      	b.n	8005d74 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8005d76:	f001 f98f 	bl	8007098 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005d7a:	4b1f      	ldr	r3, [pc, #124]	; (8005df8 <xTaskCheckForTimeOut+0xc4>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d92:	d102      	bne.n	8005d9a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005d94:	2300      	movs	r3, #0
 8005d96:	61fb      	str	r3, [r7, #28]
 8005d98:	e026      	b.n	8005de8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	4b17      	ldr	r3, [pc, #92]	; (8005dfc <xTaskCheckForTimeOut+0xc8>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d00a      	beq.n	8005dbc <xTaskCheckForTimeOut+0x88>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	69ba      	ldr	r2, [r7, #24]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d305      	bcc.n	8005dbc <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005db0:	2301      	movs	r3, #1
 8005db2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	2200      	movs	r2, #0
 8005db8:	601a      	str	r2, [r3, #0]
 8005dba:	e015      	b.n	8005de8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d20b      	bcs.n	8005dde <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	1ad2      	subs	r2, r2, r3
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f7ff ff98 	bl	8005d08 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	61fb      	str	r3, [r7, #28]
 8005ddc:	e004      	b.n	8005de8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2200      	movs	r2, #0
 8005de2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005de4:	2301      	movs	r3, #1
 8005de6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005de8:	f001 f986 	bl	80070f8 <vPortExitCritical>

    return xReturn;
 8005dec:	69fb      	ldr	r3, [r7, #28]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3720      	adds	r7, #32
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	20000278 	.word	0x20000278
 8005dfc:	2000028c 	.word	0x2000028c

08005e00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e00:	b480      	push	{r7}
 8005e02:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005e04:	4b03      	ldr	r3, [pc, #12]	; (8005e14 <vTaskMissedYield+0x14>)
 8005e06:	2201      	movs	r2, #1
 8005e08:	601a      	str	r2, [r3, #0]
}
 8005e0a:	bf00      	nop
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr
 8005e14:	20000288 	.word	0x20000288

08005e18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005e20:	f000 f852 	bl	8005ec8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e24:	4b06      	ldr	r3, [pc, #24]	; (8005e40 <prvIdleTask+0x28>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d9f9      	bls.n	8005e20 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8005e2c:	4b05      	ldr	r3, [pc, #20]	; (8005e44 <prvIdleTask+0x2c>)
 8005e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e32:	601a      	str	r2, [r3, #0]
 8005e34:	f3bf 8f4f 	dsb	sy
 8005e38:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005e3c:	e7f0      	b.n	8005e20 <prvIdleTask+0x8>
 8005e3e:	bf00      	nop
 8005e40:	200001a0 	.word	0x200001a0
 8005e44:	e000ed04 	.word	0xe000ed04

08005e48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e4e:	2300      	movs	r3, #0
 8005e50:	607b      	str	r3, [r7, #4]
 8005e52:	e00c      	b.n	8005e6e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	4613      	mov	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4413      	add	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4a12      	ldr	r2, [pc, #72]	; (8005ea8 <prvInitialiseTaskLists+0x60>)
 8005e60:	4413      	add	r3, r2
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7fe f95e 	bl	8004124 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	607b      	str	r3, [r7, #4]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2b04      	cmp	r3, #4
 8005e72:	d9ef      	bls.n	8005e54 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005e74:	480d      	ldr	r0, [pc, #52]	; (8005eac <prvInitialiseTaskLists+0x64>)
 8005e76:	f7fe f955 	bl	8004124 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005e7a:	480d      	ldr	r0, [pc, #52]	; (8005eb0 <prvInitialiseTaskLists+0x68>)
 8005e7c:	f7fe f952 	bl	8004124 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005e80:	480c      	ldr	r0, [pc, #48]	; (8005eb4 <prvInitialiseTaskLists+0x6c>)
 8005e82:	f7fe f94f 	bl	8004124 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8005e86:	480c      	ldr	r0, [pc, #48]	; (8005eb8 <prvInitialiseTaskLists+0x70>)
 8005e88:	f7fe f94c 	bl	8004124 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8005e8c:	480b      	ldr	r0, [pc, #44]	; (8005ebc <prvInitialiseTaskLists+0x74>)
 8005e8e:	f7fe f949 	bl	8004124 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005e92:	4b0b      	ldr	r3, [pc, #44]	; (8005ec0 <prvInitialiseTaskLists+0x78>)
 8005e94:	4a05      	ldr	r2, [pc, #20]	; (8005eac <prvInitialiseTaskLists+0x64>)
 8005e96:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e98:	4b0a      	ldr	r3, [pc, #40]	; (8005ec4 <prvInitialiseTaskLists+0x7c>)
 8005e9a:	4a05      	ldr	r2, [pc, #20]	; (8005eb0 <prvInitialiseTaskLists+0x68>)
 8005e9c:	601a      	str	r2, [r3, #0]
}
 8005e9e:	bf00      	nop
 8005ea0:	3708      	adds	r7, #8
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	200001a0 	.word	0x200001a0
 8005eac:	20000204 	.word	0x20000204
 8005eb0:	20000218 	.word	0x20000218
 8005eb4:	20000234 	.word	0x20000234
 8005eb8:	20000248 	.word	0x20000248
 8005ebc:	20000260 	.word	0x20000260
 8005ec0:	2000022c 	.word	0x2000022c
 8005ec4:	20000230 	.word	0x20000230

08005ec8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ece:	e019      	b.n	8005f04 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8005ed0:	f001 f8e2 	bl	8007098 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ed4:	4b10      	ldr	r3, [pc, #64]	; (8005f18 <prvCheckTasksWaitingTermination+0x50>)
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	3304      	adds	r3, #4
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7fe f9a9 	bl	8004238 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8005ee6:	4b0d      	ldr	r3, [pc, #52]	; (8005f1c <prvCheckTasksWaitingTermination+0x54>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	3b01      	subs	r3, #1
 8005eec:	4a0b      	ldr	r2, [pc, #44]	; (8005f1c <prvCheckTasksWaitingTermination+0x54>)
 8005eee:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8005ef0:	4b0b      	ldr	r3, [pc, #44]	; (8005f20 <prvCheckTasksWaitingTermination+0x58>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	4a0a      	ldr	r2, [pc, #40]	; (8005f20 <prvCheckTasksWaitingTermination+0x58>)
 8005ef8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8005efa:	f001 f8fd 	bl	80070f8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f810 	bl	8005f24 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f04:	4b06      	ldr	r3, [pc, #24]	; (8005f20 <prvCheckTasksWaitingTermination+0x58>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1e1      	bne.n	8005ed0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8005f0c:	bf00      	nop
 8005f0e:	bf00      	nop
 8005f10:	3708      	adds	r7, #8
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	20000248 	.word	0x20000248
 8005f1c:	20000274 	.word	0x20000274
 8005f20:	2000025c 	.word	0x2000025c

08005f24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f30:	4618      	mov	r0, r3
 8005f32:	f001 fabb 	bl	80074ac <vPortFree>
                vPortFree( pxTCB );
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f001 fab8 	bl	80074ac <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005f3c:	bf00      	nop
 8005f3e:	3708      	adds	r7, #8
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f44:	b480      	push	{r7}
 8005f46:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f48:	4b0a      	ldr	r3, [pc, #40]	; (8005f74 <prvResetNextTaskUnblockTime+0x30>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d104      	bne.n	8005f5c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005f52:	4b09      	ldr	r3, [pc, #36]	; (8005f78 <prvResetNextTaskUnblockTime+0x34>)
 8005f54:	f04f 32ff 	mov.w	r2, #4294967295
 8005f58:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005f5a:	e005      	b.n	8005f68 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005f5c:	4b05      	ldr	r3, [pc, #20]	; (8005f74 <prvResetNextTaskUnblockTime+0x30>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a04      	ldr	r2, [pc, #16]	; (8005f78 <prvResetNextTaskUnblockTime+0x34>)
 8005f66:	6013      	str	r3, [r2, #0]
}
 8005f68:	bf00      	nop
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	2000022c 	.word	0x2000022c
 8005f78:	20000294 	.word	0x20000294

08005f7c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 8005f82:	4b05      	ldr	r3, [pc, #20]	; (8005f98 <xTaskGetCurrentTaskHandle+0x1c>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	607b      	str	r3, [r7, #4]

        return xReturn;
 8005f88:	687b      	ldr	r3, [r7, #4]
    }
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	2000019c 	.word	0x2000019c

08005f9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005fa2:	4b0b      	ldr	r3, [pc, #44]	; (8005fd0 <xTaskGetSchedulerState+0x34>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d102      	bne.n	8005fb0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005faa:	2301      	movs	r3, #1
 8005fac:	607b      	str	r3, [r7, #4]
 8005fae:	e008      	b.n	8005fc2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fb0:	4b08      	ldr	r3, [pc, #32]	; (8005fd4 <xTaskGetSchedulerState+0x38>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d102      	bne.n	8005fbe <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005fb8:	2302      	movs	r3, #2
 8005fba:	607b      	str	r3, [r7, #4]
 8005fbc:	e001      	b.n	8005fc2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005fc2:	687b      	ldr	r3, [r7, #4]
    }
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr
 8005fd0:	20000280 	.word	0x20000280
 8005fd4:	2000029c 	.word	0x2000029c

08005fd8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b086      	sub	sp, #24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d068      	beq.n	80060c0 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005fee:	4b37      	ldr	r3, [pc, #220]	; (80060cc <xTaskPriorityDisinherit+0xf4>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d00a      	beq.n	800600e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8005ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffc:	f383 8811 	msr	BASEPRI, r3
 8006000:	f3bf 8f6f 	isb	sy
 8006004:	f3bf 8f4f 	dsb	sy
 8006008:	60fb      	str	r3, [r7, #12]
    }
 800600a:	bf00      	nop
 800600c:	e7fe      	b.n	800600c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10a      	bne.n	800602c <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8006016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601a:	f383 8811 	msr	BASEPRI, r3
 800601e:	f3bf 8f6f 	isb	sy
 8006022:	f3bf 8f4f 	dsb	sy
 8006026:	60bb      	str	r3, [r7, #8]
    }
 8006028:	bf00      	nop
 800602a:	e7fe      	b.n	800602a <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006030:	1e5a      	subs	r2, r3, #1
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800603e:	429a      	cmp	r2, r3
 8006040:	d03e      	beq.n	80060c0 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006046:	2b00      	cmp	r3, #0
 8006048:	d13a      	bne.n	80060c0 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	3304      	adds	r3, #4
 800604e:	4618      	mov	r0, r3
 8006050:	f7fe f8f2 	bl	8004238 <uxListRemove>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10a      	bne.n	8006070 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605e:	2201      	movs	r2, #1
 8006060:	fa02 f303 	lsl.w	r3, r2, r3
 8006064:	43da      	mvns	r2, r3
 8006066:	4b1a      	ldr	r3, [pc, #104]	; (80060d0 <xTaskPriorityDisinherit+0xf8>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4013      	ands	r3, r2
 800606c:	4a18      	ldr	r2, [pc, #96]	; (80060d0 <xTaskPriorityDisinherit+0xf8>)
 800606e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4619      	mov	r1, r3
 8006074:	204a      	movs	r0, #74	; 0x4a
 8006076:	f002 f8c3 	bl	8008200 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006086:	f1c3 0205 	rsb	r2, r3, #5
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006092:	2201      	movs	r2, #1
 8006094:	409a      	lsls	r2, r3
 8006096:	4b0e      	ldr	r3, [pc, #56]	; (80060d0 <xTaskPriorityDisinherit+0xf8>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4313      	orrs	r3, r2
 800609c:	4a0c      	ldr	r2, [pc, #48]	; (80060d0 <xTaskPriorityDisinherit+0xf8>)
 800609e:	6013      	str	r3, [r2, #0]
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a4:	4613      	mov	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4413      	add	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4a09      	ldr	r2, [pc, #36]	; (80060d4 <xTaskPriorityDisinherit+0xfc>)
 80060ae:	441a      	add	r2, r3
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	3304      	adds	r3, #4
 80060b4:	4619      	mov	r1, r3
 80060b6:	4610      	mov	r0, r2
 80060b8:	f7fe f861 	bl	800417e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80060bc:	2301      	movs	r3, #1
 80060be:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80060c0:	697b      	ldr	r3, [r7, #20]
    }
 80060c2:	4618      	mov	r0, r3
 80060c4:	3718      	adds	r7, #24
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	2000019c 	.word	0x2000019c
 80060d0:	2000027c 	.word	0x2000027c
 80060d4:	200001a0 	.word	0x200001a0

080060d8 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80060d8:	b580      	push	{r7, lr}
 80060da:	b088      	sub	sp, #32
 80060dc:	af02      	add	r7, sp, #8
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
 80060e4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00a      	beq.n	8006102 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 80060ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f0:	f383 8811 	msr	BASEPRI, r3
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	613b      	str	r3, [r7, #16]
    }
 80060fe:	bf00      	nop
 8006100:	e7fe      	b.n	8006100 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8006102:	f000 ffc9 	bl	8007098 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006106:	4b36      	ldr	r3, [pc, #216]	; (80061e0 <xTaskGenericNotifyWait+0x108>)
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	4413      	add	r3, r2
 800610e:	3354      	adds	r3, #84	; 0x54
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b02      	cmp	r3, #2
 8006116:	d022      	beq.n	800615e <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8006118:	4b31      	ldr	r3, [pc, #196]	; (80061e0 <xTaskGenericNotifyWait+0x108>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	3214      	adds	r2, #20
 8006120:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	43d2      	mvns	r2, r2
 8006128:	4011      	ands	r1, r2
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	3214      	adds	r2, #20
 800612e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8006132:	4b2b      	ldr	r3, [pc, #172]	; (80061e0 <xTaskGenericNotifyWait+0x108>)
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	4413      	add	r3, r2
 800613a:	3354      	adds	r3, #84	; 0x54
 800613c:	2201      	movs	r2, #1
 800613e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8006140:	6a3b      	ldr	r3, [r7, #32]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00b      	beq.n	800615e <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006146:	2101      	movs	r1, #1
 8006148:	6a38      	ldr	r0, [r7, #32]
 800614a:	f000 fa8f 	bl	800666c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800614e:	4b25      	ldr	r3, [pc, #148]	; (80061e4 <xTaskGenericNotifyWait+0x10c>)
 8006150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006154:	601a      	str	r2, [r3, #0]
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800615e:	f000 ffcb 	bl	80070f8 <vPortExitCritical>

        taskENTER_CRITICAL();
 8006162:	f000 ff99 	bl	8007098 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8006166:	683a      	ldr	r2, [r7, #0]
 8006168:	6a3b      	ldr	r3, [r7, #32]
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	4613      	mov	r3, r2
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	68b9      	ldr	r1, [r7, #8]
 8006172:	2040      	movs	r0, #64	; 0x40
 8006174:	f002 f950 	bl	8008418 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d007      	beq.n	800618e <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800617e:	4b18      	ldr	r3, [pc, #96]	; (80061e0 <xTaskGenericNotifyWait+0x108>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	3214      	adds	r2, #20
 8006186:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800618e:	4b14      	ldr	r3, [pc, #80]	; (80061e0 <xTaskGenericNotifyWait+0x108>)
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	4413      	add	r3, r2
 8006196:	3354      	adds	r3, #84	; 0x54
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b02      	cmp	r3, #2
 800619e:	d002      	beq.n	80061a6 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80061a0:	2300      	movs	r3, #0
 80061a2:	617b      	str	r3, [r7, #20]
 80061a4:	e00e      	b.n	80061c4 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80061a6:	4b0e      	ldr	r3, [pc, #56]	; (80061e0 <xTaskGenericNotifyWait+0x108>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	3214      	adds	r2, #20
 80061ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	43d2      	mvns	r2, r2
 80061b6:	4011      	ands	r1, r2
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	3214      	adds	r2, #20
 80061bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80061c0:	2301      	movs	r3, #1
 80061c2:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80061c4:	4b06      	ldr	r3, [pc, #24]	; (80061e0 <xTaskGenericNotifyWait+0x108>)
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	4413      	add	r3, r2
 80061cc:	3354      	adds	r3, #84	; 0x54
 80061ce:	2200      	movs	r2, #0
 80061d0:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80061d2:	f000 ff91 	bl	80070f8 <vPortExitCritical>

        return xReturn;
 80061d6:	697b      	ldr	r3, [r7, #20]
    }
 80061d8:	4618      	mov	r0, r3
 80061da:	3718      	adds	r7, #24
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	2000019c 	.word	0x2000019c
 80061e4:	e000ed04 	.word	0xe000ed04

080061e8 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b08e      	sub	sp, #56	; 0x38
 80061ec:	af02      	add	r7, sp, #8
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
 80061f4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80061f6:	2301      	movs	r3, #1
 80061f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00a      	beq.n	8006216 <xTaskGenericNotify+0x2e>
        __asm volatile
 8006200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006204:	f383 8811 	msr	BASEPRI, r3
 8006208:	f3bf 8f6f 	isb	sy
 800620c:	f3bf 8f4f 	dsb	sy
 8006210:	623b      	str	r3, [r7, #32]
    }
 8006212:	bf00      	nop
 8006214:	e7fe      	b.n	8006214 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10a      	bne.n	8006232 <xTaskGenericNotify+0x4a>
        __asm volatile
 800621c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006220:	f383 8811 	msr	BASEPRI, r3
 8006224:	f3bf 8f6f 	isb	sy
 8006228:	f3bf 8f4f 	dsb	sy
 800622c:	61fb      	str	r3, [r7, #28]
    }
 800622e:	bf00      	nop
 8006230:	e7fe      	b.n	8006230 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8006236:	f000 ff2f 	bl	8007098 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800623a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800623c:	2b00      	cmp	r3, #0
 800623e:	d006      	beq.n	800624e <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006242:	68ba      	ldr	r2, [r7, #8]
 8006244:	3214      	adds	r2, #20
 8006246:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800624a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800624e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	4413      	add	r3, r2
 8006254:	3354      	adds	r3, #84	; 0x54
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800625c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	4413      	add	r3, r2
 8006262:	3354      	adds	r3, #84	; 0x54
 8006264:	2202      	movs	r2, #2
 8006266:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006268:	78fb      	ldrb	r3, [r7, #3]
 800626a:	2b04      	cmp	r3, #4
 800626c:	d83b      	bhi.n	80062e6 <xTaskGenericNotify+0xfe>
 800626e:	a201      	add	r2, pc, #4	; (adr r2, 8006274 <xTaskGenericNotify+0x8c>)
 8006270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006274:	08006305 	.word	0x08006305
 8006278:	08006289 	.word	0x08006289
 800627c:	080062a5 	.word	0x080062a5
 8006280:	080062bd 	.word	0x080062bd
 8006284:	080062cb 	.word	0x080062cb
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	3214      	adds	r2, #20
 800628e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	ea42 0103 	orr.w	r1, r2, r3
 8006298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	3214      	adds	r2, #20
 800629e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80062a2:	e032      	b.n	800630a <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80062a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a6:	68ba      	ldr	r2, [r7, #8]
 80062a8:	3214      	adds	r2, #20
 80062aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ae:	1c59      	adds	r1, r3, #1
 80062b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	3214      	adds	r2, #20
 80062b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80062ba:	e026      	b.n	800630a <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80062bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	3214      	adds	r2, #20
 80062c2:	6879      	ldr	r1, [r7, #4]
 80062c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80062c8:	e01f      	b.n	800630a <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80062ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d006      	beq.n	80062e0 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80062d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d4:	68ba      	ldr	r2, [r7, #8]
 80062d6:	3214      	adds	r2, #20
 80062d8:	6879      	ldr	r1, [r7, #4]
 80062da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80062de:	e014      	b.n	800630a <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 80062e0:	2300      	movs	r3, #0
 80062e2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 80062e4:	e011      	b.n	800630a <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80062e6:	4b34      	ldr	r3, [pc, #208]	; (80063b8 <xTaskGenericNotify+0x1d0>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00c      	beq.n	8006308 <xTaskGenericNotify+0x120>
        __asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	61bb      	str	r3, [r7, #24]
    }
 8006300:	bf00      	nop
 8006302:	e7fe      	b.n	8006302 <xTaskGenericNotify+0x11a>
                    break;
 8006304:	bf00      	nop
 8006306:	e000      	b.n	800630a <xTaskGenericNotify+0x122>

                    break;
 8006308:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 800630a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630c:	4618      	mov	r0, r3
 800630e:	f002 fe47 	bl	8008fa0 <SEGGER_SYSVIEW_ShrinkId>
 8006312:	4601      	mov	r1, r0
 8006314:	78fa      	ldrb	r2, [r7, #3]
 8006316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	4613      	mov	r3, r2
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	203e      	movs	r0, #62	; 0x3e
 8006320:	f002 f87a 	bl	8008418 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006328:	2b01      	cmp	r3, #1
 800632a:	d13d      	bne.n	80063a8 <xTaskGenericNotify+0x1c0>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800632c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632e:	3304      	adds	r3, #4
 8006330:	4618      	mov	r0, r3
 8006332:	f7fd ff81 	bl	8004238 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8006336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006338:	4618      	mov	r0, r3
 800633a:	f002 fd8f 	bl	8008e5c <SEGGER_SYSVIEW_OnTaskStartReady>
 800633e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006342:	2201      	movs	r2, #1
 8006344:	409a      	lsls	r2, r3
 8006346:	4b1d      	ldr	r3, [pc, #116]	; (80063bc <xTaskGenericNotify+0x1d4>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4313      	orrs	r3, r2
 800634c:	4a1b      	ldr	r2, [pc, #108]	; (80063bc <xTaskGenericNotify+0x1d4>)
 800634e:	6013      	str	r3, [r2, #0]
 8006350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006354:	4613      	mov	r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	4a18      	ldr	r2, [pc, #96]	; (80063c0 <xTaskGenericNotify+0x1d8>)
 800635e:	441a      	add	r2, r3
 8006360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006362:	3304      	adds	r3, #4
 8006364:	4619      	mov	r1, r3
 8006366:	4610      	mov	r0, r2
 8006368:	f7fd ff09 	bl	800417e <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800636c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00a      	beq.n	800638a <xTaskGenericNotify+0x1a2>
        __asm volatile
 8006374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006378:	f383 8811 	msr	BASEPRI, r3
 800637c:	f3bf 8f6f 	isb	sy
 8006380:	f3bf 8f4f 	dsb	sy
 8006384:	617b      	str	r3, [r7, #20]
    }
 8006386:	bf00      	nop
 8006388:	e7fe      	b.n	8006388 <xTaskGenericNotify+0x1a0>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800638a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800638e:	4b0d      	ldr	r3, [pc, #52]	; (80063c4 <xTaskGenericNotify+0x1dc>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006394:	429a      	cmp	r2, r3
 8006396:	d907      	bls.n	80063a8 <xTaskGenericNotify+0x1c0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8006398:	4b0b      	ldr	r3, [pc, #44]	; (80063c8 <xTaskGenericNotify+0x1e0>)
 800639a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800639e:	601a      	str	r2, [r3, #0]
 80063a0:	f3bf 8f4f 	dsb	sy
 80063a4:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80063a8:	f000 fea6 	bl	80070f8 <vPortExitCritical>

        return xReturn;
 80063ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80063ae:	4618      	mov	r0, r3
 80063b0:	3730      	adds	r7, #48	; 0x30
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	20000278 	.word	0x20000278
 80063bc:	2000027c 	.word	0x2000027c
 80063c0:	200001a0 	.word	0x200001a0
 80063c4:	2000019c 	.word	0x2000019c
 80063c8:	e000ed04 	.word	0xe000ed04

080063cc <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b092      	sub	sp, #72	; 0x48
 80063d0:	af02      	add	r7, sp, #8
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
 80063d8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80063da:	2301      	movs	r3, #1
 80063dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10a      	bne.n	80063fa <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 80063e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e8:	f383 8811 	msr	BASEPRI, r3
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 80063f6:	bf00      	nop
 80063f8:	e7fe      	b.n	80063f8 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00a      	beq.n	8006416 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8006400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006404:	f383 8811 	msr	BASEPRI, r3
 8006408:	f3bf 8f6f 	isb	sy
 800640c:	f3bf 8f4f 	dsb	sy
 8006410:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8006412:	bf00      	nop
 8006414:	e7fe      	b.n	8006414 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006416:	f000 ff29 	bl	800726c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 800641e:	f3ef 8211 	mrs	r2, BASEPRI
 8006422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006426:	f383 8811 	msr	BASEPRI, r3
 800642a:	f3bf 8f6f 	isb	sy
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	627a      	str	r2, [r7, #36]	; 0x24
 8006434:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8006436:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006438:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 800643a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800643c:	2b00      	cmp	r3, #0
 800643e:	d006      	beq.n	800644e <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006442:	68ba      	ldr	r2, [r7, #8]
 8006444:	3214      	adds	r2, #20
 8006446:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800644a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800644c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800644e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	4413      	add	r3, r2
 8006454:	3354      	adds	r3, #84	; 0x54
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800645c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	4413      	add	r3, r2
 8006462:	3354      	adds	r3, #84	; 0x54
 8006464:	2202      	movs	r2, #2
 8006466:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006468:	78fb      	ldrb	r3, [r7, #3]
 800646a:	2b04      	cmp	r3, #4
 800646c:	d83b      	bhi.n	80064e6 <xTaskGenericNotifyFromISR+0x11a>
 800646e:	a201      	add	r2, pc, #4	; (adr r2, 8006474 <xTaskGenericNotifyFromISR+0xa8>)
 8006470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006474:	08006505 	.word	0x08006505
 8006478:	08006489 	.word	0x08006489
 800647c:	080064a5 	.word	0x080064a5
 8006480:	080064bd 	.word	0x080064bd
 8006484:	080064cb 	.word	0x080064cb
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	3214      	adds	r2, #20
 800648e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	ea42 0103 	orr.w	r1, r2, r3
 8006498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649a:	68ba      	ldr	r2, [r7, #8]
 800649c:	3214      	adds	r2, #20
 800649e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80064a2:	e032      	b.n	800650a <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80064a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a6:	68ba      	ldr	r2, [r7, #8]
 80064a8:	3214      	adds	r2, #20
 80064aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ae:	1c59      	adds	r1, r3, #1
 80064b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	3214      	adds	r2, #20
 80064b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80064ba:	e026      	b.n	800650a <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80064bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064be:	68ba      	ldr	r2, [r7, #8]
 80064c0:	3214      	adds	r2, #20
 80064c2:	6879      	ldr	r1, [r7, #4]
 80064c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80064c8:	e01f      	b.n	800650a <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80064ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d006      	beq.n	80064e0 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80064d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	3214      	adds	r2, #20
 80064d8:	6879      	ldr	r1, [r7, #4]
 80064da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80064de:	e014      	b.n	800650a <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 80064e0:	2300      	movs	r3, #0
 80064e2:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 80064e4:	e011      	b.n	800650a <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80064e6:	4b3d      	ldr	r3, [pc, #244]	; (80065dc <xTaskGenericNotifyFromISR+0x210>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00c      	beq.n	8006508 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 80064ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f2:	f383 8811 	msr	BASEPRI, r3
 80064f6:	f3bf 8f6f 	isb	sy
 80064fa:	f3bf 8f4f 	dsb	sy
 80064fe:	61fb      	str	r3, [r7, #28]
    }
 8006500:	bf00      	nop
 8006502:	e7fe      	b.n	8006502 <xTaskGenericNotifyFromISR+0x136>
                    break;
 8006504:	bf00      	nop
 8006506:	e000      	b.n	800650a <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8006508:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 800650a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650c:	4618      	mov	r0, r3
 800650e:	f002 fd47 	bl	8008fa0 <SEGGER_SYSVIEW_ShrinkId>
 8006512:	78f9      	ldrb	r1, [r7, #3]
 8006514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006516:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006518:	9201      	str	r2, [sp, #4]
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	460b      	mov	r3, r1
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	4601      	mov	r1, r0
 8006522:	203f      	movs	r0, #63	; 0x3f
 8006524:	f002 f80a 	bl	800853c <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006528:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800652c:	2b01      	cmp	r3, #1
 800652e:	d149      	bne.n	80065c4 <xTaskGenericNotifyFromISR+0x1f8>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00a      	beq.n	800654e <xTaskGenericNotifyFromISR+0x182>
        __asm volatile
 8006538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653c:	f383 8811 	msr	BASEPRI, r3
 8006540:	f3bf 8f6f 	isb	sy
 8006544:	f3bf 8f4f 	dsb	sy
 8006548:	61bb      	str	r3, [r7, #24]
    }
 800654a:	bf00      	nop
 800654c:	e7fe      	b.n	800654c <xTaskGenericNotifyFromISR+0x180>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800654e:	4b24      	ldr	r3, [pc, #144]	; (80065e0 <xTaskGenericNotifyFromISR+0x214>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d120      	bne.n	8006598 <xTaskGenericNotifyFromISR+0x1cc>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006558:	3304      	adds	r3, #4
 800655a:	4618      	mov	r0, r3
 800655c:	f7fd fe6c 	bl	8004238 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8006560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006562:	4618      	mov	r0, r3
 8006564:	f002 fc7a 	bl	8008e5c <SEGGER_SYSVIEW_OnTaskStartReady>
 8006568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800656a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656c:	2201      	movs	r2, #1
 800656e:	409a      	lsls	r2, r3
 8006570:	4b1c      	ldr	r3, [pc, #112]	; (80065e4 <xTaskGenericNotifyFromISR+0x218>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4313      	orrs	r3, r2
 8006576:	4a1b      	ldr	r2, [pc, #108]	; (80065e4 <xTaskGenericNotifyFromISR+0x218>)
 8006578:	6013      	str	r3, [r2, #0]
 800657a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800657c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800657e:	4613      	mov	r3, r2
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	4413      	add	r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	4a18      	ldr	r2, [pc, #96]	; (80065e8 <xTaskGenericNotifyFromISR+0x21c>)
 8006588:	441a      	add	r2, r3
 800658a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658c:	3304      	adds	r3, #4
 800658e:	4619      	mov	r1, r3
 8006590:	4610      	mov	r0, r2
 8006592:	f7fd fdf4 	bl	800417e <vListInsertEnd>
 8006596:	e005      	b.n	80065a4 <xTaskGenericNotifyFromISR+0x1d8>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659a:	3318      	adds	r3, #24
 800659c:	4619      	mov	r1, r3
 800659e:	4813      	ldr	r0, [pc, #76]	; (80065ec <xTaskGenericNotifyFromISR+0x220>)
 80065a0:	f7fd fded 	bl	800417e <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80065a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a8:	4b11      	ldr	r3, [pc, #68]	; (80065f0 <xTaskGenericNotifyFromISR+0x224>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d908      	bls.n	80065c4 <xTaskGenericNotifyFromISR+0x1f8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 80065b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d002      	beq.n	80065be <xTaskGenericNotifyFromISR+0x1f2>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 80065b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ba:	2201      	movs	r2, #1
 80065bc:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 80065be:	4b0d      	ldr	r3, [pc, #52]	; (80065f4 <xTaskGenericNotifyFromISR+0x228>)
 80065c0:	2201      	movs	r2, #1
 80065c2:	601a      	str	r2, [r3, #0]
 80065c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c6:	617b      	str	r3, [r7, #20]
        __asm volatile
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	f383 8811 	msr	BASEPRI, r3
    }
 80065ce:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80065d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 80065d2:	4618      	mov	r0, r3
 80065d4:	3740      	adds	r7, #64	; 0x40
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	20000278 	.word	0x20000278
 80065e0:	2000029c 	.word	0x2000029c
 80065e4:	2000027c 	.word	0x2000027c
 80065e8:	200001a0 	.word	0x200001a0
 80065ec:	20000234 	.word	0x20000234
 80065f0:	2000019c 	.word	0x2000019c
 80065f4:	20000288 	.word	0x20000288

080065f8 <xTaskGenericNotifyStateClear>:

#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    BaseType_t xTaskGenericNotifyStateClear( TaskHandle_t xTask,
                                             UBaseType_t uxIndexToClear )
    {
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b086      	sub	sp, #24
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        BaseType_t xReturn;

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00a      	beq.n	800661e <xTaskGenericNotifyStateClear+0x26>
        __asm volatile
 8006608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660c:	f383 8811 	msr	BASEPRI, r3
 8006610:	f3bf 8f6f 	isb	sy
 8006614:	f3bf 8f4f 	dsb	sy
 8006618:	60fb      	str	r3, [r7, #12]
    }
 800661a:	bf00      	nop
 800661c:	e7fe      	b.n	800661c <xTaskGenericNotifyStateClear+0x24>

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d102      	bne.n	800662a <xTaskGenericNotifyStateClear+0x32>
 8006624:	4b10      	ldr	r3, [pc, #64]	; (8006668 <xTaskGenericNotifyStateClear+0x70>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	e000      	b.n	800662c <xTaskGenericNotifyStateClear+0x34>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	613b      	str	r3, [r7, #16]

        taskENTER_CRITICAL();
 800662e:	f000 fd33 	bl	8007098 <vPortEnterCritical>
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	4413      	add	r3, r2
 8006638:	3354      	adds	r3, #84	; 0x54
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b02      	cmp	r3, #2
 8006640:	d108      	bne.n	8006654 <xTaskGenericNotifyStateClear+0x5c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
 8006642:	693a      	ldr	r2, [r7, #16]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	4413      	add	r3, r2
 8006648:	3354      	adds	r3, #84	; 0x54
 800664a:	2200      	movs	r2, #0
 800664c:	701a      	strb	r2, [r3, #0]
                xReturn = pdPASS;
 800664e:	2301      	movs	r3, #1
 8006650:	617b      	str	r3, [r7, #20]
 8006652:	e001      	b.n	8006658 <xTaskGenericNotifyStateClear+0x60>
            }
            else
            {
                xReturn = pdFAIL;
 8006654:	2300      	movs	r3, #0
 8006656:	617b      	str	r3, [r7, #20]
            }
        }
        taskEXIT_CRITICAL();
 8006658:	f000 fd4e 	bl	80070f8 <vPortExitCritical>

        return xReturn;
 800665c:	697b      	ldr	r3, [r7, #20]
    }
 800665e:	4618      	mov	r0, r3
 8006660:	3718      	adds	r7, #24
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	2000019c 	.word	0x2000019c

0800666c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006676:	4b32      	ldr	r3, [pc, #200]	; (8006740 <prvAddCurrentTaskToDelayedList+0xd4>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800667c:	4b31      	ldr	r3, [pc, #196]	; (8006744 <prvAddCurrentTaskToDelayedList+0xd8>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	3304      	adds	r3, #4
 8006682:	4618      	mov	r0, r3
 8006684:	f7fd fdd8 	bl	8004238 <uxListRemove>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10b      	bne.n	80066a6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800668e:	4b2d      	ldr	r3, [pc, #180]	; (8006744 <prvAddCurrentTaskToDelayedList+0xd8>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006694:	2201      	movs	r2, #1
 8006696:	fa02 f303 	lsl.w	r3, r2, r3
 800669a:	43da      	mvns	r2, r3
 800669c:	4b2a      	ldr	r3, [pc, #168]	; (8006748 <prvAddCurrentTaskToDelayedList+0xdc>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4013      	ands	r3, r2
 80066a2:	4a29      	ldr	r2, [pc, #164]	; (8006748 <prvAddCurrentTaskToDelayedList+0xdc>)
 80066a4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ac:	d110      	bne.n	80066d0 <prvAddCurrentTaskToDelayedList+0x64>
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00d      	beq.n	80066d0 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80066b4:	4b23      	ldr	r3, [pc, #140]	; (8006744 <prvAddCurrentTaskToDelayedList+0xd8>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	211b      	movs	r1, #27
 80066ba:	4618      	mov	r0, r3
 80066bc:	f002 fc10 	bl	8008ee0 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066c0:	4b20      	ldr	r3, [pc, #128]	; (8006744 <prvAddCurrentTaskToDelayedList+0xd8>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3304      	adds	r3, #4
 80066c6:	4619      	mov	r1, r3
 80066c8:	4820      	ldr	r0, [pc, #128]	; (800674c <prvAddCurrentTaskToDelayedList+0xe0>)
 80066ca:	f7fd fd58 	bl	800417e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80066ce:	e032      	b.n	8006736 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4413      	add	r3, r2
 80066d6:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80066d8:	4b1a      	ldr	r3, [pc, #104]	; (8006744 <prvAddCurrentTaskToDelayedList+0xd8>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80066e0:	68ba      	ldr	r2, [r7, #8]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d20f      	bcs.n	8006708 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80066e8:	4b16      	ldr	r3, [pc, #88]	; (8006744 <prvAddCurrentTaskToDelayedList+0xd8>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2104      	movs	r1, #4
 80066ee:	4618      	mov	r0, r3
 80066f0:	f002 fbf6 	bl	8008ee0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066f4:	4b16      	ldr	r3, [pc, #88]	; (8006750 <prvAddCurrentTaskToDelayedList+0xe4>)
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	4b12      	ldr	r3, [pc, #72]	; (8006744 <prvAddCurrentTaskToDelayedList+0xd8>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	3304      	adds	r3, #4
 80066fe:	4619      	mov	r1, r3
 8006700:	4610      	mov	r0, r2
 8006702:	f7fd fd60 	bl	80041c6 <vListInsert>
}
 8006706:	e016      	b.n	8006736 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8006708:	4b0e      	ldr	r3, [pc, #56]	; (8006744 <prvAddCurrentTaskToDelayedList+0xd8>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2104      	movs	r1, #4
 800670e:	4618      	mov	r0, r3
 8006710:	f002 fbe6 	bl	8008ee0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006714:	4b0f      	ldr	r3, [pc, #60]	; (8006754 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	4b0a      	ldr	r3, [pc, #40]	; (8006744 <prvAddCurrentTaskToDelayedList+0xd8>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	3304      	adds	r3, #4
 800671e:	4619      	mov	r1, r3
 8006720:	4610      	mov	r0, r2
 8006722:	f7fd fd50 	bl	80041c6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8006726:	4b0c      	ldr	r3, [pc, #48]	; (8006758 <prvAddCurrentTaskToDelayedList+0xec>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68ba      	ldr	r2, [r7, #8]
 800672c:	429a      	cmp	r2, r3
 800672e:	d202      	bcs.n	8006736 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8006730:	4a09      	ldr	r2, [pc, #36]	; (8006758 <prvAddCurrentTaskToDelayedList+0xec>)
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	6013      	str	r3, [r2, #0]
}
 8006736:	bf00      	nop
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	20000278 	.word	0x20000278
 8006744:	2000019c 	.word	0x2000019c
 8006748:	2000027c 	.word	0x2000027c
 800674c:	20000260 	.word	0x20000260
 8006750:	20000230 	.word	0x20000230
 8006754:	2000022c 	.word	0x2000022c
 8006758:	20000294 	.word	0x20000294

0800675c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8006762:	2300      	movs	r3, #0
 8006764:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8006766:	f000 fb31 	bl	8006dcc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800676a:	4b11      	ldr	r3, [pc, #68]	; (80067b0 <xTimerCreateTimerTask+0x54>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00b      	beq.n	800678a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8006772:	4b10      	ldr	r3, [pc, #64]	; (80067b4 <xTimerCreateTimerTask+0x58>)
 8006774:	9301      	str	r3, [sp, #4]
 8006776:	2302      	movs	r3, #2
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	2300      	movs	r3, #0
 800677c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006780:	490d      	ldr	r1, [pc, #52]	; (80067b8 <xTimerCreateTimerTask+0x5c>)
 8006782:	480e      	ldr	r0, [pc, #56]	; (80067bc <xTimerCreateTimerTask+0x60>)
 8006784:	f7fe fe4c 	bl	8005420 <xTaskCreate>
 8006788:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10a      	bne.n	80067a6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8006790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006794:	f383 8811 	msr	BASEPRI, r3
 8006798:	f3bf 8f6f 	isb	sy
 800679c:	f3bf 8f4f 	dsb	sy
 80067a0:	603b      	str	r3, [r7, #0]
    }
 80067a2:	bf00      	nop
 80067a4:	e7fe      	b.n	80067a4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80067a6:	687b      	ldr	r3, [r7, #4]
    }
 80067a8:	4618      	mov	r0, r3
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	200002d0 	.word	0x200002d0
 80067b4:	200002d4 	.word	0x200002d4
 80067b8:	08009870 	.word	0x08009870
 80067bc:	080069ad 	.word	0x080069ad

080067c0 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b088      	sub	sp, #32
 80067c4:	af02      	add	r7, sp, #8
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	607a      	str	r2, [r7, #4]
 80067cc:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80067ce:	202c      	movs	r0, #44	; 0x2c
 80067d0:	f000 fd8c 	bl	80072ec <pvPortMalloc>
 80067d4:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00d      	beq.n	80067f8 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	9301      	str	r3, [sp, #4]
 80067e8:	6a3b      	ldr	r3, [r7, #32]
 80067ea:	9300      	str	r3, [sp, #0]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	68b9      	ldr	r1, [r7, #8]
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f000 f805 	bl	8006802 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 80067f8:	697b      	ldr	r3, [r7, #20]
        }
 80067fa:	4618      	mov	r0, r3
 80067fc:	3718      	adds	r7, #24
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8006802:	b580      	push	{r7, lr}
 8006804:	b086      	sub	sp, #24
 8006806:	af00      	add	r7, sp, #0
 8006808:	60f8      	str	r0, [r7, #12]
 800680a:	60b9      	str	r1, [r7, #8]
 800680c:	607a      	str	r2, [r7, #4]
 800680e:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10a      	bne.n	800682c <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8006816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681a:	f383 8811 	msr	BASEPRI, r3
 800681e:	f3bf 8f6f 	isb	sy
 8006822:	f3bf 8f4f 	dsb	sy
 8006826:	617b      	str	r3, [r7, #20]
    }
 8006828:	bf00      	nop
 800682a:	e7fe      	b.n	800682a <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 800682c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682e:	2b00      	cmp	r3, #0
 8006830:	d01e      	beq.n	8006870 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8006832:	f000 facb 	bl	8006dcc <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8006836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800683c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683e:	68ba      	ldr	r2, [r7, #8]
 8006840:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8006842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006844:	683a      	ldr	r2, [r7, #0]
 8006846:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684a:	6a3a      	ldr	r2, [r7, #32]
 800684c:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800684e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006850:	3304      	adds	r3, #4
 8006852:	4618      	mov	r0, r3
 8006854:	f7fd fc86 	bl	8004164 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d008      	beq.n	8006870 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006860:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006864:	f043 0304 	orr.w	r3, r3, #4
 8006868:	b2da      	uxtb	r2, r3
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8006870:	bf00      	nop
 8006872:	3718      	adds	r7, #24
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8006878:	b580      	push	{r7, lr}
 800687a:	b08a      	sub	sp, #40	; 0x28
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
 8006884:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8006886:	2300      	movs	r3, #0
 8006888:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10a      	bne.n	80068a6 <xTimerGenericCommand+0x2e>
        __asm volatile
 8006890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006894:	f383 8811 	msr	BASEPRI, r3
 8006898:	f3bf 8f6f 	isb	sy
 800689c:	f3bf 8f4f 	dsb	sy
 80068a0:	623b      	str	r3, [r7, #32]
    }
 80068a2:	bf00      	nop
 80068a4:	e7fe      	b.n	80068a4 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80068a6:	4b1a      	ldr	r3, [pc, #104]	; (8006910 <xTimerGenericCommand+0x98>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d02a      	beq.n	8006904 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	2b05      	cmp	r3, #5
 80068be:	dc18      	bgt.n	80068f2 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80068c0:	f7ff fb6c 	bl	8005f9c <xTaskGetSchedulerState>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d109      	bne.n	80068de <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80068ca:	4b11      	ldr	r3, [pc, #68]	; (8006910 <xTimerGenericCommand+0x98>)
 80068cc:	6818      	ldr	r0, [r3, #0]
 80068ce:	f107 0114 	add.w	r1, r7, #20
 80068d2:	2300      	movs	r3, #0
 80068d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068d6:	f7fd fdc9 	bl	800446c <xQueueGenericSend>
 80068da:	6278      	str	r0, [r7, #36]	; 0x24
 80068dc:	e012      	b.n	8006904 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80068de:	4b0c      	ldr	r3, [pc, #48]	; (8006910 <xTimerGenericCommand+0x98>)
 80068e0:	6818      	ldr	r0, [r3, #0]
 80068e2:	f107 0114 	add.w	r1, r7, #20
 80068e6:	2300      	movs	r3, #0
 80068e8:	2200      	movs	r2, #0
 80068ea:	f7fd fdbf 	bl	800446c <xQueueGenericSend>
 80068ee:	6278      	str	r0, [r7, #36]	; 0x24
 80068f0:	e008      	b.n	8006904 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80068f2:	4b07      	ldr	r3, [pc, #28]	; (8006910 <xTimerGenericCommand+0x98>)
 80068f4:	6818      	ldr	r0, [r3, #0]
 80068f6:	f107 0114 	add.w	r1, r7, #20
 80068fa:	2300      	movs	r3, #0
 80068fc:	683a      	ldr	r2, [r7, #0]
 80068fe:	f7fd fedb 	bl	80046b8 <xQueueGenericSendFromISR>
 8006902:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006906:	4618      	mov	r0, r3
 8006908:	3728      	adds	r7, #40	; 0x28
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	200002d0 	.word	0x200002d0

08006914 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006914:	b580      	push	{r7, lr}
 8006916:	b088      	sub	sp, #32
 8006918:	af02      	add	r7, sp, #8
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800691e:	4b22      	ldr	r3, [pc, #136]	; (80069a8 <prvProcessExpiredTimer+0x94>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	3304      	adds	r3, #4
 800692c:	4618      	mov	r0, r3
 800692e:	f7fd fc83 	bl	8004238 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006938:	f003 0304 	and.w	r3, r3, #4
 800693c:	2b00      	cmp	r3, #0
 800693e:	d022      	beq.n	8006986 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	699a      	ldr	r2, [r3, #24]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	18d1      	adds	r1, r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	683a      	ldr	r2, [r7, #0]
 800694c:	6978      	ldr	r0, [r7, #20]
 800694e:	f000 f8d1 	bl	8006af4 <prvInsertTimerInActiveList>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d01f      	beq.n	8006998 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006958:	2300      	movs	r3, #0
 800695a:	9300      	str	r3, [sp, #0]
 800695c:	2300      	movs	r3, #0
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	2100      	movs	r1, #0
 8006962:	6978      	ldr	r0, [r7, #20]
 8006964:	f7ff ff88 	bl	8006878 <xTimerGenericCommand>
 8006968:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d113      	bne.n	8006998 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8006970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006974:	f383 8811 	msr	BASEPRI, r3
 8006978:	f3bf 8f6f 	isb	sy
 800697c:	f3bf 8f4f 	dsb	sy
 8006980:	60fb      	str	r3, [r7, #12]
    }
 8006982:	bf00      	nop
 8006984:	e7fe      	b.n	8006984 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800698c:	f023 0301 	bic.w	r3, r3, #1
 8006990:	b2da      	uxtb	r2, r3
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	6a1b      	ldr	r3, [r3, #32]
 800699c:	6978      	ldr	r0, [r7, #20]
 800699e:	4798      	blx	r3
    }
 80069a0:	bf00      	nop
 80069a2:	3718      	adds	r7, #24
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	200002c8 	.word	0x200002c8

080069ac <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069b4:	f107 0308 	add.w	r3, r7, #8
 80069b8:	4618      	mov	r0, r3
 80069ba:	f000 f857 	bl	8006a6c <prvGetNextExpireTime>
 80069be:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	4619      	mov	r1, r3
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f000 f803 	bl	80069d0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80069ca:	f000 f8d5 	bl	8006b78 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069ce:	e7f1      	b.n	80069b4 <prvTimerTask+0x8>

080069d0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80069da:	f7fe fee7 	bl	80057ac <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069de:	f107 0308 	add.w	r3, r7, #8
 80069e2:	4618      	mov	r0, r3
 80069e4:	f000 f866 	bl	8006ab4 <prvSampleTimeNow>
 80069e8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d130      	bne.n	8006a52 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10a      	bne.n	8006a0c <prvProcessTimerOrBlockTask+0x3c>
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d806      	bhi.n	8006a0c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80069fe:	f7fe fee3 	bl	80057c8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a02:	68f9      	ldr	r1, [r7, #12]
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f7ff ff85 	bl	8006914 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006a0a:	e024      	b.n	8006a56 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d008      	beq.n	8006a24 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006a12:	4b13      	ldr	r3, [pc, #76]	; (8006a60 <prvProcessTimerOrBlockTask+0x90>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d101      	bne.n	8006a20 <prvProcessTimerOrBlockTask+0x50>
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e000      	b.n	8006a22 <prvProcessTimerOrBlockTask+0x52>
 8006a20:	2300      	movs	r3, #0
 8006a22:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006a24:	4b0f      	ldr	r3, [pc, #60]	; (8006a64 <prvProcessTimerOrBlockTask+0x94>)
 8006a26:	6818      	ldr	r0, [r3, #0]
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	683a      	ldr	r2, [r7, #0]
 8006a30:	4619      	mov	r1, r3
 8006a32:	f7fe f951 	bl	8004cd8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006a36:	f7fe fec7 	bl	80057c8 <xTaskResumeAll>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10a      	bne.n	8006a56 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006a40:	4b09      	ldr	r3, [pc, #36]	; (8006a68 <prvProcessTimerOrBlockTask+0x98>)
 8006a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a46:	601a      	str	r2, [r3, #0]
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	f3bf 8f6f 	isb	sy
    }
 8006a50:	e001      	b.n	8006a56 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006a52:	f7fe feb9 	bl	80057c8 <xTaskResumeAll>
    }
 8006a56:	bf00      	nop
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	200002cc 	.word	0x200002cc
 8006a64:	200002d0 	.word	0x200002d0
 8006a68:	e000ed04 	.word	0xe000ed04

08006a6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006a74:	4b0e      	ldr	r3, [pc, #56]	; (8006ab0 <prvGetNextExpireTime+0x44>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d101      	bne.n	8006a82 <prvGetNextExpireTime+0x16>
 8006a7e:	2201      	movs	r2, #1
 8006a80:	e000      	b.n	8006a84 <prvGetNextExpireTime+0x18>
 8006a82:	2200      	movs	r2, #0
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d105      	bne.n	8006a9c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a90:	4b07      	ldr	r3, [pc, #28]	; (8006ab0 <prvGetNextExpireTime+0x44>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	60fb      	str	r3, [r7, #12]
 8006a9a:	e001      	b.n	8006aa0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
    }
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	200002c8 	.word	0x200002c8

08006ab4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006abc:	f7fe ff24 	bl	8005908 <xTaskGetTickCount>
 8006ac0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8006ac2:	4b0b      	ldr	r3, [pc, #44]	; (8006af0 <prvSampleTimeNow+0x3c>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d205      	bcs.n	8006ad8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006acc:	f000 f91a 	bl	8006d04 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	601a      	str	r2, [r3, #0]
 8006ad6:	e002      	b.n	8006ade <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006ade:	4a04      	ldr	r2, [pc, #16]	; (8006af0 <prvSampleTimeNow+0x3c>)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
    }
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3710      	adds	r7, #16
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	200002d8 	.word	0x200002d8

08006af4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b086      	sub	sp, #24
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
 8006b00:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006b02:	2300      	movs	r3, #0
 8006b04:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	68ba      	ldr	r2, [r7, #8]
 8006b0a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d812      	bhi.n	8006b40 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	1ad2      	subs	r2, r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d302      	bcc.n	8006b2e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	617b      	str	r3, [r7, #20]
 8006b2c:	e01b      	b.n	8006b66 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b2e:	4b10      	ldr	r3, [pc, #64]	; (8006b70 <prvInsertTimerInActiveList+0x7c>)
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	3304      	adds	r3, #4
 8006b36:	4619      	mov	r1, r3
 8006b38:	4610      	mov	r0, r2
 8006b3a:	f7fd fb44 	bl	80041c6 <vListInsert>
 8006b3e:	e012      	b.n	8006b66 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d206      	bcs.n	8006b56 <prvInsertTimerInActiveList+0x62>
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d302      	bcc.n	8006b56 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006b50:	2301      	movs	r3, #1
 8006b52:	617b      	str	r3, [r7, #20]
 8006b54:	e007      	b.n	8006b66 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b56:	4b07      	ldr	r3, [pc, #28]	; (8006b74 <prvInsertTimerInActiveList+0x80>)
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	3304      	adds	r3, #4
 8006b5e:	4619      	mov	r1, r3
 8006b60:	4610      	mov	r0, r2
 8006b62:	f7fd fb30 	bl	80041c6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006b66:	697b      	ldr	r3, [r7, #20]
    }
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3718      	adds	r7, #24
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	200002cc 	.word	0x200002cc
 8006b74:	200002c8 	.word	0x200002c8

08006b78 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b08c      	sub	sp, #48	; 0x30
 8006b7c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b7e:	e0ae      	b.n	8006cde <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f2c0 80aa 	blt.w	8006cdc <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8e:	695b      	ldr	r3, [r3, #20]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d004      	beq.n	8006b9e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	3304      	adds	r3, #4
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7fd fb4d 	bl	8004238 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b9e:	1d3b      	adds	r3, r7, #4
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f7ff ff87 	bl	8006ab4 <prvSampleTimeNow>
 8006ba6:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	2b09      	cmp	r3, #9
 8006bac:	f200 8097 	bhi.w	8006cde <prvProcessReceivedCommands+0x166>
 8006bb0:	a201      	add	r2, pc, #4	; (adr r2, 8006bb8 <prvProcessReceivedCommands+0x40>)
 8006bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb6:	bf00      	nop
 8006bb8:	08006be1 	.word	0x08006be1
 8006bbc:	08006be1 	.word	0x08006be1
 8006bc0:	08006be1 	.word	0x08006be1
 8006bc4:	08006c55 	.word	0x08006c55
 8006bc8:	08006c69 	.word	0x08006c69
 8006bcc:	08006cb3 	.word	0x08006cb3
 8006bd0:	08006be1 	.word	0x08006be1
 8006bd4:	08006be1 	.word	0x08006be1
 8006bd8:	08006c55 	.word	0x08006c55
 8006bdc:	08006c69 	.word	0x08006c69
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006be6:	f043 0301 	orr.w	r3, r3, #1
 8006bea:	b2da      	uxtb	r2, r3
 8006bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	18d1      	adds	r1, r2, r3
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6a3a      	ldr	r2, [r7, #32]
 8006bfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c00:	f7ff ff78 	bl	8006af4 <prvInsertTimerInActiveList>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d069      	beq.n	8006cde <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0c:	6a1b      	ldr	r3, [r3, #32]
 8006c0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c10:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c18:	f003 0304 	and.w	r3, r3, #4
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d05e      	beq.n	8006cde <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c24:	699b      	ldr	r3, [r3, #24]
 8006c26:	441a      	add	r2, r3
 8006c28:	2300      	movs	r3, #0
 8006c2a:	9300      	str	r3, [sp, #0]
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	2100      	movs	r1, #0
 8006c30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c32:	f7ff fe21 	bl	8006878 <xTimerGenericCommand>
 8006c36:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d14f      	bne.n	8006cde <prvProcessReceivedCommands+0x166>
        __asm volatile
 8006c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c42:	f383 8811 	msr	BASEPRI, r3
 8006c46:	f3bf 8f6f 	isb	sy
 8006c4a:	f3bf 8f4f 	dsb	sy
 8006c4e:	61bb      	str	r3, [r7, #24]
    }
 8006c50:	bf00      	nop
 8006c52:	e7fe      	b.n	8006c52 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c5a:	f023 0301 	bic.w	r3, r3, #1
 8006c5e:	b2da      	uxtb	r2, r3
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8006c66:	e03a      	b.n	8006cde <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c6e:	f043 0301 	orr.w	r3, r3, #1
 8006c72:	b2da      	uxtb	r2, r3
 8006c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c82:	699b      	ldr	r3, [r3, #24]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d10a      	bne.n	8006c9e <prvProcessReceivedCommands+0x126>
        __asm volatile
 8006c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8c:	f383 8811 	msr	BASEPRI, r3
 8006c90:	f3bf 8f6f 	isb	sy
 8006c94:	f3bf 8f4f 	dsb	sy
 8006c98:	617b      	str	r3, [r7, #20]
    }
 8006c9a:	bf00      	nop
 8006c9c:	e7fe      	b.n	8006c9c <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca0:	699a      	ldr	r2, [r3, #24]
 8006ca2:	6a3b      	ldr	r3, [r7, #32]
 8006ca4:	18d1      	adds	r1, r2, r3
 8006ca6:	6a3b      	ldr	r3, [r7, #32]
 8006ca8:	6a3a      	ldr	r2, [r7, #32]
 8006caa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006cac:	f7ff ff22 	bl	8006af4 <prvInsertTimerInActiveList>
                        break;
 8006cb0:	e015      	b.n	8006cde <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cb8:	f003 0302 	and.w	r3, r3, #2
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d103      	bne.n	8006cc8 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8006cc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006cc2:	f000 fbf3 	bl	80074ac <vPortFree>
 8006cc6:	e00a      	b.n	8006cde <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cce:	f023 0301 	bic.w	r3, r3, #1
 8006cd2:	b2da      	uxtb	r2, r3
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006cda:	e000      	b.n	8006cde <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8006cdc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006cde:	4b08      	ldr	r3, [pc, #32]	; (8006d00 <prvProcessReceivedCommands+0x188>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f107 0108 	add.w	r1, r7, #8
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7fd fda3 	bl	8004834 <xQueueReceive>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f47f af45 	bne.w	8006b80 <prvProcessReceivedCommands+0x8>
        }
    }
 8006cf6:	bf00      	nop
 8006cf8:	bf00      	nop
 8006cfa:	3728      	adds	r7, #40	; 0x28
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	200002d0 	.word	0x200002d0

08006d04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b088      	sub	sp, #32
 8006d08:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d0a:	e048      	b.n	8006d9e <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d0c:	4b2d      	ldr	r3, [pc, #180]	; (8006dc4 <prvSwitchTimerLists+0xc0>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d16:	4b2b      	ldr	r3, [pc, #172]	; (8006dc4 <prvSwitchTimerLists+0xc0>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	3304      	adds	r3, #4
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7fd fa87 	bl	8004238 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d38:	f003 0304 	and.w	r3, r3, #4
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d02e      	beq.n	8006d9e <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	4413      	add	r3, r2
 8006d48:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8006d4a:	68ba      	ldr	r2, [r7, #8]
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d90e      	bls.n	8006d70 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d5e:	4b19      	ldr	r3, [pc, #100]	; (8006dc4 <prvSwitchTimerLists+0xc0>)
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	3304      	adds	r3, #4
 8006d66:	4619      	mov	r1, r3
 8006d68:	4610      	mov	r0, r2
 8006d6a:	f7fd fa2c 	bl	80041c6 <vListInsert>
 8006d6e:	e016      	b.n	8006d9e <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d70:	2300      	movs	r3, #0
 8006d72:	9300      	str	r3, [sp, #0]
 8006d74:	2300      	movs	r3, #0
 8006d76:	693a      	ldr	r2, [r7, #16]
 8006d78:	2100      	movs	r1, #0
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f7ff fd7c 	bl	8006878 <xTimerGenericCommand>
 8006d80:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d10a      	bne.n	8006d9e <prvSwitchTimerLists+0x9a>
        __asm volatile
 8006d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8c:	f383 8811 	msr	BASEPRI, r3
 8006d90:	f3bf 8f6f 	isb	sy
 8006d94:	f3bf 8f4f 	dsb	sy
 8006d98:	603b      	str	r3, [r7, #0]
    }
 8006d9a:	bf00      	nop
 8006d9c:	e7fe      	b.n	8006d9c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d9e:	4b09      	ldr	r3, [pc, #36]	; (8006dc4 <prvSwitchTimerLists+0xc0>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d1b1      	bne.n	8006d0c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8006da8:	4b06      	ldr	r3, [pc, #24]	; (8006dc4 <prvSwitchTimerLists+0xc0>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8006dae:	4b06      	ldr	r3, [pc, #24]	; (8006dc8 <prvSwitchTimerLists+0xc4>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a04      	ldr	r2, [pc, #16]	; (8006dc4 <prvSwitchTimerLists+0xc0>)
 8006db4:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006db6:	4a04      	ldr	r2, [pc, #16]	; (8006dc8 <prvSwitchTimerLists+0xc4>)
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	6013      	str	r3, [r2, #0]
    }
 8006dbc:	bf00      	nop
 8006dbe:	3718      	adds	r7, #24
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	200002c8 	.word	0x200002c8
 8006dc8:	200002cc 	.word	0x200002cc

08006dcc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006dd0:	f000 f962 	bl	8007098 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006dd4:	4b12      	ldr	r3, [pc, #72]	; (8006e20 <prvCheckForValidListAndQueue+0x54>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d11d      	bne.n	8006e18 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006ddc:	4811      	ldr	r0, [pc, #68]	; (8006e24 <prvCheckForValidListAndQueue+0x58>)
 8006dde:	f7fd f9a1 	bl	8004124 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006de2:	4811      	ldr	r0, [pc, #68]	; (8006e28 <prvCheckForValidListAndQueue+0x5c>)
 8006de4:	f7fd f99e 	bl	8004124 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006de8:	4b10      	ldr	r3, [pc, #64]	; (8006e2c <prvCheckForValidListAndQueue+0x60>)
 8006dea:	4a0e      	ldr	r2, [pc, #56]	; (8006e24 <prvCheckForValidListAndQueue+0x58>)
 8006dec:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006dee:	4b10      	ldr	r3, [pc, #64]	; (8006e30 <prvCheckForValidListAndQueue+0x64>)
 8006df0:	4a0d      	ldr	r2, [pc, #52]	; (8006e28 <prvCheckForValidListAndQueue+0x5c>)
 8006df2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006df4:	2200      	movs	r2, #0
 8006df6:	210c      	movs	r1, #12
 8006df8:	200a      	movs	r0, #10
 8006dfa:	f7fd faaf 	bl	800435c <xQueueGenericCreate>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	4a07      	ldr	r2, [pc, #28]	; (8006e20 <prvCheckForValidListAndQueue+0x54>)
 8006e02:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8006e04:	4b06      	ldr	r3, [pc, #24]	; (8006e20 <prvCheckForValidListAndQueue+0x54>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d005      	beq.n	8006e18 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006e0c:	4b04      	ldr	r3, [pc, #16]	; (8006e20 <prvCheckForValidListAndQueue+0x54>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4908      	ldr	r1, [pc, #32]	; (8006e34 <prvCheckForValidListAndQueue+0x68>)
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7fd ff2e 	bl	8004c74 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006e18:	f000 f96e 	bl	80070f8 <vPortExitCritical>
    }
 8006e1c:	bf00      	nop
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	200002d0 	.word	0x200002d0
 8006e24:	200002a0 	.word	0x200002a0
 8006e28:	200002b4 	.word	0x200002b4
 8006e2c:	200002c8 	.word	0x200002c8
 8006e30:	200002cc 	.word	0x200002cc
 8006e34:	08009878 	.word	0x08009878

08006e38 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	3b04      	subs	r3, #4
 8006e48:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006e50:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	3b04      	subs	r3, #4
 8006e56:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	f023 0201 	bic.w	r2, r3, #1
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	3b04      	subs	r3, #4
 8006e66:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006e68:	4a0c      	ldr	r2, [pc, #48]	; (8006e9c <pxPortInitialiseStack+0x64>)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	3b14      	subs	r3, #20
 8006e72:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	3b04      	subs	r3, #4
 8006e7e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f06f 0202 	mvn.w	r2, #2
 8006e86:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	3b20      	subs	r3, #32
 8006e8c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3714      	adds	r7, #20
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr
 8006e9c:	08006ea1 	.word	0x08006ea1

08006ea0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006eaa:	4b12      	ldr	r3, [pc, #72]	; (8006ef4 <prvTaskExitError+0x54>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb2:	d00a      	beq.n	8006eca <prvTaskExitError+0x2a>
        __asm volatile
 8006eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb8:	f383 8811 	msr	BASEPRI, r3
 8006ebc:	f3bf 8f6f 	isb	sy
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	60fb      	str	r3, [r7, #12]
    }
 8006ec6:	bf00      	nop
 8006ec8:	e7fe      	b.n	8006ec8 <prvTaskExitError+0x28>
        __asm volatile
 8006eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ece:	f383 8811 	msr	BASEPRI, r3
 8006ed2:	f3bf 8f6f 	isb	sy
 8006ed6:	f3bf 8f4f 	dsb	sy
 8006eda:	60bb      	str	r3, [r7, #8]
    }
 8006edc:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006ede:	bf00      	nop
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d0fc      	beq.n	8006ee0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006ee6:	bf00      	nop
 8006ee8:	bf00      	nop
 8006eea:	3714      	adds	r7, #20
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr
 8006ef4:	20000010 	.word	0x20000010
	...

08006f00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006f00:	4b07      	ldr	r3, [pc, #28]	; (8006f20 <pxCurrentTCBConst2>)
 8006f02:	6819      	ldr	r1, [r3, #0]
 8006f04:	6808      	ldr	r0, [r1, #0]
 8006f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f0a:	f380 8809 	msr	PSP, r0
 8006f0e:	f3bf 8f6f 	isb	sy
 8006f12:	f04f 0000 	mov.w	r0, #0
 8006f16:	f380 8811 	msr	BASEPRI, r0
 8006f1a:	4770      	bx	lr
 8006f1c:	f3af 8000 	nop.w

08006f20 <pxCurrentTCBConst2>:
 8006f20:	2000019c 	.word	0x2000019c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006f24:	bf00      	nop
 8006f26:	bf00      	nop

08006f28 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006f28:	4808      	ldr	r0, [pc, #32]	; (8006f4c <prvPortStartFirstTask+0x24>)
 8006f2a:	6800      	ldr	r0, [r0, #0]
 8006f2c:	6800      	ldr	r0, [r0, #0]
 8006f2e:	f380 8808 	msr	MSP, r0
 8006f32:	f04f 0000 	mov.w	r0, #0
 8006f36:	f380 8814 	msr	CONTROL, r0
 8006f3a:	b662      	cpsie	i
 8006f3c:	b661      	cpsie	f
 8006f3e:	f3bf 8f4f 	dsb	sy
 8006f42:	f3bf 8f6f 	isb	sy
 8006f46:	df00      	svc	0
 8006f48:	bf00      	nop
 8006f4a:	0000      	.short	0x0000
 8006f4c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006f50:	bf00      	nop
 8006f52:	bf00      	nop

08006f54 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b086      	sub	sp, #24
 8006f58:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006f5a:	4b46      	ldr	r3, [pc, #280]	; (8007074 <xPortStartScheduler+0x120>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a46      	ldr	r2, [pc, #280]	; (8007078 <xPortStartScheduler+0x124>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d10a      	bne.n	8006f7a <xPortStartScheduler+0x26>
        __asm volatile
 8006f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f68:	f383 8811 	msr	BASEPRI, r3
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	613b      	str	r3, [r7, #16]
    }
 8006f76:	bf00      	nop
 8006f78:	e7fe      	b.n	8006f78 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006f7a:	4b3e      	ldr	r3, [pc, #248]	; (8007074 <xPortStartScheduler+0x120>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a3f      	ldr	r2, [pc, #252]	; (800707c <xPortStartScheduler+0x128>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d10a      	bne.n	8006f9a <xPortStartScheduler+0x46>
        __asm volatile
 8006f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f88:	f383 8811 	msr	BASEPRI, r3
 8006f8c:	f3bf 8f6f 	isb	sy
 8006f90:	f3bf 8f4f 	dsb	sy
 8006f94:	60fb      	str	r3, [r7, #12]
    }
 8006f96:	bf00      	nop
 8006f98:	e7fe      	b.n	8006f98 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006f9a:	4b39      	ldr	r3, [pc, #228]	; (8007080 <xPortStartScheduler+0x12c>)
 8006f9c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	22ff      	movs	r2, #255	; 0xff
 8006faa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006fb4:	78fb      	ldrb	r3, [r7, #3]
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006fbc:	b2da      	uxtb	r2, r3
 8006fbe:	4b31      	ldr	r3, [pc, #196]	; (8007084 <xPortStartScheduler+0x130>)
 8006fc0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006fc2:	4b31      	ldr	r3, [pc, #196]	; (8007088 <xPortStartScheduler+0x134>)
 8006fc4:	2207      	movs	r2, #7
 8006fc6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006fc8:	e009      	b.n	8006fde <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8006fca:	4b2f      	ldr	r3, [pc, #188]	; (8007088 <xPortStartScheduler+0x134>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	4a2d      	ldr	r2, [pc, #180]	; (8007088 <xPortStartScheduler+0x134>)
 8006fd2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006fd4:	78fb      	ldrb	r3, [r7, #3]
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	005b      	lsls	r3, r3, #1
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006fde:	78fb      	ldrb	r3, [r7, #3]
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fe6:	2b80      	cmp	r3, #128	; 0x80
 8006fe8:	d0ef      	beq.n	8006fca <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006fea:	4b27      	ldr	r3, [pc, #156]	; (8007088 <xPortStartScheduler+0x134>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f1c3 0307 	rsb	r3, r3, #7
 8006ff2:	2b04      	cmp	r3, #4
 8006ff4:	d00a      	beq.n	800700c <xPortStartScheduler+0xb8>
        __asm volatile
 8006ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffa:	f383 8811 	msr	BASEPRI, r3
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	f3bf 8f4f 	dsb	sy
 8007006:	60bb      	str	r3, [r7, #8]
    }
 8007008:	bf00      	nop
 800700a:	e7fe      	b.n	800700a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800700c:	4b1e      	ldr	r3, [pc, #120]	; (8007088 <xPortStartScheduler+0x134>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	021b      	lsls	r3, r3, #8
 8007012:	4a1d      	ldr	r2, [pc, #116]	; (8007088 <xPortStartScheduler+0x134>)
 8007014:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007016:	4b1c      	ldr	r3, [pc, #112]	; (8007088 <xPortStartScheduler+0x134>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800701e:	4a1a      	ldr	r2, [pc, #104]	; (8007088 <xPortStartScheduler+0x134>)
 8007020:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	b2da      	uxtb	r2, r3
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800702a:	4b18      	ldr	r3, [pc, #96]	; (800708c <xPortStartScheduler+0x138>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a17      	ldr	r2, [pc, #92]	; (800708c <xPortStartScheduler+0x138>)
 8007030:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007034:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007036:	4b15      	ldr	r3, [pc, #84]	; (800708c <xPortStartScheduler+0x138>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a14      	ldr	r2, [pc, #80]	; (800708c <xPortStartScheduler+0x138>)
 800703c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007040:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007042:	f000 f8e3 	bl	800720c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007046:	4b12      	ldr	r3, [pc, #72]	; (8007090 <xPortStartScheduler+0x13c>)
 8007048:	2200      	movs	r2, #0
 800704a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800704c:	f000 f902 	bl	8007254 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007050:	4b10      	ldr	r3, [pc, #64]	; (8007094 <xPortStartScheduler+0x140>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a0f      	ldr	r2, [pc, #60]	; (8007094 <xPortStartScheduler+0x140>)
 8007056:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800705a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800705c:	f7ff ff64 	bl	8006f28 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007060:	f7fe fd30 	bl	8005ac4 <vTaskSwitchContext>
    prvTaskExitError();
 8007064:	f7ff ff1c 	bl	8006ea0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3718      	adds	r7, #24
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	e000ed00 	.word	0xe000ed00
 8007078:	410fc271 	.word	0x410fc271
 800707c:	410fc270 	.word	0x410fc270
 8007080:	e000e400 	.word	0xe000e400
 8007084:	200002dc 	.word	0x200002dc
 8007088:	200002e0 	.word	0x200002e0
 800708c:	e000ed20 	.word	0xe000ed20
 8007090:	20000010 	.word	0x20000010
 8007094:	e000ef34 	.word	0xe000ef34

08007098 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
        __asm volatile
 800709e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a2:	f383 8811 	msr	BASEPRI, r3
 80070a6:	f3bf 8f6f 	isb	sy
 80070aa:	f3bf 8f4f 	dsb	sy
 80070ae:	607b      	str	r3, [r7, #4]
    }
 80070b0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80070b2:	4b0f      	ldr	r3, [pc, #60]	; (80070f0 <vPortEnterCritical+0x58>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	3301      	adds	r3, #1
 80070b8:	4a0d      	ldr	r2, [pc, #52]	; (80070f0 <vPortEnterCritical+0x58>)
 80070ba:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80070bc:	4b0c      	ldr	r3, [pc, #48]	; (80070f0 <vPortEnterCritical+0x58>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d10f      	bne.n	80070e4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80070c4:	4b0b      	ldr	r3, [pc, #44]	; (80070f4 <vPortEnterCritical+0x5c>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00a      	beq.n	80070e4 <vPortEnterCritical+0x4c>
        __asm volatile
 80070ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d2:	f383 8811 	msr	BASEPRI, r3
 80070d6:	f3bf 8f6f 	isb	sy
 80070da:	f3bf 8f4f 	dsb	sy
 80070de:	603b      	str	r3, [r7, #0]
    }
 80070e0:	bf00      	nop
 80070e2:	e7fe      	b.n	80070e2 <vPortEnterCritical+0x4a>
    }
}
 80070e4:	bf00      	nop
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	20000010 	.word	0x20000010
 80070f4:	e000ed04 	.word	0xe000ed04

080070f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80070fe:	4b12      	ldr	r3, [pc, #72]	; (8007148 <vPortExitCritical+0x50>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10a      	bne.n	800711c <vPortExitCritical+0x24>
        __asm volatile
 8007106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710a:	f383 8811 	msr	BASEPRI, r3
 800710e:	f3bf 8f6f 	isb	sy
 8007112:	f3bf 8f4f 	dsb	sy
 8007116:	607b      	str	r3, [r7, #4]
    }
 8007118:	bf00      	nop
 800711a:	e7fe      	b.n	800711a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800711c:	4b0a      	ldr	r3, [pc, #40]	; (8007148 <vPortExitCritical+0x50>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	3b01      	subs	r3, #1
 8007122:	4a09      	ldr	r2, [pc, #36]	; (8007148 <vPortExitCritical+0x50>)
 8007124:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007126:	4b08      	ldr	r3, [pc, #32]	; (8007148 <vPortExitCritical+0x50>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d105      	bne.n	800713a <vPortExitCritical+0x42>
 800712e:	2300      	movs	r3, #0
 8007130:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	f383 8811 	msr	BASEPRI, r3
    }
 8007138:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800713a:	bf00      	nop
 800713c:	370c      	adds	r7, #12
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	20000010 	.word	0x20000010
 800714c:	00000000 	.word	0x00000000

08007150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007150:	f3ef 8009 	mrs	r0, PSP
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	4b15      	ldr	r3, [pc, #84]	; (80071b0 <pxCurrentTCBConst>)
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	f01e 0f10 	tst.w	lr, #16
 8007160:	bf08      	it	eq
 8007162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800716a:	6010      	str	r0, [r2, #0]
 800716c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007170:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007174:	f380 8811 	msr	BASEPRI, r0
 8007178:	f3bf 8f4f 	dsb	sy
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	f7fe fca0 	bl	8005ac4 <vTaskSwitchContext>
 8007184:	f04f 0000 	mov.w	r0, #0
 8007188:	f380 8811 	msr	BASEPRI, r0
 800718c:	bc09      	pop	{r0, r3}
 800718e:	6819      	ldr	r1, [r3, #0]
 8007190:	6808      	ldr	r0, [r1, #0]
 8007192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007196:	f01e 0f10 	tst.w	lr, #16
 800719a:	bf08      	it	eq
 800719c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80071a0:	f380 8809 	msr	PSP, r0
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	f3af 8000 	nop.w

080071b0 <pxCurrentTCBConst>:
 80071b0:	2000019c 	.word	0x2000019c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80071b4:	bf00      	nop
 80071b6:	bf00      	nop

080071b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
        __asm volatile
 80071be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c2:	f383 8811 	msr	BASEPRI, r3
 80071c6:	f3bf 8f6f 	isb	sy
 80071ca:	f3bf 8f4f 	dsb	sy
 80071ce:	607b      	str	r3, [r7, #4]
    }
 80071d0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80071d2:	f001 fd29 	bl	8008c28 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80071d6:	f7fe fbb9 	bl	800594c <xTaskIncrementTick>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d006      	beq.n	80071ee <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80071e0:	f001 fd80 	bl	8008ce4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80071e4:	4b08      	ldr	r3, [pc, #32]	; (8007208 <SysTick_Handler+0x50>)
 80071e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ea:	601a      	str	r2, [r3, #0]
 80071ec:	e001      	b.n	80071f2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80071ee:	f001 fd5d 	bl	8008cac <SEGGER_SYSVIEW_RecordExitISR>
 80071f2:	2300      	movs	r3, #0
 80071f4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	f383 8811 	msr	BASEPRI, r3
    }
 80071fc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80071fe:	bf00      	nop
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	e000ed04 	.word	0xe000ed04

0800720c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800720c:	b480      	push	{r7}
 800720e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007210:	4b0b      	ldr	r3, [pc, #44]	; (8007240 <vPortSetupTimerInterrupt+0x34>)
 8007212:	2200      	movs	r2, #0
 8007214:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007216:	4b0b      	ldr	r3, [pc, #44]	; (8007244 <vPortSetupTimerInterrupt+0x38>)
 8007218:	2200      	movs	r2, #0
 800721a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800721c:	4b0a      	ldr	r3, [pc, #40]	; (8007248 <vPortSetupTimerInterrupt+0x3c>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a0a      	ldr	r2, [pc, #40]	; (800724c <vPortSetupTimerInterrupt+0x40>)
 8007222:	fba2 2303 	umull	r2, r3, r2, r3
 8007226:	099b      	lsrs	r3, r3, #6
 8007228:	4a09      	ldr	r2, [pc, #36]	; (8007250 <vPortSetupTimerInterrupt+0x44>)
 800722a:	3b01      	subs	r3, #1
 800722c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800722e:	4b04      	ldr	r3, [pc, #16]	; (8007240 <vPortSetupTimerInterrupt+0x34>)
 8007230:	2207      	movs	r2, #7
 8007232:	601a      	str	r2, [r3, #0]
}
 8007234:	bf00      	nop
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	e000e010 	.word	0xe000e010
 8007244:	e000e018 	.word	0xe000e018
 8007248:	20000004 	.word	0x20000004
 800724c:	10624dd3 	.word	0x10624dd3
 8007250:	e000e014 	.word	0xe000e014

08007254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007254:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007264 <vPortEnableVFP+0x10>
 8007258:	6801      	ldr	r1, [r0, #0]
 800725a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800725e:	6001      	str	r1, [r0, #0]
 8007260:	4770      	bx	lr
 8007262:	0000      	.short	0x0000
 8007264:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007268:	bf00      	nop
 800726a:	bf00      	nop

0800726c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800726c:	b480      	push	{r7}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007272:	f3ef 8305 	mrs	r3, IPSR
 8007276:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2b0f      	cmp	r3, #15
 800727c:	d914      	bls.n	80072a8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800727e:	4a17      	ldr	r2, [pc, #92]	; (80072dc <vPortValidateInterruptPriority+0x70>)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	4413      	add	r3, r2
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007288:	4b15      	ldr	r3, [pc, #84]	; (80072e0 <vPortValidateInterruptPriority+0x74>)
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	7afa      	ldrb	r2, [r7, #11]
 800728e:	429a      	cmp	r2, r3
 8007290:	d20a      	bcs.n	80072a8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8007292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007296:	f383 8811 	msr	BASEPRI, r3
 800729a:	f3bf 8f6f 	isb	sy
 800729e:	f3bf 8f4f 	dsb	sy
 80072a2:	607b      	str	r3, [r7, #4]
    }
 80072a4:	bf00      	nop
 80072a6:	e7fe      	b.n	80072a6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80072a8:	4b0e      	ldr	r3, [pc, #56]	; (80072e4 <vPortValidateInterruptPriority+0x78>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80072b0:	4b0d      	ldr	r3, [pc, #52]	; (80072e8 <vPortValidateInterruptPriority+0x7c>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d90a      	bls.n	80072ce <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80072b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072bc:	f383 8811 	msr	BASEPRI, r3
 80072c0:	f3bf 8f6f 	isb	sy
 80072c4:	f3bf 8f4f 	dsb	sy
 80072c8:	603b      	str	r3, [r7, #0]
    }
 80072ca:	bf00      	nop
 80072cc:	e7fe      	b.n	80072cc <vPortValidateInterruptPriority+0x60>
    }
 80072ce:	bf00      	nop
 80072d0:	3714      	adds	r7, #20
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	e000e3f0 	.word	0xe000e3f0
 80072e0:	200002dc 	.word	0x200002dc
 80072e4:	e000ed0c 	.word	0xe000ed0c
 80072e8:	200002e0 	.word	0x200002e0

080072ec <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b08a      	sub	sp, #40	; 0x28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80072f4:	2300      	movs	r3, #0
 80072f6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80072f8:	f7fe fa58 	bl	80057ac <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80072fc:	4b65      	ldr	r3, [pc, #404]	; (8007494 <pvPortMalloc+0x1a8>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d101      	bne.n	8007308 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007304:	f000 f934 	bl	8007570 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007308:	4b63      	ldr	r3, [pc, #396]	; (8007498 <pvPortMalloc+0x1ac>)
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4013      	ands	r3, r2
 8007310:	2b00      	cmp	r3, #0
 8007312:	f040 80a7 	bne.w	8007464 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d02d      	beq.n	8007378 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800731c:	2208      	movs	r2, #8
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	429a      	cmp	r2, r3
 8007326:	d227      	bcs.n	8007378 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8007328:	2208      	movs	r2, #8
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4413      	add	r3, r2
 800732e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f003 0307 	and.w	r3, r3, #7
 8007336:	2b00      	cmp	r3, #0
 8007338:	d021      	beq.n	800737e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f023 0307 	bic.w	r3, r3, #7
 8007340:	3308      	adds	r3, #8
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	429a      	cmp	r2, r3
 8007346:	d214      	bcs.n	8007372 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f023 0307 	bic.w	r3, r3, #7
 800734e:	3308      	adds	r3, #8
 8007350:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f003 0307 	and.w	r3, r3, #7
 8007358:	2b00      	cmp	r3, #0
 800735a:	d010      	beq.n	800737e <pvPortMalloc+0x92>
        __asm volatile
 800735c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007360:	f383 8811 	msr	BASEPRI, r3
 8007364:	f3bf 8f6f 	isb	sy
 8007368:	f3bf 8f4f 	dsb	sy
 800736c:	617b      	str	r3, [r7, #20]
    }
 800736e:	bf00      	nop
 8007370:	e7fe      	b.n	8007370 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8007372:	2300      	movs	r3, #0
 8007374:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007376:	e002      	b.n	800737e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8007378:	2300      	movs	r3, #0
 800737a:	607b      	str	r3, [r7, #4]
 800737c:	e000      	b.n	8007380 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800737e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d06e      	beq.n	8007464 <pvPortMalloc+0x178>
 8007386:	4b45      	ldr	r3, [pc, #276]	; (800749c <pvPortMalloc+0x1b0>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	429a      	cmp	r2, r3
 800738e:	d869      	bhi.n	8007464 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007390:	4b43      	ldr	r3, [pc, #268]	; (80074a0 <pvPortMalloc+0x1b4>)
 8007392:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8007394:	4b42      	ldr	r3, [pc, #264]	; (80074a0 <pvPortMalloc+0x1b4>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800739a:	e004      	b.n	80073a6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800739c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80073a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d903      	bls.n	80073b8 <pvPortMalloc+0xcc>
 80073b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1f1      	bne.n	800739c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80073b8:	4b36      	ldr	r3, [pc, #216]	; (8007494 <pvPortMalloc+0x1a8>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073be:	429a      	cmp	r2, r3
 80073c0:	d050      	beq.n	8007464 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80073c2:	6a3b      	ldr	r3, [r7, #32]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2208      	movs	r2, #8
 80073c8:	4413      	add	r3, r2
 80073ca:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80073cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	6a3b      	ldr	r3, [r7, #32]
 80073d2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80073d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d6:	685a      	ldr	r2, [r3, #4]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	1ad2      	subs	r2, r2, r3
 80073dc:	2308      	movs	r3, #8
 80073de:	005b      	lsls	r3, r3, #1
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d91f      	bls.n	8007424 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80073e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4413      	add	r3, r2
 80073ea:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	f003 0307 	and.w	r3, r3, #7
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00a      	beq.n	800740c <pvPortMalloc+0x120>
        __asm volatile
 80073f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fa:	f383 8811 	msr	BASEPRI, r3
 80073fe:	f3bf 8f6f 	isb	sy
 8007402:	f3bf 8f4f 	dsb	sy
 8007406:	613b      	str	r3, [r7, #16]
    }
 8007408:	bf00      	nop
 800740a:	e7fe      	b.n	800740a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800740c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740e:	685a      	ldr	r2, [r3, #4]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	1ad2      	subs	r2, r2, r3
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800741e:	69b8      	ldr	r0, [r7, #24]
 8007420:	f000 f908 	bl	8007634 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007424:	4b1d      	ldr	r3, [pc, #116]	; (800749c <pvPortMalloc+0x1b0>)
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	4a1b      	ldr	r2, [pc, #108]	; (800749c <pvPortMalloc+0x1b0>)
 8007430:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007432:	4b1a      	ldr	r3, [pc, #104]	; (800749c <pvPortMalloc+0x1b0>)
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	4b1b      	ldr	r3, [pc, #108]	; (80074a4 <pvPortMalloc+0x1b8>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	429a      	cmp	r2, r3
 800743c:	d203      	bcs.n	8007446 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800743e:	4b17      	ldr	r3, [pc, #92]	; (800749c <pvPortMalloc+0x1b0>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a18      	ldr	r2, [pc, #96]	; (80074a4 <pvPortMalloc+0x1b8>)
 8007444:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007448:	685a      	ldr	r2, [r3, #4]
 800744a:	4b13      	ldr	r3, [pc, #76]	; (8007498 <pvPortMalloc+0x1ac>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	431a      	orrs	r2, r3
 8007450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007452:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007456:	2200      	movs	r2, #0
 8007458:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800745a:	4b13      	ldr	r3, [pc, #76]	; (80074a8 <pvPortMalloc+0x1bc>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	3301      	adds	r3, #1
 8007460:	4a11      	ldr	r2, [pc, #68]	; (80074a8 <pvPortMalloc+0x1bc>)
 8007462:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007464:	f7fe f9b0 	bl	80057c8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	f003 0307 	and.w	r3, r3, #7
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00a      	beq.n	8007488 <pvPortMalloc+0x19c>
        __asm volatile
 8007472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007476:	f383 8811 	msr	BASEPRI, r3
 800747a:	f3bf 8f6f 	isb	sy
 800747e:	f3bf 8f4f 	dsb	sy
 8007482:	60fb      	str	r3, [r7, #12]
    }
 8007484:	bf00      	nop
 8007486:	e7fe      	b.n	8007486 <pvPortMalloc+0x19a>
    return pvReturn;
 8007488:	69fb      	ldr	r3, [r7, #28]
}
 800748a:	4618      	mov	r0, r3
 800748c:	3728      	adds	r7, #40	; 0x28
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	20012eec 	.word	0x20012eec
 8007498:	20012f00 	.word	0x20012f00
 800749c:	20012ef0 	.word	0x20012ef0
 80074a0:	20012ee4 	.word	0x20012ee4
 80074a4:	20012ef4 	.word	0x20012ef4
 80074a8:	20012ef8 	.word	0x20012ef8

080074ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b086      	sub	sp, #24
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d04d      	beq.n	800755a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80074be:	2308      	movs	r3, #8
 80074c0:	425b      	negs	r3, r3
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	4413      	add	r3, r2
 80074c6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	685a      	ldr	r2, [r3, #4]
 80074d0:	4b24      	ldr	r3, [pc, #144]	; (8007564 <vPortFree+0xb8>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4013      	ands	r3, r2
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d10a      	bne.n	80074f0 <vPortFree+0x44>
        __asm volatile
 80074da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074de:	f383 8811 	msr	BASEPRI, r3
 80074e2:	f3bf 8f6f 	isb	sy
 80074e6:	f3bf 8f4f 	dsb	sy
 80074ea:	60fb      	str	r3, [r7, #12]
    }
 80074ec:	bf00      	nop
 80074ee:	e7fe      	b.n	80074ee <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00a      	beq.n	800750e <vPortFree+0x62>
        __asm volatile
 80074f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fc:	f383 8811 	msr	BASEPRI, r3
 8007500:	f3bf 8f6f 	isb	sy
 8007504:	f3bf 8f4f 	dsb	sy
 8007508:	60bb      	str	r3, [r7, #8]
    }
 800750a:	bf00      	nop
 800750c:	e7fe      	b.n	800750c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	685a      	ldr	r2, [r3, #4]
 8007512:	4b14      	ldr	r3, [pc, #80]	; (8007564 <vPortFree+0xb8>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4013      	ands	r3, r2
 8007518:	2b00      	cmp	r3, #0
 800751a:	d01e      	beq.n	800755a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d11a      	bne.n	800755a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	685a      	ldr	r2, [r3, #4]
 8007528:	4b0e      	ldr	r3, [pc, #56]	; (8007564 <vPortFree+0xb8>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	43db      	mvns	r3, r3
 800752e:	401a      	ands	r2, r3
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8007534:	f7fe f93a 	bl	80057ac <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	685a      	ldr	r2, [r3, #4]
 800753c:	4b0a      	ldr	r3, [pc, #40]	; (8007568 <vPortFree+0xbc>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4413      	add	r3, r2
 8007542:	4a09      	ldr	r2, [pc, #36]	; (8007568 <vPortFree+0xbc>)
 8007544:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007546:	6938      	ldr	r0, [r7, #16]
 8007548:	f000 f874 	bl	8007634 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800754c:	4b07      	ldr	r3, [pc, #28]	; (800756c <vPortFree+0xc0>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	3301      	adds	r3, #1
 8007552:	4a06      	ldr	r2, [pc, #24]	; (800756c <vPortFree+0xc0>)
 8007554:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007556:	f7fe f937 	bl	80057c8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800755a:	bf00      	nop
 800755c:	3718      	adds	r7, #24
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	20012f00 	.word	0x20012f00
 8007568:	20012ef0 	.word	0x20012ef0
 800756c:	20012efc 	.word	0x20012efc

08007570 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007576:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800757a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800757c:	4b27      	ldr	r3, [pc, #156]	; (800761c <prvHeapInit+0xac>)
 800757e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f003 0307 	and.w	r3, r3, #7
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00c      	beq.n	80075a4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	3307      	adds	r3, #7
 800758e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f023 0307 	bic.w	r3, r3, #7
 8007596:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	4a1f      	ldr	r2, [pc, #124]	; (800761c <prvHeapInit+0xac>)
 80075a0:	4413      	add	r3, r2
 80075a2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80075a8:	4a1d      	ldr	r2, [pc, #116]	; (8007620 <prvHeapInit+0xb0>)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80075ae:	4b1c      	ldr	r3, [pc, #112]	; (8007620 <prvHeapInit+0xb0>)
 80075b0:	2200      	movs	r2, #0
 80075b2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	68ba      	ldr	r2, [r7, #8]
 80075b8:	4413      	add	r3, r2
 80075ba:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80075bc:	2208      	movs	r2, #8
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	1a9b      	subs	r3, r3, r2
 80075c2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f023 0307 	bic.w	r3, r3, #7
 80075ca:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	4a15      	ldr	r2, [pc, #84]	; (8007624 <prvHeapInit+0xb4>)
 80075d0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80075d2:	4b14      	ldr	r3, [pc, #80]	; (8007624 <prvHeapInit+0xb4>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2200      	movs	r2, #0
 80075d8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80075da:	4b12      	ldr	r3, [pc, #72]	; (8007624 <prvHeapInit+0xb4>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2200      	movs	r2, #0
 80075e0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	1ad2      	subs	r2, r2, r3
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80075f0:	4b0c      	ldr	r3, [pc, #48]	; (8007624 <prvHeapInit+0xb4>)
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	4a0a      	ldr	r2, [pc, #40]	; (8007628 <prvHeapInit+0xb8>)
 80075fe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	4a09      	ldr	r2, [pc, #36]	; (800762c <prvHeapInit+0xbc>)
 8007606:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007608:	4b09      	ldr	r3, [pc, #36]	; (8007630 <prvHeapInit+0xc0>)
 800760a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800760e:	601a      	str	r2, [r3, #0]
}
 8007610:	bf00      	nop
 8007612:	3714      	adds	r7, #20
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr
 800761c:	200002e4 	.word	0x200002e4
 8007620:	20012ee4 	.word	0x20012ee4
 8007624:	20012eec 	.word	0x20012eec
 8007628:	20012ef4 	.word	0x20012ef4
 800762c:	20012ef0 	.word	0x20012ef0
 8007630:	20012f00 	.word	0x20012f00

08007634 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800763c:	4b28      	ldr	r3, [pc, #160]	; (80076e0 <prvInsertBlockIntoFreeList+0xac>)
 800763e:	60fb      	str	r3, [r7, #12]
 8007640:	e002      	b.n	8007648 <prvInsertBlockIntoFreeList+0x14>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	60fb      	str	r3, [r7, #12]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	429a      	cmp	r2, r3
 8007650:	d8f7      	bhi.n	8007642 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	68ba      	ldr	r2, [r7, #8]
 800765c:	4413      	add	r3, r2
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	429a      	cmp	r2, r3
 8007662:	d108      	bne.n	8007676 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	685a      	ldr	r2, [r3, #4]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	441a      	add	r2, r3
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	68ba      	ldr	r2, [r7, #8]
 8007680:	441a      	add	r2, r3
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	429a      	cmp	r2, r3
 8007688:	d118      	bne.n	80076bc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	4b15      	ldr	r3, [pc, #84]	; (80076e4 <prvInsertBlockIntoFreeList+0xb0>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	429a      	cmp	r2, r3
 8007694:	d00d      	beq.n	80076b2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	685a      	ldr	r2, [r3, #4]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	441a      	add	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	601a      	str	r2, [r3, #0]
 80076b0:	e008      	b.n	80076c4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80076b2:	4b0c      	ldr	r3, [pc, #48]	; (80076e4 <prvInsertBlockIntoFreeList+0xb0>)
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	601a      	str	r2, [r3, #0]
 80076ba:	e003      	b.n	80076c4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d002      	beq.n	80076d2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80076d2:	bf00      	nop
 80076d4:	3714      	adds	r7, #20
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	20012ee4 	.word	0x20012ee4
 80076e4:	20012eec 	.word	0x20012eec

080076e8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80076ee:	4b26      	ldr	r3, [pc, #152]	; (8007788 <_DoInit+0xa0>)
 80076f0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80076f2:	22a8      	movs	r2, #168	; 0xa8
 80076f4:	2100      	movs	r1, #0
 80076f6:	6838      	ldr	r0, [r7, #0]
 80076f8:	f001 ff86 	bl	8009608 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	2203      	movs	r2, #3
 8007700:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	2203      	movs	r2, #3
 8007706:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	4a20      	ldr	r2, [pc, #128]	; (800778c <_DoInit+0xa4>)
 800770c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	4a1f      	ldr	r2, [pc, #124]	; (8007790 <_DoInit+0xa8>)
 8007712:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800771a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	2200      	movs	r2, #0
 8007720:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	2200      	movs	r2, #0
 8007726:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	2200      	movs	r2, #0
 800772c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	4a16      	ldr	r2, [pc, #88]	; (800778c <_DoInit+0xa4>)
 8007732:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	4a17      	ldr	r2, [pc, #92]	; (8007794 <_DoInit+0xac>)
 8007738:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	2210      	movs	r2, #16
 800773e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	2200      	movs	r2, #0
 8007744:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	2200      	movs	r2, #0
 800774a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	2200      	movs	r2, #0
 8007750:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8007752:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8007756:	2300      	movs	r3, #0
 8007758:	607b      	str	r3, [r7, #4]
 800775a:	e00c      	b.n	8007776 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f1c3 030f 	rsb	r3, r3, #15
 8007762:	4a0d      	ldr	r2, [pc, #52]	; (8007798 <_DoInit+0xb0>)
 8007764:	5cd1      	ldrb	r1, [r2, r3]
 8007766:	683a      	ldr	r2, [r7, #0]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4413      	add	r3, r2
 800776c:	460a      	mov	r2, r1
 800776e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	3301      	adds	r3, #1
 8007774:	607b      	str	r3, [r7, #4]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2b0f      	cmp	r3, #15
 800777a:	d9ef      	bls.n	800775c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800777c:	f3bf 8f5f 	dmb	sy
}
 8007780:	bf00      	nop
 8007782:	3708      	adds	r7, #8
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}
 8007788:	20012f04 	.word	0x20012f04
 800778c:	08009880 	.word	0x08009880
 8007790:	20012fac 	.word	0x20012fac
 8007794:	200133ac 	.word	0x200133ac
 8007798:	08009970 	.word	0x08009970

0800779c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800779c:	b580      	push	{r7, lr}
 800779e:	b08c      	sub	sp, #48	; 0x30
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80077a8:	4b3e      	ldr	r3, [pc, #248]	; (80078a4 <SEGGER_RTT_ReadNoLock+0x108>)
 80077aa:	623b      	str	r3, [r7, #32]
 80077ac:	6a3b      	ldr	r3, [r7, #32]
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d101      	bne.n	80077ba <SEGGER_RTT_ReadNoLock+0x1e>
 80077b6:	f7ff ff97 	bl	80076e8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	4613      	mov	r3, r2
 80077be:	005b      	lsls	r3, r3, #1
 80077c0:	4413      	add	r3, r2
 80077c2:	00db      	lsls	r3, r3, #3
 80077c4:	3360      	adds	r3, #96	; 0x60
 80077c6:	4a37      	ldr	r2, [pc, #220]	; (80078a4 <SEGGER_RTT_ReadNoLock+0x108>)
 80077c8:	4413      	add	r3, r2
 80077ca:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80077dc:	2300      	movs	r3, #0
 80077de:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80077e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d92b      	bls.n	8007840 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	689a      	ldr	r2, [r3, #8]
 80077ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ee:	1ad3      	subs	r3, r2, r3
 80077f0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80077f2:	697a      	ldr	r2, [r7, #20]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4293      	cmp	r3, r2
 80077f8:	bf28      	it	cs
 80077fa:	4613      	movcs	r3, r2
 80077fc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	685a      	ldr	r2, [r3, #4]
 8007802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007804:	4413      	add	r3, r2
 8007806:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8007808:	697a      	ldr	r2, [r7, #20]
 800780a:	6939      	ldr	r1, [r7, #16]
 800780c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800780e:	f001 feed 	bl	80095ec <memcpy>
    NumBytesRead += NumBytesRem;
 8007812:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	4413      	add	r3, r2
 8007818:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800781a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	4413      	add	r3, r2
 8007820:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	1ad3      	subs	r3, r2, r3
 8007828:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800782a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	4413      	add	r3, r2
 8007830:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007838:	429a      	cmp	r2, r3
 800783a:	d101      	bne.n	8007840 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800783c:	2300      	movs	r3, #0
 800783e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8007840:	69ba      	ldr	r2, [r7, #24]
 8007842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007844:	1ad3      	subs	r3, r2, r3
 8007846:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007848:	697a      	ldr	r2, [r7, #20]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4293      	cmp	r3, r2
 800784e:	bf28      	it	cs
 8007850:	4613      	movcs	r3, r2
 8007852:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d019      	beq.n	800788e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	685a      	ldr	r2, [r3, #4]
 800785e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007860:	4413      	add	r3, r2
 8007862:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8007864:	697a      	ldr	r2, [r7, #20]
 8007866:	6939      	ldr	r1, [r7, #16]
 8007868:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800786a:	f001 febf 	bl	80095ec <memcpy>
    NumBytesRead += NumBytesRem;
 800786e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	4413      	add	r3, r2
 8007874:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8007876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	4413      	add	r3, r2
 800787c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8007886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	4413      	add	r3, r2
 800788c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800788e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007890:	2b00      	cmp	r3, #0
 8007892:	d002      	beq.n	800789a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007898:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800789a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800789c:	4618      	mov	r0, r3
 800789e:	3730      	adds	r7, #48	; 0x30
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	20012f04 	.word	0x20012f04

080078a8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b088      	sub	sp, #32
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	607a      	str	r2, [r7, #4]
 80078b4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80078b6:	4b3d      	ldr	r3, [pc, #244]	; (80079ac <SEGGER_RTT_AllocUpBuffer+0x104>)
 80078b8:	61bb      	str	r3, [r7, #24]
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d101      	bne.n	80078c8 <SEGGER_RTT_AllocUpBuffer+0x20>
 80078c4:	f7ff ff10 	bl	80076e8 <_DoInit>
  SEGGER_RTT_LOCK();
 80078c8:	f3ef 8311 	mrs	r3, BASEPRI
 80078cc:	f04f 0120 	mov.w	r1, #32
 80078d0:	f381 8811 	msr	BASEPRI, r1
 80078d4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80078d6:	4b35      	ldr	r3, [pc, #212]	; (80079ac <SEGGER_RTT_AllocUpBuffer+0x104>)
 80078d8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80078da:	2300      	movs	r3, #0
 80078dc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80078de:	6939      	ldr	r1, [r7, #16]
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	1c5a      	adds	r2, r3, #1
 80078e4:	4613      	mov	r3, r2
 80078e6:	005b      	lsls	r3, r3, #1
 80078e8:	4413      	add	r3, r2
 80078ea:	00db      	lsls	r3, r3, #3
 80078ec:	440b      	add	r3, r1
 80078ee:	3304      	adds	r3, #4
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d008      	beq.n	8007908 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	3301      	adds	r3, #1
 80078fa:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	69fa      	ldr	r2, [r7, #28]
 8007902:	429a      	cmp	r2, r3
 8007904:	dbeb      	blt.n	80078de <SEGGER_RTT_AllocUpBuffer+0x36>
 8007906:	e000      	b.n	800790a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8007908:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	69fa      	ldr	r2, [r7, #28]
 8007910:	429a      	cmp	r2, r3
 8007912:	da3f      	bge.n	8007994 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8007914:	6939      	ldr	r1, [r7, #16]
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	1c5a      	adds	r2, r3, #1
 800791a:	4613      	mov	r3, r2
 800791c:	005b      	lsls	r3, r3, #1
 800791e:	4413      	add	r3, r2
 8007920:	00db      	lsls	r3, r3, #3
 8007922:	440b      	add	r3, r1
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8007928:	6939      	ldr	r1, [r7, #16]
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	1c5a      	adds	r2, r3, #1
 800792e:	4613      	mov	r3, r2
 8007930:	005b      	lsls	r3, r3, #1
 8007932:	4413      	add	r3, r2
 8007934:	00db      	lsls	r3, r3, #3
 8007936:	440b      	add	r3, r1
 8007938:	3304      	adds	r3, #4
 800793a:	68ba      	ldr	r2, [r7, #8]
 800793c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800793e:	6939      	ldr	r1, [r7, #16]
 8007940:	69fa      	ldr	r2, [r7, #28]
 8007942:	4613      	mov	r3, r2
 8007944:	005b      	lsls	r3, r3, #1
 8007946:	4413      	add	r3, r2
 8007948:	00db      	lsls	r3, r3, #3
 800794a:	440b      	add	r3, r1
 800794c:	3320      	adds	r3, #32
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8007952:	6939      	ldr	r1, [r7, #16]
 8007954:	69fa      	ldr	r2, [r7, #28]
 8007956:	4613      	mov	r3, r2
 8007958:	005b      	lsls	r3, r3, #1
 800795a:	4413      	add	r3, r2
 800795c:	00db      	lsls	r3, r3, #3
 800795e:	440b      	add	r3, r1
 8007960:	3328      	adds	r3, #40	; 0x28
 8007962:	2200      	movs	r2, #0
 8007964:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8007966:	6939      	ldr	r1, [r7, #16]
 8007968:	69fa      	ldr	r2, [r7, #28]
 800796a:	4613      	mov	r3, r2
 800796c:	005b      	lsls	r3, r3, #1
 800796e:	4413      	add	r3, r2
 8007970:	00db      	lsls	r3, r3, #3
 8007972:	440b      	add	r3, r1
 8007974:	3324      	adds	r3, #36	; 0x24
 8007976:	2200      	movs	r2, #0
 8007978:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800797a:	6939      	ldr	r1, [r7, #16]
 800797c:	69fa      	ldr	r2, [r7, #28]
 800797e:	4613      	mov	r3, r2
 8007980:	005b      	lsls	r3, r3, #1
 8007982:	4413      	add	r3, r2
 8007984:	00db      	lsls	r3, r3, #3
 8007986:	440b      	add	r3, r1
 8007988:	332c      	adds	r3, #44	; 0x2c
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800798e:	f3bf 8f5f 	dmb	sy
 8007992:	e002      	b.n	800799a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8007994:	f04f 33ff 	mov.w	r3, #4294967295
 8007998:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80079a0:	69fb      	ldr	r3, [r7, #28]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3720      	adds	r7, #32
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	20012f04 	.word	0x20012f04

080079b0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b08a      	sub	sp, #40	; 0x28
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	607a      	str	r2, [r7, #4]
 80079bc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80079be:	4b21      	ldr	r3, [pc, #132]	; (8007a44 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80079c0:	623b      	str	r3, [r7, #32]
 80079c2:	6a3b      	ldr	r3, [r7, #32]
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d101      	bne.n	80079d0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80079cc:	f7ff fe8c 	bl	80076e8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80079d0:	4b1c      	ldr	r3, [pc, #112]	; (8007a44 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80079d2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d82c      	bhi.n	8007a34 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80079da:	f3ef 8311 	mrs	r3, BASEPRI
 80079de:	f04f 0120 	mov.w	r1, #32
 80079e2:	f381 8811 	msr	BASEPRI, r1
 80079e6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	4613      	mov	r3, r2
 80079ec:	005b      	lsls	r3, r3, #1
 80079ee:	4413      	add	r3, r2
 80079f0:	00db      	lsls	r3, r3, #3
 80079f2:	3360      	adds	r3, #96	; 0x60
 80079f4:	69fa      	ldr	r2, [r7, #28]
 80079f6:	4413      	add	r3, r2
 80079f8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00e      	beq.n	8007a1e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	68ba      	ldr	r2, [r7, #8]
 8007a04:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	683a      	ldr	r2, [r7, #0]
 8007a10:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	2200      	movs	r2, #0
 8007a16:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a22:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8007a24:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	627b      	str	r3, [r7, #36]	; 0x24
 8007a32:	e002      	b.n	8007a3a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8007a34:	f04f 33ff 	mov.w	r3, #4294967295
 8007a38:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3728      	adds	r7, #40	; 0x28
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	20012f04 	.word	0x20012f04

08007a48 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8007a48:	b480      	push	{r7}
 8007a4a:	b087      	sub	sp, #28
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8007a54:	2300      	movs	r3, #0
 8007a56:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00f      	beq.n	8007a7e <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8007a5e:	e002      	b.n	8007a66 <_EncodeStr+0x1e>
      Len++;
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	3301      	adds	r3, #1
 8007a64:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8007a66:	68ba      	ldr	r2, [r7, #8]
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1f6      	bne.n	8007a60 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d901      	bls.n	8007a7e <_EncodeStr+0x36>
      Len = Limit;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	2bfe      	cmp	r3, #254	; 0xfe
 8007a82:	d806      	bhi.n	8007a92 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	1c5a      	adds	r2, r3, #1
 8007a88:	60fa      	str	r2, [r7, #12]
 8007a8a:	693a      	ldr	r2, [r7, #16]
 8007a8c:	b2d2      	uxtb	r2, r2
 8007a8e:	701a      	strb	r2, [r3, #0]
 8007a90:	e011      	b.n	8007ab6 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	1c5a      	adds	r2, r3, #1
 8007a96:	60fa      	str	r2, [r7, #12]
 8007a98:	22ff      	movs	r2, #255	; 0xff
 8007a9a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	1c5a      	adds	r2, r3, #1
 8007aa0:	60fa      	str	r2, [r7, #12]
 8007aa2:	693a      	ldr	r2, [r7, #16]
 8007aa4:	b2d2      	uxtb	r2, r2
 8007aa6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	0a19      	lsrs	r1, r3, #8
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	1c5a      	adds	r2, r3, #1
 8007ab0:	60fa      	str	r2, [r7, #12]
 8007ab2:	b2ca      	uxtb	r2, r1
 8007ab4:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8007aba:	e00a      	b.n	8007ad2 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8007abc:	68ba      	ldr	r2, [r7, #8]
 8007abe:	1c53      	adds	r3, r2, #1
 8007ac0:	60bb      	str	r3, [r7, #8]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	1c59      	adds	r1, r3, #1
 8007ac6:	60f9      	str	r1, [r7, #12]
 8007ac8:	7812      	ldrb	r2, [r2, #0]
 8007aca:	701a      	strb	r2, [r3, #0]
    n++;
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	3301      	adds	r3, #1
 8007ad0:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8007ad2:	697a      	ldr	r2, [r7, #20]
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d3f0      	bcc.n	8007abc <_EncodeStr+0x74>
  }
  return pPayload;
 8007ada:	68fb      	ldr	r3, [r7, #12]
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	371c      	adds	r7, #28
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	3307      	adds	r3, #7
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007b06:	4b35      	ldr	r3, [pc, #212]	; (8007bdc <_HandleIncomingPacket+0xdc>)
 8007b08:	7e1b      	ldrb	r3, [r3, #24]
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	1cfb      	adds	r3, r7, #3
 8007b0e:	2201      	movs	r2, #1
 8007b10:	4619      	mov	r1, r3
 8007b12:	f7ff fe43 	bl	800779c <SEGGER_RTT_ReadNoLock>
 8007b16:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d052      	beq.n	8007bc4 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8007b1e:	78fb      	ldrb	r3, [r7, #3]
 8007b20:	2b80      	cmp	r3, #128	; 0x80
 8007b22:	d031      	beq.n	8007b88 <_HandleIncomingPacket+0x88>
 8007b24:	2b80      	cmp	r3, #128	; 0x80
 8007b26:	dc40      	bgt.n	8007baa <_HandleIncomingPacket+0xaa>
 8007b28:	2b07      	cmp	r3, #7
 8007b2a:	dc15      	bgt.n	8007b58 <_HandleIncomingPacket+0x58>
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	dd3c      	ble.n	8007baa <_HandleIncomingPacket+0xaa>
 8007b30:	3b01      	subs	r3, #1
 8007b32:	2b06      	cmp	r3, #6
 8007b34:	d839      	bhi.n	8007baa <_HandleIncomingPacket+0xaa>
 8007b36:	a201      	add	r2, pc, #4	; (adr r2, 8007b3c <_HandleIncomingPacket+0x3c>)
 8007b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b3c:	08007b5f 	.word	0x08007b5f
 8007b40:	08007b65 	.word	0x08007b65
 8007b44:	08007b6b 	.word	0x08007b6b
 8007b48:	08007b71 	.word	0x08007b71
 8007b4c:	08007b77 	.word	0x08007b77
 8007b50:	08007b7d 	.word	0x08007b7d
 8007b54:	08007b83 	.word	0x08007b83
 8007b58:	2b7f      	cmp	r3, #127	; 0x7f
 8007b5a:	d035      	beq.n	8007bc8 <_HandleIncomingPacket+0xc8>
 8007b5c:	e025      	b.n	8007baa <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8007b5e:	f000 fd9b 	bl	8008698 <SEGGER_SYSVIEW_Start>
      break;
 8007b62:	e036      	b.n	8007bd2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8007b64:	f000 fe52 	bl	800880c <SEGGER_SYSVIEW_Stop>
      break;
 8007b68:	e033      	b.n	8007bd2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8007b6a:	f001 f82b 	bl	8008bc4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8007b6e:	e030      	b.n	8007bd2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8007b70:	f000 fff0 	bl	8008b54 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8007b74:	e02d      	b.n	8007bd2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8007b76:	f000 fe6f 	bl	8008858 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8007b7a:	e02a      	b.n	8007bd2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8007b7c:	f001 fabe 	bl	80090fc <SEGGER_SYSVIEW_SendNumModules>
      break;
 8007b80:	e027      	b.n	8007bd2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8007b82:	f001 fa9d 	bl	80090c0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8007b86:	e024      	b.n	8007bd2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007b88:	4b14      	ldr	r3, [pc, #80]	; (8007bdc <_HandleIncomingPacket+0xdc>)
 8007b8a:	7e1b      	ldrb	r3, [r3, #24]
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	1cfb      	adds	r3, r7, #3
 8007b90:	2201      	movs	r2, #1
 8007b92:	4619      	mov	r1, r3
 8007b94:	f7ff fe02 	bl	800779c <SEGGER_RTT_ReadNoLock>
 8007b98:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d015      	beq.n	8007bcc <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8007ba0:	78fb      	ldrb	r3, [r7, #3]
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f001 fa0c 	bl	8008fc0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8007ba8:	e010      	b.n	8007bcc <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8007baa:	78fb      	ldrb	r3, [r7, #3]
 8007bac:	b25b      	sxtb	r3, r3
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	da0e      	bge.n	8007bd0 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007bb2:	4b0a      	ldr	r3, [pc, #40]	; (8007bdc <_HandleIncomingPacket+0xdc>)
 8007bb4:	7e1b      	ldrb	r3, [r3, #24]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	1cfb      	adds	r3, r7, #3
 8007bba:	2201      	movs	r2, #1
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	f7ff fded 	bl	800779c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8007bc2:	e005      	b.n	8007bd0 <_HandleIncomingPacket+0xd0>
    }
  }
 8007bc4:	bf00      	nop
 8007bc6:	e004      	b.n	8007bd2 <_HandleIncomingPacket+0xd2>
      break;
 8007bc8:	bf00      	nop
 8007bca:	e002      	b.n	8007bd2 <_HandleIncomingPacket+0xd2>
      break;
 8007bcc:	bf00      	nop
 8007bce:	e000      	b.n	8007bd2 <_HandleIncomingPacket+0xd2>
      break;
 8007bd0:	bf00      	nop
}
 8007bd2:	bf00      	nop
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	200143c4 	.word	0x200143c4

08007be0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b08c      	sub	sp, #48	; 0x30
 8007be4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8007be6:	2301      	movs	r3, #1
 8007be8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8007bea:	1d3b      	adds	r3, r7, #4
 8007bec:	3301      	adds	r3, #1
 8007bee:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bf4:	4b31      	ldr	r3, [pc, #196]	; (8007cbc <_TrySendOverflowPacket+0xdc>)
 8007bf6:	695b      	ldr	r3, [r3, #20]
 8007bf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bfa:	e00b      	b.n	8007c14 <_TrySendOverflowPacket+0x34>
 8007bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfe:	b2da      	uxtb	r2, r3
 8007c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c02:	1c59      	adds	r1, r3, #1
 8007c04:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007c06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c0a:	b2d2      	uxtb	r2, r2
 8007c0c:	701a      	strb	r2, [r3, #0]
 8007c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c10:	09db      	lsrs	r3, r3, #7
 8007c12:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c16:	2b7f      	cmp	r3, #127	; 0x7f
 8007c18:	d8f0      	bhi.n	8007bfc <_TrySendOverflowPacket+0x1c>
 8007c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1c:	1c5a      	adds	r2, r3, #1
 8007c1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c22:	b2d2      	uxtb	r2, r2
 8007c24:	701a      	strb	r2, [r3, #0]
 8007c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c28:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007c2a:	4b25      	ldr	r3, [pc, #148]	; (8007cc0 <_TrySendOverflowPacket+0xe0>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8007c30:	4b22      	ldr	r3, [pc, #136]	; (8007cbc <_TrySendOverflowPacket+0xdc>)
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	69ba      	ldr	r2, [r7, #24]
 8007c36:	1ad3      	subs	r3, r2, r3
 8007c38:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8007c3a:	69fb      	ldr	r3, [r7, #28]
 8007c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	623b      	str	r3, [r7, #32]
 8007c42:	e00b      	b.n	8007c5c <_TrySendOverflowPacket+0x7c>
 8007c44:	6a3b      	ldr	r3, [r7, #32]
 8007c46:	b2da      	uxtb	r2, r3
 8007c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4a:	1c59      	adds	r1, r3, #1
 8007c4c:	6279      	str	r1, [r7, #36]	; 0x24
 8007c4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c52:	b2d2      	uxtb	r2, r2
 8007c54:	701a      	strb	r2, [r3, #0]
 8007c56:	6a3b      	ldr	r3, [r7, #32]
 8007c58:	09db      	lsrs	r3, r3, #7
 8007c5a:	623b      	str	r3, [r7, #32]
 8007c5c:	6a3b      	ldr	r3, [r7, #32]
 8007c5e:	2b7f      	cmp	r3, #127	; 0x7f
 8007c60:	d8f0      	bhi.n	8007c44 <_TrySendOverflowPacket+0x64>
 8007c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c64:	1c5a      	adds	r2, r3, #1
 8007c66:	627a      	str	r2, [r7, #36]	; 0x24
 8007c68:	6a3a      	ldr	r2, [r7, #32]
 8007c6a:	b2d2      	uxtb	r2, r2
 8007c6c:	701a      	strb	r2, [r3, #0]
 8007c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c70:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8007c72:	4b12      	ldr	r3, [pc, #72]	; (8007cbc <_TrySendOverflowPacket+0xdc>)
 8007c74:	785b      	ldrb	r3, [r3, #1]
 8007c76:	4618      	mov	r0, r3
 8007c78:	1d3b      	adds	r3, r7, #4
 8007c7a:	69fa      	ldr	r2, [r7, #28]
 8007c7c:	1ad3      	subs	r3, r2, r3
 8007c7e:	461a      	mov	r2, r3
 8007c80:	1d3b      	adds	r3, r7, #4
 8007c82:	4619      	mov	r1, r3
 8007c84:	f7f8 fab4 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d009      	beq.n	8007ca6 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8007c92:	4a0a      	ldr	r2, [pc, #40]	; (8007cbc <_TrySendOverflowPacket+0xdc>)
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8007c98:	4b08      	ldr	r3, [pc, #32]	; (8007cbc <_TrySendOverflowPacket+0xdc>)
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	b2da      	uxtb	r2, r3
 8007ca0:	4b06      	ldr	r3, [pc, #24]	; (8007cbc <_TrySendOverflowPacket+0xdc>)
 8007ca2:	701a      	strb	r2, [r3, #0]
 8007ca4:	e004      	b.n	8007cb0 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8007ca6:	4b05      	ldr	r3, [pc, #20]	; (8007cbc <_TrySendOverflowPacket+0xdc>)
 8007ca8:	695b      	ldr	r3, [r3, #20]
 8007caa:	3301      	adds	r3, #1
 8007cac:	4a03      	ldr	r2, [pc, #12]	; (8007cbc <_TrySendOverflowPacket+0xdc>)
 8007cae:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8007cb0:	693b      	ldr	r3, [r7, #16]
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3730      	adds	r7, #48	; 0x30
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	200143c4 	.word	0x200143c4
 8007cc0:	e0001004 	.word	0xe0001004

08007cc4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b08a      	sub	sp, #40	; 0x28
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8007cd0:	4b98      	ldr	r3, [pc, #608]	; (8007f34 <_SendPacket+0x270>)
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d010      	beq.n	8007cfa <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8007cd8:	4b96      	ldr	r3, [pc, #600]	; (8007f34 <_SendPacket+0x270>)
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f000 812d 	beq.w	8007f3c <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8007ce2:	4b94      	ldr	r3, [pc, #592]	; (8007f34 <_SendPacket+0x270>)
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d109      	bne.n	8007cfe <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8007cea:	f7ff ff79 	bl	8007be0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8007cee:	4b91      	ldr	r3, [pc, #580]	; (8007f34 <_SendPacket+0x270>)
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	f040 8124 	bne.w	8007f40 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8007cf8:	e001      	b.n	8007cfe <_SendPacket+0x3a>
    goto Send;
 8007cfa:	bf00      	nop
 8007cfc:	e000      	b.n	8007d00 <_SendPacket+0x3c>
Send:
 8007cfe:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2b1f      	cmp	r3, #31
 8007d04:	d809      	bhi.n	8007d1a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8007d06:	4b8b      	ldr	r3, [pc, #556]	; (8007f34 <_SendPacket+0x270>)
 8007d08:	69da      	ldr	r2, [r3, #28]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d10:	f003 0301 	and.w	r3, r3, #1
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	f040 8115 	bne.w	8007f44 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2b17      	cmp	r3, #23
 8007d1e:	d807      	bhi.n	8007d30 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	3b01      	subs	r3, #1
 8007d24:	60fb      	str	r3, [r7, #12]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	b2da      	uxtb	r2, r3
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	701a      	strb	r2, [r3, #0]
 8007d2e:	e0c4      	b.n	8007eba <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	1ad3      	subs	r3, r2, r3
 8007d36:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	2b7f      	cmp	r3, #127	; 0x7f
 8007d3c:	d912      	bls.n	8007d64 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	09da      	lsrs	r2, r3, #7
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	3b01      	subs	r3, #1
 8007d46:	60fb      	str	r3, [r7, #12]
 8007d48:	b2d2      	uxtb	r2, r2
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	3a01      	subs	r2, #1
 8007d56:	60fa      	str	r2, [r7, #12]
 8007d58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007d5c:	b2da      	uxtb	r2, r3
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	701a      	strb	r2, [r3, #0]
 8007d62:	e006      	b.n	8007d72 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	3b01      	subs	r3, #1
 8007d68:	60fb      	str	r3, [r7, #12]
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	b2da      	uxtb	r2, r3
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2b7e      	cmp	r3, #126	; 0x7e
 8007d76:	d807      	bhi.n	8007d88 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	60fb      	str	r3, [r7, #12]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	b2da      	uxtb	r2, r3
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	701a      	strb	r2, [r3, #0]
 8007d86:	e098      	b.n	8007eba <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d8e:	d212      	bcs.n	8007db6 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	09da      	lsrs	r2, r3, #7
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	3b01      	subs	r3, #1
 8007d98:	60fb      	str	r3, [r7, #12]
 8007d9a:	b2d2      	uxtb	r2, r2
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	3a01      	subs	r2, #1
 8007da8:	60fa      	str	r2, [r7, #12]
 8007daa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007dae:	b2da      	uxtb	r2, r3
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	701a      	strb	r2, [r3, #0]
 8007db4:	e081      	b.n	8007eba <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007dbc:	d21d      	bcs.n	8007dfa <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	0b9a      	lsrs	r2, r3, #14
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	60fb      	str	r3, [r7, #12]
 8007dc8:	b2d2      	uxtb	r2, r2
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	09db      	lsrs	r3, r3, #7
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	3a01      	subs	r2, #1
 8007dd8:	60fa      	str	r2, [r7, #12]
 8007dda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007dde:	b2da      	uxtb	r2, r3
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	3a01      	subs	r2, #1
 8007dec:	60fa      	str	r2, [r7, #12]
 8007dee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007df2:	b2da      	uxtb	r2, r3
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	701a      	strb	r2, [r3, #0]
 8007df8:	e05f      	b.n	8007eba <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e00:	d228      	bcs.n	8007e54 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	0d5a      	lsrs	r2, r3, #21
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	60fb      	str	r3, [r7, #12]
 8007e0c:	b2d2      	uxtb	r2, r2
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	0b9b      	lsrs	r3, r3, #14
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	3a01      	subs	r2, #1
 8007e1c:	60fa      	str	r2, [r7, #12]
 8007e1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e22:	b2da      	uxtb	r2, r3
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	09db      	lsrs	r3, r3, #7
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	68fa      	ldr	r2, [r7, #12]
 8007e30:	3a01      	subs	r2, #1
 8007e32:	60fa      	str	r2, [r7, #12]
 8007e34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e38:	b2da      	uxtb	r2, r3
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	3a01      	subs	r2, #1
 8007e46:	60fa      	str	r2, [r7, #12]
 8007e48:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e4c:	b2da      	uxtb	r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	701a      	strb	r2, [r3, #0]
 8007e52:	e032      	b.n	8007eba <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	0f1a      	lsrs	r2, r3, #28
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	60fb      	str	r3, [r7, #12]
 8007e5e:	b2d2      	uxtb	r2, r2
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	0d5b      	lsrs	r3, r3, #21
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	68fa      	ldr	r2, [r7, #12]
 8007e6c:	3a01      	subs	r2, #1
 8007e6e:	60fa      	str	r2, [r7, #12]
 8007e70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e74:	b2da      	uxtb	r2, r3
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	0b9b      	lsrs	r3, r3, #14
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	3a01      	subs	r2, #1
 8007e84:	60fa      	str	r2, [r7, #12]
 8007e86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e8a:	b2da      	uxtb	r2, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	09db      	lsrs	r3, r3, #7
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	3a01      	subs	r2, #1
 8007e9a:	60fa      	str	r2, [r7, #12]
 8007e9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ea0:	b2da      	uxtb	r2, r3
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	68fa      	ldr	r2, [r7, #12]
 8007eac:	3a01      	subs	r2, #1
 8007eae:	60fa      	str	r2, [r7, #12]
 8007eb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007eb4:	b2da      	uxtb	r2, r3
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007eba:	4b1f      	ldr	r3, [pc, #124]	; (8007f38 <_SendPacket+0x274>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8007ec0:	4b1c      	ldr	r3, [pc, #112]	; (8007f34 <_SendPacket+0x270>)
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	69ba      	ldr	r2, [r7, #24]
 8007ec6:	1ad3      	subs	r3, r2, r3
 8007ec8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	623b      	str	r3, [r7, #32]
 8007ed2:	e00b      	b.n	8007eec <_SendPacket+0x228>
 8007ed4:	6a3b      	ldr	r3, [r7, #32]
 8007ed6:	b2da      	uxtb	r2, r3
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eda:	1c59      	adds	r1, r3, #1
 8007edc:	6279      	str	r1, [r7, #36]	; 0x24
 8007ede:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ee2:	b2d2      	uxtb	r2, r2
 8007ee4:	701a      	strb	r2, [r3, #0]
 8007ee6:	6a3b      	ldr	r3, [r7, #32]
 8007ee8:	09db      	lsrs	r3, r3, #7
 8007eea:	623b      	str	r3, [r7, #32]
 8007eec:	6a3b      	ldr	r3, [r7, #32]
 8007eee:	2b7f      	cmp	r3, #127	; 0x7f
 8007ef0:	d8f0      	bhi.n	8007ed4 <_SendPacket+0x210>
 8007ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef4:	1c5a      	adds	r2, r3, #1
 8007ef6:	627a      	str	r2, [r7, #36]	; 0x24
 8007ef8:	6a3a      	ldr	r2, [r7, #32]
 8007efa:	b2d2      	uxtb	r2, r2
 8007efc:	701a      	strb	r2, [r3, #0]
 8007efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f00:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8007f02:	4b0c      	ldr	r3, [pc, #48]	; (8007f34 <_SendPacket+0x270>)
 8007f04:	785b      	ldrb	r3, [r3, #1]
 8007f06:	4618      	mov	r0, r3
 8007f08:	68ba      	ldr	r2, [r7, #8]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	461a      	mov	r2, r3
 8007f10:	68f9      	ldr	r1, [r7, #12]
 8007f12:	f7f8 f96d 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007f16:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d003      	beq.n	8007f26 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8007f1e:	4a05      	ldr	r2, [pc, #20]	; (8007f34 <_SendPacket+0x270>)
 8007f20:	69bb      	ldr	r3, [r7, #24]
 8007f22:	60d3      	str	r3, [r2, #12]
 8007f24:	e00f      	b.n	8007f46 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8007f26:	4b03      	ldr	r3, [pc, #12]	; (8007f34 <_SendPacket+0x270>)
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	b2da      	uxtb	r2, r3
 8007f2e:	4b01      	ldr	r3, [pc, #4]	; (8007f34 <_SendPacket+0x270>)
 8007f30:	701a      	strb	r2, [r3, #0]
 8007f32:	e008      	b.n	8007f46 <_SendPacket+0x282>
 8007f34:	200143c4 	.word	0x200143c4
 8007f38:	e0001004 	.word	0xe0001004
    goto SendDone;
 8007f3c:	bf00      	nop
 8007f3e:	e002      	b.n	8007f46 <_SendPacket+0x282>
      goto SendDone;
 8007f40:	bf00      	nop
 8007f42:	e000      	b.n	8007f46 <_SendPacket+0x282>
      goto SendDone;
 8007f44:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007f46:	4b14      	ldr	r3, [pc, #80]	; (8007f98 <_SendPacket+0x2d4>)
 8007f48:	7e1b      	ldrb	r3, [r3, #24]
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	4a13      	ldr	r2, [pc, #76]	; (8007f9c <_SendPacket+0x2d8>)
 8007f4e:	460b      	mov	r3, r1
 8007f50:	005b      	lsls	r3, r3, #1
 8007f52:	440b      	add	r3, r1
 8007f54:	00db      	lsls	r3, r3, #3
 8007f56:	4413      	add	r3, r2
 8007f58:	336c      	adds	r3, #108	; 0x6c
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	4b0e      	ldr	r3, [pc, #56]	; (8007f98 <_SendPacket+0x2d4>)
 8007f5e:	7e1b      	ldrb	r3, [r3, #24]
 8007f60:	4618      	mov	r0, r3
 8007f62:	490e      	ldr	r1, [pc, #56]	; (8007f9c <_SendPacket+0x2d8>)
 8007f64:	4603      	mov	r3, r0
 8007f66:	005b      	lsls	r3, r3, #1
 8007f68:	4403      	add	r3, r0
 8007f6a:	00db      	lsls	r3, r3, #3
 8007f6c:	440b      	add	r3, r1
 8007f6e:	3370      	adds	r3, #112	; 0x70
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d00b      	beq.n	8007f8e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007f76:	4b08      	ldr	r3, [pc, #32]	; (8007f98 <_SendPacket+0x2d4>)
 8007f78:	789b      	ldrb	r3, [r3, #2]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d107      	bne.n	8007f8e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007f7e:	4b06      	ldr	r3, [pc, #24]	; (8007f98 <_SendPacket+0x2d4>)
 8007f80:	2201      	movs	r2, #1
 8007f82:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007f84:	f7ff fdbc 	bl	8007b00 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007f88:	4b03      	ldr	r3, [pc, #12]	; (8007f98 <_SendPacket+0x2d4>)
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8007f8e:	bf00      	nop
 8007f90:	3728      	adds	r7, #40	; 0x28
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	200143c4 	.word	0x200143c4
 8007f9c:	20012f04 	.word	0x20012f04

08007fa0 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b0a2      	sub	sp, #136	; 0x88
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 8007fb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007fb8:	1c5a      	adds	r2, r3, #1
 8007fba:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 8007fc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d01d      	beq.n	8008006 <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 8007fca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007fce:	2b25      	cmp	r3, #37	; 0x25
 8007fd0:	d1f1      	bne.n	8007fb6 <_VPrintHost+0x16>
      c = *p;
 8007fd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	1d19      	adds	r1, r3, #4
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	6011      	str	r1, [r2, #0]
 8007fe4:	6819      	ldr	r1, [r3, #0]
 8007fe6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007fea:	1c5a      	adds	r2, r3, #1
 8007fec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007ff0:	460a      	mov	r2, r1
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	3388      	adds	r3, #136	; 0x88
 8007ff6:	443b      	add	r3, r7
 8007ff8:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 8007ffc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008000:	2b10      	cmp	r3, #16
 8008002:	d002      	beq.n	800800a <_VPrintHost+0x6a>
    c = *p++;
 8008004:	e7d7      	b.n	8007fb6 <_VPrintHost+0x16>
      break;
 8008006:	bf00      	nop
 8008008:	e000      	b.n	800800c <_VPrintHost+0x6c>
        break;
 800800a:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 800800c:	f3ef 8311 	mrs	r3, BASEPRI
 8008010:	f04f 0120 	mov.w	r1, #32
 8008014:	f381 8811 	msr	BASEPRI, r1
 8008018:	65bb      	str	r3, [r7, #88]	; 0x58
 800801a:	483f      	ldr	r0, [pc, #252]	; (8008118 <_VPrintHost+0x178>)
 800801c:	f7ff fd64 	bl	8007ae8 <_PreparePacket>
 8008020:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008022:	2280      	movs	r2, #128	; 0x80
 8008024:	68f9      	ldr	r1, [r7, #12]
 8008026:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008028:	f7ff fd0e 	bl	8007a48 <_EncodeStr>
 800802c:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 800802e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008030:	677b      	str	r3, [r7, #116]	; 0x74
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	673b      	str	r3, [r7, #112]	; 0x70
 8008036:	e00b      	b.n	8008050 <_VPrintHost+0xb0>
 8008038:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800803a:	b2da      	uxtb	r2, r3
 800803c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800803e:	1c59      	adds	r1, r3, #1
 8008040:	6779      	str	r1, [r7, #116]	; 0x74
 8008042:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008046:	b2d2      	uxtb	r2, r2
 8008048:	701a      	strb	r2, [r3, #0]
 800804a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800804c:	09db      	lsrs	r3, r3, #7
 800804e:	673b      	str	r3, [r7, #112]	; 0x70
 8008050:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008052:	2b7f      	cmp	r3, #127	; 0x7f
 8008054:	d8f0      	bhi.n	8008038 <_VPrintHost+0x98>
 8008056:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008058:	1c5a      	adds	r2, r3, #1
 800805a:	677a      	str	r2, [r7, #116]	; 0x74
 800805c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800805e:	b2d2      	uxtb	r2, r2
 8008060:	701a      	strb	r2, [r3, #0]
 8008062:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008064:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 8008066:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008068:	66fb      	str	r3, [r7, #108]	; 0x6c
 800806a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800806e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008070:	e00b      	b.n	800808a <_VPrintHost+0xea>
 8008072:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008074:	b2da      	uxtb	r2, r3
 8008076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008078:	1c59      	adds	r1, r3, #1
 800807a:	66f9      	str	r1, [r7, #108]	; 0x6c
 800807c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008080:	b2d2      	uxtb	r2, r2
 8008082:	701a      	strb	r2, [r3, #0]
 8008084:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008086:	09db      	lsrs	r3, r3, #7
 8008088:	66bb      	str	r3, [r7, #104]	; 0x68
 800808a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800808c:	2b7f      	cmp	r3, #127	; 0x7f
 800808e:	d8f0      	bhi.n	8008072 <_VPrintHost+0xd2>
 8008090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008092:	1c5a      	adds	r2, r3, #1
 8008094:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008096:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008098:	b2d2      	uxtb	r2, r2
 800809a:	701a      	strb	r2, [r3, #0]
 800809c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800809e:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 80080a0:	f107 0314 	add.w	r3, r7, #20
 80080a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 80080a8:	e022      	b.n	80080f0 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 80080aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080ac:	667b      	str	r3, [r7, #100]	; 0x64
 80080ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	663b      	str	r3, [r7, #96]	; 0x60
 80080b6:	e00b      	b.n	80080d0 <_VPrintHost+0x130>
 80080b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080ba:	b2da      	uxtb	r2, r3
 80080bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080be:	1c59      	adds	r1, r3, #1
 80080c0:	6679      	str	r1, [r7, #100]	; 0x64
 80080c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80080c6:	b2d2      	uxtb	r2, r2
 80080c8:	701a      	strb	r2, [r3, #0]
 80080ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080cc:	09db      	lsrs	r3, r3, #7
 80080ce:	663b      	str	r3, [r7, #96]	; 0x60
 80080d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080d2:	2b7f      	cmp	r3, #127	; 0x7f
 80080d4:	d8f0      	bhi.n	80080b8 <_VPrintHost+0x118>
 80080d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080d8:	1c5a      	adds	r2, r3, #1
 80080da:	667a      	str	r2, [r7, #100]	; 0x64
 80080dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80080de:	b2d2      	uxtb	r2, r2
 80080e0:	701a      	strb	r2, [r3, #0]
 80080e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080e4:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 80080e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080ea:	3304      	adds	r3, #4
 80080ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 80080f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80080f4:	1e5a      	subs	r2, r3, #1
 80080f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1d5      	bne.n	80080aa <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80080fe:	221a      	movs	r2, #26
 8008100:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008102:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008104:	f7ff fdde 	bl	8007cc4 <_SendPacket>
    RECORD_END();
 8008108:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800810a:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3788      	adds	r7, #136	; 0x88
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	200143f4 	.word	0x200143f4

0800811c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800811c:	b580      	push	{r7, lr}
 800811e:	b086      	sub	sp, #24
 8008120:	af02      	add	r7, sp, #8
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	607a      	str	r2, [r7, #4]
 8008128:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800812a:	2300      	movs	r3, #0
 800812c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008130:	4917      	ldr	r1, [pc, #92]	; (8008190 <SEGGER_SYSVIEW_Init+0x74>)
 8008132:	4818      	ldr	r0, [pc, #96]	; (8008194 <SEGGER_SYSVIEW_Init+0x78>)
 8008134:	f7ff fbb8 	bl	80078a8 <SEGGER_RTT_AllocUpBuffer>
 8008138:	4603      	mov	r3, r0
 800813a:	b2da      	uxtb	r2, r3
 800813c:	4b16      	ldr	r3, [pc, #88]	; (8008198 <SEGGER_SYSVIEW_Init+0x7c>)
 800813e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8008140:	4b15      	ldr	r3, [pc, #84]	; (8008198 <SEGGER_SYSVIEW_Init+0x7c>)
 8008142:	785a      	ldrb	r2, [r3, #1]
 8008144:	4b14      	ldr	r3, [pc, #80]	; (8008198 <SEGGER_SYSVIEW_Init+0x7c>)
 8008146:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8008148:	4b13      	ldr	r3, [pc, #76]	; (8008198 <SEGGER_SYSVIEW_Init+0x7c>)
 800814a:	7e1b      	ldrb	r3, [r3, #24]
 800814c:	4618      	mov	r0, r3
 800814e:	2300      	movs	r3, #0
 8008150:	9300      	str	r3, [sp, #0]
 8008152:	2308      	movs	r3, #8
 8008154:	4a11      	ldr	r2, [pc, #68]	; (800819c <SEGGER_SYSVIEW_Init+0x80>)
 8008156:	490f      	ldr	r1, [pc, #60]	; (8008194 <SEGGER_SYSVIEW_Init+0x78>)
 8008158:	f7ff fc2a 	bl	80079b0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800815c:	4b0e      	ldr	r3, [pc, #56]	; (8008198 <SEGGER_SYSVIEW_Init+0x7c>)
 800815e:	2200      	movs	r2, #0
 8008160:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8008162:	4b0f      	ldr	r3, [pc, #60]	; (80081a0 <SEGGER_SYSVIEW_Init+0x84>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a0c      	ldr	r2, [pc, #48]	; (8008198 <SEGGER_SYSVIEW_Init+0x7c>)
 8008168:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800816a:	4a0b      	ldr	r2, [pc, #44]	; (8008198 <SEGGER_SYSVIEW_Init+0x7c>)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8008170:	4a09      	ldr	r2, [pc, #36]	; (8008198 <SEGGER_SYSVIEW_Init+0x7c>)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8008176:	4a08      	ldr	r2, [pc, #32]	; (8008198 <SEGGER_SYSVIEW_Init+0x7c>)
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800817c:	4a06      	ldr	r2, [pc, #24]	; (8008198 <SEGGER_SYSVIEW_Init+0x7c>)
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8008182:	4b05      	ldr	r3, [pc, #20]	; (8008198 <SEGGER_SYSVIEW_Init+0x7c>)
 8008184:	2200      	movs	r2, #0
 8008186:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8008188:	bf00      	nop
 800818a:	3710      	adds	r7, #16
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}
 8008190:	200133bc 	.word	0x200133bc
 8008194:	0800988c 	.word	0x0800988c
 8008198:	200143c4 	.word	0x200143c4
 800819c:	200143bc 	.word	0x200143bc
 80081a0:	e0001004 	.word	0xe0001004

080081a4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80081ac:	4a04      	ldr	r2, [pc, #16]	; (80081c0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6113      	str	r3, [r2, #16]
}
 80081b2:	bf00      	nop
 80081b4:	370c      	adds	r7, #12
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	200143c4 	.word	0x200143c4

080081c4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80081cc:	f3ef 8311 	mrs	r3, BASEPRI
 80081d0:	f04f 0120 	mov.w	r1, #32
 80081d4:	f381 8811 	msr	BASEPRI, r1
 80081d8:	60fb      	str	r3, [r7, #12]
 80081da:	4808      	ldr	r0, [pc, #32]	; (80081fc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80081dc:	f7ff fc84 	bl	8007ae8 <_PreparePacket>
 80081e0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	68b9      	ldr	r1, [r7, #8]
 80081e6:	68b8      	ldr	r0, [r7, #8]
 80081e8:	f7ff fd6c 	bl	8007cc4 <_SendPacket>
  RECORD_END();
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f383 8811 	msr	BASEPRI, r3
}
 80081f2:	bf00      	nop
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	200143f4 	.word	0x200143f4

08008200 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8008200:	b580      	push	{r7, lr}
 8008202:	b088      	sub	sp, #32
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800820a:	f3ef 8311 	mrs	r3, BASEPRI
 800820e:	f04f 0120 	mov.w	r1, #32
 8008212:	f381 8811 	msr	BASEPRI, r1
 8008216:	617b      	str	r3, [r7, #20]
 8008218:	4816      	ldr	r0, [pc, #88]	; (8008274 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800821a:	f7ff fc65 	bl	8007ae8 <_PreparePacket>
 800821e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	61fb      	str	r3, [r7, #28]
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	61bb      	str	r3, [r7, #24]
 800822c:	e00b      	b.n	8008246 <SEGGER_SYSVIEW_RecordU32+0x46>
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	b2da      	uxtb	r2, r3
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	1c59      	adds	r1, r3, #1
 8008236:	61f9      	str	r1, [r7, #28]
 8008238:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800823c:	b2d2      	uxtb	r2, r2
 800823e:	701a      	strb	r2, [r3, #0]
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	09db      	lsrs	r3, r3, #7
 8008244:	61bb      	str	r3, [r7, #24]
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	2b7f      	cmp	r3, #127	; 0x7f
 800824a:	d8f0      	bhi.n	800822e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	1c5a      	adds	r2, r3, #1
 8008250:	61fa      	str	r2, [r7, #28]
 8008252:	69ba      	ldr	r2, [r7, #24]
 8008254:	b2d2      	uxtb	r2, r2
 8008256:	701a      	strb	r2, [r3, #0]
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	68f9      	ldr	r1, [r7, #12]
 8008260:	6938      	ldr	r0, [r7, #16]
 8008262:	f7ff fd2f 	bl	8007cc4 <_SendPacket>
  RECORD_END();
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	f383 8811 	msr	BASEPRI, r3
}
 800826c:	bf00      	nop
 800826e:	3720      	adds	r7, #32
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}
 8008274:	200143f4 	.word	0x200143f4

08008278 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8008278:	b580      	push	{r7, lr}
 800827a:	b08c      	sub	sp, #48	; 0x30
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8008284:	f3ef 8311 	mrs	r3, BASEPRI
 8008288:	f04f 0120 	mov.w	r1, #32
 800828c:	f381 8811 	msr	BASEPRI, r1
 8008290:	61fb      	str	r3, [r7, #28]
 8008292:	4825      	ldr	r0, [pc, #148]	; (8008328 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8008294:	f7ff fc28 	bl	8007ae8 <_PreparePacket>
 8008298:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80082a6:	e00b      	b.n	80082c0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80082a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082aa:	b2da      	uxtb	r2, r3
 80082ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ae:	1c59      	adds	r1, r3, #1
 80082b0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80082b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80082b6:	b2d2      	uxtb	r2, r2
 80082b8:	701a      	strb	r2, [r3, #0]
 80082ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082bc:	09db      	lsrs	r3, r3, #7
 80082be:	62bb      	str	r3, [r7, #40]	; 0x28
 80082c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c2:	2b7f      	cmp	r3, #127	; 0x7f
 80082c4:	d8f0      	bhi.n	80082a8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80082c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c8:	1c5a      	adds	r2, r3, #1
 80082ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80082cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082ce:	b2d2      	uxtb	r2, r2
 80082d0:	701a      	strb	r2, [r3, #0]
 80082d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	627b      	str	r3, [r7, #36]	; 0x24
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	623b      	str	r3, [r7, #32]
 80082de:	e00b      	b.n	80082f8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80082e0:	6a3b      	ldr	r3, [r7, #32]
 80082e2:	b2da      	uxtb	r2, r3
 80082e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e6:	1c59      	adds	r1, r3, #1
 80082e8:	6279      	str	r1, [r7, #36]	; 0x24
 80082ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80082ee:	b2d2      	uxtb	r2, r2
 80082f0:	701a      	strb	r2, [r3, #0]
 80082f2:	6a3b      	ldr	r3, [r7, #32]
 80082f4:	09db      	lsrs	r3, r3, #7
 80082f6:	623b      	str	r3, [r7, #32]
 80082f8:	6a3b      	ldr	r3, [r7, #32]
 80082fa:	2b7f      	cmp	r3, #127	; 0x7f
 80082fc:	d8f0      	bhi.n	80082e0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80082fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008300:	1c5a      	adds	r2, r3, #1
 8008302:	627a      	str	r2, [r7, #36]	; 0x24
 8008304:	6a3a      	ldr	r2, [r7, #32]
 8008306:	b2d2      	uxtb	r2, r2
 8008308:	701a      	strb	r2, [r3, #0]
 800830a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800830e:	68fa      	ldr	r2, [r7, #12]
 8008310:	6979      	ldr	r1, [r7, #20]
 8008312:	69b8      	ldr	r0, [r7, #24]
 8008314:	f7ff fcd6 	bl	8007cc4 <_SendPacket>
  RECORD_END();
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	f383 8811 	msr	BASEPRI, r3
}
 800831e:	bf00      	nop
 8008320:	3730      	adds	r7, #48	; 0x30
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	200143f4 	.word	0x200143f4

0800832c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800832c:	b580      	push	{r7, lr}
 800832e:	b08e      	sub	sp, #56	; 0x38
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
 8008338:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800833a:	f3ef 8311 	mrs	r3, BASEPRI
 800833e:	f04f 0120 	mov.w	r1, #32
 8008342:	f381 8811 	msr	BASEPRI, r1
 8008346:	61fb      	str	r3, [r7, #28]
 8008348:	4832      	ldr	r0, [pc, #200]	; (8008414 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800834a:	f7ff fbcd 	bl	8007ae8 <_PreparePacket>
 800834e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	637b      	str	r3, [r7, #52]	; 0x34
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	633b      	str	r3, [r7, #48]	; 0x30
 800835c:	e00b      	b.n	8008376 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800835e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008360:	b2da      	uxtb	r2, r3
 8008362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008364:	1c59      	adds	r1, r3, #1
 8008366:	6379      	str	r1, [r7, #52]	; 0x34
 8008368:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800836c:	b2d2      	uxtb	r2, r2
 800836e:	701a      	strb	r2, [r3, #0]
 8008370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008372:	09db      	lsrs	r3, r3, #7
 8008374:	633b      	str	r3, [r7, #48]	; 0x30
 8008376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008378:	2b7f      	cmp	r3, #127	; 0x7f
 800837a:	d8f0      	bhi.n	800835e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800837c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800837e:	1c5a      	adds	r2, r3, #1
 8008380:	637a      	str	r2, [r7, #52]	; 0x34
 8008382:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008384:	b2d2      	uxtb	r2, r2
 8008386:	701a      	strb	r2, [r3, #0]
 8008388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800838a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	62bb      	str	r3, [r7, #40]	; 0x28
 8008394:	e00b      	b.n	80083ae <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8008396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008398:	b2da      	uxtb	r2, r3
 800839a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839c:	1c59      	adds	r1, r3, #1
 800839e:	62f9      	str	r1, [r7, #44]	; 0x2c
 80083a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80083a4:	b2d2      	uxtb	r2, r2
 80083a6:	701a      	strb	r2, [r3, #0]
 80083a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083aa:	09db      	lsrs	r3, r3, #7
 80083ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80083ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b0:	2b7f      	cmp	r3, #127	; 0x7f
 80083b2:	d8f0      	bhi.n	8008396 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80083b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b6:	1c5a      	adds	r2, r3, #1
 80083b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80083ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083bc:	b2d2      	uxtb	r2, r2
 80083be:	701a      	strb	r2, [r3, #0]
 80083c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	627b      	str	r3, [r7, #36]	; 0x24
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	623b      	str	r3, [r7, #32]
 80083cc:	e00b      	b.n	80083e6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80083ce:	6a3b      	ldr	r3, [r7, #32]
 80083d0:	b2da      	uxtb	r2, r3
 80083d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d4:	1c59      	adds	r1, r3, #1
 80083d6:	6279      	str	r1, [r7, #36]	; 0x24
 80083d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80083dc:	b2d2      	uxtb	r2, r2
 80083de:	701a      	strb	r2, [r3, #0]
 80083e0:	6a3b      	ldr	r3, [r7, #32]
 80083e2:	09db      	lsrs	r3, r3, #7
 80083e4:	623b      	str	r3, [r7, #32]
 80083e6:	6a3b      	ldr	r3, [r7, #32]
 80083e8:	2b7f      	cmp	r3, #127	; 0x7f
 80083ea:	d8f0      	bhi.n	80083ce <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80083ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ee:	1c5a      	adds	r2, r3, #1
 80083f0:	627a      	str	r2, [r7, #36]	; 0x24
 80083f2:	6a3a      	ldr	r2, [r7, #32]
 80083f4:	b2d2      	uxtb	r2, r2
 80083f6:	701a      	strb	r2, [r3, #0]
 80083f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fa:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	6979      	ldr	r1, [r7, #20]
 8008400:	69b8      	ldr	r0, [r7, #24]
 8008402:	f7ff fc5f 	bl	8007cc4 <_SendPacket>
  RECORD_END();
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	f383 8811 	msr	BASEPRI, r3
}
 800840c:	bf00      	nop
 800840e:	3738      	adds	r7, #56	; 0x38
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}
 8008414:	200143f4 	.word	0x200143f4

08008418 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8008418:	b580      	push	{r7, lr}
 800841a:	b090      	sub	sp, #64	; 0x40
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	607a      	str	r2, [r7, #4]
 8008424:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8008426:	f3ef 8311 	mrs	r3, BASEPRI
 800842a:	f04f 0120 	mov.w	r1, #32
 800842e:	f381 8811 	msr	BASEPRI, r1
 8008432:	61fb      	str	r3, [r7, #28]
 8008434:	4840      	ldr	r0, [pc, #256]	; (8008538 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8008436:	f7ff fb57 	bl	8007ae8 <_PreparePacket>
 800843a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800843c:	69bb      	ldr	r3, [r7, #24]
 800843e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	63bb      	str	r3, [r7, #56]	; 0x38
 8008448:	e00b      	b.n	8008462 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800844a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844c:	b2da      	uxtb	r2, r3
 800844e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008450:	1c59      	adds	r1, r3, #1
 8008452:	63f9      	str	r1, [r7, #60]	; 0x3c
 8008454:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008458:	b2d2      	uxtb	r2, r2
 800845a:	701a      	strb	r2, [r3, #0]
 800845c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845e:	09db      	lsrs	r3, r3, #7
 8008460:	63bb      	str	r3, [r7, #56]	; 0x38
 8008462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008464:	2b7f      	cmp	r3, #127	; 0x7f
 8008466:	d8f0      	bhi.n	800844a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8008468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800846a:	1c5a      	adds	r2, r3, #1
 800846c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800846e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008470:	b2d2      	uxtb	r2, r2
 8008472:	701a      	strb	r2, [r3, #0]
 8008474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008476:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	637b      	str	r3, [r7, #52]	; 0x34
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	633b      	str	r3, [r7, #48]	; 0x30
 8008480:	e00b      	b.n	800849a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8008482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008484:	b2da      	uxtb	r2, r3
 8008486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008488:	1c59      	adds	r1, r3, #1
 800848a:	6379      	str	r1, [r7, #52]	; 0x34
 800848c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008490:	b2d2      	uxtb	r2, r2
 8008492:	701a      	strb	r2, [r3, #0]
 8008494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008496:	09db      	lsrs	r3, r3, #7
 8008498:	633b      	str	r3, [r7, #48]	; 0x30
 800849a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849c:	2b7f      	cmp	r3, #127	; 0x7f
 800849e:	d8f0      	bhi.n	8008482 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80084a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084a2:	1c5a      	adds	r2, r3, #1
 80084a4:	637a      	str	r2, [r7, #52]	; 0x34
 80084a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084a8:	b2d2      	uxtb	r2, r2
 80084aa:	701a      	strb	r2, [r3, #0]
 80084ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80084b8:	e00b      	b.n	80084d2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80084ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084bc:	b2da      	uxtb	r2, r3
 80084be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c0:	1c59      	adds	r1, r3, #1
 80084c2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80084c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80084c8:	b2d2      	uxtb	r2, r2
 80084ca:	701a      	strb	r2, [r3, #0]
 80084cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ce:	09db      	lsrs	r3, r3, #7
 80084d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80084d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d4:	2b7f      	cmp	r3, #127	; 0x7f
 80084d6:	d8f0      	bhi.n	80084ba <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80084d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084da:	1c5a      	adds	r2, r3, #1
 80084dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80084de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084e0:	b2d2      	uxtb	r2, r2
 80084e2:	701a      	strb	r2, [r3, #0]
 80084e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	627b      	str	r3, [r7, #36]	; 0x24
 80084ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084ee:	623b      	str	r3, [r7, #32]
 80084f0:	e00b      	b.n	800850a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80084f2:	6a3b      	ldr	r3, [r7, #32]
 80084f4:	b2da      	uxtb	r2, r3
 80084f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f8:	1c59      	adds	r1, r3, #1
 80084fa:	6279      	str	r1, [r7, #36]	; 0x24
 80084fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008500:	b2d2      	uxtb	r2, r2
 8008502:	701a      	strb	r2, [r3, #0]
 8008504:	6a3b      	ldr	r3, [r7, #32]
 8008506:	09db      	lsrs	r3, r3, #7
 8008508:	623b      	str	r3, [r7, #32]
 800850a:	6a3b      	ldr	r3, [r7, #32]
 800850c:	2b7f      	cmp	r3, #127	; 0x7f
 800850e:	d8f0      	bhi.n	80084f2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8008510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008512:	1c5a      	adds	r2, r3, #1
 8008514:	627a      	str	r2, [r7, #36]	; 0x24
 8008516:	6a3a      	ldr	r2, [r7, #32]
 8008518:	b2d2      	uxtb	r2, r2
 800851a:	701a      	strb	r2, [r3, #0]
 800851c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	6979      	ldr	r1, [r7, #20]
 8008524:	69b8      	ldr	r0, [r7, #24]
 8008526:	f7ff fbcd 	bl	8007cc4 <_SendPacket>
  RECORD_END();
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	f383 8811 	msr	BASEPRI, r3
}
 8008530:	bf00      	nop
 8008532:	3740      	adds	r7, #64	; 0x40
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}
 8008538:	200143f4 	.word	0x200143f4

0800853c <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 800853c:	b580      	push	{r7, lr}
 800853e:	b092      	sub	sp, #72	; 0x48
 8008540:	af00      	add	r7, sp, #0
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	60b9      	str	r1, [r7, #8]
 8008546:	607a      	str	r2, [r7, #4]
 8008548:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 800854a:	f3ef 8311 	mrs	r3, BASEPRI
 800854e:	f04f 0120 	mov.w	r1, #32
 8008552:	f381 8811 	msr	BASEPRI, r1
 8008556:	61fb      	str	r3, [r7, #28]
 8008558:	484e      	ldr	r0, [pc, #312]	; (8008694 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 800855a:	f7ff fac5 	bl	8007ae8 <_PreparePacket>
 800855e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8008560:	69bb      	ldr	r3, [r7, #24]
 8008562:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	647b      	str	r3, [r7, #68]	; 0x44
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	643b      	str	r3, [r7, #64]	; 0x40
 800856c:	e00b      	b.n	8008586 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 800856e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008570:	b2da      	uxtb	r2, r3
 8008572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008574:	1c59      	adds	r1, r3, #1
 8008576:	6479      	str	r1, [r7, #68]	; 0x44
 8008578:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800857c:	b2d2      	uxtb	r2, r2
 800857e:	701a      	strb	r2, [r3, #0]
 8008580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008582:	09db      	lsrs	r3, r3, #7
 8008584:	643b      	str	r3, [r7, #64]	; 0x40
 8008586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008588:	2b7f      	cmp	r3, #127	; 0x7f
 800858a:	d8f0      	bhi.n	800856e <SEGGER_SYSVIEW_RecordU32x5+0x32>
 800858c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800858e:	1c5a      	adds	r2, r3, #1
 8008590:	647a      	str	r2, [r7, #68]	; 0x44
 8008592:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008594:	b2d2      	uxtb	r2, r2
 8008596:	701a      	strb	r2, [r3, #0]
 8008598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800859a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80085a4:	e00b      	b.n	80085be <SEGGER_SYSVIEW_RecordU32x5+0x82>
 80085a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a8:	b2da      	uxtb	r2, r3
 80085aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085ac:	1c59      	adds	r1, r3, #1
 80085ae:	63f9      	str	r1, [r7, #60]	; 0x3c
 80085b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80085b4:	b2d2      	uxtb	r2, r2
 80085b6:	701a      	strb	r2, [r3, #0]
 80085b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ba:	09db      	lsrs	r3, r3, #7
 80085bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80085be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c0:	2b7f      	cmp	r3, #127	; 0x7f
 80085c2:	d8f0      	bhi.n	80085a6 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 80085c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085c6:	1c5a      	adds	r2, r3, #1
 80085c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80085ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085cc:	b2d2      	uxtb	r2, r2
 80085ce:	701a      	strb	r2, [r3, #0]
 80085d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085d2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	637b      	str	r3, [r7, #52]	; 0x34
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	633b      	str	r3, [r7, #48]	; 0x30
 80085dc:	e00b      	b.n	80085f6 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 80085de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e0:	b2da      	uxtb	r2, r3
 80085e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e4:	1c59      	adds	r1, r3, #1
 80085e6:	6379      	str	r1, [r7, #52]	; 0x34
 80085e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80085ec:	b2d2      	uxtb	r2, r2
 80085ee:	701a      	strb	r2, [r3, #0]
 80085f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f2:	09db      	lsrs	r3, r3, #7
 80085f4:	633b      	str	r3, [r7, #48]	; 0x30
 80085f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f8:	2b7f      	cmp	r3, #127	; 0x7f
 80085fa:	d8f0      	bhi.n	80085de <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 80085fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085fe:	1c5a      	adds	r2, r3, #1
 8008600:	637a      	str	r2, [r7, #52]	; 0x34
 8008602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008604:	b2d2      	uxtb	r2, r2
 8008606:	701a      	strb	r2, [r3, #0]
 8008608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800860a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008612:	62bb      	str	r3, [r7, #40]	; 0x28
 8008614:	e00b      	b.n	800862e <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 8008616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008618:	b2da      	uxtb	r2, r3
 800861a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861c:	1c59      	adds	r1, r3, #1
 800861e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008620:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008624:	b2d2      	uxtb	r2, r2
 8008626:	701a      	strb	r2, [r3, #0]
 8008628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862a:	09db      	lsrs	r3, r3, #7
 800862c:	62bb      	str	r3, [r7, #40]	; 0x28
 800862e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008630:	2b7f      	cmp	r3, #127	; 0x7f
 8008632:	d8f0      	bhi.n	8008616 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8008634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008636:	1c5a      	adds	r2, r3, #1
 8008638:	62fa      	str	r2, [r7, #44]	; 0x2c
 800863a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800863c:	b2d2      	uxtb	r2, r2
 800863e:	701a      	strb	r2, [r3, #0]
 8008640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008642:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	627b      	str	r3, [r7, #36]	; 0x24
 8008648:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800864a:	623b      	str	r3, [r7, #32]
 800864c:	e00b      	b.n	8008666 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 800864e:	6a3b      	ldr	r3, [r7, #32]
 8008650:	b2da      	uxtb	r2, r3
 8008652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008654:	1c59      	adds	r1, r3, #1
 8008656:	6279      	str	r1, [r7, #36]	; 0x24
 8008658:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800865c:	b2d2      	uxtb	r2, r2
 800865e:	701a      	strb	r2, [r3, #0]
 8008660:	6a3b      	ldr	r3, [r7, #32]
 8008662:	09db      	lsrs	r3, r3, #7
 8008664:	623b      	str	r3, [r7, #32]
 8008666:	6a3b      	ldr	r3, [r7, #32]
 8008668:	2b7f      	cmp	r3, #127	; 0x7f
 800866a:	d8f0      	bhi.n	800864e <SEGGER_SYSVIEW_RecordU32x5+0x112>
 800866c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866e:	1c5a      	adds	r2, r3, #1
 8008670:	627a      	str	r2, [r7, #36]	; 0x24
 8008672:	6a3a      	ldr	r2, [r7, #32]
 8008674:	b2d2      	uxtb	r2, r2
 8008676:	701a      	strb	r2, [r3, #0]
 8008678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	6979      	ldr	r1, [r7, #20]
 8008680:	69b8      	ldr	r0, [r7, #24]
 8008682:	f7ff fb1f 	bl	8007cc4 <_SendPacket>
  RECORD_END();
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	f383 8811 	msr	BASEPRI, r3
}
 800868c:	bf00      	nop
 800868e:	3748      	adds	r7, #72	; 0x48
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	200143f4 	.word	0x200143f4

08008698 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8008698:	b580      	push	{r7, lr}
 800869a:	b08c      	sub	sp, #48	; 0x30
 800869c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800869e:	4b58      	ldr	r3, [pc, #352]	; (8008800 <SEGGER_SYSVIEW_Start+0x168>)
 80086a0:	2201      	movs	r2, #1
 80086a2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80086a4:	f3ef 8311 	mrs	r3, BASEPRI
 80086a8:	f04f 0120 	mov.w	r1, #32
 80086ac:	f381 8811 	msr	BASEPRI, r1
 80086b0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80086b2:	4b53      	ldr	r3, [pc, #332]	; (8008800 <SEGGER_SYSVIEW_Start+0x168>)
 80086b4:	785b      	ldrb	r3, [r3, #1]
 80086b6:	220a      	movs	r2, #10
 80086b8:	4952      	ldr	r1, [pc, #328]	; (8008804 <SEGGER_SYSVIEW_Start+0x16c>)
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7f7 fd98 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80086c6:	200a      	movs	r0, #10
 80086c8:	f7ff fd7c 	bl	80081c4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80086cc:	f3ef 8311 	mrs	r3, BASEPRI
 80086d0:	f04f 0120 	mov.w	r1, #32
 80086d4:	f381 8811 	msr	BASEPRI, r1
 80086d8:	60bb      	str	r3, [r7, #8]
 80086da:	484b      	ldr	r0, [pc, #300]	; (8008808 <SEGGER_SYSVIEW_Start+0x170>)
 80086dc:	f7ff fa04 	bl	8007ae8 <_PreparePacket>
 80086e0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086ea:	4b45      	ldr	r3, [pc, #276]	; (8008800 <SEGGER_SYSVIEW_Start+0x168>)
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80086f0:	e00b      	b.n	800870a <SEGGER_SYSVIEW_Start+0x72>
 80086f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f4:	b2da      	uxtb	r2, r3
 80086f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f8:	1c59      	adds	r1, r3, #1
 80086fa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80086fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008700:	b2d2      	uxtb	r2, r2
 8008702:	701a      	strb	r2, [r3, #0]
 8008704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008706:	09db      	lsrs	r3, r3, #7
 8008708:	62bb      	str	r3, [r7, #40]	; 0x28
 800870a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870c:	2b7f      	cmp	r3, #127	; 0x7f
 800870e:	d8f0      	bhi.n	80086f2 <SEGGER_SYSVIEW_Start+0x5a>
 8008710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008712:	1c5a      	adds	r2, r3, #1
 8008714:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008716:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008718:	b2d2      	uxtb	r2, r2
 800871a:	701a      	strb	r2, [r3, #0]
 800871c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	627b      	str	r3, [r7, #36]	; 0x24
 8008724:	4b36      	ldr	r3, [pc, #216]	; (8008800 <SEGGER_SYSVIEW_Start+0x168>)
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	623b      	str	r3, [r7, #32]
 800872a:	e00b      	b.n	8008744 <SEGGER_SYSVIEW_Start+0xac>
 800872c:	6a3b      	ldr	r3, [r7, #32]
 800872e:	b2da      	uxtb	r2, r3
 8008730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008732:	1c59      	adds	r1, r3, #1
 8008734:	6279      	str	r1, [r7, #36]	; 0x24
 8008736:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800873a:	b2d2      	uxtb	r2, r2
 800873c:	701a      	strb	r2, [r3, #0]
 800873e:	6a3b      	ldr	r3, [r7, #32]
 8008740:	09db      	lsrs	r3, r3, #7
 8008742:	623b      	str	r3, [r7, #32]
 8008744:	6a3b      	ldr	r3, [r7, #32]
 8008746:	2b7f      	cmp	r3, #127	; 0x7f
 8008748:	d8f0      	bhi.n	800872c <SEGGER_SYSVIEW_Start+0x94>
 800874a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874c:	1c5a      	adds	r2, r3, #1
 800874e:	627a      	str	r2, [r7, #36]	; 0x24
 8008750:	6a3a      	ldr	r2, [r7, #32]
 8008752:	b2d2      	uxtb	r2, r2
 8008754:	701a      	strb	r2, [r3, #0]
 8008756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008758:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	61fb      	str	r3, [r7, #28]
 800875e:	4b28      	ldr	r3, [pc, #160]	; (8008800 <SEGGER_SYSVIEW_Start+0x168>)
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	61bb      	str	r3, [r7, #24]
 8008764:	e00b      	b.n	800877e <SEGGER_SYSVIEW_Start+0xe6>
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	b2da      	uxtb	r2, r3
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	1c59      	adds	r1, r3, #1
 800876e:	61f9      	str	r1, [r7, #28]
 8008770:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008774:	b2d2      	uxtb	r2, r2
 8008776:	701a      	strb	r2, [r3, #0]
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	09db      	lsrs	r3, r3, #7
 800877c:	61bb      	str	r3, [r7, #24]
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	2b7f      	cmp	r3, #127	; 0x7f
 8008782:	d8f0      	bhi.n	8008766 <SEGGER_SYSVIEW_Start+0xce>
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	1c5a      	adds	r2, r3, #1
 8008788:	61fa      	str	r2, [r7, #28]
 800878a:	69ba      	ldr	r2, [r7, #24]
 800878c:	b2d2      	uxtb	r2, r2
 800878e:	701a      	strb	r2, [r3, #0]
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	617b      	str	r3, [r7, #20]
 8008798:	2300      	movs	r3, #0
 800879a:	613b      	str	r3, [r7, #16]
 800879c:	e00b      	b.n	80087b6 <SEGGER_SYSVIEW_Start+0x11e>
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	b2da      	uxtb	r2, r3
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	1c59      	adds	r1, r3, #1
 80087a6:	6179      	str	r1, [r7, #20]
 80087a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80087ac:	b2d2      	uxtb	r2, r2
 80087ae:	701a      	strb	r2, [r3, #0]
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	09db      	lsrs	r3, r3, #7
 80087b4:	613b      	str	r3, [r7, #16]
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	2b7f      	cmp	r3, #127	; 0x7f
 80087ba:	d8f0      	bhi.n	800879e <SEGGER_SYSVIEW_Start+0x106>
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	1c5a      	adds	r2, r3, #1
 80087c0:	617a      	str	r2, [r7, #20]
 80087c2:	693a      	ldr	r2, [r7, #16]
 80087c4:	b2d2      	uxtb	r2, r2
 80087c6:	701a      	strb	r2, [r3, #0]
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80087cc:	2218      	movs	r2, #24
 80087ce:	6839      	ldr	r1, [r7, #0]
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f7ff fa77 	bl	8007cc4 <_SendPacket>
      RECORD_END();
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80087dc:	4b08      	ldr	r3, [pc, #32]	; (8008800 <SEGGER_SYSVIEW_Start+0x168>)
 80087de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d002      	beq.n	80087ea <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80087e4:	4b06      	ldr	r3, [pc, #24]	; (8008800 <SEGGER_SYSVIEW_Start+0x168>)
 80087e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80087ea:	f000 f9eb 	bl	8008bc4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80087ee:	f000 f9b1 	bl	8008b54 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80087f2:	f000 fc83 	bl	80090fc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80087f6:	bf00      	nop
 80087f8:	3730      	adds	r7, #48	; 0x30
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	200143c4 	.word	0x200143c4
 8008804:	08009984 	.word	0x08009984
 8008808:	200143f4 	.word	0x200143f4

0800880c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008812:	f3ef 8311 	mrs	r3, BASEPRI
 8008816:	f04f 0120 	mov.w	r1, #32
 800881a:	f381 8811 	msr	BASEPRI, r1
 800881e:	607b      	str	r3, [r7, #4]
 8008820:	480b      	ldr	r0, [pc, #44]	; (8008850 <SEGGER_SYSVIEW_Stop+0x44>)
 8008822:	f7ff f961 	bl	8007ae8 <_PreparePacket>
 8008826:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8008828:	4b0a      	ldr	r3, [pc, #40]	; (8008854 <SEGGER_SYSVIEW_Stop+0x48>)
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d007      	beq.n	8008840 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8008830:	220b      	movs	r2, #11
 8008832:	6839      	ldr	r1, [r7, #0]
 8008834:	6838      	ldr	r0, [r7, #0]
 8008836:	f7ff fa45 	bl	8007cc4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800883a:	4b06      	ldr	r3, [pc, #24]	; (8008854 <SEGGER_SYSVIEW_Stop+0x48>)
 800883c:	2200      	movs	r2, #0
 800883e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f383 8811 	msr	BASEPRI, r3
}
 8008846:	bf00      	nop
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	200143f4 	.word	0x200143f4
 8008854:	200143c4 	.word	0x200143c4

08008858 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8008858:	b580      	push	{r7, lr}
 800885a:	b08c      	sub	sp, #48	; 0x30
 800885c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800885e:	f3ef 8311 	mrs	r3, BASEPRI
 8008862:	f04f 0120 	mov.w	r1, #32
 8008866:	f381 8811 	msr	BASEPRI, r1
 800886a:	60fb      	str	r3, [r7, #12]
 800886c:	4845      	ldr	r0, [pc, #276]	; (8008984 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800886e:	f7ff f93b 	bl	8007ae8 <_PreparePacket>
 8008872:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800887c:	4b42      	ldr	r3, [pc, #264]	; (8008988 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	62bb      	str	r3, [r7, #40]	; 0x28
 8008882:	e00b      	b.n	800889c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8008884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008886:	b2da      	uxtb	r2, r3
 8008888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800888a:	1c59      	adds	r1, r3, #1
 800888c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800888e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008892:	b2d2      	uxtb	r2, r2
 8008894:	701a      	strb	r2, [r3, #0]
 8008896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008898:	09db      	lsrs	r3, r3, #7
 800889a:	62bb      	str	r3, [r7, #40]	; 0x28
 800889c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889e:	2b7f      	cmp	r3, #127	; 0x7f
 80088a0:	d8f0      	bhi.n	8008884 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80088a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a4:	1c5a      	adds	r2, r3, #1
 80088a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80088a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088aa:	b2d2      	uxtb	r2, r2
 80088ac:	701a      	strb	r2, [r3, #0]
 80088ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	627b      	str	r3, [r7, #36]	; 0x24
 80088b6:	4b34      	ldr	r3, [pc, #208]	; (8008988 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	623b      	str	r3, [r7, #32]
 80088bc:	e00b      	b.n	80088d6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80088be:	6a3b      	ldr	r3, [r7, #32]
 80088c0:	b2da      	uxtb	r2, r3
 80088c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c4:	1c59      	adds	r1, r3, #1
 80088c6:	6279      	str	r1, [r7, #36]	; 0x24
 80088c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80088cc:	b2d2      	uxtb	r2, r2
 80088ce:	701a      	strb	r2, [r3, #0]
 80088d0:	6a3b      	ldr	r3, [r7, #32]
 80088d2:	09db      	lsrs	r3, r3, #7
 80088d4:	623b      	str	r3, [r7, #32]
 80088d6:	6a3b      	ldr	r3, [r7, #32]
 80088d8:	2b7f      	cmp	r3, #127	; 0x7f
 80088da:	d8f0      	bhi.n	80088be <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80088dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088de:	1c5a      	adds	r2, r3, #1
 80088e0:	627a      	str	r2, [r7, #36]	; 0x24
 80088e2:	6a3a      	ldr	r2, [r7, #32]
 80088e4:	b2d2      	uxtb	r2, r2
 80088e6:	701a      	strb	r2, [r3, #0]
 80088e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	61fb      	str	r3, [r7, #28]
 80088f0:	4b25      	ldr	r3, [pc, #148]	; (8008988 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80088f2:	691b      	ldr	r3, [r3, #16]
 80088f4:	61bb      	str	r3, [r7, #24]
 80088f6:	e00b      	b.n	8008910 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80088f8:	69bb      	ldr	r3, [r7, #24]
 80088fa:	b2da      	uxtb	r2, r3
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	1c59      	adds	r1, r3, #1
 8008900:	61f9      	str	r1, [r7, #28]
 8008902:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008906:	b2d2      	uxtb	r2, r2
 8008908:	701a      	strb	r2, [r3, #0]
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	09db      	lsrs	r3, r3, #7
 800890e:	61bb      	str	r3, [r7, #24]
 8008910:	69bb      	ldr	r3, [r7, #24]
 8008912:	2b7f      	cmp	r3, #127	; 0x7f
 8008914:	d8f0      	bhi.n	80088f8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8008916:	69fb      	ldr	r3, [r7, #28]
 8008918:	1c5a      	adds	r2, r3, #1
 800891a:	61fa      	str	r2, [r7, #28]
 800891c:	69ba      	ldr	r2, [r7, #24]
 800891e:	b2d2      	uxtb	r2, r2
 8008920:	701a      	strb	r2, [r3, #0]
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	617b      	str	r3, [r7, #20]
 800892a:	2300      	movs	r3, #0
 800892c:	613b      	str	r3, [r7, #16]
 800892e:	e00b      	b.n	8008948 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	b2da      	uxtb	r2, r3
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	1c59      	adds	r1, r3, #1
 8008938:	6179      	str	r1, [r7, #20]
 800893a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800893e:	b2d2      	uxtb	r2, r2
 8008940:	701a      	strb	r2, [r3, #0]
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	09db      	lsrs	r3, r3, #7
 8008946:	613b      	str	r3, [r7, #16]
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	2b7f      	cmp	r3, #127	; 0x7f
 800894c:	d8f0      	bhi.n	8008930 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	1c5a      	adds	r2, r3, #1
 8008952:	617a      	str	r2, [r7, #20]
 8008954:	693a      	ldr	r2, [r7, #16]
 8008956:	b2d2      	uxtb	r2, r2
 8008958:	701a      	strb	r2, [r3, #0]
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800895e:	2218      	movs	r2, #24
 8008960:	6879      	ldr	r1, [r7, #4]
 8008962:	68b8      	ldr	r0, [r7, #8]
 8008964:	f7ff f9ae 	bl	8007cc4 <_SendPacket>
  RECORD_END();
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800896e:	4b06      	ldr	r3, [pc, #24]	; (8008988 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008972:	2b00      	cmp	r3, #0
 8008974:	d002      	beq.n	800897c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8008976:	4b04      	ldr	r3, [pc, #16]	; (8008988 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897a:	4798      	blx	r3
  }
}
 800897c:	bf00      	nop
 800897e:	3730      	adds	r7, #48	; 0x30
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}
 8008984:	200143f4 	.word	0x200143f4
 8008988:	200143c4 	.word	0x200143c4

0800898c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800898c:	b580      	push	{r7, lr}
 800898e:	b092      	sub	sp, #72	; 0x48
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8008994:	f3ef 8311 	mrs	r3, BASEPRI
 8008998:	f04f 0120 	mov.w	r1, #32
 800899c:	f381 8811 	msr	BASEPRI, r1
 80089a0:	617b      	str	r3, [r7, #20]
 80089a2:	486a      	ldr	r0, [pc, #424]	; (8008b4c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80089a4:	f7ff f8a0 	bl	8007ae8 <_PreparePacket>
 80089a8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	647b      	str	r3, [r7, #68]	; 0x44
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	4b66      	ldr	r3, [pc, #408]	; (8008b50 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80089b8:	691b      	ldr	r3, [r3, #16]
 80089ba:	1ad3      	subs	r3, r2, r3
 80089bc:	643b      	str	r3, [r7, #64]	; 0x40
 80089be:	e00b      	b.n	80089d8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80089c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089c2:	b2da      	uxtb	r2, r3
 80089c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089c6:	1c59      	adds	r1, r3, #1
 80089c8:	6479      	str	r1, [r7, #68]	; 0x44
 80089ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80089ce:	b2d2      	uxtb	r2, r2
 80089d0:	701a      	strb	r2, [r3, #0]
 80089d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089d4:	09db      	lsrs	r3, r3, #7
 80089d6:	643b      	str	r3, [r7, #64]	; 0x40
 80089d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089da:	2b7f      	cmp	r3, #127	; 0x7f
 80089dc:	d8f0      	bhi.n	80089c0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80089de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089e0:	1c5a      	adds	r2, r3, #1
 80089e2:	647a      	str	r2, [r7, #68]	; 0x44
 80089e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089e6:	b2d2      	uxtb	r2, r2
 80089e8:	701a      	strb	r2, [r3, #0]
 80089ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089ec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80089f8:	e00b      	b.n	8008a12 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80089fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089fc:	b2da      	uxtb	r2, r3
 80089fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a00:	1c59      	adds	r1, r3, #1
 8008a02:	63f9      	str	r1, [r7, #60]	; 0x3c
 8008a04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a08:	b2d2      	uxtb	r2, r2
 8008a0a:	701a      	strb	r2, [r3, #0]
 8008a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0e:	09db      	lsrs	r3, r3, #7
 8008a10:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a14:	2b7f      	cmp	r3, #127	; 0x7f
 8008a16:	d8f0      	bhi.n	80089fa <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8008a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a1a:	1c5a      	adds	r2, r3, #1
 8008a1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008a1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a20:	b2d2      	uxtb	r2, r2
 8008a22:	701a      	strb	r2, [r3, #0]
 8008a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a26:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	2220      	movs	r2, #32
 8008a2e:	4619      	mov	r1, r3
 8008a30:	68f8      	ldr	r0, [r7, #12]
 8008a32:	f7ff f809 	bl	8007a48 <_EncodeStr>
 8008a36:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8008a38:	2209      	movs	r2, #9
 8008a3a:	68f9      	ldr	r1, [r7, #12]
 8008a3c:	6938      	ldr	r0, [r7, #16]
 8008a3e:	f7ff f941 	bl	8007cc4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	637b      	str	r3, [r7, #52]	; 0x34
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	4b40      	ldr	r3, [pc, #256]	; (8008b50 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	1ad3      	subs	r3, r2, r3
 8008a54:	633b      	str	r3, [r7, #48]	; 0x30
 8008a56:	e00b      	b.n	8008a70 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8008a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5a:	b2da      	uxtb	r2, r3
 8008a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a5e:	1c59      	adds	r1, r3, #1
 8008a60:	6379      	str	r1, [r7, #52]	; 0x34
 8008a62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a66:	b2d2      	uxtb	r2, r2
 8008a68:	701a      	strb	r2, [r3, #0]
 8008a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6c:	09db      	lsrs	r3, r3, #7
 8008a6e:	633b      	str	r3, [r7, #48]	; 0x30
 8008a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a72:	2b7f      	cmp	r3, #127	; 0x7f
 8008a74:	d8f0      	bhi.n	8008a58 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8008a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a78:	1c5a      	adds	r2, r3, #1
 8008a7a:	637a      	str	r2, [r7, #52]	; 0x34
 8008a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a7e:	b2d2      	uxtb	r2, r2
 8008a80:	701a      	strb	r2, [r3, #0]
 8008a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a84:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	68db      	ldr	r3, [r3, #12]
 8008a8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a90:	e00b      	b.n	8008aaa <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8008a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a94:	b2da      	uxtb	r2, r3
 8008a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a98:	1c59      	adds	r1, r3, #1
 8008a9a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008a9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008aa0:	b2d2      	uxtb	r2, r2
 8008aa2:	701a      	strb	r2, [r3, #0]
 8008aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa6:	09db      	lsrs	r3, r3, #7
 8008aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aac:	2b7f      	cmp	r3, #127	; 0x7f
 8008aae:	d8f0      	bhi.n	8008a92 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8008ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab2:	1c5a      	adds	r2, r3, #1
 8008ab4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ab6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ab8:	b2d2      	uxtb	r2, r2
 8008aba:	701a      	strb	r2, [r3, #0]
 8008abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008abe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	691b      	ldr	r3, [r3, #16]
 8008ac8:	623b      	str	r3, [r7, #32]
 8008aca:	e00b      	b.n	8008ae4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8008acc:	6a3b      	ldr	r3, [r7, #32]
 8008ace:	b2da      	uxtb	r2, r3
 8008ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad2:	1c59      	adds	r1, r3, #1
 8008ad4:	6279      	str	r1, [r7, #36]	; 0x24
 8008ad6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008ada:	b2d2      	uxtb	r2, r2
 8008adc:	701a      	strb	r2, [r3, #0]
 8008ade:	6a3b      	ldr	r3, [r7, #32]
 8008ae0:	09db      	lsrs	r3, r3, #7
 8008ae2:	623b      	str	r3, [r7, #32]
 8008ae4:	6a3b      	ldr	r3, [r7, #32]
 8008ae6:	2b7f      	cmp	r3, #127	; 0x7f
 8008ae8:	d8f0      	bhi.n	8008acc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8008aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aec:	1c5a      	adds	r2, r3, #1
 8008aee:	627a      	str	r2, [r7, #36]	; 0x24
 8008af0:	6a3a      	ldr	r2, [r7, #32]
 8008af2:	b2d2      	uxtb	r2, r2
 8008af4:	701a      	strb	r2, [r3, #0]
 8008af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	61fb      	str	r3, [r7, #28]
 8008afe:	2300      	movs	r3, #0
 8008b00:	61bb      	str	r3, [r7, #24]
 8008b02:	e00b      	b.n	8008b1c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8008b04:	69bb      	ldr	r3, [r7, #24]
 8008b06:	b2da      	uxtb	r2, r3
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	1c59      	adds	r1, r3, #1
 8008b0c:	61f9      	str	r1, [r7, #28]
 8008b0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008b12:	b2d2      	uxtb	r2, r2
 8008b14:	701a      	strb	r2, [r3, #0]
 8008b16:	69bb      	ldr	r3, [r7, #24]
 8008b18:	09db      	lsrs	r3, r3, #7
 8008b1a:	61bb      	str	r3, [r7, #24]
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	2b7f      	cmp	r3, #127	; 0x7f
 8008b20:	d8f0      	bhi.n	8008b04 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8008b22:	69fb      	ldr	r3, [r7, #28]
 8008b24:	1c5a      	adds	r2, r3, #1
 8008b26:	61fa      	str	r2, [r7, #28]
 8008b28:	69ba      	ldr	r2, [r7, #24]
 8008b2a:	b2d2      	uxtb	r2, r2
 8008b2c:	701a      	strb	r2, [r3, #0]
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8008b32:	2215      	movs	r2, #21
 8008b34:	68f9      	ldr	r1, [r7, #12]
 8008b36:	6938      	ldr	r0, [r7, #16]
 8008b38:	f7ff f8c4 	bl	8007cc4 <_SendPacket>
  RECORD_END();
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	f383 8811 	msr	BASEPRI, r3
}
 8008b42:	bf00      	nop
 8008b44:	3748      	adds	r7, #72	; 0x48
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	200143f4 	.word	0x200143f4
 8008b50:	200143c4 	.word	0x200143c4

08008b54 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8008b54:	b580      	push	{r7, lr}
 8008b56:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8008b58:	4b07      	ldr	r3, [pc, #28]	; (8008b78 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008b5a:	6a1b      	ldr	r3, [r3, #32]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d008      	beq.n	8008b72 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8008b60:	4b05      	ldr	r3, [pc, #20]	; (8008b78 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008b62:	6a1b      	ldr	r3, [r3, #32]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d003      	beq.n	8008b72 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8008b6a:	4b03      	ldr	r3, [pc, #12]	; (8008b78 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008b6c:	6a1b      	ldr	r3, [r3, #32]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	4798      	blx	r3
  }
}
 8008b72:	bf00      	nop
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	200143c4 	.word	0x200143c4

08008b7c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b086      	sub	sp, #24
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008b84:	f3ef 8311 	mrs	r3, BASEPRI
 8008b88:	f04f 0120 	mov.w	r1, #32
 8008b8c:	f381 8811 	msr	BASEPRI, r1
 8008b90:	617b      	str	r3, [r7, #20]
 8008b92:	480b      	ldr	r0, [pc, #44]	; (8008bc0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8008b94:	f7fe ffa8 	bl	8007ae8 <_PreparePacket>
 8008b98:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008b9a:	2280      	movs	r2, #128	; 0x80
 8008b9c:	6879      	ldr	r1, [r7, #4]
 8008b9e:	6938      	ldr	r0, [r7, #16]
 8008ba0:	f7fe ff52 	bl	8007a48 <_EncodeStr>
 8008ba4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8008ba6:	220e      	movs	r2, #14
 8008ba8:	68f9      	ldr	r1, [r7, #12]
 8008baa:	6938      	ldr	r0, [r7, #16]
 8008bac:	f7ff f88a 	bl	8007cc4 <_SendPacket>
  RECORD_END();
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	f383 8811 	msr	BASEPRI, r3
}
 8008bb6:	bf00      	nop
 8008bb8:	3718      	adds	r7, #24
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	200143f4 	.word	0x200143f4

08008bc4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8008bc4:	b590      	push	{r4, r7, lr}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8008bca:	4b15      	ldr	r3, [pc, #84]	; (8008c20 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008bcc:	6a1b      	ldr	r3, [r3, #32]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d01a      	beq.n	8008c08 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8008bd2:	4b13      	ldr	r3, [pc, #76]	; (8008c20 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008bd4:	6a1b      	ldr	r3, [r3, #32]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d015      	beq.n	8008c08 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8008bdc:	4b10      	ldr	r3, [pc, #64]	; (8008c20 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008bde:	6a1b      	ldr	r3, [r3, #32]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4798      	blx	r3
 8008be4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8008be8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8008bea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bee:	f04f 0200 	mov.w	r2, #0
 8008bf2:	f04f 0300 	mov.w	r3, #0
 8008bf6:	000a      	movs	r2, r1
 8008bf8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	4621      	mov	r1, r4
 8008c00:	200d      	movs	r0, #13
 8008c02:	f7ff fb39 	bl	8008278 <SEGGER_SYSVIEW_RecordU32x2>
 8008c06:	e006      	b.n	8008c16 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8008c08:	4b06      	ldr	r3, [pc, #24]	; (8008c24 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	200c      	movs	r0, #12
 8008c10:	f7ff faf6 	bl	8008200 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8008c14:	bf00      	nop
 8008c16:	bf00      	nop
 8008c18:	370c      	adds	r7, #12
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd90      	pop	{r4, r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	200143c4 	.word	0x200143c4
 8008c24:	e0001004 	.word	0xe0001004

08008c28 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b086      	sub	sp, #24
 8008c2c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008c2e:	f3ef 8311 	mrs	r3, BASEPRI
 8008c32:	f04f 0120 	mov.w	r1, #32
 8008c36:	f381 8811 	msr	BASEPRI, r1
 8008c3a:	60fb      	str	r3, [r7, #12]
 8008c3c:	4819      	ldr	r0, [pc, #100]	; (8008ca4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8008c3e:	f7fe ff53 	bl	8007ae8 <_PreparePacket>
 8008c42:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8008c48:	4b17      	ldr	r3, [pc, #92]	; (8008ca8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c50:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	617b      	str	r3, [r7, #20]
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	613b      	str	r3, [r7, #16]
 8008c5a:	e00b      	b.n	8008c74 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	b2da      	uxtb	r2, r3
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	1c59      	adds	r1, r3, #1
 8008c64:	6179      	str	r1, [r7, #20]
 8008c66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008c6a:	b2d2      	uxtb	r2, r2
 8008c6c:	701a      	strb	r2, [r3, #0]
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	09db      	lsrs	r3, r3, #7
 8008c72:	613b      	str	r3, [r7, #16]
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	2b7f      	cmp	r3, #127	; 0x7f
 8008c78:	d8f0      	bhi.n	8008c5c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	1c5a      	adds	r2, r3, #1
 8008c7e:	617a      	str	r2, [r7, #20]
 8008c80:	693a      	ldr	r2, [r7, #16]
 8008c82:	b2d2      	uxtb	r2, r2
 8008c84:	701a      	strb	r2, [r3, #0]
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8008c8a:	2202      	movs	r2, #2
 8008c8c:	6879      	ldr	r1, [r7, #4]
 8008c8e:	68b8      	ldr	r0, [r7, #8]
 8008c90:	f7ff f818 	bl	8007cc4 <_SendPacket>
  RECORD_END();
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f383 8811 	msr	BASEPRI, r3
}
 8008c9a:	bf00      	nop
 8008c9c:	3718      	adds	r7, #24
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	200143f4 	.word	0x200143f4
 8008ca8:	e000ed04 	.word	0xe000ed04

08008cac <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008cb2:	f3ef 8311 	mrs	r3, BASEPRI
 8008cb6:	f04f 0120 	mov.w	r1, #32
 8008cba:	f381 8811 	msr	BASEPRI, r1
 8008cbe:	607b      	str	r3, [r7, #4]
 8008cc0:	4807      	ldr	r0, [pc, #28]	; (8008ce0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8008cc2:	f7fe ff11 	bl	8007ae8 <_PreparePacket>
 8008cc6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8008cc8:	2203      	movs	r2, #3
 8008cca:	6839      	ldr	r1, [r7, #0]
 8008ccc:	6838      	ldr	r0, [r7, #0]
 8008cce:	f7fe fff9 	bl	8007cc4 <_SendPacket>
  RECORD_END();
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f383 8811 	msr	BASEPRI, r3
}
 8008cd8:	bf00      	nop
 8008cda:	3708      	adds	r7, #8
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	200143f4 	.word	0x200143f4

08008ce4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008cea:	f3ef 8311 	mrs	r3, BASEPRI
 8008cee:	f04f 0120 	mov.w	r1, #32
 8008cf2:	f381 8811 	msr	BASEPRI, r1
 8008cf6:	607b      	str	r3, [r7, #4]
 8008cf8:	4807      	ldr	r0, [pc, #28]	; (8008d18 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8008cfa:	f7fe fef5 	bl	8007ae8 <_PreparePacket>
 8008cfe:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8008d00:	2212      	movs	r2, #18
 8008d02:	6839      	ldr	r1, [r7, #0]
 8008d04:	6838      	ldr	r0, [r7, #0]
 8008d06:	f7fe ffdd 	bl	8007cc4 <_SendPacket>
  RECORD_END();
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f383 8811 	msr	BASEPRI, r3
}
 8008d10:	bf00      	nop
 8008d12:	3708      	adds	r7, #8
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	200143f4 	.word	0x200143f4

08008d1c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008d22:	f3ef 8311 	mrs	r3, BASEPRI
 8008d26:	f04f 0120 	mov.w	r1, #32
 8008d2a:	f381 8811 	msr	BASEPRI, r1
 8008d2e:	607b      	str	r3, [r7, #4]
 8008d30:	4807      	ldr	r0, [pc, #28]	; (8008d50 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8008d32:	f7fe fed9 	bl	8007ae8 <_PreparePacket>
 8008d36:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8008d38:	2211      	movs	r2, #17
 8008d3a:	6839      	ldr	r1, [r7, #0]
 8008d3c:	6838      	ldr	r0, [r7, #0]
 8008d3e:	f7fe ffc1 	bl	8007cc4 <_SendPacket>
  RECORD_END();
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f383 8811 	msr	BASEPRI, r3
}
 8008d48:	bf00      	nop
 8008d4a:	3708      	adds	r7, #8
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	200143f4 	.word	0x200143f4

08008d54 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b088      	sub	sp, #32
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008d5c:	f3ef 8311 	mrs	r3, BASEPRI
 8008d60:	f04f 0120 	mov.w	r1, #32
 8008d64:	f381 8811 	msr	BASEPRI, r1
 8008d68:	617b      	str	r3, [r7, #20]
 8008d6a:	4819      	ldr	r0, [pc, #100]	; (8008dd0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8008d6c:	f7fe febc 	bl	8007ae8 <_PreparePacket>
 8008d70:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008d76:	4b17      	ldr	r3, [pc, #92]	; (8008dd4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8008d78:	691b      	ldr	r3, [r3, #16]
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	1ad3      	subs	r3, r2, r3
 8008d7e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	61fb      	str	r3, [r7, #28]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	61bb      	str	r3, [r7, #24]
 8008d88:	e00b      	b.n	8008da2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	b2da      	uxtb	r2, r3
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	1c59      	adds	r1, r3, #1
 8008d92:	61f9      	str	r1, [r7, #28]
 8008d94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008d98:	b2d2      	uxtb	r2, r2
 8008d9a:	701a      	strb	r2, [r3, #0]
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	09db      	lsrs	r3, r3, #7
 8008da0:	61bb      	str	r3, [r7, #24]
 8008da2:	69bb      	ldr	r3, [r7, #24]
 8008da4:	2b7f      	cmp	r3, #127	; 0x7f
 8008da6:	d8f0      	bhi.n	8008d8a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	1c5a      	adds	r2, r3, #1
 8008dac:	61fa      	str	r2, [r7, #28]
 8008dae:	69ba      	ldr	r2, [r7, #24]
 8008db0:	b2d2      	uxtb	r2, r2
 8008db2:	701a      	strb	r2, [r3, #0]
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8008db8:	2208      	movs	r2, #8
 8008dba:	68f9      	ldr	r1, [r7, #12]
 8008dbc:	6938      	ldr	r0, [r7, #16]
 8008dbe:	f7fe ff81 	bl	8007cc4 <_SendPacket>
  RECORD_END();
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	f383 8811 	msr	BASEPRI, r3
}
 8008dc8:	bf00      	nop
 8008dca:	3720      	adds	r7, #32
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	200143f4 	.word	0x200143f4
 8008dd4:	200143c4 	.word	0x200143c4

08008dd8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b088      	sub	sp, #32
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008de0:	f3ef 8311 	mrs	r3, BASEPRI
 8008de4:	f04f 0120 	mov.w	r1, #32
 8008de8:	f381 8811 	msr	BASEPRI, r1
 8008dec:	617b      	str	r3, [r7, #20]
 8008dee:	4819      	ldr	r0, [pc, #100]	; (8008e54 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8008df0:	f7fe fe7a 	bl	8007ae8 <_PreparePacket>
 8008df4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008dfa:	4b17      	ldr	r3, [pc, #92]	; (8008e58 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	1ad3      	subs	r3, r2, r3
 8008e02:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	61fb      	str	r3, [r7, #28]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	61bb      	str	r3, [r7, #24]
 8008e0c:	e00b      	b.n	8008e26 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	b2da      	uxtb	r2, r3
 8008e12:	69fb      	ldr	r3, [r7, #28]
 8008e14:	1c59      	adds	r1, r3, #1
 8008e16:	61f9      	str	r1, [r7, #28]
 8008e18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008e1c:	b2d2      	uxtb	r2, r2
 8008e1e:	701a      	strb	r2, [r3, #0]
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	09db      	lsrs	r3, r3, #7
 8008e24:	61bb      	str	r3, [r7, #24]
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	2b7f      	cmp	r3, #127	; 0x7f
 8008e2a:	d8f0      	bhi.n	8008e0e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	1c5a      	adds	r2, r3, #1
 8008e30:	61fa      	str	r2, [r7, #28]
 8008e32:	69ba      	ldr	r2, [r7, #24]
 8008e34:	b2d2      	uxtb	r2, r2
 8008e36:	701a      	strb	r2, [r3, #0]
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8008e3c:	2204      	movs	r2, #4
 8008e3e:	68f9      	ldr	r1, [r7, #12]
 8008e40:	6938      	ldr	r0, [r7, #16]
 8008e42:	f7fe ff3f 	bl	8007cc4 <_SendPacket>
  RECORD_END();
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	f383 8811 	msr	BASEPRI, r3
}
 8008e4c:	bf00      	nop
 8008e4e:	3720      	adds	r7, #32
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	200143f4 	.word	0x200143f4
 8008e58:	200143c4 	.word	0x200143c4

08008e5c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b088      	sub	sp, #32
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008e64:	f3ef 8311 	mrs	r3, BASEPRI
 8008e68:	f04f 0120 	mov.w	r1, #32
 8008e6c:	f381 8811 	msr	BASEPRI, r1
 8008e70:	617b      	str	r3, [r7, #20]
 8008e72:	4819      	ldr	r0, [pc, #100]	; (8008ed8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8008e74:	f7fe fe38 	bl	8007ae8 <_PreparePacket>
 8008e78:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008e7e:	4b17      	ldr	r3, [pc, #92]	; (8008edc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8008e80:	691b      	ldr	r3, [r3, #16]
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	1ad3      	subs	r3, r2, r3
 8008e86:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	61fb      	str	r3, [r7, #28]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	61bb      	str	r3, [r7, #24]
 8008e90:	e00b      	b.n	8008eaa <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8008e92:	69bb      	ldr	r3, [r7, #24]
 8008e94:	b2da      	uxtb	r2, r3
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	1c59      	adds	r1, r3, #1
 8008e9a:	61f9      	str	r1, [r7, #28]
 8008e9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008ea0:	b2d2      	uxtb	r2, r2
 8008ea2:	701a      	strb	r2, [r3, #0]
 8008ea4:	69bb      	ldr	r3, [r7, #24]
 8008ea6:	09db      	lsrs	r3, r3, #7
 8008ea8:	61bb      	str	r3, [r7, #24]
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	2b7f      	cmp	r3, #127	; 0x7f
 8008eae:	d8f0      	bhi.n	8008e92 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	1c5a      	adds	r2, r3, #1
 8008eb4:	61fa      	str	r2, [r7, #28]
 8008eb6:	69ba      	ldr	r2, [r7, #24]
 8008eb8:	b2d2      	uxtb	r2, r2
 8008eba:	701a      	strb	r2, [r3, #0]
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8008ec0:	2206      	movs	r2, #6
 8008ec2:	68f9      	ldr	r1, [r7, #12]
 8008ec4:	6938      	ldr	r0, [r7, #16]
 8008ec6:	f7fe fefd 	bl	8007cc4 <_SendPacket>
  RECORD_END();
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	f383 8811 	msr	BASEPRI, r3
}
 8008ed0:	bf00      	nop
 8008ed2:	3720      	adds	r7, #32
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	200143f4 	.word	0x200143f4
 8008edc:	200143c4 	.word	0x200143c4

08008ee0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b08a      	sub	sp, #40	; 0x28
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8008eea:	f3ef 8311 	mrs	r3, BASEPRI
 8008eee:	f04f 0120 	mov.w	r1, #32
 8008ef2:	f381 8811 	msr	BASEPRI, r1
 8008ef6:	617b      	str	r3, [r7, #20]
 8008ef8:	4827      	ldr	r0, [pc, #156]	; (8008f98 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8008efa:	f7fe fdf5 	bl	8007ae8 <_PreparePacket>
 8008efe:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008f04:	4b25      	ldr	r3, [pc, #148]	; (8008f9c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	1ad3      	subs	r3, r2, r3
 8008f0c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	627b      	str	r3, [r7, #36]	; 0x24
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	623b      	str	r3, [r7, #32]
 8008f16:	e00b      	b.n	8008f30 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8008f18:	6a3b      	ldr	r3, [r7, #32]
 8008f1a:	b2da      	uxtb	r2, r3
 8008f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1e:	1c59      	adds	r1, r3, #1
 8008f20:	6279      	str	r1, [r7, #36]	; 0x24
 8008f22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008f26:	b2d2      	uxtb	r2, r2
 8008f28:	701a      	strb	r2, [r3, #0]
 8008f2a:	6a3b      	ldr	r3, [r7, #32]
 8008f2c:	09db      	lsrs	r3, r3, #7
 8008f2e:	623b      	str	r3, [r7, #32]
 8008f30:	6a3b      	ldr	r3, [r7, #32]
 8008f32:	2b7f      	cmp	r3, #127	; 0x7f
 8008f34:	d8f0      	bhi.n	8008f18 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8008f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f38:	1c5a      	adds	r2, r3, #1
 8008f3a:	627a      	str	r2, [r7, #36]	; 0x24
 8008f3c:	6a3a      	ldr	r2, [r7, #32]
 8008f3e:	b2d2      	uxtb	r2, r2
 8008f40:	701a      	strb	r2, [r3, #0]
 8008f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f44:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	61fb      	str	r3, [r7, #28]
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	61bb      	str	r3, [r7, #24]
 8008f4e:	e00b      	b.n	8008f68 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	b2da      	uxtb	r2, r3
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	1c59      	adds	r1, r3, #1
 8008f58:	61f9      	str	r1, [r7, #28]
 8008f5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008f5e:	b2d2      	uxtb	r2, r2
 8008f60:	701a      	strb	r2, [r3, #0]
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	09db      	lsrs	r3, r3, #7
 8008f66:	61bb      	str	r3, [r7, #24]
 8008f68:	69bb      	ldr	r3, [r7, #24]
 8008f6a:	2b7f      	cmp	r3, #127	; 0x7f
 8008f6c:	d8f0      	bhi.n	8008f50 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	1c5a      	adds	r2, r3, #1
 8008f72:	61fa      	str	r2, [r7, #28]
 8008f74:	69ba      	ldr	r2, [r7, #24]
 8008f76:	b2d2      	uxtb	r2, r2
 8008f78:	701a      	strb	r2, [r3, #0]
 8008f7a:	69fb      	ldr	r3, [r7, #28]
 8008f7c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8008f7e:	2207      	movs	r2, #7
 8008f80:	68f9      	ldr	r1, [r7, #12]
 8008f82:	6938      	ldr	r0, [r7, #16]
 8008f84:	f7fe fe9e 	bl	8007cc4 <_SendPacket>
  RECORD_END();
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	f383 8811 	msr	BASEPRI, r3
}
 8008f8e:	bf00      	nop
 8008f90:	3728      	adds	r7, #40	; 0x28
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	200143f4 	.word	0x200143f4
 8008f9c:	200143c4 	.word	0x200143c4

08008fa0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8008fa8:	4b04      	ldr	r3, [pc, #16]	; (8008fbc <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8008faa:	691b      	ldr	r3, [r3, #16]
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	1ad3      	subs	r3, r2, r3
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	370c      	adds	r7, #12
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr
 8008fbc:	200143c4 	.word	0x200143c4

08008fc0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b08c      	sub	sp, #48	; 0x30
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8008fca:	4b3b      	ldr	r3, [pc, #236]	; (80090b8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d06d      	beq.n	80090ae <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8008fd2:	4b39      	ldr	r3, [pc, #228]	; (80090b8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8008fd8:	2300      	movs	r3, #0
 8008fda:	62bb      	str	r3, [r7, #40]	; 0x28
 8008fdc:	e008      	b.n	8008ff0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8008fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe0:	691b      	ldr	r3, [r3, #16]
 8008fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8008fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d007      	beq.n	8008ffa <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8008fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fec:	3301      	adds	r3, #1
 8008fee:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ff0:	79fb      	ldrb	r3, [r7, #7]
 8008ff2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d3f2      	bcc.n	8008fde <SEGGER_SYSVIEW_SendModule+0x1e>
 8008ff8:	e000      	b.n	8008ffc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8008ffa:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8008ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d055      	beq.n	80090ae <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009002:	f3ef 8311 	mrs	r3, BASEPRI
 8009006:	f04f 0120 	mov.w	r1, #32
 800900a:	f381 8811 	msr	BASEPRI, r1
 800900e:	617b      	str	r3, [r7, #20]
 8009010:	482a      	ldr	r0, [pc, #168]	; (80090bc <SEGGER_SYSVIEW_SendModule+0xfc>)
 8009012:	f7fe fd69 	bl	8007ae8 <_PreparePacket>
 8009016:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	627b      	str	r3, [r7, #36]	; 0x24
 8009020:	79fb      	ldrb	r3, [r7, #7]
 8009022:	623b      	str	r3, [r7, #32]
 8009024:	e00b      	b.n	800903e <SEGGER_SYSVIEW_SendModule+0x7e>
 8009026:	6a3b      	ldr	r3, [r7, #32]
 8009028:	b2da      	uxtb	r2, r3
 800902a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902c:	1c59      	adds	r1, r3, #1
 800902e:	6279      	str	r1, [r7, #36]	; 0x24
 8009030:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009034:	b2d2      	uxtb	r2, r2
 8009036:	701a      	strb	r2, [r3, #0]
 8009038:	6a3b      	ldr	r3, [r7, #32]
 800903a:	09db      	lsrs	r3, r3, #7
 800903c:	623b      	str	r3, [r7, #32]
 800903e:	6a3b      	ldr	r3, [r7, #32]
 8009040:	2b7f      	cmp	r3, #127	; 0x7f
 8009042:	d8f0      	bhi.n	8009026 <SEGGER_SYSVIEW_SendModule+0x66>
 8009044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009046:	1c5a      	adds	r2, r3, #1
 8009048:	627a      	str	r2, [r7, #36]	; 0x24
 800904a:	6a3a      	ldr	r2, [r7, #32]
 800904c:	b2d2      	uxtb	r2, r2
 800904e:	701a      	strb	r2, [r3, #0]
 8009050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009052:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	61fb      	str	r3, [r7, #28]
 8009058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	61bb      	str	r3, [r7, #24]
 800905e:	e00b      	b.n	8009078 <SEGGER_SYSVIEW_SendModule+0xb8>
 8009060:	69bb      	ldr	r3, [r7, #24]
 8009062:	b2da      	uxtb	r2, r3
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	1c59      	adds	r1, r3, #1
 8009068:	61f9      	str	r1, [r7, #28]
 800906a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800906e:	b2d2      	uxtb	r2, r2
 8009070:	701a      	strb	r2, [r3, #0]
 8009072:	69bb      	ldr	r3, [r7, #24]
 8009074:	09db      	lsrs	r3, r3, #7
 8009076:	61bb      	str	r3, [r7, #24]
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	2b7f      	cmp	r3, #127	; 0x7f
 800907c:	d8f0      	bhi.n	8009060 <SEGGER_SYSVIEW_SendModule+0xa0>
 800907e:	69fb      	ldr	r3, [r7, #28]
 8009080:	1c5a      	adds	r2, r3, #1
 8009082:	61fa      	str	r2, [r7, #28]
 8009084:	69ba      	ldr	r2, [r7, #24]
 8009086:	b2d2      	uxtb	r2, r2
 8009088:	701a      	strb	r2, [r3, #0]
 800908a:	69fb      	ldr	r3, [r7, #28]
 800908c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800908e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	2280      	movs	r2, #128	; 0x80
 8009094:	4619      	mov	r1, r3
 8009096:	68f8      	ldr	r0, [r7, #12]
 8009098:	f7fe fcd6 	bl	8007a48 <_EncodeStr>
 800909c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800909e:	2216      	movs	r2, #22
 80090a0:	68f9      	ldr	r1, [r7, #12]
 80090a2:	6938      	ldr	r0, [r7, #16]
 80090a4:	f7fe fe0e 	bl	8007cc4 <_SendPacket>
      RECORD_END();
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80090ae:	bf00      	nop
 80090b0:	3730      	adds	r7, #48	; 0x30
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	200143ec 	.word	0x200143ec
 80090bc:	200143f4 	.word	0x200143f4

080090c0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80090c6:	4b0c      	ldr	r3, [pc, #48]	; (80090f8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00f      	beq.n	80090ee <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80090ce:	4b0a      	ldr	r3, [pc, #40]	; (80090f8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d002      	beq.n	80090e2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	691b      	ldr	r3, [r3, #16]
 80090e6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d1f2      	bne.n	80090d4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80090ee:	bf00      	nop
 80090f0:	3708      	adds	r7, #8
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	200143ec 	.word	0x200143ec

080090fc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b086      	sub	sp, #24
 8009100:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8009102:	f3ef 8311 	mrs	r3, BASEPRI
 8009106:	f04f 0120 	mov.w	r1, #32
 800910a:	f381 8811 	msr	BASEPRI, r1
 800910e:	60fb      	str	r3, [r7, #12]
 8009110:	4817      	ldr	r0, [pc, #92]	; (8009170 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8009112:	f7fe fce9 	bl	8007ae8 <_PreparePacket>
 8009116:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	617b      	str	r3, [r7, #20]
 8009120:	4b14      	ldr	r3, [pc, #80]	; (8009174 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	613b      	str	r3, [r7, #16]
 8009126:	e00b      	b.n	8009140 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	b2da      	uxtb	r2, r3
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	1c59      	adds	r1, r3, #1
 8009130:	6179      	str	r1, [r7, #20]
 8009132:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009136:	b2d2      	uxtb	r2, r2
 8009138:	701a      	strb	r2, [r3, #0]
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	09db      	lsrs	r3, r3, #7
 800913e:	613b      	str	r3, [r7, #16]
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	2b7f      	cmp	r3, #127	; 0x7f
 8009144:	d8f0      	bhi.n	8009128 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	1c5a      	adds	r2, r3, #1
 800914a:	617a      	str	r2, [r7, #20]
 800914c:	693a      	ldr	r2, [r7, #16]
 800914e:	b2d2      	uxtb	r2, r2
 8009150:	701a      	strb	r2, [r3, #0]
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8009156:	221b      	movs	r2, #27
 8009158:	6879      	ldr	r1, [r7, #4]
 800915a:	68b8      	ldr	r0, [r7, #8]
 800915c:	f7fe fdb2 	bl	8007cc4 <_SendPacket>
  RECORD_END();
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f383 8811 	msr	BASEPRI, r3
}
 8009166:	bf00      	nop
 8009168:	3718      	adds	r7, #24
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	200143f4 	.word	0x200143f4
 8009174:	200143f0 	.word	0x200143f0

08009178 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 8009178:	b40f      	push	{r0, r1, r2, r3}
 800917a:	b580      	push	{r7, lr}
 800917c:	b082      	sub	sp, #8
 800917e:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 8009180:	f107 0314 	add.w	r3, r7, #20
 8009184:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8009186:	1d3b      	adds	r3, r7, #4
 8009188:	461a      	mov	r2, r3
 800918a:	2100      	movs	r1, #0
 800918c:	6938      	ldr	r0, [r7, #16]
 800918e:	f7fe ff07 	bl	8007fa0 <_VPrintHost>
  va_end(ParamList);
#endif
}
 8009192:	bf00      	nop
 8009194:	3708      	adds	r7, #8
 8009196:	46bd      	mov	sp, r7
 8009198:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800919c:	b004      	add	sp, #16
 800919e:	4770      	bx	lr

080091a0 <SEGGER_SYSVIEW_Print>:
*    Print a string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Print(const char* s) {
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b08a      	sub	sp, #40	; 0x28
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80091a8:	f3ef 8311 	mrs	r3, BASEPRI
 80091ac:	f04f 0120 	mov.w	r1, #32
 80091b0:	f381 8811 	msr	BASEPRI, r1
 80091b4:	617b      	str	r3, [r7, #20]
 80091b6:	4827      	ldr	r0, [pc, #156]	; (8009254 <SEGGER_SYSVIEW_Print+0xb4>)
 80091b8:	f7fe fc96 	bl	8007ae8 <_PreparePacket>
 80091bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80091be:	2280      	movs	r2, #128	; 0x80
 80091c0:	6879      	ldr	r1, [r7, #4]
 80091c2:	6938      	ldr	r0, [r7, #16]
 80091c4:	f7fe fc40 	bl	8007a48 <_EncodeStr>
 80091c8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_LOG);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	627b      	str	r3, [r7, #36]	; 0x24
 80091ce:	2300      	movs	r3, #0
 80091d0:	623b      	str	r3, [r7, #32]
 80091d2:	e00b      	b.n	80091ec <SEGGER_SYSVIEW_Print+0x4c>
 80091d4:	6a3b      	ldr	r3, [r7, #32]
 80091d6:	b2da      	uxtb	r2, r3
 80091d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091da:	1c59      	adds	r1, r3, #1
 80091dc:	6279      	str	r1, [r7, #36]	; 0x24
 80091de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80091e2:	b2d2      	uxtb	r2, r2
 80091e4:	701a      	strb	r2, [r3, #0]
 80091e6:	6a3b      	ldr	r3, [r7, #32]
 80091e8:	09db      	lsrs	r3, r3, #7
 80091ea:	623b      	str	r3, [r7, #32]
 80091ec:	6a3b      	ldr	r3, [r7, #32]
 80091ee:	2b7f      	cmp	r3, #127	; 0x7f
 80091f0:	d8f0      	bhi.n	80091d4 <SEGGER_SYSVIEW_Print+0x34>
 80091f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f4:	1c5a      	adds	r2, r3, #1
 80091f6:	627a      	str	r2, [r7, #36]	; 0x24
 80091f8:	6a3a      	ldr	r2, [r7, #32]
 80091fa:	b2d2      	uxtb	r2, r2
 80091fc:	701a      	strb	r2, [r3, #0]
 80091fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009200:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	61fb      	str	r3, [r7, #28]
 8009206:	2300      	movs	r3, #0
 8009208:	61bb      	str	r3, [r7, #24]
 800920a:	e00b      	b.n	8009224 <SEGGER_SYSVIEW_Print+0x84>
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	b2da      	uxtb	r2, r3
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	1c59      	adds	r1, r3, #1
 8009214:	61f9      	str	r1, [r7, #28]
 8009216:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800921a:	b2d2      	uxtb	r2, r2
 800921c:	701a      	strb	r2, [r3, #0]
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	09db      	lsrs	r3, r3, #7
 8009222:	61bb      	str	r3, [r7, #24]
 8009224:	69bb      	ldr	r3, [r7, #24]
 8009226:	2b7f      	cmp	r3, #127	; 0x7f
 8009228:	d8f0      	bhi.n	800920c <SEGGER_SYSVIEW_Print+0x6c>
 800922a:	69fb      	ldr	r3, [r7, #28]
 800922c:	1c5a      	adds	r2, r3, #1
 800922e:	61fa      	str	r2, [r7, #28]
 8009230:	69ba      	ldr	r2, [r7, #24]
 8009232:	b2d2      	uxtb	r2, r2
 8009234:	701a      	strb	r2, [r3, #0]
 8009236:	69fb      	ldr	r3, [r7, #28]
 8009238:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800923a:	221a      	movs	r2, #26
 800923c:	68f9      	ldr	r1, [r7, #12]
 800923e:	6938      	ldr	r0, [r7, #16]
 8009240:	f7fe fd40 	bl	8007cc4 <_SendPacket>
  RECORD_END();
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	f383 8811 	msr	BASEPRI, r3
}
 800924a:	bf00      	nop
 800924c:	3728      	adds	r7, #40	; 0x28
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	200143f4 	.word	0x200143f4

08009258 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8009258:	b580      	push	{r7, lr}
 800925a:	b08a      	sub	sp, #40	; 0x28
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009260:	f3ef 8311 	mrs	r3, BASEPRI
 8009264:	f04f 0120 	mov.w	r1, #32
 8009268:	f381 8811 	msr	BASEPRI, r1
 800926c:	617b      	str	r3, [r7, #20]
 800926e:	4827      	ldr	r0, [pc, #156]	; (800930c <SEGGER_SYSVIEW_Warn+0xb4>)
 8009270:	f7fe fc3a 	bl	8007ae8 <_PreparePacket>
 8009274:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009276:	2280      	movs	r2, #128	; 0x80
 8009278:	6879      	ldr	r1, [r7, #4]
 800927a:	6938      	ldr	r0, [r7, #16]
 800927c:	f7fe fbe4 	bl	8007a48 <_EncodeStr>
 8009280:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	627b      	str	r3, [r7, #36]	; 0x24
 8009286:	2301      	movs	r3, #1
 8009288:	623b      	str	r3, [r7, #32]
 800928a:	e00b      	b.n	80092a4 <SEGGER_SYSVIEW_Warn+0x4c>
 800928c:	6a3b      	ldr	r3, [r7, #32]
 800928e:	b2da      	uxtb	r2, r3
 8009290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009292:	1c59      	adds	r1, r3, #1
 8009294:	6279      	str	r1, [r7, #36]	; 0x24
 8009296:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800929a:	b2d2      	uxtb	r2, r2
 800929c:	701a      	strb	r2, [r3, #0]
 800929e:	6a3b      	ldr	r3, [r7, #32]
 80092a0:	09db      	lsrs	r3, r3, #7
 80092a2:	623b      	str	r3, [r7, #32]
 80092a4:	6a3b      	ldr	r3, [r7, #32]
 80092a6:	2b7f      	cmp	r3, #127	; 0x7f
 80092a8:	d8f0      	bhi.n	800928c <SEGGER_SYSVIEW_Warn+0x34>
 80092aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ac:	1c5a      	adds	r2, r3, #1
 80092ae:	627a      	str	r2, [r7, #36]	; 0x24
 80092b0:	6a3a      	ldr	r2, [r7, #32]
 80092b2:	b2d2      	uxtb	r2, r2
 80092b4:	701a      	strb	r2, [r3, #0]
 80092b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	61fb      	str	r3, [r7, #28]
 80092be:	2300      	movs	r3, #0
 80092c0:	61bb      	str	r3, [r7, #24]
 80092c2:	e00b      	b.n	80092dc <SEGGER_SYSVIEW_Warn+0x84>
 80092c4:	69bb      	ldr	r3, [r7, #24]
 80092c6:	b2da      	uxtb	r2, r3
 80092c8:	69fb      	ldr	r3, [r7, #28]
 80092ca:	1c59      	adds	r1, r3, #1
 80092cc:	61f9      	str	r1, [r7, #28]
 80092ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80092d2:	b2d2      	uxtb	r2, r2
 80092d4:	701a      	strb	r2, [r3, #0]
 80092d6:	69bb      	ldr	r3, [r7, #24]
 80092d8:	09db      	lsrs	r3, r3, #7
 80092da:	61bb      	str	r3, [r7, #24]
 80092dc:	69bb      	ldr	r3, [r7, #24]
 80092de:	2b7f      	cmp	r3, #127	; 0x7f
 80092e0:	d8f0      	bhi.n	80092c4 <SEGGER_SYSVIEW_Warn+0x6c>
 80092e2:	69fb      	ldr	r3, [r7, #28]
 80092e4:	1c5a      	adds	r2, r3, #1
 80092e6:	61fa      	str	r2, [r7, #28]
 80092e8:	69ba      	ldr	r2, [r7, #24]
 80092ea:	b2d2      	uxtb	r2, r2
 80092ec:	701a      	strb	r2, [r3, #0]
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80092f2:	221a      	movs	r2, #26
 80092f4:	68f9      	ldr	r1, [r7, #12]
 80092f6:	6938      	ldr	r0, [r7, #16]
 80092f8:	f7fe fce4 	bl	8007cc4 <_SendPacket>
  RECORD_END();
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	f383 8811 	msr	BASEPRI, r3
}
 8009302:	bf00      	nop
 8009304:	3728      	adds	r7, #40	; 0x28
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop
 800930c:	200143f4 	.word	0x200143f4

08009310 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8009310:	b580      	push	{r7, lr}
 8009312:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8009314:	4803      	ldr	r0, [pc, #12]	; (8009324 <_cbSendSystemDesc+0x14>)
 8009316:	f7ff fc31 	bl	8008b7c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800931a:	4803      	ldr	r0, [pc, #12]	; (8009328 <_cbSendSystemDesc+0x18>)
 800931c:	f7ff fc2e 	bl	8008b7c <SEGGER_SYSVIEW_SendSysDesc>
}
 8009320:	bf00      	nop
 8009322:	bd80      	pop	{r7, pc}
 8009324:	08009894 	.word	0x08009894
 8009328:	080098d8 	.word	0x080098d8

0800932c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800932c:	b580      	push	{r7, lr}
 800932e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8009330:	4b06      	ldr	r3, [pc, #24]	; (800934c <SEGGER_SYSVIEW_Conf+0x20>)
 8009332:	6818      	ldr	r0, [r3, #0]
 8009334:	4b05      	ldr	r3, [pc, #20]	; (800934c <SEGGER_SYSVIEW_Conf+0x20>)
 8009336:	6819      	ldr	r1, [r3, #0]
 8009338:	4b05      	ldr	r3, [pc, #20]	; (8009350 <SEGGER_SYSVIEW_Conf+0x24>)
 800933a:	4a06      	ldr	r2, [pc, #24]	; (8009354 <SEGGER_SYSVIEW_Conf+0x28>)
 800933c:	f7fe feee 	bl	800811c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8009340:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8009344:	f7fe ff2e 	bl	80081a4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8009348:	bf00      	nop
 800934a:	bd80      	pop	{r7, pc}
 800934c:	20000004 	.word	0x20000004
 8009350:	08009311 	.word	0x08009311
 8009354:	08009990 	.word	0x08009990

08009358 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8009358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800935a:	b085      	sub	sp, #20
 800935c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800935e:	2300      	movs	r3, #0
 8009360:	607b      	str	r3, [r7, #4]
 8009362:	e033      	b.n	80093cc <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8009364:	491e      	ldr	r1, [pc, #120]	; (80093e0 <_cbSendTaskList+0x88>)
 8009366:	687a      	ldr	r2, [r7, #4]
 8009368:	4613      	mov	r3, r2
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	4413      	add	r3, r2
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	440b      	add	r3, r1
 8009372:	6818      	ldr	r0, [r3, #0]
 8009374:	491a      	ldr	r1, [pc, #104]	; (80093e0 <_cbSendTaskList+0x88>)
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	4613      	mov	r3, r2
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	4413      	add	r3, r2
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	440b      	add	r3, r1
 8009382:	3304      	adds	r3, #4
 8009384:	6819      	ldr	r1, [r3, #0]
 8009386:	4c16      	ldr	r4, [pc, #88]	; (80093e0 <_cbSendTaskList+0x88>)
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	4613      	mov	r3, r2
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	4413      	add	r3, r2
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	4423      	add	r3, r4
 8009394:	3308      	adds	r3, #8
 8009396:	681c      	ldr	r4, [r3, #0]
 8009398:	4d11      	ldr	r5, [pc, #68]	; (80093e0 <_cbSendTaskList+0x88>)
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	4613      	mov	r3, r2
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	4413      	add	r3, r2
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	442b      	add	r3, r5
 80093a6:	330c      	adds	r3, #12
 80093a8:	681d      	ldr	r5, [r3, #0]
 80093aa:	4e0d      	ldr	r6, [pc, #52]	; (80093e0 <_cbSendTaskList+0x88>)
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	4613      	mov	r3, r2
 80093b0:	009b      	lsls	r3, r3, #2
 80093b2:	4413      	add	r3, r2
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	4433      	add	r3, r6
 80093b8:	3310      	adds	r3, #16
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	9300      	str	r3, [sp, #0]
 80093be:	462b      	mov	r3, r5
 80093c0:	4622      	mov	r2, r4
 80093c2:	f000 f8bd 	bl	8009540 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	3301      	adds	r3, #1
 80093ca:	607b      	str	r3, [r7, #4]
 80093cc:	4b05      	ldr	r3, [pc, #20]	; (80093e4 <_cbSendTaskList+0x8c>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d3c6      	bcc.n	8009364 <_cbSendTaskList+0xc>
  }
}
 80093d6:	bf00      	nop
 80093d8:	bf00      	nop
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093e0:	200144d8 	.word	0x200144d8
 80093e4:	20014578 	.word	0x20014578

080093e8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80093e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80093ec:	b082      	sub	sp, #8
 80093ee:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80093f0:	f7fc fa9a 	bl	8005928 <xTaskGetTickCountFromISR>
 80093f4:	4603      	mov	r3, r0
 80093f6:	2200      	movs	r2, #0
 80093f8:	469a      	mov	sl, r3
 80093fa:	4693      	mov	fp, r2
 80093fc:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8009400:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009404:	4602      	mov	r2, r0
 8009406:	460b      	mov	r3, r1
 8009408:	f04f 0a00 	mov.w	sl, #0
 800940c:	f04f 0b00 	mov.w	fp, #0
 8009410:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8009414:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8009418:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800941c:	4652      	mov	r2, sl
 800941e:	465b      	mov	r3, fp
 8009420:	1a14      	subs	r4, r2, r0
 8009422:	eb63 0501 	sbc.w	r5, r3, r1
 8009426:	f04f 0200 	mov.w	r2, #0
 800942a:	f04f 0300 	mov.w	r3, #0
 800942e:	00ab      	lsls	r3, r5, #2
 8009430:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8009434:	00a2      	lsls	r2, r4, #2
 8009436:	4614      	mov	r4, r2
 8009438:	461d      	mov	r5, r3
 800943a:	eb14 0800 	adds.w	r8, r4, r0
 800943e:	eb45 0901 	adc.w	r9, r5, r1
 8009442:	f04f 0200 	mov.w	r2, #0
 8009446:	f04f 0300 	mov.w	r3, #0
 800944a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800944e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009452:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009456:	4690      	mov	r8, r2
 8009458:	4699      	mov	r9, r3
 800945a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800945e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8009462:	4610      	mov	r0, r2
 8009464:	4619      	mov	r1, r3
 8009466:	3708      	adds	r7, #8
 8009468:	46bd      	mov	sp, r7
 800946a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08009470 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8009470:	b580      	push	{r7, lr}
 8009472:	b086      	sub	sp, #24
 8009474:	af02      	add	r7, sp, #8
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	607a      	str	r2, [r7, #4]
 800947c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800947e:	2205      	movs	r2, #5
 8009480:	492b      	ldr	r1, [pc, #172]	; (8009530 <SYSVIEW_AddTask+0xc0>)
 8009482:	68b8      	ldr	r0, [r7, #8]
 8009484:	f000 f8a2 	bl	80095cc <memcmp>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d04b      	beq.n	8009526 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800948e:	4b29      	ldr	r3, [pc, #164]	; (8009534 <SYSVIEW_AddTask+0xc4>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	2b07      	cmp	r3, #7
 8009494:	d903      	bls.n	800949e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8009496:	4828      	ldr	r0, [pc, #160]	; (8009538 <SYSVIEW_AddTask+0xc8>)
 8009498:	f7ff fede 	bl	8009258 <SEGGER_SYSVIEW_Warn>
    return;
 800949c:	e044      	b.n	8009528 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800949e:	4b25      	ldr	r3, [pc, #148]	; (8009534 <SYSVIEW_AddTask+0xc4>)
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	4926      	ldr	r1, [pc, #152]	; (800953c <SYSVIEW_AddTask+0xcc>)
 80094a4:	4613      	mov	r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	4413      	add	r3, r2
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	440b      	add	r3, r1
 80094ae:	68fa      	ldr	r2, [r7, #12]
 80094b0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80094b2:	4b20      	ldr	r3, [pc, #128]	; (8009534 <SYSVIEW_AddTask+0xc4>)
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	4921      	ldr	r1, [pc, #132]	; (800953c <SYSVIEW_AddTask+0xcc>)
 80094b8:	4613      	mov	r3, r2
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	4413      	add	r3, r2
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	440b      	add	r3, r1
 80094c2:	3304      	adds	r3, #4
 80094c4:	68ba      	ldr	r2, [r7, #8]
 80094c6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80094c8:	4b1a      	ldr	r3, [pc, #104]	; (8009534 <SYSVIEW_AddTask+0xc4>)
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	491b      	ldr	r1, [pc, #108]	; (800953c <SYSVIEW_AddTask+0xcc>)
 80094ce:	4613      	mov	r3, r2
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	4413      	add	r3, r2
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	440b      	add	r3, r1
 80094d8:	3308      	adds	r3, #8
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80094de:	4b15      	ldr	r3, [pc, #84]	; (8009534 <SYSVIEW_AddTask+0xc4>)
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	4916      	ldr	r1, [pc, #88]	; (800953c <SYSVIEW_AddTask+0xcc>)
 80094e4:	4613      	mov	r3, r2
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	4413      	add	r3, r2
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	440b      	add	r3, r1
 80094ee:	330c      	adds	r3, #12
 80094f0:	683a      	ldr	r2, [r7, #0]
 80094f2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80094f4:	4b0f      	ldr	r3, [pc, #60]	; (8009534 <SYSVIEW_AddTask+0xc4>)
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	4910      	ldr	r1, [pc, #64]	; (800953c <SYSVIEW_AddTask+0xcc>)
 80094fa:	4613      	mov	r3, r2
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	4413      	add	r3, r2
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	440b      	add	r3, r1
 8009504:	3310      	adds	r3, #16
 8009506:	69ba      	ldr	r2, [r7, #24]
 8009508:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800950a:	4b0a      	ldr	r3, [pc, #40]	; (8009534 <SYSVIEW_AddTask+0xc4>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	3301      	adds	r3, #1
 8009510:	4a08      	ldr	r2, [pc, #32]	; (8009534 <SYSVIEW_AddTask+0xc4>)
 8009512:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8009514:	69bb      	ldr	r3, [r7, #24]
 8009516:	9300      	str	r3, [sp, #0]
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	68b9      	ldr	r1, [r7, #8]
 800951e:	68f8      	ldr	r0, [r7, #12]
 8009520:	f000 f80e 	bl	8009540 <SYSVIEW_SendTaskInfo>
 8009524:	e000      	b.n	8009528 <SYSVIEW_AddTask+0xb8>
    return;
 8009526:	bf00      	nop

}
 8009528:	3710      	adds	r7, #16
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	080098e8 	.word	0x080098e8
 8009534:	20014578 	.word	0x20014578
 8009538:	080098f0 	.word	0x080098f0
 800953c:	200144d8 	.word	0x200144d8

08009540 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8009540:	b580      	push	{r7, lr}
 8009542:	b08a      	sub	sp, #40	; 0x28
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	607a      	str	r2, [r7, #4]
 800954c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800954e:	f107 0314 	add.w	r3, r7, #20
 8009552:	2214      	movs	r2, #20
 8009554:	2100      	movs	r1, #0
 8009556:	4618      	mov	r0, r3
 8009558:	f000 f856 	bl	8009608 <memset>
  TaskInfo.TaskID     = TaskID;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800956c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800956e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8009570:	f107 0314 	add.w	r3, r7, #20
 8009574:	4618      	mov	r0, r3
 8009576:	f7ff fa09 	bl	800898c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800957a:	bf00      	nop
 800957c:	3728      	adds	r7, #40	; 0x28
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
	...

08009584 <__libc_init_array>:
 8009584:	b570      	push	{r4, r5, r6, lr}
 8009586:	4d0d      	ldr	r5, [pc, #52]	; (80095bc <__libc_init_array+0x38>)
 8009588:	4c0d      	ldr	r4, [pc, #52]	; (80095c0 <__libc_init_array+0x3c>)
 800958a:	1b64      	subs	r4, r4, r5
 800958c:	10a4      	asrs	r4, r4, #2
 800958e:	2600      	movs	r6, #0
 8009590:	42a6      	cmp	r6, r4
 8009592:	d109      	bne.n	80095a8 <__libc_init_array+0x24>
 8009594:	4d0b      	ldr	r5, [pc, #44]	; (80095c4 <__libc_init_array+0x40>)
 8009596:	4c0c      	ldr	r4, [pc, #48]	; (80095c8 <__libc_init_array+0x44>)
 8009598:	f000 f83e 	bl	8009618 <_init>
 800959c:	1b64      	subs	r4, r4, r5
 800959e:	10a4      	asrs	r4, r4, #2
 80095a0:	2600      	movs	r6, #0
 80095a2:	42a6      	cmp	r6, r4
 80095a4:	d105      	bne.n	80095b2 <__libc_init_array+0x2e>
 80095a6:	bd70      	pop	{r4, r5, r6, pc}
 80095a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80095ac:	4798      	blx	r3
 80095ae:	3601      	adds	r6, #1
 80095b0:	e7ee      	b.n	8009590 <__libc_init_array+0xc>
 80095b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80095b6:	4798      	blx	r3
 80095b8:	3601      	adds	r6, #1
 80095ba:	e7f2      	b.n	80095a2 <__libc_init_array+0x1e>
 80095bc:	080099a0 	.word	0x080099a0
 80095c0:	080099a0 	.word	0x080099a0
 80095c4:	080099a0 	.word	0x080099a0
 80095c8:	080099a4 	.word	0x080099a4

080095cc <memcmp>:
 80095cc:	b510      	push	{r4, lr}
 80095ce:	3901      	subs	r1, #1
 80095d0:	4402      	add	r2, r0
 80095d2:	4290      	cmp	r0, r2
 80095d4:	d101      	bne.n	80095da <memcmp+0xe>
 80095d6:	2000      	movs	r0, #0
 80095d8:	e005      	b.n	80095e6 <memcmp+0x1a>
 80095da:	7803      	ldrb	r3, [r0, #0]
 80095dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80095e0:	42a3      	cmp	r3, r4
 80095e2:	d001      	beq.n	80095e8 <memcmp+0x1c>
 80095e4:	1b18      	subs	r0, r3, r4
 80095e6:	bd10      	pop	{r4, pc}
 80095e8:	3001      	adds	r0, #1
 80095ea:	e7f2      	b.n	80095d2 <memcmp+0x6>

080095ec <memcpy>:
 80095ec:	440a      	add	r2, r1
 80095ee:	4291      	cmp	r1, r2
 80095f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80095f4:	d100      	bne.n	80095f8 <memcpy+0xc>
 80095f6:	4770      	bx	lr
 80095f8:	b510      	push	{r4, lr}
 80095fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009602:	4291      	cmp	r1, r2
 8009604:	d1f9      	bne.n	80095fa <memcpy+0xe>
 8009606:	bd10      	pop	{r4, pc}

08009608 <memset>:
 8009608:	4402      	add	r2, r0
 800960a:	4603      	mov	r3, r0
 800960c:	4293      	cmp	r3, r2
 800960e:	d100      	bne.n	8009612 <memset+0xa>
 8009610:	4770      	bx	lr
 8009612:	f803 1b01 	strb.w	r1, [r3], #1
 8009616:	e7f9      	b.n	800960c <memset+0x4>

08009618 <_init>:
 8009618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800961a:	bf00      	nop
 800961c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800961e:	bc08      	pop	{r3}
 8009620:	469e      	mov	lr, r3
 8009622:	4770      	bx	lr

08009624 <_fini>:
 8009624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009626:	bf00      	nop
 8009628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800962a:	bc08      	pop	{r3}
 800962c:	469e      	mov	lr, r3
 800962e:	4770      	bx	lr
