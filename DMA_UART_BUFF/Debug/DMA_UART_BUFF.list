
DMA_UART_BUFF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d14  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000384  08008ec4  08008ec4  00018ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009248  08009248  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08009248  08009248  00019248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009250  08009250  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009250  08009250  00019250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009254  08009254  00019254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08009258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00014554  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20014564  20014564  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001acc9  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a63  00000000  00000000  0003ad09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001658  00000000  00000000  0003e770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014c0  00000000  00000000  0003fdc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000437a  00000000  00000000  00041288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e4cf  00000000  00000000  00045602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e93f8  00000000  00000000  00063ad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014cec9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d60  00000000  00000000  0014cf1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008eac 	.word	0x08008eac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08008eac 	.word	0x08008eac

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20012eec 	.word	0x20012eec

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b974 	b.w	8000584 <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9d08      	ldr	r5, [sp, #32]
 80002ba:	4604      	mov	r4, r0
 80002bc:	468e      	mov	lr, r1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d14d      	bne.n	800035e <__udivmoddi4+0xaa>
 80002c2:	428a      	cmp	r2, r1
 80002c4:	4694      	mov	ip, r2
 80002c6:	d969      	bls.n	800039c <__udivmoddi4+0xe8>
 80002c8:	fab2 f282 	clz	r2, r2
 80002cc:	b152      	cbz	r2, 80002e4 <__udivmoddi4+0x30>
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	f1c2 0120 	rsb	r1, r2, #32
 80002d6:	fa20 f101 	lsr.w	r1, r0, r1
 80002da:	fa0c fc02 	lsl.w	ip, ip, r2
 80002de:	ea41 0e03 	orr.w	lr, r1, r3
 80002e2:	4094      	lsls	r4, r2
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	0c21      	lsrs	r1, r4, #16
 80002ea:	fbbe f6f8 	udiv	r6, lr, r8
 80002ee:	fa1f f78c 	uxth.w	r7, ip
 80002f2:	fb08 e316 	mls	r3, r8, r6, lr
 80002f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002fa:	fb06 f107 	mul.w	r1, r6, r7
 80002fe:	4299      	cmp	r1, r3
 8000300:	d90a      	bls.n	8000318 <__udivmoddi4+0x64>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 30ff 	add.w	r0, r6, #4294967295
 800030a:	f080 811f 	bcs.w	800054c <__udivmoddi4+0x298>
 800030e:	4299      	cmp	r1, r3
 8000310:	f240 811c 	bls.w	800054c <__udivmoddi4+0x298>
 8000314:	3e02      	subs	r6, #2
 8000316:	4463      	add	r3, ip
 8000318:	1a5b      	subs	r3, r3, r1
 800031a:	b2a4      	uxth	r4, r4
 800031c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000320:	fb08 3310 	mls	r3, r8, r0, r3
 8000324:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000328:	fb00 f707 	mul.w	r7, r0, r7
 800032c:	42a7      	cmp	r7, r4
 800032e:	d90a      	bls.n	8000346 <__udivmoddi4+0x92>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	f080 810a 	bcs.w	8000550 <__udivmoddi4+0x29c>
 800033c:	42a7      	cmp	r7, r4
 800033e:	f240 8107 	bls.w	8000550 <__udivmoddi4+0x29c>
 8000342:	4464      	add	r4, ip
 8000344:	3802      	subs	r0, #2
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	1be4      	subs	r4, r4, r7
 800034c:	2600      	movs	r6, #0
 800034e:	b11d      	cbz	r5, 8000358 <__udivmoddi4+0xa4>
 8000350:	40d4      	lsrs	r4, r2
 8000352:	2300      	movs	r3, #0
 8000354:	e9c5 4300 	strd	r4, r3, [r5]
 8000358:	4631      	mov	r1, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0xc2>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80ef 	beq.w	8000546 <__udivmoddi4+0x292>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x160>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xd4>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80f9 	bhi.w	800057a <__udivmoddi4+0x2c6>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0303 	sbc.w	r3, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	469e      	mov	lr, r3
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e0      	beq.n	8000358 <__udivmoddi4+0xa4>
 8000396:	e9c5 4e00 	strd	r4, lr, [r5]
 800039a:	e7dd      	b.n	8000358 <__udivmoddi4+0xa4>
 800039c:	b902      	cbnz	r2, 80003a0 <__udivmoddi4+0xec>
 800039e:	deff      	udf	#255	; 0xff
 80003a0:	fab2 f282 	clz	r2, r2
 80003a4:	2a00      	cmp	r2, #0
 80003a6:	f040 8092 	bne.w	80004ce <__udivmoddi4+0x21a>
 80003aa:	eba1 010c 	sub.w	r1, r1, ip
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	2601      	movs	r6, #1
 80003b8:	0c20      	lsrs	r0, r4, #16
 80003ba:	fbb1 f3f7 	udiv	r3, r1, r7
 80003be:	fb07 1113 	mls	r1, r7, r3, r1
 80003c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c6:	fb0e f003 	mul.w	r0, lr, r3
 80003ca:	4288      	cmp	r0, r1
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x12c>
 80003ce:	eb1c 0101 	adds.w	r1, ip, r1
 80003d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x12a>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f200 80cb 	bhi.w	8000574 <__udivmoddi4+0x2c0>
 80003de:	4643      	mov	r3, r8
 80003e0:	1a09      	subs	r1, r1, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e8:	fb07 1110 	mls	r1, r7, r0, r1
 80003ec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003f0:	fb0e fe00 	mul.w	lr, lr, r0
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x156>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x154>
 8000402:	45a6      	cmp	lr, r4
 8000404:	f200 80bb 	bhi.w	800057e <__udivmoddi4+0x2ca>
 8000408:	4608      	mov	r0, r1
 800040a:	eba4 040e 	sub.w	r4, r4, lr
 800040e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000412:	e79c      	b.n	800034e <__udivmoddi4+0x9a>
 8000414:	f1c6 0720 	rsb	r7, r6, #32
 8000418:	40b3      	lsls	r3, r6
 800041a:	fa22 fc07 	lsr.w	ip, r2, r7
 800041e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000422:	fa20 f407 	lsr.w	r4, r0, r7
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	431c      	orrs	r4, r3
 800042c:	40f9      	lsrs	r1, r7
 800042e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000432:	fa00 f306 	lsl.w	r3, r0, r6
 8000436:	fbb1 f8f9 	udiv	r8, r1, r9
 800043a:	0c20      	lsrs	r0, r4, #16
 800043c:	fa1f fe8c 	uxth.w	lr, ip
 8000440:	fb09 1118 	mls	r1, r9, r8, r1
 8000444:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000448:	fb08 f00e 	mul.w	r0, r8, lr
 800044c:	4288      	cmp	r0, r1
 800044e:	fa02 f206 	lsl.w	r2, r2, r6
 8000452:	d90b      	bls.n	800046c <__udivmoddi4+0x1b8>
 8000454:	eb1c 0101 	adds.w	r1, ip, r1
 8000458:	f108 3aff 	add.w	sl, r8, #4294967295
 800045c:	f080 8088 	bcs.w	8000570 <__udivmoddi4+0x2bc>
 8000460:	4288      	cmp	r0, r1
 8000462:	f240 8085 	bls.w	8000570 <__udivmoddi4+0x2bc>
 8000466:	f1a8 0802 	sub.w	r8, r8, #2
 800046a:	4461      	add	r1, ip
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f9 	udiv	r0, r1, r9
 8000474:	fb09 1110 	mls	r1, r9, r0, r1
 8000478:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800047c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000480:	458e      	cmp	lr, r1
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x1e2>
 8000484:	eb1c 0101 	adds.w	r1, ip, r1
 8000488:	f100 34ff 	add.w	r4, r0, #4294967295
 800048c:	d26c      	bcs.n	8000568 <__udivmoddi4+0x2b4>
 800048e:	458e      	cmp	lr, r1
 8000490:	d96a      	bls.n	8000568 <__udivmoddi4+0x2b4>
 8000492:	3802      	subs	r0, #2
 8000494:	4461      	add	r1, ip
 8000496:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800049a:	fba0 9402 	umull	r9, r4, r0, r2
 800049e:	eba1 010e 	sub.w	r1, r1, lr
 80004a2:	42a1      	cmp	r1, r4
 80004a4:	46c8      	mov	r8, r9
 80004a6:	46a6      	mov	lr, r4
 80004a8:	d356      	bcc.n	8000558 <__udivmoddi4+0x2a4>
 80004aa:	d053      	beq.n	8000554 <__udivmoddi4+0x2a0>
 80004ac:	b15d      	cbz	r5, 80004c6 <__udivmoddi4+0x212>
 80004ae:	ebb3 0208 	subs.w	r2, r3, r8
 80004b2:	eb61 010e 	sbc.w	r1, r1, lr
 80004b6:	fa01 f707 	lsl.w	r7, r1, r7
 80004ba:	fa22 f306 	lsr.w	r3, r2, r6
 80004be:	40f1      	lsrs	r1, r6
 80004c0:	431f      	orrs	r7, r3
 80004c2:	e9c5 7100 	strd	r7, r1, [r5]
 80004c6:	2600      	movs	r6, #0
 80004c8:	4631      	mov	r1, r6
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	40d8      	lsrs	r0, r3
 80004d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d8:	fa21 f303 	lsr.w	r3, r1, r3
 80004dc:	4091      	lsls	r1, r2
 80004de:	4301      	orrs	r1, r0
 80004e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e4:	fa1f fe8c 	uxth.w	lr, ip
 80004e8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004ec:	fb07 3610 	mls	r6, r7, r0, r3
 80004f0:	0c0b      	lsrs	r3, r1, #16
 80004f2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f6:	fb00 f60e 	mul.w	r6, r0, lr
 80004fa:	429e      	cmp	r6, r3
 80004fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x260>
 8000502:	eb1c 0303 	adds.w	r3, ip, r3
 8000506:	f100 38ff 	add.w	r8, r0, #4294967295
 800050a:	d22f      	bcs.n	800056c <__udivmoddi4+0x2b8>
 800050c:	429e      	cmp	r6, r3
 800050e:	d92d      	bls.n	800056c <__udivmoddi4+0x2b8>
 8000510:	3802      	subs	r0, #2
 8000512:	4463      	add	r3, ip
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	b289      	uxth	r1, r1
 8000518:	fbb3 f6f7 	udiv	r6, r3, r7
 800051c:	fb07 3316 	mls	r3, r7, r6, r3
 8000520:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000524:	fb06 f30e 	mul.w	r3, r6, lr
 8000528:	428b      	cmp	r3, r1
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x28a>
 800052c:	eb1c 0101 	adds.w	r1, ip, r1
 8000530:	f106 38ff 	add.w	r8, r6, #4294967295
 8000534:	d216      	bcs.n	8000564 <__udivmoddi4+0x2b0>
 8000536:	428b      	cmp	r3, r1
 8000538:	d914      	bls.n	8000564 <__udivmoddi4+0x2b0>
 800053a:	3e02      	subs	r6, #2
 800053c:	4461      	add	r1, ip
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000544:	e738      	b.n	80003b8 <__udivmoddi4+0x104>
 8000546:	462e      	mov	r6, r5
 8000548:	4628      	mov	r0, r5
 800054a:	e705      	b.n	8000358 <__udivmoddi4+0xa4>
 800054c:	4606      	mov	r6, r0
 800054e:	e6e3      	b.n	8000318 <__udivmoddi4+0x64>
 8000550:	4618      	mov	r0, r3
 8000552:	e6f8      	b.n	8000346 <__udivmoddi4+0x92>
 8000554:	454b      	cmp	r3, r9
 8000556:	d2a9      	bcs.n	80004ac <__udivmoddi4+0x1f8>
 8000558:	ebb9 0802 	subs.w	r8, r9, r2
 800055c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000560:	3801      	subs	r0, #1
 8000562:	e7a3      	b.n	80004ac <__udivmoddi4+0x1f8>
 8000564:	4646      	mov	r6, r8
 8000566:	e7ea      	b.n	800053e <__udivmoddi4+0x28a>
 8000568:	4620      	mov	r0, r4
 800056a:	e794      	b.n	8000496 <__udivmoddi4+0x1e2>
 800056c:	4640      	mov	r0, r8
 800056e:	e7d1      	b.n	8000514 <__udivmoddi4+0x260>
 8000570:	46d0      	mov	r8, sl
 8000572:	e77b      	b.n	800046c <__udivmoddi4+0x1b8>
 8000574:	3b02      	subs	r3, #2
 8000576:	4461      	add	r1, ip
 8000578:	e732      	b.n	80003e0 <__udivmoddi4+0x12c>
 800057a:	4630      	mov	r0, r6
 800057c:	e709      	b.n	8000392 <__udivmoddi4+0xde>
 800057e:	4464      	add	r4, ip
 8000580:	3802      	subs	r0, #2
 8000582:	e742      	b.n	800040a <__udivmoddi4+0x156>

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <initUart1Pins>:
#include "UartQuickDirtyInit.h"
#include <stm32f4xx_hal.h>
#include <main.h>

void initUart1Pins( void )
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	603b      	str	r3, [r7, #0]
 80005a0:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <initUart1Pins+0x58>)
 80005a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a4:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <initUart1Pins+0x58>)
 80005a6:	f043 0301 	orr.w	r3, r3, #1
 80005aa:	6313      	str	r3, [r2, #48]	; 0x30
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <initUart1Pins+0x58>)
 80005ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b0:	f003 0301 	and.w	r3, r3, #1
 80005b4:	603b      	str	r3, [r7, #0]
 80005b6:	683b      	ldr	r3, [r7, #0]

	//PA9 is USART1_RX PA10 is USART1_TX
	GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80005b8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80005bc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005be:	2302      	movs	r3, #2
 80005c0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005c6:	2303      	movs	r3, #3
 80005c8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80005ca:	2307      	movs	r3, #7
 80005cc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	4619      	mov	r1, r3
 80005d2:	4804      	ldr	r0, [pc, #16]	; (80005e4 <initUart1Pins+0x5c>)
 80005d4:	f001 fcde 	bl	8001f94 <HAL_GPIO_Init>
}
 80005d8:	bf00      	nop
 80005da:	3718      	adds	r7, #24
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40020000 	.word	0x40020000

080005e8 <initUart5Pins>:

void initUart5Pins( void )
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <initUart5Pins+0x98>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a1e      	ldr	r2, [pc, #120]	; (8000680 <initUart5Pins+0x98>)
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <initUart5Pins+0x98>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0304 	and.w	r3, r3, #4
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	4b18      	ldr	r3, [pc, #96]	; (8000680 <initUart5Pins+0x98>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a17      	ldr	r2, [pc, #92]	; (8000680 <initUart5Pins+0x98>)
 8000624:	f043 0308 	orr.w	r3, r3, #8
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b15      	ldr	r3, [pc, #84]	; (8000680 <initUart5Pins+0x98>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]


	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063c:	2302      	movs	r3, #2
 800063e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000644:	2303      	movs	r3, #3
 8000646:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000648:	2308      	movs	r3, #8
 800064a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	4619      	mov	r1, r3
 8000652:	480c      	ldr	r0, [pc, #48]	; (8000684 <initUart5Pins+0x9c>)
 8000654:	f001 fc9e 	bl	8001f94 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000658:	2304      	movs	r3, #4
 800065a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065c:	2302      	movs	r3, #2
 800065e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000664:	2303      	movs	r3, #3
 8000666:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000668:	2308      	movs	r3, #8
 800066a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	4619      	mov	r1, r3
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <initUart5Pins+0xa0>)
 8000674:	f001 fc8e 	bl	8001f94 <HAL_GPIO_Init>

}
 8000678:	bf00      	nop
 800067a:	3720      	adds	r7, #32
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40023800 	.word	0x40023800
 8000684:	40020800 	.word	0x40020800
 8000688:	40020c00 	.word	0x40020c00

0800068c <STM_UartInit>:
 * @param Baudrate desired baudrate the UART will be setup to use
 * @param DmaTx pointer to DMA struct to use when transmitting via DMA
 * @param DmaRx pointer to DMA struct to use when receiving via DMA
 */
void STM_UartInit( USART_TypeDef* STM_UART_PERIPH, uint32_t Baudrate, DMA_HandleTypeDef* DmaTx, DMA_HandleTypeDef* DmaRx )
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b098      	sub	sp, #96	; 0x60
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
 8000698:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef retVal;
	UART_HandleTypeDef uartInitStruct;
	assert_param(	STM_UART_PERIPH == USART1 ||
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	4a2e      	ldr	r2, [pc, #184]	; (8000758 <STM_UartInit+0xcc>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d007      	beq.n	80006b2 <STM_UartInit+0x26>
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4a2d      	ldr	r2, [pc, #180]	; (800075c <STM_UartInit+0xd0>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d003      	beq.n	80006b2 <STM_UartInit+0x26>
 80006aa:	2154      	movs	r1, #84	; 0x54
 80006ac:	482c      	ldr	r0, [pc, #176]	; (8000760 <STM_UartInit+0xd4>)
 80006ae:	f000 fe6f 	bl	8001390 <assert_failed>
					STM_UART_PERIPH == UART5 );

	if(STM_UART_PERIPH == USART1)
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	4a28      	ldr	r2, [pc, #160]	; (8000758 <STM_UartInit+0xcc>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d110      	bne.n	80006dc <STM_UartInit+0x50>
	{
		initUart1Pins();
 80006ba:	f7ff ff65 	bl	8000588 <initUart1Pins>
		__USART1_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
 80006c2:	4b28      	ldr	r3, [pc, #160]	; (8000764 <STM_UartInit+0xd8>)
 80006c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c6:	4a27      	ldr	r2, [pc, #156]	; (8000764 <STM_UartInit+0xd8>)
 80006c8:	f043 0310 	orr.w	r3, r3, #16
 80006cc:	6453      	str	r3, [r2, #68]	; 0x44
 80006ce:	4b25      	ldr	r3, [pc, #148]	; (8000764 <STM_UartInit+0xd8>)
 80006d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d2:	f003 0310 	and.w	r3, r3, #16
 80006d6:	617b      	str	r3, [r7, #20]
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	e013      	b.n	8000704 <STM_UartInit+0x78>
	}
	else if (STM_UART_PERIPH == UART5)
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	4a1f      	ldr	r2, [pc, #124]	; (800075c <STM_UartInit+0xd0>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d10f      	bne.n	8000704 <STM_UartInit+0x78>
	{
		initUart5Pins();
 80006e4:	f7ff ff80 	bl	80005e8 <initUart5Pins>
		__UART5_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <STM_UartInit+0xd8>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	4a1c      	ldr	r2, [pc, #112]	; (8000764 <STM_UartInit+0xd8>)
 80006f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006f6:	6413      	str	r3, [r2, #64]	; 0x40
 80006f8:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <STM_UartInit+0xd8>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000700:	613b      	str	r3, [r7, #16]
 8000702:	693b      	ldr	r3, [r7, #16]
	}

	uartInitStruct.Instance = STM_UART_PERIPH;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	61bb      	str	r3, [r7, #24]
	uartInitStruct.Init.BaudRate = Baudrate;
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	61fb      	str	r3, [r7, #28]
	uartInitStruct.Init.WordLength = UART_WORDLENGTH_8B;
 800070c:	2300      	movs	r3, #0
 800070e:	623b      	str	r3, [r7, #32]
	uartInitStruct.Init.StopBits = UART_STOPBITS_1;
 8000710:	2300      	movs	r3, #0
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
	uartInitStruct.Init.Parity = UART_PARITY_NONE;
 8000714:	2300      	movs	r3, #0
 8000716:	62bb      	str	r3, [r7, #40]	; 0x28
	uartInitStruct.Init.Mode = UART_MODE_TX_RX;
 8000718:	230c      	movs	r3, #12
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uartInitStruct.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071c:	2300      	movs	r3, #0
 800071e:	633b      	str	r3, [r7, #48]	; 0x30
	uartInitStruct.Init.OverSampling = UART_OVERSAMPLING_8;
 8000720:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000724:	637b      	str	r3, [r7, #52]	; 0x34
	//uartInitStruct.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	uartInitStruct.hdmatx = DmaTx;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	64fb      	str	r3, [r7, #76]	; 0x4c
	uartInitStruct.hdmarx = DmaRx;
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	653b      	str	r3, [r7, #80]	; 0x50
	//uartInitStruct.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;

	retVal = HAL_UART_Init(&uartInitStruct);
 800072e:	f107 0318 	add.w	r3, r7, #24
 8000732:	4618      	mov	r0, r3
 8000734:	f003 f96a 	bl	8003a0c <HAL_UART_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	assert_param(retVal == HAL_OK);
 800073e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000742:	2b00      	cmp	r3, #0
 8000744:	d003      	beq.n	800074e <STM_UartInit+0xc2>
 8000746:	2170      	movs	r1, #112	; 0x70
 8000748:	4805      	ldr	r0, [pc, #20]	; (8000760 <STM_UartInit+0xd4>)
 800074a:	f000 fe21 	bl	8001390 <assert_failed>

}
 800074e:	bf00      	nop
 8000750:	3760      	adds	r7, #96	; 0x60
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40011000 	.word	0x40011000
 800075c:	40005000 	.word	0x40005000
 8000760:	08008ec4 	.word	0x08008ec4
 8000764:	40023800 	.word	0x40023800

08000768 <SetupUart5ExternalSim>:
 * @param Baudrate desired baudrate for the UART4
 *
 * This is a quick and dirty setup. . .
 */
void SetupUart5ExternalSim( uint32_t BaudRate )
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	//setup DMA
	uart5TxDmaSetup();
 8000770:	f000 f81a 	bl	80007a8 <uart5TxDmaSetup>

	//GPIO pins are setup in BSP/Nucleo_F767ZI_Init
	STM_UartInit(UART5, BaudRate, &hdma_uart5_tx, NULL);
 8000774:	2300      	movs	r3, #0
 8000776:	4a09      	ldr	r2, [pc, #36]	; (800079c <SetupUart5ExternalSim+0x34>)
 8000778:	6879      	ldr	r1, [r7, #4]
 800077a:	4809      	ldr	r0, [pc, #36]	; (80007a0 <SetupUart5ExternalSim+0x38>)
 800077c:	f7ff ff86 	bl	800068c <STM_UartInit>

	//also enable DMA for UART5 Transmits
	UART5->CR3 |= USART_CR3_DMAT;
 8000780:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <SetupUart5ExternalSim+0x38>)
 8000782:	695b      	ldr	r3, [r3, #20]
 8000784:	4a06      	ldr	r2, [pc, #24]	; (80007a0 <SetupUart5ExternalSim+0x38>)
 8000786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800078a:	6153      	str	r3, [r2, #20]
	 *	start the repeating DMA transfer.  Eventually, non-circular
	 *	receivers will loose a character here or there at high baudrates.
	 *	When this happens, SEGGER_SYSVIEW_Print() will stop printing when it hits
	 *	the first NULL character.
	 */
	uart5TxDmaStartRepeat(uart5Msg, sizeof(uart5Msg));
 800078c:	2110      	movs	r1, #16
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <SetupUart5ExternalSim+0x3c>)
 8000790:	f000 f874 	bl	800087c <uart5TxDmaStartRepeat>
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	2000002c 	.word	0x2000002c
 80007a0:	40005000 	.word	0x40005000
 80007a4:	080091f0 	.word	0x080091f0

080007a8 <uart5TxDmaSetup>:

static void uart5TxDmaSetup( void )
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	4b2d      	ldr	r3, [pc, #180]	; (8000868 <uart5TxDmaSetup+0xc0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a2c      	ldr	r2, [pc, #176]	; (8000868 <uart5TxDmaSetup+0xc0>)
 80007b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b2a      	ldr	r3, [pc, #168]	; (8000868 <uart5TxDmaSetup+0xc0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]

	  /* DMA interrupt init */
	  /* DMA1_Stream7_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2100      	movs	r1, #0
 80007ce:	202f      	movs	r0, #47	; 0x2f
 80007d0:	f000 ffe8 	bl	80017a4 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80007d4:	202f      	movs	r0, #47	; 0x2f
 80007d6:	f001 f811 	bl	80017fc <HAL_NVIC_EnableIRQ>

	//initialize the DMA peripheral to transfer uart4Msg
	//to UART4 repeatedly
	memset(&hdma_uart5_tx, 0, sizeof(hdma_uart5_tx));
 80007da:	2260      	movs	r2, #96	; 0x60
 80007dc:	2100      	movs	r1, #0
 80007de:	4823      	ldr	r0, [pc, #140]	; (800086c <uart5TxDmaSetup+0xc4>)
 80007e0:	f008 fb5c 	bl	8008e9c <memset>
	hdma_uart5_tx.Instance = DMA1_Stream7;
 80007e4:	4b21      	ldr	r3, [pc, #132]	; (800086c <uart5TxDmaSetup+0xc4>)
 80007e6:	4a22      	ldr	r2, [pc, #136]	; (8000870 <uart5TxDmaSetup+0xc8>)
 80007e8:	601a      	str	r2, [r3, #0]
	hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;			//channel 4 is for UART5 Tx
 80007ea:	4b20      	ldr	r3, [pc, #128]	; (800086c <uart5TxDmaSetup+0xc4>)
 80007ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007f0:	605a      	str	r2, [r3, #4]
	hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;	//transfering out of memory and into the peripheral register
 80007f2:	4b1e      	ldr	r3, [pc, #120]	; (800086c <uart5TxDmaSetup+0xc4>)
 80007f4:	2240      	movs	r2, #64	; 0x40
 80007f6:	609a      	str	r2, [r3, #8]
	hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;	//no fifo
 80007f8:	4b1c      	ldr	r3, [pc, #112]	; (800086c <uart5TxDmaSetup+0xc4>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_uart5_tx.Init.MemBurst = DMA_MBURST_SINGLE;		//transfer 1 at a time
 80007fe:	4b1b      	ldr	r3, [pc, #108]	; (800086c <uart5TxDmaSetup+0xc4>)
 8000800:	2200      	movs	r2, #0
 8000802:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000804:	4b19      	ldr	r3, [pc, #100]	; (800086c <uart5TxDmaSetup+0xc4>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
	hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;			//increment 1 byte at a time
 800080a:	4b18      	ldr	r3, [pc, #96]	; (800086c <uart5TxDmaSetup+0xc4>)
 800080c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000810:	611a      	str	r2, [r3, #16]
	hdma_uart5_tx.Init.Mode = DMA_CIRCULAR;				//this will automatically restart the transfer at the beginning after it has finished
 8000812:	4b16      	ldr	r3, [pc, #88]	; (800086c <uart5TxDmaSetup+0xc4>)
 8000814:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000818:	61da      	str	r2, [r3, #28]
	hdma_uart5_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;	//write 1 at a time to the peripheral
 800081a:	4b14      	ldr	r3, [pc, #80]	; (800086c <uart5TxDmaSetup+0xc4>)
 800081c:	2200      	movs	r2, #0
 800081e:	631a      	str	r2, [r3, #48]	; 0x30
	hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;		//always keep the peripheral address the same (the Tx data register is always in the same location)
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <uart5TxDmaSetup+0xc4>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
	hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <uart5TxDmaSetup+0xc4>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
	//we're setting low priority since this is meant to be simulated data - the DMA
	//transfers of the active code should take priority
	hdma_uart5_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <uart5TxDmaSetup+0xc4>)
 800082e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000832:	621a      	str	r2, [r3, #32]
	assert_param(HAL_DMA_Init(&hdma_uart5_tx) == HAL_OK);
 8000834:	480d      	ldr	r0, [pc, #52]	; (800086c <uart5TxDmaSetup+0xc4>)
 8000836:	f000 fff9 	bl	800182c <HAL_DMA_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d003      	beq.n	8000848 <uart5TxDmaSetup+0xa0>
 8000840:	2164      	movs	r1, #100	; 0x64
 8000842:	480c      	ldr	r0, [pc, #48]	; (8000874 <uart5TxDmaSetup+0xcc>)
 8000844:	f000 fda4 	bl	8001390 <assert_failed>
	DMA1_Stream7->CR &= ~DMA_SxCR_EN;
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <uart5TxDmaSetup+0xc8>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a08      	ldr	r2, [pc, #32]	; (8000870 <uart5TxDmaSetup+0xc8>)
 800084e:	f023 0301 	bic.w	r3, r3, #1
 8000852:	6013      	str	r3, [r2, #0]

	//set the DMA transmit mode flag to enable DMA transfers
	UART5->CR3 |= USART_CR3_DMAT;
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <uart5TxDmaSetup+0xd0>)
 8000856:	695b      	ldr	r3, [r3, #20]
 8000858:	4a07      	ldr	r2, [pc, #28]	; (8000878 <uart5TxDmaSetup+0xd0>)
 800085a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800085e:	6153      	str	r3, [r2, #20]
}
 8000860:	bf00      	nop
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40023800 	.word	0x40023800
 800086c:	2000002c 	.word	0x2000002c
 8000870:	400260b8 	.word	0x400260b8
 8000874:	08008ee8 	.word	0x08008ee8
 8000878:	40005000 	.word	0x40005000

0800087c <uart5TxDmaStartRepeat>:
 * that will automatically repeat after it is finished
 * @param Msg pointer to array to transfer
 * @param Len number of elements in the array
 */
static void uart5TxDmaStartRepeat( const uint8_t* Msg, uint16_t Len )
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	460b      	mov	r3, r1
 8000886:	807b      	strh	r3, [r7, #2]

	//clear the transfer complete flag to make sure our transfer starts
	//UART5->CR |= USART_SR_TC;
	UART5->SR &= ~USART_SR_TC;
 8000888:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <uart5TxDmaStartRepeat+0x3c>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <uart5TxDmaStartRepeat+0x3c>)
 800088e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000892:	6013      	str	r3, [r2, #0]
	assert_param(HAL_DMA_Start(&hdma_uart5_tx, (uint32_t)Msg, (uint32_t)&(UART5->DR), Len) == HAL_OK);
 8000894:	6879      	ldr	r1, [r7, #4]
 8000896:	887b      	ldrh	r3, [r7, #2]
 8000898:	4a08      	ldr	r2, [pc, #32]	; (80008bc <uart5TxDmaStartRepeat+0x40>)
 800089a:	4809      	ldr	r0, [pc, #36]	; (80008c0 <uart5TxDmaStartRepeat+0x44>)
 800089c:	f001 f9e0 	bl	8001c60 <HAL_DMA_Start>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d003      	beq.n	80008ae <uart5TxDmaStartRepeat+0x32>
 80008a6:	2177      	movs	r1, #119	; 0x77
 80008a8:	4806      	ldr	r0, [pc, #24]	; (80008c4 <uart5TxDmaStartRepeat+0x48>)
 80008aa:	f000 fd71 	bl	8001390 <assert_failed>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40005000 	.word	0x40005000
 80008bc:	40005004 	.word	0x40005004
 80008c0:	2000002c 	.word	0x2000002c
 80008c4:	08008ee8 	.word	0x08008ee8

080008c8 <DMA1_Stream7_IRQHandler>:

void DMA1_Stream7_IRQHandler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
	//shouldn't ever get here - interrupts are not enabled
	while(1);
 80008cc:	e7fe      	b.n	80008cc <DMA1_Stream7_IRQHandler+0x4>
	...

080008d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f003 0307 	and.w	r3, r3, #7
 80008de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <__NVIC_SetPriorityGrouping+0x44>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008ec:	4013      	ands	r3, r2
 80008ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000902:	4a04      	ldr	r2, [pc, #16]	; (8000914 <__NVIC_SetPriorityGrouping+0x44>)
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	60d3      	str	r3, [r2, #12]
}
 8000908:	bf00      	nop
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000926:	2b00      	cmp	r3, #0
 8000928:	db0b      	blt.n	8000942 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	f003 021f 	and.w	r2, r3, #31
 8000930:	4907      	ldr	r1, [pc, #28]	; (8000950 <__NVIC_EnableIRQ+0x38>)
 8000932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000936:	095b      	lsrs	r3, r3, #5
 8000938:	2001      	movs	r0, #1
 800093a:	fa00 f202 	lsl.w	r2, r0, r2
 800093e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000e100 	.word	0xe000e100

08000954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	6039      	str	r1, [r7, #0]
 800095e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000964:	2b00      	cmp	r3, #0
 8000966:	db0a      	blt.n	800097e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	b2da      	uxtb	r2, r3
 800096c:	490c      	ldr	r1, [pc, #48]	; (80009a0 <__NVIC_SetPriority+0x4c>)
 800096e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000972:	0112      	lsls	r2, r2, #4
 8000974:	b2d2      	uxtb	r2, r2
 8000976:	440b      	add	r3, r1
 8000978:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800097c:	e00a      	b.n	8000994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	b2da      	uxtb	r2, r3
 8000982:	4908      	ldr	r1, [pc, #32]	; (80009a4 <__NVIC_SetPriority+0x50>)
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	f003 030f 	and.w	r3, r3, #15
 800098a:	3b04      	subs	r3, #4
 800098c:	0112      	lsls	r2, r2, #4
 800098e:	b2d2      	uxtb	r2, r2
 8000990:	440b      	add	r3, r1
 8000992:	761a      	strb	r2, [r3, #24]
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	e000e100 	.word	0xe000e100
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <main>:
static uint_fast16_t rxLen = 0;

static DMA_HandleTypeDef usart1DmaRx;

int main()
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af02      	add	r7, sp, #8

	BaseType_t retVal;
	HWInit();
 80009ae:	f000 f9f3 	bl	8000d98 <HWInit>
	SEGGER_SYSVIEW_Conf();
 80009b2:	f008 f905 	bl	8008bc0 <SEGGER_SYSVIEW_Conf>

	//ensure proper priority grouping for freeRTOS
	NVIC_SetPriorityGrouping(0);
 80009b6:	2000      	movs	r0, #0
 80009b8:	f7ff ff8a 	bl	80008d0 <__NVIC_SetPriorityGrouping>
	//this delay is only present since we're using a simple
	//block-based buffer for receiving data - the transmission
	//needs to start after the receiver is ready for data for the
	//strings to start in the correct position in this simple setup
	TimerHandle_t oneShotHandle =
			xTimerCreate(	"startUart5Traffic",
 80009bc:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <main+0x94>)
 80009be:	9300      	str	r3, [sp, #0]
 80009c0:	2300      	movs	r3, #0
 80009c2:	2200      	movs	r2, #0
 80009c4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009c8:	481d      	ldr	r0, [pc, #116]	; (8000a40 <main+0x98>)
 80009ca:	f005 fbef 	bl	80061ac <xTimerCreate>
 80009ce:	6078      	str	r0, [r7, #4]
					500 /portTICK_PERIOD_MS,
					pdFALSE,
					NULL,
					startUart5Traffic);
	assert_param(oneShotHandle != NULL);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d103      	bne.n	80009de <main+0x36>
 80009d6:	213d      	movs	r1, #61	; 0x3d
 80009d8:	481a      	ldr	r0, [pc, #104]	; (8000a44 <main+0x9c>)
 80009da:	f000 fcd9 	bl	8001390 <assert_failed>
	xTimerStart(oneShotHandle, 0);
 80009de:	f004 fe3d 	bl	800565c <xTaskGetTickCount>
 80009e2:	4602      	mov	r2, r0
 80009e4:	2300      	movs	r3, #0
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	2300      	movs	r3, #0
 80009ea:	2101      	movs	r1, #1
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f005 fc39 	bl	8006264 <xTimerGenericCommand>

	//setup tasks, making sure they have been properly created before moving on
	rxDone = xSemaphoreCreateBinary();
 80009f2:	2203      	movs	r2, #3
 80009f4:	2100      	movs	r1, #0
 80009f6:	2001      	movs	r0, #1
 80009f8:	f003 fcc6 	bl	8004388 <xQueueGenericCreate>
 80009fc:	4603      	mov	r3, r0
 80009fe:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <main+0xa0>)
 8000a00:	6013      	str	r3, [r2, #0]
	assert_param(rxDone != NULL);
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <main+0xa0>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d103      	bne.n	8000a12 <main+0x6a>
 8000a0a:	2142      	movs	r1, #66	; 0x42
 8000a0c:	480d      	ldr	r0, [pc, #52]	; (8000a44 <main+0x9c>)
 8000a0e:	f000 fcbf 	bl	8001390 <assert_failed>

	retVal = xTaskCreate(uartPrintOutTask, "uartPrint", STACK_SIZE, NULL, tskIDLE_PRIORITY + 3, NULL);
 8000a12:	2300      	movs	r3, #0
 8000a14:	9301      	str	r3, [sp, #4]
 8000a16:	2303      	movs	r3, #3
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	2280      	movs	r2, #128	; 0x80
 8000a1e:	490b      	ldr	r1, [pc, #44]	; (8000a4c <main+0xa4>)
 8000a20:	480b      	ldr	r0, [pc, #44]	; (8000a50 <main+0xa8>)
 8000a22:	f004 fba7 	bl	8005174 <xTaskCreate>
 8000a26:	6038      	str	r0, [r7, #0]
	assert_param(retVal == pdPASS);
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d003      	beq.n	8000a36 <main+0x8e>
 8000a2e:	2145      	movs	r1, #69	; 0x45
 8000a30:	4804      	ldr	r0, [pc, #16]	; (8000a44 <main+0x9c>)
 8000a32:	f000 fcad 	bl	8001390 <assert_failed>

	//start the scheduler - shouldn't return unless there's a problem
	vTaskStartScheduler();
 8000a36:	f004 fd01 	bl	800543c <vTaskStartScheduler>

	//if you've wound up here, there is likely an issue with overrunning the freeRTOS heap
	while(1)
 8000a3a:	e7fe      	b.n	8000a3a <main+0x92>
 8000a3c:	08000bbd 	.word	0x08000bbd
 8000a40:	08008f00 	.word	0x08008f00
 8000a44:	08008f14 	.word	0x08008f14
 8000a48:	2000008c 	.word	0x2000008c
 8000a4c:	08008f34 	.word	0x08008f34
 8000a50:	08000bf1 	.word	0x08000bf1

08000a54 <setupUSART1DMA>:
}
	/**
	 * sets up DMA for USART2 reception into a single buffer.
	 */
void setupUSART1DMA( void )
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0

	__HAL_RCC_DMA2_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	4b2b      	ldr	r3, [pc, #172]	; (8000b0c <setupUSART1DMA+0xb8>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a2a      	ldr	r2, [pc, #168]	; (8000b0c <setupUSART1DMA+0xb8>)
 8000a64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b28      	ldr	r3, [pc, #160]	; (8000b0c <setupUSART1DMA+0xb8>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]

	NVIC_SetPriority(DMA2_Stream5_IRQn, 6);
 8000a76:	2106      	movs	r1, #6
 8000a78:	2044      	movs	r0, #68	; 0x44
 8000a7a:	f7ff ff6b 	bl	8000954 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000a7e:	2044      	movs	r0, #68	; 0x44
 8000a80:	f7ff ff4a 	bl	8000918 <__NVIC_EnableIRQ>


	//initialize the DMA peripheral to transfer uart4Msg
	//to UART5 repeatedly
	memset(&usart1DmaRx, 0, sizeof(usart1DmaRx));
 8000a84:	2260      	movs	r2, #96	; 0x60
 8000a86:	2100      	movs	r1, #0
 8000a88:	4821      	ldr	r0, [pc, #132]	; (8000b10 <setupUSART1DMA+0xbc>)
 8000a8a:	f008 fa07 	bl	8008e9c <memset>
//		Error_Handler();
//	}


 /* USART1_RX Init */
	usart1DmaRx.Instance = DMA2_Stream5;
 8000a8e:	4b20      	ldr	r3, [pc, #128]	; (8000b10 <setupUSART1DMA+0xbc>)
 8000a90:	4a20      	ldr	r2, [pc, #128]	; (8000b14 <setupUSART1DMA+0xc0>)
 8000a92:	601a      	str	r2, [r3, #0]
	usart1DmaRx.Init.Channel = DMA_CHANNEL_4;
 8000a94:	4b1e      	ldr	r3, [pc, #120]	; (8000b10 <setupUSART1DMA+0xbc>)
 8000a96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a9a:	605a      	str	r2, [r3, #4]
	usart1DmaRx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a9c:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <setupUSART1DMA+0xbc>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
	usart1DmaRx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aa2:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <setupUSART1DMA+0xbc>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
	usart1DmaRx.Init.MemInc = DMA_MINC_ENABLE;
 8000aa8:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <setupUSART1DMA+0xbc>)
 8000aaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aae:	611a      	str	r2, [r3, #16]
	usart1DmaRx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ab0:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <setupUSART1DMA+0xbc>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	615a      	str	r2, [r3, #20]
	usart1DmaRx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ab6:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <setupUSART1DMA+0xbc>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
	usart1DmaRx.Init.Mode = DMA_NORMAL;
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <setupUSART1DMA+0xbc>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
	usart1DmaRx.Init.Priority = DMA_PRIORITY_HIGH;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <setupUSART1DMA+0xbc>)
 8000ac4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ac8:	621a      	str	r2, [r3, #32]
	usart1DmaRx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <setupUSART1DMA+0xbc>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	625a      	str	r2, [r3, #36]	; 0x24
	usart1DmaRx.Init.PeriphBurst = DMA_PBURST_SINGLE;		//write 1 at a time to the peripheral
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <setupUSART1DMA+0xbc>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	631a      	str	r2, [r3, #48]	; 0x30
	usart1DmaRx.Init.MemBurst = DMA_MBURST_SINGLE;		//transfer 1 at a time
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <setupUSART1DMA+0xbc>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_DMA_Init(&usart1DmaRx) != HAL_OK)
 8000adc:	480c      	ldr	r0, [pc, #48]	; (8000b10 <setupUSART1DMA+0xbc>)
 8000ade:	f000 fea5 	bl	800182c <HAL_DMA_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <setupUSART1DMA+0x98>
	{
	  Error_Handler();
 8000ae8:	f000 fc4a 	bl	8001380 <Error_Handler>
	}

	DMA2_Stream5->CR |= DMA_SxCR_TCIE;	//enable transfer complete interrupts
 8000aec:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <setupUSART1DMA+0xc0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a08      	ldr	r2, [pc, #32]	; (8000b14 <setupUSART1DMA+0xc0>)
 8000af2:	f043 0310 	orr.w	r3, r3, #16
 8000af6:	6013      	str	r3, [r2, #0]
	USART1->CR3 |= USART_CR3_DMAR; //  USART_CR3_DMAR_Msk;	//set the DMA receive mode flag in the USART
 8000af8:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <setupUSART1DMA+0xc4>)
 8000afa:	695b      	ldr	r3, [r3, #20]
 8000afc:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <setupUSART1DMA+0xc4>)
 8000afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b02:	6153      	str	r3, [r2, #20]
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	20000098 	.word	0x20000098
 8000b14:	40026488 	.word	0x40026488
 8000b18:	40011000 	.word	0x40011000

08000b1c <startReceiveDMA>:
/**
 * Start an interrupt driven receive.  This particular ISR is hard-coded
 * to give a semaphore when the reception is finished
 */
int32_t startReceiveDMA( uint8_t* Buffer, uint_fast16_t Len )
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
	if(!rxInProgress && (Buffer != NULL))
 8000b26:	4b20      	ldr	r3, [pc, #128]	; (8000ba8 <startReceiveDMA+0x8c>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	f083 0301 	eor.w	r3, r3, #1
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d033      	beq.n	8000b9c <startReceiveDMA+0x80>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d030      	beq.n	8000b9c <startReceiveDMA+0x80>
	{
		rxInProgress = true;
 8000b3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <startReceiveDMA+0x8c>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	701a      	strb	r2, [r3, #0]
		rxLen = Len;
 8000b40:	4a1a      	ldr	r2, [pc, #104]	; (8000bac <startReceiveDMA+0x90>)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	6013      	str	r3, [r2, #0]

		//get the DMA peripheral ready to receive data immediately before enabling UART
		//so there is no chance of overrun
		//dma stream enable bit must be toggled before a transfer will properly restart
		__HAL_DMA_DISABLE(&usart1DmaRx);
 8000b46:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <startReceiveDMA+0x94>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <startReceiveDMA+0x94>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f022 0201 	bic.w	r2, r2, #1
 8000b54:	601a      	str	r2, [r3, #0]
		setupUSART1DMA();
 8000b56:	f7ff ff7d 	bl	8000a54 <setupUSART1DMA>
		if(HAL_DMA_Start(&usart1DmaRx, (uint32_t)&(USART1->DR), (uint32_t) Buffer, Len) != HAL_OK)
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	4915      	ldr	r1, [pc, #84]	; (8000bb4 <startReceiveDMA+0x98>)
 8000b60:	4813      	ldr	r0, [pc, #76]	; (8000bb0 <startReceiveDMA+0x94>)
 8000b62:	f001 f87d 	bl	8001c60 <HAL_DMA_Start>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d002      	beq.n	8000b72 <startReceiveDMA+0x56>
		{
			return -1;
 8000b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b70:	e016      	b.n	8000ba0 <startReceiveDMA+0x84>
		}

		//enable the UART
		//clears error flags
		//clear error flags
		USART1->SR &= ~(USART_SR_ORE |  // overun error
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <startReceiveDMA+0x9c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a10      	ldr	r2, [pc, #64]	; (8000bb8 <startReceiveDMA+0x9c>)
 8000b78:	f023 030f 	bic.w	r3, r3, #15
 8000b7c:	6013      	str	r3, [r2, #0]
		//we'll wind up with a lot of noise on the line (the way the ISR is written will
		//cause a transfer to terminate if there are any errors are detected, rather than simply
		//continue with what data it can).  In this specific application, most of the "errors" at baudrates below
		//460800 are noise detection
		//USART2->CR3 |= (USART_CR3_EIE);	//enable error interrupts
		NVIC_SetPriority(USART1_IRQn, 6);
 8000b7e:	2106      	movs	r1, #6
 8000b80:	2025      	movs	r0, #37	; 0x25
 8000b82:	f7ff fee7 	bl	8000954 <__NVIC_SetPriority>
		NVIC_EnableIRQ(USART1_IRQn);
 8000b86:	2025      	movs	r0, #37	; 0x25
 8000b88:	f7ff fec6 	bl	8000918 <__NVIC_EnableIRQ>
		USART1->CR1 |= (USART_CR1_UE);
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <startReceiveDMA+0x9c>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	4a09      	ldr	r2, [pc, #36]	; (8000bb8 <startReceiveDMA+0x9c>)
 8000b92:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b96:	60d3      	str	r3, [r2, #12]
		return 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	e001      	b.n	8000ba0 <startReceiveDMA+0x84>
	}

	return -1;
 8000b9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000090 	.word	0x20000090
 8000bac:	20000094 	.word	0x20000094
 8000bb0:	20000098 	.word	0x20000098
 8000bb4:	40011004 	.word	0x40011004
 8000bb8:	40011000 	.word	0x40011000

08000bbc <startUart5Traffic>:



void startUart5Traffic( TimerHandle_t xTimer )
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	SetupUart5ExternalSim(BAUDRATE);
 8000bc4:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000bc8:	f7ff fdce 	bl	8000768 <SetupUart5ExternalSim>
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <stopReceiveDMA>:

void stopReceiveDMA( void )
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	rxInProgress = false;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <stopReceiveDMA+0x14>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
	HAL_DMA_Abort(&usart1DmaRx);
 8000bde:	4803      	ldr	r0, [pc, #12]	; (8000bec <stopReceiveDMA+0x18>)
 8000be0:	f001 f888 	bl	8001cf4 <HAL_DMA_Abort>
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000090 	.word	0x20000090
 8000bec:	20000098 	.word	0x20000098

08000bf0 <uartPrintOutTask>:


void uartPrintOutTask( void* NotUsed)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b088      	sub	sp, #32
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
#define MSG_LEN 16
	uint8_t rxData[MSG_LEN];
	uint8_t expectedLen = MSG_LEN;
 8000bf8:	2310      	movs	r3, #16
 8000bfa:	77fb      	strb	r3, [r7, #31]
	memset((void*)rxData, 0, MSG_LEN);
 8000bfc:	f107 030c 	add.w	r3, r7, #12
 8000c00:	2210      	movs	r2, #16
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f008 f949 	bl	8008e9c <memset>

	setupUSART1DMA();
 8000c0a:	f7ff ff23 	bl	8000a54 <setupUSART1DMA>
	STM_UartInit(USART1, BAUDRATE, NULL, &usart1DmaRx);
 8000c0e:	4b1b      	ldr	r3, [pc, #108]	; (8000c7c <uartPrintOutTask+0x8c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8000c16:	481a      	ldr	r0, [pc, #104]	; (8000c80 <uartPrintOutTask+0x90>)
 8000c18:	f7ff fd38 	bl	800068c <STM_UartInit>
	while(1)
	{
		startReceiveDMA(rxData, expectedLen);
 8000c1c:	7ffa      	ldrb	r2, [r7, #31]
 8000c1e:	f107 030c 	add.w	r3, r7, #12
 8000c22:	4611      	mov	r1, r2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff79 	bl	8000b1c <startReceiveDMA>
		if(xSemaphoreTake(rxDone, 100) == pdPASS)
 8000c2a:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <uartPrintOutTask+0x94>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2164      	movs	r1, #100	; 0x64
 8000c30:	4618      	mov	r0, r3
 8000c32:	f003 ffd5 	bl	8004be0 <xQueueSemaphoreTake>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d118      	bne.n	8000c6e <uartPrintOutTask+0x7e>
		{
			//NDTR is the remaining number of data items to be transferred,
			//0 signals completion
			if(DMA2_Stream5->NDTR == 0)
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <uartPrintOutTask+0x98>)
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d108      	bne.n	8000c56 <uartPrintOutTask+0x66>
			{
				SEGGER_SYSVIEW_Print("received: ");
 8000c44:	4811      	ldr	r0, [pc, #68]	; (8000c8c <uartPrintOutTask+0x9c>)
 8000c46:	f007 fef5 	bl	8008a34 <SEGGER_SYSVIEW_Print>
				SEGGER_SYSVIEW_Print((char*)rxData);
 8000c4a:	f107 030c 	add.w	r3, r7, #12
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f007 fef0 	bl	8008a34 <SEGGER_SYSVIEW_Print>
 8000c54:	e7e2      	b.n	8000c1c <uartPrintOutTask+0x2c>
			}
			else
			{
				//stop the transfer on a timeout
				stopReceiveDMA();
 8000c56:	f7ff ffbd 	bl	8000bd4 <stopReceiveDMA>
				SEGGER_SYSVIEW_PrintfHost("Error expected %d bytes received %d", expectedLen, (expectedLen - DMA2_Stream5->NDTR));
 8000c5a:	7ff9      	ldrb	r1, [r7, #31]
 8000c5c:	7ffa      	ldrb	r2, [r7, #31]
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <uartPrintOutTask+0x98>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	1ad3      	subs	r3, r2, r3
 8000c64:	461a      	mov	r2, r3
 8000c66:	480a      	ldr	r0, [pc, #40]	; (8000c90 <uartPrintOutTask+0xa0>)
 8000c68:	f007 fed0 	bl	8008a0c <SEGGER_SYSVIEW_PrintfHost>
 8000c6c:	e7d6      	b.n	8000c1c <uartPrintOutTask+0x2c>
			}
		}
		else
		{
			stopReceiveDMA();
 8000c6e:	f7ff ffb1 	bl	8000bd4 <stopReceiveDMA>
			SEGGER_SYSVIEW_PrintfHost("timeout");
 8000c72:	4808      	ldr	r0, [pc, #32]	; (8000c94 <uartPrintOutTask+0xa4>)
 8000c74:	f007 feca 	bl	8008a0c <SEGGER_SYSVIEW_PrintfHost>
		startReceiveDMA(rxData, expectedLen);
 8000c78:	e7d0      	b.n	8000c1c <uartPrintOutTask+0x2c>
 8000c7a:	bf00      	nop
 8000c7c:	20000098 	.word	0x20000098
 8000c80:	40011000 	.word	0x40011000
 8000c84:	2000008c 	.word	0x2000008c
 8000c88:	40026488 	.word	0x40026488
 8000c8c:	08008f40 	.word	0x08008f40
 8000c90:	08008f4c 	.word	0x08008f4c
 8000c94:	08008f70 	.word	0x08008f70

08000c98 <DMA2_Stream5_IRQHandler>:
/**
 * Given the DMA setup performed by setupUSART2DMA
 * this ISR will only execute when a DMA transfer is complete
 */
void DMA2_Stream5_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]
	SEGGER_SYSVIEW_RecordEnterISR();
 8000ca2:	f007 fc0b 	bl	80084bc <SEGGER_SYSVIEW_RecordEnterISR>

	if(rxInProgress && (DMA2->HISR & DMA_HISR_TCIF5))
 8000ca6:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <DMA2_Stream5_IRQHandler+0x70>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d015      	beq.n	8000cda <DMA2_Stream5_IRQHandler+0x42>
 8000cae:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <DMA2_Stream5_IRQHandler+0x74>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d00f      	beq.n	8000cda <DMA2_Stream5_IRQHandler+0x42>
	{
		rxInProgress = false;
 8000cba:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <DMA2_Stream5_IRQHandler+0x70>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
		DMA2->HIFCR |= DMA_HIFCR_CTCIF5;
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <DMA2_Stream5_IRQHandler+0x74>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	4a11      	ldr	r2, [pc, #68]	; (8000d0c <DMA2_Stream5_IRQHandler+0x74>)
 8000cc6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cca:	60d3      	str	r3, [r2, #12]
		xSemaphoreGiveFromISR(rxDone, &xHigherPriorityTaskWoken);
 8000ccc:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <DMA2_Stream5_IRQHandler+0x78>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	1d3a      	adds	r2, r7, #4
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f003 fdc3 	bl	8004860 <xQueueGiveFromISR>
	}
	SEGGER_SYSVIEW_RecordExitISR();
 8000cda:	f007 fc31 	bl	8008540 <SEGGER_SYSVIEW_RecordExitISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d00a      	beq.n	8000cfa <DMA2_Stream5_IRQHandler+0x62>
 8000ce4:	f007 fc48 	bl	8008578 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8000ce8:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <DMA2_Stream5_IRQHandler+0x7c>)
 8000cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	f3bf 8f4f 	dsb	sy
 8000cf4:	f3bf 8f6f 	isb	sy
}
 8000cf8:	e001      	b.n	8000cfe <DMA2_Stream5_IRQHandler+0x66>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000cfa:	f007 fc21 	bl	8008540 <SEGGER_SYSVIEW_RecordExitISR>
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000090 	.word	0x20000090
 8000d0c:	40026400 	.word	0x40026400
 8000d10:	2000008c 	.word	0x2000008c
 8000d14:	e000ed04 	.word	0xe000ed04

08000d18 <USART1_IRQHandler>:

/**
 * This ISR should only execute when there is an error
 */
void USART1_IRQHandler( void )
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
	SEGGER_SYSVIEW_RecordEnterISR();
 8000d22:	f007 fbcb 	bl	80084bc <SEGGER_SYSVIEW_RecordEnterISR>

	//first check for errors
		if(	USART1->SR & (	USART_SR_ORE_Msk |
 8000d26:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <USART1_IRQHandler+0x70>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f003 030f 	and.w	r3, r3, #15
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d013      	beq.n	8000d5a <USART1_IRQHandler+0x42>
				USART_SR_NE_Msk |
				USART_SR_FE_Msk |
				USART_SR_PE_Msk ))
		{
			//clear error flags
			USART1->SR &= ~(USART_SR_ORE |  // overun error
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <USART1_IRQHandler+0x70>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a14      	ldr	r2, [pc, #80]	; (8000d88 <USART1_IRQHandler+0x70>)
 8000d38:	f023 030f 	bic.w	r3, r3, #15
 8000d3c:	6013      	str	r3, [r2, #0]
		//if a function pointer-based callback is used instead
		//of a semaphore, an error flag could be sent directly
		//through the function call.  With this semaphore approach,
		//the closest thing we can do is set an external error flag
		//or explicitly check the number of received bytes
		if(rxInProgress)
 8000d3e:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <USART1_IRQHandler+0x74>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d009      	beq.n	8000d5a <USART1_IRQHandler+0x42>
		{
			rxInProgress = false;
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <USART1_IRQHandler+0x74>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
			xSemaphoreGiveFromISR(rxDone, &xHigherPriorityTaskWoken);
 8000d4c:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <USART1_IRQHandler+0x78>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	1d3a      	adds	r2, r7, #4
 8000d52:	4611      	mov	r1, r2
 8000d54:	4618      	mov	r0, r3
 8000d56:	f003 fd83 	bl	8004860 <xQueueGiveFromISR>
	//there is no need to check receive not empty, since
	//receive interrupt requests are triggering transfers
	//through DMA1 channel 4 stream 5
	//	if(	USART2->ISR & USART_ISR_RXNE_Msk)

	SEGGER_SYSVIEW_RecordExitISR();
 8000d5a:	f007 fbf1 	bl	8008540 <SEGGER_SYSVIEW_RecordExitISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d00a      	beq.n	8000d7a <USART1_IRQHandler+0x62>
 8000d64:	f007 fc08 	bl	8008578 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8000d68:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <USART1_IRQHandler+0x7c>)
 8000d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	f3bf 8f4f 	dsb	sy
 8000d74:	f3bf 8f6f 	isb	sy
}
 8000d78:	e001      	b.n	8000d7e <USART1_IRQHandler+0x66>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000d7a:	f007 fbe1 	bl	8008540 <SEGGER_SYSVIEW_RecordExitISR>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40011000 	.word	0x40011000
 8000d8c:	20000090 	.word	0x20000090
 8000d90:	2000008c 	.word	0x2000008c
 8000d94:	e000ed04 	.word	0xe000ed04

08000d98 <HWInit>:
 * Initialize the minimum amount of hardware that will be used in all examples
 * Other initialization might also be necessary (PWM for LED's, USART's, USB, etc)
 * and should be performed after the initial call to HWInit
 */
void HWInit( void )
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	HAL_Init();
 8000d9c:	f000 fc06 	bl	80015ac <HAL_Init>
	SystemClock_Config();
 8000da0:	f000 f806 	bl	8000db0 <SystemClock_Config>
	gpioPinsInit();			//initialize GPIO lines for LED's
 8000da4:	f000 f870 	bl	8000e88 <gpioPinsInit>
	rngInit();
 8000da8:	f000 fac8 	bl	800133c <rngInit>
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <SystemClock_Config>:
	return RNG->DR %Max + Min;
}


void SystemClock_Config(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b094      	sub	sp, #80	; 0x50
 8000db4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db6:	f107 0320 	add.w	r3, r7, #32
 8000dba:	2230      	movs	r2, #48	; 0x30
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f008 f86c 	bl	8008e9c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc4:	f107 030c 	add.w	r3, r7, #12
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	4b29      	ldr	r3, [pc, #164]	; (8000e80 <SystemClock_Config+0xd0>)
 8000dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ddc:	4a28      	ldr	r2, [pc, #160]	; (8000e80 <SystemClock_Config+0xd0>)
 8000dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de2:	6413      	str	r3, [r2, #64]	; 0x40
 8000de4:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <SystemClock_Config+0xd0>)
 8000de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000df0:	2300      	movs	r3, #0
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	4b23      	ldr	r3, [pc, #140]	; (8000e84 <SystemClock_Config+0xd4>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dfc:	4a21      	ldr	r2, [pc, #132]	; (8000e84 <SystemClock_Config+0xd4>)
 8000dfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e02:	6013      	str	r3, [r2, #0]
 8000e04:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <SystemClock_Config+0xd4>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e10:	2302      	movs	r3, #2
 8000e12:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e14:	2301      	movs	r3, #1
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e18:	2310      	movs	r3, #16
 8000e1a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e20:	2300      	movs	r3, #0
 8000e22:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000e24:	2308      	movs	r3, #8
 8000e26:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 50;
 8000e28:	2332      	movs	r3, #50	; 0x32
 8000e2a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e2c:	2304      	movs	r3, #4
 8000e2e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e30:	2307      	movs	r3, #7
 8000e32:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e34:	f107 0320 	add.w	r3, r7, #32
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f001 fbff 	bl	800263c <HAL_RCC_OscConfig>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8000e44:	f000 fa9c 	bl	8001380 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e48:	230f      	movs	r3, #15
 8000e4a:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000e54:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e58:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000e5a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e5e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e60:	f107 030c 	add.w	r3, r7, #12
 8000e64:	2100      	movs	r1, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f001 ff10 	bl	8002c8c <HAL_RCC_ClockConfig>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <SystemClock_Config+0xc6>
	{
		Error_Handler();
 8000e72:	f000 fa85 	bl	8001380 <Error_Handler>
	}

}
 8000e76:	bf00      	nop
 8000e78:	3750      	adds	r7, #80	; 0x50
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40007000 	.word	0x40007000

08000e88 <gpioPinsInit>:
/**
  * Initialize all relevant GPIO lines for LED's used in examples, as well as
  * USB pins
  */
static void gpioPinsInit(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08e      	sub	sp, #56	; 0x38
 8000e8c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	623b      	str	r3, [r7, #32]
 8000ea2:	4bb2      	ldr	r3, [pc, #712]	; (800116c <gpioPinsInit+0x2e4>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4ab1      	ldr	r2, [pc, #708]	; (800116c <gpioPinsInit+0x2e4>)
 8000ea8:	f043 0304 	orr.w	r3, r3, #4
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4baf      	ldr	r3, [pc, #700]	; (800116c <gpioPinsInit+0x2e4>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0304 	and.w	r3, r3, #4
 8000eb6:	623b      	str	r3, [r7, #32]
 8000eb8:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
 8000ebe:	4bab      	ldr	r3, [pc, #684]	; (800116c <gpioPinsInit+0x2e4>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4aaa      	ldr	r2, [pc, #680]	; (800116c <gpioPinsInit+0x2e4>)
 8000ec4:	f043 0320 	orr.w	r3, r3, #32
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4ba8      	ldr	r3, [pc, #672]	; (800116c <gpioPinsInit+0x2e4>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0320 	and.w	r3, r3, #32
 8000ed2:	61fb      	str	r3, [r7, #28]
 8000ed4:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
 8000eda:	4ba4      	ldr	r3, [pc, #656]	; (800116c <gpioPinsInit+0x2e4>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4aa3      	ldr	r2, [pc, #652]	; (800116c <gpioPinsInit+0x2e4>)
 8000ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4ba1      	ldr	r3, [pc, #644]	; (800116c <gpioPinsInit+0x2e4>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eee:	61bb      	str	r3, [r7, #24]
 8000ef0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
 8000ef6:	4b9d      	ldr	r3, [pc, #628]	; (800116c <gpioPinsInit+0x2e4>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a9c      	ldr	r2, [pc, #624]	; (800116c <gpioPinsInit+0x2e4>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b9a      	ldr	r3, [pc, #616]	; (800116c <gpioPinsInit+0x2e4>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	4b96      	ldr	r3, [pc, #600]	; (800116c <gpioPinsInit+0x2e4>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a95      	ldr	r2, [pc, #596]	; (800116c <gpioPinsInit+0x2e4>)
 8000f18:	f043 0302 	orr.w	r3, r3, #2
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b93      	ldr	r3, [pc, #588]	; (800116c <gpioPinsInit+0x2e4>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	4b8f      	ldr	r3, [pc, #572]	; (800116c <gpioPinsInit+0x2e4>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a8e      	ldr	r2, [pc, #568]	; (800116c <gpioPinsInit+0x2e4>)
 8000f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b8c      	ldr	r3, [pc, #560]	; (800116c <gpioPinsInit+0x2e4>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	4b88      	ldr	r3, [pc, #544]	; (800116c <gpioPinsInit+0x2e4>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a87      	ldr	r2, [pc, #540]	; (800116c <gpioPinsInit+0x2e4>)
 8000f50:	f043 0310 	orr.w	r3, r3, #16
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b85      	ldr	r3, [pc, #532]	; (800116c <gpioPinsInit+0x2e4>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0310 	and.w	r3, r3, #16
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	4b81      	ldr	r3, [pc, #516]	; (800116c <gpioPinsInit+0x2e4>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a80      	ldr	r2, [pc, #512]	; (800116c <gpioPinsInit+0x2e4>)
 8000f6c:	f043 0308 	orr.w	r3, r3, #8
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b7e      	ldr	r3, [pc, #504]	; (800116c <gpioPinsInit+0x2e4>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0308 	and.w	r3, r3, #8
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2116      	movs	r1, #22
 8000f82:	487b      	ldr	r0, [pc, #492]	; (8001170 <gpioPinsInit+0x2e8>)
 8000f84:	f001 fb28 	bl	80025d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2180      	movs	r1, #128	; 0x80
 8000f8c:	4879      	ldr	r0, [pc, #484]	; (8001174 <gpioPinsInit+0x2ec>)
 8000f8e:	f001 fb23 	bl	80025d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000f98:	4877      	ldr	r0, [pc, #476]	; (8001178 <gpioPinsInit+0x2f0>)
 8000f9a:	f001 fb1d 	bl	80025d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000fa4:	4875      	ldr	r0, [pc, #468]	; (800117c <gpioPinsInit+0x2f4>)
 8000fa6:	f001 fb17 	bl	80025d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
	                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
	                           A7_Pin A8_Pin A9_Pin */
	GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000faa:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
			|A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
			|A7_Pin|A8_Pin|A9_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000fbc:	230c      	movs	r3, #12
 8000fbe:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	486e      	ldr	r0, [pc, #440]	; (8001180 <gpioPinsInit+0x2f8>)
 8000fc8:	f000 ffe4 	bl	8001f94 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
	GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000fcc:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000fde:	2305      	movs	r3, #5
 8000fe0:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4865      	ldr	r0, [pc, #404]	; (8001180 <gpioPinsInit+0x2f8>)
 8000fea:	f000 ffd3 	bl	8001f94 <HAL_GPIO_Init>

	/*Configure GPIO pin : ENABLE_Pin */
	GPIO_InitStruct.Pin = ENABLE_Pin;
 8000fee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001000:	230e      	movs	r3, #14
 8001002:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001008:	4619      	mov	r1, r3
 800100a:	485d      	ldr	r0, [pc, #372]	; (8001180 <gpioPinsInit+0x2f8>)
 800100c:	f000 ffc2 	bl	8001f94 <HAL_GPIO_Init>

	/*Configure GPIO pin : SDNWE_Pin */
	GPIO_InitStruct.Pin = SDNWE_Pin;
 8001010:	2301      	movs	r3, #1
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101c:	2303      	movs	r3, #3
 800101e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001020:	230c      	movs	r3, #12
 8001022:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001028:	4619      	mov	r1, r3
 800102a:	4851      	ldr	r0, [pc, #324]	; (8001170 <gpioPinsInit+0x2e8>)
 800102c:	f000 ffb2 	bl	8001f94 <HAL_GPIO_Init>

	/*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
	GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001030:	2316      	movs	r3, #22
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001034:	2301      	movs	r3, #1
 8001036:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2300      	movs	r3, #0
 800103e:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001044:	4619      	mov	r1, r3
 8001046:	484a      	ldr	r0, [pc, #296]	; (8001170 <gpioPinsInit+0x2e8>)
 8001048:	f000 ffa4 	bl	8001f94 <HAL_GPIO_Init>

	/*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
	GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800104c:	f248 0307 	movw	r3, #32775	; 0x8007
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001052:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001056:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001060:	4619      	mov	r1, r3
 8001062:	4844      	ldr	r0, [pc, #272]	; (8001174 <gpioPinsInit+0x2ec>)
 8001064:	f000 ff96 	bl	8001f94 <HAL_GPIO_Init>

	/*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
	                           R5_Pin */
	GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001068:	f641 0358 	movw	r3, #6232	; 0x1858
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
			|R5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	2302      	movs	r3, #2
 8001070:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2300      	movs	r3, #0
 8001078:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800107a:	230e      	movs	r3, #14
 800107c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001082:	4619      	mov	r1, r3
 8001084:	483b      	ldr	r0, [pc, #236]	; (8001174 <gpioPinsInit+0x2ec>)
 8001086:	f000 ff85 	bl	8001f94 <HAL_GPIO_Init>

	/*Configure GPIO pin : ACP_RST_Pin */
	GPIO_InitStruct.Pin = ACP_RST_Pin;
 800108a:	2380      	movs	r3, #128	; 0x80
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108e:	2301      	movs	r3, #1
 8001090:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800109a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109e:	4619      	mov	r1, r3
 80010a0:	4834      	ldr	r0, [pc, #208]	; (8001174 <gpioPinsInit+0x2ec>)
 80010a2:	f000 ff77 	bl	8001f94 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OC_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80010a6:	2320      	movs	r3, #32
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010aa:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80010b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b8:	4619      	mov	r1, r3
 80010ba:	482d      	ldr	r0, [pc, #180]	; (8001170 <gpioPinsInit+0x2e8>)
 80010bc:	f000 ff6a 	bl	8001f94 <HAL_GPIO_Init>

	/*Configure GPIO pins : R3_Pin R6_Pin */
	GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80010c0:	2303      	movs	r3, #3
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	2302      	movs	r3, #2
 80010c6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2300      	movs	r3, #0
 80010ce:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80010d0:	2309      	movs	r3, #9
 80010d2:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d8:	4619      	mov	r1, r3
 80010da:	482a      	ldr	r0, [pc, #168]	; (8001184 <gpioPinsInit+0x2fc>)
 80010dc:	f000 ff5a 	bl	8001f94 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 80010e0:	2304      	movs	r3, #4
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e4:	2300      	movs	r3, #0
 80010e6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80010ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f0:	4619      	mov	r1, r3
 80010f2:	4824      	ldr	r0, [pc, #144]	; (8001184 <gpioPinsInit+0x2fc>)
 80010f4:	f000 ff4e 	bl	8001f94 <HAL_GPIO_Init>

	/*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
	                           SDCLK_Pin SDNCAS_Pin */
	GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80010f8:	f248 1333 	movw	r3, #33075	; 0x8133
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
			|SDCLK_Pin|SDNCAS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800110a:	230c      	movs	r3, #12
 800110c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800110e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001112:	4619      	mov	r1, r3
 8001114:	4819      	ldr	r0, [pc, #100]	; (800117c <gpioPinsInit+0x2f4>)
 8001116:	f000 ff3d 	bl	8001f94 <HAL_GPIO_Init>

	/*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
	                           D8_Pin D9_Pin D10_Pin D11_Pin
	                           D12_Pin NBL0_Pin NBL1_Pin */
	GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800111a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
			|D8_Pin|D9_Pin|D10_Pin|D11_Pin
			|D12_Pin|NBL0_Pin|NBL1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001128:	2303      	movs	r3, #3
 800112a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800112c:	230c      	movs	r3, #12
 800112e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001134:	4619      	mov	r1, r3
 8001136:	4814      	ldr	r0, [pc, #80]	; (8001188 <gpioPinsInit+0x300>)
 8001138:	f000 ff2c 	bl	8001f94 <HAL_GPIO_Init>

	/*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
	GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800113c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800114e:	230e      	movs	r3, #14
 8001150:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001156:	4619      	mov	r1, r3
 8001158:	480a      	ldr	r0, [pc, #40]	; (8001184 <gpioPinsInit+0x2fc>)
 800115a:	f000 ff1b 	bl	8001f94 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
	GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800115e:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	62bb      	str	r3, [r7, #40]	; 0x28
 8001168:	e010      	b.n	800118c <gpioPinsInit+0x304>
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800
 8001170:	40020800 	.word	0x40020800
 8001174:	40020000 	.word	0x40020000
 8001178:	40020c00 	.word	0x40020c00
 800117c:	40021800 	.word	0x40021800
 8001180:	40021400 	.word	0x40021400
 8001184:	40020400 	.word	0x40020400
 8001188:	40021000 	.word	0x40021000
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001194:	230c      	movs	r3, #12
 8001196:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119c:	4619      	mov	r1, r3
 800119e:	4862      	ldr	r0, [pc, #392]	; (8001328 <gpioPinsInit+0x4a0>)
 80011a0:	f000 fef8 	bl	8001f94 <HAL_GPIO_Init>

	/*Configure GPIO pin : VBUS_HS_Pin */
	GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80011a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011aa:	2300      	movs	r3, #0
 80011ac:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80011b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b6:	4619      	mov	r1, r3
 80011b8:	485b      	ldr	r0, [pc, #364]	; (8001328 <gpioPinsInit+0x4a0>)
 80011ba:	f000 feeb 	bl	8001f94 <HAL_GPIO_Init>

	/*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
	                           D1_Pin D2_Pin D3_Pin */
	GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80011be:	f24c 7303 	movw	r3, #50947	; 0xc703
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
			|D1_Pin|D2_Pin|D3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011cc:	2303      	movs	r3, #3
 80011ce:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011d0:	230c      	movs	r3, #12
 80011d2:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d8:	4619      	mov	r1, r3
 80011da:	4854      	ldr	r0, [pc, #336]	; (800132c <gpioPinsInit+0x4a4>)
 80011dc:	f000 feda 	bl	8001f94 <HAL_GPIO_Init>

	/*Configure GPIO pin : TE_Pin */
	GPIO_InitStruct.Pin = TE_Pin;
 80011e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e6:	2300      	movs	r3, #0
 80011e8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80011ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f2:	4619      	mov	r1, r3
 80011f4:	484d      	ldr	r0, [pc, #308]	; (800132c <gpioPinsInit+0x4a4>)
 80011f6:	f000 fecd 	bl	8001f94 <HAL_GPIO_Init>

	/*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
	GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80011fa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001200:	2301      	movs	r3, #1
 8001202:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001208:	2300      	movs	r3, #0
 800120a:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800120c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001210:	4619      	mov	r1, r3
 8001212:	4846      	ldr	r0, [pc, #280]	; (800132c <gpioPinsInit+0x4a4>)
 8001214:	f000 febe 	bl	8001f94 <HAL_GPIO_Init>

	/*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
	GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001218:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800122a:	230e      	movs	r3, #14
 800122c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800122e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001232:	4619      	mov	r1, r3
 8001234:	483e      	ldr	r0, [pc, #248]	; (8001330 <gpioPinsInit+0x4a8>)
 8001236:	f000 fead 	bl	8001f94 <HAL_GPIO_Init>

	/*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
	GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800123a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	2302      	movs	r3, #2
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2300      	movs	r3, #0
 800124a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800124c:	230e      	movs	r3, #14
 800124e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001254:	4619      	mov	r1, r3
 8001256:	4837      	ldr	r0, [pc, #220]	; (8001334 <gpioPinsInit+0x4ac>)
 8001258:	f000 fe9c 	bl	8001f94 <HAL_GPIO_Init>

	/*Configure GPIO pin : I2C3_SDA_Pin */
	GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800125c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001262:	2312      	movs	r3, #18
 8001264:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126a:	2300      	movs	r3, #0
 800126c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800126e:	2304      	movs	r3, #4
 8001270:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001272:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001276:	4619      	mov	r1, r3
 8001278:	482e      	ldr	r0, [pc, #184]	; (8001334 <gpioPinsInit+0x4ac>)
 800127a:	f000 fe8b 	bl	8001f94 <HAL_GPIO_Init>

	/*Configure GPIO pin : I2C3_SCL_Pin */
	GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800127e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001284:	2312      	movs	r3, #18
 8001286:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2300      	movs	r3, #0
 800128e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001290:	2304      	movs	r3, #4
 8001292:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001298:	4619      	mov	r1, r3
 800129a:	4827      	ldr	r0, [pc, #156]	; (8001338 <gpioPinsInit+0x4b0>)
 800129c:	f000 fe7a 	bl	8001f94 <HAL_GPIO_Init>

	/*Configure GPIO pins : G7_Pin B2_Pin */
	GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80012a0:	2348      	movs	r3, #72	; 0x48
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	2302      	movs	r3, #2
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	2300      	movs	r3, #0
 80012ae:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012b0:	230e      	movs	r3, #14
 80012b2:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b8:	4619      	mov	r1, r3
 80012ba:	481c      	ldr	r0, [pc, #112]	; (800132c <gpioPinsInit+0x4a4>)
 80012bc:	f000 fe6a 	bl	8001f94 <HAL_GPIO_Init>

	/*Configure GPIO pins : G3_Pin B4_Pin */
	GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80012c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	2302      	movs	r3, #2
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	2300      	movs	r3, #0
 80012d0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80012d2:	2309      	movs	r3, #9
 80012d4:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012da:	4619      	mov	r1, r3
 80012dc:	4814      	ldr	r0, [pc, #80]	; (8001330 <gpioPinsInit+0x4a8>)
 80012de:	f000 fe59 	bl	8001f94 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin LD4_Pin */
	GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80012e2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f8:	4619      	mov	r1, r3
 80012fa:	480d      	ldr	r0, [pc, #52]	; (8001330 <gpioPinsInit+0x4a8>)
 80012fc:	f000 fe4a 	bl	8001f94 <HAL_GPIO_Init>

	/*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
	GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001300:	2360      	movs	r3, #96	; 0x60
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001304:	2302      	movs	r3, #2
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130c:	2303      	movs	r3, #3
 800130e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001310:	230c      	movs	r3, #12
 8001312:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001318:	4619      	mov	r1, r3
 800131a:	4803      	ldr	r0, [pc, #12]	; (8001328 <gpioPinsInit+0x4a0>)
 800131c:	f000 fe3a 	bl	8001f94 <HAL_GPIO_Init>

}
 8001320:	bf00      	nop
 8001322:	3738      	adds	r7, #56	; 0x38
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40020400 	.word	0x40020400
 800132c:	40020c00 	.word	0x40020c00
 8001330:	40021800 	.word	0x40021800
 8001334:	40020800 	.word	0x40020800
 8001338:	40020000 	.word	0x40020000

0800133c <rngInit>:

/**
 * Init the random number generator (RNG) peripheral
 */
static void rngInit( void )
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
	//start the peripheral clock
	__HAL_RCC_RNG_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <rngInit+0x3c>)
 8001348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800134a:	4a0b      	ldr	r2, [pc, #44]	; (8001378 <rngInit+0x3c>)
 800134c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001350:	6353      	str	r3, [r2, #52]	; 0x34
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <rngInit+0x3c>)
 8001354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]

	//enable the random number generator
	RNG->CR |= RNG_CR_RNGEN;
 800135e:	4b07      	ldr	r3, [pc, #28]	; (800137c <rngInit+0x40>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a06      	ldr	r2, [pc, #24]	; (800137c <rngInit+0x40>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	6013      	str	r3, [r2, #0]
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800
 800137c:	50060800 	.word	0x50060800

08001380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
	...

08001390 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  SEGGER_SYSVIEW_PrintfHost("Assertion Failed:file %s \
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	6879      	ldr	r1, [r7, #4]
 800139e:	4802      	ldr	r0, [pc, #8]	; (80013a8 <assert_failed+0x18>)
 80013a0:	f007 fb34 	bl	8008a0c <SEGGER_SYSVIEW_PrintfHost>
                            on line %d\r\n", file, line);
  while(1);
 80013a4:	e7fe      	b.n	80013a4 <assert_failed+0x14>
 80013a6:	bf00      	nop
 80013a8:	08008f78 	.word	0x08008f78

080013ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <HAL_MspInit+0x4c>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	4a0f      	ldr	r2, [pc, #60]	; (80013f8 <HAL_MspInit+0x4c>)
 80013bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c0:	6453      	str	r3, [r2, #68]	; 0x44
 80013c2:	4b0d      	ldr	r3, [pc, #52]	; (80013f8 <HAL_MspInit+0x4c>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	603b      	str	r3, [r7, #0]
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <HAL_MspInit+0x4c>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	4a08      	ldr	r2, [pc, #32]	; (80013f8 <HAL_MspInit+0x4c>)
 80013d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013dc:	6413      	str	r3, [r2, #64]	; 0x40
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_MspInit+0x4c>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013ea:	2007      	movs	r0, #7
 80013ec:	f000 f9ba 	bl	8001764 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40023800 	.word	0x40023800

080013fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08e      	sub	sp, #56	; 0x38
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001404:	2300      	movs	r3, #0
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001408:	2300      	movs	r3, #0
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	4b33      	ldr	r3, [pc, #204]	; (80014e0 <HAL_InitTick+0xe4>)
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	4a32      	ldr	r2, [pc, #200]	; (80014e0 <HAL_InitTick+0xe4>)
 8001416:	f043 0310 	orr.w	r3, r3, #16
 800141a:	6413      	str	r3, [r2, #64]	; 0x40
 800141c:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <HAL_InitTick+0xe4>)
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	f003 0310 	and.w	r3, r3, #16
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001428:	f107 0210 	add.w	r2, r7, #16
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	4611      	mov	r1, r2
 8001432:	4618      	mov	r0, r3
 8001434:	f001 ff0a 	bl	800324c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001438:	6a3b      	ldr	r3, [r7, #32]
 800143a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800143c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800143e:	2b00      	cmp	r3, #0
 8001440:	d103      	bne.n	800144a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001442:	f001 fedb 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 8001446:	6378      	str	r0, [r7, #52]	; 0x34
 8001448:	e004      	b.n	8001454 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800144a:	f001 fed7 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 800144e:	4603      	mov	r3, r0
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001456:	4a23      	ldr	r2, [pc, #140]	; (80014e4 <HAL_InitTick+0xe8>)
 8001458:	fba2 2303 	umull	r2, r3, r2, r3
 800145c:	0c9b      	lsrs	r3, r3, #18
 800145e:	3b01      	subs	r3, #1
 8001460:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001462:	4b21      	ldr	r3, [pc, #132]	; (80014e8 <HAL_InitTick+0xec>)
 8001464:	4a21      	ldr	r2, [pc, #132]	; (80014ec <HAL_InitTick+0xf0>)
 8001466:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001468:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <HAL_InitTick+0xec>)
 800146a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800146e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001470:	4a1d      	ldr	r2, [pc, #116]	; (80014e8 <HAL_InitTick+0xec>)
 8001472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001474:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001476:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <HAL_InitTick+0xec>)
 8001478:	2200      	movs	r2, #0
 800147a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147c:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <HAL_InitTick+0xec>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <HAL_InitTick+0xec>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001488:	4817      	ldr	r0, [pc, #92]	; (80014e8 <HAL_InitTick+0xec>)
 800148a:	f001 ff11 	bl	80032b0 <HAL_TIM_Base_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001494:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001498:	2b00      	cmp	r3, #0
 800149a:	d11b      	bne.n	80014d4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800149c:	4812      	ldr	r0, [pc, #72]	; (80014e8 <HAL_InitTick+0xec>)
 800149e:	f002 f801 	bl	80034a4 <HAL_TIM_Base_Start_IT>
 80014a2:	4603      	mov	r3, r0
 80014a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80014a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d111      	bne.n	80014d4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014b0:	2036      	movs	r0, #54	; 0x36
 80014b2:	f000 f9a3 	bl	80017fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b0f      	cmp	r3, #15
 80014ba:	d808      	bhi.n	80014ce <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80014bc:	2200      	movs	r2, #0
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	2036      	movs	r0, #54	; 0x36
 80014c2:	f000 f96f 	bl	80017a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014c6:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <HAL_InitTick+0xf4>)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	e002      	b.n	80014d4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80014d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3738      	adds	r7, #56	; 0x38
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40023800 	.word	0x40023800
 80014e4:	431bde83 	.word	0x431bde83
 80014e8:	200000f8 	.word	0x200000f8
 80014ec:	40001000 	.word	0x40001000
 80014f0:	20000004 	.word	0x20000004

080014f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <NMI_Handler+0x4>

080014fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fe:	e7fe      	b.n	80014fe <HardFault_Handler+0x4>

08001500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <MemManage_Handler+0x4>

08001506 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800150a:	e7fe      	b.n	800150a <BusFault_Handler+0x4>

0800150c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <UsageFault_Handler+0x4>

08001512 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001524:	4802      	ldr	r0, [pc, #8]	; (8001530 <TIM6_DAC_IRQHandler+0x10>)
 8001526:	f002 f883 	bl	8003630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	200000f8 	.word	0x200000f8

08001534 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <SystemInit+0x20>)
 800153a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800153e:	4a05      	ldr	r2, [pc, #20]	; (8001554 <SystemInit+0x20>)
 8001540:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001544:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001558:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001590 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800155c:	480d      	ldr	r0, [pc, #52]	; (8001594 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800155e:	490e      	ldr	r1, [pc, #56]	; (8001598 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001560:	4a0e      	ldr	r2, [pc, #56]	; (800159c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001564:	e002      	b.n	800156c <LoopCopyDataInit>

08001566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800156a:	3304      	adds	r3, #4

0800156c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800156c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800156e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001570:	d3f9      	bcc.n	8001566 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001572:	4a0b      	ldr	r2, [pc, #44]	; (80015a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001574:	4c0b      	ldr	r4, [pc, #44]	; (80015a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001578:	e001      	b.n	800157e <LoopFillZerobss>

0800157a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800157a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800157c:	3204      	adds	r2, #4

0800157e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800157e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001580:	d3fb      	bcc.n	800157a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001582:	f7ff ffd7 	bl	8001534 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001586:	f007 fc47 	bl	8008e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800158a:	f7ff fa0d 	bl	80009a8 <main>
  bx  lr    
 800158e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001590:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001594:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001598:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800159c:	08009258 	.word	0x08009258
  ldr r2, =_sbss
 80015a0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80015a4:	20014564 	.word	0x20014564

080015a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015a8:	e7fe      	b.n	80015a8 <ADC_IRQHandler>
	...

080015ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015b0:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <HAL_Init+0x40>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a0d      	ldr	r2, [pc, #52]	; (80015ec <HAL_Init+0x40>)
 80015b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015bc:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <HAL_Init+0x40>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a0a      	ldr	r2, [pc, #40]	; (80015ec <HAL_Init+0x40>)
 80015c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c8:	4b08      	ldr	r3, [pc, #32]	; (80015ec <HAL_Init+0x40>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a07      	ldr	r2, [pc, #28]	; (80015ec <HAL_Init+0x40>)
 80015ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d4:	2003      	movs	r0, #3
 80015d6:	f000 f8c5 	bl	8001764 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015da:	2000      	movs	r0, #0
 80015dc:	f7ff ff0e 	bl	80013fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015e0:	f7ff fee4 	bl	80013ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40023c00 	.word	0x40023c00

080015f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return uwTick;
 80015f4:	4b03      	ldr	r3, [pc, #12]	; (8001604 <HAL_GetTick+0x14>)
 80015f6:	681b      	ldr	r3, [r3, #0]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	20000140 	.word	0x20000140

08001608 <__NVIC_SetPriorityGrouping>:
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <__NVIC_SetPriorityGrouping+0x44>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001624:	4013      	ands	r3, r2
 8001626:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800163a:	4a04      	ldr	r2, [pc, #16]	; (800164c <__NVIC_SetPriorityGrouping+0x44>)
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	60d3      	str	r3, [r2, #12]
}
 8001640:	bf00      	nop
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <__NVIC_GetPriorityGrouping>:
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001654:	4b04      	ldr	r3, [pc, #16]	; (8001668 <__NVIC_GetPriorityGrouping+0x18>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	0a1b      	lsrs	r3, r3, #8
 800165a:	f003 0307 	and.w	r3, r3, #7
}
 800165e:	4618      	mov	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <__NVIC_EnableIRQ>:
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	2b00      	cmp	r3, #0
 800167c:	db0b      	blt.n	8001696 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	f003 021f 	and.w	r2, r3, #31
 8001684:	4907      	ldr	r1, [pc, #28]	; (80016a4 <__NVIC_EnableIRQ+0x38>)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	095b      	lsrs	r3, r3, #5
 800168c:	2001      	movs	r0, #1
 800168e:	fa00 f202 	lsl.w	r2, r0, r2
 8001692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000e100 	.word	0xe000e100

080016a8 <__NVIC_SetPriority>:
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	6039      	str	r1, [r7, #0]
 80016b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	db0a      	blt.n	80016d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	490c      	ldr	r1, [pc, #48]	; (80016f4 <__NVIC_SetPriority+0x4c>)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	0112      	lsls	r2, r2, #4
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	440b      	add	r3, r1
 80016cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80016d0:	e00a      	b.n	80016e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4908      	ldr	r1, [pc, #32]	; (80016f8 <__NVIC_SetPriority+0x50>)
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	3b04      	subs	r3, #4
 80016e0:	0112      	lsls	r2, r2, #4
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	440b      	add	r3, r1
 80016e6:	761a      	strb	r2, [r3, #24]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000e100 	.word	0xe000e100
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b089      	sub	sp, #36	; 0x24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f1c3 0307 	rsb	r3, r3, #7
 8001716:	2b04      	cmp	r3, #4
 8001718:	bf28      	it	cs
 800171a:	2304      	movcs	r3, #4
 800171c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3304      	adds	r3, #4
 8001722:	2b06      	cmp	r3, #6
 8001724:	d902      	bls.n	800172c <NVIC_EncodePriority+0x30>
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	3b03      	subs	r3, #3
 800172a:	e000      	b.n	800172e <NVIC_EncodePriority+0x32>
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001730:	f04f 32ff 	mov.w	r2, #4294967295
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43da      	mvns	r2, r3
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	401a      	ands	r2, r3
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001744:	f04f 31ff 	mov.w	r1, #4294967295
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	fa01 f303 	lsl.w	r3, r1, r3
 800174e:	43d9      	mvns	r1, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001754:	4313      	orrs	r3, r2
         );
}
 8001756:	4618      	mov	r0, r3
 8001758:	3724      	adds	r7, #36	; 0x24
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b07      	cmp	r3, #7
 8001770:	d00f      	beq.n	8001792 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b06      	cmp	r3, #6
 8001776:	d00c      	beq.n	8001792 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b05      	cmp	r3, #5
 800177c:	d009      	beq.n	8001792 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b04      	cmp	r3, #4
 8001782:	d006      	beq.n	8001792 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b03      	cmp	r3, #3
 8001788:	d003      	beq.n	8001792 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800178a:	2190      	movs	r1, #144	; 0x90
 800178c:	4804      	ldr	r0, [pc, #16]	; (80017a0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800178e:	f7ff fdff 	bl	8001390 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff ff38 	bl	8001608 <__NVIC_SetPriorityGrouping>
}
 8001798:	bf00      	nop
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	08008fbc 	.word	0x08008fbc

080017a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
 80017b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b0f      	cmp	r3, #15
 80017ba:	d903      	bls.n	80017c4 <HAL_NVIC_SetPriority+0x20>
 80017bc:	21a8      	movs	r1, #168	; 0xa8
 80017be:	480e      	ldr	r0, [pc, #56]	; (80017f8 <HAL_NVIC_SetPriority+0x54>)
 80017c0:	f7ff fde6 	bl	8001390 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	2b0f      	cmp	r3, #15
 80017c8:	d903      	bls.n	80017d2 <HAL_NVIC_SetPriority+0x2e>
 80017ca:	21a9      	movs	r1, #169	; 0xa9
 80017cc:	480a      	ldr	r0, [pc, #40]	; (80017f8 <HAL_NVIC_SetPriority+0x54>)
 80017ce:	f7ff fddf 	bl	8001390 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017d2:	f7ff ff3d 	bl	8001650 <__NVIC_GetPriorityGrouping>
 80017d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	68b9      	ldr	r1, [r7, #8]
 80017dc:	6978      	ldr	r0, [r7, #20]
 80017de:	f7ff ff8d 	bl	80016fc <NVIC_EncodePriority>
 80017e2:	4602      	mov	r2, r0
 80017e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e8:	4611      	mov	r1, r2
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff ff5c 	bl	80016a8 <__NVIC_SetPriority>
}
 80017f0:	bf00      	nop
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	08008fbc 	.word	0x08008fbc

080017fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	2b00      	cmp	r3, #0
 800180c:	da03      	bge.n	8001816 <HAL_NVIC_EnableIRQ+0x1a>
 800180e:	21bc      	movs	r1, #188	; 0xbc
 8001810:	4805      	ldr	r0, [pc, #20]	; (8001828 <HAL_NVIC_EnableIRQ+0x2c>)
 8001812:	f7ff fdbd 	bl	8001390 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff ff26 	bl	800166c <__NVIC_EnableIRQ>
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	08008fbc 	.word	0x08008fbc

0800182c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001838:	f7ff feda 	bl	80015f0 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d101      	bne.n	8001848 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e203      	b.n	8001c50 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a8b      	ldr	r2, [pc, #556]	; (8001a7c <HAL_DMA_Init+0x250>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d04e      	beq.n	80018f0 <HAL_DMA_Init+0xc4>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a8a      	ldr	r2, [pc, #552]	; (8001a80 <HAL_DMA_Init+0x254>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d049      	beq.n	80018f0 <HAL_DMA_Init+0xc4>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a88      	ldr	r2, [pc, #544]	; (8001a84 <HAL_DMA_Init+0x258>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d044      	beq.n	80018f0 <HAL_DMA_Init+0xc4>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a87      	ldr	r2, [pc, #540]	; (8001a88 <HAL_DMA_Init+0x25c>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d03f      	beq.n	80018f0 <HAL_DMA_Init+0xc4>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a85      	ldr	r2, [pc, #532]	; (8001a8c <HAL_DMA_Init+0x260>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d03a      	beq.n	80018f0 <HAL_DMA_Init+0xc4>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a84      	ldr	r2, [pc, #528]	; (8001a90 <HAL_DMA_Init+0x264>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d035      	beq.n	80018f0 <HAL_DMA_Init+0xc4>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a82      	ldr	r2, [pc, #520]	; (8001a94 <HAL_DMA_Init+0x268>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d030      	beq.n	80018f0 <HAL_DMA_Init+0xc4>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a81      	ldr	r2, [pc, #516]	; (8001a98 <HAL_DMA_Init+0x26c>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d02b      	beq.n	80018f0 <HAL_DMA_Init+0xc4>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a7f      	ldr	r2, [pc, #508]	; (8001a9c <HAL_DMA_Init+0x270>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d026      	beq.n	80018f0 <HAL_DMA_Init+0xc4>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a7e      	ldr	r2, [pc, #504]	; (8001aa0 <HAL_DMA_Init+0x274>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d021      	beq.n	80018f0 <HAL_DMA_Init+0xc4>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a7c      	ldr	r2, [pc, #496]	; (8001aa4 <HAL_DMA_Init+0x278>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d01c      	beq.n	80018f0 <HAL_DMA_Init+0xc4>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a7b      	ldr	r2, [pc, #492]	; (8001aa8 <HAL_DMA_Init+0x27c>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d017      	beq.n	80018f0 <HAL_DMA_Init+0xc4>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a79      	ldr	r2, [pc, #484]	; (8001aac <HAL_DMA_Init+0x280>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d012      	beq.n	80018f0 <HAL_DMA_Init+0xc4>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a78      	ldr	r2, [pc, #480]	; (8001ab0 <HAL_DMA_Init+0x284>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d00d      	beq.n	80018f0 <HAL_DMA_Init+0xc4>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a76      	ldr	r2, [pc, #472]	; (8001ab4 <HAL_DMA_Init+0x288>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d008      	beq.n	80018f0 <HAL_DMA_Init+0xc4>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a75      	ldr	r2, [pc, #468]	; (8001ab8 <HAL_DMA_Init+0x28c>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d003      	beq.n	80018f0 <HAL_DMA_Init+0xc4>
 80018e8:	21b7      	movs	r1, #183	; 0xb7
 80018ea:	4874      	ldr	r0, [pc, #464]	; (8001abc <HAL_DMA_Init+0x290>)
 80018ec:	f7ff fd50 	bl	8001390 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d026      	beq.n	8001946 <HAL_DMA_Init+0x11a>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001900:	d021      	beq.n	8001946 <HAL_DMA_Init+0x11a>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800190a:	d01c      	beq.n	8001946 <HAL_DMA_Init+0x11a>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8001914:	d017      	beq.n	8001946 <HAL_DMA_Init+0x11a>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800191e:	d012      	beq.n	8001946 <HAL_DMA_Init+0x11a>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8001928:	d00d      	beq.n	8001946 <HAL_DMA_Init+0x11a>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001932:	d008      	beq.n	8001946 <HAL_DMA_Init+0x11a>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 800193c:	d003      	beq.n	8001946 <HAL_DMA_Init+0x11a>
 800193e:	21b8      	movs	r1, #184	; 0xb8
 8001940:	485e      	ldr	r0, [pc, #376]	; (8001abc <HAL_DMA_Init+0x290>)
 8001942:	f7ff fd25 	bl	8001390 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00b      	beq.n	8001966 <HAL_DMA_Init+0x13a>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	2b40      	cmp	r3, #64	; 0x40
 8001954:	d007      	beq.n	8001966 <HAL_DMA_Init+0x13a>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2b80      	cmp	r3, #128	; 0x80
 800195c:	d003      	beq.n	8001966 <HAL_DMA_Init+0x13a>
 800195e:	21b9      	movs	r1, #185	; 0xb9
 8001960:	4856      	ldr	r0, [pc, #344]	; (8001abc <HAL_DMA_Init+0x290>)
 8001962:	f7ff fd15 	bl	8001390 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800196e:	d007      	beq.n	8001980 <HAL_DMA_Init+0x154>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <HAL_DMA_Init+0x154>
 8001978:	21ba      	movs	r1, #186	; 0xba
 800197a:	4850      	ldr	r0, [pc, #320]	; (8001abc <HAL_DMA_Init+0x290>)
 800197c:	f7ff fd08 	bl	8001390 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001988:	d007      	beq.n	800199a <HAL_DMA_Init+0x16e>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_DMA_Init+0x16e>
 8001992:	21bb      	movs	r1, #187	; 0xbb
 8001994:	4849      	ldr	r0, [pc, #292]	; (8001abc <HAL_DMA_Init+0x290>)
 8001996:	f7ff fcfb 	bl	8001390 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00d      	beq.n	80019be <HAL_DMA_Init+0x192>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019aa:	d008      	beq.n	80019be <HAL_DMA_Init+0x192>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019b4:	d003      	beq.n	80019be <HAL_DMA_Init+0x192>
 80019b6:	21bc      	movs	r1, #188	; 0xbc
 80019b8:	4840      	ldr	r0, [pc, #256]	; (8001abc <HAL_DMA_Init+0x290>)
 80019ba:	f7ff fce9 	bl	8001390 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00d      	beq.n	80019e2 <HAL_DMA_Init+0x1b6>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019ce:	d008      	beq.n	80019e2 <HAL_DMA_Init+0x1b6>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019d8:	d003      	beq.n	80019e2 <HAL_DMA_Init+0x1b6>
 80019da:	21bd      	movs	r1, #189	; 0xbd
 80019dc:	4837      	ldr	r0, [pc, #220]	; (8001abc <HAL_DMA_Init+0x290>)
 80019de:	f7ff fcd7 	bl	8001390 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d00c      	beq.n	8001a04 <HAL_DMA_Init+0x1d8>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019f2:	d007      	beq.n	8001a04 <HAL_DMA_Init+0x1d8>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	69db      	ldr	r3, [r3, #28]
 80019f8:	2b20      	cmp	r3, #32
 80019fa:	d003      	beq.n	8001a04 <HAL_DMA_Init+0x1d8>
 80019fc:	21be      	movs	r1, #190	; 0xbe
 80019fe:	482f      	ldr	r0, [pc, #188]	; (8001abc <HAL_DMA_Init+0x290>)
 8001a00:	f7ff fcc6 	bl	8001390 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d012      	beq.n	8001a32 <HAL_DMA_Init+0x206>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a14:	d00d      	beq.n	8001a32 <HAL_DMA_Init+0x206>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a1e:	d008      	beq.n	8001a32 <HAL_DMA_Init+0x206>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001a28:	d003      	beq.n	8001a32 <HAL_DMA_Init+0x206>
 8001a2a:	21bf      	movs	r1, #191	; 0xbf
 8001a2c:	4823      	ldr	r0, [pc, #140]	; (8001abc <HAL_DMA_Init+0x290>)
 8001a2e:	f7ff fcaf 	bl	8001390 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d007      	beq.n	8001a4a <HAL_DMA_Init+0x21e>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	d003      	beq.n	8001a4a <HAL_DMA_Init+0x21e>
 8001a42:	21c0      	movs	r1, #192	; 0xc0
 8001a44:	481d      	ldr	r0, [pc, #116]	; (8001abc <HAL_DMA_Init+0x290>)
 8001a46:	f7ff fca3 	bl	8001390 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d064      	beq.n	8001b1c <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d032      	beq.n	8001ac0 <HAL_DMA_Init+0x294>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d02e      	beq.n	8001ac0 <HAL_DMA_Init+0x294>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d02a      	beq.n	8001ac0 <HAL_DMA_Init+0x294>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6e:	2b03      	cmp	r3, #3
 8001a70:	d026      	beq.n	8001ac0 <HAL_DMA_Init+0x294>
 8001a72:	21c5      	movs	r1, #197	; 0xc5
 8001a74:	4811      	ldr	r0, [pc, #68]	; (8001abc <HAL_DMA_Init+0x290>)
 8001a76:	f7ff fc8b 	bl	8001390 <assert_failed>
 8001a7a:	e021      	b.n	8001ac0 <HAL_DMA_Init+0x294>
 8001a7c:	40026010 	.word	0x40026010
 8001a80:	40026028 	.word	0x40026028
 8001a84:	40026040 	.word	0x40026040
 8001a88:	40026058 	.word	0x40026058
 8001a8c:	40026070 	.word	0x40026070
 8001a90:	40026088 	.word	0x40026088
 8001a94:	400260a0 	.word	0x400260a0
 8001a98:	400260b8 	.word	0x400260b8
 8001a9c:	40026410 	.word	0x40026410
 8001aa0:	40026428 	.word	0x40026428
 8001aa4:	40026440 	.word	0x40026440
 8001aa8:	40026458 	.word	0x40026458
 8001aac:	40026470 	.word	0x40026470
 8001ab0:	40026488 	.word	0x40026488
 8001ab4:	400264a0 	.word	0x400264a0
 8001ab8:	400264b8 	.word	0x400264b8
 8001abc:	08008ff8 	.word	0x08008ff8
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d012      	beq.n	8001aee <HAL_DMA_Init+0x2c2>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001acc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ad0:	d00d      	beq.n	8001aee <HAL_DMA_Init+0x2c2>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ada:	d008      	beq.n	8001aee <HAL_DMA_Init+0x2c2>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ae4:	d003      	beq.n	8001aee <HAL_DMA_Init+0x2c2>
 8001ae6:	21c6      	movs	r1, #198	; 0xc6
 8001ae8:	485b      	ldr	r0, [pc, #364]	; (8001c58 <HAL_DMA_Init+0x42c>)
 8001aea:	f7ff fc51 	bl	8001390 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d012      	beq.n	8001b1c <HAL_DMA_Init+0x2f0>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001afe:	d00d      	beq.n	8001b1c <HAL_DMA_Init+0x2f0>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b08:	d008      	beq.n	8001b1c <HAL_DMA_Init+0x2f0>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001b12:	d003      	beq.n	8001b1c <HAL_DMA_Init+0x2f0>
 8001b14:	21c7      	movs	r1, #199	; 0xc7
 8001b16:	4850      	ldr	r0, [pc, #320]	; (8001c58 <HAL_DMA_Init+0x42c>)
 8001b18:	f7ff fc3a 	bl	8001390 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2202      	movs	r2, #2
 8001b20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f022 0201 	bic.w	r2, r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b3c:	e00f      	b.n	8001b5e <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b3e:	f7ff fd57 	bl	80015f0 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b05      	cmp	r3, #5
 8001b4a:	d908      	bls.n	8001b5e <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2220      	movs	r2, #32
 8001b50:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2203      	movs	r2, #3
 8001b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e078      	b.n	8001c50 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1e8      	bne.n	8001b3e <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	4b39      	ldr	r3, [pc, #228]	; (8001c5c <HAL_DMA_Init+0x430>)
 8001b78:	4013      	ands	r3, r2
 8001b7a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685a      	ldr	r2, [r3, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ba2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb4:	2b04      	cmp	r3, #4
 8001bb6:	d107      	bne.n	8001bc8 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	697a      	ldr	r2, [r7, #20]
 8001bce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	f023 0307 	bic.w	r3, r3, #7
 8001bde:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	d117      	bne.n	8001c22 <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d00e      	beq.n	8001c22 <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f949 	bl	8001e9c <DMA_CheckFifoParam>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d008      	beq.n	8001c22 <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2240      	movs	r2, #64	; 0x40
 8001c14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e016      	b.n	8001c50 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f900 	bl	8001e30 <DMA_CalcBaseAndBitshift>
 8001c30:	4603      	mov	r3, r0
 8001c32:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c38:	223f      	movs	r2, #63	; 0x3f
 8001c3a:	409a      	lsls	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	08008ff8 	.word	0x08008ff8
 8001c5c:	f010803f 	.word	0xf010803f

08001c60 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
 8001c6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <HAL_DMA_Start+0x20>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c7e:	d304      	bcc.n	8001c8a <HAL_DMA_Start+0x2a>
 8001c80:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8001c84:	481a      	ldr	r0, [pc, #104]	; (8001cf0 <HAL_DMA_Start+0x90>)
 8001c86:	f7ff fb83 	bl	8001390 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d101      	bne.n	8001c98 <HAL_DMA_Start+0x38>
 8001c94:	2302      	movs	r3, #2
 8001c96:	e026      	b.n	8001ce6 <HAL_DMA_Start+0x86>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d115      	bne.n	8001cd8 <HAL_DMA_Start+0x78>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2202      	movs	r2, #2
 8001cb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	68b9      	ldr	r1, [r7, #8]
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f000 f887 	bl	8001dd4 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f042 0201 	orr.w	r2, r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	e005      	b.n	8001ce4 <HAL_DMA_Start+0x84>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8001ce4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	08008ff8 	.word	0x08008ff8

08001cf4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d00:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d02:	f7ff fc75 	bl	80015f0 <HAL_GetTick>
 8001d06:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d008      	beq.n	8001d26 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2280      	movs	r2, #128	; 0x80
 8001d18:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e052      	b.n	8001dcc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 0216 	bic.w	r2, r2, #22
 8001d34:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	695a      	ldr	r2, [r3, #20]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d44:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d103      	bne.n	8001d56 <HAL_DMA_Abort+0x62>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d007      	beq.n	8001d66 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 0208 	bic.w	r2, r2, #8
 8001d64:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 0201 	bic.w	r2, r2, #1
 8001d74:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d76:	e013      	b.n	8001da0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d78:	f7ff fc3a 	bl	80015f0 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b05      	cmp	r3, #5
 8001d84:	d90c      	bls.n	8001da0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2220      	movs	r2, #32
 8001d8a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2203      	movs	r2, #3
 8001d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e015      	b.n	8001dcc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1e4      	bne.n	8001d78 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db2:	223f      	movs	r2, #63	; 0x3f
 8001db4:	409a      	lsls	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
 8001de0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001df0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	2b40      	cmp	r3, #64	; 0x40
 8001e00:	d108      	bne.n	8001e14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e12:	e007      	b.n	8001e24 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68ba      	ldr	r2, [r7, #8]
 8001e1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	60da      	str	r2, [r3, #12]
}
 8001e24:	bf00      	nop
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	3b10      	subs	r3, #16
 8001e40:	4a14      	ldr	r2, [pc, #80]	; (8001e94 <DMA_CalcBaseAndBitshift+0x64>)
 8001e42:	fba2 2303 	umull	r2, r3, r2, r3
 8001e46:	091b      	lsrs	r3, r3, #4
 8001e48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e4a:	4a13      	ldr	r2, [pc, #76]	; (8001e98 <DMA_CalcBaseAndBitshift+0x68>)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4413      	add	r3, r2
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	461a      	mov	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2b03      	cmp	r3, #3
 8001e5c:	d909      	bls.n	8001e72 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e66:	f023 0303 	bic.w	r3, r3, #3
 8001e6a:	1d1a      	adds	r2, r3, #4
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	659a      	str	r2, [r3, #88]	; 0x58
 8001e70:	e007      	b.n	8001e82 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e7a:	f023 0303 	bic.w	r3, r3, #3
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	aaaaaaab 	.word	0xaaaaaaab
 8001e98:	08009218 	.word	0x08009218

08001e9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d11f      	bne.n	8001ef6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d856      	bhi.n	8001f6a <DMA_CheckFifoParam+0xce>
 8001ebc:	a201      	add	r2, pc, #4	; (adr r2, 8001ec4 <DMA_CheckFifoParam+0x28>)
 8001ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec2:	bf00      	nop
 8001ec4:	08001ed5 	.word	0x08001ed5
 8001ec8:	08001ee7 	.word	0x08001ee7
 8001ecc:	08001ed5 	.word	0x08001ed5
 8001ed0:	08001f6b 	.word	0x08001f6b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d046      	beq.n	8001f6e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ee4:	e043      	b.n	8001f6e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001eee:	d140      	bne.n	8001f72 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ef4:	e03d      	b.n	8001f72 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001efe:	d121      	bne.n	8001f44 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	2b03      	cmp	r3, #3
 8001f04:	d837      	bhi.n	8001f76 <DMA_CheckFifoParam+0xda>
 8001f06:	a201      	add	r2, pc, #4	; (adr r2, 8001f0c <DMA_CheckFifoParam+0x70>)
 8001f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f0c:	08001f1d 	.word	0x08001f1d
 8001f10:	08001f23 	.word	0x08001f23
 8001f14:	08001f1d 	.word	0x08001f1d
 8001f18:	08001f35 	.word	0x08001f35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f20:	e030      	b.n	8001f84 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d025      	beq.n	8001f7a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f32:	e022      	b.n	8001f7a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f3c:	d11f      	bne.n	8001f7e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f42:	e01c      	b.n	8001f7e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d903      	bls.n	8001f52 <DMA_CheckFifoParam+0xb6>
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	2b03      	cmp	r3, #3
 8001f4e:	d003      	beq.n	8001f58 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f50:	e018      	b.n	8001f84 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	73fb      	strb	r3, [r7, #15]
      break;
 8001f56:	e015      	b.n	8001f84 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00e      	beq.n	8001f82 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	73fb      	strb	r3, [r7, #15]
      break;
 8001f68:	e00b      	b.n	8001f82 <DMA_CheckFifoParam+0xe6>
      break;
 8001f6a:	bf00      	nop
 8001f6c:	e00a      	b.n	8001f84 <DMA_CheckFifoParam+0xe8>
      break;
 8001f6e:	bf00      	nop
 8001f70:	e008      	b.n	8001f84 <DMA_CheckFifoParam+0xe8>
      break;
 8001f72:	bf00      	nop
 8001f74:	e006      	b.n	8001f84 <DMA_CheckFifoParam+0xe8>
      break;
 8001f76:	bf00      	nop
 8001f78:	e004      	b.n	8001f84 <DMA_CheckFifoParam+0xe8>
      break;
 8001f7a:	bf00      	nop
 8001f7c:	e002      	b.n	8001f84 <DMA_CheckFifoParam+0xe8>
      break;   
 8001f7e:	bf00      	nop
 8001f80:	e000      	b.n	8001f84 <DMA_CheckFifoParam+0xe8>
      break;
 8001f82:	bf00      	nop
    }
  } 
  
  return status; 
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop

08001f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a3d      	ldr	r2, [pc, #244]	; (80020a4 <HAL_GPIO_Init+0x110>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d02b      	beq.n	800200a <HAL_GPIO_Init+0x76>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a3c      	ldr	r2, [pc, #240]	; (80020a8 <HAL_GPIO_Init+0x114>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d027      	beq.n	800200a <HAL_GPIO_Init+0x76>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a3b      	ldr	r2, [pc, #236]	; (80020ac <HAL_GPIO_Init+0x118>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d023      	beq.n	800200a <HAL_GPIO_Init+0x76>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a3a      	ldr	r2, [pc, #232]	; (80020b0 <HAL_GPIO_Init+0x11c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d01f      	beq.n	800200a <HAL_GPIO_Init+0x76>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a39      	ldr	r2, [pc, #228]	; (80020b4 <HAL_GPIO_Init+0x120>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d01b      	beq.n	800200a <HAL_GPIO_Init+0x76>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a38      	ldr	r2, [pc, #224]	; (80020b8 <HAL_GPIO_Init+0x124>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d017      	beq.n	800200a <HAL_GPIO_Init+0x76>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a37      	ldr	r2, [pc, #220]	; (80020bc <HAL_GPIO_Init+0x128>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d013      	beq.n	800200a <HAL_GPIO_Init+0x76>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a36      	ldr	r2, [pc, #216]	; (80020c0 <HAL_GPIO_Init+0x12c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d00f      	beq.n	800200a <HAL_GPIO_Init+0x76>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a35      	ldr	r2, [pc, #212]	; (80020c4 <HAL_GPIO_Init+0x130>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d00b      	beq.n	800200a <HAL_GPIO_Init+0x76>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a34      	ldr	r2, [pc, #208]	; (80020c8 <HAL_GPIO_Init+0x134>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d007      	beq.n	800200a <HAL_GPIO_Init+0x76>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a33      	ldr	r2, [pc, #204]	; (80020cc <HAL_GPIO_Init+0x138>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d003      	beq.n	800200a <HAL_GPIO_Init+0x76>
 8002002:	21ac      	movs	r1, #172	; 0xac
 8002004:	4832      	ldr	r0, [pc, #200]	; (80020d0 <HAL_GPIO_Init+0x13c>)
 8002006:	f7ff f9c3 	bl	8001390 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	b29b      	uxth	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <HAL_GPIO_Init+0x8c>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	0c1b      	lsrs	r3, r3, #16
 800201a:	041b      	lsls	r3, r3, #16
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <HAL_GPIO_Init+0x94>
 8002020:	21ad      	movs	r1, #173	; 0xad
 8002022:	482b      	ldr	r0, [pc, #172]	; (80020d0 <HAL_GPIO_Init+0x13c>)
 8002024:	f7ff f9b4 	bl	8001390 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d035      	beq.n	800209c <HAL_GPIO_Init+0x108>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d031      	beq.n	800209c <HAL_GPIO_Init+0x108>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b11      	cmp	r3, #17
 800203e:	d02d      	beq.n	800209c <HAL_GPIO_Init+0x108>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b02      	cmp	r3, #2
 8002046:	d029      	beq.n	800209c <HAL_GPIO_Init+0x108>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b12      	cmp	r3, #18
 800204e:	d025      	beq.n	800209c <HAL_GPIO_Init+0x108>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8002058:	d020      	beq.n	800209c <HAL_GPIO_Init+0x108>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002062:	d01b      	beq.n	800209c <HAL_GPIO_Init+0x108>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 800206c:	d016      	beq.n	800209c <HAL_GPIO_Init+0x108>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8002076:	d011      	beq.n	800209c <HAL_GPIO_Init+0x108>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8002080:	d00c      	beq.n	800209c <HAL_GPIO_Init+0x108>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800208a:	d007      	beq.n	800209c <HAL_GPIO_Init+0x108>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b03      	cmp	r3, #3
 8002092:	d003      	beq.n	800209c <HAL_GPIO_Init+0x108>
 8002094:	21ae      	movs	r1, #174	; 0xae
 8002096:	480e      	ldr	r0, [pc, #56]	; (80020d0 <HAL_GPIO_Init+0x13c>)
 8002098:	f7ff f97a 	bl	8001390 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800209c:	2300      	movs	r3, #0
 800209e:	61fb      	str	r3, [r7, #28]
 80020a0:	e274      	b.n	800258c <HAL_GPIO_Init+0x5f8>
 80020a2:	bf00      	nop
 80020a4:	40020000 	.word	0x40020000
 80020a8:	40020400 	.word	0x40020400
 80020ac:	40020800 	.word	0x40020800
 80020b0:	40020c00 	.word	0x40020c00
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40021400 	.word	0x40021400
 80020bc:	40021800 	.word	0x40021800
 80020c0:	40021c00 	.word	0x40021c00
 80020c4:	40022000 	.word	0x40022000
 80020c8:	40022400 	.word	0x40022400
 80020cc:	40022800 	.word	0x40022800
 80020d0:	08009030 	.word	0x08009030
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020d4:	2201      	movs	r2, #1
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	4013      	ands	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	f040 824a 	bne.w	8002586 <HAL_GPIO_Init+0x5f2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d005      	beq.n	800210a <HAL_GPIO_Init+0x176>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002106:	2b02      	cmp	r3, #2
 8002108:	d144      	bne.n	8002194 <HAL_GPIO_Init+0x200>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00f      	beq.n	8002132 <HAL_GPIO_Init+0x19e>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d00b      	beq.n	8002132 <HAL_GPIO_Init+0x19e>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	2b02      	cmp	r3, #2
 8002120:	d007      	beq.n	8002132 <HAL_GPIO_Init+0x19e>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	2b03      	cmp	r3, #3
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_Init+0x19e>
 800212a:	21c0      	movs	r1, #192	; 0xc0
 800212c:	4831      	ldr	r0, [pc, #196]	; (80021f4 <HAL_GPIO_Init+0x260>)
 800212e:	f7ff f92f 	bl	8001390 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	2203      	movs	r2, #3
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43db      	mvns	r3, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4013      	ands	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002168:	2201      	movs	r2, #1
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4013      	ands	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	091b      	lsrs	r3, r3, #4
 800217e:	f003 0201 	and.w	r2, r3, #1
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4313      	orrs	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0303 	and.w	r3, r3, #3
 800219c:	2b03      	cmp	r3, #3
 800219e:	d02b      	beq.n	80021f8 <HAL_GPIO_Init+0x264>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00b      	beq.n	80021c0 <HAL_GPIO_Init+0x22c>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d007      	beq.n	80021c0 <HAL_GPIO_Init+0x22c>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d003      	beq.n	80021c0 <HAL_GPIO_Init+0x22c>
 80021b8:	21d1      	movs	r1, #209	; 0xd1
 80021ba:	480e      	ldr	r0, [pc, #56]	; (80021f4 <HAL_GPIO_Init+0x260>)
 80021bc:	f7ff f8e8 	bl	8001390 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	2203      	movs	r2, #3
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	60da      	str	r2, [r3, #12]
 80021f0:	e002      	b.n	80021f8 <HAL_GPIO_Init+0x264>
 80021f2:	bf00      	nop
 80021f4:	08009030 	.word	0x08009030
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	2b02      	cmp	r3, #2
 8002202:	f040 80df 	bne.w	80023c4 <HAL_GPIO_Init+0x430>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 80b6 	beq.w	800237c <HAL_GPIO_Init+0x3e8>
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	2b09      	cmp	r3, #9
 8002216:	f000 80b1 	beq.w	800237c <HAL_GPIO_Init+0x3e8>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 80ac 	beq.w	800237c <HAL_GPIO_Init+0x3e8>
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 80a7 	beq.w	800237c <HAL_GPIO_Init+0x3e8>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 80a2 	beq.w	800237c <HAL_GPIO_Init+0x3e8>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 809d 	beq.w	800237c <HAL_GPIO_Init+0x3e8>
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	2b01      	cmp	r3, #1
 8002248:	f000 8098 	beq.w	800237c <HAL_GPIO_Init+0x3e8>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	2b01      	cmp	r3, #1
 8002252:	f000 8093 	beq.w	800237c <HAL_GPIO_Init+0x3e8>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	2b02      	cmp	r3, #2
 800225c:	f000 808e 	beq.w	800237c <HAL_GPIO_Init+0x3e8>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	2b02      	cmp	r3, #2
 8002266:	f000 8089 	beq.w	800237c <HAL_GPIO_Init+0x3e8>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	2b02      	cmp	r3, #2
 8002270:	f000 8084 	beq.w	800237c <HAL_GPIO_Init+0x3e8>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	2b03      	cmp	r3, #3
 800227a:	d07f      	beq.n	800237c <HAL_GPIO_Init+0x3e8>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	2b04      	cmp	r3, #4
 8002282:	d07b      	beq.n	800237c <HAL_GPIO_Init+0x3e8>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	2b04      	cmp	r3, #4
 800228a:	d077      	beq.n	800237c <HAL_GPIO_Init+0x3e8>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	2b04      	cmp	r3, #4
 8002292:	d073      	beq.n	800237c <HAL_GPIO_Init+0x3e8>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	2b05      	cmp	r3, #5
 800229a:	d06f      	beq.n	800237c <HAL_GPIO_Init+0x3e8>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	2b05      	cmp	r3, #5
 80022a2:	d06b      	beq.n	800237c <HAL_GPIO_Init+0x3e8>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	2b09      	cmp	r3, #9
 80022aa:	d067      	beq.n	800237c <HAL_GPIO_Init+0x3e8>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	2b06      	cmp	r3, #6
 80022b2:	d063      	beq.n	800237c <HAL_GPIO_Init+0x3e8>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	2b09      	cmp	r3, #9
 80022ba:	d05f      	beq.n	800237c <HAL_GPIO_Init+0x3e8>
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	2b07      	cmp	r3, #7
 80022c2:	d05b      	beq.n	800237c <HAL_GPIO_Init+0x3e8>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	2b07      	cmp	r3, #7
 80022ca:	d057      	beq.n	800237c <HAL_GPIO_Init+0x3e8>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	2b07      	cmp	r3, #7
 80022d2:	d053      	beq.n	800237c <HAL_GPIO_Init+0x3e8>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d04f      	beq.n	800237c <HAL_GPIO_Init+0x3e8>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	d04b      	beq.n	800237c <HAL_GPIO_Init+0x3e8>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d047      	beq.n	800237c <HAL_GPIO_Init+0x3e8>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	2b09      	cmp	r3, #9
 80022f2:	d043      	beq.n	800237c <HAL_GPIO_Init+0x3e8>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	2b09      	cmp	r3, #9
 80022fa:	d03f      	beq.n	800237c <HAL_GPIO_Init+0x3e8>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	2b0a      	cmp	r3, #10
 8002302:	d03b      	beq.n	800237c <HAL_GPIO_Init+0x3e8>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	2b0a      	cmp	r3, #10
 800230a:	d037      	beq.n	800237c <HAL_GPIO_Init+0x3e8>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	2b0b      	cmp	r3, #11
 8002312:	d033      	beq.n	800237c <HAL_GPIO_Init+0x3e8>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	2b0c      	cmp	r3, #12
 800231a:	d02f      	beq.n	800237c <HAL_GPIO_Init+0x3e8>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	2b0c      	cmp	r3, #12
 8002322:	d02b      	beq.n	800237c <HAL_GPIO_Init+0x3e8>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	2b0d      	cmp	r3, #13
 800232a:	d027      	beq.n	800237c <HAL_GPIO_Init+0x3e8>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	2b0f      	cmp	r3, #15
 8002332:	d023      	beq.n	800237c <HAL_GPIO_Init+0x3e8>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	2b05      	cmp	r3, #5
 800233a:	d01f      	beq.n	800237c <HAL_GPIO_Init+0x3e8>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	2b05      	cmp	r3, #5
 8002342:	d01b      	beq.n	800237c <HAL_GPIO_Init+0x3e8>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	2b05      	cmp	r3, #5
 800234a:	d017      	beq.n	800237c <HAL_GPIO_Init+0x3e8>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	2b08      	cmp	r3, #8
 8002352:	d013      	beq.n	800237c <HAL_GPIO_Init+0x3e8>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	2b08      	cmp	r3, #8
 800235a:	d00f      	beq.n	800237c <HAL_GPIO_Init+0x3e8>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	2b0c      	cmp	r3, #12
 8002362:	d00b      	beq.n	800237c <HAL_GPIO_Init+0x3e8>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	2b06      	cmp	r3, #6
 800236a:	d007      	beq.n	800237c <HAL_GPIO_Init+0x3e8>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	2b0e      	cmp	r3, #14
 8002372:	d003      	beq.n	800237c <HAL_GPIO_Init+0x3e8>
 8002374:	21de      	movs	r1, #222	; 0xde
 8002376:	488a      	ldr	r0, [pc, #552]	; (80025a0 <HAL_GPIO_Init+0x60c>)
 8002378:	f7ff f80a 	bl	8001390 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	08da      	lsrs	r2, r3, #3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3208      	adds	r2, #8
 8002384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002388:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	220f      	movs	r2, #15
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4013      	ands	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	08da      	lsrs	r2, r3, #3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3208      	adds	r2, #8
 80023be:	69b9      	ldr	r1, [r7, #24]
 80023c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	2203      	movs	r2, #3
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 0203 	and.w	r2, r3, #3
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 80c0 	beq.w	8002586 <HAL_GPIO_Init+0x5f2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	4b66      	ldr	r3, [pc, #408]	; (80025a4 <HAL_GPIO_Init+0x610>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	4a65      	ldr	r2, [pc, #404]	; (80025a4 <HAL_GPIO_Init+0x610>)
 8002410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002414:	6453      	str	r3, [r2, #68]	; 0x44
 8002416:	4b63      	ldr	r3, [pc, #396]	; (80025a4 <HAL_GPIO_Init+0x610>)
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002422:	4a61      	ldr	r2, [pc, #388]	; (80025a8 <HAL_GPIO_Init+0x614>)
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	089b      	lsrs	r3, r3, #2
 8002428:	3302      	adds	r3, #2
 800242a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800242e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	220f      	movs	r2, #15
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4013      	ands	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a58      	ldr	r2, [pc, #352]	; (80025ac <HAL_GPIO_Init+0x618>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d037      	beq.n	80024be <HAL_GPIO_Init+0x52a>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a57      	ldr	r2, [pc, #348]	; (80025b0 <HAL_GPIO_Init+0x61c>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d031      	beq.n	80024ba <HAL_GPIO_Init+0x526>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a56      	ldr	r2, [pc, #344]	; (80025b4 <HAL_GPIO_Init+0x620>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d02b      	beq.n	80024b6 <HAL_GPIO_Init+0x522>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a55      	ldr	r2, [pc, #340]	; (80025b8 <HAL_GPIO_Init+0x624>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d025      	beq.n	80024b2 <HAL_GPIO_Init+0x51e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a54      	ldr	r2, [pc, #336]	; (80025bc <HAL_GPIO_Init+0x628>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d01f      	beq.n	80024ae <HAL_GPIO_Init+0x51a>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a53      	ldr	r2, [pc, #332]	; (80025c0 <HAL_GPIO_Init+0x62c>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d019      	beq.n	80024aa <HAL_GPIO_Init+0x516>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a52      	ldr	r2, [pc, #328]	; (80025c4 <HAL_GPIO_Init+0x630>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d013      	beq.n	80024a6 <HAL_GPIO_Init+0x512>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a51      	ldr	r2, [pc, #324]	; (80025c8 <HAL_GPIO_Init+0x634>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d00d      	beq.n	80024a2 <HAL_GPIO_Init+0x50e>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a50      	ldr	r2, [pc, #320]	; (80025cc <HAL_GPIO_Init+0x638>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d007      	beq.n	800249e <HAL_GPIO_Init+0x50a>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a4f      	ldr	r2, [pc, #316]	; (80025d0 <HAL_GPIO_Init+0x63c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d101      	bne.n	800249a <HAL_GPIO_Init+0x506>
 8002496:	2309      	movs	r3, #9
 8002498:	e012      	b.n	80024c0 <HAL_GPIO_Init+0x52c>
 800249a:	230a      	movs	r3, #10
 800249c:	e010      	b.n	80024c0 <HAL_GPIO_Init+0x52c>
 800249e:	2308      	movs	r3, #8
 80024a0:	e00e      	b.n	80024c0 <HAL_GPIO_Init+0x52c>
 80024a2:	2307      	movs	r3, #7
 80024a4:	e00c      	b.n	80024c0 <HAL_GPIO_Init+0x52c>
 80024a6:	2306      	movs	r3, #6
 80024a8:	e00a      	b.n	80024c0 <HAL_GPIO_Init+0x52c>
 80024aa:	2305      	movs	r3, #5
 80024ac:	e008      	b.n	80024c0 <HAL_GPIO_Init+0x52c>
 80024ae:	2304      	movs	r3, #4
 80024b0:	e006      	b.n	80024c0 <HAL_GPIO_Init+0x52c>
 80024b2:	2303      	movs	r3, #3
 80024b4:	e004      	b.n	80024c0 <HAL_GPIO_Init+0x52c>
 80024b6:	2302      	movs	r3, #2
 80024b8:	e002      	b.n	80024c0 <HAL_GPIO_Init+0x52c>
 80024ba:	2301      	movs	r3, #1
 80024bc:	e000      	b.n	80024c0 <HAL_GPIO_Init+0x52c>
 80024be:	2300      	movs	r3, #0
 80024c0:	69fa      	ldr	r2, [r7, #28]
 80024c2:	f002 0203 	and.w	r2, r2, #3
 80024c6:	0092      	lsls	r2, r2, #2
 80024c8:	4093      	lsls	r3, r2
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024d0:	4935      	ldr	r1, [pc, #212]	; (80025a8 <HAL_GPIO_Init+0x614>)
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	089b      	lsrs	r3, r3, #2
 80024d6:	3302      	adds	r3, #2
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024de:	4b3d      	ldr	r3, [pc, #244]	; (80025d4 <HAL_GPIO_Init+0x640>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	43db      	mvns	r3, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4013      	ands	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_GPIO_Init+0x56e>
        {
          temp |= iocurrent;
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002502:	4a34      	ldr	r2, [pc, #208]	; (80025d4 <HAL_GPIO_Init+0x640>)
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002508:	4b32      	ldr	r3, [pc, #200]	; (80025d4 <HAL_GPIO_Init+0x640>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <HAL_GPIO_Init+0x598>
        {
          temp |= iocurrent;
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800252c:	4a29      	ldr	r2, [pc, #164]	; (80025d4 <HAL_GPIO_Init+0x640>)
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002532:	4b28      	ldr	r3, [pc, #160]	; (80025d4 <HAL_GPIO_Init+0x640>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_GPIO_Init+0x5c2>
        {
          temp |= iocurrent;
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002556:	4a1f      	ldr	r2, [pc, #124]	; (80025d4 <HAL_GPIO_Init+0x640>)
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800255c:	4b1d      	ldr	r3, [pc, #116]	; (80025d4 <HAL_GPIO_Init+0x640>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_GPIO_Init+0x5ec>
        {
          temp |= iocurrent;
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002580:	4a14      	ldr	r2, [pc, #80]	; (80025d4 <HAL_GPIO_Init+0x640>)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	3301      	adds	r3, #1
 800258a:	61fb      	str	r3, [r7, #28]
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	2b0f      	cmp	r3, #15
 8002590:	f67f ada0 	bls.w	80020d4 <HAL_GPIO_Init+0x140>
      }
    }
  }
}
 8002594:	bf00      	nop
 8002596:	bf00      	nop
 8002598:	3720      	adds	r7, #32
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	08009030 	.word	0x08009030
 80025a4:	40023800 	.word	0x40023800
 80025a8:	40013800 	.word	0x40013800
 80025ac:	40020000 	.word	0x40020000
 80025b0:	40020400 	.word	0x40020400
 80025b4:	40020800 	.word	0x40020800
 80025b8:	40020c00 	.word	0x40020c00
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40021400 	.word	0x40021400
 80025c4:	40021800 	.word	0x40021800
 80025c8:	40021c00 	.word	0x40021c00
 80025cc:	40022000 	.word	0x40022000
 80025d0:	40022400 	.word	0x40022400
 80025d4:	40013c00 	.word	0x40013c00

080025d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	807b      	strh	r3, [r7, #2]
 80025e4:	4613      	mov	r3, r2
 80025e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80025e8:	887b      	ldrh	r3, [r7, #2]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d004      	beq.n	80025f8 <HAL_GPIO_WritePin+0x20>
 80025ee:	887b      	ldrh	r3, [r7, #2]
 80025f0:	0c1b      	lsrs	r3, r3, #16
 80025f2:	041b      	lsls	r3, r3, #16
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d004      	beq.n	8002602 <HAL_GPIO_WritePin+0x2a>
 80025f8:	f240 119d 	movw	r1, #413	; 0x19d
 80025fc:	480e      	ldr	r0, [pc, #56]	; (8002638 <HAL_GPIO_WritePin+0x60>)
 80025fe:	f7fe fec7 	bl	8001390 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002602:	787b      	ldrb	r3, [r7, #1]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d007      	beq.n	8002618 <HAL_GPIO_WritePin+0x40>
 8002608:	787b      	ldrb	r3, [r7, #1]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d004      	beq.n	8002618 <HAL_GPIO_WritePin+0x40>
 800260e:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8002612:	4809      	ldr	r0, [pc, #36]	; (8002638 <HAL_GPIO_WritePin+0x60>)
 8002614:	f7fe febc 	bl	8001390 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002618:	787b      	ldrb	r3, [r7, #1]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800261e:	887a      	ldrh	r2, [r7, #2]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002624:	e003      	b.n	800262e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002626:	887b      	ldrh	r3, [r7, #2]
 8002628:	041a      	lsls	r2, r3, #16
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	619a      	str	r2, [r3, #24]
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	08009030 	.word	0x08009030

0800263c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e314      	b.n	8002c78 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2b0f      	cmp	r3, #15
 8002654:	d903      	bls.n	800265e <HAL_RCC_OscConfig+0x22>
 8002656:	21e6      	movs	r1, #230	; 0xe6
 8002658:	4897      	ldr	r0, [pc, #604]	; (80028b8 <HAL_RCC_OscConfig+0x27c>)
 800265a:	f7fe fe99 	bl	8001390 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 8088 	beq.w	800277c <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00d      	beq.n	8002690 <HAL_RCC_OscConfig+0x54>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800267c:	d008      	beq.n	8002690 <HAL_RCC_OscConfig+0x54>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002686:	d003      	beq.n	8002690 <HAL_RCC_OscConfig+0x54>
 8002688:	21eb      	movs	r1, #235	; 0xeb
 800268a:	488b      	ldr	r0, [pc, #556]	; (80028b8 <HAL_RCC_OscConfig+0x27c>)
 800268c:	f7fe fe80 	bl	8001390 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002690:	4b8a      	ldr	r3, [pc, #552]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 030c 	and.w	r3, r3, #12
 8002698:	2b04      	cmp	r3, #4
 800269a:	d00c      	beq.n	80026b6 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800269c:	4b87      	ldr	r3, [pc, #540]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026a4:	2b08      	cmp	r3, #8
 80026a6:	d112      	bne.n	80026ce <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026a8:	4b84      	ldr	r3, [pc, #528]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026b4:	d10b      	bne.n	80026ce <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b6:	4b81      	ldr	r3, [pc, #516]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d05b      	beq.n	800277a <HAL_RCC_OscConfig+0x13e>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d157      	bne.n	800277a <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e2d4      	b.n	8002c78 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d6:	d106      	bne.n	80026e6 <HAL_RCC_OscConfig+0xaa>
 80026d8:	4b78      	ldr	r3, [pc, #480]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a77      	ldr	r2, [pc, #476]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80026de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e2:	6013      	str	r3, [r2, #0]
 80026e4:	e01d      	b.n	8002722 <HAL_RCC_OscConfig+0xe6>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026ee:	d10c      	bne.n	800270a <HAL_RCC_OscConfig+0xce>
 80026f0:	4b72      	ldr	r3, [pc, #456]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a71      	ldr	r2, [pc, #452]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80026f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026fa:	6013      	str	r3, [r2, #0]
 80026fc:	4b6f      	ldr	r3, [pc, #444]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a6e      	ldr	r2, [pc, #440]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 8002702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002706:	6013      	str	r3, [r2, #0]
 8002708:	e00b      	b.n	8002722 <HAL_RCC_OscConfig+0xe6>
 800270a:	4b6c      	ldr	r3, [pc, #432]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a6b      	ldr	r2, [pc, #428]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 8002710:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	4b69      	ldr	r3, [pc, #420]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a68      	ldr	r2, [pc, #416]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 800271c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002720:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d013      	beq.n	8002752 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272a:	f7fe ff61 	bl	80015f0 <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002732:	f7fe ff5d 	bl	80015f0 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b64      	cmp	r3, #100	; 0x64
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e299      	b.n	8002c78 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002744:	4b5d      	ldr	r3, [pc, #372]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0f0      	beq.n	8002732 <HAL_RCC_OscConfig+0xf6>
 8002750:	e014      	b.n	800277c <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002752:	f7fe ff4d 	bl	80015f0 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800275a:	f7fe ff49 	bl	80015f0 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b64      	cmp	r3, #100	; 0x64
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e285      	b.n	8002c78 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800276c:	4b53      	ldr	r3, [pc, #332]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1f0      	bne.n	800275a <HAL_RCC_OscConfig+0x11e>
 8002778:	e000      	b.n	800277c <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800277a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d079      	beq.n	800287c <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d008      	beq.n	80027a2 <HAL_RCC_OscConfig+0x166>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d004      	beq.n	80027a2 <HAL_RCC_OscConfig+0x166>
 8002798:	f240 111d 	movw	r1, #285	; 0x11d
 800279c:	4846      	ldr	r0, [pc, #280]	; (80028b8 <HAL_RCC_OscConfig+0x27c>)
 800279e:	f7fe fdf7 	bl	8001390 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	2b1f      	cmp	r3, #31
 80027a8:	d904      	bls.n	80027b4 <HAL_RCC_OscConfig+0x178>
 80027aa:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80027ae:	4842      	ldr	r0, [pc, #264]	; (80028b8 <HAL_RCC_OscConfig+0x27c>)
 80027b0:	f7fe fdee 	bl	8001390 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027b4:	4b41      	ldr	r3, [pc, #260]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 030c 	and.w	r3, r3, #12
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00b      	beq.n	80027d8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027c0:	4b3e      	ldr	r3, [pc, #248]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d11c      	bne.n	8002806 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027cc:	4b3b      	ldr	r3, [pc, #236]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d116      	bne.n	8002806 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d8:	4b38      	ldr	r3, [pc, #224]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <HAL_RCC_OscConfig+0x1b4>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d001      	beq.n	80027f0 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e243      	b.n	8002c78 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f0:	4b32      	ldr	r3, [pc, #200]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	492f      	ldr	r1, [pc, #188]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 8002800:	4313      	orrs	r3, r2
 8002802:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002804:	e03a      	b.n	800287c <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d020      	beq.n	8002850 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800280e:	4b2c      	ldr	r3, [pc, #176]	; (80028c0 <HAL_RCC_OscConfig+0x284>)
 8002810:	2201      	movs	r2, #1
 8002812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002814:	f7fe feec 	bl	80015f0 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800281c:	f7fe fee8 	bl	80015f0 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e224      	b.n	8002c78 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800282e:	4b23      	ldr	r3, [pc, #140]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f0      	beq.n	800281c <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283a:	4b20      	ldr	r3, [pc, #128]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	491c      	ldr	r1, [pc, #112]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 800284a:	4313      	orrs	r3, r2
 800284c:	600b      	str	r3, [r1, #0]
 800284e:	e015      	b.n	800287c <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002850:	4b1b      	ldr	r3, [pc, #108]	; (80028c0 <HAL_RCC_OscConfig+0x284>)
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002856:	f7fe fecb 	bl	80015f0 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800285e:	f7fe fec7 	bl	80015f0 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e203      	b.n	8002c78 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002870:	4b12      	ldr	r3, [pc, #72]	; (80028bc <HAL_RCC_OscConfig+0x280>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1f0      	bne.n	800285e <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	2b00      	cmp	r3, #0
 8002886:	d045      	beq.n	8002914 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d008      	beq.n	80028a2 <HAL_RCC_OscConfig+0x266>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d004      	beq.n	80028a2 <HAL_RCC_OscConfig+0x266>
 8002898:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800289c:	4806      	ldr	r0, [pc, #24]	; (80028b8 <HAL_RCC_OscConfig+0x27c>)
 800289e:	f7fe fd77 	bl	8001390 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d01e      	beq.n	80028e8 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028aa:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <HAL_RCC_OscConfig+0x288>)
 80028ac:	2201      	movs	r2, #1
 80028ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b0:	f7fe fe9e 	bl	80015f0 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028b6:	e010      	b.n	80028da <HAL_RCC_OscConfig+0x29e>
 80028b8:	0800906c 	.word	0x0800906c
 80028bc:	40023800 	.word	0x40023800
 80028c0:	42470000 	.word	0x42470000
 80028c4:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028c8:	f7fe fe92 	bl	80015f0 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e1ce      	b.n	8002c78 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028da:	4b5e      	ldr	r3, [pc, #376]	; (8002a54 <HAL_RCC_OscConfig+0x418>)
 80028dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCC_OscConfig+0x28c>
 80028e6:	e015      	b.n	8002914 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028e8:	4b5b      	ldr	r3, [pc, #364]	; (8002a58 <HAL_RCC_OscConfig+0x41c>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ee:	f7fe fe7f 	bl	80015f0 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028f6:	f7fe fe7b 	bl	80015f0 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e1b7      	b.n	8002c78 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002908:	4b52      	ldr	r3, [pc, #328]	; (8002a54 <HAL_RCC_OscConfig+0x418>)
 800290a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1f0      	bne.n	80028f6 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 80b0 	beq.w	8002a82 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002922:	2300      	movs	r3, #0
 8002924:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00c      	beq.n	8002948 <HAL_RCC_OscConfig+0x30c>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d008      	beq.n	8002948 <HAL_RCC_OscConfig+0x30c>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	2b05      	cmp	r3, #5
 800293c:	d004      	beq.n	8002948 <HAL_RCC_OscConfig+0x30c>
 800293e:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8002942:	4846      	ldr	r0, [pc, #280]	; (8002a5c <HAL_RCC_OscConfig+0x420>)
 8002944:	f7fe fd24 	bl	8001390 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002948:	4b42      	ldr	r3, [pc, #264]	; (8002a54 <HAL_RCC_OscConfig+0x418>)
 800294a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10f      	bne.n	8002974 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002954:	2300      	movs	r3, #0
 8002956:	60bb      	str	r3, [r7, #8]
 8002958:	4b3e      	ldr	r3, [pc, #248]	; (8002a54 <HAL_RCC_OscConfig+0x418>)
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	4a3d      	ldr	r2, [pc, #244]	; (8002a54 <HAL_RCC_OscConfig+0x418>)
 800295e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002962:	6413      	str	r3, [r2, #64]	; 0x40
 8002964:	4b3b      	ldr	r3, [pc, #236]	; (8002a54 <HAL_RCC_OscConfig+0x418>)
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002970:	2301      	movs	r3, #1
 8002972:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002974:	4b3a      	ldr	r3, [pc, #232]	; (8002a60 <HAL_RCC_OscConfig+0x424>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d118      	bne.n	80029b2 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002980:	4b37      	ldr	r3, [pc, #220]	; (8002a60 <HAL_RCC_OscConfig+0x424>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a36      	ldr	r2, [pc, #216]	; (8002a60 <HAL_RCC_OscConfig+0x424>)
 8002986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800298a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800298c:	f7fe fe30 	bl	80015f0 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002994:	f7fe fe2c 	bl	80015f0 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e168      	b.n	8002c78 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a6:	4b2e      	ldr	r3, [pc, #184]	; (8002a60 <HAL_RCC_OscConfig+0x424>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d106      	bne.n	80029c8 <HAL_RCC_OscConfig+0x38c>
 80029ba:	4b26      	ldr	r3, [pc, #152]	; (8002a54 <HAL_RCC_OscConfig+0x418>)
 80029bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029be:	4a25      	ldr	r2, [pc, #148]	; (8002a54 <HAL_RCC_OscConfig+0x418>)
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	6713      	str	r3, [r2, #112]	; 0x70
 80029c6:	e01c      	b.n	8002a02 <HAL_RCC_OscConfig+0x3c6>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	2b05      	cmp	r3, #5
 80029ce:	d10c      	bne.n	80029ea <HAL_RCC_OscConfig+0x3ae>
 80029d0:	4b20      	ldr	r3, [pc, #128]	; (8002a54 <HAL_RCC_OscConfig+0x418>)
 80029d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d4:	4a1f      	ldr	r2, [pc, #124]	; (8002a54 <HAL_RCC_OscConfig+0x418>)
 80029d6:	f043 0304 	orr.w	r3, r3, #4
 80029da:	6713      	str	r3, [r2, #112]	; 0x70
 80029dc:	4b1d      	ldr	r3, [pc, #116]	; (8002a54 <HAL_RCC_OscConfig+0x418>)
 80029de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e0:	4a1c      	ldr	r2, [pc, #112]	; (8002a54 <HAL_RCC_OscConfig+0x418>)
 80029e2:	f043 0301 	orr.w	r3, r3, #1
 80029e6:	6713      	str	r3, [r2, #112]	; 0x70
 80029e8:	e00b      	b.n	8002a02 <HAL_RCC_OscConfig+0x3c6>
 80029ea:	4b1a      	ldr	r3, [pc, #104]	; (8002a54 <HAL_RCC_OscConfig+0x418>)
 80029ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ee:	4a19      	ldr	r2, [pc, #100]	; (8002a54 <HAL_RCC_OscConfig+0x418>)
 80029f0:	f023 0301 	bic.w	r3, r3, #1
 80029f4:	6713      	str	r3, [r2, #112]	; 0x70
 80029f6:	4b17      	ldr	r3, [pc, #92]	; (8002a54 <HAL_RCC_OscConfig+0x418>)
 80029f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fa:	4a16      	ldr	r2, [pc, #88]	; (8002a54 <HAL_RCC_OscConfig+0x418>)
 80029fc:	f023 0304 	bic.w	r3, r3, #4
 8002a00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d015      	beq.n	8002a36 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0a:	f7fe fdf1 	bl	80015f0 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a10:	e00a      	b.n	8002a28 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a12:	f7fe fded 	bl	80015f0 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e127      	b.n	8002c78 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a28:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <HAL_RCC_OscConfig+0x418>)
 8002a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0ee      	beq.n	8002a12 <HAL_RCC_OscConfig+0x3d6>
 8002a34:	e01c      	b.n	8002a70 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a36:	f7fe fddb 	bl	80015f0 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a3c:	e012      	b.n	8002a64 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a3e:	f7fe fdd7 	bl	80015f0 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d909      	bls.n	8002a64 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e111      	b.n	8002c78 <HAL_RCC_OscConfig+0x63c>
 8002a54:	40023800 	.word	0x40023800
 8002a58:	42470e80 	.word	0x42470e80
 8002a5c:	0800906c 	.word	0x0800906c
 8002a60:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a64:	4b86      	ldr	r3, [pc, #536]	; (8002c80 <HAL_RCC_OscConfig+0x644>)
 8002a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1e6      	bne.n	8002a3e <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a70:	7dfb      	ldrb	r3, [r7, #23]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d105      	bne.n	8002a82 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a76:	4b82      	ldr	r3, [pc, #520]	; (8002c80 <HAL_RCC_OscConfig+0x644>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	4a81      	ldr	r2, [pc, #516]	; (8002c80 <HAL_RCC_OscConfig+0x644>)
 8002a7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00c      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x468>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d008      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x468>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d004      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x468>
 8002a9a:	f240 11cd 	movw	r1, #461	; 0x1cd
 8002a9e:	4879      	ldr	r0, [pc, #484]	; (8002c84 <HAL_RCC_OscConfig+0x648>)
 8002aa0:	f7fe fc76 	bl	8001390 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 80e4 	beq.w	8002c76 <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002aae:	4b74      	ldr	r3, [pc, #464]	; (8002c80 <HAL_RCC_OscConfig+0x644>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	f000 80a5 	beq.w	8002c06 <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	f040 8089 	bne.w	8002bd8 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d009      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x4a6>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ad6:	d004      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x4a6>
 8002ad8:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8002adc:	4869      	ldr	r0, [pc, #420]	; (8002c84 <HAL_RCC_OscConfig+0x648>)
 8002ade:	f7fe fc57 	bl	8001390 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	2b3f      	cmp	r3, #63	; 0x3f
 8002ae8:	d904      	bls.n	8002af4 <HAL_RCC_OscConfig+0x4b8>
 8002aea:	f240 11d7 	movw	r1, #471	; 0x1d7
 8002aee:	4865      	ldr	r0, [pc, #404]	; (8002c84 <HAL_RCC_OscConfig+0x648>)
 8002af0:	f7fe fc4e 	bl	8001390 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af8:	2b31      	cmp	r3, #49	; 0x31
 8002afa:	d904      	bls.n	8002b06 <HAL_RCC_OscConfig+0x4ca>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8002b04:	d904      	bls.n	8002b10 <HAL_RCC_OscConfig+0x4d4>
 8002b06:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8002b0a:	485e      	ldr	r0, [pc, #376]	; (8002c84 <HAL_RCC_OscConfig+0x648>)
 8002b0c:	f7fe fc40 	bl	8001390 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d010      	beq.n	8002b3a <HAL_RCC_OscConfig+0x4fe>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d00c      	beq.n	8002b3a <HAL_RCC_OscConfig+0x4fe>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b24:	2b06      	cmp	r3, #6
 8002b26:	d008      	beq.n	8002b3a <HAL_RCC_OscConfig+0x4fe>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d004      	beq.n	8002b3a <HAL_RCC_OscConfig+0x4fe>
 8002b30:	f240 11d9 	movw	r1, #473	; 0x1d9
 8002b34:	4853      	ldr	r0, [pc, #332]	; (8002c84 <HAL_RCC_OscConfig+0x648>)
 8002b36:	f7fe fc2b 	bl	8001390 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d903      	bls.n	8002b4a <HAL_RCC_OscConfig+0x50e>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b46:	2b0f      	cmp	r3, #15
 8002b48:	d904      	bls.n	8002b54 <HAL_RCC_OscConfig+0x518>
 8002b4a:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8002b4e:	484d      	ldr	r0, [pc, #308]	; (8002c84 <HAL_RCC_OscConfig+0x648>)
 8002b50:	f7fe fc1e 	bl	8001390 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b54:	4b4c      	ldr	r3, [pc, #304]	; (8002c88 <HAL_RCC_OscConfig+0x64c>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5a:	f7fe fd49 	bl	80015f0 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b62:	f7fe fd45 	bl	80015f0 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e081      	b.n	8002c78 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b74:	4b42      	ldr	r3, [pc, #264]	; (8002c80 <HAL_RCC_OscConfig+0x644>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1f0      	bne.n	8002b62 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	69da      	ldr	r2, [r3, #28]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8e:	019b      	lsls	r3, r3, #6
 8002b90:	431a      	orrs	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b96:	085b      	lsrs	r3, r3, #1
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	041b      	lsls	r3, r3, #16
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba2:	061b      	lsls	r3, r3, #24
 8002ba4:	4936      	ldr	r1, [pc, #216]	; (8002c80 <HAL_RCC_OscConfig+0x644>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002baa:	4b37      	ldr	r3, [pc, #220]	; (8002c88 <HAL_RCC_OscConfig+0x64c>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb0:	f7fe fd1e 	bl	80015f0 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb8:	f7fe fd1a 	bl	80015f0 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e056      	b.n	8002c78 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bca:	4b2d      	ldr	r3, [pc, #180]	; (8002c80 <HAL_RCC_OscConfig+0x644>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0f0      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x57c>
 8002bd6:	e04e      	b.n	8002c76 <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd8:	4b2b      	ldr	r3, [pc, #172]	; (8002c88 <HAL_RCC_OscConfig+0x64c>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bde:	f7fe fd07 	bl	80015f0 <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be6:	f7fe fd03 	bl	80015f0 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e03f      	b.n	8002c78 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bf8:	4b21      	ldr	r3, [pc, #132]	; (8002c80 <HAL_RCC_OscConfig+0x644>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1f0      	bne.n	8002be6 <HAL_RCC_OscConfig+0x5aa>
 8002c04:	e037      	b.n	8002c76 <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d101      	bne.n	8002c12 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e032      	b.n	8002c78 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c12:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <HAL_RCC_OscConfig+0x644>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d028      	beq.n	8002c72 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d121      	bne.n	8002c72 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d11a      	bne.n	8002c72 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c42:	4013      	ands	r3, r2
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c48:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d111      	bne.n	8002c72 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c58:	085b      	lsrs	r3, r3, #1
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d107      	bne.n	8002c72 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d001      	beq.n	8002c76 <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40023800 	.word	0x40023800
 8002c84:	0800906c 	.word	0x0800906c
 8002c88:	42470060 	.word	0x42470060

08002c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e18c      	b.n	8002fba <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x24>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b0f      	cmp	r3, #15
 8002cae:	d904      	bls.n	8002cba <HAL_RCC_ClockConfig+0x2e>
 8002cb0:	f240 215a 	movw	r1, #602	; 0x25a
 8002cb4:	4887      	ldr	r0, [pc, #540]	; (8002ed4 <HAL_RCC_ClockConfig+0x248>)
 8002cb6:	f7fe fb6b 	bl	8001390 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d031      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x98>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d02e      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x98>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d02b      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x98>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	2b03      	cmp	r3, #3
 8002cd0:	d028      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x98>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	2b04      	cmp	r3, #4
 8002cd6:	d025      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x98>
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	2b05      	cmp	r3, #5
 8002cdc:	d022      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x98>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	2b06      	cmp	r3, #6
 8002ce2:	d01f      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x98>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	2b07      	cmp	r3, #7
 8002ce8:	d01c      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x98>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d019      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x98>
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	2b09      	cmp	r3, #9
 8002cf4:	d016      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x98>
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	2b0a      	cmp	r3, #10
 8002cfa:	d013      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x98>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	2b0b      	cmp	r3, #11
 8002d00:	d010      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x98>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b0c      	cmp	r3, #12
 8002d06:	d00d      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x98>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	2b0d      	cmp	r3, #13
 8002d0c:	d00a      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x98>
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2b0e      	cmp	r3, #14
 8002d12:	d007      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x98>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	2b0f      	cmp	r3, #15
 8002d18:	d004      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x98>
 8002d1a:	f240 215b 	movw	r1, #603	; 0x25b
 8002d1e:	486d      	ldr	r0, [pc, #436]	; (8002ed4 <HAL_RCC_ClockConfig+0x248>)
 8002d20:	f7fe fb36 	bl	8001390 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d24:	4b6c      	ldr	r3, [pc, #432]	; (8002ed8 <HAL_RCC_ClockConfig+0x24c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 030f 	and.w	r3, r3, #15
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d90c      	bls.n	8002d4c <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d32:	4b69      	ldr	r3, [pc, #420]	; (8002ed8 <HAL_RCC_ClockConfig+0x24c>)
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3a:	4b67      	ldr	r3, [pc, #412]	; (8002ed8 <HAL_RCC_ClockConfig+0x24c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d001      	beq.n	8002d4c <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e136      	b.n	8002fba <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d049      	beq.n	8002dec <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d005      	beq.n	8002d70 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d64:	4b5d      	ldr	r3, [pc, #372]	; (8002edc <HAL_RCC_ClockConfig+0x250>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	4a5c      	ldr	r2, [pc, #368]	; (8002edc <HAL_RCC_ClockConfig+0x250>)
 8002d6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0308 	and.w	r3, r3, #8
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d005      	beq.n	8002d88 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d7c:	4b57      	ldr	r3, [pc, #348]	; (8002edc <HAL_RCC_ClockConfig+0x250>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	4a56      	ldr	r2, [pc, #344]	; (8002edc <HAL_RCC_ClockConfig+0x250>)
 8002d82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d024      	beq.n	8002dda <HAL_RCC_ClockConfig+0x14e>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	2b80      	cmp	r3, #128	; 0x80
 8002d96:	d020      	beq.n	8002dda <HAL_RCC_ClockConfig+0x14e>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2b90      	cmp	r3, #144	; 0x90
 8002d9e:	d01c      	beq.n	8002dda <HAL_RCC_ClockConfig+0x14e>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	2ba0      	cmp	r3, #160	; 0xa0
 8002da6:	d018      	beq.n	8002dda <HAL_RCC_ClockConfig+0x14e>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	2bb0      	cmp	r3, #176	; 0xb0
 8002dae:	d014      	beq.n	8002dda <HAL_RCC_ClockConfig+0x14e>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	2bc0      	cmp	r3, #192	; 0xc0
 8002db6:	d010      	beq.n	8002dda <HAL_RCC_ClockConfig+0x14e>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	2bd0      	cmp	r3, #208	; 0xd0
 8002dbe:	d00c      	beq.n	8002dda <HAL_RCC_ClockConfig+0x14e>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	2be0      	cmp	r3, #224	; 0xe0
 8002dc6:	d008      	beq.n	8002dda <HAL_RCC_ClockConfig+0x14e>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	2bf0      	cmp	r3, #240	; 0xf0
 8002dce:	d004      	beq.n	8002dda <HAL_RCC_ClockConfig+0x14e>
 8002dd0:	f240 217e 	movw	r1, #638	; 0x27e
 8002dd4:	483f      	ldr	r0, [pc, #252]	; (8002ed4 <HAL_RCC_ClockConfig+0x248>)
 8002dd6:	f7fe fadb 	bl	8001390 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dda:	4b40      	ldr	r3, [pc, #256]	; (8002edc <HAL_RCC_ClockConfig+0x250>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	493d      	ldr	r1, [pc, #244]	; (8002edc <HAL_RCC_ClockConfig+0x250>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d059      	beq.n	8002eac <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d010      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x196>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d00c      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x196>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d008      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x196>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	d004      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x196>
 8002e18:	f240 2185 	movw	r1, #645	; 0x285
 8002e1c:	482d      	ldr	r0, [pc, #180]	; (8002ed4 <HAL_RCC_ClockConfig+0x248>)
 8002e1e:	f7fe fab7 	bl	8001390 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d107      	bne.n	8002e3a <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2a:	4b2c      	ldr	r3, [pc, #176]	; (8002edc <HAL_RCC_ClockConfig+0x250>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d119      	bne.n	8002e6a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e0bf      	b.n	8002fba <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d003      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e46:	2b03      	cmp	r3, #3
 8002e48:	d107      	bne.n	8002e5a <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e4a:	4b24      	ldr	r3, [pc, #144]	; (8002edc <HAL_RCC_ClockConfig+0x250>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d109      	bne.n	8002e6a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e0af      	b.n	8002fba <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e5a:	4b20      	ldr	r3, [pc, #128]	; (8002edc <HAL_RCC_ClockConfig+0x250>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e0a7      	b.n	8002fba <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e6a:	4b1c      	ldr	r3, [pc, #112]	; (8002edc <HAL_RCC_ClockConfig+0x250>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f023 0203 	bic.w	r2, r3, #3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	4919      	ldr	r1, [pc, #100]	; (8002edc <HAL_RCC_ClockConfig+0x250>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e7c:	f7fe fbb8 	bl	80015f0 <HAL_GetTick>
 8002e80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e82:	e00a      	b.n	8002e9a <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e84:	f7fe fbb4 	bl	80015f0 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e08f      	b.n	8002fba <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e9a:	4b10      	ldr	r3, [pc, #64]	; (8002edc <HAL_RCC_ClockConfig+0x250>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 020c 	and.w	r2, r3, #12
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d1eb      	bne.n	8002e84 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eac:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <HAL_RCC_ClockConfig+0x24c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 030f 	and.w	r3, r3, #15
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d212      	bcs.n	8002ee0 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eba:	4b07      	ldr	r3, [pc, #28]	; (8002ed8 <HAL_RCC_ClockConfig+0x24c>)
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec2:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <HAL_RCC_ClockConfig+0x24c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d007      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e072      	b.n	8002fba <HAL_RCC_ClockConfig+0x32e>
 8002ed4:	0800906c 	.word	0x0800906c
 8002ed8:	40023c00 	.word	0x40023c00
 8002edc:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d025      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d018      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x29a>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002efc:	d013      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x29a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002f06:	d00e      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x29a>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002f10:	d009      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x29a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002f1a:	d004      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x29a>
 8002f1c:	f240 21c3 	movw	r1, #707	; 0x2c3
 8002f20:	4828      	ldr	r0, [pc, #160]	; (8002fc4 <HAL_RCC_ClockConfig+0x338>)
 8002f22:	f7fe fa35 	bl	8001390 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f26:	4b28      	ldr	r3, [pc, #160]	; (8002fc8 <HAL_RCC_ClockConfig+0x33c>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	4925      	ldr	r1, [pc, #148]	; (8002fc8 <HAL_RCC_ClockConfig+0x33c>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0308 	and.w	r3, r3, #8
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d026      	beq.n	8002f92 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d018      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x2f2>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f54:	d013      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x2f2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002f5e:	d00e      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x2f2>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002f68:	d009      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x2f2>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002f72:	d004      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x2f2>
 8002f74:	f240 21ca 	movw	r1, #714	; 0x2ca
 8002f78:	4812      	ldr	r0, [pc, #72]	; (8002fc4 <HAL_RCC_ClockConfig+0x338>)
 8002f7a:	f7fe fa09 	bl	8001390 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f7e:	4b12      	ldr	r3, [pc, #72]	; (8002fc8 <HAL_RCC_ClockConfig+0x33c>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	490e      	ldr	r1, [pc, #56]	; (8002fc8 <HAL_RCC_ClockConfig+0x33c>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f92:	f000 f821 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 8002f96:	4602      	mov	r2, r0
 8002f98:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <HAL_RCC_ClockConfig+0x33c>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	091b      	lsrs	r3, r3, #4
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	490a      	ldr	r1, [pc, #40]	; (8002fcc <HAL_RCC_ClockConfig+0x340>)
 8002fa4:	5ccb      	ldrb	r3, [r1, r3]
 8002fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8002faa:	4a09      	ldr	r2, [pc, #36]	; (8002fd0 <HAL_RCC_ClockConfig+0x344>)
 8002fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fae:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <HAL_RCC_ClockConfig+0x348>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fe fa22 	bl	80013fc <HAL_InitTick>

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	0800906c 	.word	0x0800906c
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	08009200 	.word	0x08009200
 8002fd0:	20000000 	.word	0x20000000
 8002fd4:	20000004 	.word	0x20000004

08002fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fdc:	b094      	sub	sp, #80	; 0x50
 8002fde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	647b      	str	r3, [r7, #68]	; 0x44
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fe8:	2300      	movs	r3, #0
 8002fea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ff0:	4b79      	ldr	r3, [pc, #484]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 030c 	and.w	r3, r3, #12
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d00d      	beq.n	8003018 <HAL_RCC_GetSysClockFreq+0x40>
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	f200 80e1 	bhi.w	80031c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003002:	2b00      	cmp	r3, #0
 8003004:	d002      	beq.n	800300c <HAL_RCC_GetSysClockFreq+0x34>
 8003006:	2b04      	cmp	r3, #4
 8003008:	d003      	beq.n	8003012 <HAL_RCC_GetSysClockFreq+0x3a>
 800300a:	e0db      	b.n	80031c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800300c:	4b73      	ldr	r3, [pc, #460]	; (80031dc <HAL_RCC_GetSysClockFreq+0x204>)
 800300e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003010:	e0db      	b.n	80031ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003012:	4b73      	ldr	r3, [pc, #460]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003014:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003016:	e0d8      	b.n	80031ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003018:	4b6f      	ldr	r3, [pc, #444]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003020:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003022:	4b6d      	ldr	r3, [pc, #436]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d063      	beq.n	80030f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800302e:	4b6a      	ldr	r3, [pc, #424]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	099b      	lsrs	r3, r3, #6
 8003034:	2200      	movs	r2, #0
 8003036:	63bb      	str	r3, [r7, #56]	; 0x38
 8003038:	63fa      	str	r2, [r7, #60]	; 0x3c
 800303a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800303c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003040:	633b      	str	r3, [r7, #48]	; 0x30
 8003042:	2300      	movs	r3, #0
 8003044:	637b      	str	r3, [r7, #52]	; 0x34
 8003046:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800304a:	4622      	mov	r2, r4
 800304c:	462b      	mov	r3, r5
 800304e:	f04f 0000 	mov.w	r0, #0
 8003052:	f04f 0100 	mov.w	r1, #0
 8003056:	0159      	lsls	r1, r3, #5
 8003058:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800305c:	0150      	lsls	r0, r2, #5
 800305e:	4602      	mov	r2, r0
 8003060:	460b      	mov	r3, r1
 8003062:	4621      	mov	r1, r4
 8003064:	1a51      	subs	r1, r2, r1
 8003066:	6139      	str	r1, [r7, #16]
 8003068:	4629      	mov	r1, r5
 800306a:	eb63 0301 	sbc.w	r3, r3, r1
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	f04f 0200 	mov.w	r2, #0
 8003074:	f04f 0300 	mov.w	r3, #0
 8003078:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800307c:	4659      	mov	r1, fp
 800307e:	018b      	lsls	r3, r1, #6
 8003080:	4651      	mov	r1, sl
 8003082:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003086:	4651      	mov	r1, sl
 8003088:	018a      	lsls	r2, r1, #6
 800308a:	4651      	mov	r1, sl
 800308c:	ebb2 0801 	subs.w	r8, r2, r1
 8003090:	4659      	mov	r1, fp
 8003092:	eb63 0901 	sbc.w	r9, r3, r1
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	f04f 0300 	mov.w	r3, #0
 800309e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030aa:	4690      	mov	r8, r2
 80030ac:	4699      	mov	r9, r3
 80030ae:	4623      	mov	r3, r4
 80030b0:	eb18 0303 	adds.w	r3, r8, r3
 80030b4:	60bb      	str	r3, [r7, #8]
 80030b6:	462b      	mov	r3, r5
 80030b8:	eb49 0303 	adc.w	r3, r9, r3
 80030bc:	60fb      	str	r3, [r7, #12]
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80030ca:	4629      	mov	r1, r5
 80030cc:	024b      	lsls	r3, r1, #9
 80030ce:	4621      	mov	r1, r4
 80030d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030d4:	4621      	mov	r1, r4
 80030d6:	024a      	lsls	r2, r1, #9
 80030d8:	4610      	mov	r0, r2
 80030da:	4619      	mov	r1, r3
 80030dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030de:	2200      	movs	r2, #0
 80030e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80030e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030e8:	f7fd f8cc 	bl	8000284 <__aeabi_uldivmod>
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	4613      	mov	r3, r2
 80030f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030f4:	e058      	b.n	80031a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030f6:	4b38      	ldr	r3, [pc, #224]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	099b      	lsrs	r3, r3, #6
 80030fc:	2200      	movs	r2, #0
 80030fe:	4618      	mov	r0, r3
 8003100:	4611      	mov	r1, r2
 8003102:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003106:	623b      	str	r3, [r7, #32]
 8003108:	2300      	movs	r3, #0
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
 800310c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003110:	4642      	mov	r2, r8
 8003112:	464b      	mov	r3, r9
 8003114:	f04f 0000 	mov.w	r0, #0
 8003118:	f04f 0100 	mov.w	r1, #0
 800311c:	0159      	lsls	r1, r3, #5
 800311e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003122:	0150      	lsls	r0, r2, #5
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4641      	mov	r1, r8
 800312a:	ebb2 0a01 	subs.w	sl, r2, r1
 800312e:	4649      	mov	r1, r9
 8003130:	eb63 0b01 	sbc.w	fp, r3, r1
 8003134:	f04f 0200 	mov.w	r2, #0
 8003138:	f04f 0300 	mov.w	r3, #0
 800313c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003140:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003144:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003148:	ebb2 040a 	subs.w	r4, r2, sl
 800314c:	eb63 050b 	sbc.w	r5, r3, fp
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	00eb      	lsls	r3, r5, #3
 800315a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800315e:	00e2      	lsls	r2, r4, #3
 8003160:	4614      	mov	r4, r2
 8003162:	461d      	mov	r5, r3
 8003164:	4643      	mov	r3, r8
 8003166:	18e3      	adds	r3, r4, r3
 8003168:	603b      	str	r3, [r7, #0]
 800316a:	464b      	mov	r3, r9
 800316c:	eb45 0303 	adc.w	r3, r5, r3
 8003170:	607b      	str	r3, [r7, #4]
 8003172:	f04f 0200 	mov.w	r2, #0
 8003176:	f04f 0300 	mov.w	r3, #0
 800317a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800317e:	4629      	mov	r1, r5
 8003180:	028b      	lsls	r3, r1, #10
 8003182:	4621      	mov	r1, r4
 8003184:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003188:	4621      	mov	r1, r4
 800318a:	028a      	lsls	r2, r1, #10
 800318c:	4610      	mov	r0, r2
 800318e:	4619      	mov	r1, r3
 8003190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003192:	2200      	movs	r2, #0
 8003194:	61bb      	str	r3, [r7, #24]
 8003196:	61fa      	str	r2, [r7, #28]
 8003198:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800319c:	f7fd f872 	bl	8000284 <__aeabi_uldivmod>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4613      	mov	r3, r2
 80031a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031a8:	4b0b      	ldr	r3, [pc, #44]	; (80031d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	0c1b      	lsrs	r3, r3, #16
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	3301      	adds	r3, #1
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80031b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031c2:	e002      	b.n	80031ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031c4:	4b05      	ldr	r3, [pc, #20]	; (80031dc <HAL_RCC_GetSysClockFreq+0x204>)
 80031c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3750      	adds	r7, #80	; 0x50
 80031d0:	46bd      	mov	sp, r7
 80031d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031d6:	bf00      	nop
 80031d8:	40023800 	.word	0x40023800
 80031dc:	00f42400 	.word	0x00f42400
 80031e0:	007a1200 	.word	0x007a1200

080031e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031e8:	4b03      	ldr	r3, [pc, #12]	; (80031f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80031ea:	681b      	ldr	r3, [r3, #0]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	20000000 	.word	0x20000000

080031fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003200:	f7ff fff0 	bl	80031e4 <HAL_RCC_GetHCLKFreq>
 8003204:	4602      	mov	r2, r0
 8003206:	4b05      	ldr	r3, [pc, #20]	; (800321c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	0a9b      	lsrs	r3, r3, #10
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	4903      	ldr	r1, [pc, #12]	; (8003220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003212:	5ccb      	ldrb	r3, [r1, r3]
 8003214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003218:	4618      	mov	r0, r3
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40023800 	.word	0x40023800
 8003220:	08009210 	.word	0x08009210

08003224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003228:	f7ff ffdc 	bl	80031e4 <HAL_RCC_GetHCLKFreq>
 800322c:	4602      	mov	r2, r0
 800322e:	4b05      	ldr	r3, [pc, #20]	; (8003244 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	0b5b      	lsrs	r3, r3, #13
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	4903      	ldr	r1, [pc, #12]	; (8003248 <HAL_RCC_GetPCLK2Freq+0x24>)
 800323a:	5ccb      	ldrb	r3, [r1, r3]
 800323c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003240:	4618      	mov	r0, r3
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40023800 	.word	0x40023800
 8003248:	08009210 	.word	0x08009210

0800324c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	220f      	movs	r2, #15
 800325a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800325c:	4b12      	ldr	r3, [pc, #72]	; (80032a8 <HAL_RCC_GetClockConfig+0x5c>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f003 0203 	and.w	r2, r3, #3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003268:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <HAL_RCC_GetClockConfig+0x5c>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003274:	4b0c      	ldr	r3, [pc, #48]	; (80032a8 <HAL_RCC_GetClockConfig+0x5c>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003280:	4b09      	ldr	r3, [pc, #36]	; (80032a8 <HAL_RCC_GetClockConfig+0x5c>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	08db      	lsrs	r3, r3, #3
 8003286:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800328e:	4b07      	ldr	r3, [pc, #28]	; (80032ac <HAL_RCC_GetClockConfig+0x60>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 020f 	and.w	r2, r3, #15
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	601a      	str	r2, [r3, #0]
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	40023800 	.word	0x40023800
 80032ac:	40023c00 	.word	0x40023c00

080032b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e0c5      	b.n	800344e <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a64      	ldr	r2, [pc, #400]	; (8003458 <HAL_TIM_Base_Init+0x1a8>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d045      	beq.n	8003358 <HAL_TIM_Base_Init+0xa8>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d4:	d040      	beq.n	8003358 <HAL_TIM_Base_Init+0xa8>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a60      	ldr	r2, [pc, #384]	; (800345c <HAL_TIM_Base_Init+0x1ac>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d03b      	beq.n	8003358 <HAL_TIM_Base_Init+0xa8>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a5e      	ldr	r2, [pc, #376]	; (8003460 <HAL_TIM_Base_Init+0x1b0>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d036      	beq.n	8003358 <HAL_TIM_Base_Init+0xa8>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a5d      	ldr	r2, [pc, #372]	; (8003464 <HAL_TIM_Base_Init+0x1b4>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d031      	beq.n	8003358 <HAL_TIM_Base_Init+0xa8>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a5b      	ldr	r2, [pc, #364]	; (8003468 <HAL_TIM_Base_Init+0x1b8>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d02c      	beq.n	8003358 <HAL_TIM_Base_Init+0xa8>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a5a      	ldr	r2, [pc, #360]	; (800346c <HAL_TIM_Base_Init+0x1bc>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d027      	beq.n	8003358 <HAL_TIM_Base_Init+0xa8>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a58      	ldr	r2, [pc, #352]	; (8003470 <HAL_TIM_Base_Init+0x1c0>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d022      	beq.n	8003358 <HAL_TIM_Base_Init+0xa8>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a57      	ldr	r2, [pc, #348]	; (8003474 <HAL_TIM_Base_Init+0x1c4>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d01d      	beq.n	8003358 <HAL_TIM_Base_Init+0xa8>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a55      	ldr	r2, [pc, #340]	; (8003478 <HAL_TIM_Base_Init+0x1c8>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d018      	beq.n	8003358 <HAL_TIM_Base_Init+0xa8>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a54      	ldr	r2, [pc, #336]	; (800347c <HAL_TIM_Base_Init+0x1cc>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d013      	beq.n	8003358 <HAL_TIM_Base_Init+0xa8>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a52      	ldr	r2, [pc, #328]	; (8003480 <HAL_TIM_Base_Init+0x1d0>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d00e      	beq.n	8003358 <HAL_TIM_Base_Init+0xa8>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a51      	ldr	r2, [pc, #324]	; (8003484 <HAL_TIM_Base_Init+0x1d4>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d009      	beq.n	8003358 <HAL_TIM_Base_Init+0xa8>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a4f      	ldr	r2, [pc, #316]	; (8003488 <HAL_TIM_Base_Init+0x1d8>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d004      	beq.n	8003358 <HAL_TIM_Base_Init+0xa8>
 800334e:	f240 1113 	movw	r1, #275	; 0x113
 8003352:	484e      	ldr	r0, [pc, #312]	; (800348c <HAL_TIM_Base_Init+0x1dc>)
 8003354:	f7fe f81c 	bl	8001390 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d014      	beq.n	800338a <HAL_TIM_Base_Init+0xda>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	2b10      	cmp	r3, #16
 8003366:	d010      	beq.n	800338a <HAL_TIM_Base_Init+0xda>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	2b20      	cmp	r3, #32
 800336e:	d00c      	beq.n	800338a <HAL_TIM_Base_Init+0xda>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2b40      	cmp	r3, #64	; 0x40
 8003376:	d008      	beq.n	800338a <HAL_TIM_Base_Init+0xda>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	2b60      	cmp	r3, #96	; 0x60
 800337e:	d004      	beq.n	800338a <HAL_TIM_Base_Init+0xda>
 8003380:	f44f 718a 	mov.w	r1, #276	; 0x114
 8003384:	4841      	ldr	r0, [pc, #260]	; (800348c <HAL_TIM_Base_Init+0x1dc>)
 8003386:	f7fe f803 	bl	8001390 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00e      	beq.n	80033b0 <HAL_TIM_Base_Init+0x100>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800339a:	d009      	beq.n	80033b0 <HAL_TIM_Base_Init+0x100>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033a4:	d004      	beq.n	80033b0 <HAL_TIM_Base_Init+0x100>
 80033a6:	f240 1115 	movw	r1, #277	; 0x115
 80033aa:	4838      	ldr	r0, [pc, #224]	; (800348c <HAL_TIM_Base_Init+0x1dc>)
 80033ac:	f7fd fff0 	bl	8001390 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d008      	beq.n	80033ca <HAL_TIM_Base_Init+0x11a>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	2b80      	cmp	r3, #128	; 0x80
 80033be:	d004      	beq.n	80033ca <HAL_TIM_Base_Init+0x11a>
 80033c0:	f44f 718b 	mov.w	r1, #278	; 0x116
 80033c4:	4831      	ldr	r0, [pc, #196]	; (800348c <HAL_TIM_Base_Init+0x1dc>)
 80033c6:	f7fd ffe3 	bl	8001390 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d106      	bne.n	80033e4 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f856 	bl	8003490 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2202      	movs	r2, #2
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3304      	adds	r3, #4
 80033f4:	4619      	mov	r1, r3
 80033f6:	4610      	mov	r0, r2
 80033f8:	f000 fa54 	bl	80038a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	40010000 	.word	0x40010000
 800345c:	40000400 	.word	0x40000400
 8003460:	40000800 	.word	0x40000800
 8003464:	40000c00 	.word	0x40000c00
 8003468:	40001000 	.word	0x40001000
 800346c:	40001400 	.word	0x40001400
 8003470:	40010400 	.word	0x40010400
 8003474:	40014000 	.word	0x40014000
 8003478:	40014400 	.word	0x40014400
 800347c:	40014800 	.word	0x40014800
 8003480:	40001800 	.word	0x40001800
 8003484:	40001c00 	.word	0x40001c00
 8003488:	40002000 	.word	0x40002000
 800348c:	080090a4 	.word	0x080090a4

08003490 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a51      	ldr	r2, [pc, #324]	; (80035f8 <HAL_TIM_Base_Start_IT+0x154>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d045      	beq.n	8003542 <HAL_TIM_Base_Start_IT+0x9e>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034be:	d040      	beq.n	8003542 <HAL_TIM_Base_Start_IT+0x9e>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a4d      	ldr	r2, [pc, #308]	; (80035fc <HAL_TIM_Base_Start_IT+0x158>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d03b      	beq.n	8003542 <HAL_TIM_Base_Start_IT+0x9e>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a4c      	ldr	r2, [pc, #304]	; (8003600 <HAL_TIM_Base_Start_IT+0x15c>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d036      	beq.n	8003542 <HAL_TIM_Base_Start_IT+0x9e>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a4a      	ldr	r2, [pc, #296]	; (8003604 <HAL_TIM_Base_Start_IT+0x160>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d031      	beq.n	8003542 <HAL_TIM_Base_Start_IT+0x9e>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a49      	ldr	r2, [pc, #292]	; (8003608 <HAL_TIM_Base_Start_IT+0x164>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d02c      	beq.n	8003542 <HAL_TIM_Base_Start_IT+0x9e>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a47      	ldr	r2, [pc, #284]	; (800360c <HAL_TIM_Base_Start_IT+0x168>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d027      	beq.n	8003542 <HAL_TIM_Base_Start_IT+0x9e>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a46      	ldr	r2, [pc, #280]	; (8003610 <HAL_TIM_Base_Start_IT+0x16c>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d022      	beq.n	8003542 <HAL_TIM_Base_Start_IT+0x9e>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a44      	ldr	r2, [pc, #272]	; (8003614 <HAL_TIM_Base_Start_IT+0x170>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d01d      	beq.n	8003542 <HAL_TIM_Base_Start_IT+0x9e>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a43      	ldr	r2, [pc, #268]	; (8003618 <HAL_TIM_Base_Start_IT+0x174>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d018      	beq.n	8003542 <HAL_TIM_Base_Start_IT+0x9e>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a41      	ldr	r2, [pc, #260]	; (800361c <HAL_TIM_Base_Start_IT+0x178>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d013      	beq.n	8003542 <HAL_TIM_Base_Start_IT+0x9e>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a40      	ldr	r2, [pc, #256]	; (8003620 <HAL_TIM_Base_Start_IT+0x17c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d00e      	beq.n	8003542 <HAL_TIM_Base_Start_IT+0x9e>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a3e      	ldr	r2, [pc, #248]	; (8003624 <HAL_TIM_Base_Start_IT+0x180>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d009      	beq.n	8003542 <HAL_TIM_Base_Start_IT+0x9e>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a3d      	ldr	r2, [pc, #244]	; (8003628 <HAL_TIM_Base_Start_IT+0x184>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d004      	beq.n	8003542 <HAL_TIM_Base_Start_IT+0x9e>
 8003538:	f240 11cf 	movw	r1, #463	; 0x1cf
 800353c:	483b      	ldr	r0, [pc, #236]	; (800362c <HAL_TIM_Base_Start_IT+0x188>)
 800353e:	f7fd ff27 	bl	8001390 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b01      	cmp	r3, #1
 800354c:	d001      	beq.n	8003552 <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e04e      	b.n	80035f0 <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2202      	movs	r2, #2
 8003556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f042 0201 	orr.w	r2, r2, #1
 8003568:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a22      	ldr	r2, [pc, #136]	; (80035f8 <HAL_TIM_Base_Start_IT+0x154>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d022      	beq.n	80035ba <HAL_TIM_Base_Start_IT+0x116>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800357c:	d01d      	beq.n	80035ba <HAL_TIM_Base_Start_IT+0x116>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a1e      	ldr	r2, [pc, #120]	; (80035fc <HAL_TIM_Base_Start_IT+0x158>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d018      	beq.n	80035ba <HAL_TIM_Base_Start_IT+0x116>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a1c      	ldr	r2, [pc, #112]	; (8003600 <HAL_TIM_Base_Start_IT+0x15c>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d013      	beq.n	80035ba <HAL_TIM_Base_Start_IT+0x116>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a1b      	ldr	r2, [pc, #108]	; (8003604 <HAL_TIM_Base_Start_IT+0x160>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d00e      	beq.n	80035ba <HAL_TIM_Base_Start_IT+0x116>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a1b      	ldr	r2, [pc, #108]	; (8003610 <HAL_TIM_Base_Start_IT+0x16c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d009      	beq.n	80035ba <HAL_TIM_Base_Start_IT+0x116>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a1a      	ldr	r2, [pc, #104]	; (8003614 <HAL_TIM_Base_Start_IT+0x170>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d004      	beq.n	80035ba <HAL_TIM_Base_Start_IT+0x116>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a1a      	ldr	r2, [pc, #104]	; (8003620 <HAL_TIM_Base_Start_IT+0x17c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d111      	bne.n	80035de <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2b06      	cmp	r3, #6
 80035ca:	d010      	beq.n	80035ee <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0201 	orr.w	r2, r2, #1
 80035da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035dc:	e007      	b.n	80035ee <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f042 0201 	orr.w	r2, r2, #1
 80035ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40010000 	.word	0x40010000
 80035fc:	40000400 	.word	0x40000400
 8003600:	40000800 	.word	0x40000800
 8003604:	40000c00 	.word	0x40000c00
 8003608:	40001000 	.word	0x40001000
 800360c:	40001400 	.word	0x40001400
 8003610:	40010400 	.word	0x40010400
 8003614:	40014000 	.word	0x40014000
 8003618:	40014400 	.word	0x40014400
 800361c:	40014800 	.word	0x40014800
 8003620:	40001800 	.word	0x40001800
 8003624:	40001c00 	.word	0x40001c00
 8003628:	40002000 	.word	0x40002000
 800362c:	080090a4 	.word	0x080090a4

08003630 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b02      	cmp	r3, #2
 8003644:	d122      	bne.n	800368c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b02      	cmp	r3, #2
 8003652:	d11b      	bne.n	800368c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f06f 0202 	mvn.w	r2, #2
 800365c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f8f8 	bl	8003868 <HAL_TIM_IC_CaptureCallback>
 8003678:	e005      	b.n	8003686 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f8ea 	bl	8003854 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f8fb 	bl	800387c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	f003 0304 	and.w	r3, r3, #4
 8003696:	2b04      	cmp	r3, #4
 8003698:	d122      	bne.n	80036e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d11b      	bne.n	80036e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f06f 0204 	mvn.w	r2, #4
 80036b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2202      	movs	r2, #2
 80036b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f8ce 	bl	8003868 <HAL_TIM_IC_CaptureCallback>
 80036cc:	e005      	b.n	80036da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f8c0 	bl	8003854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f8d1 	bl	800387c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	f003 0308 	and.w	r3, r3, #8
 80036ea:	2b08      	cmp	r3, #8
 80036ec:	d122      	bne.n	8003734 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f003 0308 	and.w	r3, r3, #8
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	d11b      	bne.n	8003734 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f06f 0208 	mvn.w	r2, #8
 8003704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2204      	movs	r2, #4
 800370a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	f003 0303 	and.w	r3, r3, #3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d003      	beq.n	8003722 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f8a4 	bl	8003868 <HAL_TIM_IC_CaptureCallback>
 8003720:	e005      	b.n	800372e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f896 	bl	8003854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f8a7 	bl	800387c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	f003 0310 	and.w	r3, r3, #16
 800373e:	2b10      	cmp	r3, #16
 8003740:	d122      	bne.n	8003788 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f003 0310 	and.w	r3, r3, #16
 800374c:	2b10      	cmp	r3, #16
 800374e:	d11b      	bne.n	8003788 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f06f 0210 	mvn.w	r2, #16
 8003758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2208      	movs	r2, #8
 800375e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f87a 	bl	8003868 <HAL_TIM_IC_CaptureCallback>
 8003774:	e005      	b.n	8003782 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f86c 	bl	8003854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f87d 	bl	800387c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b01      	cmp	r3, #1
 8003794:	d10e      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d107      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f06f 0201 	mvn.w	r2, #1
 80037ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f846 	bl	8003840 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037be:	2b80      	cmp	r3, #128	; 0x80
 80037c0:	d10e      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037cc:	2b80      	cmp	r3, #128	; 0x80
 80037ce:	d107      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f90c 	bl	80039f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ea:	2b40      	cmp	r3, #64	; 0x40
 80037ec:	d10e      	bne.n	800380c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f8:	2b40      	cmp	r3, #64	; 0x40
 80037fa:	d107      	bne.n	800380c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f842 	bl	8003890 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f003 0320 	and.w	r3, r3, #32
 8003816:	2b20      	cmp	r3, #32
 8003818:	d10e      	bne.n	8003838 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f003 0320 	and.w	r3, r3, #32
 8003824:	2b20      	cmp	r3, #32
 8003826:	d107      	bne.n	8003838 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f06f 0220 	mvn.w	r2, #32
 8003830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f8d6 	bl	80039e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003838:	bf00      	nop
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a40      	ldr	r2, [pc, #256]	; (80039b8 <TIM_Base_SetConfig+0x114>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d013      	beq.n	80038e4 <TIM_Base_SetConfig+0x40>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c2:	d00f      	beq.n	80038e4 <TIM_Base_SetConfig+0x40>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a3d      	ldr	r2, [pc, #244]	; (80039bc <TIM_Base_SetConfig+0x118>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d00b      	beq.n	80038e4 <TIM_Base_SetConfig+0x40>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a3c      	ldr	r2, [pc, #240]	; (80039c0 <TIM_Base_SetConfig+0x11c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d007      	beq.n	80038e4 <TIM_Base_SetConfig+0x40>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a3b      	ldr	r2, [pc, #236]	; (80039c4 <TIM_Base_SetConfig+0x120>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d003      	beq.n	80038e4 <TIM_Base_SetConfig+0x40>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a3a      	ldr	r2, [pc, #232]	; (80039c8 <TIM_Base_SetConfig+0x124>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d108      	bne.n	80038f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a2f      	ldr	r2, [pc, #188]	; (80039b8 <TIM_Base_SetConfig+0x114>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d02b      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003904:	d027      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a2c      	ldr	r2, [pc, #176]	; (80039bc <TIM_Base_SetConfig+0x118>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d023      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a2b      	ldr	r2, [pc, #172]	; (80039c0 <TIM_Base_SetConfig+0x11c>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d01f      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a2a      	ldr	r2, [pc, #168]	; (80039c4 <TIM_Base_SetConfig+0x120>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d01b      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a29      	ldr	r2, [pc, #164]	; (80039c8 <TIM_Base_SetConfig+0x124>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d017      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a28      	ldr	r2, [pc, #160]	; (80039cc <TIM_Base_SetConfig+0x128>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d013      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a27      	ldr	r2, [pc, #156]	; (80039d0 <TIM_Base_SetConfig+0x12c>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d00f      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a26      	ldr	r2, [pc, #152]	; (80039d4 <TIM_Base_SetConfig+0x130>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d00b      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a25      	ldr	r2, [pc, #148]	; (80039d8 <TIM_Base_SetConfig+0x134>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d007      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a24      	ldr	r2, [pc, #144]	; (80039dc <TIM_Base_SetConfig+0x138>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d003      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a23      	ldr	r2, [pc, #140]	; (80039e0 <TIM_Base_SetConfig+0x13c>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d108      	bne.n	8003968 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800395c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	4313      	orrs	r3, r2
 8003966:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	4313      	orrs	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a0a      	ldr	r2, [pc, #40]	; (80039b8 <TIM_Base_SetConfig+0x114>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d003      	beq.n	800399c <TIM_Base_SetConfig+0xf8>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a0c      	ldr	r2, [pc, #48]	; (80039c8 <TIM_Base_SetConfig+0x124>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d103      	bne.n	80039a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	691a      	ldr	r2, [r3, #16]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	615a      	str	r2, [r3, #20]
}
 80039aa:	bf00      	nop
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	40010000 	.word	0x40010000
 80039bc:	40000400 	.word	0x40000400
 80039c0:	40000800 	.word	0x40000800
 80039c4:	40000c00 	.word	0x40000c00
 80039c8:	40010400 	.word	0x40010400
 80039cc:	40014000 	.word	0x40014000
 80039d0:	40014400 	.word	0x40014400
 80039d4:	40014800 	.word	0x40014800
 80039d8:	40001800 	.word	0x40001800
 80039dc:	40001c00 	.word	0x40001c00
 80039e0:	40002000 	.word	0x40002000

080039e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e0be      	b.n	8003b9c <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d031      	beq.n	8003a8a <HAL_UART_Init+0x7e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a5e      	ldr	r2, [pc, #376]	; (8003ba4 <HAL_UART_Init+0x198>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d013      	beq.n	8003a58 <HAL_UART_Init+0x4c>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a5c      	ldr	r2, [pc, #368]	; (8003ba8 <HAL_UART_Init+0x19c>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d00e      	beq.n	8003a58 <HAL_UART_Init+0x4c>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a5b      	ldr	r2, [pc, #364]	; (8003bac <HAL_UART_Init+0x1a0>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d009      	beq.n	8003a58 <HAL_UART_Init+0x4c>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a59      	ldr	r2, [pc, #356]	; (8003bb0 <HAL_UART_Init+0x1a4>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d004      	beq.n	8003a58 <HAL_UART_Init+0x4c>
 8003a4e:	f240 1173 	movw	r1, #371	; 0x173
 8003a52:	4858      	ldr	r0, [pc, #352]	; (8003bb4 <HAL_UART_Init+0x1a8>)
 8003a54:	f7fd fc9c 	bl	8001390 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d041      	beq.n	8003ae4 <HAL_UART_Init+0xd8>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a68:	d03c      	beq.n	8003ae4 <HAL_UART_Init+0xd8>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a72:	d037      	beq.n	8003ae4 <HAL_UART_Init+0xd8>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a7c:	d032      	beq.n	8003ae4 <HAL_UART_Init+0xd8>
 8003a7e:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8003a82:	484c      	ldr	r0, [pc, #304]	; (8003bb4 <HAL_UART_Init+0x1a8>)
 8003a84:	f7fd fc84 	bl	8001390 <assert_failed>
 8003a88:	e02c      	b.n	8003ae4 <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a45      	ldr	r2, [pc, #276]	; (8003ba4 <HAL_UART_Init+0x198>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d027      	beq.n	8003ae4 <HAL_UART_Init+0xd8>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a43      	ldr	r2, [pc, #268]	; (8003ba8 <HAL_UART_Init+0x19c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d022      	beq.n	8003ae4 <HAL_UART_Init+0xd8>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a42      	ldr	r2, [pc, #264]	; (8003bac <HAL_UART_Init+0x1a0>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d01d      	beq.n	8003ae4 <HAL_UART_Init+0xd8>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a42      	ldr	r2, [pc, #264]	; (8003bb8 <HAL_UART_Init+0x1ac>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d018      	beq.n	8003ae4 <HAL_UART_Init+0xd8>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a41      	ldr	r2, [pc, #260]	; (8003bbc <HAL_UART_Init+0x1b0>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d013      	beq.n	8003ae4 <HAL_UART_Init+0xd8>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a3b      	ldr	r2, [pc, #236]	; (8003bb0 <HAL_UART_Init+0x1a4>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00e      	beq.n	8003ae4 <HAL_UART_Init+0xd8>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a3d      	ldr	r2, [pc, #244]	; (8003bc0 <HAL_UART_Init+0x1b4>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d009      	beq.n	8003ae4 <HAL_UART_Init+0xd8>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a3b      	ldr	r2, [pc, #236]	; (8003bc4 <HAL_UART_Init+0x1b8>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d004      	beq.n	8003ae4 <HAL_UART_Init+0xd8>
 8003ada:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8003ade:	4835      	ldr	r0, [pc, #212]	; (8003bb4 <HAL_UART_Init+0x1a8>)
 8003ae0:	f7fd fc56 	bl	8001390 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d009      	beq.n	8003b00 <HAL_UART_Init+0xf4>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af4:	d004      	beq.n	8003b00 <HAL_UART_Init+0xf4>
 8003af6:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8003afa:	482e      	ldr	r0, [pc, #184]	; (8003bb4 <HAL_UART_Init+0x1a8>)
 8003afc:	f7fd fc48 	bl	8001390 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d009      	beq.n	8003b1c <HAL_UART_Init+0x110>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	69db      	ldr	r3, [r3, #28]
 8003b0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b10:	d004      	beq.n	8003b1c <HAL_UART_Init+0x110>
 8003b12:	f240 117b 	movw	r1, #379	; 0x17b
 8003b16:	4827      	ldr	r0, [pc, #156]	; (8003bb4 <HAL_UART_Init+0x1a8>)
 8003b18:	f7fd fc3a 	bl	8001390 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d106      	bne.n	8003b36 <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 f849 	bl	8003bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2224      	movs	r2, #36	; 0x24
 8003b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b4c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f844 	bl	8003bdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	691a      	ldr	r2, [r3, #16]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b62:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695a      	ldr	r2, [r3, #20]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b72:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68da      	ldr	r2, [r3, #12]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b82:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2220      	movs	r2, #32
 8003b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3708      	adds	r7, #8
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40011000 	.word	0x40011000
 8003ba8:	40004400 	.word	0x40004400
 8003bac:	40004800 	.word	0x40004800
 8003bb0:	40011400 	.word	0x40011400
 8003bb4:	080090dc 	.word	0x080090dc
 8003bb8:	40004c00 	.word	0x40004c00
 8003bbc:	40005000 	.word	0x40005000
 8003bc0:	40007800 	.word	0x40007800
 8003bc4:	40007c00 	.word	0x40007c00

08003bc8 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003be0:	b0c0      	sub	sp, #256	; 0x100
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8003be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	4bcf      	ldr	r3, [pc, #828]	; (8003f2c <UART_SetConfig+0x350>)
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d904      	bls.n	8003bfe <UART_SetConfig+0x22>
 8003bf4:	f640 6161 	movw	r1, #3681	; 0xe61
 8003bf8:	48cd      	ldr	r0, [pc, #820]	; (8003f30 <UART_SetConfig+0x354>)
 8003bfa:	f7fd fbc9 	bl	8001390 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8003bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00a      	beq.n	8003c1e <UART_SetConfig+0x42>
 8003c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c12:	d004      	beq.n	8003c1e <UART_SetConfig+0x42>
 8003c14:	f640 6162 	movw	r1, #3682	; 0xe62
 8003c18:	48c5      	ldr	r0, [pc, #788]	; (8003f30 <UART_SetConfig+0x354>)
 8003c1a:	f7fd fbb9 	bl	8001390 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8003c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d010      	beq.n	8003c4a <UART_SetConfig+0x6e>
 8003c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c32:	d00a      	beq.n	8003c4a <UART_SetConfig+0x6e>
 8003c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c3e:	d004      	beq.n	8003c4a <UART_SetConfig+0x6e>
 8003c40:	f640 6163 	movw	r1, #3683	; 0xe63
 8003c44:	48ba      	ldr	r0, [pc, #744]	; (8003f30 <UART_SetConfig+0x354>)
 8003c46:	f7fd fba3 	bl	8001390 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8003c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c4e:	695a      	ldr	r2, [r3, #20]
 8003c50:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8003c54:	4013      	ands	r3, r2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d104      	bne.n	8003c64 <UART_SetConfig+0x88>
 8003c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d104      	bne.n	8003c6e <UART_SetConfig+0x92>
 8003c64:	f640 6164 	movw	r1, #3684	; 0xe64
 8003c68:	48b1      	ldr	r0, [pc, #708]	; (8003f30 <UART_SetConfig+0x354>)
 8003c6a:	f7fd fb91 	bl	8001390 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c7e:	68d9      	ldr	r1, [r3, #12]
 8003c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	ea40 0301 	orr.w	r3, r0, r1
 8003c8a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c90:	689a      	ldr	r2, [r3, #8]
 8003c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca6:	69db      	ldr	r3, [r3, #28]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003cba:	f021 010c 	bic.w	r1, r1, #12
 8003cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cc8:	430b      	orrs	r3, r1
 8003cca:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cdc:	6999      	ldr	r1, [r3, #24]
 8003cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	ea40 0301 	orr.w	r3, r0, r1
 8003ce8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	4b90      	ldr	r3, [pc, #576]	; (8003f34 <UART_SetConfig+0x358>)
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d005      	beq.n	8003d02 <UART_SetConfig+0x126>
 8003cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	4b8e      	ldr	r3, [pc, #568]	; (8003f38 <UART_SetConfig+0x35c>)
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d104      	bne.n	8003d0c <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d02:	f7ff fa8f 	bl	8003224 <HAL_RCC_GetPCLK2Freq>
 8003d06:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003d0a:	e003      	b.n	8003d14 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d0c:	f7ff fa76 	bl	80031fc <HAL_RCC_GetPCLK1Freq>
 8003d10:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d1e:	f040 810f 	bne.w	8003f40 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d26:	2200      	movs	r2, #0
 8003d28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003d2c:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003d30:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003d34:	4622      	mov	r2, r4
 8003d36:	462b      	mov	r3, r5
 8003d38:	1891      	adds	r1, r2, r2
 8003d3a:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d3c:	415b      	adcs	r3, r3
 8003d3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d40:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d44:	4621      	mov	r1, r4
 8003d46:	eb12 0801 	adds.w	r8, r2, r1
 8003d4a:	4629      	mov	r1, r5
 8003d4c:	eb43 0901 	adc.w	r9, r3, r1
 8003d50:	f04f 0200 	mov.w	r2, #0
 8003d54:	f04f 0300 	mov.w	r3, #0
 8003d58:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d5c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d60:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d64:	4690      	mov	r8, r2
 8003d66:	4699      	mov	r9, r3
 8003d68:	4623      	mov	r3, r4
 8003d6a:	eb18 0303 	adds.w	r3, r8, r3
 8003d6e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d72:	462b      	mov	r3, r5
 8003d74:	eb49 0303 	adc.w	r3, r9, r3
 8003d78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d88:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003d8c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d90:	460b      	mov	r3, r1
 8003d92:	18db      	adds	r3, r3, r3
 8003d94:	653b      	str	r3, [r7, #80]	; 0x50
 8003d96:	4613      	mov	r3, r2
 8003d98:	eb42 0303 	adc.w	r3, r2, r3
 8003d9c:	657b      	str	r3, [r7, #84]	; 0x54
 8003d9e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003da2:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003da6:	f7fc fa6d 	bl	8000284 <__aeabi_uldivmod>
 8003daa:	4602      	mov	r2, r0
 8003dac:	460b      	mov	r3, r1
 8003dae:	4b63      	ldr	r3, [pc, #396]	; (8003f3c <UART_SetConfig+0x360>)
 8003db0:	fba3 2302 	umull	r2, r3, r3, r2
 8003db4:	095b      	lsrs	r3, r3, #5
 8003db6:	011c      	lsls	r4, r3, #4
 8003db8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003dc2:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003dc6:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003dca:	4642      	mov	r2, r8
 8003dcc:	464b      	mov	r3, r9
 8003dce:	1891      	adds	r1, r2, r2
 8003dd0:	64b9      	str	r1, [r7, #72]	; 0x48
 8003dd2:	415b      	adcs	r3, r3
 8003dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dd6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003dda:	4641      	mov	r1, r8
 8003ddc:	eb12 0a01 	adds.w	sl, r2, r1
 8003de0:	4649      	mov	r1, r9
 8003de2:	eb43 0b01 	adc.w	fp, r3, r1
 8003de6:	f04f 0200 	mov.w	r2, #0
 8003dea:	f04f 0300 	mov.w	r3, #0
 8003dee:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003df2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003df6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dfa:	4692      	mov	sl, r2
 8003dfc:	469b      	mov	fp, r3
 8003dfe:	4643      	mov	r3, r8
 8003e00:	eb1a 0303 	adds.w	r3, sl, r3
 8003e04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e08:	464b      	mov	r3, r9
 8003e0a:	eb4b 0303 	adc.w	r3, fp, r3
 8003e0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e1e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e22:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e26:	460b      	mov	r3, r1
 8003e28:	18db      	adds	r3, r3, r3
 8003e2a:	643b      	str	r3, [r7, #64]	; 0x40
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	eb42 0303 	adc.w	r3, r2, r3
 8003e32:	647b      	str	r3, [r7, #68]	; 0x44
 8003e34:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e38:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003e3c:	f7fc fa22 	bl	8000284 <__aeabi_uldivmod>
 8003e40:	4602      	mov	r2, r0
 8003e42:	460b      	mov	r3, r1
 8003e44:	4611      	mov	r1, r2
 8003e46:	4b3d      	ldr	r3, [pc, #244]	; (8003f3c <UART_SetConfig+0x360>)
 8003e48:	fba3 2301 	umull	r2, r3, r3, r1
 8003e4c:	095b      	lsrs	r3, r3, #5
 8003e4e:	2264      	movs	r2, #100	; 0x64
 8003e50:	fb02 f303 	mul.w	r3, r2, r3
 8003e54:	1acb      	subs	r3, r1, r3
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003e5c:	4b37      	ldr	r3, [pc, #220]	; (8003f3c <UART_SetConfig+0x360>)
 8003e5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e62:	095b      	lsrs	r3, r3, #5
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e6a:	441c      	add	r4, r3
 8003e6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e70:	2200      	movs	r2, #0
 8003e72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e76:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003e7a:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003e7e:	4642      	mov	r2, r8
 8003e80:	464b      	mov	r3, r9
 8003e82:	1891      	adds	r1, r2, r2
 8003e84:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e86:	415b      	adcs	r3, r3
 8003e88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e8a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e8e:	4641      	mov	r1, r8
 8003e90:	1851      	adds	r1, r2, r1
 8003e92:	6339      	str	r1, [r7, #48]	; 0x30
 8003e94:	4649      	mov	r1, r9
 8003e96:	414b      	adcs	r3, r1
 8003e98:	637b      	str	r3, [r7, #52]	; 0x34
 8003e9a:	f04f 0200 	mov.w	r2, #0
 8003e9e:	f04f 0300 	mov.w	r3, #0
 8003ea2:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ea6:	4659      	mov	r1, fp
 8003ea8:	00cb      	lsls	r3, r1, #3
 8003eaa:	4651      	mov	r1, sl
 8003eac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eb0:	4651      	mov	r1, sl
 8003eb2:	00ca      	lsls	r2, r1, #3
 8003eb4:	4610      	mov	r0, r2
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	4603      	mov	r3, r0
 8003eba:	4642      	mov	r2, r8
 8003ebc:	189b      	adds	r3, r3, r2
 8003ebe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ec2:	464b      	mov	r3, r9
 8003ec4:	460a      	mov	r2, r1
 8003ec6:	eb42 0303 	adc.w	r3, r2, r3
 8003eca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003eda:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ede:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	18db      	adds	r3, r3, r3
 8003ee6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ee8:	4613      	mov	r3, r2
 8003eea:	eb42 0303 	adc.w	r3, r2, r3
 8003eee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ef0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ef4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003ef8:	f7fc f9c4 	bl	8000284 <__aeabi_uldivmod>
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	4b0e      	ldr	r3, [pc, #56]	; (8003f3c <UART_SetConfig+0x360>)
 8003f02:	fba3 1302 	umull	r1, r3, r3, r2
 8003f06:	095b      	lsrs	r3, r3, #5
 8003f08:	2164      	movs	r1, #100	; 0x64
 8003f0a:	fb01 f303 	mul.w	r3, r1, r3
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	3332      	adds	r3, #50	; 0x32
 8003f14:	4a09      	ldr	r2, [pc, #36]	; (8003f3c <UART_SetConfig+0x360>)
 8003f16:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1a:	095b      	lsrs	r3, r3, #5
 8003f1c:	f003 0207 	and.w	r2, r3, #7
 8003f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4422      	add	r2, r4
 8003f28:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f2a:	e108      	b.n	800413e <UART_SetConfig+0x562>
 8003f2c:	00a037a0 	.word	0x00a037a0
 8003f30:	080090dc 	.word	0x080090dc
 8003f34:	40011000 	.word	0x40011000
 8003f38:	40011400 	.word	0x40011400
 8003f3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f44:	2200      	movs	r2, #0
 8003f46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003f4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003f52:	4642      	mov	r2, r8
 8003f54:	464b      	mov	r3, r9
 8003f56:	1891      	adds	r1, r2, r2
 8003f58:	6239      	str	r1, [r7, #32]
 8003f5a:	415b      	adcs	r3, r3
 8003f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f62:	4641      	mov	r1, r8
 8003f64:	1854      	adds	r4, r2, r1
 8003f66:	4649      	mov	r1, r9
 8003f68:	eb43 0501 	adc.w	r5, r3, r1
 8003f6c:	f04f 0200 	mov.w	r2, #0
 8003f70:	f04f 0300 	mov.w	r3, #0
 8003f74:	00eb      	lsls	r3, r5, #3
 8003f76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f7a:	00e2      	lsls	r2, r4, #3
 8003f7c:	4614      	mov	r4, r2
 8003f7e:	461d      	mov	r5, r3
 8003f80:	4643      	mov	r3, r8
 8003f82:	18e3      	adds	r3, r4, r3
 8003f84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f88:	464b      	mov	r3, r9
 8003f8a:	eb45 0303 	adc.w	r3, r5, r3
 8003f8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003fa2:	f04f 0200 	mov.w	r2, #0
 8003fa6:	f04f 0300 	mov.w	r3, #0
 8003faa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003fae:	4629      	mov	r1, r5
 8003fb0:	008b      	lsls	r3, r1, #2
 8003fb2:	4621      	mov	r1, r4
 8003fb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fb8:	4621      	mov	r1, r4
 8003fba:	008a      	lsls	r2, r1, #2
 8003fbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003fc0:	f7fc f960 	bl	8000284 <__aeabi_uldivmod>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	4b60      	ldr	r3, [pc, #384]	; (800414c <UART_SetConfig+0x570>)
 8003fca:	fba3 2302 	umull	r2, r3, r3, r2
 8003fce:	095b      	lsrs	r3, r3, #5
 8003fd0:	011c      	lsls	r4, r3, #4
 8003fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003fdc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003fe0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003fe4:	4642      	mov	r2, r8
 8003fe6:	464b      	mov	r3, r9
 8003fe8:	1891      	adds	r1, r2, r2
 8003fea:	61b9      	str	r1, [r7, #24]
 8003fec:	415b      	adcs	r3, r3
 8003fee:	61fb      	str	r3, [r7, #28]
 8003ff0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ff4:	4641      	mov	r1, r8
 8003ff6:	1851      	adds	r1, r2, r1
 8003ff8:	6139      	str	r1, [r7, #16]
 8003ffa:	4649      	mov	r1, r9
 8003ffc:	414b      	adcs	r3, r1
 8003ffe:	617b      	str	r3, [r7, #20]
 8004000:	f04f 0200 	mov.w	r2, #0
 8004004:	f04f 0300 	mov.w	r3, #0
 8004008:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800400c:	4659      	mov	r1, fp
 800400e:	00cb      	lsls	r3, r1, #3
 8004010:	4651      	mov	r1, sl
 8004012:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004016:	4651      	mov	r1, sl
 8004018:	00ca      	lsls	r2, r1, #3
 800401a:	4610      	mov	r0, r2
 800401c:	4619      	mov	r1, r3
 800401e:	4603      	mov	r3, r0
 8004020:	4642      	mov	r2, r8
 8004022:	189b      	adds	r3, r3, r2
 8004024:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004028:	464b      	mov	r3, r9
 800402a:	460a      	mov	r2, r1
 800402c:	eb42 0303 	adc.w	r3, r2, r3
 8004030:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	67bb      	str	r3, [r7, #120]	; 0x78
 800403e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800404c:	4649      	mov	r1, r9
 800404e:	008b      	lsls	r3, r1, #2
 8004050:	4641      	mov	r1, r8
 8004052:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004056:	4641      	mov	r1, r8
 8004058:	008a      	lsls	r2, r1, #2
 800405a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800405e:	f7fc f911 	bl	8000284 <__aeabi_uldivmod>
 8004062:	4602      	mov	r2, r0
 8004064:	460b      	mov	r3, r1
 8004066:	4b39      	ldr	r3, [pc, #228]	; (800414c <UART_SetConfig+0x570>)
 8004068:	fba3 1302 	umull	r1, r3, r3, r2
 800406c:	095b      	lsrs	r3, r3, #5
 800406e:	2164      	movs	r1, #100	; 0x64
 8004070:	fb01 f303 	mul.w	r3, r1, r3
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	3332      	adds	r3, #50	; 0x32
 800407a:	4a34      	ldr	r2, [pc, #208]	; (800414c <UART_SetConfig+0x570>)
 800407c:	fba2 2303 	umull	r2, r3, r2, r3
 8004080:	095b      	lsrs	r3, r3, #5
 8004082:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004086:	441c      	add	r4, r3
 8004088:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800408c:	2200      	movs	r2, #0
 800408e:	673b      	str	r3, [r7, #112]	; 0x70
 8004090:	677a      	str	r2, [r7, #116]	; 0x74
 8004092:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004096:	4642      	mov	r2, r8
 8004098:	464b      	mov	r3, r9
 800409a:	1891      	adds	r1, r2, r2
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	415b      	adcs	r3, r3
 80040a0:	60fb      	str	r3, [r7, #12]
 80040a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040a6:	4641      	mov	r1, r8
 80040a8:	1851      	adds	r1, r2, r1
 80040aa:	6039      	str	r1, [r7, #0]
 80040ac:	4649      	mov	r1, r9
 80040ae:	414b      	adcs	r3, r1
 80040b0:	607b      	str	r3, [r7, #4]
 80040b2:	f04f 0200 	mov.w	r2, #0
 80040b6:	f04f 0300 	mov.w	r3, #0
 80040ba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040be:	4659      	mov	r1, fp
 80040c0:	00cb      	lsls	r3, r1, #3
 80040c2:	4651      	mov	r1, sl
 80040c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040c8:	4651      	mov	r1, sl
 80040ca:	00ca      	lsls	r2, r1, #3
 80040cc:	4610      	mov	r0, r2
 80040ce:	4619      	mov	r1, r3
 80040d0:	4603      	mov	r3, r0
 80040d2:	4642      	mov	r2, r8
 80040d4:	189b      	adds	r3, r3, r2
 80040d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80040d8:	464b      	mov	r3, r9
 80040da:	460a      	mov	r2, r1
 80040dc:	eb42 0303 	adc.w	r3, r2, r3
 80040e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	663b      	str	r3, [r7, #96]	; 0x60
 80040ec:	667a      	str	r2, [r7, #100]	; 0x64
 80040ee:	f04f 0200 	mov.w	r2, #0
 80040f2:	f04f 0300 	mov.w	r3, #0
 80040f6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80040fa:	4649      	mov	r1, r9
 80040fc:	008b      	lsls	r3, r1, #2
 80040fe:	4641      	mov	r1, r8
 8004100:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004104:	4641      	mov	r1, r8
 8004106:	008a      	lsls	r2, r1, #2
 8004108:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800410c:	f7fc f8ba 	bl	8000284 <__aeabi_uldivmod>
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	4b0d      	ldr	r3, [pc, #52]	; (800414c <UART_SetConfig+0x570>)
 8004116:	fba3 1302 	umull	r1, r3, r3, r2
 800411a:	095b      	lsrs	r3, r3, #5
 800411c:	2164      	movs	r1, #100	; 0x64
 800411e:	fb01 f303 	mul.w	r3, r1, r3
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	3332      	adds	r3, #50	; 0x32
 8004128:	4a08      	ldr	r2, [pc, #32]	; (800414c <UART_SetConfig+0x570>)
 800412a:	fba2 2303 	umull	r2, r3, r2, r3
 800412e:	095b      	lsrs	r3, r3, #5
 8004130:	f003 020f 	and.w	r2, r3, #15
 8004134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4422      	add	r2, r4
 800413c:	609a      	str	r2, [r3, #8]
}
 800413e:	bf00      	nop
 8004140:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004144:	46bd      	mov	sp, r7
 8004146:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800414a:	bf00      	nop
 800414c:	51eb851f 	.word	0x51eb851f

08004150 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f103 0208 	add.w	r2, r3, #8
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f04f 32ff 	mov.w	r2, #4294967295
 8004168:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f103 0208 	add.w	r2, r3, #8
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f103 0208 	add.w	r2, r3, #8
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80041aa:	b480      	push	{r7}
 80041ac:	b085      	sub	sp, #20
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	683a      	ldr	r2, [r7, #0]
 80041d4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	601a      	str	r2, [r3, #0]
}
 80041e6:	bf00      	nop
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80041f2:	b480      	push	{r7}
 80041f4:	b085      	sub	sp, #20
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
 80041fa:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004208:	d103      	bne.n	8004212 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	e00c      	b.n	800422c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	3308      	adds	r3, #8
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	e002      	b.n	8004220 <vListInsert+0x2e>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	429a      	cmp	r2, r3
 800422a:	d2f6      	bcs.n	800421a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	685a      	ldr	r2, [r3, #4]
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	1c5a      	adds	r2, r3, #1
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	601a      	str	r2, [r3, #0]
}
 8004258:	bf00      	nop
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	6892      	ldr	r2, [r2, #8]
 800427a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6852      	ldr	r2, [r2, #4]
 8004284:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	429a      	cmp	r2, r3
 800428e:	d103      	bne.n	8004298 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	1e5a      	subs	r2, r3, #1
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10a      	bne.n	80042e2 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80042cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d0:	f383 8811 	msr	BASEPRI, r3
 80042d4:	f3bf 8f6f 	isb	sy
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80042de:	bf00      	nop
 80042e0:	e7fe      	b.n	80042e0 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80042e2:	f002 fbd1 	bl	8006a88 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ee:	68f9      	ldr	r1, [r7, #12]
 80042f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042f2:	fb01 f303 	mul.w	r3, r1, r3
 80042f6:	441a      	add	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004312:	3b01      	subs	r3, #1
 8004314:	68f9      	ldr	r1, [r7, #12]
 8004316:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004318:	fb01 f303 	mul.w	r3, r1, r3
 800431c:	441a      	add	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	22ff      	movs	r2, #255	; 0xff
 8004326:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	22ff      	movs	r2, #255	; 0xff
 800432e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d114      	bne.n	8004362 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d01a      	beq.n	8004376 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	3310      	adds	r3, #16
 8004344:	4618      	mov	r0, r3
 8004346:	f001 fb23 	bl	8005990 <xTaskRemoveFromEventList>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d012      	beq.n	8004376 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8004350:	4b0c      	ldr	r3, [pc, #48]	; (8004384 <xQueueGenericReset+0xcc>)
 8004352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	f3bf 8f4f 	dsb	sy
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	e009      	b.n	8004376 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	3310      	adds	r3, #16
 8004366:	4618      	mov	r0, r3
 8004368:	f7ff fef2 	bl	8004150 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	3324      	adds	r3, #36	; 0x24
 8004370:	4618      	mov	r0, r3
 8004372:	f7ff feed 	bl	8004150 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8004376:	f002 fbb7 	bl	8006ae8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800437a:	2301      	movs	r3, #1
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	e000ed04 	.word	0xe000ed04

08004388 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004388:	b580      	push	{r7, lr}
 800438a:	b08c      	sub	sp, #48	; 0x30
 800438c:	af02      	add	r7, sp, #8
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	4613      	mov	r3, r2
 8004394:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10a      	bne.n	80043b2 <xQueueGenericCreate+0x2a>
        __asm volatile
 800439c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a0:	f383 8811 	msr	BASEPRI, r3
 80043a4:	f3bf 8f6f 	isb	sy
 80043a8:	f3bf 8f4f 	dsb	sy
 80043ac:	61bb      	str	r3, [r7, #24]
    }
 80043ae:	bf00      	nop
 80043b0:	e7fe      	b.n	80043b0 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	fb02 f303 	mul.w	r3, r2, r3
 80043ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d006      	beq.n	80043d0 <xQueueGenericCreate+0x48>
 80043c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d101      	bne.n	80043d4 <xQueueGenericCreate+0x4c>
 80043d0:	2301      	movs	r3, #1
 80043d2:	e000      	b.n	80043d6 <xQueueGenericCreate+0x4e>
 80043d4:	2300      	movs	r3, #0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10a      	bne.n	80043f0 <xQueueGenericCreate+0x68>
        __asm volatile
 80043da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043de:	f383 8811 	msr	BASEPRI, r3
 80043e2:	f3bf 8f6f 	isb	sy
 80043e6:	f3bf 8f4f 	dsb	sy
 80043ea:	617b      	str	r3, [r7, #20]
    }
 80043ec:	bf00      	nop
 80043ee:	e7fe      	b.n	80043ee <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80043f6:	d90a      	bls.n	800440e <xQueueGenericCreate+0x86>
        __asm volatile
 80043f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fc:	f383 8811 	msr	BASEPRI, r3
 8004400:	f3bf 8f6f 	isb	sy
 8004404:	f3bf 8f4f 	dsb	sy
 8004408:	613b      	str	r3, [r7, #16]
    }
 800440a:	bf00      	nop
 800440c:	e7fe      	b.n	800440c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	3350      	adds	r3, #80	; 0x50
 8004412:	4618      	mov	r0, r3
 8004414:	f002 fc62 	bl	8006cdc <pvPortMalloc>
 8004418:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800441a:	6a3b      	ldr	r3, [r7, #32]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00d      	beq.n	800443c <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004420:	6a3b      	ldr	r3, [r7, #32]
 8004422:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	3350      	adds	r3, #80	; 0x50
 8004428:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800442a:	79fa      	ldrb	r2, [r7, #7]
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	4613      	mov	r3, r2
 8004432:	69fa      	ldr	r2, [r7, #28]
 8004434:	68b9      	ldr	r1, [r7, #8]
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f000 f805 	bl	8004446 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800443c:	6a3b      	ldr	r3, [r7, #32]
    }
 800443e:	4618      	mov	r0, r3
 8004440:	3728      	adds	r7, #40	; 0x28
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b084      	sub	sp, #16
 800444a:	af00      	add	r7, sp, #0
 800444c:	60f8      	str	r0, [r7, #12]
 800444e:	60b9      	str	r1, [r7, #8]
 8004450:	607a      	str	r2, [r7, #4]
 8004452:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d103      	bne.n	8004462 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	601a      	str	r2, [r3, #0]
 8004460:	e002      	b.n	8004468 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004474:	2101      	movs	r1, #1
 8004476:	69b8      	ldr	r0, [r7, #24]
 8004478:	f7ff ff1e 	bl	80042b8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	78fa      	ldrb	r2, [r7, #3]
 8004480:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8004484:	78fb      	ldrb	r3, [r7, #3]
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	68f9      	ldr	r1, [r7, #12]
 800448a:	2073      	movs	r0, #115	; 0x73
 800448c:	f003 fc46 	bl	8007d1c <SEGGER_SYSVIEW_RecordU32x3>
}
 8004490:	bf00      	nop
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b090      	sub	sp, #64	; 0x40
 800449c:	af02      	add	r7, sp, #8
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
 80044a4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80044a6:	2300      	movs	r3, #0
 80044a8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80044ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10a      	bne.n	80044ca <xQueueGenericSend+0x32>
        __asm volatile
 80044b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80044c6:	bf00      	nop
 80044c8:	e7fe      	b.n	80044c8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d103      	bne.n	80044d8 <xQueueGenericSend+0x40>
 80044d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d101      	bne.n	80044dc <xQueueGenericSend+0x44>
 80044d8:	2301      	movs	r3, #1
 80044da:	e000      	b.n	80044de <xQueueGenericSend+0x46>
 80044dc:	2300      	movs	r3, #0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10a      	bne.n	80044f8 <xQueueGenericSend+0x60>
        __asm volatile
 80044e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e6:	f383 8811 	msr	BASEPRI, r3
 80044ea:	f3bf 8f6f 	isb	sy
 80044ee:	f3bf 8f4f 	dsb	sy
 80044f2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80044f4:	bf00      	nop
 80044f6:	e7fe      	b.n	80044f6 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d103      	bne.n	8004506 <xQueueGenericSend+0x6e>
 80044fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004502:	2b01      	cmp	r3, #1
 8004504:	d101      	bne.n	800450a <xQueueGenericSend+0x72>
 8004506:	2301      	movs	r3, #1
 8004508:	e000      	b.n	800450c <xQueueGenericSend+0x74>
 800450a:	2300      	movs	r3, #0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10a      	bne.n	8004526 <xQueueGenericSend+0x8e>
        __asm volatile
 8004510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004514:	f383 8811 	msr	BASEPRI, r3
 8004518:	f3bf 8f6f 	isb	sy
 800451c:	f3bf 8f4f 	dsb	sy
 8004520:	623b      	str	r3, [r7, #32]
    }
 8004522:	bf00      	nop
 8004524:	e7fe      	b.n	8004524 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004526:	f001 fbd3 	bl	8005cd0 <xTaskGetSchedulerState>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d102      	bne.n	8004536 <xQueueGenericSend+0x9e>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <xQueueGenericSend+0xa2>
 8004536:	2301      	movs	r3, #1
 8004538:	e000      	b.n	800453c <xQueueGenericSend+0xa4>
 800453a:	2300      	movs	r3, #0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10a      	bne.n	8004556 <xQueueGenericSend+0xbe>
        __asm volatile
 8004540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004544:	f383 8811 	msr	BASEPRI, r3
 8004548:	f3bf 8f6f 	isb	sy
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	61fb      	str	r3, [r7, #28]
    }
 8004552:	bf00      	nop
 8004554:	e7fe      	b.n	8004554 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004556:	f002 fa97 	bl	8006a88 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800455a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800455e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004562:	429a      	cmp	r2, r3
 8004564:	d302      	bcc.n	800456c <xQueueGenericSend+0xd4>
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2b02      	cmp	r3, #2
 800456a:	d136      	bne.n	80045da <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 800456c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456e:	4618      	mov	r0, r3
 8004570:	f004 f960 	bl	8008834 <SEGGER_SYSVIEW_ShrinkId>
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	460b      	mov	r3, r1
 800457e:	4601      	mov	r1, r0
 8004580:	205a      	movs	r0, #90	; 0x5a
 8004582:	f003 fc41 	bl	8007e08 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	68b9      	ldr	r1, [r7, #8]
 800458a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800458c:	f000 fc7c 	bl	8004e88 <prvCopyDataToQueue>
 8004590:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	2b00      	cmp	r3, #0
 8004598:	d010      	beq.n	80045bc <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800459a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459c:	3324      	adds	r3, #36	; 0x24
 800459e:	4618      	mov	r0, r3
 80045a0:	f001 f9f6 	bl	8005990 <xTaskRemoveFromEventList>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d013      	beq.n	80045d2 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80045aa:	4b4d      	ldr	r3, [pc, #308]	; (80046e0 <xQueueGenericSend+0x248>)
 80045ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	f3bf 8f4f 	dsb	sy
 80045b6:	f3bf 8f6f 	isb	sy
 80045ba:	e00a      	b.n	80045d2 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80045bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d007      	beq.n	80045d2 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80045c2:	4b47      	ldr	r3, [pc, #284]	; (80046e0 <xQueueGenericSend+0x248>)
 80045c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80045d2:	f002 fa89 	bl	8006ae8 <vPortExitCritical>
                return pdPASS;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e07d      	b.n	80046d6 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d110      	bne.n	8004602 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80045e0:	f002 fa82 	bl	8006ae8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80045e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e6:	4618      	mov	r0, r3
 80045e8:	f004 f924 	bl	8008834 <SEGGER_SYSVIEW_ShrinkId>
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	6879      	ldr	r1, [r7, #4]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	460b      	mov	r3, r1
 80045f6:	4601      	mov	r1, r0
 80045f8:	205a      	movs	r0, #90	; 0x5a
 80045fa:	f003 fc05 	bl	8007e08 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80045fe:	2300      	movs	r3, #0
 8004600:	e069      	b.n	80046d6 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004604:	2b00      	cmp	r3, #0
 8004606:	d106      	bne.n	8004616 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004608:	f107 0314 	add.w	r3, r7, #20
 800460c:	4618      	mov	r0, r3
 800460e:	f001 fa25 	bl	8005a5c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004612:	2301      	movs	r3, #1
 8004614:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004616:	f002 fa67 	bl	8006ae8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800461a:	f000 ff71 	bl	8005500 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800461e:	f002 fa33 	bl	8006a88 <vPortEnterCritical>
 8004622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004624:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004628:	b25b      	sxtb	r3, r3
 800462a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462e:	d103      	bne.n	8004638 <xQueueGenericSend+0x1a0>
 8004630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004632:	2200      	movs	r2, #0
 8004634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800463e:	b25b      	sxtb	r3, r3
 8004640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004644:	d103      	bne.n	800464e <xQueueGenericSend+0x1b6>
 8004646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800464e:	f002 fa4b 	bl	8006ae8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004652:	1d3a      	adds	r2, r7, #4
 8004654:	f107 0314 	add.w	r3, r7, #20
 8004658:	4611      	mov	r1, r2
 800465a:	4618      	mov	r0, r3
 800465c:	f001 fa14 	bl	8005a88 <xTaskCheckForTimeOut>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d124      	bne.n	80046b0 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004666:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004668:	f000 fd06 	bl	8005078 <prvIsQueueFull>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d018      	beq.n	80046a4 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004674:	3310      	adds	r3, #16
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	4611      	mov	r1, r2
 800467a:	4618      	mov	r0, r3
 800467c:	f001 f936 	bl	80058ec <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004680:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004682:	f000 fc91 	bl	8004fa8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004686:	f000 ff49 	bl	800551c <xTaskResumeAll>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	f47f af62 	bne.w	8004556 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8004692:	4b13      	ldr	r3, [pc, #76]	; (80046e0 <xQueueGenericSend+0x248>)
 8004694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	f3bf 8f6f 	isb	sy
 80046a2:	e758      	b.n	8004556 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80046a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046a6:	f000 fc7f 	bl	8004fa8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80046aa:	f000 ff37 	bl	800551c <xTaskResumeAll>
 80046ae:	e752      	b.n	8004556 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80046b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046b2:	f000 fc79 	bl	8004fa8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80046b6:	f000 ff31 	bl	800551c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80046ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046bc:	4618      	mov	r0, r3
 80046be:	f004 f8b9 	bl	8008834 <SEGGER_SYSVIEW_ShrinkId>
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	6879      	ldr	r1, [r7, #4]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	460b      	mov	r3, r1
 80046cc:	4601      	mov	r1, r0
 80046ce:	205a      	movs	r0, #90	; 0x5a
 80046d0:	f003 fb9a 	bl	8007e08 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80046d4:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3738      	adds	r7, #56	; 0x38
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	e000ed04 	.word	0xe000ed04

080046e4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b090      	sub	sp, #64	; 0x40
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
 80046f0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80046f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10a      	bne.n	8004712 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80046fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004700:	f383 8811 	msr	BASEPRI, r3
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800470e:	bf00      	nop
 8004710:	e7fe      	b.n	8004710 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d103      	bne.n	8004720 <xQueueGenericSendFromISR+0x3c>
 8004718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <xQueueGenericSendFromISR+0x40>
 8004720:	2301      	movs	r3, #1
 8004722:	e000      	b.n	8004726 <xQueueGenericSendFromISR+0x42>
 8004724:	2300      	movs	r3, #0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10a      	bne.n	8004740 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800472a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472e:	f383 8811 	msr	BASEPRI, r3
 8004732:	f3bf 8f6f 	isb	sy
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800473c:	bf00      	nop
 800473e:	e7fe      	b.n	800473e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	2b02      	cmp	r3, #2
 8004744:	d103      	bne.n	800474e <xQueueGenericSendFromISR+0x6a>
 8004746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800474a:	2b01      	cmp	r3, #1
 800474c:	d101      	bne.n	8004752 <xQueueGenericSendFromISR+0x6e>
 800474e:	2301      	movs	r3, #1
 8004750:	e000      	b.n	8004754 <xQueueGenericSendFromISR+0x70>
 8004752:	2300      	movs	r3, #0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10a      	bne.n	800476e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8004758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475c:	f383 8811 	msr	BASEPRI, r3
 8004760:	f3bf 8f6f 	isb	sy
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	623b      	str	r3, [r7, #32]
    }
 800476a:	bf00      	nop
 800476c:	e7fe      	b.n	800476c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800476e:	f002 fa75 	bl	8006c5c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8004772:	f3ef 8211 	mrs	r2, BASEPRI
 8004776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477a:	f383 8811 	msr	BASEPRI, r3
 800477e:	f3bf 8f6f 	isb	sy
 8004782:	f3bf 8f4f 	dsb	sy
 8004786:	61fa      	str	r2, [r7, #28]
 8004788:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800478a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800478c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800478e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004796:	429a      	cmp	r2, r3
 8004798:	d302      	bcc.n	80047a0 <xQueueGenericSendFromISR+0xbc>
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2b02      	cmp	r3, #2
 800479e:	d148      	bne.n	8004832 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80047a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ae:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80047b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b2:	4618      	mov	r0, r3
 80047b4:	f004 f83e 	bl	8008834 <SEGGER_SYSVIEW_ShrinkId>
 80047b8:	4601      	mov	r1, r0
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	461a      	mov	r2, r3
 80047be:	2060      	movs	r0, #96	; 0x60
 80047c0:	f003 fa52 	bl	8007c68 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	68b9      	ldr	r1, [r7, #8]
 80047c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80047ca:	f000 fb5d 	bl	8004e88 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80047ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80047d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d6:	d112      	bne.n	80047fe <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d025      	beq.n	800482c <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e2:	3324      	adds	r3, #36	; 0x24
 80047e4:	4618      	mov	r0, r3
 80047e6:	f001 f8d3 	bl	8005990 <xTaskRemoveFromEventList>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d01d      	beq.n	800482c <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d01a      	beq.n	800482c <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	e016      	b.n	800482c <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80047fe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004802:	2b7f      	cmp	r3, #127	; 0x7f
 8004804:	d10a      	bne.n	800481c <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8004806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480a:	f383 8811 	msr	BASEPRI, r3
 800480e:	f3bf 8f6f 	isb	sy
 8004812:	f3bf 8f4f 	dsb	sy
 8004816:	617b      	str	r3, [r7, #20]
    }
 8004818:	bf00      	nop
 800481a:	e7fe      	b.n	800481a <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800481c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004820:	3301      	adds	r3, #1
 8004822:	b2db      	uxtb	r3, r3
 8004824:	b25a      	sxtb	r2, r3
 8004826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800482c:	2301      	movs	r3, #1
 800482e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8004830:	e00b      	b.n	800484a <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8004832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004834:	4618      	mov	r0, r3
 8004836:	f003 fffd 	bl	8008834 <SEGGER_SYSVIEW_ShrinkId>
 800483a:	4601      	mov	r1, r0
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	461a      	mov	r2, r3
 8004840:	2060      	movs	r0, #96	; 0x60
 8004842:	f003 fa11 	bl	8007c68 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8004846:	2300      	movs	r3, #0
 8004848:	63fb      	str	r3, [r7, #60]	; 0x3c
 800484a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800484c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004854:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004858:	4618      	mov	r0, r3
 800485a:	3740      	adds	r7, #64	; 0x40
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b08e      	sub	sp, #56	; 0x38
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	633b      	str	r3, [r7, #48]	; 0x30
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 800486e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10a      	bne.n	800488a <xQueueGiveFromISR+0x2a>
        __asm volatile
 8004874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004878:	f383 8811 	msr	BASEPRI, r3
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	623b      	str	r3, [r7, #32]
    }
 8004886:	bf00      	nop
 8004888:	e7fe      	b.n	8004888 <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800488a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00a      	beq.n	80048a8 <xQueueGiveFromISR+0x48>
        __asm volatile
 8004892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004896:	f383 8811 	msr	BASEPRI, r3
 800489a:	f3bf 8f6f 	isb	sy
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	61fb      	str	r3, [r7, #28]
    }
 80048a4:	bf00      	nop
 80048a6:	e7fe      	b.n	80048a6 <xQueueGiveFromISR+0x46>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80048a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d103      	bne.n	80048b8 <xQueueGiveFromISR+0x58>
 80048b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <xQueueGiveFromISR+0x5c>
 80048b8:	2301      	movs	r3, #1
 80048ba:	e000      	b.n	80048be <xQueueGiveFromISR+0x5e>
 80048bc:	2300      	movs	r3, #0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10a      	bne.n	80048d8 <xQueueGiveFromISR+0x78>
        __asm volatile
 80048c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	61bb      	str	r3, [r7, #24]
    }
 80048d4:	bf00      	nop
 80048d6:	e7fe      	b.n	80048d6 <xQueueGiveFromISR+0x76>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80048d8:	f002 f9c0 	bl	8006c5c <vPortValidateInterruptPriority>
        __asm volatile
 80048dc:	f3ef 8211 	mrs	r2, BASEPRI
 80048e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e4:	f383 8811 	msr	BASEPRI, r3
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	617a      	str	r2, [r7, #20]
 80048f2:	613b      	str	r3, [r7, #16]
        return ulOriginalBASEPRI;
 80048f4:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80048f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fc:	62bb      	str	r3, [r7, #40]	; 0x28

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 80048fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004902:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004904:	429a      	cmp	r2, r3
 8004906:	d244      	bcs.n	8004992 <xQueueGiveFromISR+0x132>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800490e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8004912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004914:	4618      	mov	r0, r3
 8004916:	f003 ff8d 	bl	8008834 <SEGGER_SYSVIEW_ShrinkId>
 800491a:	4601      	mov	r1, r0
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	461a      	mov	r2, r3
 8004920:	2060      	movs	r0, #96	; 0x60
 8004922:	f003 f9a1 	bl	8007c68 <SEGGER_SYSVIEW_RecordU32x2>
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004928:	1c5a      	adds	r2, r3, #1
 800492a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492c:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800492e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004936:	d112      	bne.n	800495e <xQueueGiveFromISR+0xfe>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493c:	2b00      	cmp	r3, #0
 800493e:	d025      	beq.n	800498c <xQueueGiveFromISR+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004942:	3324      	adds	r3, #36	; 0x24
 8004944:	4618      	mov	r0, r3
 8004946:	f001 f823 	bl	8005990 <xTaskRemoveFromEventList>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d01d      	beq.n	800498c <xQueueGiveFromISR+0x12c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d01a      	beq.n	800498c <xQueueGiveFromISR+0x12c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2201      	movs	r2, #1
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	e016      	b.n	800498c <xQueueGiveFromISR+0x12c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800495e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004962:	2b7f      	cmp	r3, #127	; 0x7f
 8004964:	d10a      	bne.n	800497c <xQueueGiveFromISR+0x11c>
        __asm volatile
 8004966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496a:	f383 8811 	msr	BASEPRI, r3
 800496e:	f3bf 8f6f 	isb	sy
 8004972:	f3bf 8f4f 	dsb	sy
 8004976:	60fb      	str	r3, [r7, #12]
    }
 8004978:	bf00      	nop
 800497a:	e7fe      	b.n	800497a <xQueueGiveFromISR+0x11a>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800497c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004980:	3301      	adds	r3, #1
 8004982:	b2db      	uxtb	r3, r3
 8004984:	b25a      	sxtb	r2, r3
 8004986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800498c:	2301      	movs	r3, #1
 800498e:	637b      	str	r3, [r7, #52]	; 0x34
 8004990:	e00b      	b.n	80049aa <xQueueGiveFromISR+0x14a>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8004992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004994:	4618      	mov	r0, r3
 8004996:	f003 ff4d 	bl	8008834 <SEGGER_SYSVIEW_ShrinkId>
 800499a:	4601      	mov	r1, r0
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	461a      	mov	r2, r3
 80049a0:	2060      	movs	r0, #96	; 0x60
 80049a2:	f003 f961 	bl	8007c68 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 80049a6:	2300      	movs	r3, #0
 80049a8:	637b      	str	r3, [r7, #52]	; 0x34
 80049aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ac:	60bb      	str	r3, [r7, #8]
        __asm volatile
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	f383 8811 	msr	BASEPRI, r3
    }
 80049b4:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80049b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3738      	adds	r7, #56	; 0x38
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80049c0:	b590      	push	{r4, r7, lr}
 80049c2:	b08f      	sub	sp, #60	; 0x3c
 80049c4:	af02      	add	r7, sp, #8
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80049cc:	2300      	movs	r3, #0
 80049ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80049d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10a      	bne.n	80049f0 <xQueueReceive+0x30>
        __asm volatile
 80049da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049de:	f383 8811 	msr	BASEPRI, r3
 80049e2:	f3bf 8f6f 	isb	sy
 80049e6:	f3bf 8f4f 	dsb	sy
 80049ea:	623b      	str	r3, [r7, #32]
    }
 80049ec:	bf00      	nop
 80049ee:	e7fe      	b.n	80049ee <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d103      	bne.n	80049fe <xQueueReceive+0x3e>
 80049f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <xQueueReceive+0x42>
 80049fe:	2301      	movs	r3, #1
 8004a00:	e000      	b.n	8004a04 <xQueueReceive+0x44>
 8004a02:	2300      	movs	r3, #0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10a      	bne.n	8004a1e <xQueueReceive+0x5e>
        __asm volatile
 8004a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0c:	f383 8811 	msr	BASEPRI, r3
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	61fb      	str	r3, [r7, #28]
    }
 8004a1a:	bf00      	nop
 8004a1c:	e7fe      	b.n	8004a1c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a1e:	f001 f957 	bl	8005cd0 <xTaskGetSchedulerState>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d102      	bne.n	8004a2e <xQueueReceive+0x6e>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <xQueueReceive+0x72>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e000      	b.n	8004a34 <xQueueReceive+0x74>
 8004a32:	2300      	movs	r3, #0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10a      	bne.n	8004a4e <xQueueReceive+0x8e>
        __asm volatile
 8004a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3c:	f383 8811 	msr	BASEPRI, r3
 8004a40:	f3bf 8f6f 	isb	sy
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	61bb      	str	r3, [r7, #24]
    }
 8004a4a:	bf00      	nop
 8004a4c:	e7fe      	b.n	8004a4c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004a4e:	f002 f81b 	bl	8006a88 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a56:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d02f      	beq.n	8004abe <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a5e:	68b9      	ldr	r1, [r7, #8]
 8004a60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a62:	f000 fa7b 	bl	8004f5c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8004a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f003 fee3 	bl	8008834 <SEGGER_SYSVIEW_ShrinkId>
 8004a6e:	4604      	mov	r4, r0
 8004a70:	2000      	movs	r0, #0
 8004a72:	f003 fedf 	bl	8008834 <SEGGER_SYSVIEW_ShrinkId>
 8004a76:	4602      	mov	r2, r0
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2101      	movs	r1, #1
 8004a7c:	9100      	str	r1, [sp, #0]
 8004a7e:	4621      	mov	r1, r4
 8004a80:	205c      	movs	r0, #92	; 0x5c
 8004a82:	f003 f9c1 	bl	8007e08 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	1e5a      	subs	r2, r3, #1
 8004a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00f      	beq.n	8004ab6 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a98:	3310      	adds	r3, #16
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 ff78 	bl	8005990 <xTaskRemoveFromEventList>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d007      	beq.n	8004ab6 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004aa6:	4b4d      	ldr	r3, [pc, #308]	; (8004bdc <xQueueReceive+0x21c>)
 8004aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aac:	601a      	str	r2, [r3, #0]
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004ab6:	f002 f817 	bl	8006ae8 <vPortExitCritical>
                return pdPASS;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e08a      	b.n	8004bd4 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d113      	bne.n	8004aec <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004ac4:	f002 f810 	bl	8006ae8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aca:	4618      	mov	r0, r3
 8004acc:	f003 feb2 	bl	8008834 <SEGGER_SYSVIEW_ShrinkId>
 8004ad0:	4604      	mov	r4, r0
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	f003 feae 	bl	8008834 <SEGGER_SYSVIEW_ShrinkId>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2101      	movs	r1, #1
 8004ade:	9100      	str	r1, [sp, #0]
 8004ae0:	4621      	mov	r1, r4
 8004ae2:	205c      	movs	r0, #92	; 0x5c
 8004ae4:	f003 f990 	bl	8007e08 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	e073      	b.n	8004bd4 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d106      	bne.n	8004b00 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004af2:	f107 0310 	add.w	r3, r7, #16
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 ffb0 	bl	8005a5c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004afc:	2301      	movs	r3, #1
 8004afe:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004b00:	f001 fff2 	bl	8006ae8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004b04:	f000 fcfc 	bl	8005500 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004b08:	f001 ffbe 	bl	8006a88 <vPortEnterCritical>
 8004b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b12:	b25b      	sxtb	r3, r3
 8004b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b18:	d103      	bne.n	8004b22 <xQueueReceive+0x162>
 8004b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b28:	b25b      	sxtb	r3, r3
 8004b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2e:	d103      	bne.n	8004b38 <xQueueReceive+0x178>
 8004b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b38:	f001 ffd6 	bl	8006ae8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b3c:	1d3a      	adds	r2, r7, #4
 8004b3e:	f107 0310 	add.w	r3, r7, #16
 8004b42:	4611      	mov	r1, r2
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 ff9f 	bl	8005a88 <xTaskCheckForTimeOut>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d124      	bne.n	8004b9a <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b52:	f000 fa7b 	bl	800504c <prvIsQueueEmpty>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d018      	beq.n	8004b8e <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5e:	3324      	adds	r3, #36	; 0x24
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	4611      	mov	r1, r2
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 fec1 	bl	80058ec <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004b6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b6c:	f000 fa1c 	bl	8004fa8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004b70:	f000 fcd4 	bl	800551c <xTaskResumeAll>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f47f af69 	bne.w	8004a4e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8004b7c:	4b17      	ldr	r3, [pc, #92]	; (8004bdc <xQueueReceive+0x21c>)
 8004b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b82:	601a      	str	r2, [r3, #0]
 8004b84:	f3bf 8f4f 	dsb	sy
 8004b88:	f3bf 8f6f 	isb	sy
 8004b8c:	e75f      	b.n	8004a4e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004b8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b90:	f000 fa0a 	bl	8004fa8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004b94:	f000 fcc2 	bl	800551c <xTaskResumeAll>
 8004b98:	e759      	b.n	8004a4e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004b9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b9c:	f000 fa04 	bl	8004fa8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004ba0:	f000 fcbc 	bl	800551c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ba4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ba6:	f000 fa51 	bl	800504c <prvIsQueueEmpty>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f43f af4e 	beq.w	8004a4e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f003 fe3d 	bl	8008834 <SEGGER_SYSVIEW_ShrinkId>
 8004bba:	4604      	mov	r4, r0
 8004bbc:	2000      	movs	r0, #0
 8004bbe:	f003 fe39 	bl	8008834 <SEGGER_SYSVIEW_ShrinkId>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	9100      	str	r1, [sp, #0]
 8004bca:	4621      	mov	r1, r4
 8004bcc:	205c      	movs	r0, #92	; 0x5c
 8004bce:	f003 f91b 	bl	8007e08 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8004bd2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3734      	adds	r7, #52	; 0x34
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd90      	pop	{r4, r7, pc}
 8004bdc:	e000ed04 	.word	0xe000ed04

08004be0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8004be0:	b590      	push	{r4, r7, lr}
 8004be2:	b091      	sub	sp, #68	; 0x44
 8004be4:	af02      	add	r7, sp, #8
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004bea:	2300      	movs	r3, #0
 8004bec:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10a      	bne.n	8004c12 <xQueueSemaphoreTake+0x32>
        __asm volatile
 8004bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c00:	f383 8811 	msr	BASEPRI, r3
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	623b      	str	r3, [r7, #32]
    }
 8004c0e:	bf00      	nop
 8004c10:	e7fe      	b.n	8004c10 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8004c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00a      	beq.n	8004c30 <xQueueSemaphoreTake+0x50>
        __asm volatile
 8004c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	61fb      	str	r3, [r7, #28]
    }
 8004c2c:	bf00      	nop
 8004c2e:	e7fe      	b.n	8004c2e <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c30:	f001 f84e 	bl	8005cd0 <xTaskGetSchedulerState>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d102      	bne.n	8004c40 <xQueueSemaphoreTake+0x60>
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <xQueueSemaphoreTake+0x64>
 8004c40:	2301      	movs	r3, #1
 8004c42:	e000      	b.n	8004c46 <xQueueSemaphoreTake+0x66>
 8004c44:	2300      	movs	r3, #0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10a      	bne.n	8004c60 <xQueueSemaphoreTake+0x80>
        __asm volatile
 8004c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4e:	f383 8811 	msr	BASEPRI, r3
 8004c52:	f3bf 8f6f 	isb	sy
 8004c56:	f3bf 8f4f 	dsb	sy
 8004c5a:	61bb      	str	r3, [r7, #24]
    }
 8004c5c:	bf00      	nop
 8004c5e:	e7fe      	b.n	8004c5e <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004c60:	f001 ff12 	bl	8006a88 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c68:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d034      	beq.n	8004cda <xQueueSemaphoreTake+0xfa>
            {
                traceQUEUE_RECEIVE( pxQueue );
 8004c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c72:	4618      	mov	r0, r3
 8004c74:	f003 fdde 	bl	8008834 <SEGGER_SYSVIEW_ShrinkId>
 8004c78:	4604      	mov	r4, r0
 8004c7a:	2000      	movs	r0, #0
 8004c7c:	f003 fdda 	bl	8008834 <SEGGER_SYSVIEW_ShrinkId>
 8004c80:	4602      	mov	r2, r0
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2101      	movs	r1, #1
 8004c86:	9100      	str	r1, [sp, #0]
 8004c88:	4621      	mov	r1, r4
 8004c8a:	205c      	movs	r0, #92	; 0x5c
 8004c8c:	f003 f8bc 	bl	8007e08 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c92:	1e5a      	subs	r2, r3, #1
 8004c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c96:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d104      	bne.n	8004caa <xQueueSemaphoreTake+0xca>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004ca0:	f001 f9c6 	bl	8006030 <pvTaskIncrementMutexHeldCount>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca8:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00f      	beq.n	8004cd2 <xQueueSemaphoreTake+0xf2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb4:	3310      	adds	r3, #16
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 fe6a 	bl	8005990 <xTaskRemoveFromEventList>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d007      	beq.n	8004cd2 <xQueueSemaphoreTake+0xf2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004cc2:	4b64      	ldr	r3, [pc, #400]	; (8004e54 <xQueueSemaphoreTake+0x274>)
 8004cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004cd2:	f001 ff09 	bl	8006ae8 <vPortExitCritical>
                return pdPASS;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e0b7      	b.n	8004e4a <xQueueSemaphoreTake+0x26a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d121      	bne.n	8004d24 <xQueueSemaphoreTake+0x144>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8004ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00a      	beq.n	8004cfc <xQueueSemaphoreTake+0x11c>
        __asm volatile
 8004ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cea:	f383 8811 	msr	BASEPRI, r3
 8004cee:	f3bf 8f6f 	isb	sy
 8004cf2:	f3bf 8f4f 	dsb	sy
 8004cf6:	617b      	str	r3, [r7, #20]
    }
 8004cf8:	bf00      	nop
 8004cfa:	e7fe      	b.n	8004cfa <xQueueSemaphoreTake+0x11a>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8004cfc:	f001 fef4 	bl	8006ae8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d02:	4618      	mov	r0, r3
 8004d04:	f003 fd96 	bl	8008834 <SEGGER_SYSVIEW_ShrinkId>
 8004d08:	4604      	mov	r4, r0
 8004d0a:	2000      	movs	r0, #0
 8004d0c:	f003 fd92 	bl	8008834 <SEGGER_SYSVIEW_ShrinkId>
 8004d10:	4602      	mov	r2, r0
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	2101      	movs	r1, #1
 8004d16:	9100      	str	r1, [sp, #0]
 8004d18:	4621      	mov	r1, r4
 8004d1a:	205c      	movs	r0, #92	; 0x5c
 8004d1c:	f003 f874 	bl	8007e08 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8004d20:	2300      	movs	r3, #0
 8004d22:	e092      	b.n	8004e4a <xQueueSemaphoreTake+0x26a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d106      	bne.n	8004d38 <xQueueSemaphoreTake+0x158>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004d2a:	f107 030c 	add.w	r3, r7, #12
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 fe94 	bl	8005a5c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004d34:	2301      	movs	r3, #1
 8004d36:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004d38:	f001 fed6 	bl	8006ae8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004d3c:	f000 fbe0 	bl	8005500 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004d40:	f001 fea2 	bl	8006a88 <vPortEnterCritical>
 8004d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d4a:	b25b      	sxtb	r3, r3
 8004d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d50:	d103      	bne.n	8004d5a <xQueueSemaphoreTake+0x17a>
 8004d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d60:	b25b      	sxtb	r3, r3
 8004d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d66:	d103      	bne.n	8004d70 <xQueueSemaphoreTake+0x190>
 8004d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d70:	f001 feba 	bl	8006ae8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d74:	463a      	mov	r2, r7
 8004d76:	f107 030c 	add.w	r3, r7, #12
 8004d7a:	4611      	mov	r1, r2
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f000 fe83 	bl	8005a88 <xTaskCheckForTimeOut>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d132      	bne.n	8004dee <xQueueSemaphoreTake+0x20e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d8a:	f000 f95f 	bl	800504c <prvIsQueueEmpty>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d026      	beq.n	8004de2 <xQueueSemaphoreTake+0x202>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d109      	bne.n	8004db0 <xQueueSemaphoreTake+0x1d0>
                        {
                            taskENTER_CRITICAL();
 8004d9c:	f001 fe74 	bl	8006a88 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f000 ffb1 	bl	8005d0c <xTaskPriorityInherit>
 8004daa:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8004dac:	f001 fe9c 	bl	8006ae8 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db2:	3324      	adds	r3, #36	; 0x24
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	4611      	mov	r1, r2
 8004db8:	4618      	mov	r0, r3
 8004dba:	f000 fd97 	bl	80058ec <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004dbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004dc0:	f000 f8f2 	bl	8004fa8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004dc4:	f000 fbaa 	bl	800551c <xTaskResumeAll>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f47f af48 	bne.w	8004c60 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8004dd0:	4b20      	ldr	r3, [pc, #128]	; (8004e54 <xQueueSemaphoreTake+0x274>)
 8004dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	e73e      	b.n	8004c60 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8004de2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004de4:	f000 f8e0 	bl	8004fa8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004de8:	f000 fb98 	bl	800551c <xTaskResumeAll>
 8004dec:	e738      	b.n	8004c60 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8004dee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004df0:	f000 f8da 	bl	8004fa8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004df4:	f000 fb92 	bl	800551c <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004df8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004dfa:	f000 f927 	bl	800504c <prvIsQueueEmpty>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f43f af2d 	beq.w	8004c60 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8004e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00d      	beq.n	8004e28 <xQueueSemaphoreTake+0x248>
                        {
                            taskENTER_CRITICAL();
 8004e0c:	f001 fe3c 	bl	8006a88 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004e10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e12:	f000 f821 	bl	8004e58 <prvGetDisinheritPriorityAfterTimeout>
 8004e16:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f001 f86e 	bl	8005f00 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8004e24:	f001 fe60 	bl	8006ae8 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f003 fd02 	bl	8008834 <SEGGER_SYSVIEW_ShrinkId>
 8004e30:	4604      	mov	r4, r0
 8004e32:	2000      	movs	r0, #0
 8004e34:	f003 fcfe 	bl	8008834 <SEGGER_SYSVIEW_ShrinkId>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2101      	movs	r1, #1
 8004e3e:	9100      	str	r1, [sp, #0]
 8004e40:	4621      	mov	r1, r4
 8004e42:	205c      	movs	r0, #92	; 0x5c
 8004e44:	f002 ffe0 	bl	8007e08 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8004e48:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	373c      	adds	r7, #60	; 0x3c
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd90      	pop	{r4, r7, pc}
 8004e52:	bf00      	nop
 8004e54:	e000ed04 	.word	0xe000ed04

08004e58 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d006      	beq.n	8004e76 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f1c3 0305 	rsb	r3, r3, #5
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	e001      	b.n	8004e7a <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004e76:	2300      	movs	r3, #0
 8004e78:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
    }
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3714      	adds	r7, #20
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8004e94:	2300      	movs	r3, #0
 8004e96:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10d      	bne.n	8004ec2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d14d      	bne.n	8004f4a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 ffa4 	bl	8005e00 <xTaskPriorityDisinherit>
 8004eb8:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	609a      	str	r2, [r3, #8]
 8004ec0:	e043      	b.n	8004f4a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d119      	bne.n	8004efc <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6858      	ldr	r0, [r3, #4]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	68b9      	ldr	r1, [r7, #8]
 8004ed4:	f003 ffd4 	bl	8008e80 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	685a      	ldr	r2, [r3, #4]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee0:	441a      	add	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d32b      	bcc.n	8004f4a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	605a      	str	r2, [r3, #4]
 8004efa:	e026      	b.n	8004f4a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	68d8      	ldr	r0, [r3, #12]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f04:	461a      	mov	r2, r3
 8004f06:	68b9      	ldr	r1, [r7, #8]
 8004f08:	f003 ffba 	bl	8008e80 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	68da      	ldr	r2, [r3, #12]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f14:	425b      	negs	r3, r3
 8004f16:	441a      	add	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	68da      	ldr	r2, [r3, #12]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d207      	bcs.n	8004f38 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	689a      	ldr	r2, [r3, #8]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f30:	425b      	negs	r3, r3
 8004f32:	441a      	add	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d105      	bne.n	8004f4a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d002      	beq.n	8004f4a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	3b01      	subs	r3, #1
 8004f48:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1c5a      	adds	r2, r3, #1
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8004f52:	697b      	ldr	r3, [r7, #20]
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3718      	adds	r7, #24
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d018      	beq.n	8004fa0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68da      	ldr	r2, [r3, #12]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f76:	441a      	add	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68da      	ldr	r2, [r3, #12]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d303      	bcc.n	8004f90 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68d9      	ldr	r1, [r3, #12]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f98:	461a      	mov	r2, r3
 8004f9a:	6838      	ldr	r0, [r7, #0]
 8004f9c:	f003 ff70 	bl	8008e80 <memcpy>
    }
}
 8004fa0:	bf00      	nop
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004fb0:	f001 fd6a 	bl	8006a88 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fba:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fbc:	e011      	b.n	8004fe2 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d012      	beq.n	8004fec <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	3324      	adds	r3, #36	; 0x24
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 fce0 	bl	8005990 <xTaskRemoveFromEventList>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8004fd6:	f000 fdbd 	bl	8005b54 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004fda:	7bfb      	ldrb	r3, [r7, #15]
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	dce9      	bgt.n	8004fbe <prvUnlockQueue+0x16>
 8004fea:	e000      	b.n	8004fee <prvUnlockQueue+0x46>
                        break;
 8004fec:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	22ff      	movs	r2, #255	; 0xff
 8004ff2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8004ff6:	f001 fd77 	bl	8006ae8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004ffa:	f001 fd45 	bl	8006a88 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005004:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005006:	e011      	b.n	800502c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d012      	beq.n	8005036 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3310      	adds	r3, #16
 8005014:	4618      	mov	r0, r3
 8005016:	f000 fcbb 	bl	8005990 <xTaskRemoveFromEventList>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d001      	beq.n	8005024 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8005020:	f000 fd98 	bl	8005b54 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8005024:	7bbb      	ldrb	r3, [r7, #14]
 8005026:	3b01      	subs	r3, #1
 8005028:	b2db      	uxtb	r3, r3
 800502a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800502c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005030:	2b00      	cmp	r3, #0
 8005032:	dce9      	bgt.n	8005008 <prvUnlockQueue+0x60>
 8005034:	e000      	b.n	8005038 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8005036:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	22ff      	movs	r2, #255	; 0xff
 800503c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8005040:	f001 fd52 	bl	8006ae8 <vPortExitCritical>
}
 8005044:	bf00      	nop
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005054:	f001 fd18 	bl	8006a88 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505c:	2b00      	cmp	r3, #0
 800505e:	d102      	bne.n	8005066 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005060:	2301      	movs	r3, #1
 8005062:	60fb      	str	r3, [r7, #12]
 8005064:	e001      	b.n	800506a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8005066:	2300      	movs	r3, #0
 8005068:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800506a:	f001 fd3d 	bl	8006ae8 <vPortExitCritical>

    return xReturn;
 800506e:	68fb      	ldr	r3, [r7, #12]
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005080:	f001 fd02 	bl	8006a88 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800508c:	429a      	cmp	r2, r3
 800508e:	d102      	bne.n	8005096 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8005090:	2301      	movs	r3, #1
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	e001      	b.n	800509a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8005096:	2300      	movs	r3, #0
 8005098:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800509a:	f001 fd25 	bl	8006ae8 <vPortExitCritical>

    return xReturn;
 800509e:	68fb      	ldr	r3, [r7, #12]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050b2:	2300      	movs	r3, #0
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	e01e      	b.n	80050f6 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80050b8:	4a13      	ldr	r2, [pc, #76]	; (8005108 <vQueueAddToRegistry+0x60>)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d115      	bne.n	80050f0 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80050c4:	4910      	ldr	r1, [pc, #64]	; (8005108 <vQueueAddToRegistry+0x60>)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80050ce:	4a0e      	ldr	r2, [pc, #56]	; (8005108 <vQueueAddToRegistry+0x60>)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	4413      	add	r3, r2
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4618      	mov	r0, r3
 80050de:	f003 fba9 	bl	8008834 <SEGGER_SYSVIEW_ShrinkId>
 80050e2:	4601      	mov	r1, r0
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	461a      	mov	r2, r3
 80050e8:	2071      	movs	r0, #113	; 0x71
 80050ea:	f002 fdbd 	bl	8007c68 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 80050ee:	e006      	b.n	80050fe <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	3301      	adds	r3, #1
 80050f4:	60fb      	str	r3, [r7, #12]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2b07      	cmp	r3, #7
 80050fa:	d9dd      	bls.n	80050b8 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80050fc:	bf00      	nop
 80050fe:	bf00      	nop
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	20000144 	.word	0x20000144

0800510c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800511c:	f001 fcb4 	bl	8006a88 <vPortEnterCritical>
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005126:	b25b      	sxtb	r3, r3
 8005128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800512c:	d103      	bne.n	8005136 <vQueueWaitForMessageRestricted+0x2a>
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800513c:	b25b      	sxtb	r3, r3
 800513e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005142:	d103      	bne.n	800514c <vQueueWaitForMessageRestricted+0x40>
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800514c:	f001 fccc 	bl	8006ae8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005154:	2b00      	cmp	r3, #0
 8005156:	d106      	bne.n	8005166 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	3324      	adds	r3, #36	; 0x24
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	68b9      	ldr	r1, [r7, #8]
 8005160:	4618      	mov	r0, r3
 8005162:	f000 fbe7 	bl	8005934 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8005166:	6978      	ldr	r0, [r7, #20]
 8005168:	f7ff ff1e 	bl	8004fa8 <prvUnlockQueue>
    }
 800516c:	bf00      	nop
 800516e:	3718      	adds	r7, #24
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005174:	b580      	push	{r7, lr}
 8005176:	b08c      	sub	sp, #48	; 0x30
 8005178:	af04      	add	r7, sp, #16
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	603b      	str	r3, [r7, #0]
 8005180:	4613      	mov	r3, r2
 8005182:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005184:	88fb      	ldrh	r3, [r7, #6]
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4618      	mov	r0, r3
 800518a:	f001 fda7 	bl	8006cdc <pvPortMalloc>
 800518e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00e      	beq.n	80051b4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005196:	2058      	movs	r0, #88	; 0x58
 8005198:	f001 fda0 	bl	8006cdc <pvPortMalloc>
 800519c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d003      	beq.n	80051ac <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	631a      	str	r2, [r3, #48]	; 0x30
 80051aa:	e005      	b.n	80051b8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80051ac:	6978      	ldr	r0, [r7, #20]
 80051ae:	f001 fe75 	bl	8006e9c <vPortFree>
 80051b2:	e001      	b.n	80051b8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80051b4:	2300      	movs	r3, #0
 80051b6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d013      	beq.n	80051e6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80051be:	88fa      	ldrh	r2, [r7, #6]
 80051c0:	2300      	movs	r3, #0
 80051c2:	9303      	str	r3, [sp, #12]
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	9302      	str	r3, [sp, #8]
 80051c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ca:	9301      	str	r3, [sp, #4]
 80051cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ce:	9300      	str	r3, [sp, #0]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	68b9      	ldr	r1, [r7, #8]
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 f80e 	bl	80051f6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80051da:	69f8      	ldr	r0, [r7, #28]
 80051dc:	f000 f8a2 	bl	8005324 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80051e0:	2301      	movs	r3, #1
 80051e2:	61bb      	str	r3, [r7, #24]
 80051e4:	e002      	b.n	80051ec <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051e6:	f04f 33ff 	mov.w	r3, #4294967295
 80051ea:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80051ec:	69bb      	ldr	r3, [r7, #24]
    }
 80051ee:	4618      	mov	r0, r3
 80051f0:	3720      	adds	r7, #32
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b088      	sub	sp, #32
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	60f8      	str	r0, [r7, #12]
 80051fe:	60b9      	str	r1, [r7, #8]
 8005200:	607a      	str	r2, [r7, #4]
 8005202:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005206:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	461a      	mov	r2, r3
 800520e:	21a5      	movs	r1, #165	; 0xa5
 8005210:	f003 fe44 	bl	8008e9c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005216:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800521e:	3b01      	subs	r3, #1
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	f023 0307 	bic.w	r3, r3, #7
 800522c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	f003 0307 	and.w	r3, r3, #7
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00a      	beq.n	800524e <prvInitialiseNewTask+0x58>
        __asm volatile
 8005238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523c:	f383 8811 	msr	BASEPRI, r3
 8005240:	f3bf 8f6f 	isb	sy
 8005244:	f3bf 8f4f 	dsb	sy
 8005248:	617b      	str	r3, [r7, #20]
    }
 800524a:	bf00      	nop
 800524c:	e7fe      	b.n	800524c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d01f      	beq.n	8005294 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005254:	2300      	movs	r3, #0
 8005256:	61fb      	str	r3, [r7, #28]
 8005258:	e012      	b.n	8005280 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	4413      	add	r3, r2
 8005260:	7819      	ldrb	r1, [r3, #0]
 8005262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	4413      	add	r3, r2
 8005268:	3334      	adds	r3, #52	; 0x34
 800526a:	460a      	mov	r2, r1
 800526c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	4413      	add	r3, r2
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d006      	beq.n	8005288 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	3301      	adds	r3, #1
 800527e:	61fb      	str	r3, [r7, #28]
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	2b09      	cmp	r3, #9
 8005284:	d9e9      	bls.n	800525a <prvInitialiseNewTask+0x64>
 8005286:	e000      	b.n	800528a <prvInitialiseNewTask+0x94>
            {
                break;
 8005288:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800528a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528c:	2200      	movs	r2, #0
 800528e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005292:	e003      	b.n	800529c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005296:	2200      	movs	r2, #0
 8005298:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800529c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529e:	2b04      	cmp	r3, #4
 80052a0:	d901      	bls.n	80052a6 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80052a2:	2304      	movs	r3, #4
 80052a4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80052a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052aa:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80052ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052b0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80052b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b4:	2200      	movs	r2, #0
 80052b6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80052b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ba:	3304      	adds	r3, #4
 80052bc:	4618      	mov	r0, r3
 80052be:	f7fe ff67 	bl	8004190 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80052c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c4:	3318      	adds	r3, #24
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7fe ff62 	bl	8004190 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80052cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052d0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d4:	f1c3 0205 	rsb	r2, r3, #5
 80052d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052da:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80052dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052e0:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80052e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e4:	3350      	adds	r3, #80	; 0x50
 80052e6:	2204      	movs	r2, #4
 80052e8:	2100      	movs	r1, #0
 80052ea:	4618      	mov	r0, r3
 80052ec:	f003 fdd6 	bl	8008e9c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80052f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f2:	3354      	adds	r3, #84	; 0x54
 80052f4:	2201      	movs	r2, #1
 80052f6:	2100      	movs	r1, #0
 80052f8:	4618      	mov	r0, r3
 80052fa:	f003 fdcf 	bl	8008e9c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80052fe:	683a      	ldr	r2, [r7, #0]
 8005300:	68f9      	ldr	r1, [r7, #12]
 8005302:	69b8      	ldr	r0, [r7, #24]
 8005304:	f001 fa8e 	bl	8006824 <pxPortInitialiseStack>
 8005308:	4602      	mov	r2, r0
 800530a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800530e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005310:	2b00      	cmp	r3, #0
 8005312:	d002      	beq.n	800531a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005316:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005318:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800531a:	bf00      	nop
 800531c:	3720      	adds	r7, #32
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
	...

08005324 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005324:	b5b0      	push	{r4, r5, r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af02      	add	r7, sp, #8
 800532a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800532c:	f001 fbac 	bl	8006a88 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8005330:	4b3b      	ldr	r3, [pc, #236]	; (8005420 <prvAddNewTaskToReadyList+0xfc>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	3301      	adds	r3, #1
 8005336:	4a3a      	ldr	r2, [pc, #232]	; (8005420 <prvAddNewTaskToReadyList+0xfc>)
 8005338:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800533a:	4b3a      	ldr	r3, [pc, #232]	; (8005424 <prvAddNewTaskToReadyList+0x100>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d109      	bne.n	8005356 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8005342:	4a38      	ldr	r2, [pc, #224]	; (8005424 <prvAddNewTaskToReadyList+0x100>)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005348:	4b35      	ldr	r3, [pc, #212]	; (8005420 <prvAddNewTaskToReadyList+0xfc>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d110      	bne.n	8005372 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005350:	f000 fc24 	bl	8005b9c <prvInitialiseTaskLists>
 8005354:	e00d      	b.n	8005372 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8005356:	4b34      	ldr	r3, [pc, #208]	; (8005428 <prvAddNewTaskToReadyList+0x104>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d109      	bne.n	8005372 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800535e:	4b31      	ldr	r3, [pc, #196]	; (8005424 <prvAddNewTaskToReadyList+0x100>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005368:	429a      	cmp	r2, r3
 800536a:	d802      	bhi.n	8005372 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800536c:	4a2d      	ldr	r2, [pc, #180]	; (8005424 <prvAddNewTaskToReadyList+0x100>)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8005372:	4b2e      	ldr	r3, [pc, #184]	; (800542c <prvAddNewTaskToReadyList+0x108>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	3301      	adds	r3, #1
 8005378:	4a2c      	ldr	r2, [pc, #176]	; (800542c <prvAddNewTaskToReadyList+0x108>)
 800537a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800537c:	4b2b      	ldr	r3, [pc, #172]	; (800542c <prvAddNewTaskToReadyList+0x108>)
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d016      	beq.n	80053b8 <prvAddNewTaskToReadyList+0x94>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4618      	mov	r0, r3
 800538e:	f003 f92b 	bl	80085e8 <SEGGER_SYSVIEW_OnTaskCreate>
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a2:	461d      	mov	r5, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	461c      	mov	r4, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ae:	1ae3      	subs	r3, r4, r3
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	462b      	mov	r3, r5
 80053b4:	f003 fca6 	bl	8008d04 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f003 f998 	bl	80086f0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c4:	2201      	movs	r2, #1
 80053c6:	409a      	lsls	r2, r3
 80053c8:	4b19      	ldr	r3, [pc, #100]	; (8005430 <prvAddNewTaskToReadyList+0x10c>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	4a18      	ldr	r2, [pc, #96]	; (8005430 <prvAddNewTaskToReadyList+0x10c>)
 80053d0:	6013      	str	r3, [r2, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053d6:	4613      	mov	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4a15      	ldr	r2, [pc, #84]	; (8005434 <prvAddNewTaskToReadyList+0x110>)
 80053e0:	441a      	add	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	3304      	adds	r3, #4
 80053e6:	4619      	mov	r1, r3
 80053e8:	4610      	mov	r0, r2
 80053ea:	f7fe fede 	bl	80041aa <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80053ee:	f001 fb7b 	bl	8006ae8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80053f2:	4b0d      	ldr	r3, [pc, #52]	; (8005428 <prvAddNewTaskToReadyList+0x104>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00e      	beq.n	8005418 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80053fa:	4b0a      	ldr	r3, [pc, #40]	; (8005424 <prvAddNewTaskToReadyList+0x100>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005404:	429a      	cmp	r2, r3
 8005406:	d207      	bcs.n	8005418 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005408:	4b0b      	ldr	r3, [pc, #44]	; (8005438 <prvAddNewTaskToReadyList+0x114>)
 800540a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800540e:	601a      	str	r2, [r3, #0]
 8005410:	f3bf 8f4f 	dsb	sy
 8005414:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005418:	bf00      	nop
 800541a:	3708      	adds	r7, #8
 800541c:	46bd      	mov	sp, r7
 800541e:	bdb0      	pop	{r4, r5, r7, pc}
 8005420:	2000025c 	.word	0x2000025c
 8005424:	20000184 	.word	0x20000184
 8005428:	20000268 	.word	0x20000268
 800542c:	20000278 	.word	0x20000278
 8005430:	20000264 	.word	0x20000264
 8005434:	20000188 	.word	0x20000188
 8005438:	e000ed04 	.word	0xe000ed04

0800543c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8005442:	4b27      	ldr	r3, [pc, #156]	; (80054e0 <vTaskStartScheduler+0xa4>)
 8005444:	9301      	str	r3, [sp, #4]
 8005446:	2300      	movs	r3, #0
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	2300      	movs	r3, #0
 800544c:	2282      	movs	r2, #130	; 0x82
 800544e:	4925      	ldr	r1, [pc, #148]	; (80054e4 <vTaskStartScheduler+0xa8>)
 8005450:	4825      	ldr	r0, [pc, #148]	; (80054e8 <vTaskStartScheduler+0xac>)
 8005452:	f7ff fe8f 	bl	8005174 <xTaskCreate>
 8005456:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d102      	bne.n	8005464 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800545e:	f000 fe73 	bl	8006148 <xTimerCreateTimerTask>
 8005462:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d124      	bne.n	80054b4 <vTaskStartScheduler+0x78>
        __asm volatile
 800546a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546e:	f383 8811 	msr	BASEPRI, r3
 8005472:	f3bf 8f6f 	isb	sy
 8005476:	f3bf 8f4f 	dsb	sy
 800547a:	60bb      	str	r3, [r7, #8]
    }
 800547c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800547e:	4b1b      	ldr	r3, [pc, #108]	; (80054ec <vTaskStartScheduler+0xb0>)
 8005480:	f04f 32ff 	mov.w	r2, #4294967295
 8005484:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005486:	4b1a      	ldr	r3, [pc, #104]	; (80054f0 <vTaskStartScheduler+0xb4>)
 8005488:	2201      	movs	r2, #1
 800548a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800548c:	4b19      	ldr	r3, [pc, #100]	; (80054f4 <vTaskStartScheduler+0xb8>)
 800548e:	2200      	movs	r2, #0
 8005490:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8005492:	4b19      	ldr	r3, [pc, #100]	; (80054f8 <vTaskStartScheduler+0xbc>)
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	4b12      	ldr	r3, [pc, #72]	; (80054e0 <vTaskStartScheduler+0xa4>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	429a      	cmp	r2, r3
 800549c:	d102      	bne.n	80054a4 <vTaskStartScheduler+0x68>
 800549e:	f003 f887 	bl	80085b0 <SEGGER_SYSVIEW_OnIdle>
 80054a2:	e004      	b.n	80054ae <vTaskStartScheduler+0x72>
 80054a4:	4b14      	ldr	r3, [pc, #80]	; (80054f8 <vTaskStartScheduler+0xbc>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4618      	mov	r0, r3
 80054aa:	f003 f8df 	bl	800866c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80054ae:	f001 fa49 	bl	8006944 <xPortStartScheduler>
 80054b2:	e00e      	b.n	80054d2 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ba:	d10a      	bne.n	80054d2 <vTaskStartScheduler+0x96>
        __asm volatile
 80054bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c0:	f383 8811 	msr	BASEPRI, r3
 80054c4:	f3bf 8f6f 	isb	sy
 80054c8:	f3bf 8f4f 	dsb	sy
 80054cc:	607b      	str	r3, [r7, #4]
    }
 80054ce:	bf00      	nop
 80054d0:	e7fe      	b.n	80054d0 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80054d2:	4b0a      	ldr	r3, [pc, #40]	; (80054fc <vTaskStartScheduler+0xc0>)
 80054d4:	681b      	ldr	r3, [r3, #0]
}
 80054d6:	bf00      	nop
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	20000280 	.word	0x20000280
 80054e4:	08009118 	.word	0x08009118
 80054e8:	08005b6d 	.word	0x08005b6d
 80054ec:	2000027c 	.word	0x2000027c
 80054f0:	20000268 	.word	0x20000268
 80054f4:	20000260 	.word	0x20000260
 80054f8:	20000184 	.word	0x20000184
 80054fc:	20000008 	.word	0x20000008

08005500 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005500:	b480      	push	{r7}
 8005502:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005504:	4b04      	ldr	r3, [pc, #16]	; (8005518 <vTaskSuspendAll+0x18>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	3301      	adds	r3, #1
 800550a:	4a03      	ldr	r2, [pc, #12]	; (8005518 <vTaskSuspendAll+0x18>)
 800550c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800550e:	bf00      	nop
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr
 8005518:	20000284 	.word	0x20000284

0800551c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005522:	2300      	movs	r3, #0
 8005524:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005526:	2300      	movs	r3, #0
 8005528:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800552a:	4b43      	ldr	r3, [pc, #268]	; (8005638 <xTaskResumeAll+0x11c>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10a      	bne.n	8005548 <xTaskResumeAll+0x2c>
        __asm volatile
 8005532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005536:	f383 8811 	msr	BASEPRI, r3
 800553a:	f3bf 8f6f 	isb	sy
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	603b      	str	r3, [r7, #0]
    }
 8005544:	bf00      	nop
 8005546:	e7fe      	b.n	8005546 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005548:	f001 fa9e 	bl	8006a88 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800554c:	4b3a      	ldr	r3, [pc, #232]	; (8005638 <xTaskResumeAll+0x11c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	3b01      	subs	r3, #1
 8005552:	4a39      	ldr	r2, [pc, #228]	; (8005638 <xTaskResumeAll+0x11c>)
 8005554:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005556:	4b38      	ldr	r3, [pc, #224]	; (8005638 <xTaskResumeAll+0x11c>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d165      	bne.n	800562a <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800555e:	4b37      	ldr	r3, [pc, #220]	; (800563c <xTaskResumeAll+0x120>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d061      	beq.n	800562a <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005566:	e032      	b.n	80055ce <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005568:	4b35      	ldr	r3, [pc, #212]	; (8005640 <xTaskResumeAll+0x124>)
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	3318      	adds	r3, #24
 8005574:	4618      	mov	r0, r3
 8005576:	f7fe fe75 	bl	8004264 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	3304      	adds	r3, #4
 800557e:	4618      	mov	r0, r3
 8005580:	f7fe fe70 	bl	8004264 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	4618      	mov	r0, r3
 8005588:	f003 f8b2 	bl	80086f0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005590:	2201      	movs	r2, #1
 8005592:	409a      	lsls	r2, r3
 8005594:	4b2b      	ldr	r3, [pc, #172]	; (8005644 <xTaskResumeAll+0x128>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4313      	orrs	r3, r2
 800559a:	4a2a      	ldr	r2, [pc, #168]	; (8005644 <xTaskResumeAll+0x128>)
 800559c:	6013      	str	r3, [r2, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a2:	4613      	mov	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	4413      	add	r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4a27      	ldr	r2, [pc, #156]	; (8005648 <xTaskResumeAll+0x12c>)
 80055ac:	441a      	add	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	3304      	adds	r3, #4
 80055b2:	4619      	mov	r1, r3
 80055b4:	4610      	mov	r0, r2
 80055b6:	f7fe fdf8 	bl	80041aa <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055be:	4b23      	ldr	r3, [pc, #140]	; (800564c <xTaskResumeAll+0x130>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d302      	bcc.n	80055ce <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80055c8:	4b21      	ldr	r3, [pc, #132]	; (8005650 <xTaskResumeAll+0x134>)
 80055ca:	2201      	movs	r2, #1
 80055cc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055ce:	4b1c      	ldr	r3, [pc, #112]	; (8005640 <xTaskResumeAll+0x124>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1c8      	bne.n	8005568 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d001      	beq.n	80055e0 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80055dc:	f000 fb5c 	bl	8005c98 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80055e0:	4b1c      	ldr	r3, [pc, #112]	; (8005654 <xTaskResumeAll+0x138>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d010      	beq.n	800560e <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80055ec:	f000 f858 	bl	80056a0 <xTaskIncrementTick>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d002      	beq.n	80055fc <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80055f6:	4b16      	ldr	r3, [pc, #88]	; (8005650 <xTaskResumeAll+0x134>)
 80055f8:	2201      	movs	r2, #1
 80055fa:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	3b01      	subs	r3, #1
 8005600:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1f1      	bne.n	80055ec <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8005608:	4b12      	ldr	r3, [pc, #72]	; (8005654 <xTaskResumeAll+0x138>)
 800560a:	2200      	movs	r2, #0
 800560c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800560e:	4b10      	ldr	r3, [pc, #64]	; (8005650 <xTaskResumeAll+0x134>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d009      	beq.n	800562a <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8005616:	2301      	movs	r3, #1
 8005618:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800561a:	4b0f      	ldr	r3, [pc, #60]	; (8005658 <xTaskResumeAll+0x13c>)
 800561c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005620:	601a      	str	r2, [r3, #0]
 8005622:	f3bf 8f4f 	dsb	sy
 8005626:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800562a:	f001 fa5d 	bl	8006ae8 <vPortExitCritical>

    return xAlreadyYielded;
 800562e:	68bb      	ldr	r3, [r7, #8]
}
 8005630:	4618      	mov	r0, r3
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	20000284 	.word	0x20000284
 800563c:	2000025c 	.word	0x2000025c
 8005640:	2000021c 	.word	0x2000021c
 8005644:	20000264 	.word	0x20000264
 8005648:	20000188 	.word	0x20000188
 800564c:	20000184 	.word	0x20000184
 8005650:	20000270 	.word	0x20000270
 8005654:	2000026c 	.word	0x2000026c
 8005658:	e000ed04 	.word	0xe000ed04

0800565c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005662:	4b05      	ldr	r3, [pc, #20]	; (8005678 <xTaskGetTickCount+0x1c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005668:	687b      	ldr	r3, [r7, #4]
}
 800566a:	4618      	mov	r0, r3
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	20000260 	.word	0x20000260

0800567c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005682:	f001 faeb 	bl	8006c5c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005686:	2300      	movs	r3, #0
 8005688:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800568a:	4b04      	ldr	r3, [pc, #16]	; (800569c <xTaskGetTickCountFromISR+0x20>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005690:	683b      	ldr	r3, [r7, #0]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	20000260 	.word	0x20000260

080056a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80056a6:	2300      	movs	r3, #0
 80056a8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056aa:	4b50      	ldr	r3, [pc, #320]	; (80057ec <xTaskIncrementTick+0x14c>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f040 8092 	bne.w	80057d8 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056b4:	4b4e      	ldr	r3, [pc, #312]	; (80057f0 <xTaskIncrementTick+0x150>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3301      	adds	r3, #1
 80056ba:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80056bc:	4a4c      	ldr	r2, [pc, #304]	; (80057f0 <xTaskIncrementTick+0x150>)
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d120      	bne.n	800570a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80056c8:	4b4a      	ldr	r3, [pc, #296]	; (80057f4 <xTaskIncrementTick+0x154>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00a      	beq.n	80056e8 <xTaskIncrementTick+0x48>
        __asm volatile
 80056d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d6:	f383 8811 	msr	BASEPRI, r3
 80056da:	f3bf 8f6f 	isb	sy
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	603b      	str	r3, [r7, #0]
    }
 80056e4:	bf00      	nop
 80056e6:	e7fe      	b.n	80056e6 <xTaskIncrementTick+0x46>
 80056e8:	4b42      	ldr	r3, [pc, #264]	; (80057f4 <xTaskIncrementTick+0x154>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	60fb      	str	r3, [r7, #12]
 80056ee:	4b42      	ldr	r3, [pc, #264]	; (80057f8 <xTaskIncrementTick+0x158>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a40      	ldr	r2, [pc, #256]	; (80057f4 <xTaskIncrementTick+0x154>)
 80056f4:	6013      	str	r3, [r2, #0]
 80056f6:	4a40      	ldr	r2, [pc, #256]	; (80057f8 <xTaskIncrementTick+0x158>)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6013      	str	r3, [r2, #0]
 80056fc:	4b3f      	ldr	r3, [pc, #252]	; (80057fc <xTaskIncrementTick+0x15c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3301      	adds	r3, #1
 8005702:	4a3e      	ldr	r2, [pc, #248]	; (80057fc <xTaskIncrementTick+0x15c>)
 8005704:	6013      	str	r3, [r2, #0]
 8005706:	f000 fac7 	bl	8005c98 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800570a:	4b3d      	ldr	r3, [pc, #244]	; (8005800 <xTaskIncrementTick+0x160>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	429a      	cmp	r2, r3
 8005712:	d34c      	bcc.n	80057ae <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005714:	4b37      	ldr	r3, [pc, #220]	; (80057f4 <xTaskIncrementTick+0x154>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d104      	bne.n	8005728 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800571e:	4b38      	ldr	r3, [pc, #224]	; (8005800 <xTaskIncrementTick+0x160>)
 8005720:	f04f 32ff 	mov.w	r2, #4294967295
 8005724:	601a      	str	r2, [r3, #0]
                    break;
 8005726:	e042      	b.n	80057ae <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005728:	4b32      	ldr	r3, [pc, #200]	; (80057f4 <xTaskIncrementTick+0x154>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	429a      	cmp	r2, r3
 800573e:	d203      	bcs.n	8005748 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005740:	4a2f      	ldr	r2, [pc, #188]	; (8005800 <xTaskIncrementTick+0x160>)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005746:	e032      	b.n	80057ae <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	3304      	adds	r3, #4
 800574c:	4618      	mov	r0, r3
 800574e:	f7fe fd89 	bl	8004264 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005756:	2b00      	cmp	r3, #0
 8005758:	d004      	beq.n	8005764 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	3318      	adds	r3, #24
 800575e:	4618      	mov	r0, r3
 8005760:	f7fe fd80 	bl	8004264 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	4618      	mov	r0, r3
 8005768:	f002 ffc2 	bl	80086f0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005770:	2201      	movs	r2, #1
 8005772:	409a      	lsls	r2, r3
 8005774:	4b23      	ldr	r3, [pc, #140]	; (8005804 <xTaskIncrementTick+0x164>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4313      	orrs	r3, r2
 800577a:	4a22      	ldr	r2, [pc, #136]	; (8005804 <xTaskIncrementTick+0x164>)
 800577c:	6013      	str	r3, [r2, #0]
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005782:	4613      	mov	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	4413      	add	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4a1f      	ldr	r2, [pc, #124]	; (8005808 <xTaskIncrementTick+0x168>)
 800578c:	441a      	add	r2, r3
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	3304      	adds	r3, #4
 8005792:	4619      	mov	r1, r3
 8005794:	4610      	mov	r0, r2
 8005796:	f7fe fd08 	bl	80041aa <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800579e:	4b1b      	ldr	r3, [pc, #108]	; (800580c <xTaskIncrementTick+0x16c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d3b5      	bcc.n	8005714 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80057a8:	2301      	movs	r3, #1
 80057aa:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057ac:	e7b2      	b.n	8005714 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80057ae:	4b17      	ldr	r3, [pc, #92]	; (800580c <xTaskIncrementTick+0x16c>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b4:	4914      	ldr	r1, [pc, #80]	; (8005808 <xTaskIncrementTick+0x168>)
 80057b6:	4613      	mov	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4413      	add	r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	440b      	add	r3, r1
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d901      	bls.n	80057ca <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80057c6:	2301      	movs	r3, #1
 80057c8:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80057ca:	4b11      	ldr	r3, [pc, #68]	; (8005810 <xTaskIncrementTick+0x170>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d007      	beq.n	80057e2 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80057d2:	2301      	movs	r3, #1
 80057d4:	617b      	str	r3, [r7, #20]
 80057d6:	e004      	b.n	80057e2 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80057d8:	4b0e      	ldr	r3, [pc, #56]	; (8005814 <xTaskIncrementTick+0x174>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	3301      	adds	r3, #1
 80057de:	4a0d      	ldr	r2, [pc, #52]	; (8005814 <xTaskIncrementTick+0x174>)
 80057e0:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80057e2:	697b      	ldr	r3, [r7, #20]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3718      	adds	r7, #24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	20000284 	.word	0x20000284
 80057f0:	20000260 	.word	0x20000260
 80057f4:	20000214 	.word	0x20000214
 80057f8:	20000218 	.word	0x20000218
 80057fc:	20000274 	.word	0x20000274
 8005800:	2000027c 	.word	0x2000027c
 8005804:	20000264 	.word	0x20000264
 8005808:	20000188 	.word	0x20000188
 800580c:	20000184 	.word	0x20000184
 8005810:	20000270 	.word	0x20000270
 8005814:	2000026c 	.word	0x2000026c

08005818 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800581e:	4b2d      	ldr	r3, [pc, #180]	; (80058d4 <vTaskSwitchContext+0xbc>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d003      	beq.n	800582e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005826:	4b2c      	ldr	r3, [pc, #176]	; (80058d8 <vTaskSwitchContext+0xc0>)
 8005828:	2201      	movs	r2, #1
 800582a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800582c:	e04d      	b.n	80058ca <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800582e:	4b2a      	ldr	r3, [pc, #168]	; (80058d8 <vTaskSwitchContext+0xc0>)
 8005830:	2200      	movs	r2, #0
 8005832:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005834:	4b29      	ldr	r3, [pc, #164]	; (80058dc <vTaskSwitchContext+0xc4>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	fab3 f383 	clz	r3, r3
 8005840:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005842:	7afb      	ldrb	r3, [r7, #11]
 8005844:	f1c3 031f 	rsb	r3, r3, #31
 8005848:	617b      	str	r3, [r7, #20]
 800584a:	4925      	ldr	r1, [pc, #148]	; (80058e0 <vTaskSwitchContext+0xc8>)
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	4613      	mov	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4413      	add	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	440b      	add	r3, r1
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10a      	bne.n	8005874 <vTaskSwitchContext+0x5c>
        __asm volatile
 800585e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005862:	f383 8811 	msr	BASEPRI, r3
 8005866:	f3bf 8f6f 	isb	sy
 800586a:	f3bf 8f4f 	dsb	sy
 800586e:	607b      	str	r3, [r7, #4]
    }
 8005870:	bf00      	nop
 8005872:	e7fe      	b.n	8005872 <vTaskSwitchContext+0x5a>
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	4613      	mov	r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4413      	add	r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4a18      	ldr	r2, [pc, #96]	; (80058e0 <vTaskSwitchContext+0xc8>)
 8005880:	4413      	add	r3, r2
 8005882:	613b      	str	r3, [r7, #16]
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	685a      	ldr	r2, [r3, #4]
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	605a      	str	r2, [r3, #4]
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	3308      	adds	r3, #8
 8005896:	429a      	cmp	r2, r3
 8005898:	d104      	bne.n	80058a4 <vTaskSwitchContext+0x8c>
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	685a      	ldr	r2, [r3, #4]
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	605a      	str	r2, [r3, #4]
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	4a0e      	ldr	r2, [pc, #56]	; (80058e4 <vTaskSwitchContext+0xcc>)
 80058ac:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80058ae:	4b0d      	ldr	r3, [pc, #52]	; (80058e4 <vTaskSwitchContext+0xcc>)
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	4b0d      	ldr	r3, [pc, #52]	; (80058e8 <vTaskSwitchContext+0xd0>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d102      	bne.n	80058c0 <vTaskSwitchContext+0xa8>
 80058ba:	f002 fe79 	bl	80085b0 <SEGGER_SYSVIEW_OnIdle>
}
 80058be:	e004      	b.n	80058ca <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80058c0:	4b08      	ldr	r3, [pc, #32]	; (80058e4 <vTaskSwitchContext+0xcc>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f002 fed1 	bl	800866c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80058ca:	bf00      	nop
 80058cc:	3718      	adds	r7, #24
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	20000284 	.word	0x20000284
 80058d8:	20000270 	.word	0x20000270
 80058dc:	20000264 	.word	0x20000264
 80058e0:	20000188 	.word	0x20000188
 80058e4:	20000184 	.word	0x20000184
 80058e8:	20000280 	.word	0x20000280

080058ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10a      	bne.n	8005912 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80058fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005900:	f383 8811 	msr	BASEPRI, r3
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	60fb      	str	r3, [r7, #12]
    }
 800590e:	bf00      	nop
 8005910:	e7fe      	b.n	8005910 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005912:	4b07      	ldr	r3, [pc, #28]	; (8005930 <vTaskPlaceOnEventList+0x44>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	3318      	adds	r3, #24
 8005918:	4619      	mov	r1, r3
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7fe fc69 	bl	80041f2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005920:	2101      	movs	r1, #1
 8005922:	6838      	ldr	r0, [r7, #0]
 8005924:	f000 fb98 	bl	8006058 <prvAddCurrentTaskToDelayedList>
}
 8005928:	bf00      	nop
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	20000184 	.word	0x20000184

08005934 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10a      	bne.n	800595c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8005946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594a:	f383 8811 	msr	BASEPRI, r3
 800594e:	f3bf 8f6f 	isb	sy
 8005952:	f3bf 8f4f 	dsb	sy
 8005956:	617b      	str	r3, [r7, #20]
    }
 8005958:	bf00      	nop
 800595a:	e7fe      	b.n	800595a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800595c:	4b0b      	ldr	r3, [pc, #44]	; (800598c <vTaskPlaceOnEventListRestricted+0x58>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	3318      	adds	r3, #24
 8005962:	4619      	mov	r1, r3
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f7fe fc20 	bl	80041aa <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d002      	beq.n	8005976 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8005970:	f04f 33ff 	mov.w	r3, #4294967295
 8005974:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8005976:	2024      	movs	r0, #36	; 0x24
 8005978:	f002 f91c 	bl	8007bb4 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800597c:	6879      	ldr	r1, [r7, #4]
 800597e:	68b8      	ldr	r0, [r7, #8]
 8005980:	f000 fb6a 	bl	8006058 <prvAddCurrentTaskToDelayedList>
    }
 8005984:	bf00      	nop
 8005986:	3718      	adds	r7, #24
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	20000184 	.word	0x20000184

08005990 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10a      	bne.n	80059bc <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80059a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	60fb      	str	r3, [r7, #12]
    }
 80059b8:	bf00      	nop
 80059ba:	e7fe      	b.n	80059ba <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	3318      	adds	r3, #24
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7fe fc4f 	bl	8004264 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059c6:	4b1f      	ldr	r3, [pc, #124]	; (8005a44 <xTaskRemoveFromEventList+0xb4>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d120      	bne.n	8005a10 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	3304      	adds	r3, #4
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fe fc46 	bl	8004264 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	4618      	mov	r0, r3
 80059dc:	f002 fe88 	bl	80086f0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e4:	2201      	movs	r2, #1
 80059e6:	409a      	lsls	r2, r3
 80059e8:	4b17      	ldr	r3, [pc, #92]	; (8005a48 <xTaskRemoveFromEventList+0xb8>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	4a16      	ldr	r2, [pc, #88]	; (8005a48 <xTaskRemoveFromEventList+0xb8>)
 80059f0:	6013      	str	r3, [r2, #0]
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f6:	4613      	mov	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	4a13      	ldr	r2, [pc, #76]	; (8005a4c <xTaskRemoveFromEventList+0xbc>)
 8005a00:	441a      	add	r2, r3
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	3304      	adds	r3, #4
 8005a06:	4619      	mov	r1, r3
 8005a08:	4610      	mov	r0, r2
 8005a0a:	f7fe fbce 	bl	80041aa <vListInsertEnd>
 8005a0e:	e005      	b.n	8005a1c <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	3318      	adds	r3, #24
 8005a14:	4619      	mov	r1, r3
 8005a16:	480e      	ldr	r0, [pc, #56]	; (8005a50 <xTaskRemoveFromEventList+0xc0>)
 8005a18:	f7fe fbc7 	bl	80041aa <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a20:	4b0c      	ldr	r3, [pc, #48]	; (8005a54 <xTaskRemoveFromEventList+0xc4>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d905      	bls.n	8005a36 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005a2e:	4b0a      	ldr	r3, [pc, #40]	; (8005a58 <xTaskRemoveFromEventList+0xc8>)
 8005a30:	2201      	movs	r2, #1
 8005a32:	601a      	str	r2, [r3, #0]
 8005a34:	e001      	b.n	8005a3a <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8005a36:	2300      	movs	r3, #0
 8005a38:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005a3a:	697b      	ldr	r3, [r7, #20]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3718      	adds	r7, #24
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	20000284 	.word	0x20000284
 8005a48:	20000264 	.word	0x20000264
 8005a4c:	20000188 	.word	0x20000188
 8005a50:	2000021c 	.word	0x2000021c
 8005a54:	20000184 	.word	0x20000184
 8005a58:	20000270 	.word	0x20000270

08005a5c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a64:	4b06      	ldr	r3, [pc, #24]	; (8005a80 <vTaskInternalSetTimeOutState+0x24>)
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005a6c:	4b05      	ldr	r3, [pc, #20]	; (8005a84 <vTaskInternalSetTimeOutState+0x28>)
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	605a      	str	r2, [r3, #4]
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	20000274 	.word	0x20000274
 8005a84:	20000260 	.word	0x20000260

08005a88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b088      	sub	sp, #32
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10a      	bne.n	8005aae <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8005a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9c:	f383 8811 	msr	BASEPRI, r3
 8005aa0:	f3bf 8f6f 	isb	sy
 8005aa4:	f3bf 8f4f 	dsb	sy
 8005aa8:	613b      	str	r3, [r7, #16]
    }
 8005aaa:	bf00      	nop
 8005aac:	e7fe      	b.n	8005aac <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10a      	bne.n	8005aca <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8005ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab8:	f383 8811 	msr	BASEPRI, r3
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	60fb      	str	r3, [r7, #12]
    }
 8005ac6:	bf00      	nop
 8005ac8:	e7fe      	b.n	8005ac8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8005aca:	f000 ffdd 	bl	8006a88 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005ace:	4b1f      	ldr	r3, [pc, #124]	; (8005b4c <xTaskCheckForTimeOut+0xc4>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae6:	d102      	bne.n	8005aee <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	61fb      	str	r3, [r7, #28]
 8005aec:	e026      	b.n	8005b3c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	4b17      	ldr	r3, [pc, #92]	; (8005b50 <xTaskCheckForTimeOut+0xc8>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d00a      	beq.n	8005b10 <xTaskCheckForTimeOut+0x88>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	69ba      	ldr	r2, [r7, #24]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d305      	bcc.n	8005b10 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005b04:	2301      	movs	r3, #1
 8005b06:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	601a      	str	r2, [r3, #0]
 8005b0e:	e015      	b.n	8005b3c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	697a      	ldr	r2, [r7, #20]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d20b      	bcs.n	8005b32 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	1ad2      	subs	r2, r2, r3
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7ff ff98 	bl	8005a5c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	61fb      	str	r3, [r7, #28]
 8005b30:	e004      	b.n	8005b3c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	2200      	movs	r2, #0
 8005b36:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005b3c:	f000 ffd4 	bl	8006ae8 <vPortExitCritical>

    return xReturn;
 8005b40:	69fb      	ldr	r3, [r7, #28]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3720      	adds	r7, #32
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	20000260 	.word	0x20000260
 8005b50:	20000274 	.word	0x20000274

08005b54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b54:	b480      	push	{r7}
 8005b56:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005b58:	4b03      	ldr	r3, [pc, #12]	; (8005b68 <vTaskMissedYield+0x14>)
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	601a      	str	r2, [r3, #0]
}
 8005b5e:	bf00      	nop
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr
 8005b68:	20000270 	.word	0x20000270

08005b6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005b74:	f000 f852 	bl	8005c1c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b78:	4b06      	ldr	r3, [pc, #24]	; (8005b94 <prvIdleTask+0x28>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d9f9      	bls.n	8005b74 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8005b80:	4b05      	ldr	r3, [pc, #20]	; (8005b98 <prvIdleTask+0x2c>)
 8005b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b86:	601a      	str	r2, [r3, #0]
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005b90:	e7f0      	b.n	8005b74 <prvIdleTask+0x8>
 8005b92:	bf00      	nop
 8005b94:	20000188 	.word	0x20000188
 8005b98:	e000ed04 	.word	0xe000ed04

08005b9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	607b      	str	r3, [r7, #4]
 8005ba6:	e00c      	b.n	8005bc2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	4613      	mov	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4413      	add	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4a12      	ldr	r2, [pc, #72]	; (8005bfc <prvInitialiseTaskLists+0x60>)
 8005bb4:	4413      	add	r3, r2
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7fe faca 	bl	8004150 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	607b      	str	r3, [r7, #4]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2b04      	cmp	r3, #4
 8005bc6:	d9ef      	bls.n	8005ba8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005bc8:	480d      	ldr	r0, [pc, #52]	; (8005c00 <prvInitialiseTaskLists+0x64>)
 8005bca:	f7fe fac1 	bl	8004150 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005bce:	480d      	ldr	r0, [pc, #52]	; (8005c04 <prvInitialiseTaskLists+0x68>)
 8005bd0:	f7fe fabe 	bl	8004150 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005bd4:	480c      	ldr	r0, [pc, #48]	; (8005c08 <prvInitialiseTaskLists+0x6c>)
 8005bd6:	f7fe fabb 	bl	8004150 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8005bda:	480c      	ldr	r0, [pc, #48]	; (8005c0c <prvInitialiseTaskLists+0x70>)
 8005bdc:	f7fe fab8 	bl	8004150 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8005be0:	480b      	ldr	r0, [pc, #44]	; (8005c10 <prvInitialiseTaskLists+0x74>)
 8005be2:	f7fe fab5 	bl	8004150 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005be6:	4b0b      	ldr	r3, [pc, #44]	; (8005c14 <prvInitialiseTaskLists+0x78>)
 8005be8:	4a05      	ldr	r2, [pc, #20]	; (8005c00 <prvInitialiseTaskLists+0x64>)
 8005bea:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005bec:	4b0a      	ldr	r3, [pc, #40]	; (8005c18 <prvInitialiseTaskLists+0x7c>)
 8005bee:	4a05      	ldr	r2, [pc, #20]	; (8005c04 <prvInitialiseTaskLists+0x68>)
 8005bf0:	601a      	str	r2, [r3, #0]
}
 8005bf2:	bf00      	nop
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	20000188 	.word	0x20000188
 8005c00:	200001ec 	.word	0x200001ec
 8005c04:	20000200 	.word	0x20000200
 8005c08:	2000021c 	.word	0x2000021c
 8005c0c:	20000230 	.word	0x20000230
 8005c10:	20000248 	.word	0x20000248
 8005c14:	20000214 	.word	0x20000214
 8005c18:	20000218 	.word	0x20000218

08005c1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c22:	e019      	b.n	8005c58 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8005c24:	f000 ff30 	bl	8006a88 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c28:	4b10      	ldr	r3, [pc, #64]	; (8005c6c <prvCheckTasksWaitingTermination+0x50>)
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	3304      	adds	r3, #4
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7fe fb15 	bl	8004264 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8005c3a:	4b0d      	ldr	r3, [pc, #52]	; (8005c70 <prvCheckTasksWaitingTermination+0x54>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	4a0b      	ldr	r2, [pc, #44]	; (8005c70 <prvCheckTasksWaitingTermination+0x54>)
 8005c42:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8005c44:	4b0b      	ldr	r3, [pc, #44]	; (8005c74 <prvCheckTasksWaitingTermination+0x58>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	4a0a      	ldr	r2, [pc, #40]	; (8005c74 <prvCheckTasksWaitingTermination+0x58>)
 8005c4c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8005c4e:	f000 ff4b 	bl	8006ae8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f810 	bl	8005c78 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c58:	4b06      	ldr	r3, [pc, #24]	; (8005c74 <prvCheckTasksWaitingTermination+0x58>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1e1      	bne.n	8005c24 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8005c60:	bf00      	nop
 8005c62:	bf00      	nop
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	20000230 	.word	0x20000230
 8005c70:	2000025c 	.word	0x2000025c
 8005c74:	20000244 	.word	0x20000244

08005c78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c84:	4618      	mov	r0, r3
 8005c86:	f001 f909 	bl	8006e9c <vPortFree>
                vPortFree( pxTCB );
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f001 f906 	bl	8006e9c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005c90:	bf00      	nop
 8005c92:	3708      	adds	r7, #8
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c98:	b480      	push	{r7}
 8005c9a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c9c:	4b0a      	ldr	r3, [pc, #40]	; (8005cc8 <prvResetNextTaskUnblockTime+0x30>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d104      	bne.n	8005cb0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005ca6:	4b09      	ldr	r3, [pc, #36]	; (8005ccc <prvResetNextTaskUnblockTime+0x34>)
 8005ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8005cac:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005cae:	e005      	b.n	8005cbc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005cb0:	4b05      	ldr	r3, [pc, #20]	; (8005cc8 <prvResetNextTaskUnblockTime+0x30>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a04      	ldr	r2, [pc, #16]	; (8005ccc <prvResetNextTaskUnblockTime+0x34>)
 8005cba:	6013      	str	r3, [r2, #0]
}
 8005cbc:	bf00      	nop
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	20000214 	.word	0x20000214
 8005ccc:	2000027c 	.word	0x2000027c

08005cd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005cd6:	4b0b      	ldr	r3, [pc, #44]	; (8005d04 <xTaskGetSchedulerState+0x34>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d102      	bne.n	8005ce4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	607b      	str	r3, [r7, #4]
 8005ce2:	e008      	b.n	8005cf6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ce4:	4b08      	ldr	r3, [pc, #32]	; (8005d08 <xTaskGetSchedulerState+0x38>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d102      	bne.n	8005cf2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005cec:	2302      	movs	r3, #2
 8005cee:	607b      	str	r3, [r7, #4]
 8005cf0:	e001      	b.n	8005cf6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005cf6:	687b      	ldr	r3, [r7, #4]
    }
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr
 8005d04:	20000268 	.word	0x20000268
 8005d08:	20000284 	.word	0x20000284

08005d0c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d063      	beq.n	8005dea <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d26:	4b33      	ldr	r3, [pc, #204]	; (8005df4 <xTaskPriorityInherit+0xe8>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d253      	bcs.n	8005dd8 <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	db06      	blt.n	8005d46 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d38:	4b2e      	ldr	r3, [pc, #184]	; (8005df4 <xTaskPriorityInherit+0xe8>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3e:	f1c3 0205 	rsb	r2, r3, #5
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	6959      	ldr	r1, [r3, #20]
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d4e:	4613      	mov	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4413      	add	r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4a28      	ldr	r2, [pc, #160]	; (8005df8 <xTaskPriorityInherit+0xec>)
 8005d58:	4413      	add	r3, r2
 8005d5a:	4299      	cmp	r1, r3
 8005d5c:	d12f      	bne.n	8005dbe <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	3304      	adds	r3, #4
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7fe fa7e 	bl	8004264 <uxListRemove>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10a      	bne.n	8005d84 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d72:	2201      	movs	r2, #1
 8005d74:	fa02 f303 	lsl.w	r3, r2, r3
 8005d78:	43da      	mvns	r2, r3
 8005d7a:	4b20      	ldr	r3, [pc, #128]	; (8005dfc <xTaskPriorityInherit+0xf0>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4013      	ands	r3, r2
 8005d80:	4a1e      	ldr	r2, [pc, #120]	; (8005dfc <xTaskPriorityInherit+0xf0>)
 8005d82:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d84:	4b1b      	ldr	r3, [pc, #108]	; (8005df4 <xTaskPriorityInherit+0xe8>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d92:	2201      	movs	r2, #1
 8005d94:	409a      	lsls	r2, r3
 8005d96:	4b19      	ldr	r3, [pc, #100]	; (8005dfc <xTaskPriorityInherit+0xf0>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	4a17      	ldr	r2, [pc, #92]	; (8005dfc <xTaskPriorityInherit+0xf0>)
 8005d9e:	6013      	str	r3, [r2, #0]
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da4:	4613      	mov	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4a12      	ldr	r2, [pc, #72]	; (8005df8 <xTaskPriorityInherit+0xec>)
 8005dae:	441a      	add	r2, r3
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	3304      	adds	r3, #4
 8005db4:	4619      	mov	r1, r3
 8005db6:	4610      	mov	r0, r2
 8005db8:	f7fe f9f7 	bl	80041aa <vListInsertEnd>
 8005dbc:	e004      	b.n	8005dc8 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005dbe:	4b0d      	ldr	r3, [pc, #52]	; (8005df4 <xTaskPriorityInherit+0xe8>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4619      	mov	r1, r3
 8005dcc:	2049      	movs	r0, #73	; 0x49
 8005dce:	f001 ff0f 	bl	8007bf0 <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	60fb      	str	r3, [r7, #12]
 8005dd6:	e008      	b.n	8005dea <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ddc:	4b05      	ldr	r3, [pc, #20]	; (8005df4 <xTaskPriorityInherit+0xe8>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d201      	bcs.n	8005dea <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8005de6:	2301      	movs	r3, #1
 8005de8:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005dea:	68fb      	ldr	r3, [r7, #12]
    }
 8005dec:	4618      	mov	r0, r3
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	20000184 	.word	0x20000184
 8005df8:	20000188 	.word	0x20000188
 8005dfc:	20000264 	.word	0x20000264

08005e00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d068      	beq.n	8005ee8 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005e16:	4b37      	ldr	r3, [pc, #220]	; (8005ef4 <xTaskPriorityDisinherit+0xf4>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d00a      	beq.n	8005e36 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8005e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e24:	f383 8811 	msr	BASEPRI, r3
 8005e28:	f3bf 8f6f 	isb	sy
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	60fb      	str	r3, [r7, #12]
    }
 8005e32:	bf00      	nop
 8005e34:	e7fe      	b.n	8005e34 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10a      	bne.n	8005e54 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8005e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e42:	f383 8811 	msr	BASEPRI, r3
 8005e46:	f3bf 8f6f 	isb	sy
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	60bb      	str	r3, [r7, #8]
    }
 8005e50:	bf00      	nop
 8005e52:	e7fe      	b.n	8005e52 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e58:	1e5a      	subs	r2, r3, #1
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d03e      	beq.n	8005ee8 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d13a      	bne.n	8005ee8 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	3304      	adds	r3, #4
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7fe f9f4 	bl	8004264 <uxListRemove>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d10a      	bne.n	8005e98 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e86:	2201      	movs	r2, #1
 8005e88:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8c:	43da      	mvns	r2, r3
 8005e8e:	4b1a      	ldr	r3, [pc, #104]	; (8005ef8 <xTaskPriorityDisinherit+0xf8>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4013      	ands	r3, r2
 8005e94:	4a18      	ldr	r2, [pc, #96]	; (8005ef8 <xTaskPriorityDisinherit+0xf8>)
 8005e96:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	204a      	movs	r0, #74	; 0x4a
 8005e9e:	f001 fea7 	bl	8007bf0 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eae:	f1c3 0205 	rsb	r2, r3, #5
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eba:	2201      	movs	r2, #1
 8005ebc:	409a      	lsls	r2, r3
 8005ebe:	4b0e      	ldr	r3, [pc, #56]	; (8005ef8 <xTaskPriorityDisinherit+0xf8>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	4a0c      	ldr	r2, [pc, #48]	; (8005ef8 <xTaskPriorityDisinherit+0xf8>)
 8005ec6:	6013      	str	r3, [r2, #0]
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ecc:	4613      	mov	r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	4413      	add	r3, r2
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4a09      	ldr	r2, [pc, #36]	; (8005efc <xTaskPriorityDisinherit+0xfc>)
 8005ed6:	441a      	add	r2, r3
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	3304      	adds	r3, #4
 8005edc:	4619      	mov	r1, r3
 8005ede:	4610      	mov	r0, r2
 8005ee0:	f7fe f963 	bl	80041aa <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005ee8:	697b      	ldr	r3, [r7, #20]
    }
 8005eea:	4618      	mov	r0, r3
 8005eec:	3718      	adds	r7, #24
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	20000184 	.word	0x20000184
 8005ef8:	20000264 	.word	0x20000264
 8005efc:	20000188 	.word	0x20000188

08005f00 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b088      	sub	sp, #32
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f000 8081 	beq.w	800601c <vTaskPriorityDisinheritAfterTimeout+0x11c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10a      	bne.n	8005f38 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 8005f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f26:	f383 8811 	msr	BASEPRI, r3
 8005f2a:	f3bf 8f6f 	isb	sy
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	60fb      	str	r3, [r7, #12]
    }
 8005f34:	bf00      	nop
 8005f36:	e7fe      	b.n	8005f36 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f3c:	683a      	ldr	r2, [r7, #0]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d902      	bls.n	8005f48 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	61fb      	str	r3, [r7, #28]
 8005f46:	e002      	b.n	8005f4e <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f4c:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f52:	69fa      	ldr	r2, [r7, #28]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d061      	beq.n	800601c <vTaskPriorityDisinheritAfterTimeout+0x11c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f5c:	697a      	ldr	r2, [r7, #20]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d15c      	bne.n	800601c <vTaskPriorityDisinheritAfterTimeout+0x11c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8005f62:	4b30      	ldr	r3, [pc, #192]	; (8006024 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	69ba      	ldr	r2, [r7, #24]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d10a      	bne.n	8005f82 <vTaskPriorityDisinheritAfterTimeout+0x82>
        __asm volatile
 8005f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f70:	f383 8811 	msr	BASEPRI, r3
 8005f74:	f3bf 8f6f 	isb	sy
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	60bb      	str	r3, [r7, #8]
    }
 8005f7e:	bf00      	nop
 8005f80:	e7fe      	b.n	8005f80 <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4619      	mov	r1, r3
 8005f86:	204a      	movs	r0, #74	; 0x4a
 8005f88:	f001 fe32 	bl	8007bf0 <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f90:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	69fa      	ldr	r2, [r7, #28]
 8005f96:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	db04      	blt.n	8005faa <vTaskPriorityDisinheritAfterTimeout+0xaa>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	f1c3 0205 	rsb	r2, r3, #5
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	6959      	ldr	r1, [r3, #20]
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4a1b      	ldr	r2, [pc, #108]	; (8006028 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8005fba:	4413      	add	r3, r2
 8005fbc:	4299      	cmp	r1, r3
 8005fbe:	d12d      	bne.n	800601c <vTaskPriorityDisinheritAfterTimeout+0x11c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	3304      	adds	r3, #4
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7fe f94d 	bl	8004264 <uxListRemove>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10a      	bne.n	8005fe6 <vTaskPriorityDisinheritAfterTimeout+0xe6>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fda:	43da      	mvns	r2, r3
 8005fdc:	4b13      	ldr	r3, [pc, #76]	; (800602c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	4a12      	ldr	r2, [pc, #72]	; (800602c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8005fe4:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f002 fb81 	bl	80086f0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	409a      	lsls	r2, r3
 8005ff6:	4b0d      	ldr	r3, [pc, #52]	; (800602c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	4a0b      	ldr	r2, [pc, #44]	; (800602c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8005ffe:	6013      	str	r3, [r2, #0]
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006004:	4613      	mov	r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4413      	add	r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4a06      	ldr	r2, [pc, #24]	; (8006028 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800600e:	441a      	add	r2, r3
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	3304      	adds	r3, #4
 8006014:	4619      	mov	r1, r3
 8006016:	4610      	mov	r0, r2
 8006018:	f7fe f8c7 	bl	80041aa <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800601c:	bf00      	nop
 800601e:	3720      	adds	r7, #32
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	20000184 	.word	0x20000184
 8006028:	20000188 	.word	0x20000188
 800602c:	20000264 	.word	0x20000264

08006030 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8006030:	b480      	push	{r7}
 8006032:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8006034:	4b07      	ldr	r3, [pc, #28]	; (8006054 <pvTaskIncrementMutexHeldCount+0x24>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d004      	beq.n	8006046 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800603c:	4b05      	ldr	r3, [pc, #20]	; (8006054 <pvTaskIncrementMutexHeldCount+0x24>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006042:	3201      	adds	r2, #1
 8006044:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 8006046:	4b03      	ldr	r3, [pc, #12]	; (8006054 <pvTaskIncrementMutexHeldCount+0x24>)
 8006048:	681b      	ldr	r3, [r3, #0]
    }
 800604a:	4618      	mov	r0, r3
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr
 8006054:	20000184 	.word	0x20000184

08006058 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006062:	4b32      	ldr	r3, [pc, #200]	; (800612c <prvAddCurrentTaskToDelayedList+0xd4>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006068:	4b31      	ldr	r3, [pc, #196]	; (8006130 <prvAddCurrentTaskToDelayedList+0xd8>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	3304      	adds	r3, #4
 800606e:	4618      	mov	r0, r3
 8006070:	f7fe f8f8 	bl	8004264 <uxListRemove>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10b      	bne.n	8006092 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800607a:	4b2d      	ldr	r3, [pc, #180]	; (8006130 <prvAddCurrentTaskToDelayedList+0xd8>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006080:	2201      	movs	r2, #1
 8006082:	fa02 f303 	lsl.w	r3, r2, r3
 8006086:	43da      	mvns	r2, r3
 8006088:	4b2a      	ldr	r3, [pc, #168]	; (8006134 <prvAddCurrentTaskToDelayedList+0xdc>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4013      	ands	r3, r2
 800608e:	4a29      	ldr	r2, [pc, #164]	; (8006134 <prvAddCurrentTaskToDelayedList+0xdc>)
 8006090:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006098:	d110      	bne.n	80060bc <prvAddCurrentTaskToDelayedList+0x64>
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00d      	beq.n	80060bc <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80060a0:	4b23      	ldr	r3, [pc, #140]	; (8006130 <prvAddCurrentTaskToDelayedList+0xd8>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	211b      	movs	r1, #27
 80060a6:	4618      	mov	r0, r3
 80060a8:	f002 fb64 	bl	8008774 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060ac:	4b20      	ldr	r3, [pc, #128]	; (8006130 <prvAddCurrentTaskToDelayedList+0xd8>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	3304      	adds	r3, #4
 80060b2:	4619      	mov	r1, r3
 80060b4:	4820      	ldr	r0, [pc, #128]	; (8006138 <prvAddCurrentTaskToDelayedList+0xe0>)
 80060b6:	f7fe f878 	bl	80041aa <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80060ba:	e032      	b.n	8006122 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4413      	add	r3, r2
 80060c2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060c4:	4b1a      	ldr	r3, [pc, #104]	; (8006130 <prvAddCurrentTaskToDelayedList+0xd8>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d20f      	bcs.n	80060f4 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80060d4:	4b16      	ldr	r3, [pc, #88]	; (8006130 <prvAddCurrentTaskToDelayedList+0xd8>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2104      	movs	r1, #4
 80060da:	4618      	mov	r0, r3
 80060dc:	f002 fb4a 	bl	8008774 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060e0:	4b16      	ldr	r3, [pc, #88]	; (800613c <prvAddCurrentTaskToDelayedList+0xe4>)
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	4b12      	ldr	r3, [pc, #72]	; (8006130 <prvAddCurrentTaskToDelayedList+0xd8>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	3304      	adds	r3, #4
 80060ea:	4619      	mov	r1, r3
 80060ec:	4610      	mov	r0, r2
 80060ee:	f7fe f880 	bl	80041f2 <vListInsert>
}
 80060f2:	e016      	b.n	8006122 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80060f4:	4b0e      	ldr	r3, [pc, #56]	; (8006130 <prvAddCurrentTaskToDelayedList+0xd8>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2104      	movs	r1, #4
 80060fa:	4618      	mov	r0, r3
 80060fc:	f002 fb3a 	bl	8008774 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006100:	4b0f      	ldr	r3, [pc, #60]	; (8006140 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	4b0a      	ldr	r3, [pc, #40]	; (8006130 <prvAddCurrentTaskToDelayedList+0xd8>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	3304      	adds	r3, #4
 800610a:	4619      	mov	r1, r3
 800610c:	4610      	mov	r0, r2
 800610e:	f7fe f870 	bl	80041f2 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8006112:	4b0c      	ldr	r3, [pc, #48]	; (8006144 <prvAddCurrentTaskToDelayedList+0xec>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	429a      	cmp	r2, r3
 800611a:	d202      	bcs.n	8006122 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 800611c:	4a09      	ldr	r2, [pc, #36]	; (8006144 <prvAddCurrentTaskToDelayedList+0xec>)
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	6013      	str	r3, [r2, #0]
}
 8006122:	bf00      	nop
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	20000260 	.word	0x20000260
 8006130:	20000184 	.word	0x20000184
 8006134:	20000264 	.word	0x20000264
 8006138:	20000248 	.word	0x20000248
 800613c:	20000218 	.word	0x20000218
 8006140:	20000214 	.word	0x20000214
 8006144:	2000027c 	.word	0x2000027c

08006148 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800614e:	2300      	movs	r3, #0
 8006150:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8006152:	f000 fb31 	bl	80067b8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8006156:	4b11      	ldr	r3, [pc, #68]	; (800619c <xTimerCreateTimerTask+0x54>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00b      	beq.n	8006176 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800615e:	4b10      	ldr	r3, [pc, #64]	; (80061a0 <xTimerCreateTimerTask+0x58>)
 8006160:	9301      	str	r3, [sp, #4]
 8006162:	2302      	movs	r3, #2
 8006164:	9300      	str	r3, [sp, #0]
 8006166:	2300      	movs	r3, #0
 8006168:	f44f 7282 	mov.w	r2, #260	; 0x104
 800616c:	490d      	ldr	r1, [pc, #52]	; (80061a4 <xTimerCreateTimerTask+0x5c>)
 800616e:	480e      	ldr	r0, [pc, #56]	; (80061a8 <xTimerCreateTimerTask+0x60>)
 8006170:	f7ff f800 	bl	8005174 <xTaskCreate>
 8006174:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d10a      	bne.n	8006192 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800617c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006180:	f383 8811 	msr	BASEPRI, r3
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	603b      	str	r3, [r7, #0]
    }
 800618e:	bf00      	nop
 8006190:	e7fe      	b.n	8006190 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8006192:	687b      	ldr	r3, [r7, #4]
    }
 8006194:	4618      	mov	r0, r3
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	200002b8 	.word	0x200002b8
 80061a0:	200002bc 	.word	0x200002bc
 80061a4:	08009120 	.word	0x08009120
 80061a8:	08006399 	.word	0x08006399

080061ac <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b088      	sub	sp, #32
 80061b0:	af02      	add	r7, sp, #8
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
 80061b8:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80061ba:	202c      	movs	r0, #44	; 0x2c
 80061bc:	f000 fd8e 	bl	8006cdc <pvPortMalloc>
 80061c0:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00d      	beq.n	80061e4 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	9301      	str	r3, [sp, #4]
 80061d4:	6a3b      	ldr	r3, [r7, #32]
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	68b9      	ldr	r1, [r7, #8]
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f000 f805 	bl	80061ee <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 80061e4:	697b      	ldr	r3, [r7, #20]
        }
 80061e6:	4618      	mov	r0, r3
 80061e8:	3718      	adds	r7, #24
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b086      	sub	sp, #24
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	60f8      	str	r0, [r7, #12]
 80061f6:	60b9      	str	r1, [r7, #8]
 80061f8:	607a      	str	r2, [r7, #4]
 80061fa:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10a      	bne.n	8006218 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8006202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006206:	f383 8811 	msr	BASEPRI, r3
 800620a:	f3bf 8f6f 	isb	sy
 800620e:	f3bf 8f4f 	dsb	sy
 8006212:	617b      	str	r3, [r7, #20]
    }
 8006214:	bf00      	nop
 8006216:	e7fe      	b.n	8006216 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8006218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621a:	2b00      	cmp	r3, #0
 800621c:	d01e      	beq.n	800625c <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 800621e:	f000 facb 	bl	80067b8 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8006222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 800622e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006230:	683a      	ldr	r2, [r7, #0]
 8006232:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006236:	6a3a      	ldr	r2, [r7, #32]
 8006238:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623c:	3304      	adds	r3, #4
 800623e:	4618      	mov	r0, r3
 8006240:	f7fd ffa6 	bl	8004190 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d008      	beq.n	800625c <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800624a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006250:	f043 0304 	orr.w	r3, r3, #4
 8006254:	b2da      	uxtb	r2, r3
 8006256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006258:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 800625c:	bf00      	nop
 800625e:	3718      	adds	r7, #24
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8006264:	b580      	push	{r7, lr}
 8006266:	b08a      	sub	sp, #40	; 0x28
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
 8006270:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8006272:	2300      	movs	r3, #0
 8006274:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10a      	bne.n	8006292 <xTimerGenericCommand+0x2e>
        __asm volatile
 800627c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006280:	f383 8811 	msr	BASEPRI, r3
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	623b      	str	r3, [r7, #32]
    }
 800628e:	bf00      	nop
 8006290:	e7fe      	b.n	8006290 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8006292:	4b1a      	ldr	r3, [pc, #104]	; (80062fc <xTimerGenericCommand+0x98>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d02a      	beq.n	80062f0 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	2b05      	cmp	r3, #5
 80062aa:	dc18      	bgt.n	80062de <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80062ac:	f7ff fd10 	bl	8005cd0 <xTaskGetSchedulerState>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d109      	bne.n	80062ca <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80062b6:	4b11      	ldr	r3, [pc, #68]	; (80062fc <xTimerGenericCommand+0x98>)
 80062b8:	6818      	ldr	r0, [r3, #0]
 80062ba:	f107 0114 	add.w	r1, r7, #20
 80062be:	2300      	movs	r3, #0
 80062c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062c2:	f7fe f8e9 	bl	8004498 <xQueueGenericSend>
 80062c6:	6278      	str	r0, [r7, #36]	; 0x24
 80062c8:	e012      	b.n	80062f0 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80062ca:	4b0c      	ldr	r3, [pc, #48]	; (80062fc <xTimerGenericCommand+0x98>)
 80062cc:	6818      	ldr	r0, [r3, #0]
 80062ce:	f107 0114 	add.w	r1, r7, #20
 80062d2:	2300      	movs	r3, #0
 80062d4:	2200      	movs	r2, #0
 80062d6:	f7fe f8df 	bl	8004498 <xQueueGenericSend>
 80062da:	6278      	str	r0, [r7, #36]	; 0x24
 80062dc:	e008      	b.n	80062f0 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80062de:	4b07      	ldr	r3, [pc, #28]	; (80062fc <xTimerGenericCommand+0x98>)
 80062e0:	6818      	ldr	r0, [r3, #0]
 80062e2:	f107 0114 	add.w	r1, r7, #20
 80062e6:	2300      	movs	r3, #0
 80062e8:	683a      	ldr	r2, [r7, #0]
 80062ea:	f7fe f9fb 	bl	80046e4 <xQueueGenericSendFromISR>
 80062ee:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80062f2:	4618      	mov	r0, r3
 80062f4:	3728      	adds	r7, #40	; 0x28
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	200002b8 	.word	0x200002b8

08006300 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006300:	b580      	push	{r7, lr}
 8006302:	b088      	sub	sp, #32
 8006304:	af02      	add	r7, sp, #8
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800630a:	4b22      	ldr	r3, [pc, #136]	; (8006394 <prvProcessExpiredTimer+0x94>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	3304      	adds	r3, #4
 8006318:	4618      	mov	r0, r3
 800631a:	f7fd ffa3 	bl	8004264 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006324:	f003 0304 	and.w	r3, r3, #4
 8006328:	2b00      	cmp	r3, #0
 800632a:	d022      	beq.n	8006372 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	699a      	ldr	r2, [r3, #24]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	18d1      	adds	r1, r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	683a      	ldr	r2, [r7, #0]
 8006338:	6978      	ldr	r0, [r7, #20]
 800633a:	f000 f8d1 	bl	80064e0 <prvInsertTimerInActiveList>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d01f      	beq.n	8006384 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006344:	2300      	movs	r3, #0
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	2300      	movs	r3, #0
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	2100      	movs	r1, #0
 800634e:	6978      	ldr	r0, [r7, #20]
 8006350:	f7ff ff88 	bl	8006264 <xTimerGenericCommand>
 8006354:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d113      	bne.n	8006384 <prvProcessExpiredTimer+0x84>
        __asm volatile
 800635c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006360:	f383 8811 	msr	BASEPRI, r3
 8006364:	f3bf 8f6f 	isb	sy
 8006368:	f3bf 8f4f 	dsb	sy
 800636c:	60fb      	str	r3, [r7, #12]
    }
 800636e:	bf00      	nop
 8006370:	e7fe      	b.n	8006370 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006378:	f023 0301 	bic.w	r3, r3, #1
 800637c:	b2da      	uxtb	r2, r3
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	6a1b      	ldr	r3, [r3, #32]
 8006388:	6978      	ldr	r0, [r7, #20]
 800638a:	4798      	blx	r3
    }
 800638c:	bf00      	nop
 800638e:	3718      	adds	r7, #24
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	200002b0 	.word	0x200002b0

08006398 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063a0:	f107 0308 	add.w	r3, r7, #8
 80063a4:	4618      	mov	r0, r3
 80063a6:	f000 f857 	bl	8006458 <prvGetNextExpireTime>
 80063aa:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	4619      	mov	r1, r3
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f000 f803 	bl	80063bc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80063b6:	f000 f8d5 	bl	8006564 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063ba:	e7f1      	b.n	80063a0 <prvTimerTask+0x8>

080063bc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80063c6:	f7ff f89b 	bl	8005500 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063ca:	f107 0308 	add.w	r3, r7, #8
 80063ce:	4618      	mov	r0, r3
 80063d0:	f000 f866 	bl	80064a0 <prvSampleTimeNow>
 80063d4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d130      	bne.n	800643e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d10a      	bne.n	80063f8 <prvProcessTimerOrBlockTask+0x3c>
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d806      	bhi.n	80063f8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80063ea:	f7ff f897 	bl	800551c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80063ee:	68f9      	ldr	r1, [r7, #12]
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f7ff ff85 	bl	8006300 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80063f6:	e024      	b.n	8006442 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d008      	beq.n	8006410 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80063fe:	4b13      	ldr	r3, [pc, #76]	; (800644c <prvProcessTimerOrBlockTask+0x90>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d101      	bne.n	800640c <prvProcessTimerOrBlockTask+0x50>
 8006408:	2301      	movs	r3, #1
 800640a:	e000      	b.n	800640e <prvProcessTimerOrBlockTask+0x52>
 800640c:	2300      	movs	r3, #0
 800640e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006410:	4b0f      	ldr	r3, [pc, #60]	; (8006450 <prvProcessTimerOrBlockTask+0x94>)
 8006412:	6818      	ldr	r0, [r3, #0]
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	683a      	ldr	r2, [r7, #0]
 800641c:	4619      	mov	r1, r3
 800641e:	f7fe fe75 	bl	800510c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006422:	f7ff f87b 	bl	800551c <xTaskResumeAll>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10a      	bne.n	8006442 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800642c:	4b09      	ldr	r3, [pc, #36]	; (8006454 <prvProcessTimerOrBlockTask+0x98>)
 800642e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006432:	601a      	str	r2, [r3, #0]
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	f3bf 8f6f 	isb	sy
    }
 800643c:	e001      	b.n	8006442 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800643e:	f7ff f86d 	bl	800551c <xTaskResumeAll>
    }
 8006442:	bf00      	nop
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	200002b4 	.word	0x200002b4
 8006450:	200002b8 	.word	0x200002b8
 8006454:	e000ed04 	.word	0xe000ed04

08006458 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006460:	4b0e      	ldr	r3, [pc, #56]	; (800649c <prvGetNextExpireTime+0x44>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <prvGetNextExpireTime+0x16>
 800646a:	2201      	movs	r2, #1
 800646c:	e000      	b.n	8006470 <prvGetNextExpireTime+0x18>
 800646e:	2200      	movs	r2, #0
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d105      	bne.n	8006488 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800647c:	4b07      	ldr	r3, [pc, #28]	; (800649c <prvGetNextExpireTime+0x44>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	60fb      	str	r3, [r7, #12]
 8006486:	e001      	b.n	800648c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006488:	2300      	movs	r3, #0
 800648a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800648c:	68fb      	ldr	r3, [r7, #12]
    }
 800648e:	4618      	mov	r0, r3
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	200002b0 	.word	0x200002b0

080064a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80064a8:	f7ff f8d8 	bl	800565c <xTaskGetTickCount>
 80064ac:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80064ae:	4b0b      	ldr	r3, [pc, #44]	; (80064dc <prvSampleTimeNow+0x3c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d205      	bcs.n	80064c4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80064b8:	f000 f91a 	bl	80066f0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	601a      	str	r2, [r3, #0]
 80064c2:	e002      	b.n	80064ca <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80064ca:	4a04      	ldr	r2, [pc, #16]	; (80064dc <prvSampleTimeNow+0x3c>)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80064d0:	68fb      	ldr	r3, [r7, #12]
    }
 80064d2:	4618      	mov	r0, r3
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	200002c0 	.word	0x200002c0

080064e0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
 80064ec:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80064ee:	2300      	movs	r3, #0
 80064f0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	429a      	cmp	r2, r3
 8006504:	d812      	bhi.n	800652c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	1ad2      	subs	r2, r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	429a      	cmp	r2, r3
 8006512:	d302      	bcc.n	800651a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006514:	2301      	movs	r3, #1
 8006516:	617b      	str	r3, [r7, #20]
 8006518:	e01b      	b.n	8006552 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800651a:	4b10      	ldr	r3, [pc, #64]	; (800655c <prvInsertTimerInActiveList+0x7c>)
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	3304      	adds	r3, #4
 8006522:	4619      	mov	r1, r3
 8006524:	4610      	mov	r0, r2
 8006526:	f7fd fe64 	bl	80041f2 <vListInsert>
 800652a:	e012      	b.n	8006552 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	429a      	cmp	r2, r3
 8006532:	d206      	bcs.n	8006542 <prvInsertTimerInActiveList+0x62>
 8006534:	68ba      	ldr	r2, [r7, #8]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	429a      	cmp	r2, r3
 800653a:	d302      	bcc.n	8006542 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800653c:	2301      	movs	r3, #1
 800653e:	617b      	str	r3, [r7, #20]
 8006540:	e007      	b.n	8006552 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006542:	4b07      	ldr	r3, [pc, #28]	; (8006560 <prvInsertTimerInActiveList+0x80>)
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	3304      	adds	r3, #4
 800654a:	4619      	mov	r1, r3
 800654c:	4610      	mov	r0, r2
 800654e:	f7fd fe50 	bl	80041f2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006552:	697b      	ldr	r3, [r7, #20]
    }
 8006554:	4618      	mov	r0, r3
 8006556:	3718      	adds	r7, #24
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	200002b4 	.word	0x200002b4
 8006560:	200002b0 	.word	0x200002b0

08006564 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006564:	b580      	push	{r7, lr}
 8006566:	b08c      	sub	sp, #48	; 0x30
 8006568:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800656a:	e0ae      	b.n	80066ca <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	2b00      	cmp	r3, #0
 8006570:	f2c0 80aa 	blt.w	80066c8 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d004      	beq.n	800658a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006582:	3304      	adds	r3, #4
 8006584:	4618      	mov	r0, r3
 8006586:	f7fd fe6d 	bl	8004264 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800658a:	1d3b      	adds	r3, r7, #4
 800658c:	4618      	mov	r0, r3
 800658e:	f7ff ff87 	bl	80064a0 <prvSampleTimeNow>
 8006592:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	2b09      	cmp	r3, #9
 8006598:	f200 8097 	bhi.w	80066ca <prvProcessReceivedCommands+0x166>
 800659c:	a201      	add	r2, pc, #4	; (adr r2, 80065a4 <prvProcessReceivedCommands+0x40>)
 800659e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a2:	bf00      	nop
 80065a4:	080065cd 	.word	0x080065cd
 80065a8:	080065cd 	.word	0x080065cd
 80065ac:	080065cd 	.word	0x080065cd
 80065b0:	08006641 	.word	0x08006641
 80065b4:	08006655 	.word	0x08006655
 80065b8:	0800669f 	.word	0x0800669f
 80065bc:	080065cd 	.word	0x080065cd
 80065c0:	080065cd 	.word	0x080065cd
 80065c4:	08006641 	.word	0x08006641
 80065c8:	08006655 	.word	0x08006655
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065d2:	f043 0301 	orr.w	r3, r3, #1
 80065d6:	b2da      	uxtb	r2, r3
 80065d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	18d1      	adds	r1, r2, r3
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6a3a      	ldr	r2, [r7, #32]
 80065ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065ec:	f7ff ff78 	bl	80064e0 <prvInsertTimerInActiveList>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d069      	beq.n	80066ca <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065fc:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006604:	f003 0304 	and.w	r3, r3, #4
 8006608:	2b00      	cmp	r3, #0
 800660a:	d05e      	beq.n	80066ca <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	441a      	add	r2, r3
 8006614:	2300      	movs	r3, #0
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	2300      	movs	r3, #0
 800661a:	2100      	movs	r1, #0
 800661c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800661e:	f7ff fe21 	bl	8006264 <xTimerGenericCommand>
 8006622:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d14f      	bne.n	80066ca <prvProcessReceivedCommands+0x166>
        __asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	61bb      	str	r3, [r7, #24]
    }
 800663c:	bf00      	nop
 800663e:	e7fe      	b.n	800663e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006646:	f023 0301 	bic.w	r3, r3, #1
 800664a:	b2da      	uxtb	r2, r3
 800664c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8006652:	e03a      	b.n	80066ca <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006656:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800665a:	f043 0301 	orr.w	r3, r3, #1
 800665e:	b2da      	uxtb	r2, r3
 8006660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006662:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800666c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10a      	bne.n	800668a <prvProcessReceivedCommands+0x126>
        __asm volatile
 8006674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006678:	f383 8811 	msr	BASEPRI, r3
 800667c:	f3bf 8f6f 	isb	sy
 8006680:	f3bf 8f4f 	dsb	sy
 8006684:	617b      	str	r3, [r7, #20]
    }
 8006686:	bf00      	nop
 8006688:	e7fe      	b.n	8006688 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800668a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668c:	699a      	ldr	r2, [r3, #24]
 800668e:	6a3b      	ldr	r3, [r7, #32]
 8006690:	18d1      	adds	r1, r2, r3
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	6a3a      	ldr	r2, [r7, #32]
 8006696:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006698:	f7ff ff22 	bl	80064e0 <prvInsertTimerInActiveList>
                        break;
 800669c:	e015      	b.n	80066ca <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800669e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066a4:	f003 0302 	and.w	r3, r3, #2
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d103      	bne.n	80066b4 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80066ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066ae:	f000 fbf5 	bl	8006e9c <vPortFree>
 80066b2:	e00a      	b.n	80066ca <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80066b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066ba:	f023 0301 	bic.w	r3, r3, #1
 80066be:	b2da      	uxtb	r2, r3
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80066c6:	e000      	b.n	80066ca <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80066c8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066ca:	4b08      	ldr	r3, [pc, #32]	; (80066ec <prvProcessReceivedCommands+0x188>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f107 0108 	add.w	r1, r7, #8
 80066d2:	2200      	movs	r2, #0
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7fe f973 	bl	80049c0 <xQueueReceive>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f47f af45 	bne.w	800656c <prvProcessReceivedCommands+0x8>
        }
    }
 80066e2:	bf00      	nop
 80066e4:	bf00      	nop
 80066e6:	3728      	adds	r7, #40	; 0x28
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	200002b8 	.word	0x200002b8

080066f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b088      	sub	sp, #32
 80066f4:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066f6:	e048      	b.n	800678a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066f8:	4b2d      	ldr	r3, [pc, #180]	; (80067b0 <prvSwitchTimerLists+0xc0>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006702:	4b2b      	ldr	r3, [pc, #172]	; (80067b0 <prvSwitchTimerLists+0xc0>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	3304      	adds	r3, #4
 8006710:	4618      	mov	r0, r3
 8006712:	f7fd fda7 	bl	8004264 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006724:	f003 0304 	and.w	r3, r3, #4
 8006728:	2b00      	cmp	r3, #0
 800672a:	d02e      	beq.n	800678a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	4413      	add	r3, r2
 8006734:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8006736:	68ba      	ldr	r2, [r7, #8]
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	429a      	cmp	r2, r3
 800673c:	d90e      	bls.n	800675c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	68ba      	ldr	r2, [r7, #8]
 8006742:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800674a:	4b19      	ldr	r3, [pc, #100]	; (80067b0 <prvSwitchTimerLists+0xc0>)
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	3304      	adds	r3, #4
 8006752:	4619      	mov	r1, r3
 8006754:	4610      	mov	r0, r2
 8006756:	f7fd fd4c 	bl	80041f2 <vListInsert>
 800675a:	e016      	b.n	800678a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800675c:	2300      	movs	r3, #0
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	2300      	movs	r3, #0
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	2100      	movs	r1, #0
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f7ff fd7c 	bl	8006264 <xTimerGenericCommand>
 800676c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10a      	bne.n	800678a <prvSwitchTimerLists+0x9a>
        __asm volatile
 8006774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006778:	f383 8811 	msr	BASEPRI, r3
 800677c:	f3bf 8f6f 	isb	sy
 8006780:	f3bf 8f4f 	dsb	sy
 8006784:	603b      	str	r3, [r7, #0]
    }
 8006786:	bf00      	nop
 8006788:	e7fe      	b.n	8006788 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800678a:	4b09      	ldr	r3, [pc, #36]	; (80067b0 <prvSwitchTimerLists+0xc0>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1b1      	bne.n	80066f8 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8006794:	4b06      	ldr	r3, [pc, #24]	; (80067b0 <prvSwitchTimerLists+0xc0>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800679a:	4b06      	ldr	r3, [pc, #24]	; (80067b4 <prvSwitchTimerLists+0xc4>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a04      	ldr	r2, [pc, #16]	; (80067b0 <prvSwitchTimerLists+0xc0>)
 80067a0:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80067a2:	4a04      	ldr	r2, [pc, #16]	; (80067b4 <prvSwitchTimerLists+0xc4>)
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	6013      	str	r3, [r2, #0]
    }
 80067a8:	bf00      	nop
 80067aa:	3718      	adds	r7, #24
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	200002b0 	.word	0x200002b0
 80067b4:	200002b4 	.word	0x200002b4

080067b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80067b8:	b580      	push	{r7, lr}
 80067ba:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80067bc:	f000 f964 	bl	8006a88 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80067c0:	4b12      	ldr	r3, [pc, #72]	; (800680c <prvCheckForValidListAndQueue+0x54>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d11d      	bne.n	8006804 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80067c8:	4811      	ldr	r0, [pc, #68]	; (8006810 <prvCheckForValidListAndQueue+0x58>)
 80067ca:	f7fd fcc1 	bl	8004150 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80067ce:	4811      	ldr	r0, [pc, #68]	; (8006814 <prvCheckForValidListAndQueue+0x5c>)
 80067d0:	f7fd fcbe 	bl	8004150 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80067d4:	4b10      	ldr	r3, [pc, #64]	; (8006818 <prvCheckForValidListAndQueue+0x60>)
 80067d6:	4a0e      	ldr	r2, [pc, #56]	; (8006810 <prvCheckForValidListAndQueue+0x58>)
 80067d8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80067da:	4b10      	ldr	r3, [pc, #64]	; (800681c <prvCheckForValidListAndQueue+0x64>)
 80067dc:	4a0d      	ldr	r2, [pc, #52]	; (8006814 <prvCheckForValidListAndQueue+0x5c>)
 80067de:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80067e0:	2200      	movs	r2, #0
 80067e2:	210c      	movs	r1, #12
 80067e4:	200a      	movs	r0, #10
 80067e6:	f7fd fdcf 	bl	8004388 <xQueueGenericCreate>
 80067ea:	4603      	mov	r3, r0
 80067ec:	4a07      	ldr	r2, [pc, #28]	; (800680c <prvCheckForValidListAndQueue+0x54>)
 80067ee:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80067f0:	4b06      	ldr	r3, [pc, #24]	; (800680c <prvCheckForValidListAndQueue+0x54>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d005      	beq.n	8006804 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80067f8:	4b04      	ldr	r3, [pc, #16]	; (800680c <prvCheckForValidListAndQueue+0x54>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4908      	ldr	r1, [pc, #32]	; (8006820 <prvCheckForValidListAndQueue+0x68>)
 80067fe:	4618      	mov	r0, r3
 8006800:	f7fe fc52 	bl	80050a8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006804:	f000 f970 	bl	8006ae8 <vPortExitCritical>
    }
 8006808:	bf00      	nop
 800680a:	bd80      	pop	{r7, pc}
 800680c:	200002b8 	.word	0x200002b8
 8006810:	20000288 	.word	0x20000288
 8006814:	2000029c 	.word	0x2000029c
 8006818:	200002b0 	.word	0x200002b0
 800681c:	200002b4 	.word	0x200002b4
 8006820:	08009128 	.word	0x08009128

08006824 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	3b04      	subs	r3, #4
 8006834:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800683c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	3b04      	subs	r3, #4
 8006842:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	f023 0201 	bic.w	r2, r3, #1
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	3b04      	subs	r3, #4
 8006852:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006854:	4a0c      	ldr	r2, [pc, #48]	; (8006888 <pxPortInitialiseStack+0x64>)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	3b14      	subs	r3, #20
 800685e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	3b04      	subs	r3, #4
 800686a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f06f 0202 	mvn.w	r2, #2
 8006872:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	3b20      	subs	r3, #32
 8006878:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800687a:	68fb      	ldr	r3, [r7, #12]
}
 800687c:	4618      	mov	r0, r3
 800687e:	3714      	adds	r7, #20
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr
 8006888:	0800688d 	.word	0x0800688d

0800688c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8006892:	2300      	movs	r3, #0
 8006894:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006896:	4b12      	ldr	r3, [pc, #72]	; (80068e0 <prvTaskExitError+0x54>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800689e:	d00a      	beq.n	80068b6 <prvTaskExitError+0x2a>
        __asm volatile
 80068a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a4:	f383 8811 	msr	BASEPRI, r3
 80068a8:	f3bf 8f6f 	isb	sy
 80068ac:	f3bf 8f4f 	dsb	sy
 80068b0:	60fb      	str	r3, [r7, #12]
    }
 80068b2:	bf00      	nop
 80068b4:	e7fe      	b.n	80068b4 <prvTaskExitError+0x28>
        __asm volatile
 80068b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ba:	f383 8811 	msr	BASEPRI, r3
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	60bb      	str	r3, [r7, #8]
    }
 80068c8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80068ca:	bf00      	nop
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d0fc      	beq.n	80068cc <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80068d2:	bf00      	nop
 80068d4:	bf00      	nop
 80068d6:	3714      	adds	r7, #20
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr
 80068e0:	2000000c 	.word	0x2000000c
	...

080068f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80068f0:	4b07      	ldr	r3, [pc, #28]	; (8006910 <pxCurrentTCBConst2>)
 80068f2:	6819      	ldr	r1, [r3, #0]
 80068f4:	6808      	ldr	r0, [r1, #0]
 80068f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068fa:	f380 8809 	msr	PSP, r0
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	f04f 0000 	mov.w	r0, #0
 8006906:	f380 8811 	msr	BASEPRI, r0
 800690a:	4770      	bx	lr
 800690c:	f3af 8000 	nop.w

08006910 <pxCurrentTCBConst2>:
 8006910:	20000184 	.word	0x20000184
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006914:	bf00      	nop
 8006916:	bf00      	nop

08006918 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006918:	4808      	ldr	r0, [pc, #32]	; (800693c <prvPortStartFirstTask+0x24>)
 800691a:	6800      	ldr	r0, [r0, #0]
 800691c:	6800      	ldr	r0, [r0, #0]
 800691e:	f380 8808 	msr	MSP, r0
 8006922:	f04f 0000 	mov.w	r0, #0
 8006926:	f380 8814 	msr	CONTROL, r0
 800692a:	b662      	cpsie	i
 800692c:	b661      	cpsie	f
 800692e:	f3bf 8f4f 	dsb	sy
 8006932:	f3bf 8f6f 	isb	sy
 8006936:	df00      	svc	0
 8006938:	bf00      	nop
 800693a:	0000      	.short	0x0000
 800693c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006940:	bf00      	nop
 8006942:	bf00      	nop

08006944 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b086      	sub	sp, #24
 8006948:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800694a:	4b46      	ldr	r3, [pc, #280]	; (8006a64 <xPortStartScheduler+0x120>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a46      	ldr	r2, [pc, #280]	; (8006a68 <xPortStartScheduler+0x124>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d10a      	bne.n	800696a <xPortStartScheduler+0x26>
        __asm volatile
 8006954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006958:	f383 8811 	msr	BASEPRI, r3
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	f3bf 8f4f 	dsb	sy
 8006964:	613b      	str	r3, [r7, #16]
    }
 8006966:	bf00      	nop
 8006968:	e7fe      	b.n	8006968 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800696a:	4b3e      	ldr	r3, [pc, #248]	; (8006a64 <xPortStartScheduler+0x120>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a3f      	ldr	r2, [pc, #252]	; (8006a6c <xPortStartScheduler+0x128>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d10a      	bne.n	800698a <xPortStartScheduler+0x46>
        __asm volatile
 8006974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006978:	f383 8811 	msr	BASEPRI, r3
 800697c:	f3bf 8f6f 	isb	sy
 8006980:	f3bf 8f4f 	dsb	sy
 8006984:	60fb      	str	r3, [r7, #12]
    }
 8006986:	bf00      	nop
 8006988:	e7fe      	b.n	8006988 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800698a:	4b39      	ldr	r3, [pc, #228]	; (8006a70 <xPortStartScheduler+0x12c>)
 800698c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	b2db      	uxtb	r3, r3
 8006994:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	22ff      	movs	r2, #255	; 0xff
 800699a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80069a4:	78fb      	ldrb	r3, [r7, #3]
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80069ac:	b2da      	uxtb	r2, r3
 80069ae:	4b31      	ldr	r3, [pc, #196]	; (8006a74 <xPortStartScheduler+0x130>)
 80069b0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80069b2:	4b31      	ldr	r3, [pc, #196]	; (8006a78 <xPortStartScheduler+0x134>)
 80069b4:	2207      	movs	r2, #7
 80069b6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069b8:	e009      	b.n	80069ce <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80069ba:	4b2f      	ldr	r3, [pc, #188]	; (8006a78 <xPortStartScheduler+0x134>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	3b01      	subs	r3, #1
 80069c0:	4a2d      	ldr	r2, [pc, #180]	; (8006a78 <xPortStartScheduler+0x134>)
 80069c2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80069c4:	78fb      	ldrb	r3, [r7, #3]
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	005b      	lsls	r3, r3, #1
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069ce:	78fb      	ldrb	r3, [r7, #3]
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069d6:	2b80      	cmp	r3, #128	; 0x80
 80069d8:	d0ef      	beq.n	80069ba <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80069da:	4b27      	ldr	r3, [pc, #156]	; (8006a78 <xPortStartScheduler+0x134>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f1c3 0307 	rsb	r3, r3, #7
 80069e2:	2b04      	cmp	r3, #4
 80069e4:	d00a      	beq.n	80069fc <xPortStartScheduler+0xb8>
        __asm volatile
 80069e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ea:	f383 8811 	msr	BASEPRI, r3
 80069ee:	f3bf 8f6f 	isb	sy
 80069f2:	f3bf 8f4f 	dsb	sy
 80069f6:	60bb      	str	r3, [r7, #8]
    }
 80069f8:	bf00      	nop
 80069fa:	e7fe      	b.n	80069fa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80069fc:	4b1e      	ldr	r3, [pc, #120]	; (8006a78 <xPortStartScheduler+0x134>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	021b      	lsls	r3, r3, #8
 8006a02:	4a1d      	ldr	r2, [pc, #116]	; (8006a78 <xPortStartScheduler+0x134>)
 8006a04:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a06:	4b1c      	ldr	r3, [pc, #112]	; (8006a78 <xPortStartScheduler+0x134>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a0e:	4a1a      	ldr	r2, [pc, #104]	; (8006a78 <xPortStartScheduler+0x134>)
 8006a10:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	b2da      	uxtb	r2, r3
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006a1a:	4b18      	ldr	r3, [pc, #96]	; (8006a7c <xPortStartScheduler+0x138>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a17      	ldr	r2, [pc, #92]	; (8006a7c <xPortStartScheduler+0x138>)
 8006a20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a24:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006a26:	4b15      	ldr	r3, [pc, #84]	; (8006a7c <xPortStartScheduler+0x138>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a14      	ldr	r2, [pc, #80]	; (8006a7c <xPortStartScheduler+0x138>)
 8006a2c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006a30:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006a32:	f000 f8e3 	bl	8006bfc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006a36:	4b12      	ldr	r3, [pc, #72]	; (8006a80 <xPortStartScheduler+0x13c>)
 8006a38:	2200      	movs	r2, #0
 8006a3a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8006a3c:	f000 f902 	bl	8006c44 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006a40:	4b10      	ldr	r3, [pc, #64]	; (8006a84 <xPortStartScheduler+0x140>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a0f      	ldr	r2, [pc, #60]	; (8006a84 <xPortStartScheduler+0x140>)
 8006a46:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006a4a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8006a4c:	f7ff ff64 	bl	8006918 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006a50:	f7fe fee2 	bl	8005818 <vTaskSwitchContext>
    prvTaskExitError();
 8006a54:	f7ff ff1a 	bl	800688c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3718      	adds	r7, #24
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	e000ed00 	.word	0xe000ed00
 8006a68:	410fc271 	.word	0x410fc271
 8006a6c:	410fc270 	.word	0x410fc270
 8006a70:	e000e400 	.word	0xe000e400
 8006a74:	200002c4 	.word	0x200002c4
 8006a78:	200002c8 	.word	0x200002c8
 8006a7c:	e000ed20 	.word	0xe000ed20
 8006a80:	2000000c 	.word	0x2000000c
 8006a84:	e000ef34 	.word	0xe000ef34

08006a88 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
        __asm volatile
 8006a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a92:	f383 8811 	msr	BASEPRI, r3
 8006a96:	f3bf 8f6f 	isb	sy
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	607b      	str	r3, [r7, #4]
    }
 8006aa0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006aa2:	4b0f      	ldr	r3, [pc, #60]	; (8006ae0 <vPortEnterCritical+0x58>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	4a0d      	ldr	r2, [pc, #52]	; (8006ae0 <vPortEnterCritical+0x58>)
 8006aaa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006aac:	4b0c      	ldr	r3, [pc, #48]	; (8006ae0 <vPortEnterCritical+0x58>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d10f      	bne.n	8006ad4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ab4:	4b0b      	ldr	r3, [pc, #44]	; (8006ae4 <vPortEnterCritical+0x5c>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00a      	beq.n	8006ad4 <vPortEnterCritical+0x4c>
        __asm volatile
 8006abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	603b      	str	r3, [r7, #0]
    }
 8006ad0:	bf00      	nop
 8006ad2:	e7fe      	b.n	8006ad2 <vPortEnterCritical+0x4a>
    }
}
 8006ad4:	bf00      	nop
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr
 8006ae0:	2000000c 	.word	0x2000000c
 8006ae4:	e000ed04 	.word	0xe000ed04

08006ae8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8006aee:	4b12      	ldr	r3, [pc, #72]	; (8006b38 <vPortExitCritical+0x50>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10a      	bne.n	8006b0c <vPortExitCritical+0x24>
        __asm volatile
 8006af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afa:	f383 8811 	msr	BASEPRI, r3
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	607b      	str	r3, [r7, #4]
    }
 8006b08:	bf00      	nop
 8006b0a:	e7fe      	b.n	8006b0a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8006b0c:	4b0a      	ldr	r3, [pc, #40]	; (8006b38 <vPortExitCritical+0x50>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	3b01      	subs	r3, #1
 8006b12:	4a09      	ldr	r2, [pc, #36]	; (8006b38 <vPortExitCritical+0x50>)
 8006b14:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006b16:	4b08      	ldr	r3, [pc, #32]	; (8006b38 <vPortExitCritical+0x50>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d105      	bne.n	8006b2a <vPortExitCritical+0x42>
 8006b1e:	2300      	movs	r3, #0
 8006b20:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	f383 8811 	msr	BASEPRI, r3
    }
 8006b28:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8006b2a:	bf00      	nop
 8006b2c:	370c      	adds	r7, #12
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	2000000c 	.word	0x2000000c
 8006b3c:	00000000 	.word	0x00000000

08006b40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006b40:	f3ef 8009 	mrs	r0, PSP
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	4b15      	ldr	r3, [pc, #84]	; (8006ba0 <pxCurrentTCBConst>)
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	f01e 0f10 	tst.w	lr, #16
 8006b50:	bf08      	it	eq
 8006b52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006b56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b5a:	6010      	str	r0, [r2, #0]
 8006b5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006b60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006b64:	f380 8811 	msr	BASEPRI, r0
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	f3bf 8f6f 	isb	sy
 8006b70:	f7fe fe52 	bl	8005818 <vTaskSwitchContext>
 8006b74:	f04f 0000 	mov.w	r0, #0
 8006b78:	f380 8811 	msr	BASEPRI, r0
 8006b7c:	bc09      	pop	{r0, r3}
 8006b7e:	6819      	ldr	r1, [r3, #0]
 8006b80:	6808      	ldr	r0, [r1, #0]
 8006b82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b86:	f01e 0f10 	tst.w	lr, #16
 8006b8a:	bf08      	it	eq
 8006b8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b90:	f380 8809 	msr	PSP, r0
 8006b94:	f3bf 8f6f 	isb	sy
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	f3af 8000 	nop.w

08006ba0 <pxCurrentTCBConst>:
 8006ba0:	20000184 	.word	0x20000184
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006ba4:	bf00      	nop
 8006ba6:	bf00      	nop

08006ba8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
        __asm volatile
 8006bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb2:	f383 8811 	msr	BASEPRI, r3
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	f3bf 8f4f 	dsb	sy
 8006bbe:	607b      	str	r3, [r7, #4]
    }
 8006bc0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8006bc2:	f001 fc7b 	bl	80084bc <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006bc6:	f7fe fd6b 	bl	80056a0 <xTaskIncrementTick>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d006      	beq.n	8006bde <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8006bd0:	f001 fcd2 	bl	8008578 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006bd4:	4b08      	ldr	r3, [pc, #32]	; (8006bf8 <SysTick_Handler+0x50>)
 8006bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bda:	601a      	str	r2, [r3, #0]
 8006bdc:	e001      	b.n	8006be2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8006bde:	f001 fcaf 	bl	8008540 <SEGGER_SYSVIEW_RecordExitISR>
 8006be2:	2300      	movs	r3, #0
 8006be4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	f383 8811 	msr	BASEPRI, r3
    }
 8006bec:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8006bee:	bf00      	nop
 8006bf0:	3708      	adds	r7, #8
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	e000ed04 	.word	0xe000ed04

08006bfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c00:	4b0b      	ldr	r3, [pc, #44]	; (8006c30 <vPortSetupTimerInterrupt+0x34>)
 8006c02:	2200      	movs	r2, #0
 8006c04:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006c06:	4b0b      	ldr	r3, [pc, #44]	; (8006c34 <vPortSetupTimerInterrupt+0x38>)
 8006c08:	2200      	movs	r2, #0
 8006c0a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c0c:	4b0a      	ldr	r3, [pc, #40]	; (8006c38 <vPortSetupTimerInterrupt+0x3c>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a0a      	ldr	r2, [pc, #40]	; (8006c3c <vPortSetupTimerInterrupt+0x40>)
 8006c12:	fba2 2303 	umull	r2, r3, r2, r3
 8006c16:	099b      	lsrs	r3, r3, #6
 8006c18:	4a09      	ldr	r2, [pc, #36]	; (8006c40 <vPortSetupTimerInterrupt+0x44>)
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c1e:	4b04      	ldr	r3, [pc, #16]	; (8006c30 <vPortSetupTimerInterrupt+0x34>)
 8006c20:	2207      	movs	r2, #7
 8006c22:	601a      	str	r2, [r3, #0]
}
 8006c24:	bf00      	nop
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	e000e010 	.word	0xe000e010
 8006c34:	e000e018 	.word	0xe000e018
 8006c38:	20000000 	.word	0x20000000
 8006c3c:	10624dd3 	.word	0x10624dd3
 8006c40:	e000e014 	.word	0xe000e014

08006c44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006c44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006c54 <vPortEnableVFP+0x10>
 8006c48:	6801      	ldr	r1, [r0, #0]
 8006c4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006c4e:	6001      	str	r1, [r0, #0]
 8006c50:	4770      	bx	lr
 8006c52:	0000      	.short	0x0000
 8006c54:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006c58:	bf00      	nop
 8006c5a:	bf00      	nop

08006c5c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006c62:	f3ef 8305 	mrs	r3, IPSR
 8006c66:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2b0f      	cmp	r3, #15
 8006c6c:	d914      	bls.n	8006c98 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006c6e:	4a17      	ldr	r2, [pc, #92]	; (8006ccc <vPortValidateInterruptPriority+0x70>)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4413      	add	r3, r2
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006c78:	4b15      	ldr	r3, [pc, #84]	; (8006cd0 <vPortValidateInterruptPriority+0x74>)
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	7afa      	ldrb	r2, [r7, #11]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d20a      	bcs.n	8006c98 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8006c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c86:	f383 8811 	msr	BASEPRI, r3
 8006c8a:	f3bf 8f6f 	isb	sy
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	607b      	str	r3, [r7, #4]
    }
 8006c94:	bf00      	nop
 8006c96:	e7fe      	b.n	8006c96 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c98:	4b0e      	ldr	r3, [pc, #56]	; (8006cd4 <vPortValidateInterruptPriority+0x78>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ca0:	4b0d      	ldr	r3, [pc, #52]	; (8006cd8 <vPortValidateInterruptPriority+0x7c>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d90a      	bls.n	8006cbe <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8006ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cac:	f383 8811 	msr	BASEPRI, r3
 8006cb0:	f3bf 8f6f 	isb	sy
 8006cb4:	f3bf 8f4f 	dsb	sy
 8006cb8:	603b      	str	r3, [r7, #0]
    }
 8006cba:	bf00      	nop
 8006cbc:	e7fe      	b.n	8006cbc <vPortValidateInterruptPriority+0x60>
    }
 8006cbe:	bf00      	nop
 8006cc0:	3714      	adds	r7, #20
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	e000e3f0 	.word	0xe000e3f0
 8006cd0:	200002c4 	.word	0x200002c4
 8006cd4:	e000ed0c 	.word	0xe000ed0c
 8006cd8:	200002c8 	.word	0x200002c8

08006cdc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b08a      	sub	sp, #40	; 0x28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8006ce8:	f7fe fc0a 	bl	8005500 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8006cec:	4b65      	ldr	r3, [pc, #404]	; (8006e84 <pvPortMalloc+0x1a8>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d101      	bne.n	8006cf8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006cf4:	f000 f934 	bl	8006f60 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006cf8:	4b63      	ldr	r3, [pc, #396]	; (8006e88 <pvPortMalloc+0x1ac>)
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4013      	ands	r3, r2
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f040 80a7 	bne.w	8006e54 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d02d      	beq.n	8006d68 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8006d0c:	2208      	movs	r2, #8
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d227      	bcs.n	8006d68 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8006d18:	2208      	movs	r2, #8
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f003 0307 	and.w	r3, r3, #7
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d021      	beq.n	8006d6e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f023 0307 	bic.w	r3, r3, #7
 8006d30:	3308      	adds	r3, #8
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d214      	bcs.n	8006d62 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f023 0307 	bic.w	r3, r3, #7
 8006d3e:	3308      	adds	r3, #8
 8006d40:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f003 0307 	and.w	r3, r3, #7
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d010      	beq.n	8006d6e <pvPortMalloc+0x92>
        __asm volatile
 8006d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d50:	f383 8811 	msr	BASEPRI, r3
 8006d54:	f3bf 8f6f 	isb	sy
 8006d58:	f3bf 8f4f 	dsb	sy
 8006d5c:	617b      	str	r3, [r7, #20]
    }
 8006d5e:	bf00      	nop
 8006d60:	e7fe      	b.n	8006d60 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8006d62:	2300      	movs	r3, #0
 8006d64:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d66:	e002      	b.n	8006d6e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	607b      	str	r3, [r7, #4]
 8006d6c:	e000      	b.n	8006d70 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d6e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d06e      	beq.n	8006e54 <pvPortMalloc+0x178>
 8006d76:	4b45      	ldr	r3, [pc, #276]	; (8006e8c <pvPortMalloc+0x1b0>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d869      	bhi.n	8006e54 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006d80:	4b43      	ldr	r3, [pc, #268]	; (8006e90 <pvPortMalloc+0x1b4>)
 8006d82:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8006d84:	4b42      	ldr	r3, [pc, #264]	; (8006e90 <pvPortMalloc+0x1b4>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d8a:	e004      	b.n	8006d96 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8006d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d903      	bls.n	8006da8 <pvPortMalloc+0xcc>
 8006da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d1f1      	bne.n	8006d8c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006da8:	4b36      	ldr	r3, [pc, #216]	; (8006e84 <pvPortMalloc+0x1a8>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d050      	beq.n	8006e54 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006db2:	6a3b      	ldr	r3, [r7, #32]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2208      	movs	r2, #8
 8006db8:	4413      	add	r3, r2
 8006dba:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	6a3b      	ldr	r3, [r7, #32]
 8006dc2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc6:	685a      	ldr	r2, [r3, #4]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	1ad2      	subs	r2, r2, r3
 8006dcc:	2308      	movs	r3, #8
 8006dce:	005b      	lsls	r3, r3, #1
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d91f      	bls.n	8006e14 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4413      	add	r3, r2
 8006dda:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	f003 0307 	and.w	r3, r3, #7
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00a      	beq.n	8006dfc <pvPortMalloc+0x120>
        __asm volatile
 8006de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dea:	f383 8811 	msr	BASEPRI, r3
 8006dee:	f3bf 8f6f 	isb	sy
 8006df2:	f3bf 8f4f 	dsb	sy
 8006df6:	613b      	str	r3, [r7, #16]
    }
 8006df8:	bf00      	nop
 8006dfa:	e7fe      	b.n	8006dfa <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfe:	685a      	ldr	r2, [r3, #4]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	1ad2      	subs	r2, r2, r3
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e0e:	69b8      	ldr	r0, [r7, #24]
 8006e10:	f000 f908 	bl	8007024 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e14:	4b1d      	ldr	r3, [pc, #116]	; (8006e8c <pvPortMalloc+0x1b0>)
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	4a1b      	ldr	r2, [pc, #108]	; (8006e8c <pvPortMalloc+0x1b0>)
 8006e20:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e22:	4b1a      	ldr	r3, [pc, #104]	; (8006e8c <pvPortMalloc+0x1b0>)
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	4b1b      	ldr	r3, [pc, #108]	; (8006e94 <pvPortMalloc+0x1b8>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d203      	bcs.n	8006e36 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e2e:	4b17      	ldr	r3, [pc, #92]	; (8006e8c <pvPortMalloc+0x1b0>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a18      	ldr	r2, [pc, #96]	; (8006e94 <pvPortMalloc+0x1b8>)
 8006e34:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e38:	685a      	ldr	r2, [r3, #4]
 8006e3a:	4b13      	ldr	r3, [pc, #76]	; (8006e88 <pvPortMalloc+0x1ac>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	431a      	orrs	r2, r3
 8006e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e42:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e46:	2200      	movs	r2, #0
 8006e48:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006e4a:	4b13      	ldr	r3, [pc, #76]	; (8006e98 <pvPortMalloc+0x1bc>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	4a11      	ldr	r2, [pc, #68]	; (8006e98 <pvPortMalloc+0x1bc>)
 8006e52:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006e54:	f7fe fb62 	bl	800551c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	f003 0307 	and.w	r3, r3, #7
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00a      	beq.n	8006e78 <pvPortMalloc+0x19c>
        __asm volatile
 8006e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e66:	f383 8811 	msr	BASEPRI, r3
 8006e6a:	f3bf 8f6f 	isb	sy
 8006e6e:	f3bf 8f4f 	dsb	sy
 8006e72:	60fb      	str	r3, [r7, #12]
    }
 8006e74:	bf00      	nop
 8006e76:	e7fe      	b.n	8006e76 <pvPortMalloc+0x19a>
    return pvReturn;
 8006e78:	69fb      	ldr	r3, [r7, #28]
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3728      	adds	r7, #40	; 0x28
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	20012ed4 	.word	0x20012ed4
 8006e88:	20012ee8 	.word	0x20012ee8
 8006e8c:	20012ed8 	.word	0x20012ed8
 8006e90:	20012ecc 	.word	0x20012ecc
 8006e94:	20012edc 	.word	0x20012edc
 8006e98:	20012ee0 	.word	0x20012ee0

08006e9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b086      	sub	sp, #24
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d04d      	beq.n	8006f4a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8006eae:	2308      	movs	r3, #8
 8006eb0:	425b      	negs	r3, r3
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	685a      	ldr	r2, [r3, #4]
 8006ec0:	4b24      	ldr	r3, [pc, #144]	; (8006f54 <vPortFree+0xb8>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d10a      	bne.n	8006ee0 <vPortFree+0x44>
        __asm volatile
 8006eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ece:	f383 8811 	msr	BASEPRI, r3
 8006ed2:	f3bf 8f6f 	isb	sy
 8006ed6:	f3bf 8f4f 	dsb	sy
 8006eda:	60fb      	str	r3, [r7, #12]
    }
 8006edc:	bf00      	nop
 8006ede:	e7fe      	b.n	8006ede <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00a      	beq.n	8006efe <vPortFree+0x62>
        __asm volatile
 8006ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eec:	f383 8811 	msr	BASEPRI, r3
 8006ef0:	f3bf 8f6f 	isb	sy
 8006ef4:	f3bf 8f4f 	dsb	sy
 8006ef8:	60bb      	str	r3, [r7, #8]
    }
 8006efa:	bf00      	nop
 8006efc:	e7fe      	b.n	8006efc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	685a      	ldr	r2, [r3, #4]
 8006f02:	4b14      	ldr	r3, [pc, #80]	; (8006f54 <vPortFree+0xb8>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4013      	ands	r3, r2
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d01e      	beq.n	8006f4a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d11a      	bne.n	8006f4a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	685a      	ldr	r2, [r3, #4]
 8006f18:	4b0e      	ldr	r3, [pc, #56]	; (8006f54 <vPortFree+0xb8>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	43db      	mvns	r3, r3
 8006f1e:	401a      	ands	r2, r3
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8006f24:	f7fe faec 	bl	8005500 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	685a      	ldr	r2, [r3, #4]
 8006f2c:	4b0a      	ldr	r3, [pc, #40]	; (8006f58 <vPortFree+0xbc>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4413      	add	r3, r2
 8006f32:	4a09      	ldr	r2, [pc, #36]	; (8006f58 <vPortFree+0xbc>)
 8006f34:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f36:	6938      	ldr	r0, [r7, #16]
 8006f38:	f000 f874 	bl	8007024 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006f3c:	4b07      	ldr	r3, [pc, #28]	; (8006f5c <vPortFree+0xc0>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	3301      	adds	r3, #1
 8006f42:	4a06      	ldr	r2, [pc, #24]	; (8006f5c <vPortFree+0xc0>)
 8006f44:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006f46:	f7fe fae9 	bl	800551c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006f4a:	bf00      	nop
 8006f4c:	3718      	adds	r7, #24
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	20012ee8 	.word	0x20012ee8
 8006f58:	20012ed8 	.word	0x20012ed8
 8006f5c:	20012ee4 	.word	0x20012ee4

08006f60 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006f60:	b480      	push	{r7}
 8006f62:	b085      	sub	sp, #20
 8006f64:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f66:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8006f6a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8006f6c:	4b27      	ldr	r3, [pc, #156]	; (800700c <prvHeapInit+0xac>)
 8006f6e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f003 0307 	and.w	r3, r3, #7
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00c      	beq.n	8006f94 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	3307      	adds	r3, #7
 8006f7e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f023 0307 	bic.w	r3, r3, #7
 8006f86:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	4a1f      	ldr	r2, [pc, #124]	; (800700c <prvHeapInit+0xac>)
 8006f90:	4413      	add	r3, r2
 8006f92:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f98:	4a1d      	ldr	r2, [pc, #116]	; (8007010 <prvHeapInit+0xb0>)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8006f9e:	4b1c      	ldr	r3, [pc, #112]	; (8007010 <prvHeapInit+0xb0>)
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	4413      	add	r3, r2
 8006faa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8006fac:	2208      	movs	r2, #8
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	1a9b      	subs	r3, r3, r2
 8006fb2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f023 0307 	bic.w	r3, r3, #7
 8006fba:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	4a15      	ldr	r2, [pc, #84]	; (8007014 <prvHeapInit+0xb4>)
 8006fc0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8006fc2:	4b14      	ldr	r3, [pc, #80]	; (8007014 <prvHeapInit+0xb4>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8006fca:	4b12      	ldr	r3, [pc, #72]	; (8007014 <prvHeapInit+0xb4>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	1ad2      	subs	r2, r2, r3
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006fe0:	4b0c      	ldr	r3, [pc, #48]	; (8007014 <prvHeapInit+0xb4>)
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	4a0a      	ldr	r2, [pc, #40]	; (8007018 <prvHeapInit+0xb8>)
 8006fee:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	4a09      	ldr	r2, [pc, #36]	; (800701c <prvHeapInit+0xbc>)
 8006ff6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ff8:	4b09      	ldr	r3, [pc, #36]	; (8007020 <prvHeapInit+0xc0>)
 8006ffa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006ffe:	601a      	str	r2, [r3, #0]
}
 8007000:	bf00      	nop
 8007002:	3714      	adds	r7, #20
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr
 800700c:	200002cc 	.word	0x200002cc
 8007010:	20012ecc 	.word	0x20012ecc
 8007014:	20012ed4 	.word	0x20012ed4
 8007018:	20012edc 	.word	0x20012edc
 800701c:	20012ed8 	.word	0x20012ed8
 8007020:	20012ee8 	.word	0x20012ee8

08007024 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800702c:	4b28      	ldr	r3, [pc, #160]	; (80070d0 <prvInsertBlockIntoFreeList+0xac>)
 800702e:	60fb      	str	r3, [r7, #12]
 8007030:	e002      	b.n	8007038 <prvInsertBlockIntoFreeList+0x14>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	60fb      	str	r3, [r7, #12]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	429a      	cmp	r2, r3
 8007040:	d8f7      	bhi.n	8007032 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	4413      	add	r3, r2
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	429a      	cmp	r2, r3
 8007052:	d108      	bne.n	8007066 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	685a      	ldr	r2, [r3, #4]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	441a      	add	r2, r3
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	68ba      	ldr	r2, [r7, #8]
 8007070:	441a      	add	r2, r3
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	429a      	cmp	r2, r3
 8007078:	d118      	bne.n	80070ac <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	4b15      	ldr	r3, [pc, #84]	; (80070d4 <prvInsertBlockIntoFreeList+0xb0>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	429a      	cmp	r2, r3
 8007084:	d00d      	beq.n	80070a2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	685a      	ldr	r2, [r3, #4]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	441a      	add	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	601a      	str	r2, [r3, #0]
 80070a0:	e008      	b.n	80070b4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80070a2:	4b0c      	ldr	r3, [pc, #48]	; (80070d4 <prvInsertBlockIntoFreeList+0xb0>)
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	601a      	str	r2, [r3, #0]
 80070aa:	e003      	b.n	80070b4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d002      	beq.n	80070c2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80070c2:	bf00      	nop
 80070c4:	3714      	adds	r7, #20
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	20012ecc 	.word	0x20012ecc
 80070d4:	20012ed4 	.word	0x20012ed4

080070d8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80070de:	4b26      	ldr	r3, [pc, #152]	; (8007178 <_DoInit+0xa0>)
 80070e0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80070e2:	22a8      	movs	r2, #168	; 0xa8
 80070e4:	2100      	movs	r1, #0
 80070e6:	6838      	ldr	r0, [r7, #0]
 80070e8:	f001 fed8 	bl	8008e9c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	2203      	movs	r2, #3
 80070f0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	2203      	movs	r2, #3
 80070f6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	4a20      	ldr	r2, [pc, #128]	; (800717c <_DoInit+0xa4>)
 80070fc:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	4a1f      	ldr	r2, [pc, #124]	; (8007180 <_DoInit+0xa8>)
 8007102:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800710a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	2200      	movs	r2, #0
 8007110:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	2200      	movs	r2, #0
 8007116:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	2200      	movs	r2, #0
 800711c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	4a16      	ldr	r2, [pc, #88]	; (800717c <_DoInit+0xa4>)
 8007122:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	4a17      	ldr	r2, [pc, #92]	; (8007184 <_DoInit+0xac>)
 8007128:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	2210      	movs	r2, #16
 800712e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	2200      	movs	r2, #0
 8007134:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	2200      	movs	r2, #0
 800713a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	2200      	movs	r2, #0
 8007140:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8007142:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8007146:	2300      	movs	r3, #0
 8007148:	607b      	str	r3, [r7, #4]
 800714a:	e00c      	b.n	8007166 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f1c3 030f 	rsb	r3, r3, #15
 8007152:	4a0d      	ldr	r2, [pc, #52]	; (8007188 <_DoInit+0xb0>)
 8007154:	5cd1      	ldrb	r1, [r2, r3]
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4413      	add	r3, r2
 800715c:	460a      	mov	r2, r1
 800715e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	3301      	adds	r3, #1
 8007164:	607b      	str	r3, [r7, #4]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2b0f      	cmp	r3, #15
 800716a:	d9ef      	bls.n	800714c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800716c:	f3bf 8f5f 	dmb	sy
}
 8007170:	bf00      	nop
 8007172:	3708      	adds	r7, #8
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	20012eec 	.word	0x20012eec
 800717c:	08009130 	.word	0x08009130
 8007180:	20012f94 	.word	0x20012f94
 8007184:	20013394 	.word	0x20013394
 8007188:	08009220 	.word	0x08009220

0800718c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800718c:	b580      	push	{r7, lr}
 800718e:	b08c      	sub	sp, #48	; 0x30
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8007198:	4b3e      	ldr	r3, [pc, #248]	; (8007294 <SEGGER_RTT_ReadNoLock+0x108>)
 800719a:	623b      	str	r3, [r7, #32]
 800719c:	6a3b      	ldr	r3, [r7, #32]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d101      	bne.n	80071aa <SEGGER_RTT_ReadNoLock+0x1e>
 80071a6:	f7ff ff97 	bl	80070d8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	4613      	mov	r3, r2
 80071ae:	005b      	lsls	r3, r3, #1
 80071b0:	4413      	add	r3, r2
 80071b2:	00db      	lsls	r3, r3, #3
 80071b4:	3360      	adds	r3, #96	; 0x60
 80071b6:	4a37      	ldr	r2, [pc, #220]	; (8007294 <SEGGER_RTT_ReadNoLock+0x108>)
 80071b8:	4413      	add	r3, r2
 80071ba:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	691b      	ldr	r3, [r3, #16]
 80071c4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80071cc:	2300      	movs	r3, #0
 80071ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80071d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d92b      	bls.n	8007230 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	689a      	ldr	r2, [r3, #8]
 80071dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80071e2:	697a      	ldr	r2, [r7, #20]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4293      	cmp	r3, r2
 80071e8:	bf28      	it	cs
 80071ea:	4613      	movcs	r3, r2
 80071ec:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	685a      	ldr	r2, [r3, #4]
 80071f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f4:	4413      	add	r3, r2
 80071f6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	6939      	ldr	r1, [r7, #16]
 80071fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071fe:	f001 fe3f 	bl	8008e80 <memcpy>
    NumBytesRead += NumBytesRem;
 8007202:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	4413      	add	r3, r2
 8007208:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800720a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	4413      	add	r3, r2
 8007210:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800721a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	4413      	add	r3, r2
 8007220:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007228:	429a      	cmp	r2, r3
 800722a:	d101      	bne.n	8007230 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800722c:	2300      	movs	r3, #0
 800722e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8007230:	69ba      	ldr	r2, [r7, #24]
 8007232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007234:	1ad3      	subs	r3, r2, r3
 8007236:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007238:	697a      	ldr	r2, [r7, #20]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4293      	cmp	r3, r2
 800723e:	bf28      	it	cs
 8007240:	4613      	movcs	r3, r2
 8007242:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d019      	beq.n	800727e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	685a      	ldr	r2, [r3, #4]
 800724e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007250:	4413      	add	r3, r2
 8007252:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	6939      	ldr	r1, [r7, #16]
 8007258:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800725a:	f001 fe11 	bl	8008e80 <memcpy>
    NumBytesRead += NumBytesRem;
 800725e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	4413      	add	r3, r2
 8007264:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8007266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	4413      	add	r3, r2
 800726c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8007276:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	4413      	add	r3, r2
 800727c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800727e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007280:	2b00      	cmp	r3, #0
 8007282:	d002      	beq.n	800728a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007288:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800728a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800728c:	4618      	mov	r0, r3
 800728e:	3730      	adds	r7, #48	; 0x30
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	20012eec 	.word	0x20012eec

08007298 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8007298:	b580      	push	{r7, lr}
 800729a:	b088      	sub	sp, #32
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
 80072a4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80072a6:	4b3d      	ldr	r3, [pc, #244]	; (800739c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80072a8:	61bb      	str	r3, [r7, #24]
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d101      	bne.n	80072b8 <SEGGER_RTT_AllocUpBuffer+0x20>
 80072b4:	f7ff ff10 	bl	80070d8 <_DoInit>
  SEGGER_RTT_LOCK();
 80072b8:	f3ef 8311 	mrs	r3, BASEPRI
 80072bc:	f04f 0120 	mov.w	r1, #32
 80072c0:	f381 8811 	msr	BASEPRI, r1
 80072c4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80072c6:	4b35      	ldr	r3, [pc, #212]	; (800739c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80072c8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80072ca:	2300      	movs	r3, #0
 80072cc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80072ce:	6939      	ldr	r1, [r7, #16]
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	1c5a      	adds	r2, r3, #1
 80072d4:	4613      	mov	r3, r2
 80072d6:	005b      	lsls	r3, r3, #1
 80072d8:	4413      	add	r3, r2
 80072da:	00db      	lsls	r3, r3, #3
 80072dc:	440b      	add	r3, r1
 80072de:	3304      	adds	r3, #4
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d008      	beq.n	80072f8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	3301      	adds	r3, #1
 80072ea:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	69fa      	ldr	r2, [r7, #28]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	dbeb      	blt.n	80072ce <SEGGER_RTT_AllocUpBuffer+0x36>
 80072f6:	e000      	b.n	80072fa <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80072f8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	69fa      	ldr	r2, [r7, #28]
 8007300:	429a      	cmp	r2, r3
 8007302:	da3f      	bge.n	8007384 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8007304:	6939      	ldr	r1, [r7, #16]
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	1c5a      	adds	r2, r3, #1
 800730a:	4613      	mov	r3, r2
 800730c:	005b      	lsls	r3, r3, #1
 800730e:	4413      	add	r3, r2
 8007310:	00db      	lsls	r3, r3, #3
 8007312:	440b      	add	r3, r1
 8007314:	68fa      	ldr	r2, [r7, #12]
 8007316:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8007318:	6939      	ldr	r1, [r7, #16]
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	1c5a      	adds	r2, r3, #1
 800731e:	4613      	mov	r3, r2
 8007320:	005b      	lsls	r3, r3, #1
 8007322:	4413      	add	r3, r2
 8007324:	00db      	lsls	r3, r3, #3
 8007326:	440b      	add	r3, r1
 8007328:	3304      	adds	r3, #4
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800732e:	6939      	ldr	r1, [r7, #16]
 8007330:	69fa      	ldr	r2, [r7, #28]
 8007332:	4613      	mov	r3, r2
 8007334:	005b      	lsls	r3, r3, #1
 8007336:	4413      	add	r3, r2
 8007338:	00db      	lsls	r3, r3, #3
 800733a:	440b      	add	r3, r1
 800733c:	3320      	adds	r3, #32
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8007342:	6939      	ldr	r1, [r7, #16]
 8007344:	69fa      	ldr	r2, [r7, #28]
 8007346:	4613      	mov	r3, r2
 8007348:	005b      	lsls	r3, r3, #1
 800734a:	4413      	add	r3, r2
 800734c:	00db      	lsls	r3, r3, #3
 800734e:	440b      	add	r3, r1
 8007350:	3328      	adds	r3, #40	; 0x28
 8007352:	2200      	movs	r2, #0
 8007354:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8007356:	6939      	ldr	r1, [r7, #16]
 8007358:	69fa      	ldr	r2, [r7, #28]
 800735a:	4613      	mov	r3, r2
 800735c:	005b      	lsls	r3, r3, #1
 800735e:	4413      	add	r3, r2
 8007360:	00db      	lsls	r3, r3, #3
 8007362:	440b      	add	r3, r1
 8007364:	3324      	adds	r3, #36	; 0x24
 8007366:	2200      	movs	r2, #0
 8007368:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800736a:	6939      	ldr	r1, [r7, #16]
 800736c:	69fa      	ldr	r2, [r7, #28]
 800736e:	4613      	mov	r3, r2
 8007370:	005b      	lsls	r3, r3, #1
 8007372:	4413      	add	r3, r2
 8007374:	00db      	lsls	r3, r3, #3
 8007376:	440b      	add	r3, r1
 8007378:	332c      	adds	r3, #44	; 0x2c
 800737a:	683a      	ldr	r2, [r7, #0]
 800737c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800737e:	f3bf 8f5f 	dmb	sy
 8007382:	e002      	b.n	800738a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8007384:	f04f 33ff 	mov.w	r3, #4294967295
 8007388:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8007390:	69fb      	ldr	r3, [r7, #28]
}
 8007392:	4618      	mov	r0, r3
 8007394:	3720      	adds	r7, #32
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	20012eec 	.word	0x20012eec

080073a0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b08a      	sub	sp, #40	; 0x28
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]
 80073ac:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80073ae:	4b21      	ldr	r3, [pc, #132]	; (8007434 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80073b0:	623b      	str	r3, [r7, #32]
 80073b2:	6a3b      	ldr	r3, [r7, #32]
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d101      	bne.n	80073c0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80073bc:	f7ff fe8c 	bl	80070d8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80073c0:	4b1c      	ldr	r3, [pc, #112]	; (8007434 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80073c2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d82c      	bhi.n	8007424 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80073ca:	f3ef 8311 	mrs	r3, BASEPRI
 80073ce:	f04f 0120 	mov.w	r1, #32
 80073d2:	f381 8811 	msr	BASEPRI, r1
 80073d6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	4613      	mov	r3, r2
 80073dc:	005b      	lsls	r3, r3, #1
 80073de:	4413      	add	r3, r2
 80073e0:	00db      	lsls	r3, r3, #3
 80073e2:	3360      	adds	r3, #96	; 0x60
 80073e4:	69fa      	ldr	r2, [r7, #28]
 80073e6:	4413      	add	r3, r2
 80073e8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00e      	beq.n	800740e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	68ba      	ldr	r2, [r7, #8]
 80073f4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	683a      	ldr	r2, [r7, #0]
 8007400:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	2200      	movs	r2, #0
 8007406:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	2200      	movs	r2, #0
 800740c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007412:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8007414:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800741e:	2300      	movs	r3, #0
 8007420:	627b      	str	r3, [r7, #36]	; 0x24
 8007422:	e002      	b.n	800742a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8007424:	f04f 33ff 	mov.w	r3, #4294967295
 8007428:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800742a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800742c:	4618      	mov	r0, r3
 800742e:	3728      	adds	r7, #40	; 0x28
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}
 8007434:	20012eec 	.word	0x20012eec

08007438 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8007438:	b480      	push	{r7}
 800743a:	b087      	sub	sp, #28
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8007444:	2300      	movs	r3, #0
 8007446:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00f      	beq.n	800746e <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800744e:	e002      	b.n	8007456 <_EncodeStr+0x1e>
      Len++;
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	3301      	adds	r3, #1
 8007454:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8007456:	68ba      	ldr	r2, [r7, #8]
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	4413      	add	r3, r2
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d1f6      	bne.n	8007450 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8007462:	693a      	ldr	r2, [r7, #16]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	429a      	cmp	r2, r3
 8007468:	d901      	bls.n	800746e <_EncodeStr+0x36>
      Len = Limit;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	2bfe      	cmp	r3, #254	; 0xfe
 8007472:	d806      	bhi.n	8007482 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	1c5a      	adds	r2, r3, #1
 8007478:	60fa      	str	r2, [r7, #12]
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	b2d2      	uxtb	r2, r2
 800747e:	701a      	strb	r2, [r3, #0]
 8007480:	e011      	b.n	80074a6 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	1c5a      	adds	r2, r3, #1
 8007486:	60fa      	str	r2, [r7, #12]
 8007488:	22ff      	movs	r2, #255	; 0xff
 800748a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	1c5a      	adds	r2, r3, #1
 8007490:	60fa      	str	r2, [r7, #12]
 8007492:	693a      	ldr	r2, [r7, #16]
 8007494:	b2d2      	uxtb	r2, r2
 8007496:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	0a19      	lsrs	r1, r3, #8
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	1c5a      	adds	r2, r3, #1
 80074a0:	60fa      	str	r2, [r7, #12]
 80074a2:	b2ca      	uxtb	r2, r1
 80074a4:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80074a6:	2300      	movs	r3, #0
 80074a8:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80074aa:	e00a      	b.n	80074c2 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	1c53      	adds	r3, r2, #1
 80074b0:	60bb      	str	r3, [r7, #8]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	1c59      	adds	r1, r3, #1
 80074b6:	60f9      	str	r1, [r7, #12]
 80074b8:	7812      	ldrb	r2, [r2, #0]
 80074ba:	701a      	strb	r2, [r3, #0]
    n++;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	3301      	adds	r3, #1
 80074c0:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d3f0      	bcc.n	80074ac <_EncodeStr+0x74>
  }
  return pPayload;
 80074ca:	68fb      	ldr	r3, [r7, #12]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	371c      	adds	r7, #28
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	3307      	adds	r3, #7
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80074f6:	4b35      	ldr	r3, [pc, #212]	; (80075cc <_HandleIncomingPacket+0xdc>)
 80074f8:	7e1b      	ldrb	r3, [r3, #24]
 80074fa:	4618      	mov	r0, r3
 80074fc:	1cfb      	adds	r3, r7, #3
 80074fe:	2201      	movs	r2, #1
 8007500:	4619      	mov	r1, r3
 8007502:	f7ff fe43 	bl	800718c <SEGGER_RTT_ReadNoLock>
 8007506:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d052      	beq.n	80075b4 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 800750e:	78fb      	ldrb	r3, [r7, #3]
 8007510:	2b80      	cmp	r3, #128	; 0x80
 8007512:	d031      	beq.n	8007578 <_HandleIncomingPacket+0x88>
 8007514:	2b80      	cmp	r3, #128	; 0x80
 8007516:	dc40      	bgt.n	800759a <_HandleIncomingPacket+0xaa>
 8007518:	2b07      	cmp	r3, #7
 800751a:	dc15      	bgt.n	8007548 <_HandleIncomingPacket+0x58>
 800751c:	2b00      	cmp	r3, #0
 800751e:	dd3c      	ble.n	800759a <_HandleIncomingPacket+0xaa>
 8007520:	3b01      	subs	r3, #1
 8007522:	2b06      	cmp	r3, #6
 8007524:	d839      	bhi.n	800759a <_HandleIncomingPacket+0xaa>
 8007526:	a201      	add	r2, pc, #4	; (adr r2, 800752c <_HandleIncomingPacket+0x3c>)
 8007528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752c:	0800754f 	.word	0x0800754f
 8007530:	08007555 	.word	0x08007555
 8007534:	0800755b 	.word	0x0800755b
 8007538:	08007561 	.word	0x08007561
 800753c:	08007567 	.word	0x08007567
 8007540:	0800756d 	.word	0x0800756d
 8007544:	08007573 	.word	0x08007573
 8007548:	2b7f      	cmp	r3, #127	; 0x7f
 800754a:	d035      	beq.n	80075b8 <_HandleIncomingPacket+0xc8>
 800754c:	e025      	b.n	800759a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800754e:	f000 fced 	bl	8007f2c <SEGGER_SYSVIEW_Start>
      break;
 8007552:	e036      	b.n	80075c2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8007554:	f000 fda4 	bl	80080a0 <SEGGER_SYSVIEW_Stop>
      break;
 8007558:	e033      	b.n	80075c2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800755a:	f000 ff7d 	bl	8008458 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800755e:	e030      	b.n	80075c2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8007560:	f000 ff42 	bl	80083e8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8007564:	e02d      	b.n	80075c2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8007566:	f000 fdc1 	bl	80080ec <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800756a:	e02a      	b.n	80075c2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800756c:	f001 fa10 	bl	8008990 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8007570:	e027      	b.n	80075c2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8007572:	f001 f9ef 	bl	8008954 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8007576:	e024      	b.n	80075c2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007578:	4b14      	ldr	r3, [pc, #80]	; (80075cc <_HandleIncomingPacket+0xdc>)
 800757a:	7e1b      	ldrb	r3, [r3, #24]
 800757c:	4618      	mov	r0, r3
 800757e:	1cfb      	adds	r3, r7, #3
 8007580:	2201      	movs	r2, #1
 8007582:	4619      	mov	r1, r3
 8007584:	f7ff fe02 	bl	800718c <SEGGER_RTT_ReadNoLock>
 8007588:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d015      	beq.n	80075bc <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8007590:	78fb      	ldrb	r3, [r7, #3]
 8007592:	4618      	mov	r0, r3
 8007594:	f001 f95e 	bl	8008854 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8007598:	e010      	b.n	80075bc <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800759a:	78fb      	ldrb	r3, [r7, #3]
 800759c:	b25b      	sxtb	r3, r3
 800759e:	2b00      	cmp	r3, #0
 80075a0:	da0e      	bge.n	80075c0 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80075a2:	4b0a      	ldr	r3, [pc, #40]	; (80075cc <_HandleIncomingPacket+0xdc>)
 80075a4:	7e1b      	ldrb	r3, [r3, #24]
 80075a6:	4618      	mov	r0, r3
 80075a8:	1cfb      	adds	r3, r7, #3
 80075aa:	2201      	movs	r2, #1
 80075ac:	4619      	mov	r1, r3
 80075ae:	f7ff fded 	bl	800718c <SEGGER_RTT_ReadNoLock>
      }
      break;
 80075b2:	e005      	b.n	80075c0 <_HandleIncomingPacket+0xd0>
    }
  }
 80075b4:	bf00      	nop
 80075b6:	e004      	b.n	80075c2 <_HandleIncomingPacket+0xd2>
      break;
 80075b8:	bf00      	nop
 80075ba:	e002      	b.n	80075c2 <_HandleIncomingPacket+0xd2>
      break;
 80075bc:	bf00      	nop
 80075be:	e000      	b.n	80075c2 <_HandleIncomingPacket+0xd2>
      break;
 80075c0:	bf00      	nop
}
 80075c2:	bf00      	nop
 80075c4:	3708      	adds	r7, #8
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	200143ac 	.word	0x200143ac

080075d0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b08c      	sub	sp, #48	; 0x30
 80075d4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80075d6:	2301      	movs	r3, #1
 80075d8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80075da:	1d3b      	adds	r3, r7, #4
 80075dc:	3301      	adds	r3, #1
 80075de:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075e4:	4b31      	ldr	r3, [pc, #196]	; (80076ac <_TrySendOverflowPacket+0xdc>)
 80075e6:	695b      	ldr	r3, [r3, #20]
 80075e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80075ea:	e00b      	b.n	8007604 <_TrySendOverflowPacket+0x34>
 80075ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ee:	b2da      	uxtb	r2, r3
 80075f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f2:	1c59      	adds	r1, r3, #1
 80075f4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80075f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80075fa:	b2d2      	uxtb	r2, r2
 80075fc:	701a      	strb	r2, [r3, #0]
 80075fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007600:	09db      	lsrs	r3, r3, #7
 8007602:	62bb      	str	r3, [r7, #40]	; 0x28
 8007604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007606:	2b7f      	cmp	r3, #127	; 0x7f
 8007608:	d8f0      	bhi.n	80075ec <_TrySendOverflowPacket+0x1c>
 800760a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800760c:	1c5a      	adds	r2, r3, #1
 800760e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007612:	b2d2      	uxtb	r2, r2
 8007614:	701a      	strb	r2, [r3, #0]
 8007616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007618:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800761a:	4b25      	ldr	r3, [pc, #148]	; (80076b0 <_TrySendOverflowPacket+0xe0>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8007620:	4b22      	ldr	r3, [pc, #136]	; (80076ac <_TrySendOverflowPacket+0xdc>)
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	69ba      	ldr	r2, [r7, #24]
 8007626:	1ad3      	subs	r3, r2, r3
 8007628:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	627b      	str	r3, [r7, #36]	; 0x24
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	623b      	str	r3, [r7, #32]
 8007632:	e00b      	b.n	800764c <_TrySendOverflowPacket+0x7c>
 8007634:	6a3b      	ldr	r3, [r7, #32]
 8007636:	b2da      	uxtb	r2, r3
 8007638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763a:	1c59      	adds	r1, r3, #1
 800763c:	6279      	str	r1, [r7, #36]	; 0x24
 800763e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007642:	b2d2      	uxtb	r2, r2
 8007644:	701a      	strb	r2, [r3, #0]
 8007646:	6a3b      	ldr	r3, [r7, #32]
 8007648:	09db      	lsrs	r3, r3, #7
 800764a:	623b      	str	r3, [r7, #32]
 800764c:	6a3b      	ldr	r3, [r7, #32]
 800764e:	2b7f      	cmp	r3, #127	; 0x7f
 8007650:	d8f0      	bhi.n	8007634 <_TrySendOverflowPacket+0x64>
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	1c5a      	adds	r2, r3, #1
 8007656:	627a      	str	r2, [r7, #36]	; 0x24
 8007658:	6a3a      	ldr	r2, [r7, #32]
 800765a:	b2d2      	uxtb	r2, r2
 800765c:	701a      	strb	r2, [r3, #0]
 800765e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007660:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8007662:	4b12      	ldr	r3, [pc, #72]	; (80076ac <_TrySendOverflowPacket+0xdc>)
 8007664:	785b      	ldrb	r3, [r3, #1]
 8007666:	4618      	mov	r0, r3
 8007668:	1d3b      	adds	r3, r7, #4
 800766a:	69fa      	ldr	r2, [r7, #28]
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	461a      	mov	r2, r3
 8007670:	1d3b      	adds	r3, r7, #4
 8007672:	4619      	mov	r1, r3
 8007674:	f7f8 fdbc 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007678:	4603      	mov	r3, r0
 800767a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d009      	beq.n	8007696 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8007682:	4a0a      	ldr	r2, [pc, #40]	; (80076ac <_TrySendOverflowPacket+0xdc>)
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8007688:	4b08      	ldr	r3, [pc, #32]	; (80076ac <_TrySendOverflowPacket+0xdc>)
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	3b01      	subs	r3, #1
 800768e:	b2da      	uxtb	r2, r3
 8007690:	4b06      	ldr	r3, [pc, #24]	; (80076ac <_TrySendOverflowPacket+0xdc>)
 8007692:	701a      	strb	r2, [r3, #0]
 8007694:	e004      	b.n	80076a0 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8007696:	4b05      	ldr	r3, [pc, #20]	; (80076ac <_TrySendOverflowPacket+0xdc>)
 8007698:	695b      	ldr	r3, [r3, #20]
 800769a:	3301      	adds	r3, #1
 800769c:	4a03      	ldr	r2, [pc, #12]	; (80076ac <_TrySendOverflowPacket+0xdc>)
 800769e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80076a0:	693b      	ldr	r3, [r7, #16]
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3730      	adds	r7, #48	; 0x30
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	200143ac 	.word	0x200143ac
 80076b0:	e0001004 	.word	0xe0001004

080076b4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b08a      	sub	sp, #40	; 0x28
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80076c0:	4b98      	ldr	r3, [pc, #608]	; (8007924 <_SendPacket+0x270>)
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d010      	beq.n	80076ea <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80076c8:	4b96      	ldr	r3, [pc, #600]	; (8007924 <_SendPacket+0x270>)
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f000 812d 	beq.w	800792c <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80076d2:	4b94      	ldr	r3, [pc, #592]	; (8007924 <_SendPacket+0x270>)
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	d109      	bne.n	80076ee <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80076da:	f7ff ff79 	bl	80075d0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80076de:	4b91      	ldr	r3, [pc, #580]	; (8007924 <_SendPacket+0x270>)
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	f040 8124 	bne.w	8007930 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80076e8:	e001      	b.n	80076ee <_SendPacket+0x3a>
    goto Send;
 80076ea:	bf00      	nop
 80076ec:	e000      	b.n	80076f0 <_SendPacket+0x3c>
Send:
 80076ee:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b1f      	cmp	r3, #31
 80076f4:	d809      	bhi.n	800770a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80076f6:	4b8b      	ldr	r3, [pc, #556]	; (8007924 <_SendPacket+0x270>)
 80076f8:	69da      	ldr	r2, [r3, #28]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007700:	f003 0301 	and.w	r3, r3, #1
 8007704:	2b00      	cmp	r3, #0
 8007706:	f040 8115 	bne.w	8007934 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2b17      	cmp	r3, #23
 800770e:	d807      	bhi.n	8007720 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	3b01      	subs	r3, #1
 8007714:	60fb      	str	r3, [r7, #12]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	b2da      	uxtb	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	701a      	strb	r2, [r3, #0]
 800771e:	e0c4      	b.n	80078aa <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8007720:	68ba      	ldr	r2, [r7, #8]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	2b7f      	cmp	r3, #127	; 0x7f
 800772c:	d912      	bls.n	8007754 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	09da      	lsrs	r2, r3, #7
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	3b01      	subs	r3, #1
 8007736:	60fb      	str	r3, [r7, #12]
 8007738:	b2d2      	uxtb	r2, r2
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	b2db      	uxtb	r3, r3
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	3a01      	subs	r2, #1
 8007746:	60fa      	str	r2, [r7, #12]
 8007748:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800774c:	b2da      	uxtb	r2, r3
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	701a      	strb	r2, [r3, #0]
 8007752:	e006      	b.n	8007762 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	3b01      	subs	r3, #1
 8007758:	60fb      	str	r3, [r7, #12]
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	b2da      	uxtb	r2, r3
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2b7e      	cmp	r3, #126	; 0x7e
 8007766:	d807      	bhi.n	8007778 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	3b01      	subs	r3, #1
 800776c:	60fb      	str	r3, [r7, #12]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	b2da      	uxtb	r2, r3
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	701a      	strb	r2, [r3, #0]
 8007776:	e098      	b.n	80078aa <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800777e:	d212      	bcs.n	80077a6 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	09da      	lsrs	r2, r3, #7
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	3b01      	subs	r3, #1
 8007788:	60fb      	str	r3, [r7, #12]
 800778a:	b2d2      	uxtb	r2, r2
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	b2db      	uxtb	r3, r3
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	3a01      	subs	r2, #1
 8007798:	60fa      	str	r2, [r7, #12]
 800779a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800779e:	b2da      	uxtb	r2, r3
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	701a      	strb	r2, [r3, #0]
 80077a4:	e081      	b.n	80078aa <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077ac:	d21d      	bcs.n	80077ea <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	0b9a      	lsrs	r2, r3, #14
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	3b01      	subs	r3, #1
 80077b6:	60fb      	str	r3, [r7, #12]
 80077b8:	b2d2      	uxtb	r2, r2
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	09db      	lsrs	r3, r3, #7
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	3a01      	subs	r2, #1
 80077c8:	60fa      	str	r2, [r7, #12]
 80077ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80077ce:	b2da      	uxtb	r2, r3
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	3a01      	subs	r2, #1
 80077dc:	60fa      	str	r2, [r7, #12]
 80077de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80077e2:	b2da      	uxtb	r2, r3
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	701a      	strb	r2, [r3, #0]
 80077e8:	e05f      	b.n	80078aa <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077f0:	d228      	bcs.n	8007844 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	0d5a      	lsrs	r2, r3, #21
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	3b01      	subs	r3, #1
 80077fa:	60fb      	str	r3, [r7, #12]
 80077fc:	b2d2      	uxtb	r2, r2
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	0b9b      	lsrs	r3, r3, #14
 8007806:	b2db      	uxtb	r3, r3
 8007808:	68fa      	ldr	r2, [r7, #12]
 800780a:	3a01      	subs	r2, #1
 800780c:	60fa      	str	r2, [r7, #12]
 800780e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007812:	b2da      	uxtb	r2, r3
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	09db      	lsrs	r3, r3, #7
 800781c:	b2db      	uxtb	r3, r3
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	3a01      	subs	r2, #1
 8007822:	60fa      	str	r2, [r7, #12]
 8007824:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007828:	b2da      	uxtb	r2, r3
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	b2db      	uxtb	r3, r3
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	3a01      	subs	r2, #1
 8007836:	60fa      	str	r2, [r7, #12]
 8007838:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800783c:	b2da      	uxtb	r2, r3
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	701a      	strb	r2, [r3, #0]
 8007842:	e032      	b.n	80078aa <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	0f1a      	lsrs	r2, r3, #28
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	3b01      	subs	r3, #1
 800784c:	60fb      	str	r3, [r7, #12]
 800784e:	b2d2      	uxtb	r2, r2
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	0d5b      	lsrs	r3, r3, #21
 8007858:	b2db      	uxtb	r3, r3
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	3a01      	subs	r2, #1
 800785e:	60fa      	str	r2, [r7, #12]
 8007860:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007864:	b2da      	uxtb	r2, r3
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	0b9b      	lsrs	r3, r3, #14
 800786e:	b2db      	uxtb	r3, r3
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	3a01      	subs	r2, #1
 8007874:	60fa      	str	r2, [r7, #12]
 8007876:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800787a:	b2da      	uxtb	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	09db      	lsrs	r3, r3, #7
 8007884:	b2db      	uxtb	r3, r3
 8007886:	68fa      	ldr	r2, [r7, #12]
 8007888:	3a01      	subs	r2, #1
 800788a:	60fa      	str	r2, [r7, #12]
 800788c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007890:	b2da      	uxtb	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	b2db      	uxtb	r3, r3
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	3a01      	subs	r2, #1
 800789e:	60fa      	str	r2, [r7, #12]
 80078a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80078a4:	b2da      	uxtb	r2, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80078aa:	4b1f      	ldr	r3, [pc, #124]	; (8007928 <_SendPacket+0x274>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80078b0:	4b1c      	ldr	r3, [pc, #112]	; (8007924 <_SendPacket+0x270>)
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	69ba      	ldr	r2, [r7, #24]
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	627b      	str	r3, [r7, #36]	; 0x24
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	623b      	str	r3, [r7, #32]
 80078c2:	e00b      	b.n	80078dc <_SendPacket+0x228>
 80078c4:	6a3b      	ldr	r3, [r7, #32]
 80078c6:	b2da      	uxtb	r2, r3
 80078c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ca:	1c59      	adds	r1, r3, #1
 80078cc:	6279      	str	r1, [r7, #36]	; 0x24
 80078ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078d2:	b2d2      	uxtb	r2, r2
 80078d4:	701a      	strb	r2, [r3, #0]
 80078d6:	6a3b      	ldr	r3, [r7, #32]
 80078d8:	09db      	lsrs	r3, r3, #7
 80078da:	623b      	str	r3, [r7, #32]
 80078dc:	6a3b      	ldr	r3, [r7, #32]
 80078de:	2b7f      	cmp	r3, #127	; 0x7f
 80078e0:	d8f0      	bhi.n	80078c4 <_SendPacket+0x210>
 80078e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e4:	1c5a      	adds	r2, r3, #1
 80078e6:	627a      	str	r2, [r7, #36]	; 0x24
 80078e8:	6a3a      	ldr	r2, [r7, #32]
 80078ea:	b2d2      	uxtb	r2, r2
 80078ec:	701a      	strb	r2, [r3, #0]
 80078ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80078f2:	4b0c      	ldr	r3, [pc, #48]	; (8007924 <_SendPacket+0x270>)
 80078f4:	785b      	ldrb	r3, [r3, #1]
 80078f6:	4618      	mov	r0, r3
 80078f8:	68ba      	ldr	r2, [r7, #8]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	1ad3      	subs	r3, r2, r3
 80078fe:	461a      	mov	r2, r3
 8007900:	68f9      	ldr	r1, [r7, #12]
 8007902:	f7f8 fc75 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007906:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d003      	beq.n	8007916 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800790e:	4a05      	ldr	r2, [pc, #20]	; (8007924 <_SendPacket+0x270>)
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	60d3      	str	r3, [r2, #12]
 8007914:	e00f      	b.n	8007936 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8007916:	4b03      	ldr	r3, [pc, #12]	; (8007924 <_SendPacket+0x270>)
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	3301      	adds	r3, #1
 800791c:	b2da      	uxtb	r2, r3
 800791e:	4b01      	ldr	r3, [pc, #4]	; (8007924 <_SendPacket+0x270>)
 8007920:	701a      	strb	r2, [r3, #0]
 8007922:	e008      	b.n	8007936 <_SendPacket+0x282>
 8007924:	200143ac 	.word	0x200143ac
 8007928:	e0001004 	.word	0xe0001004
    goto SendDone;
 800792c:	bf00      	nop
 800792e:	e002      	b.n	8007936 <_SendPacket+0x282>
      goto SendDone;
 8007930:	bf00      	nop
 8007932:	e000      	b.n	8007936 <_SendPacket+0x282>
      goto SendDone;
 8007934:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007936:	4b14      	ldr	r3, [pc, #80]	; (8007988 <_SendPacket+0x2d4>)
 8007938:	7e1b      	ldrb	r3, [r3, #24]
 800793a:	4619      	mov	r1, r3
 800793c:	4a13      	ldr	r2, [pc, #76]	; (800798c <_SendPacket+0x2d8>)
 800793e:	460b      	mov	r3, r1
 8007940:	005b      	lsls	r3, r3, #1
 8007942:	440b      	add	r3, r1
 8007944:	00db      	lsls	r3, r3, #3
 8007946:	4413      	add	r3, r2
 8007948:	336c      	adds	r3, #108	; 0x6c
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	4b0e      	ldr	r3, [pc, #56]	; (8007988 <_SendPacket+0x2d4>)
 800794e:	7e1b      	ldrb	r3, [r3, #24]
 8007950:	4618      	mov	r0, r3
 8007952:	490e      	ldr	r1, [pc, #56]	; (800798c <_SendPacket+0x2d8>)
 8007954:	4603      	mov	r3, r0
 8007956:	005b      	lsls	r3, r3, #1
 8007958:	4403      	add	r3, r0
 800795a:	00db      	lsls	r3, r3, #3
 800795c:	440b      	add	r3, r1
 800795e:	3370      	adds	r3, #112	; 0x70
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	429a      	cmp	r2, r3
 8007964:	d00b      	beq.n	800797e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007966:	4b08      	ldr	r3, [pc, #32]	; (8007988 <_SendPacket+0x2d4>)
 8007968:	789b      	ldrb	r3, [r3, #2]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d107      	bne.n	800797e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800796e:	4b06      	ldr	r3, [pc, #24]	; (8007988 <_SendPacket+0x2d4>)
 8007970:	2201      	movs	r2, #1
 8007972:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007974:	f7ff fdbc 	bl	80074f0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007978:	4b03      	ldr	r3, [pc, #12]	; (8007988 <_SendPacket+0x2d4>)
 800797a:	2200      	movs	r2, #0
 800797c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800797e:	bf00      	nop
 8007980:	3728      	adds	r7, #40	; 0x28
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	200143ac 	.word	0x200143ac
 800798c:	20012eec 	.word	0x20012eec

08007990 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 8007990:	b580      	push	{r7, lr}
 8007992:	b0a2      	sub	sp, #136	; 0x88
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 80079a0:	2300      	movs	r3, #0
 80079a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 80079a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079a8:	1c5a      	adds	r2, r3, #1
 80079aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 80079b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d01d      	beq.n	80079f6 <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 80079ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079be:	2b25      	cmp	r3, #37	; 0x25
 80079c0:	d1f1      	bne.n	80079a6 <_VPrintHost+0x16>
      c = *p;
 80079c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	1d19      	adds	r1, r3, #4
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	6011      	str	r1, [r2, #0]
 80079d4:	6819      	ldr	r1, [r3, #0]
 80079d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80079da:	1c5a      	adds	r2, r3, #1
 80079dc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80079e0:	460a      	mov	r2, r1
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	3388      	adds	r3, #136	; 0x88
 80079e6:	443b      	add	r3, r7
 80079e8:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 80079ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80079f0:	2b10      	cmp	r3, #16
 80079f2:	d002      	beq.n	80079fa <_VPrintHost+0x6a>
    c = *p++;
 80079f4:	e7d7      	b.n	80079a6 <_VPrintHost+0x16>
      break;
 80079f6:	bf00      	nop
 80079f8:	e000      	b.n	80079fc <_VPrintHost+0x6c>
        break;
 80079fa:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 80079fc:	f3ef 8311 	mrs	r3, BASEPRI
 8007a00:	f04f 0120 	mov.w	r1, #32
 8007a04:	f381 8811 	msr	BASEPRI, r1
 8007a08:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a0a:	483f      	ldr	r0, [pc, #252]	; (8007b08 <_VPrintHost+0x178>)
 8007a0c:	f7ff fd64 	bl	80074d8 <_PreparePacket>
 8007a10:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007a12:	2280      	movs	r2, #128	; 0x80
 8007a14:	68f9      	ldr	r1, [r7, #12]
 8007a16:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007a18:	f7ff fd0e 	bl	8007438 <_EncodeStr>
 8007a1c:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 8007a1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a20:	677b      	str	r3, [r7, #116]	; 0x74
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	673b      	str	r3, [r7, #112]	; 0x70
 8007a26:	e00b      	b.n	8007a40 <_VPrintHost+0xb0>
 8007a28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a2a:	b2da      	uxtb	r2, r3
 8007a2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a2e:	1c59      	adds	r1, r3, #1
 8007a30:	6779      	str	r1, [r7, #116]	; 0x74
 8007a32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a36:	b2d2      	uxtb	r2, r2
 8007a38:	701a      	strb	r2, [r3, #0]
 8007a3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a3c:	09db      	lsrs	r3, r3, #7
 8007a3e:	673b      	str	r3, [r7, #112]	; 0x70
 8007a40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a42:	2b7f      	cmp	r3, #127	; 0x7f
 8007a44:	d8f0      	bhi.n	8007a28 <_VPrintHost+0x98>
 8007a46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a48:	1c5a      	adds	r2, r3, #1
 8007a4a:	677a      	str	r2, [r7, #116]	; 0x74
 8007a4c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007a4e:	b2d2      	uxtb	r2, r2
 8007a50:	701a      	strb	r2, [r3, #0]
 8007a52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a54:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 8007a56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a60:	e00b      	b.n	8007a7a <_VPrintHost+0xea>
 8007a62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a64:	b2da      	uxtb	r2, r3
 8007a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a68:	1c59      	adds	r1, r3, #1
 8007a6a:	66f9      	str	r1, [r7, #108]	; 0x6c
 8007a6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a70:	b2d2      	uxtb	r2, r2
 8007a72:	701a      	strb	r2, [r3, #0]
 8007a74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a76:	09db      	lsrs	r3, r3, #7
 8007a78:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a7c:	2b7f      	cmp	r3, #127	; 0x7f
 8007a7e:	d8f0      	bhi.n	8007a62 <_VPrintHost+0xd2>
 8007a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a82:	1c5a      	adds	r2, r3, #1
 8007a84:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a88:	b2d2      	uxtb	r2, r2
 8007a8a:	701a      	strb	r2, [r3, #0]
 8007a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a8e:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 8007a90:	f107 0314 	add.w	r3, r7, #20
 8007a94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8007a98:	e022      	b.n	8007ae0 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 8007a9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a9c:	667b      	str	r3, [r7, #100]	; 0x64
 8007a9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	663b      	str	r3, [r7, #96]	; 0x60
 8007aa6:	e00b      	b.n	8007ac0 <_VPrintHost+0x130>
 8007aa8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007aaa:	b2da      	uxtb	r2, r3
 8007aac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007aae:	1c59      	adds	r1, r3, #1
 8007ab0:	6679      	str	r1, [r7, #100]	; 0x64
 8007ab2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ab6:	b2d2      	uxtb	r2, r2
 8007ab8:	701a      	strb	r2, [r3, #0]
 8007aba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007abc:	09db      	lsrs	r3, r3, #7
 8007abe:	663b      	str	r3, [r7, #96]	; 0x60
 8007ac0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ac2:	2b7f      	cmp	r3, #127	; 0x7f
 8007ac4:	d8f0      	bhi.n	8007aa8 <_VPrintHost+0x118>
 8007ac6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ac8:	1c5a      	adds	r2, r3, #1
 8007aca:	667a      	str	r2, [r7, #100]	; 0x64
 8007acc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007ace:	b2d2      	uxtb	r2, r2
 8007ad0:	701a      	strb	r2, [r3, #0]
 8007ad2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ad4:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 8007ad6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ada:	3304      	adds	r3, #4
 8007adc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8007ae0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ae4:	1e5a      	subs	r2, r3, #1
 8007ae6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d1d5      	bne.n	8007a9a <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007aee:	221a      	movs	r2, #26
 8007af0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007af2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007af4:	f7ff fdde 	bl	80076b4 <_SendPacket>
    RECORD_END();
 8007af8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007afa:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3788      	adds	r7, #136	; 0x88
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	200143dc 	.word	0x200143dc

08007b0c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b086      	sub	sp, #24
 8007b10:	af02      	add	r7, sp, #8
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]
 8007b18:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007b20:	4917      	ldr	r1, [pc, #92]	; (8007b80 <SEGGER_SYSVIEW_Init+0x74>)
 8007b22:	4818      	ldr	r0, [pc, #96]	; (8007b84 <SEGGER_SYSVIEW_Init+0x78>)
 8007b24:	f7ff fbb8 	bl	8007298 <SEGGER_RTT_AllocUpBuffer>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	b2da      	uxtb	r2, r3
 8007b2c:	4b16      	ldr	r3, [pc, #88]	; (8007b88 <SEGGER_SYSVIEW_Init+0x7c>)
 8007b2e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8007b30:	4b15      	ldr	r3, [pc, #84]	; (8007b88 <SEGGER_SYSVIEW_Init+0x7c>)
 8007b32:	785a      	ldrb	r2, [r3, #1]
 8007b34:	4b14      	ldr	r3, [pc, #80]	; (8007b88 <SEGGER_SYSVIEW_Init+0x7c>)
 8007b36:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8007b38:	4b13      	ldr	r3, [pc, #76]	; (8007b88 <SEGGER_SYSVIEW_Init+0x7c>)
 8007b3a:	7e1b      	ldrb	r3, [r3, #24]
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	2300      	movs	r3, #0
 8007b40:	9300      	str	r3, [sp, #0]
 8007b42:	2308      	movs	r3, #8
 8007b44:	4a11      	ldr	r2, [pc, #68]	; (8007b8c <SEGGER_SYSVIEW_Init+0x80>)
 8007b46:	490f      	ldr	r1, [pc, #60]	; (8007b84 <SEGGER_SYSVIEW_Init+0x78>)
 8007b48:	f7ff fc2a 	bl	80073a0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8007b4c:	4b0e      	ldr	r3, [pc, #56]	; (8007b88 <SEGGER_SYSVIEW_Init+0x7c>)
 8007b4e:	2200      	movs	r2, #0
 8007b50:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007b52:	4b0f      	ldr	r3, [pc, #60]	; (8007b90 <SEGGER_SYSVIEW_Init+0x84>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a0c      	ldr	r2, [pc, #48]	; (8007b88 <SEGGER_SYSVIEW_Init+0x7c>)
 8007b58:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8007b5a:	4a0b      	ldr	r2, [pc, #44]	; (8007b88 <SEGGER_SYSVIEW_Init+0x7c>)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8007b60:	4a09      	ldr	r2, [pc, #36]	; (8007b88 <SEGGER_SYSVIEW_Init+0x7c>)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8007b66:	4a08      	ldr	r2, [pc, #32]	; (8007b88 <SEGGER_SYSVIEW_Init+0x7c>)
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8007b6c:	4a06      	ldr	r2, [pc, #24]	; (8007b88 <SEGGER_SYSVIEW_Init+0x7c>)
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8007b72:	4b05      	ldr	r3, [pc, #20]	; (8007b88 <SEGGER_SYSVIEW_Init+0x7c>)
 8007b74:	2200      	movs	r2, #0
 8007b76:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8007b78:	bf00      	nop
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	200133a4 	.word	0x200133a4
 8007b84:	0800913c 	.word	0x0800913c
 8007b88:	200143ac 	.word	0x200143ac
 8007b8c:	200143a4 	.word	0x200143a4
 8007b90:	e0001004 	.word	0xe0001004

08007b94 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8007b9c:	4a04      	ldr	r2, [pc, #16]	; (8007bb0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6113      	str	r3, [r2, #16]
}
 8007ba2:	bf00      	nop
 8007ba4:	370c      	adds	r7, #12
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	200143ac 	.word	0x200143ac

08007bb4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007bbc:	f3ef 8311 	mrs	r3, BASEPRI
 8007bc0:	f04f 0120 	mov.w	r1, #32
 8007bc4:	f381 8811 	msr	BASEPRI, r1
 8007bc8:	60fb      	str	r3, [r7, #12]
 8007bca:	4808      	ldr	r0, [pc, #32]	; (8007bec <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8007bcc:	f7ff fc84 	bl	80074d8 <_PreparePacket>
 8007bd0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	68b9      	ldr	r1, [r7, #8]
 8007bd6:	68b8      	ldr	r0, [r7, #8]
 8007bd8:	f7ff fd6c 	bl	80076b4 <_SendPacket>
  RECORD_END();
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f383 8811 	msr	BASEPRI, r3
}
 8007be2:	bf00      	nop
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	200143dc 	.word	0x200143dc

08007bf0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b088      	sub	sp, #32
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007bfa:	f3ef 8311 	mrs	r3, BASEPRI
 8007bfe:	f04f 0120 	mov.w	r1, #32
 8007c02:	f381 8811 	msr	BASEPRI, r1
 8007c06:	617b      	str	r3, [r7, #20]
 8007c08:	4816      	ldr	r0, [pc, #88]	; (8007c64 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8007c0a:	f7ff fc65 	bl	80074d8 <_PreparePacket>
 8007c0e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	61fb      	str	r3, [r7, #28]
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	61bb      	str	r3, [r7, #24]
 8007c1c:	e00b      	b.n	8007c36 <SEGGER_SYSVIEW_RecordU32+0x46>
 8007c1e:	69bb      	ldr	r3, [r7, #24]
 8007c20:	b2da      	uxtb	r2, r3
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	1c59      	adds	r1, r3, #1
 8007c26:	61f9      	str	r1, [r7, #28]
 8007c28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c2c:	b2d2      	uxtb	r2, r2
 8007c2e:	701a      	strb	r2, [r3, #0]
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	09db      	lsrs	r3, r3, #7
 8007c34:	61bb      	str	r3, [r7, #24]
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	2b7f      	cmp	r3, #127	; 0x7f
 8007c3a:	d8f0      	bhi.n	8007c1e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	1c5a      	adds	r2, r3, #1
 8007c40:	61fa      	str	r2, [r7, #28]
 8007c42:	69ba      	ldr	r2, [r7, #24]
 8007c44:	b2d2      	uxtb	r2, r2
 8007c46:	701a      	strb	r2, [r3, #0]
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	68f9      	ldr	r1, [r7, #12]
 8007c50:	6938      	ldr	r0, [r7, #16]
 8007c52:	f7ff fd2f 	bl	80076b4 <_SendPacket>
  RECORD_END();
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	f383 8811 	msr	BASEPRI, r3
}
 8007c5c:	bf00      	nop
 8007c5e:	3720      	adds	r7, #32
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	200143dc 	.word	0x200143dc

08007c68 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b08c      	sub	sp, #48	; 0x30
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007c74:	f3ef 8311 	mrs	r3, BASEPRI
 8007c78:	f04f 0120 	mov.w	r1, #32
 8007c7c:	f381 8811 	msr	BASEPRI, r1
 8007c80:	61fb      	str	r3, [r7, #28]
 8007c82:	4825      	ldr	r0, [pc, #148]	; (8007d18 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8007c84:	f7ff fc28 	bl	80074d8 <_PreparePacket>
 8007c88:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c96:	e00b      	b.n	8007cb0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8007c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9a:	b2da      	uxtb	r2, r3
 8007c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c9e:	1c59      	adds	r1, r3, #1
 8007ca0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007ca2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ca6:	b2d2      	uxtb	r2, r2
 8007ca8:	701a      	strb	r2, [r3, #0]
 8007caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cac:	09db      	lsrs	r3, r3, #7
 8007cae:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb2:	2b7f      	cmp	r3, #127	; 0x7f
 8007cb4:	d8f0      	bhi.n	8007c98 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8007cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb8:	1c5a      	adds	r2, r3, #1
 8007cba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007cbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cbe:	b2d2      	uxtb	r2, r2
 8007cc0:	701a      	strb	r2, [r3, #0]
 8007cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	623b      	str	r3, [r7, #32]
 8007cce:	e00b      	b.n	8007ce8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8007cd0:	6a3b      	ldr	r3, [r7, #32]
 8007cd2:	b2da      	uxtb	r2, r3
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd6:	1c59      	adds	r1, r3, #1
 8007cd8:	6279      	str	r1, [r7, #36]	; 0x24
 8007cda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007cde:	b2d2      	uxtb	r2, r2
 8007ce0:	701a      	strb	r2, [r3, #0]
 8007ce2:	6a3b      	ldr	r3, [r7, #32]
 8007ce4:	09db      	lsrs	r3, r3, #7
 8007ce6:	623b      	str	r3, [r7, #32]
 8007ce8:	6a3b      	ldr	r3, [r7, #32]
 8007cea:	2b7f      	cmp	r3, #127	; 0x7f
 8007cec:	d8f0      	bhi.n	8007cd0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8007cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf0:	1c5a      	adds	r2, r3, #1
 8007cf2:	627a      	str	r2, [r7, #36]	; 0x24
 8007cf4:	6a3a      	ldr	r2, [r7, #32]
 8007cf6:	b2d2      	uxtb	r2, r2
 8007cf8:	701a      	strb	r2, [r3, #0]
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	6979      	ldr	r1, [r7, #20]
 8007d02:	69b8      	ldr	r0, [r7, #24]
 8007d04:	f7ff fcd6 	bl	80076b4 <_SendPacket>
  RECORD_END();
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	f383 8811 	msr	BASEPRI, r3
}
 8007d0e:	bf00      	nop
 8007d10:	3730      	adds	r7, #48	; 0x30
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	200143dc 	.word	0x200143dc

08007d1c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b08e      	sub	sp, #56	; 0x38
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	607a      	str	r2, [r7, #4]
 8007d28:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8007d2a:	f3ef 8311 	mrs	r3, BASEPRI
 8007d2e:	f04f 0120 	mov.w	r1, #32
 8007d32:	f381 8811 	msr	BASEPRI, r1
 8007d36:	61fb      	str	r3, [r7, #28]
 8007d38:	4832      	ldr	r0, [pc, #200]	; (8007e04 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8007d3a:	f7ff fbcd 	bl	80074d8 <_PreparePacket>
 8007d3e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	637b      	str	r3, [r7, #52]	; 0x34
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	633b      	str	r3, [r7, #48]	; 0x30
 8007d4c:	e00b      	b.n	8007d66 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8007d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d50:	b2da      	uxtb	r2, r3
 8007d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d54:	1c59      	adds	r1, r3, #1
 8007d56:	6379      	str	r1, [r7, #52]	; 0x34
 8007d58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d5c:	b2d2      	uxtb	r2, r2
 8007d5e:	701a      	strb	r2, [r3, #0]
 8007d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d62:	09db      	lsrs	r3, r3, #7
 8007d64:	633b      	str	r3, [r7, #48]	; 0x30
 8007d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d68:	2b7f      	cmp	r3, #127	; 0x7f
 8007d6a:	d8f0      	bhi.n	8007d4e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8007d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d6e:	1c5a      	adds	r2, r3, #1
 8007d70:	637a      	str	r2, [r7, #52]	; 0x34
 8007d72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d74:	b2d2      	uxtb	r2, r2
 8007d76:	701a      	strb	r2, [r3, #0]
 8007d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d7a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d84:	e00b      	b.n	8007d9e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8007d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d88:	b2da      	uxtb	r2, r3
 8007d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8c:	1c59      	adds	r1, r3, #1
 8007d8e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007d90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d94:	b2d2      	uxtb	r2, r2
 8007d96:	701a      	strb	r2, [r3, #0]
 8007d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9a:	09db      	lsrs	r3, r3, #7
 8007d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da0:	2b7f      	cmp	r3, #127	; 0x7f
 8007da2:	d8f0      	bhi.n	8007d86 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8007da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da6:	1c5a      	adds	r2, r3, #1
 8007da8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007daa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007dac:	b2d2      	uxtb	r2, r2
 8007dae:	701a      	strb	r2, [r3, #0]
 8007db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	627b      	str	r3, [r7, #36]	; 0x24
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	623b      	str	r3, [r7, #32]
 8007dbc:	e00b      	b.n	8007dd6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8007dbe:	6a3b      	ldr	r3, [r7, #32]
 8007dc0:	b2da      	uxtb	r2, r3
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc4:	1c59      	adds	r1, r3, #1
 8007dc6:	6279      	str	r1, [r7, #36]	; 0x24
 8007dc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007dcc:	b2d2      	uxtb	r2, r2
 8007dce:	701a      	strb	r2, [r3, #0]
 8007dd0:	6a3b      	ldr	r3, [r7, #32]
 8007dd2:	09db      	lsrs	r3, r3, #7
 8007dd4:	623b      	str	r3, [r7, #32]
 8007dd6:	6a3b      	ldr	r3, [r7, #32]
 8007dd8:	2b7f      	cmp	r3, #127	; 0x7f
 8007dda:	d8f0      	bhi.n	8007dbe <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8007ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dde:	1c5a      	adds	r2, r3, #1
 8007de0:	627a      	str	r2, [r7, #36]	; 0x24
 8007de2:	6a3a      	ldr	r2, [r7, #32]
 8007de4:	b2d2      	uxtb	r2, r2
 8007de6:	701a      	strb	r2, [r3, #0]
 8007de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dea:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	6979      	ldr	r1, [r7, #20]
 8007df0:	69b8      	ldr	r0, [r7, #24]
 8007df2:	f7ff fc5f 	bl	80076b4 <_SendPacket>
  RECORD_END();
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	f383 8811 	msr	BASEPRI, r3
}
 8007dfc:	bf00      	nop
 8007dfe:	3738      	adds	r7, #56	; 0x38
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	200143dc 	.word	0x200143dc

08007e08 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b090      	sub	sp, #64	; 0x40
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	607a      	str	r2, [r7, #4]
 8007e14:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007e16:	f3ef 8311 	mrs	r3, BASEPRI
 8007e1a:	f04f 0120 	mov.w	r1, #32
 8007e1e:	f381 8811 	msr	BASEPRI, r1
 8007e22:	61fb      	str	r3, [r7, #28]
 8007e24:	4840      	ldr	r0, [pc, #256]	; (8007f28 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8007e26:	f7ff fb57 	bl	80074d8 <_PreparePacket>
 8007e2a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e38:	e00b      	b.n	8007e52 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8007e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3c:	b2da      	uxtb	r2, r3
 8007e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e40:	1c59      	adds	r1, r3, #1
 8007e42:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007e44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e48:	b2d2      	uxtb	r2, r2
 8007e4a:	701a      	strb	r2, [r3, #0]
 8007e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4e:	09db      	lsrs	r3, r3, #7
 8007e50:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e54:	2b7f      	cmp	r3, #127	; 0x7f
 8007e56:	d8f0      	bhi.n	8007e3a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8007e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e5a:	1c5a      	adds	r2, r3, #1
 8007e5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007e5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e60:	b2d2      	uxtb	r2, r2
 8007e62:	701a      	strb	r2, [r3, #0]
 8007e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e66:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	637b      	str	r3, [r7, #52]	; 0x34
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	633b      	str	r3, [r7, #48]	; 0x30
 8007e70:	e00b      	b.n	8007e8a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8007e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e74:	b2da      	uxtb	r2, r3
 8007e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e78:	1c59      	adds	r1, r3, #1
 8007e7a:	6379      	str	r1, [r7, #52]	; 0x34
 8007e7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e80:	b2d2      	uxtb	r2, r2
 8007e82:	701a      	strb	r2, [r3, #0]
 8007e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e86:	09db      	lsrs	r3, r3, #7
 8007e88:	633b      	str	r3, [r7, #48]	; 0x30
 8007e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8c:	2b7f      	cmp	r3, #127	; 0x7f
 8007e8e:	d8f0      	bhi.n	8007e72 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8007e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e92:	1c5a      	adds	r2, r3, #1
 8007e94:	637a      	str	r2, [r7, #52]	; 0x34
 8007e96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e98:	b2d2      	uxtb	r2, r2
 8007e9a:	701a      	strb	r2, [r3, #0]
 8007e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e9e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ea8:	e00b      	b.n	8007ec2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8007eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eac:	b2da      	uxtb	r2, r3
 8007eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb0:	1c59      	adds	r1, r3, #1
 8007eb2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007eb4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007eb8:	b2d2      	uxtb	r2, r2
 8007eba:	701a      	strb	r2, [r3, #0]
 8007ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ebe:	09db      	lsrs	r3, r3, #7
 8007ec0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec4:	2b7f      	cmp	r3, #127	; 0x7f
 8007ec6:	d8f0      	bhi.n	8007eaa <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8007ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eca:	1c5a      	adds	r2, r3, #1
 8007ecc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ece:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ed0:	b2d2      	uxtb	r2, r2
 8007ed2:	701a      	strb	r2, [r3, #0]
 8007ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	627b      	str	r3, [r7, #36]	; 0x24
 8007edc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ede:	623b      	str	r3, [r7, #32]
 8007ee0:	e00b      	b.n	8007efa <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8007ee2:	6a3b      	ldr	r3, [r7, #32]
 8007ee4:	b2da      	uxtb	r2, r3
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee8:	1c59      	adds	r1, r3, #1
 8007eea:	6279      	str	r1, [r7, #36]	; 0x24
 8007eec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ef0:	b2d2      	uxtb	r2, r2
 8007ef2:	701a      	strb	r2, [r3, #0]
 8007ef4:	6a3b      	ldr	r3, [r7, #32]
 8007ef6:	09db      	lsrs	r3, r3, #7
 8007ef8:	623b      	str	r3, [r7, #32]
 8007efa:	6a3b      	ldr	r3, [r7, #32]
 8007efc:	2b7f      	cmp	r3, #127	; 0x7f
 8007efe:	d8f0      	bhi.n	8007ee2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8007f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f02:	1c5a      	adds	r2, r3, #1
 8007f04:	627a      	str	r2, [r7, #36]	; 0x24
 8007f06:	6a3a      	ldr	r2, [r7, #32]
 8007f08:	b2d2      	uxtb	r2, r2
 8007f0a:	701a      	strb	r2, [r3, #0]
 8007f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	6979      	ldr	r1, [r7, #20]
 8007f14:	69b8      	ldr	r0, [r7, #24]
 8007f16:	f7ff fbcd 	bl	80076b4 <_SendPacket>
  RECORD_END();
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	f383 8811 	msr	BASEPRI, r3
}
 8007f20:	bf00      	nop
 8007f22:	3740      	adds	r7, #64	; 0x40
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	200143dc 	.word	0x200143dc

08007f2c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b08c      	sub	sp, #48	; 0x30
 8007f30:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8007f32:	4b58      	ldr	r3, [pc, #352]	; (8008094 <SEGGER_SYSVIEW_Start+0x168>)
 8007f34:	2201      	movs	r2, #1
 8007f36:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8007f38:	f3ef 8311 	mrs	r3, BASEPRI
 8007f3c:	f04f 0120 	mov.w	r1, #32
 8007f40:	f381 8811 	msr	BASEPRI, r1
 8007f44:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8007f46:	4b53      	ldr	r3, [pc, #332]	; (8008094 <SEGGER_SYSVIEW_Start+0x168>)
 8007f48:	785b      	ldrb	r3, [r3, #1]
 8007f4a:	220a      	movs	r2, #10
 8007f4c:	4952      	ldr	r1, [pc, #328]	; (8008098 <SEGGER_SYSVIEW_Start+0x16c>)
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7f8 f94e 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8007f5a:	200a      	movs	r0, #10
 8007f5c:	f7ff fe2a 	bl	8007bb4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007f60:	f3ef 8311 	mrs	r3, BASEPRI
 8007f64:	f04f 0120 	mov.w	r1, #32
 8007f68:	f381 8811 	msr	BASEPRI, r1
 8007f6c:	60bb      	str	r3, [r7, #8]
 8007f6e:	484b      	ldr	r0, [pc, #300]	; (800809c <SEGGER_SYSVIEW_Start+0x170>)
 8007f70:	f7ff fab2 	bl	80074d8 <_PreparePacket>
 8007f74:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f7e:	4b45      	ldr	r3, [pc, #276]	; (8008094 <SEGGER_SYSVIEW_Start+0x168>)
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f84:	e00b      	b.n	8007f9e <SEGGER_SYSVIEW_Start+0x72>
 8007f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f88:	b2da      	uxtb	r2, r3
 8007f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f8c:	1c59      	adds	r1, r3, #1
 8007f8e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007f90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f94:	b2d2      	uxtb	r2, r2
 8007f96:	701a      	strb	r2, [r3, #0]
 8007f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9a:	09db      	lsrs	r3, r3, #7
 8007f9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa0:	2b7f      	cmp	r3, #127	; 0x7f
 8007fa2:	d8f0      	bhi.n	8007f86 <SEGGER_SYSVIEW_Start+0x5a>
 8007fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa6:	1c5a      	adds	r2, r3, #1
 8007fa8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007faa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fac:	b2d2      	uxtb	r2, r2
 8007fae:	701a      	strb	r2, [r3, #0]
 8007fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8007fb8:	4b36      	ldr	r3, [pc, #216]	; (8008094 <SEGGER_SYSVIEW_Start+0x168>)
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	623b      	str	r3, [r7, #32]
 8007fbe:	e00b      	b.n	8007fd8 <SEGGER_SYSVIEW_Start+0xac>
 8007fc0:	6a3b      	ldr	r3, [r7, #32]
 8007fc2:	b2da      	uxtb	r2, r3
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc6:	1c59      	adds	r1, r3, #1
 8007fc8:	6279      	str	r1, [r7, #36]	; 0x24
 8007fca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007fce:	b2d2      	uxtb	r2, r2
 8007fd0:	701a      	strb	r2, [r3, #0]
 8007fd2:	6a3b      	ldr	r3, [r7, #32]
 8007fd4:	09db      	lsrs	r3, r3, #7
 8007fd6:	623b      	str	r3, [r7, #32]
 8007fd8:	6a3b      	ldr	r3, [r7, #32]
 8007fda:	2b7f      	cmp	r3, #127	; 0x7f
 8007fdc:	d8f0      	bhi.n	8007fc0 <SEGGER_SYSVIEW_Start+0x94>
 8007fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe0:	1c5a      	adds	r2, r3, #1
 8007fe2:	627a      	str	r2, [r7, #36]	; 0x24
 8007fe4:	6a3a      	ldr	r2, [r7, #32]
 8007fe6:	b2d2      	uxtb	r2, r2
 8007fe8:	701a      	strb	r2, [r3, #0]
 8007fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fec:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	61fb      	str	r3, [r7, #28]
 8007ff2:	4b28      	ldr	r3, [pc, #160]	; (8008094 <SEGGER_SYSVIEW_Start+0x168>)
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	61bb      	str	r3, [r7, #24]
 8007ff8:	e00b      	b.n	8008012 <SEGGER_SYSVIEW_Start+0xe6>
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	b2da      	uxtb	r2, r3
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	1c59      	adds	r1, r3, #1
 8008002:	61f9      	str	r1, [r7, #28]
 8008004:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008008:	b2d2      	uxtb	r2, r2
 800800a:	701a      	strb	r2, [r3, #0]
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	09db      	lsrs	r3, r3, #7
 8008010:	61bb      	str	r3, [r7, #24]
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	2b7f      	cmp	r3, #127	; 0x7f
 8008016:	d8f0      	bhi.n	8007ffa <SEGGER_SYSVIEW_Start+0xce>
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	1c5a      	adds	r2, r3, #1
 800801c:	61fa      	str	r2, [r7, #28]
 800801e:	69ba      	ldr	r2, [r7, #24]
 8008020:	b2d2      	uxtb	r2, r2
 8008022:	701a      	strb	r2, [r3, #0]
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	617b      	str	r3, [r7, #20]
 800802c:	2300      	movs	r3, #0
 800802e:	613b      	str	r3, [r7, #16]
 8008030:	e00b      	b.n	800804a <SEGGER_SYSVIEW_Start+0x11e>
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	b2da      	uxtb	r2, r3
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	1c59      	adds	r1, r3, #1
 800803a:	6179      	str	r1, [r7, #20]
 800803c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008040:	b2d2      	uxtb	r2, r2
 8008042:	701a      	strb	r2, [r3, #0]
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	09db      	lsrs	r3, r3, #7
 8008048:	613b      	str	r3, [r7, #16]
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	2b7f      	cmp	r3, #127	; 0x7f
 800804e:	d8f0      	bhi.n	8008032 <SEGGER_SYSVIEW_Start+0x106>
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	1c5a      	adds	r2, r3, #1
 8008054:	617a      	str	r2, [r7, #20]
 8008056:	693a      	ldr	r2, [r7, #16]
 8008058:	b2d2      	uxtb	r2, r2
 800805a:	701a      	strb	r2, [r3, #0]
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8008060:	2218      	movs	r2, #24
 8008062:	6839      	ldr	r1, [r7, #0]
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f7ff fb25 	bl	80076b4 <_SendPacket>
      RECORD_END();
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8008070:	4b08      	ldr	r3, [pc, #32]	; (8008094 <SEGGER_SYSVIEW_Start+0x168>)
 8008072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008074:	2b00      	cmp	r3, #0
 8008076:	d002      	beq.n	800807e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8008078:	4b06      	ldr	r3, [pc, #24]	; (8008094 <SEGGER_SYSVIEW_Start+0x168>)
 800807a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800807e:	f000 f9eb 	bl	8008458 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8008082:	f000 f9b1 	bl	80083e8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8008086:	f000 fc83 	bl	8008990 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800808a:	bf00      	nop
 800808c:	3730      	adds	r7, #48	; 0x30
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	200143ac 	.word	0x200143ac
 8008098:	08009234 	.word	0x08009234
 800809c:	200143dc 	.word	0x200143dc

080080a0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80080a6:	f3ef 8311 	mrs	r3, BASEPRI
 80080aa:	f04f 0120 	mov.w	r1, #32
 80080ae:	f381 8811 	msr	BASEPRI, r1
 80080b2:	607b      	str	r3, [r7, #4]
 80080b4:	480b      	ldr	r0, [pc, #44]	; (80080e4 <SEGGER_SYSVIEW_Stop+0x44>)
 80080b6:	f7ff fa0f 	bl	80074d8 <_PreparePacket>
 80080ba:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80080bc:	4b0a      	ldr	r3, [pc, #40]	; (80080e8 <SEGGER_SYSVIEW_Stop+0x48>)
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d007      	beq.n	80080d4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80080c4:	220b      	movs	r2, #11
 80080c6:	6839      	ldr	r1, [r7, #0]
 80080c8:	6838      	ldr	r0, [r7, #0]
 80080ca:	f7ff faf3 	bl	80076b4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80080ce:	4b06      	ldr	r3, [pc, #24]	; (80080e8 <SEGGER_SYSVIEW_Stop+0x48>)
 80080d0:	2200      	movs	r2, #0
 80080d2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f383 8811 	msr	BASEPRI, r3
}
 80080da:	bf00      	nop
 80080dc:	3708      	adds	r7, #8
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	200143dc 	.word	0x200143dc
 80080e8:	200143ac 	.word	0x200143ac

080080ec <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b08c      	sub	sp, #48	; 0x30
 80080f0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80080f2:	f3ef 8311 	mrs	r3, BASEPRI
 80080f6:	f04f 0120 	mov.w	r1, #32
 80080fa:	f381 8811 	msr	BASEPRI, r1
 80080fe:	60fb      	str	r3, [r7, #12]
 8008100:	4845      	ldr	r0, [pc, #276]	; (8008218 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8008102:	f7ff f9e9 	bl	80074d8 <_PreparePacket>
 8008106:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008110:	4b42      	ldr	r3, [pc, #264]	; (800821c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	62bb      	str	r3, [r7, #40]	; 0x28
 8008116:	e00b      	b.n	8008130 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8008118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811a:	b2da      	uxtb	r2, r3
 800811c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800811e:	1c59      	adds	r1, r3, #1
 8008120:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008122:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008126:	b2d2      	uxtb	r2, r2
 8008128:	701a      	strb	r2, [r3, #0]
 800812a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812c:	09db      	lsrs	r3, r3, #7
 800812e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008132:	2b7f      	cmp	r3, #127	; 0x7f
 8008134:	d8f0      	bhi.n	8008118 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8008136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008138:	1c5a      	adds	r2, r3, #1
 800813a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800813c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800813e:	b2d2      	uxtb	r2, r2
 8008140:	701a      	strb	r2, [r3, #0]
 8008142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008144:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	627b      	str	r3, [r7, #36]	; 0x24
 800814a:	4b34      	ldr	r3, [pc, #208]	; (800821c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	623b      	str	r3, [r7, #32]
 8008150:	e00b      	b.n	800816a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8008152:	6a3b      	ldr	r3, [r7, #32]
 8008154:	b2da      	uxtb	r2, r3
 8008156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008158:	1c59      	adds	r1, r3, #1
 800815a:	6279      	str	r1, [r7, #36]	; 0x24
 800815c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008160:	b2d2      	uxtb	r2, r2
 8008162:	701a      	strb	r2, [r3, #0]
 8008164:	6a3b      	ldr	r3, [r7, #32]
 8008166:	09db      	lsrs	r3, r3, #7
 8008168:	623b      	str	r3, [r7, #32]
 800816a:	6a3b      	ldr	r3, [r7, #32]
 800816c:	2b7f      	cmp	r3, #127	; 0x7f
 800816e:	d8f0      	bhi.n	8008152 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8008170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008172:	1c5a      	adds	r2, r3, #1
 8008174:	627a      	str	r2, [r7, #36]	; 0x24
 8008176:	6a3a      	ldr	r2, [r7, #32]
 8008178:	b2d2      	uxtb	r2, r2
 800817a:	701a      	strb	r2, [r3, #0]
 800817c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	61fb      	str	r3, [r7, #28]
 8008184:	4b25      	ldr	r3, [pc, #148]	; (800821c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008186:	691b      	ldr	r3, [r3, #16]
 8008188:	61bb      	str	r3, [r7, #24]
 800818a:	e00b      	b.n	80081a4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	b2da      	uxtb	r2, r3
 8008190:	69fb      	ldr	r3, [r7, #28]
 8008192:	1c59      	adds	r1, r3, #1
 8008194:	61f9      	str	r1, [r7, #28]
 8008196:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800819a:	b2d2      	uxtb	r2, r2
 800819c:	701a      	strb	r2, [r3, #0]
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	09db      	lsrs	r3, r3, #7
 80081a2:	61bb      	str	r3, [r7, #24]
 80081a4:	69bb      	ldr	r3, [r7, #24]
 80081a6:	2b7f      	cmp	r3, #127	; 0x7f
 80081a8:	d8f0      	bhi.n	800818c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	1c5a      	adds	r2, r3, #1
 80081ae:	61fa      	str	r2, [r7, #28]
 80081b0:	69ba      	ldr	r2, [r7, #24]
 80081b2:	b2d2      	uxtb	r2, r2
 80081b4:	701a      	strb	r2, [r3, #0]
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	617b      	str	r3, [r7, #20]
 80081be:	2300      	movs	r3, #0
 80081c0:	613b      	str	r3, [r7, #16]
 80081c2:	e00b      	b.n	80081dc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	b2da      	uxtb	r2, r3
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	1c59      	adds	r1, r3, #1
 80081cc:	6179      	str	r1, [r7, #20]
 80081ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80081d2:	b2d2      	uxtb	r2, r2
 80081d4:	701a      	strb	r2, [r3, #0]
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	09db      	lsrs	r3, r3, #7
 80081da:	613b      	str	r3, [r7, #16]
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	2b7f      	cmp	r3, #127	; 0x7f
 80081e0:	d8f0      	bhi.n	80081c4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	1c5a      	adds	r2, r3, #1
 80081e6:	617a      	str	r2, [r7, #20]
 80081e8:	693a      	ldr	r2, [r7, #16]
 80081ea:	b2d2      	uxtb	r2, r2
 80081ec:	701a      	strb	r2, [r3, #0]
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80081f2:	2218      	movs	r2, #24
 80081f4:	6879      	ldr	r1, [r7, #4]
 80081f6:	68b8      	ldr	r0, [r7, #8]
 80081f8:	f7ff fa5c 	bl	80076b4 <_SendPacket>
  RECORD_END();
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8008202:	4b06      	ldr	r3, [pc, #24]	; (800821c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008206:	2b00      	cmp	r3, #0
 8008208:	d002      	beq.n	8008210 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800820a:	4b04      	ldr	r3, [pc, #16]	; (800821c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800820c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820e:	4798      	blx	r3
  }
}
 8008210:	bf00      	nop
 8008212:	3730      	adds	r7, #48	; 0x30
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}
 8008218:	200143dc 	.word	0x200143dc
 800821c:	200143ac 	.word	0x200143ac

08008220 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8008220:	b580      	push	{r7, lr}
 8008222:	b092      	sub	sp, #72	; 0x48
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8008228:	f3ef 8311 	mrs	r3, BASEPRI
 800822c:	f04f 0120 	mov.w	r1, #32
 8008230:	f381 8811 	msr	BASEPRI, r1
 8008234:	617b      	str	r3, [r7, #20]
 8008236:	486a      	ldr	r0, [pc, #424]	; (80083e0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8008238:	f7ff f94e 	bl	80074d8 <_PreparePacket>
 800823c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	647b      	str	r3, [r7, #68]	; 0x44
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	4b66      	ldr	r3, [pc, #408]	; (80083e4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	643b      	str	r3, [r7, #64]	; 0x40
 8008252:	e00b      	b.n	800826c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8008254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008256:	b2da      	uxtb	r2, r3
 8008258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800825a:	1c59      	adds	r1, r3, #1
 800825c:	6479      	str	r1, [r7, #68]	; 0x44
 800825e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008262:	b2d2      	uxtb	r2, r2
 8008264:	701a      	strb	r2, [r3, #0]
 8008266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008268:	09db      	lsrs	r3, r3, #7
 800826a:	643b      	str	r3, [r7, #64]	; 0x40
 800826c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800826e:	2b7f      	cmp	r3, #127	; 0x7f
 8008270:	d8f0      	bhi.n	8008254 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8008272:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008274:	1c5a      	adds	r2, r3, #1
 8008276:	647a      	str	r2, [r7, #68]	; 0x44
 8008278:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800827a:	b2d2      	uxtb	r2, r2
 800827c:	701a      	strb	r2, [r3, #0]
 800827e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008280:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	63bb      	str	r3, [r7, #56]	; 0x38
 800828c:	e00b      	b.n	80082a6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800828e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008290:	b2da      	uxtb	r2, r3
 8008292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008294:	1c59      	adds	r1, r3, #1
 8008296:	63f9      	str	r1, [r7, #60]	; 0x3c
 8008298:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800829c:	b2d2      	uxtb	r2, r2
 800829e:	701a      	strb	r2, [r3, #0]
 80082a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a2:	09db      	lsrs	r3, r3, #7
 80082a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80082a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a8:	2b7f      	cmp	r3, #127	; 0x7f
 80082aa:	d8f0      	bhi.n	800828e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80082ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082ae:	1c5a      	adds	r2, r3, #1
 80082b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80082b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082b4:	b2d2      	uxtb	r2, r2
 80082b6:	701a      	strb	r2, [r3, #0]
 80082b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082ba:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	2220      	movs	r2, #32
 80082c2:	4619      	mov	r1, r3
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	f7ff f8b7 	bl	8007438 <_EncodeStr>
 80082ca:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80082cc:	2209      	movs	r2, #9
 80082ce:	68f9      	ldr	r1, [r7, #12]
 80082d0:	6938      	ldr	r0, [r7, #16]
 80082d2:	f7ff f9ef 	bl	80076b4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	637b      	str	r3, [r7, #52]	; 0x34
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	4b40      	ldr	r3, [pc, #256]	; (80083e4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	1ad3      	subs	r3, r2, r3
 80082e8:	633b      	str	r3, [r7, #48]	; 0x30
 80082ea:	e00b      	b.n	8008304 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80082ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ee:	b2da      	uxtb	r2, r3
 80082f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082f2:	1c59      	adds	r1, r3, #1
 80082f4:	6379      	str	r1, [r7, #52]	; 0x34
 80082f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80082fa:	b2d2      	uxtb	r2, r2
 80082fc:	701a      	strb	r2, [r3, #0]
 80082fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008300:	09db      	lsrs	r3, r3, #7
 8008302:	633b      	str	r3, [r7, #48]	; 0x30
 8008304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008306:	2b7f      	cmp	r3, #127	; 0x7f
 8008308:	d8f0      	bhi.n	80082ec <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800830a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800830c:	1c5a      	adds	r2, r3, #1
 800830e:	637a      	str	r2, [r7, #52]	; 0x34
 8008310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008312:	b2d2      	uxtb	r2, r2
 8008314:	701a      	strb	r2, [r3, #0]
 8008316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008318:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	62bb      	str	r3, [r7, #40]	; 0x28
 8008324:	e00b      	b.n	800833e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8008326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008328:	b2da      	uxtb	r2, r3
 800832a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800832c:	1c59      	adds	r1, r3, #1
 800832e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008330:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008334:	b2d2      	uxtb	r2, r2
 8008336:	701a      	strb	r2, [r3, #0]
 8008338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833a:	09db      	lsrs	r3, r3, #7
 800833c:	62bb      	str	r3, [r7, #40]	; 0x28
 800833e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008340:	2b7f      	cmp	r3, #127	; 0x7f
 8008342:	d8f0      	bhi.n	8008326 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8008344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008346:	1c5a      	adds	r2, r3, #1
 8008348:	62fa      	str	r2, [r7, #44]	; 0x2c
 800834a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800834c:	b2d2      	uxtb	r2, r2
 800834e:	701a      	strb	r2, [r3, #0]
 8008350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008352:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	627b      	str	r3, [r7, #36]	; 0x24
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	691b      	ldr	r3, [r3, #16]
 800835c:	623b      	str	r3, [r7, #32]
 800835e:	e00b      	b.n	8008378 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8008360:	6a3b      	ldr	r3, [r7, #32]
 8008362:	b2da      	uxtb	r2, r3
 8008364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008366:	1c59      	adds	r1, r3, #1
 8008368:	6279      	str	r1, [r7, #36]	; 0x24
 800836a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800836e:	b2d2      	uxtb	r2, r2
 8008370:	701a      	strb	r2, [r3, #0]
 8008372:	6a3b      	ldr	r3, [r7, #32]
 8008374:	09db      	lsrs	r3, r3, #7
 8008376:	623b      	str	r3, [r7, #32]
 8008378:	6a3b      	ldr	r3, [r7, #32]
 800837a:	2b7f      	cmp	r3, #127	; 0x7f
 800837c:	d8f0      	bhi.n	8008360 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800837e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008380:	1c5a      	adds	r2, r3, #1
 8008382:	627a      	str	r2, [r7, #36]	; 0x24
 8008384:	6a3a      	ldr	r2, [r7, #32]
 8008386:	b2d2      	uxtb	r2, r2
 8008388:	701a      	strb	r2, [r3, #0]
 800838a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	61fb      	str	r3, [r7, #28]
 8008392:	2300      	movs	r3, #0
 8008394:	61bb      	str	r3, [r7, #24]
 8008396:	e00b      	b.n	80083b0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	b2da      	uxtb	r2, r3
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	1c59      	adds	r1, r3, #1
 80083a0:	61f9      	str	r1, [r7, #28]
 80083a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80083a6:	b2d2      	uxtb	r2, r2
 80083a8:	701a      	strb	r2, [r3, #0]
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	09db      	lsrs	r3, r3, #7
 80083ae:	61bb      	str	r3, [r7, #24]
 80083b0:	69bb      	ldr	r3, [r7, #24]
 80083b2:	2b7f      	cmp	r3, #127	; 0x7f
 80083b4:	d8f0      	bhi.n	8008398 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	1c5a      	adds	r2, r3, #1
 80083ba:	61fa      	str	r2, [r7, #28]
 80083bc:	69ba      	ldr	r2, [r7, #24]
 80083be:	b2d2      	uxtb	r2, r2
 80083c0:	701a      	strb	r2, [r3, #0]
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80083c6:	2215      	movs	r2, #21
 80083c8:	68f9      	ldr	r1, [r7, #12]
 80083ca:	6938      	ldr	r0, [r7, #16]
 80083cc:	f7ff f972 	bl	80076b4 <_SendPacket>
  RECORD_END();
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	f383 8811 	msr	BASEPRI, r3
}
 80083d6:	bf00      	nop
 80083d8:	3748      	adds	r7, #72	; 0x48
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	200143dc 	.word	0x200143dc
 80083e4:	200143ac 	.word	0x200143ac

080083e8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80083e8:	b580      	push	{r7, lr}
 80083ea:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80083ec:	4b07      	ldr	r3, [pc, #28]	; (800840c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80083ee:	6a1b      	ldr	r3, [r3, #32]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d008      	beq.n	8008406 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80083f4:	4b05      	ldr	r3, [pc, #20]	; (800840c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80083f6:	6a1b      	ldr	r3, [r3, #32]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d003      	beq.n	8008406 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80083fe:	4b03      	ldr	r3, [pc, #12]	; (800840c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008400:	6a1b      	ldr	r3, [r3, #32]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	4798      	blx	r3
  }
}
 8008406:	bf00      	nop
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	200143ac 	.word	0x200143ac

08008410 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8008410:	b580      	push	{r7, lr}
 8008412:	b086      	sub	sp, #24
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008418:	f3ef 8311 	mrs	r3, BASEPRI
 800841c:	f04f 0120 	mov.w	r1, #32
 8008420:	f381 8811 	msr	BASEPRI, r1
 8008424:	617b      	str	r3, [r7, #20]
 8008426:	480b      	ldr	r0, [pc, #44]	; (8008454 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8008428:	f7ff f856 	bl	80074d8 <_PreparePacket>
 800842c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800842e:	2280      	movs	r2, #128	; 0x80
 8008430:	6879      	ldr	r1, [r7, #4]
 8008432:	6938      	ldr	r0, [r7, #16]
 8008434:	f7ff f800 	bl	8007438 <_EncodeStr>
 8008438:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800843a:	220e      	movs	r2, #14
 800843c:	68f9      	ldr	r1, [r7, #12]
 800843e:	6938      	ldr	r0, [r7, #16]
 8008440:	f7ff f938 	bl	80076b4 <_SendPacket>
  RECORD_END();
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	f383 8811 	msr	BASEPRI, r3
}
 800844a:	bf00      	nop
 800844c:	3718      	adds	r7, #24
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	200143dc 	.word	0x200143dc

08008458 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8008458:	b590      	push	{r4, r7, lr}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800845e:	4b15      	ldr	r3, [pc, #84]	; (80084b4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008460:	6a1b      	ldr	r3, [r3, #32]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d01a      	beq.n	800849c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8008466:	4b13      	ldr	r3, [pc, #76]	; (80084b4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008468:	6a1b      	ldr	r3, [r3, #32]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d015      	beq.n	800849c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8008470:	4b10      	ldr	r3, [pc, #64]	; (80084b4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008472:	6a1b      	ldr	r3, [r3, #32]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4798      	blx	r3
 8008478:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800847c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800847e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008482:	f04f 0200 	mov.w	r2, #0
 8008486:	f04f 0300 	mov.w	r3, #0
 800848a:	000a      	movs	r2, r1
 800848c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800848e:	4613      	mov	r3, r2
 8008490:	461a      	mov	r2, r3
 8008492:	4621      	mov	r1, r4
 8008494:	200d      	movs	r0, #13
 8008496:	f7ff fbe7 	bl	8007c68 <SEGGER_SYSVIEW_RecordU32x2>
 800849a:	e006      	b.n	80084aa <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800849c:	4b06      	ldr	r3, [pc, #24]	; (80084b8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4619      	mov	r1, r3
 80084a2:	200c      	movs	r0, #12
 80084a4:	f7ff fba4 	bl	8007bf0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80084a8:	bf00      	nop
 80084aa:	bf00      	nop
 80084ac:	370c      	adds	r7, #12
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd90      	pop	{r4, r7, pc}
 80084b2:	bf00      	nop
 80084b4:	200143ac 	.word	0x200143ac
 80084b8:	e0001004 	.word	0xe0001004

080084bc <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80084bc:	b580      	push	{r7, lr}
 80084be:	b086      	sub	sp, #24
 80084c0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80084c2:	f3ef 8311 	mrs	r3, BASEPRI
 80084c6:	f04f 0120 	mov.w	r1, #32
 80084ca:	f381 8811 	msr	BASEPRI, r1
 80084ce:	60fb      	str	r3, [r7, #12]
 80084d0:	4819      	ldr	r0, [pc, #100]	; (8008538 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80084d2:	f7ff f801 	bl	80074d8 <_PreparePacket>
 80084d6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80084dc:	4b17      	ldr	r3, [pc, #92]	; (800853c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084e4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	617b      	str	r3, [r7, #20]
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	613b      	str	r3, [r7, #16]
 80084ee:	e00b      	b.n	8008508 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	b2da      	uxtb	r2, r3
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	1c59      	adds	r1, r3, #1
 80084f8:	6179      	str	r1, [r7, #20]
 80084fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80084fe:	b2d2      	uxtb	r2, r2
 8008500:	701a      	strb	r2, [r3, #0]
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	09db      	lsrs	r3, r3, #7
 8008506:	613b      	str	r3, [r7, #16]
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	2b7f      	cmp	r3, #127	; 0x7f
 800850c:	d8f0      	bhi.n	80084f0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	1c5a      	adds	r2, r3, #1
 8008512:	617a      	str	r2, [r7, #20]
 8008514:	693a      	ldr	r2, [r7, #16]
 8008516:	b2d2      	uxtb	r2, r2
 8008518:	701a      	strb	r2, [r3, #0]
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800851e:	2202      	movs	r2, #2
 8008520:	6879      	ldr	r1, [r7, #4]
 8008522:	68b8      	ldr	r0, [r7, #8]
 8008524:	f7ff f8c6 	bl	80076b4 <_SendPacket>
  RECORD_END();
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f383 8811 	msr	BASEPRI, r3
}
 800852e:	bf00      	nop
 8008530:	3718      	adds	r7, #24
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	200143dc 	.word	0x200143dc
 800853c:	e000ed04 	.word	0xe000ed04

08008540 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008546:	f3ef 8311 	mrs	r3, BASEPRI
 800854a:	f04f 0120 	mov.w	r1, #32
 800854e:	f381 8811 	msr	BASEPRI, r1
 8008552:	607b      	str	r3, [r7, #4]
 8008554:	4807      	ldr	r0, [pc, #28]	; (8008574 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8008556:	f7fe ffbf 	bl	80074d8 <_PreparePacket>
 800855a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800855c:	2203      	movs	r2, #3
 800855e:	6839      	ldr	r1, [r7, #0]
 8008560:	6838      	ldr	r0, [r7, #0]
 8008562:	f7ff f8a7 	bl	80076b4 <_SendPacket>
  RECORD_END();
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f383 8811 	msr	BASEPRI, r3
}
 800856c:	bf00      	nop
 800856e:	3708      	adds	r7, #8
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}
 8008574:	200143dc 	.word	0x200143dc

08008578 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800857e:	f3ef 8311 	mrs	r3, BASEPRI
 8008582:	f04f 0120 	mov.w	r1, #32
 8008586:	f381 8811 	msr	BASEPRI, r1
 800858a:	607b      	str	r3, [r7, #4]
 800858c:	4807      	ldr	r0, [pc, #28]	; (80085ac <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800858e:	f7fe ffa3 	bl	80074d8 <_PreparePacket>
 8008592:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8008594:	2212      	movs	r2, #18
 8008596:	6839      	ldr	r1, [r7, #0]
 8008598:	6838      	ldr	r0, [r7, #0]
 800859a:	f7ff f88b 	bl	80076b4 <_SendPacket>
  RECORD_END();
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f383 8811 	msr	BASEPRI, r3
}
 80085a4:	bf00      	nop
 80085a6:	3708      	adds	r7, #8
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	200143dc 	.word	0x200143dc

080085b0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80085b6:	f3ef 8311 	mrs	r3, BASEPRI
 80085ba:	f04f 0120 	mov.w	r1, #32
 80085be:	f381 8811 	msr	BASEPRI, r1
 80085c2:	607b      	str	r3, [r7, #4]
 80085c4:	4807      	ldr	r0, [pc, #28]	; (80085e4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80085c6:	f7fe ff87 	bl	80074d8 <_PreparePacket>
 80085ca:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80085cc:	2211      	movs	r2, #17
 80085ce:	6839      	ldr	r1, [r7, #0]
 80085d0:	6838      	ldr	r0, [r7, #0]
 80085d2:	f7ff f86f 	bl	80076b4 <_SendPacket>
  RECORD_END();
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f383 8811 	msr	BASEPRI, r3
}
 80085dc:	bf00      	nop
 80085de:	3708      	adds	r7, #8
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	200143dc 	.word	0x200143dc

080085e8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b088      	sub	sp, #32
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80085f0:	f3ef 8311 	mrs	r3, BASEPRI
 80085f4:	f04f 0120 	mov.w	r1, #32
 80085f8:	f381 8811 	msr	BASEPRI, r1
 80085fc:	617b      	str	r3, [r7, #20]
 80085fe:	4819      	ldr	r0, [pc, #100]	; (8008664 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8008600:	f7fe ff6a 	bl	80074d8 <_PreparePacket>
 8008604:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800860a:	4b17      	ldr	r3, [pc, #92]	; (8008668 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	1ad3      	subs	r3, r2, r3
 8008612:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	61fb      	str	r3, [r7, #28]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	61bb      	str	r3, [r7, #24]
 800861c:	e00b      	b.n	8008636 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	b2da      	uxtb	r2, r3
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	1c59      	adds	r1, r3, #1
 8008626:	61f9      	str	r1, [r7, #28]
 8008628:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800862c:	b2d2      	uxtb	r2, r2
 800862e:	701a      	strb	r2, [r3, #0]
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	09db      	lsrs	r3, r3, #7
 8008634:	61bb      	str	r3, [r7, #24]
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	2b7f      	cmp	r3, #127	; 0x7f
 800863a:	d8f0      	bhi.n	800861e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	1c5a      	adds	r2, r3, #1
 8008640:	61fa      	str	r2, [r7, #28]
 8008642:	69ba      	ldr	r2, [r7, #24]
 8008644:	b2d2      	uxtb	r2, r2
 8008646:	701a      	strb	r2, [r3, #0]
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800864c:	2208      	movs	r2, #8
 800864e:	68f9      	ldr	r1, [r7, #12]
 8008650:	6938      	ldr	r0, [r7, #16]
 8008652:	f7ff f82f 	bl	80076b4 <_SendPacket>
  RECORD_END();
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	f383 8811 	msr	BASEPRI, r3
}
 800865c:	bf00      	nop
 800865e:	3720      	adds	r7, #32
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	200143dc 	.word	0x200143dc
 8008668:	200143ac 	.word	0x200143ac

0800866c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800866c:	b580      	push	{r7, lr}
 800866e:	b088      	sub	sp, #32
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008674:	f3ef 8311 	mrs	r3, BASEPRI
 8008678:	f04f 0120 	mov.w	r1, #32
 800867c:	f381 8811 	msr	BASEPRI, r1
 8008680:	617b      	str	r3, [r7, #20]
 8008682:	4819      	ldr	r0, [pc, #100]	; (80086e8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8008684:	f7fe ff28 	bl	80074d8 <_PreparePacket>
 8008688:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800868e:	4b17      	ldr	r3, [pc, #92]	; (80086ec <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	1ad3      	subs	r3, r2, r3
 8008696:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	61fb      	str	r3, [r7, #28]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	61bb      	str	r3, [r7, #24]
 80086a0:	e00b      	b.n	80086ba <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	b2da      	uxtb	r2, r3
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	1c59      	adds	r1, r3, #1
 80086aa:	61f9      	str	r1, [r7, #28]
 80086ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80086b0:	b2d2      	uxtb	r2, r2
 80086b2:	701a      	strb	r2, [r3, #0]
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	09db      	lsrs	r3, r3, #7
 80086b8:	61bb      	str	r3, [r7, #24]
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	2b7f      	cmp	r3, #127	; 0x7f
 80086be:	d8f0      	bhi.n	80086a2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	1c5a      	adds	r2, r3, #1
 80086c4:	61fa      	str	r2, [r7, #28]
 80086c6:	69ba      	ldr	r2, [r7, #24]
 80086c8:	b2d2      	uxtb	r2, r2
 80086ca:	701a      	strb	r2, [r3, #0]
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80086d0:	2204      	movs	r2, #4
 80086d2:	68f9      	ldr	r1, [r7, #12]
 80086d4:	6938      	ldr	r0, [r7, #16]
 80086d6:	f7fe ffed 	bl	80076b4 <_SendPacket>
  RECORD_END();
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	f383 8811 	msr	BASEPRI, r3
}
 80086e0:	bf00      	nop
 80086e2:	3720      	adds	r7, #32
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	200143dc 	.word	0x200143dc
 80086ec:	200143ac 	.word	0x200143ac

080086f0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b088      	sub	sp, #32
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80086f8:	f3ef 8311 	mrs	r3, BASEPRI
 80086fc:	f04f 0120 	mov.w	r1, #32
 8008700:	f381 8811 	msr	BASEPRI, r1
 8008704:	617b      	str	r3, [r7, #20]
 8008706:	4819      	ldr	r0, [pc, #100]	; (800876c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8008708:	f7fe fee6 	bl	80074d8 <_PreparePacket>
 800870c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008712:	4b17      	ldr	r3, [pc, #92]	; (8008770 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	61fb      	str	r3, [r7, #28]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	61bb      	str	r3, [r7, #24]
 8008724:	e00b      	b.n	800873e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	b2da      	uxtb	r2, r3
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	1c59      	adds	r1, r3, #1
 800872e:	61f9      	str	r1, [r7, #28]
 8008730:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008734:	b2d2      	uxtb	r2, r2
 8008736:	701a      	strb	r2, [r3, #0]
 8008738:	69bb      	ldr	r3, [r7, #24]
 800873a:	09db      	lsrs	r3, r3, #7
 800873c:	61bb      	str	r3, [r7, #24]
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	2b7f      	cmp	r3, #127	; 0x7f
 8008742:	d8f0      	bhi.n	8008726 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	1c5a      	adds	r2, r3, #1
 8008748:	61fa      	str	r2, [r7, #28]
 800874a:	69ba      	ldr	r2, [r7, #24]
 800874c:	b2d2      	uxtb	r2, r2
 800874e:	701a      	strb	r2, [r3, #0]
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8008754:	2206      	movs	r2, #6
 8008756:	68f9      	ldr	r1, [r7, #12]
 8008758:	6938      	ldr	r0, [r7, #16]
 800875a:	f7fe ffab 	bl	80076b4 <_SendPacket>
  RECORD_END();
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	f383 8811 	msr	BASEPRI, r3
}
 8008764:	bf00      	nop
 8008766:	3720      	adds	r7, #32
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}
 800876c:	200143dc 	.word	0x200143dc
 8008770:	200143ac 	.word	0x200143ac

08008774 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8008774:	b580      	push	{r7, lr}
 8008776:	b08a      	sub	sp, #40	; 0x28
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800877e:	f3ef 8311 	mrs	r3, BASEPRI
 8008782:	f04f 0120 	mov.w	r1, #32
 8008786:	f381 8811 	msr	BASEPRI, r1
 800878a:	617b      	str	r3, [r7, #20]
 800878c:	4827      	ldr	r0, [pc, #156]	; (800882c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800878e:	f7fe fea3 	bl	80074d8 <_PreparePacket>
 8008792:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008798:	4b25      	ldr	r3, [pc, #148]	; (8008830 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800879a:	691b      	ldr	r3, [r3, #16]
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	1ad3      	subs	r3, r2, r3
 80087a0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	627b      	str	r3, [r7, #36]	; 0x24
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	623b      	str	r3, [r7, #32]
 80087aa:	e00b      	b.n	80087c4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80087ac:	6a3b      	ldr	r3, [r7, #32]
 80087ae:	b2da      	uxtb	r2, r3
 80087b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b2:	1c59      	adds	r1, r3, #1
 80087b4:	6279      	str	r1, [r7, #36]	; 0x24
 80087b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80087ba:	b2d2      	uxtb	r2, r2
 80087bc:	701a      	strb	r2, [r3, #0]
 80087be:	6a3b      	ldr	r3, [r7, #32]
 80087c0:	09db      	lsrs	r3, r3, #7
 80087c2:	623b      	str	r3, [r7, #32]
 80087c4:	6a3b      	ldr	r3, [r7, #32]
 80087c6:	2b7f      	cmp	r3, #127	; 0x7f
 80087c8:	d8f0      	bhi.n	80087ac <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80087ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087cc:	1c5a      	adds	r2, r3, #1
 80087ce:	627a      	str	r2, [r7, #36]	; 0x24
 80087d0:	6a3a      	ldr	r2, [r7, #32]
 80087d2:	b2d2      	uxtb	r2, r2
 80087d4:	701a      	strb	r2, [r3, #0]
 80087d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	61fb      	str	r3, [r7, #28]
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	61bb      	str	r3, [r7, #24]
 80087e2:	e00b      	b.n	80087fc <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	b2da      	uxtb	r2, r3
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	1c59      	adds	r1, r3, #1
 80087ec:	61f9      	str	r1, [r7, #28]
 80087ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80087f2:	b2d2      	uxtb	r2, r2
 80087f4:	701a      	strb	r2, [r3, #0]
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	09db      	lsrs	r3, r3, #7
 80087fa:	61bb      	str	r3, [r7, #24]
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	2b7f      	cmp	r3, #127	; 0x7f
 8008800:	d8f0      	bhi.n	80087e4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	1c5a      	adds	r2, r3, #1
 8008806:	61fa      	str	r2, [r7, #28]
 8008808:	69ba      	ldr	r2, [r7, #24]
 800880a:	b2d2      	uxtb	r2, r2
 800880c:	701a      	strb	r2, [r3, #0]
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8008812:	2207      	movs	r2, #7
 8008814:	68f9      	ldr	r1, [r7, #12]
 8008816:	6938      	ldr	r0, [r7, #16]
 8008818:	f7fe ff4c 	bl	80076b4 <_SendPacket>
  RECORD_END();
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	f383 8811 	msr	BASEPRI, r3
}
 8008822:	bf00      	nop
 8008824:	3728      	adds	r7, #40	; 0x28
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	200143dc 	.word	0x200143dc
 8008830:	200143ac 	.word	0x200143ac

08008834 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800883c:	4b04      	ldr	r3, [pc, #16]	; (8008850 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800883e:	691b      	ldr	r3, [r3, #16]
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	1ad3      	subs	r3, r2, r3
}
 8008844:	4618      	mov	r0, r3
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr
 8008850:	200143ac 	.word	0x200143ac

08008854 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8008854:	b580      	push	{r7, lr}
 8008856:	b08c      	sub	sp, #48	; 0x30
 8008858:	af00      	add	r7, sp, #0
 800885a:	4603      	mov	r3, r0
 800885c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800885e:	4b3b      	ldr	r3, [pc, #236]	; (800894c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d06d      	beq.n	8008942 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8008866:	4b39      	ldr	r3, [pc, #228]	; (800894c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800886c:	2300      	movs	r3, #0
 800886e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008870:	e008      	b.n	8008884 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8008872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8008878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887a:	2b00      	cmp	r3, #0
 800887c:	d007      	beq.n	800888e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800887e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008880:	3301      	adds	r3, #1
 8008882:	62bb      	str	r3, [r7, #40]	; 0x28
 8008884:	79fb      	ldrb	r3, [r7, #7]
 8008886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008888:	429a      	cmp	r2, r3
 800888a:	d3f2      	bcc.n	8008872 <SEGGER_SYSVIEW_SendModule+0x1e>
 800888c:	e000      	b.n	8008890 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800888e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8008890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008892:	2b00      	cmp	r3, #0
 8008894:	d055      	beq.n	8008942 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008896:	f3ef 8311 	mrs	r3, BASEPRI
 800889a:	f04f 0120 	mov.w	r1, #32
 800889e:	f381 8811 	msr	BASEPRI, r1
 80088a2:	617b      	str	r3, [r7, #20]
 80088a4:	482a      	ldr	r0, [pc, #168]	; (8008950 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80088a6:	f7fe fe17 	bl	80074d8 <_PreparePacket>
 80088aa:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	627b      	str	r3, [r7, #36]	; 0x24
 80088b4:	79fb      	ldrb	r3, [r7, #7]
 80088b6:	623b      	str	r3, [r7, #32]
 80088b8:	e00b      	b.n	80088d2 <SEGGER_SYSVIEW_SendModule+0x7e>
 80088ba:	6a3b      	ldr	r3, [r7, #32]
 80088bc:	b2da      	uxtb	r2, r3
 80088be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c0:	1c59      	adds	r1, r3, #1
 80088c2:	6279      	str	r1, [r7, #36]	; 0x24
 80088c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80088c8:	b2d2      	uxtb	r2, r2
 80088ca:	701a      	strb	r2, [r3, #0]
 80088cc:	6a3b      	ldr	r3, [r7, #32]
 80088ce:	09db      	lsrs	r3, r3, #7
 80088d0:	623b      	str	r3, [r7, #32]
 80088d2:	6a3b      	ldr	r3, [r7, #32]
 80088d4:	2b7f      	cmp	r3, #127	; 0x7f
 80088d6:	d8f0      	bhi.n	80088ba <SEGGER_SYSVIEW_SendModule+0x66>
 80088d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088da:	1c5a      	adds	r2, r3, #1
 80088dc:	627a      	str	r2, [r7, #36]	; 0x24
 80088de:	6a3a      	ldr	r2, [r7, #32]
 80088e0:	b2d2      	uxtb	r2, r2
 80088e2:	701a      	strb	r2, [r3, #0]
 80088e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	61fb      	str	r3, [r7, #28]
 80088ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	61bb      	str	r3, [r7, #24]
 80088f2:	e00b      	b.n	800890c <SEGGER_SYSVIEW_SendModule+0xb8>
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	b2da      	uxtb	r2, r3
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	1c59      	adds	r1, r3, #1
 80088fc:	61f9      	str	r1, [r7, #28]
 80088fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008902:	b2d2      	uxtb	r2, r2
 8008904:	701a      	strb	r2, [r3, #0]
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	09db      	lsrs	r3, r3, #7
 800890a:	61bb      	str	r3, [r7, #24]
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	2b7f      	cmp	r3, #127	; 0x7f
 8008910:	d8f0      	bhi.n	80088f4 <SEGGER_SYSVIEW_SendModule+0xa0>
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	1c5a      	adds	r2, r3, #1
 8008916:	61fa      	str	r2, [r7, #28]
 8008918:	69ba      	ldr	r2, [r7, #24]
 800891a:	b2d2      	uxtb	r2, r2
 800891c:	701a      	strb	r2, [r3, #0]
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2280      	movs	r2, #128	; 0x80
 8008928:	4619      	mov	r1, r3
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f7fe fd84 	bl	8007438 <_EncodeStr>
 8008930:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8008932:	2216      	movs	r2, #22
 8008934:	68f9      	ldr	r1, [r7, #12]
 8008936:	6938      	ldr	r0, [r7, #16]
 8008938:	f7fe febc 	bl	80076b4 <_SendPacket>
      RECORD_END();
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8008942:	bf00      	nop
 8008944:	3730      	adds	r7, #48	; 0x30
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	200143d4 	.word	0x200143d4
 8008950:	200143dc 	.word	0x200143dc

08008954 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800895a:	4b0c      	ldr	r3, [pc, #48]	; (800898c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d00f      	beq.n	8008982 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8008962:	4b0a      	ldr	r3, [pc, #40]	; (800898c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d002      	beq.n	8008976 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	691b      	ldr	r3, [r3, #16]
 800897a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1f2      	bne.n	8008968 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8008982:	bf00      	nop
 8008984:	3708      	adds	r7, #8
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop
 800898c:	200143d4 	.word	0x200143d4

08008990 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8008990:	b580      	push	{r7, lr}
 8008992:	b086      	sub	sp, #24
 8008994:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8008996:	f3ef 8311 	mrs	r3, BASEPRI
 800899a:	f04f 0120 	mov.w	r1, #32
 800899e:	f381 8811 	msr	BASEPRI, r1
 80089a2:	60fb      	str	r3, [r7, #12]
 80089a4:	4817      	ldr	r0, [pc, #92]	; (8008a04 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80089a6:	f7fe fd97 	bl	80074d8 <_PreparePacket>
 80089aa:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	617b      	str	r3, [r7, #20]
 80089b4:	4b14      	ldr	r3, [pc, #80]	; (8008a08 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	613b      	str	r3, [r7, #16]
 80089ba:	e00b      	b.n	80089d4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	b2da      	uxtb	r2, r3
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	1c59      	adds	r1, r3, #1
 80089c4:	6179      	str	r1, [r7, #20]
 80089c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80089ca:	b2d2      	uxtb	r2, r2
 80089cc:	701a      	strb	r2, [r3, #0]
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	09db      	lsrs	r3, r3, #7
 80089d2:	613b      	str	r3, [r7, #16]
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	2b7f      	cmp	r3, #127	; 0x7f
 80089d8:	d8f0      	bhi.n	80089bc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	1c5a      	adds	r2, r3, #1
 80089de:	617a      	str	r2, [r7, #20]
 80089e0:	693a      	ldr	r2, [r7, #16]
 80089e2:	b2d2      	uxtb	r2, r2
 80089e4:	701a      	strb	r2, [r3, #0]
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80089ea:	221b      	movs	r2, #27
 80089ec:	6879      	ldr	r1, [r7, #4]
 80089ee:	68b8      	ldr	r0, [r7, #8]
 80089f0:	f7fe fe60 	bl	80076b4 <_SendPacket>
  RECORD_END();
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f383 8811 	msr	BASEPRI, r3
}
 80089fa:	bf00      	nop
 80089fc:	3718      	adds	r7, #24
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	200143dc 	.word	0x200143dc
 8008a08:	200143d8 	.word	0x200143d8

08008a0c <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 8008a0c:	b40f      	push	{r0, r1, r2, r3}
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b082      	sub	sp, #8
 8008a12:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 8008a14:	f107 0314 	add.w	r3, r7, #20
 8008a18:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8008a1a:	1d3b      	adds	r3, r7, #4
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	2100      	movs	r1, #0
 8008a20:	6938      	ldr	r0, [r7, #16]
 8008a22:	f7fe ffb5 	bl	8007990 <_VPrintHost>
  va_end(ParamList);
#endif
}
 8008a26:	bf00      	nop
 8008a28:	3708      	adds	r7, #8
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a30:	b004      	add	sp, #16
 8008a32:	4770      	bx	lr

08008a34 <SEGGER_SYSVIEW_Print>:
*    Print a string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Print(const char* s) {
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b08a      	sub	sp, #40	; 0x28
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008a3c:	f3ef 8311 	mrs	r3, BASEPRI
 8008a40:	f04f 0120 	mov.w	r1, #32
 8008a44:	f381 8811 	msr	BASEPRI, r1
 8008a48:	617b      	str	r3, [r7, #20]
 8008a4a:	4827      	ldr	r0, [pc, #156]	; (8008ae8 <SEGGER_SYSVIEW_Print+0xb4>)
 8008a4c:	f7fe fd44 	bl	80074d8 <_PreparePacket>
 8008a50:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008a52:	2280      	movs	r2, #128	; 0x80
 8008a54:	6879      	ldr	r1, [r7, #4]
 8008a56:	6938      	ldr	r0, [r7, #16]
 8008a58:	f7fe fcee 	bl	8007438 <_EncodeStr>
 8008a5c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_LOG);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	627b      	str	r3, [r7, #36]	; 0x24
 8008a62:	2300      	movs	r3, #0
 8008a64:	623b      	str	r3, [r7, #32]
 8008a66:	e00b      	b.n	8008a80 <SEGGER_SYSVIEW_Print+0x4c>
 8008a68:	6a3b      	ldr	r3, [r7, #32]
 8008a6a:	b2da      	uxtb	r2, r3
 8008a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6e:	1c59      	adds	r1, r3, #1
 8008a70:	6279      	str	r1, [r7, #36]	; 0x24
 8008a72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a76:	b2d2      	uxtb	r2, r2
 8008a78:	701a      	strb	r2, [r3, #0]
 8008a7a:	6a3b      	ldr	r3, [r7, #32]
 8008a7c:	09db      	lsrs	r3, r3, #7
 8008a7e:	623b      	str	r3, [r7, #32]
 8008a80:	6a3b      	ldr	r3, [r7, #32]
 8008a82:	2b7f      	cmp	r3, #127	; 0x7f
 8008a84:	d8f0      	bhi.n	8008a68 <SEGGER_SYSVIEW_Print+0x34>
 8008a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a88:	1c5a      	adds	r2, r3, #1
 8008a8a:	627a      	str	r2, [r7, #36]	; 0x24
 8008a8c:	6a3a      	ldr	r2, [r7, #32]
 8008a8e:	b2d2      	uxtb	r2, r2
 8008a90:	701a      	strb	r2, [r3, #0]
 8008a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a94:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	61fb      	str	r3, [r7, #28]
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	61bb      	str	r3, [r7, #24]
 8008a9e:	e00b      	b.n	8008ab8 <SEGGER_SYSVIEW_Print+0x84>
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	b2da      	uxtb	r2, r3
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	1c59      	adds	r1, r3, #1
 8008aa8:	61f9      	str	r1, [r7, #28]
 8008aaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008aae:	b2d2      	uxtb	r2, r2
 8008ab0:	701a      	strb	r2, [r3, #0]
 8008ab2:	69bb      	ldr	r3, [r7, #24]
 8008ab4:	09db      	lsrs	r3, r3, #7
 8008ab6:	61bb      	str	r3, [r7, #24]
 8008ab8:	69bb      	ldr	r3, [r7, #24]
 8008aba:	2b7f      	cmp	r3, #127	; 0x7f
 8008abc:	d8f0      	bhi.n	8008aa0 <SEGGER_SYSVIEW_Print+0x6c>
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	1c5a      	adds	r2, r3, #1
 8008ac2:	61fa      	str	r2, [r7, #28]
 8008ac4:	69ba      	ldr	r2, [r7, #24]
 8008ac6:	b2d2      	uxtb	r2, r2
 8008ac8:	701a      	strb	r2, [r3, #0]
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8008ace:	221a      	movs	r2, #26
 8008ad0:	68f9      	ldr	r1, [r7, #12]
 8008ad2:	6938      	ldr	r0, [r7, #16]
 8008ad4:	f7fe fdee 	bl	80076b4 <_SendPacket>
  RECORD_END();
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	f383 8811 	msr	BASEPRI, r3
}
 8008ade:	bf00      	nop
 8008ae0:	3728      	adds	r7, #40	; 0x28
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	200143dc 	.word	0x200143dc

08008aec <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b08a      	sub	sp, #40	; 0x28
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008af4:	f3ef 8311 	mrs	r3, BASEPRI
 8008af8:	f04f 0120 	mov.w	r1, #32
 8008afc:	f381 8811 	msr	BASEPRI, r1
 8008b00:	617b      	str	r3, [r7, #20]
 8008b02:	4827      	ldr	r0, [pc, #156]	; (8008ba0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8008b04:	f7fe fce8 	bl	80074d8 <_PreparePacket>
 8008b08:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008b0a:	2280      	movs	r2, #128	; 0x80
 8008b0c:	6879      	ldr	r1, [r7, #4]
 8008b0e:	6938      	ldr	r0, [r7, #16]
 8008b10:	f7fe fc92 	bl	8007438 <_EncodeStr>
 8008b14:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	627b      	str	r3, [r7, #36]	; 0x24
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	623b      	str	r3, [r7, #32]
 8008b1e:	e00b      	b.n	8008b38 <SEGGER_SYSVIEW_Warn+0x4c>
 8008b20:	6a3b      	ldr	r3, [r7, #32]
 8008b22:	b2da      	uxtb	r2, r3
 8008b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b26:	1c59      	adds	r1, r3, #1
 8008b28:	6279      	str	r1, [r7, #36]	; 0x24
 8008b2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008b2e:	b2d2      	uxtb	r2, r2
 8008b30:	701a      	strb	r2, [r3, #0]
 8008b32:	6a3b      	ldr	r3, [r7, #32]
 8008b34:	09db      	lsrs	r3, r3, #7
 8008b36:	623b      	str	r3, [r7, #32]
 8008b38:	6a3b      	ldr	r3, [r7, #32]
 8008b3a:	2b7f      	cmp	r3, #127	; 0x7f
 8008b3c:	d8f0      	bhi.n	8008b20 <SEGGER_SYSVIEW_Warn+0x34>
 8008b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b40:	1c5a      	adds	r2, r3, #1
 8008b42:	627a      	str	r2, [r7, #36]	; 0x24
 8008b44:	6a3a      	ldr	r2, [r7, #32]
 8008b46:	b2d2      	uxtb	r2, r2
 8008b48:	701a      	strb	r2, [r3, #0]
 8008b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	61fb      	str	r3, [r7, #28]
 8008b52:	2300      	movs	r3, #0
 8008b54:	61bb      	str	r3, [r7, #24]
 8008b56:	e00b      	b.n	8008b70 <SEGGER_SYSVIEW_Warn+0x84>
 8008b58:	69bb      	ldr	r3, [r7, #24]
 8008b5a:	b2da      	uxtb	r2, r3
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	1c59      	adds	r1, r3, #1
 8008b60:	61f9      	str	r1, [r7, #28]
 8008b62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008b66:	b2d2      	uxtb	r2, r2
 8008b68:	701a      	strb	r2, [r3, #0]
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	09db      	lsrs	r3, r3, #7
 8008b6e:	61bb      	str	r3, [r7, #24]
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	2b7f      	cmp	r3, #127	; 0x7f
 8008b74:	d8f0      	bhi.n	8008b58 <SEGGER_SYSVIEW_Warn+0x6c>
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	1c5a      	adds	r2, r3, #1
 8008b7a:	61fa      	str	r2, [r7, #28]
 8008b7c:	69ba      	ldr	r2, [r7, #24]
 8008b7e:	b2d2      	uxtb	r2, r2
 8008b80:	701a      	strb	r2, [r3, #0]
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8008b86:	221a      	movs	r2, #26
 8008b88:	68f9      	ldr	r1, [r7, #12]
 8008b8a:	6938      	ldr	r0, [r7, #16]
 8008b8c:	f7fe fd92 	bl	80076b4 <_SendPacket>
  RECORD_END();
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	f383 8811 	msr	BASEPRI, r3
}
 8008b96:	bf00      	nop
 8008b98:	3728      	adds	r7, #40	; 0x28
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	200143dc 	.word	0x200143dc

08008ba4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8008ba8:	4803      	ldr	r0, [pc, #12]	; (8008bb8 <_cbSendSystemDesc+0x14>)
 8008baa:	f7ff fc31 	bl	8008410 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8008bae:	4803      	ldr	r0, [pc, #12]	; (8008bbc <_cbSendSystemDesc+0x18>)
 8008bb0:	f7ff fc2e 	bl	8008410 <SEGGER_SYSVIEW_SendSysDesc>
}
 8008bb4:	bf00      	nop
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	08009144 	.word	0x08009144
 8008bbc:	08009188 	.word	0x08009188

08008bc0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8008bc4:	4b06      	ldr	r3, [pc, #24]	; (8008be0 <SEGGER_SYSVIEW_Conf+0x20>)
 8008bc6:	6818      	ldr	r0, [r3, #0]
 8008bc8:	4b05      	ldr	r3, [pc, #20]	; (8008be0 <SEGGER_SYSVIEW_Conf+0x20>)
 8008bca:	6819      	ldr	r1, [r3, #0]
 8008bcc:	4b05      	ldr	r3, [pc, #20]	; (8008be4 <SEGGER_SYSVIEW_Conf+0x24>)
 8008bce:	4a06      	ldr	r2, [pc, #24]	; (8008be8 <SEGGER_SYSVIEW_Conf+0x28>)
 8008bd0:	f7fe ff9c 	bl	8007b0c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8008bd4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8008bd8:	f7fe ffdc 	bl	8007b94 <SEGGER_SYSVIEW_SetRAMBase>
}
 8008bdc:	bf00      	nop
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	20000000 	.word	0x20000000
 8008be4:	08008ba5 	.word	0x08008ba5
 8008be8:	08009240 	.word	0x08009240

08008bec <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8008bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bee:	b085      	sub	sp, #20
 8008bf0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	607b      	str	r3, [r7, #4]
 8008bf6:	e033      	b.n	8008c60 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8008bf8:	491e      	ldr	r1, [pc, #120]	; (8008c74 <_cbSendTaskList+0x88>)
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	4613      	mov	r3, r2
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	4413      	add	r3, r2
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	440b      	add	r3, r1
 8008c06:	6818      	ldr	r0, [r3, #0]
 8008c08:	491a      	ldr	r1, [pc, #104]	; (8008c74 <_cbSendTaskList+0x88>)
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	4413      	add	r3, r2
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	440b      	add	r3, r1
 8008c16:	3304      	adds	r3, #4
 8008c18:	6819      	ldr	r1, [r3, #0]
 8008c1a:	4c16      	ldr	r4, [pc, #88]	; (8008c74 <_cbSendTaskList+0x88>)
 8008c1c:	687a      	ldr	r2, [r7, #4]
 8008c1e:	4613      	mov	r3, r2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	4413      	add	r3, r2
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	4423      	add	r3, r4
 8008c28:	3308      	adds	r3, #8
 8008c2a:	681c      	ldr	r4, [r3, #0]
 8008c2c:	4d11      	ldr	r5, [pc, #68]	; (8008c74 <_cbSendTaskList+0x88>)
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	4613      	mov	r3, r2
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	4413      	add	r3, r2
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	442b      	add	r3, r5
 8008c3a:	330c      	adds	r3, #12
 8008c3c:	681d      	ldr	r5, [r3, #0]
 8008c3e:	4e0d      	ldr	r6, [pc, #52]	; (8008c74 <_cbSendTaskList+0x88>)
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	4613      	mov	r3, r2
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	4413      	add	r3, r2
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	4433      	add	r3, r6
 8008c4c:	3310      	adds	r3, #16
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	9300      	str	r3, [sp, #0]
 8008c52:	462b      	mov	r3, r5
 8008c54:	4622      	mov	r2, r4
 8008c56:	f000 f8bd 	bl	8008dd4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	607b      	str	r3, [r7, #4]
 8008c60:	4b05      	ldr	r3, [pc, #20]	; (8008c78 <_cbSendTaskList+0x8c>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d3c6      	bcc.n	8008bf8 <_cbSendTaskList+0xc>
  }
}
 8008c6a:	bf00      	nop
 8008c6c:	bf00      	nop
 8008c6e:	370c      	adds	r7, #12
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c74:	200144c0 	.word	0x200144c0
 8008c78:	20014560 	.word	0x20014560

08008c7c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8008c7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c80:	b082      	sub	sp, #8
 8008c82:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8008c84:	f7fc fcfa 	bl	800567c <xTaskGetTickCountFromISR>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	469a      	mov	sl, r3
 8008c8e:	4693      	mov	fp, r2
 8008c90:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8008c94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c98:	4602      	mov	r2, r0
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	f04f 0a00 	mov.w	sl, #0
 8008ca0:	f04f 0b00 	mov.w	fp, #0
 8008ca4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8008ca8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8008cac:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8008cb0:	4652      	mov	r2, sl
 8008cb2:	465b      	mov	r3, fp
 8008cb4:	1a14      	subs	r4, r2, r0
 8008cb6:	eb63 0501 	sbc.w	r5, r3, r1
 8008cba:	f04f 0200 	mov.w	r2, #0
 8008cbe:	f04f 0300 	mov.w	r3, #0
 8008cc2:	00ab      	lsls	r3, r5, #2
 8008cc4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8008cc8:	00a2      	lsls	r2, r4, #2
 8008cca:	4614      	mov	r4, r2
 8008ccc:	461d      	mov	r5, r3
 8008cce:	eb14 0800 	adds.w	r8, r4, r0
 8008cd2:	eb45 0901 	adc.w	r9, r5, r1
 8008cd6:	f04f 0200 	mov.w	r2, #0
 8008cda:	f04f 0300 	mov.w	r3, #0
 8008cde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008ce2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008ce6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008cea:	4690      	mov	r8, r2
 8008cec:	4699      	mov	r9, r3
 8008cee:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8008cf2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8008cf6:	4610      	mov	r0, r2
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	3708      	adds	r7, #8
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08008d04 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b086      	sub	sp, #24
 8008d08:	af02      	add	r7, sp, #8
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	607a      	str	r2, [r7, #4]
 8008d10:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8008d12:	2205      	movs	r2, #5
 8008d14:	492b      	ldr	r1, [pc, #172]	; (8008dc4 <SYSVIEW_AddTask+0xc0>)
 8008d16:	68b8      	ldr	r0, [r7, #8]
 8008d18:	f000 f8a2 	bl	8008e60 <memcmp>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d04b      	beq.n	8008dba <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8008d22:	4b29      	ldr	r3, [pc, #164]	; (8008dc8 <SYSVIEW_AddTask+0xc4>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	2b07      	cmp	r3, #7
 8008d28:	d903      	bls.n	8008d32 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8008d2a:	4828      	ldr	r0, [pc, #160]	; (8008dcc <SYSVIEW_AddTask+0xc8>)
 8008d2c:	f7ff fede 	bl	8008aec <SEGGER_SYSVIEW_Warn>
    return;
 8008d30:	e044      	b.n	8008dbc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8008d32:	4b25      	ldr	r3, [pc, #148]	; (8008dc8 <SYSVIEW_AddTask+0xc4>)
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	4926      	ldr	r1, [pc, #152]	; (8008dd0 <SYSVIEW_AddTask+0xcc>)
 8008d38:	4613      	mov	r3, r2
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	4413      	add	r3, r2
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	440b      	add	r3, r1
 8008d42:	68fa      	ldr	r2, [r7, #12]
 8008d44:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8008d46:	4b20      	ldr	r3, [pc, #128]	; (8008dc8 <SYSVIEW_AddTask+0xc4>)
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	4921      	ldr	r1, [pc, #132]	; (8008dd0 <SYSVIEW_AddTask+0xcc>)
 8008d4c:	4613      	mov	r3, r2
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	4413      	add	r3, r2
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	440b      	add	r3, r1
 8008d56:	3304      	adds	r3, #4
 8008d58:	68ba      	ldr	r2, [r7, #8]
 8008d5a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8008d5c:	4b1a      	ldr	r3, [pc, #104]	; (8008dc8 <SYSVIEW_AddTask+0xc4>)
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	491b      	ldr	r1, [pc, #108]	; (8008dd0 <SYSVIEW_AddTask+0xcc>)
 8008d62:	4613      	mov	r3, r2
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	4413      	add	r3, r2
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	440b      	add	r3, r1
 8008d6c:	3308      	adds	r3, #8
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8008d72:	4b15      	ldr	r3, [pc, #84]	; (8008dc8 <SYSVIEW_AddTask+0xc4>)
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	4916      	ldr	r1, [pc, #88]	; (8008dd0 <SYSVIEW_AddTask+0xcc>)
 8008d78:	4613      	mov	r3, r2
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	4413      	add	r3, r2
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	440b      	add	r3, r1
 8008d82:	330c      	adds	r3, #12
 8008d84:	683a      	ldr	r2, [r7, #0]
 8008d86:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8008d88:	4b0f      	ldr	r3, [pc, #60]	; (8008dc8 <SYSVIEW_AddTask+0xc4>)
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	4910      	ldr	r1, [pc, #64]	; (8008dd0 <SYSVIEW_AddTask+0xcc>)
 8008d8e:	4613      	mov	r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	4413      	add	r3, r2
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	440b      	add	r3, r1
 8008d98:	3310      	adds	r3, #16
 8008d9a:	69ba      	ldr	r2, [r7, #24]
 8008d9c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8008d9e:	4b0a      	ldr	r3, [pc, #40]	; (8008dc8 <SYSVIEW_AddTask+0xc4>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	3301      	adds	r3, #1
 8008da4:	4a08      	ldr	r2, [pc, #32]	; (8008dc8 <SYSVIEW_AddTask+0xc4>)
 8008da6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8008da8:	69bb      	ldr	r3, [r7, #24]
 8008daa:	9300      	str	r3, [sp, #0]
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	68b9      	ldr	r1, [r7, #8]
 8008db2:	68f8      	ldr	r0, [r7, #12]
 8008db4:	f000 f80e 	bl	8008dd4 <SYSVIEW_SendTaskInfo>
 8008db8:	e000      	b.n	8008dbc <SYSVIEW_AddTask+0xb8>
    return;
 8008dba:	bf00      	nop

}
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	08009198 	.word	0x08009198
 8008dc8:	20014560 	.word	0x20014560
 8008dcc:	080091a0 	.word	0x080091a0
 8008dd0:	200144c0 	.word	0x200144c0

08008dd4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b08a      	sub	sp, #40	; 0x28
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	607a      	str	r2, [r7, #4]
 8008de0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8008de2:	f107 0314 	add.w	r3, r7, #20
 8008de6:	2214      	movs	r2, #20
 8008de8:	2100      	movs	r1, #0
 8008dea:	4618      	mov	r0, r3
 8008dec:	f000 f856 	bl	8008e9c <memset>
  TaskInfo.TaskID     = TaskID;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8008e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e02:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8008e04:	f107 0314 	add.w	r3, r7, #20
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f7ff fa09 	bl	8008220 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8008e0e:	bf00      	nop
 8008e10:	3728      	adds	r7, #40	; 0x28
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
	...

08008e18 <__libc_init_array>:
 8008e18:	b570      	push	{r4, r5, r6, lr}
 8008e1a:	4d0d      	ldr	r5, [pc, #52]	; (8008e50 <__libc_init_array+0x38>)
 8008e1c:	4c0d      	ldr	r4, [pc, #52]	; (8008e54 <__libc_init_array+0x3c>)
 8008e1e:	1b64      	subs	r4, r4, r5
 8008e20:	10a4      	asrs	r4, r4, #2
 8008e22:	2600      	movs	r6, #0
 8008e24:	42a6      	cmp	r6, r4
 8008e26:	d109      	bne.n	8008e3c <__libc_init_array+0x24>
 8008e28:	4d0b      	ldr	r5, [pc, #44]	; (8008e58 <__libc_init_array+0x40>)
 8008e2a:	4c0c      	ldr	r4, [pc, #48]	; (8008e5c <__libc_init_array+0x44>)
 8008e2c:	f000 f83e 	bl	8008eac <_init>
 8008e30:	1b64      	subs	r4, r4, r5
 8008e32:	10a4      	asrs	r4, r4, #2
 8008e34:	2600      	movs	r6, #0
 8008e36:	42a6      	cmp	r6, r4
 8008e38:	d105      	bne.n	8008e46 <__libc_init_array+0x2e>
 8008e3a:	bd70      	pop	{r4, r5, r6, pc}
 8008e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e40:	4798      	blx	r3
 8008e42:	3601      	adds	r6, #1
 8008e44:	e7ee      	b.n	8008e24 <__libc_init_array+0xc>
 8008e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e4a:	4798      	blx	r3
 8008e4c:	3601      	adds	r6, #1
 8008e4e:	e7f2      	b.n	8008e36 <__libc_init_array+0x1e>
 8008e50:	08009250 	.word	0x08009250
 8008e54:	08009250 	.word	0x08009250
 8008e58:	08009250 	.word	0x08009250
 8008e5c:	08009254 	.word	0x08009254

08008e60 <memcmp>:
 8008e60:	b510      	push	{r4, lr}
 8008e62:	3901      	subs	r1, #1
 8008e64:	4402      	add	r2, r0
 8008e66:	4290      	cmp	r0, r2
 8008e68:	d101      	bne.n	8008e6e <memcmp+0xe>
 8008e6a:	2000      	movs	r0, #0
 8008e6c:	e005      	b.n	8008e7a <memcmp+0x1a>
 8008e6e:	7803      	ldrb	r3, [r0, #0]
 8008e70:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008e74:	42a3      	cmp	r3, r4
 8008e76:	d001      	beq.n	8008e7c <memcmp+0x1c>
 8008e78:	1b18      	subs	r0, r3, r4
 8008e7a:	bd10      	pop	{r4, pc}
 8008e7c:	3001      	adds	r0, #1
 8008e7e:	e7f2      	b.n	8008e66 <memcmp+0x6>

08008e80 <memcpy>:
 8008e80:	440a      	add	r2, r1
 8008e82:	4291      	cmp	r1, r2
 8008e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e88:	d100      	bne.n	8008e8c <memcpy+0xc>
 8008e8a:	4770      	bx	lr
 8008e8c:	b510      	push	{r4, lr}
 8008e8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e96:	4291      	cmp	r1, r2
 8008e98:	d1f9      	bne.n	8008e8e <memcpy+0xe>
 8008e9a:	bd10      	pop	{r4, pc}

08008e9c <memset>:
 8008e9c:	4402      	add	r2, r0
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d100      	bne.n	8008ea6 <memset+0xa>
 8008ea4:	4770      	bx	lr
 8008ea6:	f803 1b01 	strb.w	r1, [r3], #1
 8008eaa:	e7f9      	b.n	8008ea0 <memset+0x4>

08008eac <_init>:
 8008eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eae:	bf00      	nop
 8008eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eb2:	bc08      	pop	{r3}
 8008eb4:	469e      	mov	lr, r3
 8008eb6:	4770      	bx	lr

08008eb8 <_fini>:
 8008eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eba:	bf00      	nop
 8008ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ebe:	bc08      	pop	{r3}
 8008ec0:	469e      	mov	lr, r3
 8008ec2:	4770      	bx	lr
