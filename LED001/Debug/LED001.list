
LED001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e34  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08006fe4  08006fe4  00016fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007158  08007158  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08007158  08007158  00017158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007160  08007160  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007160  08007160  00017160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007164  08007164  00017164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007168  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00014488  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001449c  2001449c  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   000143b9  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d15  00000000  00000000  000343fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012e8  00000000  00000000  00037118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001170  00000000  00000000  00038400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f512  00000000  00000000  00039570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00006483  00000000  00000000  00048a82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0004ef05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f20  00000000  00000000  0004ef58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000014 	.word	0x20000014
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006fcc 	.word	0x08006fcc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000018 	.word	0x20000018
 80001ec:	08006fcc 	.word	0x08006fcc

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20012e24 	.word	0x20012e24

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b974 	b.w	8000584 <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9d08      	ldr	r5, [sp, #32]
 80002ba:	4604      	mov	r4, r0
 80002bc:	468e      	mov	lr, r1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d14d      	bne.n	800035e <__udivmoddi4+0xaa>
 80002c2:	428a      	cmp	r2, r1
 80002c4:	4694      	mov	ip, r2
 80002c6:	d969      	bls.n	800039c <__udivmoddi4+0xe8>
 80002c8:	fab2 f282 	clz	r2, r2
 80002cc:	b152      	cbz	r2, 80002e4 <__udivmoddi4+0x30>
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	f1c2 0120 	rsb	r1, r2, #32
 80002d6:	fa20 f101 	lsr.w	r1, r0, r1
 80002da:	fa0c fc02 	lsl.w	ip, ip, r2
 80002de:	ea41 0e03 	orr.w	lr, r1, r3
 80002e2:	4094      	lsls	r4, r2
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	0c21      	lsrs	r1, r4, #16
 80002ea:	fbbe f6f8 	udiv	r6, lr, r8
 80002ee:	fa1f f78c 	uxth.w	r7, ip
 80002f2:	fb08 e316 	mls	r3, r8, r6, lr
 80002f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002fa:	fb06 f107 	mul.w	r1, r6, r7
 80002fe:	4299      	cmp	r1, r3
 8000300:	d90a      	bls.n	8000318 <__udivmoddi4+0x64>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 30ff 	add.w	r0, r6, #4294967295
 800030a:	f080 811f 	bcs.w	800054c <__udivmoddi4+0x298>
 800030e:	4299      	cmp	r1, r3
 8000310:	f240 811c 	bls.w	800054c <__udivmoddi4+0x298>
 8000314:	3e02      	subs	r6, #2
 8000316:	4463      	add	r3, ip
 8000318:	1a5b      	subs	r3, r3, r1
 800031a:	b2a4      	uxth	r4, r4
 800031c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000320:	fb08 3310 	mls	r3, r8, r0, r3
 8000324:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000328:	fb00 f707 	mul.w	r7, r0, r7
 800032c:	42a7      	cmp	r7, r4
 800032e:	d90a      	bls.n	8000346 <__udivmoddi4+0x92>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	f080 810a 	bcs.w	8000550 <__udivmoddi4+0x29c>
 800033c:	42a7      	cmp	r7, r4
 800033e:	f240 8107 	bls.w	8000550 <__udivmoddi4+0x29c>
 8000342:	4464      	add	r4, ip
 8000344:	3802      	subs	r0, #2
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	1be4      	subs	r4, r4, r7
 800034c:	2600      	movs	r6, #0
 800034e:	b11d      	cbz	r5, 8000358 <__udivmoddi4+0xa4>
 8000350:	40d4      	lsrs	r4, r2
 8000352:	2300      	movs	r3, #0
 8000354:	e9c5 4300 	strd	r4, r3, [r5]
 8000358:	4631      	mov	r1, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0xc2>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80ef 	beq.w	8000546 <__udivmoddi4+0x292>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x160>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xd4>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80f9 	bhi.w	800057a <__udivmoddi4+0x2c6>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0303 	sbc.w	r3, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	469e      	mov	lr, r3
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e0      	beq.n	8000358 <__udivmoddi4+0xa4>
 8000396:	e9c5 4e00 	strd	r4, lr, [r5]
 800039a:	e7dd      	b.n	8000358 <__udivmoddi4+0xa4>
 800039c:	b902      	cbnz	r2, 80003a0 <__udivmoddi4+0xec>
 800039e:	deff      	udf	#255	; 0xff
 80003a0:	fab2 f282 	clz	r2, r2
 80003a4:	2a00      	cmp	r2, #0
 80003a6:	f040 8092 	bne.w	80004ce <__udivmoddi4+0x21a>
 80003aa:	eba1 010c 	sub.w	r1, r1, ip
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	2601      	movs	r6, #1
 80003b8:	0c20      	lsrs	r0, r4, #16
 80003ba:	fbb1 f3f7 	udiv	r3, r1, r7
 80003be:	fb07 1113 	mls	r1, r7, r3, r1
 80003c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c6:	fb0e f003 	mul.w	r0, lr, r3
 80003ca:	4288      	cmp	r0, r1
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x12c>
 80003ce:	eb1c 0101 	adds.w	r1, ip, r1
 80003d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x12a>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f200 80cb 	bhi.w	8000574 <__udivmoddi4+0x2c0>
 80003de:	4643      	mov	r3, r8
 80003e0:	1a09      	subs	r1, r1, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e8:	fb07 1110 	mls	r1, r7, r0, r1
 80003ec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003f0:	fb0e fe00 	mul.w	lr, lr, r0
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x156>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x154>
 8000402:	45a6      	cmp	lr, r4
 8000404:	f200 80bb 	bhi.w	800057e <__udivmoddi4+0x2ca>
 8000408:	4608      	mov	r0, r1
 800040a:	eba4 040e 	sub.w	r4, r4, lr
 800040e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000412:	e79c      	b.n	800034e <__udivmoddi4+0x9a>
 8000414:	f1c6 0720 	rsb	r7, r6, #32
 8000418:	40b3      	lsls	r3, r6
 800041a:	fa22 fc07 	lsr.w	ip, r2, r7
 800041e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000422:	fa20 f407 	lsr.w	r4, r0, r7
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	431c      	orrs	r4, r3
 800042c:	40f9      	lsrs	r1, r7
 800042e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000432:	fa00 f306 	lsl.w	r3, r0, r6
 8000436:	fbb1 f8f9 	udiv	r8, r1, r9
 800043a:	0c20      	lsrs	r0, r4, #16
 800043c:	fa1f fe8c 	uxth.w	lr, ip
 8000440:	fb09 1118 	mls	r1, r9, r8, r1
 8000444:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000448:	fb08 f00e 	mul.w	r0, r8, lr
 800044c:	4288      	cmp	r0, r1
 800044e:	fa02 f206 	lsl.w	r2, r2, r6
 8000452:	d90b      	bls.n	800046c <__udivmoddi4+0x1b8>
 8000454:	eb1c 0101 	adds.w	r1, ip, r1
 8000458:	f108 3aff 	add.w	sl, r8, #4294967295
 800045c:	f080 8088 	bcs.w	8000570 <__udivmoddi4+0x2bc>
 8000460:	4288      	cmp	r0, r1
 8000462:	f240 8085 	bls.w	8000570 <__udivmoddi4+0x2bc>
 8000466:	f1a8 0802 	sub.w	r8, r8, #2
 800046a:	4461      	add	r1, ip
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f9 	udiv	r0, r1, r9
 8000474:	fb09 1110 	mls	r1, r9, r0, r1
 8000478:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800047c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000480:	458e      	cmp	lr, r1
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x1e2>
 8000484:	eb1c 0101 	adds.w	r1, ip, r1
 8000488:	f100 34ff 	add.w	r4, r0, #4294967295
 800048c:	d26c      	bcs.n	8000568 <__udivmoddi4+0x2b4>
 800048e:	458e      	cmp	lr, r1
 8000490:	d96a      	bls.n	8000568 <__udivmoddi4+0x2b4>
 8000492:	3802      	subs	r0, #2
 8000494:	4461      	add	r1, ip
 8000496:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800049a:	fba0 9402 	umull	r9, r4, r0, r2
 800049e:	eba1 010e 	sub.w	r1, r1, lr
 80004a2:	42a1      	cmp	r1, r4
 80004a4:	46c8      	mov	r8, r9
 80004a6:	46a6      	mov	lr, r4
 80004a8:	d356      	bcc.n	8000558 <__udivmoddi4+0x2a4>
 80004aa:	d053      	beq.n	8000554 <__udivmoddi4+0x2a0>
 80004ac:	b15d      	cbz	r5, 80004c6 <__udivmoddi4+0x212>
 80004ae:	ebb3 0208 	subs.w	r2, r3, r8
 80004b2:	eb61 010e 	sbc.w	r1, r1, lr
 80004b6:	fa01 f707 	lsl.w	r7, r1, r7
 80004ba:	fa22 f306 	lsr.w	r3, r2, r6
 80004be:	40f1      	lsrs	r1, r6
 80004c0:	431f      	orrs	r7, r3
 80004c2:	e9c5 7100 	strd	r7, r1, [r5]
 80004c6:	2600      	movs	r6, #0
 80004c8:	4631      	mov	r1, r6
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	40d8      	lsrs	r0, r3
 80004d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d8:	fa21 f303 	lsr.w	r3, r1, r3
 80004dc:	4091      	lsls	r1, r2
 80004de:	4301      	orrs	r1, r0
 80004e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e4:	fa1f fe8c 	uxth.w	lr, ip
 80004e8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004ec:	fb07 3610 	mls	r6, r7, r0, r3
 80004f0:	0c0b      	lsrs	r3, r1, #16
 80004f2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f6:	fb00 f60e 	mul.w	r6, r0, lr
 80004fa:	429e      	cmp	r6, r3
 80004fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x260>
 8000502:	eb1c 0303 	adds.w	r3, ip, r3
 8000506:	f100 38ff 	add.w	r8, r0, #4294967295
 800050a:	d22f      	bcs.n	800056c <__udivmoddi4+0x2b8>
 800050c:	429e      	cmp	r6, r3
 800050e:	d92d      	bls.n	800056c <__udivmoddi4+0x2b8>
 8000510:	3802      	subs	r0, #2
 8000512:	4463      	add	r3, ip
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	b289      	uxth	r1, r1
 8000518:	fbb3 f6f7 	udiv	r6, r3, r7
 800051c:	fb07 3316 	mls	r3, r7, r6, r3
 8000520:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000524:	fb06 f30e 	mul.w	r3, r6, lr
 8000528:	428b      	cmp	r3, r1
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x28a>
 800052c:	eb1c 0101 	adds.w	r1, ip, r1
 8000530:	f106 38ff 	add.w	r8, r6, #4294967295
 8000534:	d216      	bcs.n	8000564 <__udivmoddi4+0x2b0>
 8000536:	428b      	cmp	r3, r1
 8000538:	d914      	bls.n	8000564 <__udivmoddi4+0x2b0>
 800053a:	3e02      	subs	r6, #2
 800053c:	4461      	add	r1, ip
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000544:	e738      	b.n	80003b8 <__udivmoddi4+0x104>
 8000546:	462e      	mov	r6, r5
 8000548:	4628      	mov	r0, r5
 800054a:	e705      	b.n	8000358 <__udivmoddi4+0xa4>
 800054c:	4606      	mov	r6, r0
 800054e:	e6e3      	b.n	8000318 <__udivmoddi4+0x64>
 8000550:	4618      	mov	r0, r3
 8000552:	e6f8      	b.n	8000346 <__udivmoddi4+0x92>
 8000554:	454b      	cmp	r3, r9
 8000556:	d2a9      	bcs.n	80004ac <__udivmoddi4+0x1f8>
 8000558:	ebb9 0802 	subs.w	r8, r9, r2
 800055c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000560:	3801      	subs	r0, #1
 8000562:	e7a3      	b.n	80004ac <__udivmoddi4+0x1f8>
 8000564:	4646      	mov	r6, r8
 8000566:	e7ea      	b.n	800053e <__udivmoddi4+0x28a>
 8000568:	4620      	mov	r0, r4
 800056a:	e794      	b.n	8000496 <__udivmoddi4+0x1e2>
 800056c:	4640      	mov	r0, r8
 800056e:	e7d1      	b.n	8000514 <__udivmoddi4+0x260>
 8000570:	46d0      	mov	r8, sl
 8000572:	e77b      	b.n	800046c <__udivmoddi4+0x1b8>
 8000574:	3b02      	subs	r3, #2
 8000576:	4461      	add	r1, ip
 8000578:	e732      	b.n	80003e0 <__udivmoddi4+0x12c>
 800057a:	4630      	mov	r0, r6
 800057c:	e709      	b.n	8000392 <__udivmoddi4+0xde>
 800057e:	4464      	add	r4, ip
 8000580:	3802      	subs	r0, #2
 8000582:	e742      	b.n	800040a <__udivmoddi4+0x156>

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b088      	sub	sp, #32
 800058c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 fc69 	bl	8000e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f84b 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f000 f8b5 	bl	8000704 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  DWT_CTRL |= (1 << 0);
 800059a:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <main+0x90>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a1e      	ldr	r2, [pc, #120]	; (8000618 <main+0x90>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80005a6:	f006 fb9b 	bl	8006ce0 <SEGGER_SYSVIEW_Conf>
  //SEGGER_SYSVIEW_Start();

  status = xTaskCreate(ledRedHandler, "Led_Red_Task", 200, NULL, 2, &task1_Handle);
 80005aa:	f107 0308 	add.w	r3, r7, #8
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	2302      	movs	r3, #2
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2300      	movs	r3, #0
 80005b6:	22c8      	movs	r2, #200	; 0xc8
 80005b8:	4918      	ldr	r1, [pc, #96]	; (800061c <main+0x94>)
 80005ba:	4819      	ldr	r0, [pc, #100]	; (8000620 <main+0x98>)
 80005bc:	f002 fcec 	bl	8002f98 <xTaskCreate>
 80005c0:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80005c2:	697b      	ldr	r3, [r7, #20]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d00a      	beq.n	80005de <main+0x56>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005cc:	f383 8811 	msr	BASEPRI, r3
 80005d0:	f3bf 8f6f 	isb	sy
 80005d4:	f3bf 8f4f 	dsb	sy
 80005d8:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005da:	bf00      	nop
 80005dc:	e7fe      	b.n	80005dc <main+0x54>


  status = xTaskCreate(ledGreenHandler,"Led_Green_Task", 200, NULL, 2, &task2_Handle);
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	2302      	movs	r3, #2
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	2300      	movs	r3, #0
 80005e8:	22c8      	movs	r2, #200	; 0xc8
 80005ea:	490e      	ldr	r1, [pc, #56]	; (8000624 <main+0x9c>)
 80005ec:	480e      	ldr	r0, [pc, #56]	; (8000628 <main+0xa0>)
 80005ee:	f002 fcd3 	bl	8002f98 <xTaskCreate>
 80005f2:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d00a      	beq.n	8000610 <main+0x88>
        __asm volatile
 80005fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005fe:	f383 8811 	msr	BASEPRI, r3
 8000602:	f3bf 8f6f 	isb	sy
 8000606:	f3bf 8f4f 	dsb	sy
 800060a:	60fb      	str	r3, [r7, #12]
    }
 800060c:	bf00      	nop
 800060e:	e7fe      	b.n	800060e <main+0x86>

  vTaskStartScheduler();
 8000610:	f002 fe26 	bl	8003260 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000614:	e7fe      	b.n	8000614 <main+0x8c>
 8000616:	bf00      	nop
 8000618:	e0001000 	.word	0xe0001000
 800061c:	08006fe4 	.word	0x08006fe4
 8000620:	08000bdd 	.word	0x08000bdd
 8000624:	08006ff4 	.word	0x08006ff4
 8000628:	08000c09 	.word	0x08000c09

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	; 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2230      	movs	r2, #48	; 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f006 fcbe 	bl	8006fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	4b29      	ldr	r3, [pc, #164]	; (80006fc <SystemClock_Config+0xd0>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	4a28      	ldr	r2, [pc, #160]	; (80006fc <SystemClock_Config+0xd0>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	; 0x40
 8000660:	4b26      	ldr	r3, [pc, #152]	; (80006fc <SystemClock_Config+0xd0>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b23      	ldr	r3, [pc, #140]	; (8000700 <SystemClock_Config+0xd4>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000678:	4a21      	ldr	r2, [pc, #132]	; (8000700 <SystemClock_Config+0xd4>)
 800067a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b1f      	ldr	r3, [pc, #124]	; (8000700 <SystemClock_Config+0xd4>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800068c:	2302      	movs	r3, #2
 800068e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000690:	2301      	movs	r3, #1
 8000692:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000694:	2310      	movs	r3, #16
 8000696:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000698:	2302      	movs	r3, #2
 800069a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800069c:	2300      	movs	r3, #0
 800069e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a0:	2308      	movs	r3, #8
 80006a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006a4:	2332      	movs	r3, #50	; 0x32
 80006a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006a8:	2304      	movs	r3, #4
 80006aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ac:	2307      	movs	r3, #7
 80006ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 0320 	add.w	r3, r7, #32
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 fefd 	bl	80014b4 <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006c0:	f000 faca 	bl	8000c58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c8:	2302      	movs	r3, #2
 80006ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80006d0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80006d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 f95e 	bl	80019a4 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006ee:	f000 fab3 	bl	8000c58 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3750      	adds	r7, #80	; 0x50
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08e      	sub	sp, #56	; 0x38
 8000708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	623b      	str	r3, [r7, #32]
 800071e:	4bb2      	ldr	r3, [pc, #712]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4ab1      	ldr	r2, [pc, #708]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4baf      	ldr	r3, [pc, #700]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	623b      	str	r3, [r7, #32]
 8000734:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	61fb      	str	r3, [r7, #28]
 800073a:	4bab      	ldr	r3, [pc, #684]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4aaa      	ldr	r2, [pc, #680]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 8000740:	f043 0320 	orr.w	r3, r3, #32
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4ba8      	ldr	r3, [pc, #672]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0320 	and.w	r3, r3, #32
 800074e:	61fb      	str	r3, [r7, #28]
 8000750:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	61bb      	str	r3, [r7, #24]
 8000756:	4ba4      	ldr	r3, [pc, #656]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4aa3      	ldr	r2, [pc, #652]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 800075c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4ba1      	ldr	r3, [pc, #644]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076a:	61bb      	str	r3, [r7, #24]
 800076c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
 8000772:	4b9d      	ldr	r3, [pc, #628]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a9c      	ldr	r2, [pc, #624]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b9a      	ldr	r3, [pc, #616]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	617b      	str	r3, [r7, #20]
 8000788:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b96      	ldr	r3, [pc, #600]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a95      	ldr	r2, [pc, #596]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b93      	ldr	r3, [pc, #588]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b8f      	ldr	r3, [pc, #572]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a8e      	ldr	r2, [pc, #568]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 80007b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b8c      	ldr	r3, [pc, #560]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b88      	ldr	r3, [pc, #544]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a87      	ldr	r2, [pc, #540]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 80007cc:	f043 0310 	orr.w	r3, r3, #16
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b85      	ldr	r3, [pc, #532]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0310 	and.w	r3, r3, #16
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b81      	ldr	r3, [pc, #516]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a80      	ldr	r2, [pc, #512]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 80007e8:	f043 0308 	orr.w	r3, r3, #8
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b7e      	ldr	r3, [pc, #504]	; (80009e8 <MX_GPIO_Init+0x2e4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0308 	and.w	r3, r3, #8
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2116      	movs	r1, #22
 80007fe:	487b      	ldr	r0, [pc, #492]	; (80009ec <MX_GPIO_Init+0x2e8>)
 8000800:	f000 fe24 	bl	800144c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	2180      	movs	r1, #128	; 0x80
 8000808:	4879      	ldr	r0, [pc, #484]	; (80009f0 <MX_GPIO_Init+0x2ec>)
 800080a:	f000 fe1f 	bl	800144c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000814:	4877      	ldr	r0, [pc, #476]	; (80009f4 <MX_GPIO_Init+0x2f0>)
 8000816:	f000 fe19 	bl	800144c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000820:	4875      	ldr	r0, [pc, #468]	; (80009f8 <MX_GPIO_Init+0x2f4>)
 8000822:	f000 fe13 	bl	800144c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000826:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	2302      	movs	r3, #2
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000834:	2303      	movs	r3, #3
 8000836:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000838:	230c      	movs	r3, #12
 800083a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800083c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000840:	4619      	mov	r1, r3
 8000842:	486e      	ldr	r0, [pc, #440]	; (80009fc <MX_GPIO_Init+0x2f8>)
 8000844:	f000 fc56 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000848:	f44f 7360 	mov.w	r3, #896	; 0x380
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2302      	movs	r3, #2
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800085a:	2305      	movs	r3, #5
 800085c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800085e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000862:	4619      	mov	r1, r3
 8000864:	4865      	ldr	r0, [pc, #404]	; (80009fc <MX_GPIO_Init+0x2f8>)
 8000866:	f000 fc45 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 800086a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800087c:	230e      	movs	r3, #14
 800087e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000884:	4619      	mov	r1, r3
 8000886:	485d      	ldr	r0, [pc, #372]	; (80009fc <MX_GPIO_Init+0x2f8>)
 8000888:	f000 fc34 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800088c:	2301      	movs	r3, #1
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000898:	2303      	movs	r3, #3
 800089a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800089c:	230c      	movs	r3, #12
 800089e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a4:	4619      	mov	r1, r3
 80008a6:	4851      	ldr	r0, [pc, #324]	; (80009ec <MX_GPIO_Init+0x2e8>)
 80008a8:	f000 fc24 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80008ac:	2316      	movs	r3, #22
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b0:	2301      	movs	r3, #1
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c0:	4619      	mov	r1, r3
 80008c2:	484a      	ldr	r0, [pc, #296]	; (80009ec <MX_GPIO_Init+0x2e8>)
 80008c4:	f000 fc16 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80008c8:	f248 0307 	movw	r3, #32775	; 0x8007
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008ce:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008dc:	4619      	mov	r1, r3
 80008de:	4844      	ldr	r0, [pc, #272]	; (80009f0 <MX_GPIO_Init+0x2ec>)
 80008e0:	f000 fc08 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80008e4:	f641 0358 	movw	r3, #6232	; 0x1858
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80008f6:	230e      	movs	r3, #14
 80008f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fe:	4619      	mov	r1, r3
 8000900:	483b      	ldr	r0, [pc, #236]	; (80009f0 <MX_GPIO_Init+0x2ec>)
 8000902:	f000 fbf7 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000906:	2380      	movs	r3, #128	; 0x80
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091a:	4619      	mov	r1, r3
 800091c:	4834      	ldr	r0, [pc, #208]	; (80009f0 <MX_GPIO_Init+0x2ec>)
 800091e:	f000 fbe9 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000922:	2320      	movs	r3, #32
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000926:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000934:	4619      	mov	r1, r3
 8000936:	482d      	ldr	r0, [pc, #180]	; (80009ec <MX_GPIO_Init+0x2e8>)
 8000938:	f000 fbdc 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800093c:	2303      	movs	r3, #3
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800094c:	2309      	movs	r3, #9
 800094e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000954:	4619      	mov	r1, r3
 8000956:	482a      	ldr	r0, [pc, #168]	; (8000a00 <MX_GPIO_Init+0x2fc>)
 8000958:	f000 fbcc 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800095c:	2304      	movs	r3, #4
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000960:	2300      	movs	r3, #0
 8000962:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096c:	4619      	mov	r1, r3
 800096e:	4824      	ldr	r0, [pc, #144]	; (8000a00 <MX_GPIO_Init+0x2fc>)
 8000970:	f000 fbc0 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000974:	f248 1333 	movw	r3, #33075	; 0x8133
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000982:	2303      	movs	r3, #3
 8000984:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000986:	230c      	movs	r3, #12
 8000988:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800098a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098e:	4619      	mov	r1, r3
 8000990:	4819      	ldr	r0, [pc, #100]	; (80009f8 <MX_GPIO_Init+0x2f4>)
 8000992:	f000 fbaf 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000996:	f64f 7383 	movw	r3, #65411	; 0xff83
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099c:	2302      	movs	r3, #2
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a4:	2303      	movs	r3, #3
 80009a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009a8:	230c      	movs	r3, #12
 80009aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b0:	4619      	mov	r1, r3
 80009b2:	4814      	ldr	r0, [pc, #80]	; (8000a04 <MX_GPIO_Init+0x300>)
 80009b4:	f000 fb9e 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80009b8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009ca:	230e      	movs	r3, #14
 80009cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d2:	4619      	mov	r1, r3
 80009d4:	480a      	ldr	r0, [pc, #40]	; (8000a00 <MX_GPIO_Init+0x2fc>)
 80009d6:	f000 fb8d 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80009da:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80009e4:	e010      	b.n	8000a08 <MX_GPIO_Init+0x304>
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40020800 	.word	0x40020800
 80009f0:	40020000 	.word	0x40020000
 80009f4:	40020c00 	.word	0x40020c00
 80009f8:	40021800 	.word	0x40021800
 80009fc:	40021400 	.word	0x40021400
 8000a00:	40020400 	.word	0x40020400
 8000a04:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000a10:	230c      	movs	r3, #12
 8000a12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a18:	4619      	mov	r1, r3
 8000a1a:	486b      	ldr	r0, [pc, #428]	; (8000bc8 <MX_GPIO_Init+0x4c4>)
 8000a1c:	f000 fb6a 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000a20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a32:	4619      	mov	r1, r3
 8000a34:	4864      	ldr	r0, [pc, #400]	; (8000bc8 <MX_GPIO_Init+0x4c4>)
 8000a36:	f000 fb5d 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000a3a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a4c:	230c      	movs	r3, #12
 8000a4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a54:	4619      	mov	r1, r3
 8000a56:	485d      	ldr	r0, [pc, #372]	; (8000bcc <MX_GPIO_Init+0x4c8>)
 8000a58:	f000 fb4c 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000a5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4856      	ldr	r0, [pc, #344]	; (8000bcc <MX_GPIO_Init+0x4c8>)
 8000a72:	f000 fb3f 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000a76:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	484f      	ldr	r0, [pc, #316]	; (8000bcc <MX_GPIO_Init+0x4c8>)
 8000a90:	f000 fb30 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000a94:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000aa6:	230e      	movs	r3, #14
 8000aa8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4847      	ldr	r0, [pc, #284]	; (8000bd0 <MX_GPIO_Init+0x4cc>)
 8000ab2:	f000 fb1f 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000ab6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ac8:	230e      	movs	r3, #14
 8000aca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4840      	ldr	r0, [pc, #256]	; (8000bd4 <MX_GPIO_Init+0x4d0>)
 8000ad4:	f000 fb0e 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000ad8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ade:	2312      	movs	r3, #18
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000aea:	2304      	movs	r3, #4
 8000aec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af2:	4619      	mov	r1, r3
 8000af4:	4837      	ldr	r0, [pc, #220]	; (8000bd4 <MX_GPIO_Init+0x4d0>)
 8000af6:	f000 fafd 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000afa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b00:	2312      	movs	r3, #18
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b14:	4619      	mov	r1, r3
 8000b16:	4830      	ldr	r0, [pc, #192]	; (8000bd8 <MX_GPIO_Init+0x4d4>)
 8000b18:	f000 faec 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000b1c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b2e:	2307      	movs	r3, #7
 8000b30:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b36:	4619      	mov	r1, r3
 8000b38:	4827      	ldr	r0, [pc, #156]	; (8000bd8 <MX_GPIO_Init+0x4d4>)
 8000b3a:	f000 fadb 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000b3e:	2348      	movs	r3, #72	; 0x48
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	2302      	movs	r3, #2
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b4e:	230e      	movs	r3, #14
 8000b50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b56:	4619      	mov	r1, r3
 8000b58:	481c      	ldr	r0, [pc, #112]	; (8000bcc <MX_GPIO_Init+0x4c8>)
 8000b5a:	f000 facb 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000b5e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000b70:	2309      	movs	r3, #9
 8000b72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4815      	ldr	r0, [pc, #84]	; (8000bd0 <MX_GPIO_Init+0x4cc>)
 8000b7c:	f000 faba 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000b80:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b86:	2301      	movs	r3, #1
 8000b88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b96:	4619      	mov	r1, r3
 8000b98:	480d      	ldr	r0, [pc, #52]	; (8000bd0 <MX_GPIO_Init+0x4cc>)
 8000b9a:	f000 faab 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000b9e:	2360      	movs	r3, #96	; 0x60
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bae:	230c      	movs	r3, #12
 8000bb0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4803      	ldr	r0, [pc, #12]	; (8000bc8 <MX_GPIO_Init+0x4c4>)
 8000bba:	f000 fa9b 	bl	80010f4 <HAL_GPIO_Init>

}
 8000bbe:	bf00      	nop
 8000bc0:	3738      	adds	r7, #56	; 0x38
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40020400 	.word	0x40020400
 8000bcc:	40020c00 	.word	0x40020c00
 8000bd0:	40021800 	.word	0x40021800
 8000bd4:	40020800 	.word	0x40020800
 8000bd8:	40020000 	.word	0x40020000

08000bdc <ledRedHandler>:

/* USER CODE BEGIN 4 */
static void ledRedHandler(void* parameters){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]


	while(1)
		{

		SEGGER_SYSVIEW_PrintfTarget("Toggling Red Led");
 8000be4:	4806      	ldr	r0, [pc, #24]	; (8000c00 <ledRedHandler+0x24>)
 8000be6:	f005 fffd 	bl	8006be4 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOG, ledRed);
 8000bea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bee:	4805      	ldr	r0, [pc, #20]	; (8000c04 <ledRedHandler+0x28>)
 8000bf0:	f000 fc45 	bl	800147e <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000bf4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bf8:	f000 f976 	bl	8000ee8 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling Red Led");
 8000bfc:	e7f2      	b.n	8000be4 <ledRedHandler+0x8>
 8000bfe:	bf00      	nop
 8000c00:	08007004 	.word	0x08007004
 8000c04:	40021800 	.word	0x40021800

08000c08 <ledGreenHandler>:
		}

}


static void ledGreenHandler(void* parameters){
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]



	while(1)
		{
		SEGGER_SYSVIEW_PrintfTarget("Toggling for Green Led");
 8000c10:	4806      	ldr	r0, [pc, #24]	; (8000c2c <ledGreenHandler+0x24>)
 8000c12:	f005 ffe7 	bl	8006be4 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOG, ledGreen);
 8000c16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c1a:	4805      	ldr	r0, [pc, #20]	; (8000c30 <ledGreenHandler+0x28>)
 8000c1c:	f000 fc2f 	bl	800147e <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 8000c20:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000c24:	f000 f960 	bl	8000ee8 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling for Green Led");
 8000c28:	e7f2      	b.n	8000c10 <ledGreenHandler+0x8>
 8000c2a:	bf00      	nop
 8000c2c:	08007018 	.word	0x08007018
 8000c30:	40021800 	.word	0x40021800

08000c34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d101      	bne.n	8000c4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c46:	f000 f92f 	bl	8000ea8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40001000 	.word	0x40001000

08000c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c5c:	b672      	cpsid	i
}
 8000c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <Error_Handler+0x8>
	...

08000c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	4a0f      	ldr	r2, [pc, #60]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c78:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	4a08      	ldr	r2, [pc, #32]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c94:	6413      	str	r3, [r2, #64]	; 0x40
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000ca2:	f003 fc81 	bl	80045a8 <vInitPrioGroupValue>


  /* USER CODE END MspInit 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40023800 	.word	0x40023800

08000cb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08e      	sub	sp, #56	; 0x38
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	4b33      	ldr	r3, [pc, #204]	; (8000d98 <HAL_InitTick+0xe4>)
 8000cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ccc:	4a32      	ldr	r2, [pc, #200]	; (8000d98 <HAL_InitTick+0xe4>)
 8000cce:	f043 0310 	orr.w	r3, r3, #16
 8000cd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd4:	4b30      	ldr	r3, [pc, #192]	; (8000d98 <HAL_InitTick+0xe4>)
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd8:	f003 0310 	and.w	r3, r3, #16
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ce0:	f107 0210 	add.w	r2, r7, #16
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4611      	mov	r1, r2
 8000cea:	4618      	mov	r0, r3
 8000cec:	f001 f866 	bl	8001dbc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cf0:	6a3b      	ldr	r3, [r7, #32]
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d103      	bne.n	8000d02 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cfa:	f001 f84b 	bl	8001d94 <HAL_RCC_GetPCLK1Freq>
 8000cfe:	6378      	str	r0, [r7, #52]	; 0x34
 8000d00:	e004      	b.n	8000d0c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d02:	f001 f847 	bl	8001d94 <HAL_RCC_GetPCLK1Freq>
 8000d06:	4603      	mov	r3, r0
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d0e:	4a23      	ldr	r2, [pc, #140]	; (8000d9c <HAL_InitTick+0xe8>)
 8000d10:	fba2 2303 	umull	r2, r3, r2, r3
 8000d14:	0c9b      	lsrs	r3, r3, #18
 8000d16:	3b01      	subs	r3, #1
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d1a:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <HAL_InitTick+0xec>)
 8000d1c:	4a21      	ldr	r2, [pc, #132]	; (8000da4 <HAL_InitTick+0xf0>)
 8000d1e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d20:	4b1f      	ldr	r3, [pc, #124]	; (8000da0 <HAL_InitTick+0xec>)
 8000d22:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d26:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d28:	4a1d      	ldr	r2, [pc, #116]	; (8000da0 <HAL_InitTick+0xec>)
 8000d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d2c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d2e:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <HAL_InitTick+0xec>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d34:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <HAL_InitTick+0xec>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3a:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <HAL_InitTick+0xec>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d40:	4817      	ldr	r0, [pc, #92]	; (8000da0 <HAL_InitTick+0xec>)
 8000d42:	f001 f86d 	bl	8001e20 <HAL_TIM_Base_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d11b      	bne.n	8000d8c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d54:	4812      	ldr	r0, [pc, #72]	; (8000da0 <HAL_InitTick+0xec>)
 8000d56:	f001 f8bd 	bl	8001ed4 <HAL_TIM_Base_Start_IT>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d111      	bne.n	8000d8c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d68:	2036      	movs	r0, #54	; 0x36
 8000d6a:	f000 f9b5 	bl	80010d8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b0f      	cmp	r3, #15
 8000d72:	d808      	bhi.n	8000d86 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d74:	2200      	movs	r2, #0
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	2036      	movs	r0, #54	; 0x36
 8000d7a:	f000 f991 	bl	80010a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <HAL_InitTick+0xf4>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6013      	str	r3, [r2, #0]
 8000d84:	e002      	b.n	8000d8c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3738      	adds	r7, #56	; 0x38
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	431bde83 	.word	0x431bde83
 8000da0:	20000030 	.word	0x20000030
 8000da4:	40001000 	.word	0x40001000
 8000da8:	20000004 	.word	0x20000004

08000dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <NMI_Handler+0x4>

08000db2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <HardFault_Handler+0x4>

08000db8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <MemManage_Handler+0x4>

08000dbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc2:	e7fe      	b.n	8000dc2 <BusFault_Handler+0x4>

08000dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <UsageFault_Handler+0x4>

08000dca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ddc:	4802      	ldr	r0, [pc, #8]	; (8000de8 <TIM6_DAC_IRQHandler+0x10>)
 8000dde:	f001 f8e9 	bl	8001fb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000030 	.word	0x20000030

08000dec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <SystemInit+0x20>)
 8000df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000df6:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <SystemInit+0x20>)
 8000df8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e48 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e14:	480d      	ldr	r0, [pc, #52]	; (8000e4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e16:	490e      	ldr	r1, [pc, #56]	; (8000e50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e18:	4a0e      	ldr	r2, [pc, #56]	; (8000e54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e1c:	e002      	b.n	8000e24 <LoopCopyDataInit>

08000e1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e22:	3304      	adds	r3, #4

08000e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e28:	d3f9      	bcc.n	8000e1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2a:	4a0b      	ldr	r2, [pc, #44]	; (8000e58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e2c:	4c0b      	ldr	r4, [pc, #44]	; (8000e5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e30:	e001      	b.n	8000e36 <LoopFillZerobss>

08000e32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e34:	3204      	adds	r2, #4

08000e36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e38:	d3fb      	bcc.n	8000e32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e3a:	f7ff ffd7 	bl	8000dec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e3e:	f006 f87b 	bl	8006f38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e42:	f7ff fba1 	bl	8000588 <main>
  bx  lr    
 8000e46:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e48:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e50:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000e54:	08007168 	.word	0x08007168
  ldr r2, =_sbss
 8000e58:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000e5c:	2001449c 	.word	0x2001449c

08000e60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e60:	e7fe      	b.n	8000e60 <ADC_IRQHandler>
	...

08000e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e68:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <HAL_Init+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ea4 <HAL_Init+0x40>)
 8000e6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e74:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0a      	ldr	r2, [pc, #40]	; (8000ea4 <HAL_Init+0x40>)
 8000e7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <HAL_Init+0x40>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a07      	ldr	r2, [pc, #28]	; (8000ea4 <HAL_Init+0x40>)
 8000e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e8c:	2003      	movs	r0, #3
 8000e8e:	f000 f8fc 	bl	800108a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e92:	2000      	movs	r0, #0
 8000e94:	f7ff ff0e 	bl	8000cb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e98:	f7ff fee4 	bl	8000c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40023c00 	.word	0x40023c00

08000ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_IncTick+0x20>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x24>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <HAL_IncTick+0x24>)
 8000eba:	6013      	str	r3, [r2, #0]
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	20000008 	.word	0x20000008
 8000ecc:	20000078 	.word	0x20000078

08000ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed4:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <HAL_GetTick+0x14>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	20000078 	.word	0x20000078

08000ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef0:	f7ff ffee 	bl	8000ed0 <HAL_GetTick>
 8000ef4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f00:	d005      	beq.n	8000f0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_Delay+0x44>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	461a      	mov	r2, r3
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f0e:	bf00      	nop
 8000f10:	f7ff ffde 	bl	8000ed0 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d8f7      	bhi.n	8000f10 <HAL_Delay+0x28>
  {
  }
}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000008 	.word	0x20000008

08000f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f62:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	60d3      	str	r3, [r2, #12]
}
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <__NVIC_GetPriorityGrouping+0x18>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	0a1b      	lsrs	r3, r3, #8
 8000f82:	f003 0307 	and.w	r3, r3, #7
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	db0b      	blt.n	8000fbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	f003 021f 	and.w	r2, r3, #31
 8000fac:	4907      	ldr	r1, [pc, #28]	; (8000fcc <__NVIC_EnableIRQ+0x38>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	095b      	lsrs	r3, r3, #5
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000e100 	.word	0xe000e100

08000fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	db0a      	blt.n	8000ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	490c      	ldr	r1, [pc, #48]	; (800101c <__NVIC_SetPriority+0x4c>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	0112      	lsls	r2, r2, #4
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff8:	e00a      	b.n	8001010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4908      	ldr	r1, [pc, #32]	; (8001020 <__NVIC_SetPriority+0x50>)
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	f003 030f 	and.w	r3, r3, #15
 8001006:	3b04      	subs	r3, #4
 8001008:	0112      	lsls	r2, r2, #4
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	440b      	add	r3, r1
 800100e:	761a      	strb	r2, [r3, #24]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000e100 	.word	0xe000e100
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	; 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f1c3 0307 	rsb	r3, r3, #7
 800103e:	2b04      	cmp	r3, #4
 8001040:	bf28      	it	cs
 8001042:	2304      	movcs	r3, #4
 8001044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3304      	adds	r3, #4
 800104a:	2b06      	cmp	r3, #6
 800104c:	d902      	bls.n	8001054 <NVIC_EncodePriority+0x30>
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3b03      	subs	r3, #3
 8001052:	e000      	b.n	8001056 <NVIC_EncodePriority+0x32>
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	f04f 32ff 	mov.w	r2, #4294967295
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43da      	mvns	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	401a      	ands	r2, r3
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800106c:	f04f 31ff 	mov.w	r1, #4294967295
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa01 f303 	lsl.w	r3, r1, r3
 8001076:	43d9      	mvns	r1, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	4313      	orrs	r3, r2
         );
}
 800107e:	4618      	mov	r0, r3
 8001080:	3724      	adds	r7, #36	; 0x24
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ff4c 	bl	8000f30 <__NVIC_SetPriorityGrouping>
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
 80010ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b2:	f7ff ff61 	bl	8000f78 <__NVIC_GetPriorityGrouping>
 80010b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	68b9      	ldr	r1, [r7, #8]
 80010bc:	6978      	ldr	r0, [r7, #20]
 80010be:	f7ff ffb1 	bl	8001024 <NVIC_EncodePriority>
 80010c2:	4602      	mov	r2, r0
 80010c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c8:	4611      	mov	r1, r2
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff ff80 	bl	8000fd0 <__NVIC_SetPriority>
}
 80010d0:	bf00      	nop
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ff54 	bl	8000f94 <__NVIC_EnableIRQ>
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b089      	sub	sp, #36	; 0x24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
 800110e:	e177      	b.n	8001400 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001110:	2201      	movs	r2, #1
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	429a      	cmp	r2, r3
 800112a:	f040 8166 	bne.w	80013fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	2b01      	cmp	r3, #1
 8001138:	d005      	beq.n	8001146 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001142:	2b02      	cmp	r3, #2
 8001144:	d130      	bne.n	80011a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	2203      	movs	r2, #3
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	68da      	ldr	r2, [r3, #12]
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800117c:	2201      	movs	r2, #1
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	091b      	lsrs	r3, r3, #4
 8001192:	f003 0201 	and.w	r2, r3, #1
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	2b03      	cmp	r3, #3
 80011b2:	d017      	beq.n	80011e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	2203      	movs	r2, #3
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d123      	bne.n	8001238 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	08da      	lsrs	r2, r3, #3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3208      	adds	r2, #8
 80011f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	f003 0307 	and.w	r3, r3, #7
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	220f      	movs	r2, #15
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	691a      	ldr	r2, [r3, #16]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	08da      	lsrs	r2, r3, #3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3208      	adds	r2, #8
 8001232:	69b9      	ldr	r1, [r7, #24]
 8001234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	2203      	movs	r2, #3
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0203 	and.w	r2, r3, #3
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 80c0 	beq.w	80013fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	4b66      	ldr	r3, [pc, #408]	; (8001418 <HAL_GPIO_Init+0x324>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	4a65      	ldr	r2, [pc, #404]	; (8001418 <HAL_GPIO_Init+0x324>)
 8001284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001288:	6453      	str	r3, [r2, #68]	; 0x44
 800128a:	4b63      	ldr	r3, [pc, #396]	; (8001418 <HAL_GPIO_Init+0x324>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001296:	4a61      	ldr	r2, [pc, #388]	; (800141c <HAL_GPIO_Init+0x328>)
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	3302      	adds	r3, #2
 800129e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f003 0303 	and.w	r3, r3, #3
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	220f      	movs	r2, #15
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a58      	ldr	r2, [pc, #352]	; (8001420 <HAL_GPIO_Init+0x32c>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d037      	beq.n	8001332 <HAL_GPIO_Init+0x23e>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a57      	ldr	r2, [pc, #348]	; (8001424 <HAL_GPIO_Init+0x330>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d031      	beq.n	800132e <HAL_GPIO_Init+0x23a>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a56      	ldr	r2, [pc, #344]	; (8001428 <HAL_GPIO_Init+0x334>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d02b      	beq.n	800132a <HAL_GPIO_Init+0x236>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a55      	ldr	r2, [pc, #340]	; (800142c <HAL_GPIO_Init+0x338>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d025      	beq.n	8001326 <HAL_GPIO_Init+0x232>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a54      	ldr	r2, [pc, #336]	; (8001430 <HAL_GPIO_Init+0x33c>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d01f      	beq.n	8001322 <HAL_GPIO_Init+0x22e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a53      	ldr	r2, [pc, #332]	; (8001434 <HAL_GPIO_Init+0x340>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d019      	beq.n	800131e <HAL_GPIO_Init+0x22a>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a52      	ldr	r2, [pc, #328]	; (8001438 <HAL_GPIO_Init+0x344>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d013      	beq.n	800131a <HAL_GPIO_Init+0x226>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a51      	ldr	r2, [pc, #324]	; (800143c <HAL_GPIO_Init+0x348>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d00d      	beq.n	8001316 <HAL_GPIO_Init+0x222>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a50      	ldr	r2, [pc, #320]	; (8001440 <HAL_GPIO_Init+0x34c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d007      	beq.n	8001312 <HAL_GPIO_Init+0x21e>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a4f      	ldr	r2, [pc, #316]	; (8001444 <HAL_GPIO_Init+0x350>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d101      	bne.n	800130e <HAL_GPIO_Init+0x21a>
 800130a:	2309      	movs	r3, #9
 800130c:	e012      	b.n	8001334 <HAL_GPIO_Init+0x240>
 800130e:	230a      	movs	r3, #10
 8001310:	e010      	b.n	8001334 <HAL_GPIO_Init+0x240>
 8001312:	2308      	movs	r3, #8
 8001314:	e00e      	b.n	8001334 <HAL_GPIO_Init+0x240>
 8001316:	2307      	movs	r3, #7
 8001318:	e00c      	b.n	8001334 <HAL_GPIO_Init+0x240>
 800131a:	2306      	movs	r3, #6
 800131c:	e00a      	b.n	8001334 <HAL_GPIO_Init+0x240>
 800131e:	2305      	movs	r3, #5
 8001320:	e008      	b.n	8001334 <HAL_GPIO_Init+0x240>
 8001322:	2304      	movs	r3, #4
 8001324:	e006      	b.n	8001334 <HAL_GPIO_Init+0x240>
 8001326:	2303      	movs	r3, #3
 8001328:	e004      	b.n	8001334 <HAL_GPIO_Init+0x240>
 800132a:	2302      	movs	r3, #2
 800132c:	e002      	b.n	8001334 <HAL_GPIO_Init+0x240>
 800132e:	2301      	movs	r3, #1
 8001330:	e000      	b.n	8001334 <HAL_GPIO_Init+0x240>
 8001332:	2300      	movs	r3, #0
 8001334:	69fa      	ldr	r2, [r7, #28]
 8001336:	f002 0203 	and.w	r2, r2, #3
 800133a:	0092      	lsls	r2, r2, #2
 800133c:	4093      	lsls	r3, r2
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001344:	4935      	ldr	r1, [pc, #212]	; (800141c <HAL_GPIO_Init+0x328>)
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	089b      	lsrs	r3, r3, #2
 800134a:	3302      	adds	r3, #2
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001352:	4b3d      	ldr	r3, [pc, #244]	; (8001448 <HAL_GPIO_Init+0x354>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	43db      	mvns	r3, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001376:	4a34      	ldr	r2, [pc, #208]	; (8001448 <HAL_GPIO_Init+0x354>)
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800137c:	4b32      	ldr	r3, [pc, #200]	; (8001448 <HAL_GPIO_Init+0x354>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013a0:	4a29      	ldr	r2, [pc, #164]	; (8001448 <HAL_GPIO_Init+0x354>)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013a6:	4b28      	ldr	r3, [pc, #160]	; (8001448 <HAL_GPIO_Init+0x354>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4013      	ands	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ca:	4a1f      	ldr	r2, [pc, #124]	; (8001448 <HAL_GPIO_Init+0x354>)
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013d0:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <HAL_GPIO_Init+0x354>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013f4:	4a14      	ldr	r2, [pc, #80]	; (8001448 <HAL_GPIO_Init+0x354>)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3301      	adds	r3, #1
 80013fe:	61fb      	str	r3, [r7, #28]
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	2b0f      	cmp	r3, #15
 8001404:	f67f ae84 	bls.w	8001110 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	3724      	adds	r7, #36	; 0x24
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800
 800141c:	40013800 	.word	0x40013800
 8001420:	40020000 	.word	0x40020000
 8001424:	40020400 	.word	0x40020400
 8001428:	40020800 	.word	0x40020800
 800142c:	40020c00 	.word	0x40020c00
 8001430:	40021000 	.word	0x40021000
 8001434:	40021400 	.word	0x40021400
 8001438:	40021800 	.word	0x40021800
 800143c:	40021c00 	.word	0x40021c00
 8001440:	40022000 	.word	0x40022000
 8001444:	40022400 	.word	0x40022400
 8001448:	40013c00 	.word	0x40013c00

0800144c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	807b      	strh	r3, [r7, #2]
 8001458:	4613      	mov	r3, r2
 800145a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800145c:	787b      	ldrb	r3, [r7, #1]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001462:	887a      	ldrh	r2, [r7, #2]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001468:	e003      	b.n	8001472 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800146a:	887b      	ldrh	r3, [r7, #2]
 800146c:	041a      	lsls	r2, r3, #16
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	619a      	str	r2, [r3, #24]
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800147e:	b480      	push	{r7}
 8001480:	b085      	sub	sp, #20
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	460b      	mov	r3, r1
 8001488:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001490:	887a      	ldrh	r2, [r7, #2]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	4013      	ands	r3, r2
 8001496:	041a      	lsls	r2, r3, #16
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	43d9      	mvns	r1, r3
 800149c:	887b      	ldrh	r3, [r7, #2]
 800149e:	400b      	ands	r3, r1
 80014a0:	431a      	orrs	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	619a      	str	r2, [r3, #24]
}
 80014a6:	bf00      	nop
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e267      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d075      	beq.n	80015be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014d2:	4b88      	ldr	r3, [pc, #544]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 030c 	and.w	r3, r3, #12
 80014da:	2b04      	cmp	r3, #4
 80014dc:	d00c      	beq.n	80014f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014de:	4b85      	ldr	r3, [pc, #532]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014e6:	2b08      	cmp	r3, #8
 80014e8:	d112      	bne.n	8001510 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ea:	4b82      	ldr	r3, [pc, #520]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014f6:	d10b      	bne.n	8001510 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f8:	4b7e      	ldr	r3, [pc, #504]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d05b      	beq.n	80015bc <HAL_RCC_OscConfig+0x108>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d157      	bne.n	80015bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e242      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001518:	d106      	bne.n	8001528 <HAL_RCC_OscConfig+0x74>
 800151a:	4b76      	ldr	r3, [pc, #472]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a75      	ldr	r2, [pc, #468]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	e01d      	b.n	8001564 <HAL_RCC_OscConfig+0xb0>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001530:	d10c      	bne.n	800154c <HAL_RCC_OscConfig+0x98>
 8001532:	4b70      	ldr	r3, [pc, #448]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a6f      	ldr	r2, [pc, #444]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	4b6d      	ldr	r3, [pc, #436]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a6c      	ldr	r2, [pc, #432]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	e00b      	b.n	8001564 <HAL_RCC_OscConfig+0xb0>
 800154c:	4b69      	ldr	r3, [pc, #420]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a68      	ldr	r2, [pc, #416]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	4b66      	ldr	r3, [pc, #408]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a65      	ldr	r2, [pc, #404]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 800155e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d013      	beq.n	8001594 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156c:	f7ff fcb0 	bl	8000ed0 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001574:	f7ff fcac 	bl	8000ed0 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b64      	cmp	r3, #100	; 0x64
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e207      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001586:	4b5b      	ldr	r3, [pc, #364]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0xc0>
 8001592:	e014      	b.n	80015be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001594:	f7ff fc9c 	bl	8000ed0 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800159c:	f7ff fc98 	bl	8000ed0 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b64      	cmp	r3, #100	; 0x64
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e1f3      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ae:	4b51      	ldr	r3, [pc, #324]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f0      	bne.n	800159c <HAL_RCC_OscConfig+0xe8>
 80015ba:	e000      	b.n	80015be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d063      	beq.n	8001692 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015ca:	4b4a      	ldr	r3, [pc, #296]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 030c 	and.w	r3, r3, #12
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00b      	beq.n	80015ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015d6:	4b47      	ldr	r3, [pc, #284]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d11c      	bne.n	800161c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015e2:	4b44      	ldr	r3, [pc, #272]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d116      	bne.n	800161c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ee:	4b41      	ldr	r3, [pc, #260]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d005      	beq.n	8001606 <HAL_RCC_OscConfig+0x152>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d001      	beq.n	8001606 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e1c7      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001606:	4b3b      	ldr	r3, [pc, #236]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	4937      	ldr	r1, [pc, #220]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001616:	4313      	orrs	r3, r2
 8001618:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800161a:	e03a      	b.n	8001692 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d020      	beq.n	8001666 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001624:	4b34      	ldr	r3, [pc, #208]	; (80016f8 <HAL_RCC_OscConfig+0x244>)
 8001626:	2201      	movs	r2, #1
 8001628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162a:	f7ff fc51 	bl	8000ed0 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001632:	f7ff fc4d 	bl	8000ed0 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e1a8      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001644:	4b2b      	ldr	r3, [pc, #172]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0f0      	beq.n	8001632 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001650:	4b28      	ldr	r3, [pc, #160]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	4925      	ldr	r1, [pc, #148]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001660:	4313      	orrs	r3, r2
 8001662:	600b      	str	r3, [r1, #0]
 8001664:	e015      	b.n	8001692 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001666:	4b24      	ldr	r3, [pc, #144]	; (80016f8 <HAL_RCC_OscConfig+0x244>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166c:	f7ff fc30 	bl	8000ed0 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001674:	f7ff fc2c 	bl	8000ed0 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e187      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001686:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f0      	bne.n	8001674 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b00      	cmp	r3, #0
 800169c:	d036      	beq.n	800170c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d016      	beq.n	80016d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <HAL_RCC_OscConfig+0x248>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ac:	f7ff fc10 	bl	8000ed0 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016b4:	f7ff fc0c 	bl	8000ed0 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e167      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80016c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f0      	beq.n	80016b4 <HAL_RCC_OscConfig+0x200>
 80016d2:	e01b      	b.n	800170c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016d4:	4b09      	ldr	r3, [pc, #36]	; (80016fc <HAL_RCC_OscConfig+0x248>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016da:	f7ff fbf9 	bl	8000ed0 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e0:	e00e      	b.n	8001700 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016e2:	f7ff fbf5 	bl	8000ed0 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d907      	bls.n	8001700 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e150      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
 80016f4:	40023800 	.word	0x40023800
 80016f8:	42470000 	.word	0x42470000
 80016fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001700:	4b88      	ldr	r3, [pc, #544]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1ea      	bne.n	80016e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	2b00      	cmp	r3, #0
 8001716:	f000 8097 	beq.w	8001848 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800171a:	2300      	movs	r3, #0
 800171c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800171e:	4b81      	ldr	r3, [pc, #516]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d10f      	bne.n	800174a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	4b7d      	ldr	r3, [pc, #500]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	4a7c      	ldr	r2, [pc, #496]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001738:	6413      	str	r3, [r2, #64]	; 0x40
 800173a:	4b7a      	ldr	r3, [pc, #488]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001746:	2301      	movs	r3, #1
 8001748:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174a:	4b77      	ldr	r3, [pc, #476]	; (8001928 <HAL_RCC_OscConfig+0x474>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001752:	2b00      	cmp	r3, #0
 8001754:	d118      	bne.n	8001788 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001756:	4b74      	ldr	r3, [pc, #464]	; (8001928 <HAL_RCC_OscConfig+0x474>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a73      	ldr	r2, [pc, #460]	; (8001928 <HAL_RCC_OscConfig+0x474>)
 800175c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001760:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001762:	f7ff fbb5 	bl	8000ed0 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800176a:	f7ff fbb1 	bl	8000ed0 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e10c      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800177c:	4b6a      	ldr	r3, [pc, #424]	; (8001928 <HAL_RCC_OscConfig+0x474>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0f0      	beq.n	800176a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d106      	bne.n	800179e <HAL_RCC_OscConfig+0x2ea>
 8001790:	4b64      	ldr	r3, [pc, #400]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001794:	4a63      	ldr	r2, [pc, #396]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	6713      	str	r3, [r2, #112]	; 0x70
 800179c:	e01c      	b.n	80017d8 <HAL_RCC_OscConfig+0x324>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2b05      	cmp	r3, #5
 80017a4:	d10c      	bne.n	80017c0 <HAL_RCC_OscConfig+0x30c>
 80017a6:	4b5f      	ldr	r3, [pc, #380]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017aa:	4a5e      	ldr	r2, [pc, #376]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017ac:	f043 0304 	orr.w	r3, r3, #4
 80017b0:	6713      	str	r3, [r2, #112]	; 0x70
 80017b2:	4b5c      	ldr	r3, [pc, #368]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b6:	4a5b      	ldr	r2, [pc, #364]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6713      	str	r3, [r2, #112]	; 0x70
 80017be:	e00b      	b.n	80017d8 <HAL_RCC_OscConfig+0x324>
 80017c0:	4b58      	ldr	r3, [pc, #352]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c4:	4a57      	ldr	r2, [pc, #348]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017c6:	f023 0301 	bic.w	r3, r3, #1
 80017ca:	6713      	str	r3, [r2, #112]	; 0x70
 80017cc:	4b55      	ldr	r3, [pc, #340]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d0:	4a54      	ldr	r2, [pc, #336]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017d2:	f023 0304 	bic.w	r3, r3, #4
 80017d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d015      	beq.n	800180c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e0:	f7ff fb76 	bl	8000ed0 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e6:	e00a      	b.n	80017fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017e8:	f7ff fb72 	bl	8000ed0 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e0cb      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fe:	4b49      	ldr	r3, [pc, #292]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0ee      	beq.n	80017e8 <HAL_RCC_OscConfig+0x334>
 800180a:	e014      	b.n	8001836 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180c:	f7ff fb60 	bl	8000ed0 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001812:	e00a      	b.n	800182a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001814:	f7ff fb5c 	bl	8000ed0 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001822:	4293      	cmp	r3, r2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e0b5      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800182a:	4b3e      	ldr	r3, [pc, #248]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 800182c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1ee      	bne.n	8001814 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001836:	7dfb      	ldrb	r3, [r7, #23]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d105      	bne.n	8001848 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800183c:	4b39      	ldr	r3, [pc, #228]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	4a38      	ldr	r2, [pc, #224]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001842:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001846:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 80a1 	beq.w	8001994 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001852:	4b34      	ldr	r3, [pc, #208]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 030c 	and.w	r3, r3, #12
 800185a:	2b08      	cmp	r3, #8
 800185c:	d05c      	beq.n	8001918 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	2b02      	cmp	r3, #2
 8001864:	d141      	bne.n	80018ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001866:	4b31      	ldr	r3, [pc, #196]	; (800192c <HAL_RCC_OscConfig+0x478>)
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186c:	f7ff fb30 	bl	8000ed0 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001874:	f7ff fb2c 	bl	8000ed0 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e087      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001886:	4b27      	ldr	r3, [pc, #156]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69da      	ldr	r2, [r3, #28]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a1b      	ldr	r3, [r3, #32]
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	019b      	lsls	r3, r3, #6
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a8:	085b      	lsrs	r3, r3, #1
 80018aa:	3b01      	subs	r3, #1
 80018ac:	041b      	lsls	r3, r3, #16
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b4:	061b      	lsls	r3, r3, #24
 80018b6:	491b      	ldr	r1, [pc, #108]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018bc:	4b1b      	ldr	r3, [pc, #108]	; (800192c <HAL_RCC_OscConfig+0x478>)
 80018be:	2201      	movs	r2, #1
 80018c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c2:	f7ff fb05 	bl	8000ed0 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ca:	f7ff fb01 	bl	8000ed0 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e05c      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0f0      	beq.n	80018ca <HAL_RCC_OscConfig+0x416>
 80018e8:	e054      	b.n	8001994 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <HAL_RCC_OscConfig+0x478>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f0:	f7ff faee 	bl	8000ed0 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f8:	f7ff faea 	bl	8000ed0 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e045      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0x444>
 8001916:	e03d      	b.n	8001994 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d107      	bne.n	8001930 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e038      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
 8001924:	40023800 	.word	0x40023800
 8001928:	40007000 	.word	0x40007000
 800192c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001930:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <HAL_RCC_OscConfig+0x4ec>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d028      	beq.n	8001990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001948:	429a      	cmp	r2, r3
 800194a:	d121      	bne.n	8001990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001956:	429a      	cmp	r2, r3
 8001958:	d11a      	bne.n	8001990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001960:	4013      	ands	r3, r2
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001966:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001968:	4293      	cmp	r3, r2
 800196a:	d111      	bne.n	8001990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001976:	085b      	lsrs	r3, r3, #1
 8001978:	3b01      	subs	r3, #1
 800197a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800197c:	429a      	cmp	r2, r3
 800197e:	d107      	bne.n	8001990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800198c:	429a      	cmp	r2, r3
 800198e:	d001      	beq.n	8001994 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800

080019a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e0cc      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019b8:	4b68      	ldr	r3, [pc, #416]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 030f 	and.w	r3, r3, #15
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d90c      	bls.n	80019e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c6:	4b65      	ldr	r3, [pc, #404]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ce:	4b63      	ldr	r3, [pc, #396]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d001      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e0b8      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d020      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d005      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019f8:	4b59      	ldr	r3, [pc, #356]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	4a58      	ldr	r2, [pc, #352]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a10:	4b53      	ldr	r3, [pc, #332]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a52      	ldr	r2, [pc, #328]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a1c:	4b50      	ldr	r3, [pc, #320]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	494d      	ldr	r1, [pc, #308]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d044      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d107      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a42:	4b47      	ldr	r3, [pc, #284]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d119      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e07f      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d003      	beq.n	8001a62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	d107      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a62:	4b3f      	ldr	r3, [pc, #252]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d109      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e06f      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a72:	4b3b      	ldr	r3, [pc, #236]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e067      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a82:	4b37      	ldr	r3, [pc, #220]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f023 0203 	bic.w	r2, r3, #3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	4934      	ldr	r1, [pc, #208]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a94:	f7ff fa1c 	bl	8000ed0 <HAL_GetTick>
 8001a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9a:	e00a      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a9c:	f7ff fa18 	bl	8000ed0 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e04f      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab2:	4b2b      	ldr	r3, [pc, #172]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 020c 	and.w	r2, r3, #12
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d1eb      	bne.n	8001a9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac4:	4b25      	ldr	r3, [pc, #148]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 030f 	and.w	r3, r3, #15
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d20c      	bcs.n	8001aec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad2:	4b22      	ldr	r3, [pc, #136]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ada:	4b20      	ldr	r3, [pc, #128]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d001      	beq.n	8001aec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e032      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d008      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af8:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	4916      	ldr	r1, [pc, #88]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d009      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b16:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	490e      	ldr	r1, [pc, #56]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b2a:	f000 f821 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	091b      	lsrs	r3, r3, #4
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	490a      	ldr	r1, [pc, #40]	; (8001b64 <HAL_RCC_ClockConfig+0x1c0>)
 8001b3c:	5ccb      	ldrb	r3, [r1, r3]
 8001b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b42:	4a09      	ldr	r2, [pc, #36]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff f8b2 	bl	8000cb4 <HAL_InitTick>

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40023c00 	.word	0x40023c00
 8001b60:	40023800 	.word	0x40023800
 8001b64:	08007108 	.word	0x08007108
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	20000004 	.word	0x20000004

08001b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b74:	b094      	sub	sp, #80	; 0x50
 8001b76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	647b      	str	r3, [r7, #68]	; 0x44
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b80:	2300      	movs	r3, #0
 8001b82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b88:	4b79      	ldr	r3, [pc, #484]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 030c 	and.w	r3, r3, #12
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d00d      	beq.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x40>
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	f200 80e1 	bhi.w	8001d5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d002      	beq.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x34>
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d003      	beq.n	8001baa <HAL_RCC_GetSysClockFreq+0x3a>
 8001ba2:	e0db      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ba4:	4b73      	ldr	r3, [pc, #460]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ba6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001ba8:	e0db      	b.n	8001d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001baa:	4b73      	ldr	r3, [pc, #460]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x208>)
 8001bac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bae:	e0d8      	b.n	8001d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bb0:	4b6f      	ldr	r3, [pc, #444]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bb8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bba:	4b6d      	ldr	r3, [pc, #436]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d063      	beq.n	8001c8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc6:	4b6a      	ldr	r3, [pc, #424]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	099b      	lsrs	r3, r3, #6
 8001bcc:	2200      	movs	r2, #0
 8001bce:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bd0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bd8:	633b      	str	r3, [r7, #48]	; 0x30
 8001bda:	2300      	movs	r3, #0
 8001bdc:	637b      	str	r3, [r7, #52]	; 0x34
 8001bde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001be2:	4622      	mov	r2, r4
 8001be4:	462b      	mov	r3, r5
 8001be6:	f04f 0000 	mov.w	r0, #0
 8001bea:	f04f 0100 	mov.w	r1, #0
 8001bee:	0159      	lsls	r1, r3, #5
 8001bf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bf4:	0150      	lsls	r0, r2, #5
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4621      	mov	r1, r4
 8001bfc:	1a51      	subs	r1, r2, r1
 8001bfe:	6139      	str	r1, [r7, #16]
 8001c00:	4629      	mov	r1, r5
 8001c02:	eb63 0301 	sbc.w	r3, r3, r1
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	f04f 0200 	mov.w	r2, #0
 8001c0c:	f04f 0300 	mov.w	r3, #0
 8001c10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c14:	4659      	mov	r1, fp
 8001c16:	018b      	lsls	r3, r1, #6
 8001c18:	4651      	mov	r1, sl
 8001c1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c1e:	4651      	mov	r1, sl
 8001c20:	018a      	lsls	r2, r1, #6
 8001c22:	4651      	mov	r1, sl
 8001c24:	ebb2 0801 	subs.w	r8, r2, r1
 8001c28:	4659      	mov	r1, fp
 8001c2a:	eb63 0901 	sbc.w	r9, r3, r1
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	f04f 0300 	mov.w	r3, #0
 8001c36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c42:	4690      	mov	r8, r2
 8001c44:	4699      	mov	r9, r3
 8001c46:	4623      	mov	r3, r4
 8001c48:	eb18 0303 	adds.w	r3, r8, r3
 8001c4c:	60bb      	str	r3, [r7, #8]
 8001c4e:	462b      	mov	r3, r5
 8001c50:	eb49 0303 	adc.w	r3, r9, r3
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	f04f 0200 	mov.w	r2, #0
 8001c5a:	f04f 0300 	mov.w	r3, #0
 8001c5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c62:	4629      	mov	r1, r5
 8001c64:	024b      	lsls	r3, r1, #9
 8001c66:	4621      	mov	r1, r4
 8001c68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c6c:	4621      	mov	r1, r4
 8001c6e:	024a      	lsls	r2, r1, #9
 8001c70:	4610      	mov	r0, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c76:	2200      	movs	r2, #0
 8001c78:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c80:	f7fe fb00 	bl	8000284 <__aeabi_uldivmod>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4613      	mov	r3, r2
 8001c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c8c:	e058      	b.n	8001d40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c8e:	4b38      	ldr	r3, [pc, #224]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	099b      	lsrs	r3, r3, #6
 8001c94:	2200      	movs	r2, #0
 8001c96:	4618      	mov	r0, r3
 8001c98:	4611      	mov	r1, r2
 8001c9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c9e:	623b      	str	r3, [r7, #32]
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ca8:	4642      	mov	r2, r8
 8001caa:	464b      	mov	r3, r9
 8001cac:	f04f 0000 	mov.w	r0, #0
 8001cb0:	f04f 0100 	mov.w	r1, #0
 8001cb4:	0159      	lsls	r1, r3, #5
 8001cb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cba:	0150      	lsls	r0, r2, #5
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4641      	mov	r1, r8
 8001cc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cc6:	4649      	mov	r1, r9
 8001cc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	f04f 0300 	mov.w	r3, #0
 8001cd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cdc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ce0:	ebb2 040a 	subs.w	r4, r2, sl
 8001ce4:	eb63 050b 	sbc.w	r5, r3, fp
 8001ce8:	f04f 0200 	mov.w	r2, #0
 8001cec:	f04f 0300 	mov.w	r3, #0
 8001cf0:	00eb      	lsls	r3, r5, #3
 8001cf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cf6:	00e2      	lsls	r2, r4, #3
 8001cf8:	4614      	mov	r4, r2
 8001cfa:	461d      	mov	r5, r3
 8001cfc:	4643      	mov	r3, r8
 8001cfe:	18e3      	adds	r3, r4, r3
 8001d00:	603b      	str	r3, [r7, #0]
 8001d02:	464b      	mov	r3, r9
 8001d04:	eb45 0303 	adc.w	r3, r5, r3
 8001d08:	607b      	str	r3, [r7, #4]
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	f04f 0300 	mov.w	r3, #0
 8001d12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d16:	4629      	mov	r1, r5
 8001d18:	028b      	lsls	r3, r1, #10
 8001d1a:	4621      	mov	r1, r4
 8001d1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d20:	4621      	mov	r1, r4
 8001d22:	028a      	lsls	r2, r1, #10
 8001d24:	4610      	mov	r0, r2
 8001d26:	4619      	mov	r1, r3
 8001d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	61bb      	str	r3, [r7, #24]
 8001d2e:	61fa      	str	r2, [r7, #28]
 8001d30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d34:	f7fe faa6 	bl	8000284 <__aeabi_uldivmod>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	0c1b      	lsrs	r3, r3, #16
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001d50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d5a:	e002      	b.n	8001d62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d5c:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3750      	adds	r7, #80	; 0x50
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d6e:	bf00      	nop
 8001d70:	40023800 	.word	0x40023800
 8001d74:	00f42400 	.word	0x00f42400
 8001d78:	007a1200 	.word	0x007a1200

08001d7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d80:	4b03      	ldr	r3, [pc, #12]	; (8001d90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d82:	681b      	ldr	r3, [r3, #0]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	20000000 	.word	0x20000000

08001d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d98:	f7ff fff0 	bl	8001d7c <HAL_RCC_GetHCLKFreq>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	0a9b      	lsrs	r3, r3, #10
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	4903      	ldr	r1, [pc, #12]	; (8001db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001daa:	5ccb      	ldrb	r3, [r1, r3]
 8001dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40023800 	.word	0x40023800
 8001db8:	08007118 	.word	0x08007118

08001dbc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	220f      	movs	r2, #15
 8001dca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001dcc:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <HAL_RCC_GetClockConfig+0x5c>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 0203 	and.w	r2, r3, #3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001dd8:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <HAL_RCC_GetClockConfig+0x5c>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <HAL_RCC_GetClockConfig+0x5c>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <HAL_RCC_GetClockConfig+0x5c>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	08db      	lsrs	r3, r3, #3
 8001df6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001dfe:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <HAL_RCC_GetClockConfig+0x60>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 020f 	and.w	r2, r3, #15
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	601a      	str	r2, [r3, #0]
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40023c00 	.word	0x40023c00

08001e20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e041      	b.n	8001eb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d106      	bne.n	8001e4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f839 	bl	8001ebe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2202      	movs	r2, #2
 8001e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3304      	adds	r3, #4
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4610      	mov	r0, r2
 8001e60:	f000 f9d8 	bl	8002214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
	...

08001ed4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d001      	beq.n	8001eec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e04e      	b.n	8001f8a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2202      	movs	r2, #2
 8001ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0201 	orr.w	r2, r2, #1
 8001f02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a23      	ldr	r2, [pc, #140]	; (8001f98 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d022      	beq.n	8001f54 <HAL_TIM_Base_Start_IT+0x80>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f16:	d01d      	beq.n	8001f54 <HAL_TIM_Base_Start_IT+0x80>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a1f      	ldr	r2, [pc, #124]	; (8001f9c <HAL_TIM_Base_Start_IT+0xc8>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d018      	beq.n	8001f54 <HAL_TIM_Base_Start_IT+0x80>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a1e      	ldr	r2, [pc, #120]	; (8001fa0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d013      	beq.n	8001f54 <HAL_TIM_Base_Start_IT+0x80>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a1c      	ldr	r2, [pc, #112]	; (8001fa4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d00e      	beq.n	8001f54 <HAL_TIM_Base_Start_IT+0x80>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a1b      	ldr	r2, [pc, #108]	; (8001fa8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d009      	beq.n	8001f54 <HAL_TIM_Base_Start_IT+0x80>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a19      	ldr	r2, [pc, #100]	; (8001fac <HAL_TIM_Base_Start_IT+0xd8>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d004      	beq.n	8001f54 <HAL_TIM_Base_Start_IT+0x80>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a18      	ldr	r2, [pc, #96]	; (8001fb0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d111      	bne.n	8001f78 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2b06      	cmp	r3, #6
 8001f64:	d010      	beq.n	8001f88 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f042 0201 	orr.w	r2, r2, #1
 8001f74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f76:	e007      	b.n	8001f88 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f042 0201 	orr.w	r2, r2, #1
 8001f86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40010000 	.word	0x40010000
 8001f9c:	40000400 	.word	0x40000400
 8001fa0:	40000800 	.word	0x40000800
 8001fa4:	40000c00 	.word	0x40000c00
 8001fa8:	40010400 	.word	0x40010400
 8001fac:	40014000 	.word	0x40014000
 8001fb0:	40001800 	.word	0x40001800

08001fb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d122      	bne.n	8002010 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d11b      	bne.n	8002010 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f06f 0202 	mvn.w	r2, #2
 8001fe0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f8ee 	bl	80021d8 <HAL_TIM_IC_CaptureCallback>
 8001ffc:	e005      	b.n	800200a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f8e0 	bl	80021c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 f8f1 	bl	80021ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	2b04      	cmp	r3, #4
 800201c:	d122      	bne.n	8002064 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b04      	cmp	r3, #4
 800202a:	d11b      	bne.n	8002064 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 0204 	mvn.w	r2, #4
 8002034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2202      	movs	r2, #2
 800203a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f8c4 	bl	80021d8 <HAL_TIM_IC_CaptureCallback>
 8002050:	e005      	b.n	800205e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f8b6 	bl	80021c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f8c7 	bl	80021ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	2b08      	cmp	r3, #8
 8002070:	d122      	bne.n	80020b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	f003 0308 	and.w	r3, r3, #8
 800207c:	2b08      	cmp	r3, #8
 800207e:	d11b      	bne.n	80020b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f06f 0208 	mvn.w	r2, #8
 8002088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2204      	movs	r2, #4
 800208e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f89a 	bl	80021d8 <HAL_TIM_IC_CaptureCallback>
 80020a4:	e005      	b.n	80020b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f88c 	bl	80021c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f89d 	bl	80021ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	f003 0310 	and.w	r3, r3, #16
 80020c2:	2b10      	cmp	r3, #16
 80020c4:	d122      	bne.n	800210c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f003 0310 	and.w	r3, r3, #16
 80020d0:	2b10      	cmp	r3, #16
 80020d2:	d11b      	bne.n	800210c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f06f 0210 	mvn.w	r2, #16
 80020dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2208      	movs	r2, #8
 80020e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f870 	bl	80021d8 <HAL_TIM_IC_CaptureCallback>
 80020f8:	e005      	b.n	8002106 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f862 	bl	80021c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 f873 	bl	80021ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b01      	cmp	r3, #1
 8002118:	d10e      	bne.n	8002138 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	2b01      	cmp	r3, #1
 8002126:	d107      	bne.n	8002138 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f06f 0201 	mvn.w	r2, #1
 8002130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7fe fd7e 	bl	8000c34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002142:	2b80      	cmp	r3, #128	; 0x80
 8002144:	d10e      	bne.n	8002164 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002150:	2b80      	cmp	r3, #128	; 0x80
 8002152:	d107      	bne.n	8002164 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800215c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f902 	bl	8002368 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800216e:	2b40      	cmp	r3, #64	; 0x40
 8002170:	d10e      	bne.n	8002190 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800217c:	2b40      	cmp	r3, #64	; 0x40
 800217e:	d107      	bne.n	8002190 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f838 	bl	8002200 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f003 0320 	and.w	r3, r3, #32
 800219a:	2b20      	cmp	r3, #32
 800219c:	d10e      	bne.n	80021bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f003 0320 	and.w	r3, r3, #32
 80021a8:	2b20      	cmp	r3, #32
 80021aa:	d107      	bne.n	80021bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f06f 0220 	mvn.w	r2, #32
 80021b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f8cc 	bl	8002354 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a40      	ldr	r2, [pc, #256]	; (8002328 <TIM_Base_SetConfig+0x114>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d013      	beq.n	8002254 <TIM_Base_SetConfig+0x40>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002232:	d00f      	beq.n	8002254 <TIM_Base_SetConfig+0x40>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a3d      	ldr	r2, [pc, #244]	; (800232c <TIM_Base_SetConfig+0x118>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d00b      	beq.n	8002254 <TIM_Base_SetConfig+0x40>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a3c      	ldr	r2, [pc, #240]	; (8002330 <TIM_Base_SetConfig+0x11c>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d007      	beq.n	8002254 <TIM_Base_SetConfig+0x40>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a3b      	ldr	r2, [pc, #236]	; (8002334 <TIM_Base_SetConfig+0x120>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d003      	beq.n	8002254 <TIM_Base_SetConfig+0x40>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a3a      	ldr	r2, [pc, #232]	; (8002338 <TIM_Base_SetConfig+0x124>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d108      	bne.n	8002266 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800225a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	4313      	orrs	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a2f      	ldr	r2, [pc, #188]	; (8002328 <TIM_Base_SetConfig+0x114>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d02b      	beq.n	80022c6 <TIM_Base_SetConfig+0xb2>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002274:	d027      	beq.n	80022c6 <TIM_Base_SetConfig+0xb2>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a2c      	ldr	r2, [pc, #176]	; (800232c <TIM_Base_SetConfig+0x118>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d023      	beq.n	80022c6 <TIM_Base_SetConfig+0xb2>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a2b      	ldr	r2, [pc, #172]	; (8002330 <TIM_Base_SetConfig+0x11c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d01f      	beq.n	80022c6 <TIM_Base_SetConfig+0xb2>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a2a      	ldr	r2, [pc, #168]	; (8002334 <TIM_Base_SetConfig+0x120>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d01b      	beq.n	80022c6 <TIM_Base_SetConfig+0xb2>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a29      	ldr	r2, [pc, #164]	; (8002338 <TIM_Base_SetConfig+0x124>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d017      	beq.n	80022c6 <TIM_Base_SetConfig+0xb2>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a28      	ldr	r2, [pc, #160]	; (800233c <TIM_Base_SetConfig+0x128>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d013      	beq.n	80022c6 <TIM_Base_SetConfig+0xb2>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a27      	ldr	r2, [pc, #156]	; (8002340 <TIM_Base_SetConfig+0x12c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d00f      	beq.n	80022c6 <TIM_Base_SetConfig+0xb2>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a26      	ldr	r2, [pc, #152]	; (8002344 <TIM_Base_SetConfig+0x130>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d00b      	beq.n	80022c6 <TIM_Base_SetConfig+0xb2>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a25      	ldr	r2, [pc, #148]	; (8002348 <TIM_Base_SetConfig+0x134>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d007      	beq.n	80022c6 <TIM_Base_SetConfig+0xb2>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a24      	ldr	r2, [pc, #144]	; (800234c <TIM_Base_SetConfig+0x138>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d003      	beq.n	80022c6 <TIM_Base_SetConfig+0xb2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a23      	ldr	r2, [pc, #140]	; (8002350 <TIM_Base_SetConfig+0x13c>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d108      	bne.n	80022d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a0a      	ldr	r2, [pc, #40]	; (8002328 <TIM_Base_SetConfig+0x114>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d003      	beq.n	800230c <TIM_Base_SetConfig+0xf8>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a0c      	ldr	r2, [pc, #48]	; (8002338 <TIM_Base_SetConfig+0x124>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d103      	bne.n	8002314 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	691a      	ldr	r2, [r3, #16]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	615a      	str	r2, [r3, #20]
}
 800231a:	bf00      	nop
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	40010000 	.word	0x40010000
 800232c:	40000400 	.word	0x40000400
 8002330:	40000800 	.word	0x40000800
 8002334:	40000c00 	.word	0x40000c00
 8002338:	40010400 	.word	0x40010400
 800233c:	40014000 	.word	0x40014000
 8002340:	40014400 	.word	0x40014400
 8002344:	40014800 	.word	0x40014800
 8002348:	40001800 	.word	0x40001800
 800234c:	40001c00 	.word	0x40001c00
 8002350:	40002000 	.word	0x40002000

08002354 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f103 0208 	add.w	r2, r3, #8
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f04f 32ff 	mov.w	r2, #4294967295
 8002394:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f103 0208 	add.w	r2, r3, #8
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f103 0208 	add.w	r2, r3, #8
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80023d6:	b480      	push	{r7}
 80023d8:	b085      	sub	sp, #20
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	1c5a      	adds	r2, r3, #1
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	601a      	str	r2, [r3, #0]
}
 8002412:	bf00      	nop
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800241e:	b480      	push	{r7}
 8002420:	b085      	sub	sp, #20
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
 8002426:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002434:	d103      	bne.n	800243e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	e00c      	b.n	8002458 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3308      	adds	r3, #8
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	e002      	b.n	800244c <vListInsert+0x2e>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	429a      	cmp	r2, r3
 8002456:	d2f6      	bcs.n	8002446 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	685a      	ldr	r2, [r3, #4]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	1c5a      	adds	r2, r3, #1
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	601a      	str	r2, [r3, #0]
}
 8002484:	bf00      	nop
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6892      	ldr	r2, [r2, #8]
 80024a6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6852      	ldr	r2, [r2, #4]
 80024b0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d103      	bne.n	80024c4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	1e5a      	subs	r2, r3, #1
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10a      	bne.n	800250e <xQueueGenericReset+0x2a>
        __asm volatile
 80024f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024fc:	f383 8811 	msr	BASEPRI, r3
 8002500:	f3bf 8f6f 	isb	sy
 8002504:	f3bf 8f4f 	dsb	sy
 8002508:	60bb      	str	r3, [r7, #8]
    }
 800250a:	bf00      	nop
 800250c:	e7fe      	b.n	800250c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800250e:	f002 f8c9 	bl	80046a4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251a:	68f9      	ldr	r1, [r7, #12]
 800251c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800251e:	fb01 f303 	mul.w	r3, r1, r3
 8002522:	441a      	add	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800253e:	3b01      	subs	r3, #1
 8002540:	68f9      	ldr	r1, [r7, #12]
 8002542:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002544:	fb01 f303 	mul.w	r3, r1, r3
 8002548:	441a      	add	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	22ff      	movs	r2, #255	; 0xff
 8002552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	22ff      	movs	r2, #255	; 0xff
 800255a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d114      	bne.n	800258e <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d01a      	beq.n	80025a2 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	3310      	adds	r3, #16
 8002570:	4618      	mov	r0, r3
 8002572:	f001 f91f 	bl	80037b4 <xTaskRemoveFromEventList>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d012      	beq.n	80025a2 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800257c:	4b0c      	ldr	r3, [pc, #48]	; (80025b0 <xQueueGenericReset+0xcc>)
 800257e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	f3bf 8f4f 	dsb	sy
 8002588:	f3bf 8f6f 	isb	sy
 800258c:	e009      	b.n	80025a2 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	3310      	adds	r3, #16
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff fef2 	bl	800237c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	3324      	adds	r3, #36	; 0x24
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff feed 	bl	800237c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80025a2:	f002 f8af 	bl	8004704 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80025a6:	2301      	movs	r3, #1
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	e000ed04 	.word	0xe000ed04

080025b4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08c      	sub	sp, #48	; 0x30
 80025b8:	af02      	add	r7, sp, #8
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	4613      	mov	r3, r2
 80025c0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10a      	bne.n	80025de <xQueueGenericCreate+0x2a>
        __asm volatile
 80025c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025cc:	f383 8811 	msr	BASEPRI, r3
 80025d0:	f3bf 8f6f 	isb	sy
 80025d4:	f3bf 8f4f 	dsb	sy
 80025d8:	61bb      	str	r3, [r7, #24]
    }
 80025da:	bf00      	nop
 80025dc:	e7fe      	b.n	80025dc <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	fb02 f303 	mul.w	r3, r2, r3
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d006      	beq.n	80025fc <xQueueGenericCreate+0x48>
 80025ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d101      	bne.n	8002600 <xQueueGenericCreate+0x4c>
 80025fc:	2301      	movs	r3, #1
 80025fe:	e000      	b.n	8002602 <xQueueGenericCreate+0x4e>
 8002600:	2300      	movs	r3, #0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10a      	bne.n	800261c <xQueueGenericCreate+0x68>
        __asm volatile
 8002606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800260a:	f383 8811 	msr	BASEPRI, r3
 800260e:	f3bf 8f6f 	isb	sy
 8002612:	f3bf 8f4f 	dsb	sy
 8002616:	617b      	str	r3, [r7, #20]
    }
 8002618:	bf00      	nop
 800261a:	e7fe      	b.n	800261a <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002622:	d90a      	bls.n	800263a <xQueueGenericCreate+0x86>
        __asm volatile
 8002624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002628:	f383 8811 	msr	BASEPRI, r3
 800262c:	f3bf 8f6f 	isb	sy
 8002630:	f3bf 8f4f 	dsb	sy
 8002634:	613b      	str	r3, [r7, #16]
    }
 8002636:	bf00      	nop
 8002638:	e7fe      	b.n	8002638 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	3350      	adds	r3, #80	; 0x50
 800263e:	4618      	mov	r0, r3
 8002640:	f002 f95c 	bl	80048fc <pvPortMalloc>
 8002644:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00d      	beq.n	8002668 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800264c:	6a3b      	ldr	r3, [r7, #32]
 800264e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	3350      	adds	r3, #80	; 0x50
 8002654:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002656:	79fa      	ldrb	r2, [r7, #7]
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	4613      	mov	r3, r2
 800265e:	69fa      	ldr	r2, [r7, #28]
 8002660:	68b9      	ldr	r1, [r7, #8]
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f000 f805 	bl	8002672 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002668:	6a3b      	ldr	r3, [r7, #32]
    }
 800266a:	4618      	mov	r0, r3
 800266c:	3728      	adds	r7, #40	; 0x28
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b084      	sub	sp, #16
 8002676:	af00      	add	r7, sp, #0
 8002678:	60f8      	str	r0, [r7, #12]
 800267a:	60b9      	str	r1, [r7, #8]
 800267c:	607a      	str	r2, [r7, #4]
 800267e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d103      	bne.n	800268e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	e002      	b.n	8002694 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80026a0:	2101      	movs	r1, #1
 80026a2:	69b8      	ldr	r0, [r7, #24]
 80026a4:	f7ff ff1e 	bl	80024e4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	78fa      	ldrb	r2, [r7, #3]
 80026ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80026b0:	78fb      	ldrb	r3, [r7, #3]
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	68f9      	ldr	r1, [r7, #12]
 80026b6:	2073      	movs	r0, #115	; 0x73
 80026b8:	f003 fc1c 	bl	8005ef4 <SEGGER_SYSVIEW_RecordU32x3>
}
 80026bc:	bf00      	nop
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b090      	sub	sp, #64	; 0x40
 80026c8:	af02      	add	r7, sp, #8
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
 80026d0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80026d2:	2300      	movs	r3, #0
 80026d4:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80026da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10a      	bne.n	80026f6 <xQueueGenericSend+0x32>
        __asm volatile
 80026e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e4:	f383 8811 	msr	BASEPRI, r3
 80026e8:	f3bf 8f6f 	isb	sy
 80026ec:	f3bf 8f4f 	dsb	sy
 80026f0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80026f2:	bf00      	nop
 80026f4:	e7fe      	b.n	80026f4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d103      	bne.n	8002704 <xQueueGenericSend+0x40>
 80026fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <xQueueGenericSend+0x44>
 8002704:	2301      	movs	r3, #1
 8002706:	e000      	b.n	800270a <xQueueGenericSend+0x46>
 8002708:	2300      	movs	r3, #0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10a      	bne.n	8002724 <xQueueGenericSend+0x60>
        __asm volatile
 800270e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002712:	f383 8811 	msr	BASEPRI, r3
 8002716:	f3bf 8f6f 	isb	sy
 800271a:	f3bf 8f4f 	dsb	sy
 800271e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002720:	bf00      	nop
 8002722:	e7fe      	b.n	8002722 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	2b02      	cmp	r3, #2
 8002728:	d103      	bne.n	8002732 <xQueueGenericSend+0x6e>
 800272a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272e:	2b01      	cmp	r3, #1
 8002730:	d101      	bne.n	8002736 <xQueueGenericSend+0x72>
 8002732:	2301      	movs	r3, #1
 8002734:	e000      	b.n	8002738 <xQueueGenericSend+0x74>
 8002736:	2300      	movs	r3, #0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10a      	bne.n	8002752 <xQueueGenericSend+0x8e>
        __asm volatile
 800273c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002740:	f383 8811 	msr	BASEPRI, r3
 8002744:	f3bf 8f6f 	isb	sy
 8002748:	f3bf 8f4f 	dsb	sy
 800274c:	623b      	str	r3, [r7, #32]
    }
 800274e:	bf00      	nop
 8002750:	e7fe      	b.n	8002750 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002752:	f001 f9cf 	bl	8003af4 <xTaskGetSchedulerState>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d102      	bne.n	8002762 <xQueueGenericSend+0x9e>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <xQueueGenericSend+0xa2>
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <xQueueGenericSend+0xa4>
 8002766:	2300      	movs	r3, #0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10a      	bne.n	8002782 <xQueueGenericSend+0xbe>
        __asm volatile
 800276c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002770:	f383 8811 	msr	BASEPRI, r3
 8002774:	f3bf 8f6f 	isb	sy
 8002778:	f3bf 8f4f 	dsb	sy
 800277c:	61fb      	str	r3, [r7, #28]
    }
 800277e:	bf00      	nop
 8002780:	e7fe      	b.n	8002780 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002782:	f001 ff8f 	bl	80046a4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800278a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278e:	429a      	cmp	r2, r3
 8002790:	d302      	bcc.n	8002798 <xQueueGenericSend+0xd4>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	2b02      	cmp	r3, #2
 8002796:	d136      	bne.n	8002806 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8002798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800279a:	4618      	mov	r0, r3
 800279c:	f004 f936 	bl	8006a0c <SEGGER_SYSVIEW_ShrinkId>
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	460b      	mov	r3, r1
 80027aa:	4601      	mov	r1, r0
 80027ac:	205a      	movs	r0, #90	; 0x5a
 80027ae:	f003 fc17 	bl	8005fe0 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	68b9      	ldr	r1, [r7, #8]
 80027b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027b8:	f000 fa78 	bl	8002cac <prvCopyDataToQueue>
 80027bc:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d010      	beq.n	80027e8 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c8:	3324      	adds	r3, #36	; 0x24
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 fff2 	bl	80037b4 <xTaskRemoveFromEventList>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d013      	beq.n	80027fe <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80027d6:	4b4d      	ldr	r3, [pc, #308]	; (800290c <xQueueGenericSend+0x248>)
 80027d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	f3bf 8f4f 	dsb	sy
 80027e2:	f3bf 8f6f 	isb	sy
 80027e6:	e00a      	b.n	80027fe <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80027e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d007      	beq.n	80027fe <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80027ee:	4b47      	ldr	r3, [pc, #284]	; (800290c <xQueueGenericSend+0x248>)
 80027f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	f3bf 8f4f 	dsb	sy
 80027fa:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80027fe:	f001 ff81 	bl	8004704 <vPortExitCritical>
                return pdPASS;
 8002802:	2301      	movs	r3, #1
 8002804:	e07d      	b.n	8002902 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d110      	bne.n	800282e <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800280c:	f001 ff7a 	bl	8004704 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002812:	4618      	mov	r0, r3
 8002814:	f004 f8fa 	bl	8006a0c <SEGGER_SYSVIEW_ShrinkId>
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	460b      	mov	r3, r1
 8002822:	4601      	mov	r1, r0
 8002824:	205a      	movs	r0, #90	; 0x5a
 8002826:	f003 fbdb 	bl	8005fe0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 800282a:	2300      	movs	r3, #0
 800282c:	e069      	b.n	8002902 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 800282e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002830:	2b00      	cmp	r3, #0
 8002832:	d106      	bne.n	8002842 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002834:	f107 0314 	add.w	r3, r7, #20
 8002838:	4618      	mov	r0, r3
 800283a:	f001 f821 	bl	8003880 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800283e:	2301      	movs	r3, #1
 8002840:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002842:	f001 ff5f 	bl	8004704 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002846:	f000 fd6d 	bl	8003324 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800284a:	f001 ff2b 	bl	80046a4 <vPortEnterCritical>
 800284e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002850:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002854:	b25b      	sxtb	r3, r3
 8002856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800285a:	d103      	bne.n	8002864 <xQueueGenericSend+0x1a0>
 800285c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002866:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800286a:	b25b      	sxtb	r3, r3
 800286c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002870:	d103      	bne.n	800287a <xQueueGenericSend+0x1b6>
 8002872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800287a:	f001 ff43 	bl	8004704 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800287e:	1d3a      	adds	r2, r7, #4
 8002880:	f107 0314 	add.w	r3, r7, #20
 8002884:	4611      	mov	r1, r2
 8002886:	4618      	mov	r0, r3
 8002888:	f001 f810 	bl	80038ac <xTaskCheckForTimeOut>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d124      	bne.n	80028dc <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002892:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002894:	f000 fb02 	bl	8002e9c <prvIsQueueFull>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d018      	beq.n	80028d0 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800289e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a0:	3310      	adds	r3, #16
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	4611      	mov	r1, r2
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 ff32 	bl	8003710 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80028ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028ae:	f000 fa8d 	bl	8002dcc <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80028b2:	f000 fd45 	bl	8003340 <xTaskResumeAll>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f47f af62 	bne.w	8002782 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80028be:	4b13      	ldr	r3, [pc, #76]	; (800290c <xQueueGenericSend+0x248>)
 80028c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	f3bf 8f4f 	dsb	sy
 80028ca:	f3bf 8f6f 	isb	sy
 80028ce:	e758      	b.n	8002782 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80028d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028d2:	f000 fa7b 	bl	8002dcc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80028d6:	f000 fd33 	bl	8003340 <xTaskResumeAll>
 80028da:	e752      	b.n	8002782 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80028dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028de:	f000 fa75 	bl	8002dcc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80028e2:	f000 fd2d 	bl	8003340 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80028e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e8:	4618      	mov	r0, r3
 80028ea:	f004 f88f 	bl	8006a0c <SEGGER_SYSVIEW_ShrinkId>
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	6879      	ldr	r1, [r7, #4]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	460b      	mov	r3, r1
 80028f8:	4601      	mov	r1, r0
 80028fa:	205a      	movs	r0, #90	; 0x5a
 80028fc:	f003 fb70 	bl	8005fe0 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002900:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002902:	4618      	mov	r0, r3
 8002904:	3738      	adds	r7, #56	; 0x38
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	e000ed04 	.word	0xe000ed04

08002910 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b090      	sub	sp, #64	; 0x40
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
 800291c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10a      	bne.n	800293e <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800292c:	f383 8811 	msr	BASEPRI, r3
 8002930:	f3bf 8f6f 	isb	sy
 8002934:	f3bf 8f4f 	dsb	sy
 8002938:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800293a:	bf00      	nop
 800293c:	e7fe      	b.n	800293c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d103      	bne.n	800294c <xQueueGenericSendFromISR+0x3c>
 8002944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <xQueueGenericSendFromISR+0x40>
 800294c:	2301      	movs	r3, #1
 800294e:	e000      	b.n	8002952 <xQueueGenericSendFromISR+0x42>
 8002950:	2300      	movs	r3, #0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10a      	bne.n	800296c <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295a:	f383 8811 	msr	BASEPRI, r3
 800295e:	f3bf 8f6f 	isb	sy
 8002962:	f3bf 8f4f 	dsb	sy
 8002966:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002968:	bf00      	nop
 800296a:	e7fe      	b.n	800296a <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	2b02      	cmp	r3, #2
 8002970:	d103      	bne.n	800297a <xQueueGenericSendFromISR+0x6a>
 8002972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002976:	2b01      	cmp	r3, #1
 8002978:	d101      	bne.n	800297e <xQueueGenericSendFromISR+0x6e>
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <xQueueGenericSendFromISR+0x70>
 800297e:	2300      	movs	r3, #0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10a      	bne.n	800299a <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002988:	f383 8811 	msr	BASEPRI, r3
 800298c:	f3bf 8f6f 	isb	sy
 8002990:	f3bf 8f4f 	dsb	sy
 8002994:	623b      	str	r3, [r7, #32]
    }
 8002996:	bf00      	nop
 8002998:	e7fe      	b.n	8002998 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800299a:	f001 ff6f 	bl	800487c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800299e:	f3ef 8211 	mrs	r2, BASEPRI
 80029a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a6:	f383 8811 	msr	BASEPRI, r3
 80029aa:	f3bf 8f6f 	isb	sy
 80029ae:	f3bf 8f4f 	dsb	sy
 80029b2:	61fa      	str	r2, [r7, #28]
 80029b4:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80029b6:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80029b8:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80029ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d302      	bcc.n	80029cc <xQueueGenericSendFromISR+0xbc>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d148      	bne.n	8002a5e <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80029cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029da:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80029dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029de:	4618      	mov	r0, r3
 80029e0:	f004 f814 	bl	8006a0c <SEGGER_SYSVIEW_ShrinkId>
 80029e4:	4601      	mov	r1, r0
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	461a      	mov	r2, r3
 80029ea:	2060      	movs	r0, #96	; 0x60
 80029ec:	f003 fa28 	bl	8005e40 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	68b9      	ldr	r1, [r7, #8]
 80029f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80029f6:	f000 f959 	bl	8002cac <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80029fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80029fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a02:	d112      	bne.n	8002a2a <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d025      	beq.n	8002a58 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0e:	3324      	adds	r3, #36	; 0x24
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 fecf 	bl	80037b4 <xTaskRemoveFromEventList>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d01d      	beq.n	8002a58 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d01a      	beq.n	8002a58 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	e016      	b.n	8002a58 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002a2a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002a2e:	2b7f      	cmp	r3, #127	; 0x7f
 8002a30:	d10a      	bne.n	8002a48 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a36:	f383 8811 	msr	BASEPRI, r3
 8002a3a:	f3bf 8f6f 	isb	sy
 8002a3e:	f3bf 8f4f 	dsb	sy
 8002a42:	617b      	str	r3, [r7, #20]
    }
 8002a44:	bf00      	nop
 8002a46:	e7fe      	b.n	8002a46 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002a48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	b25a      	sxtb	r2, r3
 8002a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002a5c:	e00b      	b.n	8002a76 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a60:	4618      	mov	r0, r3
 8002a62:	f003 ffd3 	bl	8006a0c <SEGGER_SYSVIEW_ShrinkId>
 8002a66:	4601      	mov	r1, r0
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	2060      	movs	r0, #96	; 0x60
 8002a6e:	f003 f9e7 	bl	8005e40 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002a72:	2300      	movs	r3, #0
 8002a74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a78:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002a80:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3740      	adds	r7, #64	; 0x40
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002a8c:	b590      	push	{r4, r7, lr}
 8002a8e:	b08f      	sub	sp, #60	; 0x3c
 8002a90:	af02      	add	r7, sp, #8
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10a      	bne.n	8002abc <xQueueReceive+0x30>
        __asm volatile
 8002aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aaa:	f383 8811 	msr	BASEPRI, r3
 8002aae:	f3bf 8f6f 	isb	sy
 8002ab2:	f3bf 8f4f 	dsb	sy
 8002ab6:	623b      	str	r3, [r7, #32]
    }
 8002ab8:	bf00      	nop
 8002aba:	e7fe      	b.n	8002aba <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d103      	bne.n	8002aca <xQueueReceive+0x3e>
 8002ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <xQueueReceive+0x42>
 8002aca:	2301      	movs	r3, #1
 8002acc:	e000      	b.n	8002ad0 <xQueueReceive+0x44>
 8002ace:	2300      	movs	r3, #0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10a      	bne.n	8002aea <xQueueReceive+0x5e>
        __asm volatile
 8002ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad8:	f383 8811 	msr	BASEPRI, r3
 8002adc:	f3bf 8f6f 	isb	sy
 8002ae0:	f3bf 8f4f 	dsb	sy
 8002ae4:	61fb      	str	r3, [r7, #28]
    }
 8002ae6:	bf00      	nop
 8002ae8:	e7fe      	b.n	8002ae8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002aea:	f001 f803 	bl	8003af4 <xTaskGetSchedulerState>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d102      	bne.n	8002afa <xQueueReceive+0x6e>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <xQueueReceive+0x72>
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <xQueueReceive+0x74>
 8002afe:	2300      	movs	r3, #0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10a      	bne.n	8002b1a <xQueueReceive+0x8e>
        __asm volatile
 8002b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b08:	f383 8811 	msr	BASEPRI, r3
 8002b0c:	f3bf 8f6f 	isb	sy
 8002b10:	f3bf 8f4f 	dsb	sy
 8002b14:	61bb      	str	r3, [r7, #24]
    }
 8002b16:	bf00      	nop
 8002b18:	e7fe      	b.n	8002b18 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002b1a:	f001 fdc3 	bl	80046a4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d02f      	beq.n	8002b8a <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b2a:	68b9      	ldr	r1, [r7, #8]
 8002b2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b2e:	f000 f927 	bl	8002d80 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b34:	4618      	mov	r0, r3
 8002b36:	f003 ff69 	bl	8006a0c <SEGGER_SYSVIEW_ShrinkId>
 8002b3a:	4604      	mov	r4, r0
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	f003 ff65 	bl	8006a0c <SEGGER_SYSVIEW_ShrinkId>
 8002b42:	4602      	mov	r2, r0
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2101      	movs	r1, #1
 8002b48:	9100      	str	r1, [sp, #0]
 8002b4a:	4621      	mov	r1, r4
 8002b4c:	205c      	movs	r0, #92	; 0x5c
 8002b4e:	f003 fa47 	bl	8005fe0 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	1e5a      	subs	r2, r3, #1
 8002b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b58:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00f      	beq.n	8002b82 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b64:	3310      	adds	r3, #16
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 fe24 	bl	80037b4 <xTaskRemoveFromEventList>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d007      	beq.n	8002b82 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002b72:	4b4d      	ldr	r3, [pc, #308]	; (8002ca8 <xQueueReceive+0x21c>)
 8002b74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	f3bf 8f4f 	dsb	sy
 8002b7e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002b82:	f001 fdbf 	bl	8004704 <vPortExitCritical>
                return pdPASS;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e08a      	b.n	8002ca0 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d113      	bne.n	8002bb8 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002b90:	f001 fdb8 	bl	8004704 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b96:	4618      	mov	r0, r3
 8002b98:	f003 ff38 	bl	8006a0c <SEGGER_SYSVIEW_ShrinkId>
 8002b9c:	4604      	mov	r4, r0
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	f003 ff34 	bl	8006a0c <SEGGER_SYSVIEW_ShrinkId>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2101      	movs	r1, #1
 8002baa:	9100      	str	r1, [sp, #0]
 8002bac:	4621      	mov	r1, r4
 8002bae:	205c      	movs	r0, #92	; 0x5c
 8002bb0:	f003 fa16 	bl	8005fe0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	e073      	b.n	8002ca0 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d106      	bne.n	8002bcc <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002bbe:	f107 0310 	add.w	r3, r7, #16
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 fe5c 	bl	8003880 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002bcc:	f001 fd9a 	bl	8004704 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002bd0:	f000 fba8 	bl	8003324 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002bd4:	f001 fd66 	bl	80046a4 <vPortEnterCritical>
 8002bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bde:	b25b      	sxtb	r3, r3
 8002be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be4:	d103      	bne.n	8002bee <xQueueReceive+0x162>
 8002be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bf4:	b25b      	sxtb	r3, r3
 8002bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfa:	d103      	bne.n	8002c04 <xQueueReceive+0x178>
 8002bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c04:	f001 fd7e 	bl	8004704 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c08:	1d3a      	adds	r2, r7, #4
 8002c0a:	f107 0310 	add.w	r3, r7, #16
 8002c0e:	4611      	mov	r1, r2
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 fe4b 	bl	80038ac <xTaskCheckForTimeOut>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d124      	bne.n	8002c66 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c1e:	f000 f927 	bl	8002e70 <prvIsQueueEmpty>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d018      	beq.n	8002c5a <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2a:	3324      	adds	r3, #36	; 0x24
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	4611      	mov	r1, r2
 8002c30:	4618      	mov	r0, r3
 8002c32:	f000 fd6d 	bl	8003710 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002c36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c38:	f000 f8c8 	bl	8002dcc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002c3c:	f000 fb80 	bl	8003340 <xTaskResumeAll>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f47f af69 	bne.w	8002b1a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002c48:	4b17      	ldr	r3, [pc, #92]	; (8002ca8 <xQueueReceive+0x21c>)
 8002c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	f3bf 8f4f 	dsb	sy
 8002c54:	f3bf 8f6f 	isb	sy
 8002c58:	e75f      	b.n	8002b1a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002c5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c5c:	f000 f8b6 	bl	8002dcc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002c60:	f000 fb6e 	bl	8003340 <xTaskResumeAll>
 8002c64:	e759      	b.n	8002b1a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002c66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c68:	f000 f8b0 	bl	8002dcc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002c6c:	f000 fb68 	bl	8003340 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c72:	f000 f8fd 	bl	8002e70 <prvIsQueueEmpty>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f43f af4e 	beq.w	8002b1a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c80:	4618      	mov	r0, r3
 8002c82:	f003 fec3 	bl	8006a0c <SEGGER_SYSVIEW_ShrinkId>
 8002c86:	4604      	mov	r4, r0
 8002c88:	2000      	movs	r0, #0
 8002c8a:	f003 febf 	bl	8006a0c <SEGGER_SYSVIEW_ShrinkId>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2101      	movs	r1, #1
 8002c94:	9100      	str	r1, [sp, #0]
 8002c96:	4621      	mov	r1, r4
 8002c98:	205c      	movs	r0, #92	; 0x5c
 8002c9a:	f003 f9a1 	bl	8005fe0 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002c9e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3734      	adds	r7, #52	; 0x34
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd90      	pop	{r4, r7, pc}
 8002ca8:	e000ed04 	.word	0xe000ed04

08002cac <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10d      	bne.n	8002ce6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d14d      	bne.n	8002d6e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 ff2a 	bl	8003b30 <xTaskPriorityDisinherit>
 8002cdc:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	609a      	str	r2, [r3, #8]
 8002ce4:	e043      	b.n	8002d6e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d119      	bne.n	8002d20 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6858      	ldr	r0, [r3, #4]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	68b9      	ldr	r1, [r7, #8]
 8002cf8:	f004 f952 	bl	8006fa0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	441a      	add	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d32b      	bcc.n	8002d6e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	605a      	str	r2, [r3, #4]
 8002d1e:	e026      	b.n	8002d6e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	68d8      	ldr	r0, [r3, #12]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	461a      	mov	r2, r3
 8002d2a:	68b9      	ldr	r1, [r7, #8]
 8002d2c:	f004 f938 	bl	8006fa0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	68da      	ldr	r2, [r3, #12]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	425b      	negs	r3, r3
 8002d3a:	441a      	add	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	68da      	ldr	r2, [r3, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d207      	bcs.n	8002d5c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	425b      	negs	r3, r3
 8002d56:	441a      	add	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d105      	bne.n	8002d6e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002d76:	697b      	ldr	r3, [r7, #20]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d018      	beq.n	8002dc4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	441a      	add	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68da      	ldr	r2, [r3, #12]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d303      	bcc.n	8002db4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68d9      	ldr	r1, [r3, #12]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	6838      	ldr	r0, [r7, #0]
 8002dc0:	f004 f8ee 	bl	8006fa0 <memcpy>
    }
}
 8002dc4:	bf00      	nop
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002dd4:	f001 fc66 	bl	80046a4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dde:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002de0:	e011      	b.n	8002e06 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d012      	beq.n	8002e10 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	3324      	adds	r3, #36	; 0x24
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 fce0 	bl	80037b4 <xTaskRemoveFromEventList>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002dfa:	f000 fdbd 	bl	8003978 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002dfe:	7bfb      	ldrb	r3, [r7, #15]
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	dce9      	bgt.n	8002de2 <prvUnlockQueue+0x16>
 8002e0e:	e000      	b.n	8002e12 <prvUnlockQueue+0x46>
                        break;
 8002e10:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	22ff      	movs	r2, #255	; 0xff
 8002e16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002e1a:	f001 fc73 	bl	8004704 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002e1e:	f001 fc41 	bl	80046a4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e28:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e2a:	e011      	b.n	8002e50 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d012      	beq.n	8002e5a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3310      	adds	r3, #16
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f000 fcbb 	bl	80037b4 <xTaskRemoveFromEventList>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002e44:	f000 fd98 	bl	8003978 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002e48:	7bbb      	ldrb	r3, [r7, #14]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	dce9      	bgt.n	8002e2c <prvUnlockQueue+0x60>
 8002e58:	e000      	b.n	8002e5c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002e5a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	22ff      	movs	r2, #255	; 0xff
 8002e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002e64:	f001 fc4e 	bl	8004704 <vPortExitCritical>
}
 8002e68:	bf00      	nop
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002e78:	f001 fc14 	bl	80046a4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d102      	bne.n	8002e8a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002e84:	2301      	movs	r3, #1
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	e001      	b.n	8002e8e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002e8e:	f001 fc39 	bl	8004704 <vPortExitCritical>

    return xReturn;
 8002e92:	68fb      	ldr	r3, [r7, #12]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002ea4:	f001 fbfe 	bl	80046a4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d102      	bne.n	8002eba <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	e001      	b.n	8002ebe <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002ebe:	f001 fc21 	bl	8004704 <vPortExitCritical>

    return xReturn;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	e01e      	b.n	8002f1a <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002edc:	4a13      	ldr	r2, [pc, #76]	; (8002f2c <vQueueAddToRegistry+0x60>)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d115      	bne.n	8002f14 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002ee8:	4910      	ldr	r1, [pc, #64]	; (8002f2c <vQueueAddToRegistry+0x60>)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002ef2:	4a0e      	ldr	r2, [pc, #56]	; (8002f2c <vQueueAddToRegistry+0x60>)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	4413      	add	r3, r2
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f003 fd83 	bl	8006a0c <SEGGER_SYSVIEW_ShrinkId>
 8002f06:	4601      	mov	r1, r0
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	2071      	movs	r0, #113	; 0x71
 8002f0e:	f002 ff97 	bl	8005e40 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002f12:	e006      	b.n	8002f22 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	3301      	adds	r3, #1
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2b07      	cmp	r3, #7
 8002f1e:	d9dd      	bls.n	8002edc <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002f20:	bf00      	nop
 8002f22:	bf00      	nop
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	2000007c 	.word	0x2000007c

08002f30 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002f40:	f001 fbb0 	bl	80046a4 <vPortEnterCritical>
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f4a:	b25b      	sxtb	r3, r3
 8002f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f50:	d103      	bne.n	8002f5a <vQueueWaitForMessageRestricted+0x2a>
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f60:	b25b      	sxtb	r3, r3
 8002f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f66:	d103      	bne.n	8002f70 <vQueueWaitForMessageRestricted+0x40>
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f70:	f001 fbc8 	bl	8004704 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d106      	bne.n	8002f8a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	3324      	adds	r3, #36	; 0x24
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	68b9      	ldr	r1, [r7, #8]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f000 fbe7 	bl	8003758 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002f8a:	6978      	ldr	r0, [r7, #20]
 8002f8c:	f7ff ff1e 	bl	8002dcc <prvUnlockQueue>
    }
 8002f90:	bf00      	nop
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b08c      	sub	sp, #48	; 0x30
 8002f9c:	af04      	add	r7, sp, #16
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	603b      	str	r3, [r7, #0]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002fa8:	88fb      	ldrh	r3, [r7, #6]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4618      	mov	r0, r3
 8002fae:	f001 fca5 	bl	80048fc <pvPortMalloc>
 8002fb2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00e      	beq.n	8002fd8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002fba:	2058      	movs	r0, #88	; 0x58
 8002fbc:	f001 fc9e 	bl	80048fc <pvPortMalloc>
 8002fc0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	631a      	str	r2, [r3, #48]	; 0x30
 8002fce:	e005      	b.n	8002fdc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002fd0:	6978      	ldr	r0, [r7, #20]
 8002fd2:	f001 fd73 	bl	8004abc <vPortFree>
 8002fd6:	e001      	b.n	8002fdc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d013      	beq.n	800300a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002fe2:	88fa      	ldrh	r2, [r7, #6]
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	9303      	str	r3, [sp, #12]
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	9302      	str	r3, [sp, #8]
 8002fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fee:	9301      	str	r3, [sp, #4]
 8002ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	68b9      	ldr	r1, [r7, #8]
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 f80e 	bl	800301a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002ffe:	69f8      	ldr	r0, [r7, #28]
 8003000:	f000 f8a2 	bl	8003148 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003004:	2301      	movs	r3, #1
 8003006:	61bb      	str	r3, [r7, #24]
 8003008:	e002      	b.n	8003010 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800300a:	f04f 33ff 	mov.w	r3, #4294967295
 800300e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003010:	69bb      	ldr	r3, [r7, #24]
    }
 8003012:	4618      	mov	r0, r3
 8003014:	3720      	adds	r7, #32
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b088      	sub	sp, #32
 800301e:	af00      	add	r7, sp, #0
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	607a      	str	r2, [r7, #4]
 8003026:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	461a      	mov	r2, r3
 8003032:	21a5      	movs	r1, #165	; 0xa5
 8003034:	f003 ffc2 	bl	8006fbc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003042:	3b01      	subs	r3, #1
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	f023 0307 	bic.w	r3, r3, #7
 8003050:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00a      	beq.n	8003072 <prvInitialiseNewTask+0x58>
        __asm volatile
 800305c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003060:	f383 8811 	msr	BASEPRI, r3
 8003064:	f3bf 8f6f 	isb	sy
 8003068:	f3bf 8f4f 	dsb	sy
 800306c:	617b      	str	r3, [r7, #20]
    }
 800306e:	bf00      	nop
 8003070:	e7fe      	b.n	8003070 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d01f      	beq.n	80030b8 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003078:	2300      	movs	r3, #0
 800307a:	61fb      	str	r3, [r7, #28]
 800307c:	e012      	b.n	80030a4 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	4413      	add	r3, r2
 8003084:	7819      	ldrb	r1, [r3, #0]
 8003086:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	4413      	add	r3, r2
 800308c:	3334      	adds	r3, #52	; 0x34
 800308e:	460a      	mov	r2, r1
 8003090:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	4413      	add	r3, r2
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d006      	beq.n	80030ac <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	3301      	adds	r3, #1
 80030a2:	61fb      	str	r3, [r7, #28]
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	2b09      	cmp	r3, #9
 80030a8:	d9e9      	bls.n	800307e <prvInitialiseNewTask+0x64>
 80030aa:	e000      	b.n	80030ae <prvInitialiseNewTask+0x94>
            {
                break;
 80030ac:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80030ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80030b6:	e003      	b.n	80030c0 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80030b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80030c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d901      	bls.n	80030ca <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80030c6:	2304      	movs	r3, #4
 80030c8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80030ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030ce:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80030d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030d4:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80030d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d8:	2200      	movs	r2, #0
 80030da:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80030dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030de:	3304      	adds	r3, #4
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff f96b 	bl	80023bc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80030e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e8:	3318      	adds	r3, #24
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff f966 	bl	80023bc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80030f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030f4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f8:	f1c3 0205 	rsb	r2, r3, #5
 80030fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fe:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003104:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003108:	3350      	adds	r3, #80	; 0x50
 800310a:	2204      	movs	r2, #4
 800310c:	2100      	movs	r1, #0
 800310e:	4618      	mov	r0, r3
 8003110:	f003 ff54 	bl	8006fbc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003116:	3354      	adds	r3, #84	; 0x54
 8003118:	2201      	movs	r2, #1
 800311a:	2100      	movs	r1, #0
 800311c:	4618      	mov	r0, r3
 800311e:	f003 ff4d 	bl	8006fbc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	68f9      	ldr	r1, [r7, #12]
 8003126:	69b8      	ldr	r0, [r7, #24]
 8003128:	f001 f90c 	bl	8004344 <pxPortInitialiseStack>
 800312c:	4602      	mov	r2, r0
 800312e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003130:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003134:	2b00      	cmp	r3, #0
 8003136:	d002      	beq.n	800313e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800313c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800313e:	bf00      	nop
 8003140:	3720      	adds	r7, #32
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
	...

08003148 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003148:	b5b0      	push	{r4, r5, r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af02      	add	r7, sp, #8
 800314e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003150:	f001 faa8 	bl	80046a4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003154:	4b3b      	ldr	r3, [pc, #236]	; (8003244 <prvAddNewTaskToReadyList+0xfc>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	3301      	adds	r3, #1
 800315a:	4a3a      	ldr	r2, [pc, #232]	; (8003244 <prvAddNewTaskToReadyList+0xfc>)
 800315c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800315e:	4b3a      	ldr	r3, [pc, #232]	; (8003248 <prvAddNewTaskToReadyList+0x100>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d109      	bne.n	800317a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003166:	4a38      	ldr	r2, [pc, #224]	; (8003248 <prvAddNewTaskToReadyList+0x100>)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800316c:	4b35      	ldr	r3, [pc, #212]	; (8003244 <prvAddNewTaskToReadyList+0xfc>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d110      	bne.n	8003196 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003174:	f000 fc24 	bl	80039c0 <prvInitialiseTaskLists>
 8003178:	e00d      	b.n	8003196 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800317a:	4b34      	ldr	r3, [pc, #208]	; (800324c <prvAddNewTaskToReadyList+0x104>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d109      	bne.n	8003196 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003182:	4b31      	ldr	r3, [pc, #196]	; (8003248 <prvAddNewTaskToReadyList+0x100>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318c:	429a      	cmp	r2, r3
 800318e:	d802      	bhi.n	8003196 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003190:	4a2d      	ldr	r2, [pc, #180]	; (8003248 <prvAddNewTaskToReadyList+0x100>)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003196:	4b2e      	ldr	r3, [pc, #184]	; (8003250 <prvAddNewTaskToReadyList+0x108>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	3301      	adds	r3, #1
 800319c:	4a2c      	ldr	r2, [pc, #176]	; (8003250 <prvAddNewTaskToReadyList+0x108>)
 800319e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80031a0:	4b2b      	ldr	r3, [pc, #172]	; (8003250 <prvAddNewTaskToReadyList+0x108>)
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d016      	beq.n	80031dc <prvAddNewTaskToReadyList+0x94>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f003 fb05 	bl	80067c0 <SEGGER_SYSVIEW_OnTaskCreate>
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c6:	461d      	mov	r5, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	461c      	mov	r4, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	1ae3      	subs	r3, r4, r3
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	462b      	mov	r3, r5
 80031d8:	f003 fe24 	bl	8006e24 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4618      	mov	r0, r3
 80031e0:	f003 fb72 	bl	80068c8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e8:	2201      	movs	r2, #1
 80031ea:	409a      	lsls	r2, r3
 80031ec:	4b19      	ldr	r3, [pc, #100]	; (8003254 <prvAddNewTaskToReadyList+0x10c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	4a18      	ldr	r2, [pc, #96]	; (8003254 <prvAddNewTaskToReadyList+0x10c>)
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031fa:	4613      	mov	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4a15      	ldr	r2, [pc, #84]	; (8003258 <prvAddNewTaskToReadyList+0x110>)
 8003204:	441a      	add	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3304      	adds	r3, #4
 800320a:	4619      	mov	r1, r3
 800320c:	4610      	mov	r0, r2
 800320e:	f7ff f8e2 	bl	80023d6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003212:	f001 fa77 	bl	8004704 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003216:	4b0d      	ldr	r3, [pc, #52]	; (800324c <prvAddNewTaskToReadyList+0x104>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00e      	beq.n	800323c <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800321e:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <prvAddNewTaskToReadyList+0x100>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	429a      	cmp	r2, r3
 800322a:	d207      	bcs.n	800323c <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800322c:	4b0b      	ldr	r3, [pc, #44]	; (800325c <prvAddNewTaskToReadyList+0x114>)
 800322e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	f3bf 8f4f 	dsb	sy
 8003238:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800323c:	bf00      	nop
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bdb0      	pop	{r4, r5, r7, pc}
 8003244:	20000194 	.word	0x20000194
 8003248:	200000bc 	.word	0x200000bc
 800324c:	200001a0 	.word	0x200001a0
 8003250:	200001b0 	.word	0x200001b0
 8003254:	2000019c 	.word	0x2000019c
 8003258:	200000c0 	.word	0x200000c0
 800325c:	e000ed04 	.word	0xe000ed04

08003260 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003266:	4b27      	ldr	r3, [pc, #156]	; (8003304 <vTaskStartScheduler+0xa4>)
 8003268:	9301      	str	r3, [sp, #4]
 800326a:	2300      	movs	r3, #0
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	2300      	movs	r3, #0
 8003270:	2282      	movs	r2, #130	; 0x82
 8003272:	4925      	ldr	r1, [pc, #148]	; (8003308 <vTaskStartScheduler+0xa8>)
 8003274:	4825      	ldr	r0, [pc, #148]	; (800330c <vTaskStartScheduler+0xac>)
 8003276:	f7ff fe8f 	bl	8002f98 <xTaskCreate>
 800327a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d102      	bne.n	8003288 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003282:	f000 fd4d 	bl	8003d20 <xTimerCreateTimerTask>
 8003286:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d124      	bne.n	80032d8 <vTaskStartScheduler+0x78>
        __asm volatile
 800328e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003292:	f383 8811 	msr	BASEPRI, r3
 8003296:	f3bf 8f6f 	isb	sy
 800329a:	f3bf 8f4f 	dsb	sy
 800329e:	60bb      	str	r3, [r7, #8]
    }
 80032a0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80032a2:	4b1b      	ldr	r3, [pc, #108]	; (8003310 <vTaskStartScheduler+0xb0>)
 80032a4:	f04f 32ff 	mov.w	r2, #4294967295
 80032a8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80032aa:	4b1a      	ldr	r3, [pc, #104]	; (8003314 <vTaskStartScheduler+0xb4>)
 80032ac:	2201      	movs	r2, #1
 80032ae:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80032b0:	4b19      	ldr	r3, [pc, #100]	; (8003318 <vTaskStartScheduler+0xb8>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80032b6:	4b19      	ldr	r3, [pc, #100]	; (800331c <vTaskStartScheduler+0xbc>)
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	4b12      	ldr	r3, [pc, #72]	; (8003304 <vTaskStartScheduler+0xa4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d102      	bne.n	80032c8 <vTaskStartScheduler+0x68>
 80032c2:	f003 fa61 	bl	8006788 <SEGGER_SYSVIEW_OnIdle>
 80032c6:	e004      	b.n	80032d2 <vTaskStartScheduler+0x72>
 80032c8:	4b14      	ldr	r3, [pc, #80]	; (800331c <vTaskStartScheduler+0xbc>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f003 fab9 	bl	8006844 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80032d2:	f001 f8c7 	bl	8004464 <xPortStartScheduler>
 80032d6:	e00e      	b.n	80032f6 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032de:	d10a      	bne.n	80032f6 <vTaskStartScheduler+0x96>
        __asm volatile
 80032e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e4:	f383 8811 	msr	BASEPRI, r3
 80032e8:	f3bf 8f6f 	isb	sy
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	607b      	str	r3, [r7, #4]
    }
 80032f2:	bf00      	nop
 80032f4:	e7fe      	b.n	80032f4 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80032f6:	4b0a      	ldr	r3, [pc, #40]	; (8003320 <vTaskStartScheduler+0xc0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
}
 80032fa:	bf00      	nop
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	200001b8 	.word	0x200001b8
 8003308:	08007030 	.word	0x08007030
 800330c:	08003991 	.word	0x08003991
 8003310:	200001b4 	.word	0x200001b4
 8003314:	200001a0 	.word	0x200001a0
 8003318:	20000198 	.word	0x20000198
 800331c:	200000bc 	.word	0x200000bc
 8003320:	2000000c 	.word	0x2000000c

08003324 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003328:	4b04      	ldr	r3, [pc, #16]	; (800333c <vTaskSuspendAll+0x18>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	3301      	adds	r3, #1
 800332e:	4a03      	ldr	r2, [pc, #12]	; (800333c <vTaskSuspendAll+0x18>)
 8003330:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003332:	bf00      	nop
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	200001bc 	.word	0x200001bc

08003340 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003346:	2300      	movs	r3, #0
 8003348:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800334a:	2300      	movs	r3, #0
 800334c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800334e:	4b43      	ldr	r3, [pc, #268]	; (800345c <xTaskResumeAll+0x11c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10a      	bne.n	800336c <xTaskResumeAll+0x2c>
        __asm volatile
 8003356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335a:	f383 8811 	msr	BASEPRI, r3
 800335e:	f3bf 8f6f 	isb	sy
 8003362:	f3bf 8f4f 	dsb	sy
 8003366:	603b      	str	r3, [r7, #0]
    }
 8003368:	bf00      	nop
 800336a:	e7fe      	b.n	800336a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800336c:	f001 f99a 	bl	80046a4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003370:	4b3a      	ldr	r3, [pc, #232]	; (800345c <xTaskResumeAll+0x11c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	3b01      	subs	r3, #1
 8003376:	4a39      	ldr	r2, [pc, #228]	; (800345c <xTaskResumeAll+0x11c>)
 8003378:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800337a:	4b38      	ldr	r3, [pc, #224]	; (800345c <xTaskResumeAll+0x11c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d165      	bne.n	800344e <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003382:	4b37      	ldr	r3, [pc, #220]	; (8003460 <xTaskResumeAll+0x120>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d061      	beq.n	800344e <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800338a:	e032      	b.n	80033f2 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800338c:	4b35      	ldr	r3, [pc, #212]	; (8003464 <xTaskResumeAll+0x124>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	3318      	adds	r3, #24
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff f879 	bl	8002490 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	3304      	adds	r3, #4
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff f874 	bl	8002490 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f003 fa8c 	bl	80068c8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b4:	2201      	movs	r2, #1
 80033b6:	409a      	lsls	r2, r3
 80033b8:	4b2b      	ldr	r3, [pc, #172]	; (8003468 <xTaskResumeAll+0x128>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4313      	orrs	r3, r2
 80033be:	4a2a      	ldr	r2, [pc, #168]	; (8003468 <xTaskResumeAll+0x128>)
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c6:	4613      	mov	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4a27      	ldr	r2, [pc, #156]	; (800346c <xTaskResumeAll+0x12c>)
 80033d0:	441a      	add	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	3304      	adds	r3, #4
 80033d6:	4619      	mov	r1, r3
 80033d8:	4610      	mov	r0, r2
 80033da:	f7fe fffc 	bl	80023d6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e2:	4b23      	ldr	r3, [pc, #140]	; (8003470 <xTaskResumeAll+0x130>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d302      	bcc.n	80033f2 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80033ec:	4b21      	ldr	r3, [pc, #132]	; (8003474 <xTaskResumeAll+0x134>)
 80033ee:	2201      	movs	r2, #1
 80033f0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033f2:	4b1c      	ldr	r3, [pc, #112]	; (8003464 <xTaskResumeAll+0x124>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1c8      	bne.n	800338c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003400:	f000 fb5c 	bl	8003abc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003404:	4b1c      	ldr	r3, [pc, #112]	; (8003478 <xTaskResumeAll+0x138>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d010      	beq.n	8003432 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003410:	f000 f858 	bl	80034c4 <xTaskIncrementTick>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800341a:	4b16      	ldr	r3, [pc, #88]	; (8003474 <xTaskResumeAll+0x134>)
 800341c:	2201      	movs	r2, #1
 800341e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3b01      	subs	r3, #1
 8003424:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1f1      	bne.n	8003410 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800342c:	4b12      	ldr	r3, [pc, #72]	; (8003478 <xTaskResumeAll+0x138>)
 800342e:	2200      	movs	r2, #0
 8003430:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003432:	4b10      	ldr	r3, [pc, #64]	; (8003474 <xTaskResumeAll+0x134>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d009      	beq.n	800344e <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800343a:	2301      	movs	r3, #1
 800343c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800343e:	4b0f      	ldr	r3, [pc, #60]	; (800347c <xTaskResumeAll+0x13c>)
 8003440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	f3bf 8f4f 	dsb	sy
 800344a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800344e:	f001 f959 	bl	8004704 <vPortExitCritical>

    return xAlreadyYielded;
 8003452:	68bb      	ldr	r3, [r7, #8]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	200001bc 	.word	0x200001bc
 8003460:	20000194 	.word	0x20000194
 8003464:	20000154 	.word	0x20000154
 8003468:	2000019c 	.word	0x2000019c
 800346c:	200000c0 	.word	0x200000c0
 8003470:	200000bc 	.word	0x200000bc
 8003474:	200001a8 	.word	0x200001a8
 8003478:	200001a4 	.word	0x200001a4
 800347c:	e000ed04 	.word	0xe000ed04

08003480 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003486:	4b05      	ldr	r3, [pc, #20]	; (800349c <xTaskGetTickCount+0x1c>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800348c:	687b      	ldr	r3, [r7, #4]
}
 800348e:	4618      	mov	r0, r3
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	20000198 	.word	0x20000198

080034a0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80034a6:	f001 f9e9 	bl	800487c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80034aa:	2300      	movs	r3, #0
 80034ac:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80034ae:	4b04      	ldr	r3, [pc, #16]	; (80034c0 <xTaskGetTickCountFromISR+0x20>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80034b4:	683b      	ldr	r3, [r7, #0]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20000198 	.word	0x20000198

080034c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80034ca:	2300      	movs	r3, #0
 80034cc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034ce:	4b50      	ldr	r3, [pc, #320]	; (8003610 <xTaskIncrementTick+0x14c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f040 8092 	bne.w	80035fc <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80034d8:	4b4e      	ldr	r3, [pc, #312]	; (8003614 <xTaskIncrementTick+0x150>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3301      	adds	r3, #1
 80034de:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80034e0:	4a4c      	ldr	r2, [pc, #304]	; (8003614 <xTaskIncrementTick+0x150>)
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d120      	bne.n	800352e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80034ec:	4b4a      	ldr	r3, [pc, #296]	; (8003618 <xTaskIncrementTick+0x154>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <xTaskIncrementTick+0x48>
        __asm volatile
 80034f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fa:	f383 8811 	msr	BASEPRI, r3
 80034fe:	f3bf 8f6f 	isb	sy
 8003502:	f3bf 8f4f 	dsb	sy
 8003506:	603b      	str	r3, [r7, #0]
    }
 8003508:	bf00      	nop
 800350a:	e7fe      	b.n	800350a <xTaskIncrementTick+0x46>
 800350c:	4b42      	ldr	r3, [pc, #264]	; (8003618 <xTaskIncrementTick+0x154>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	4b42      	ldr	r3, [pc, #264]	; (800361c <xTaskIncrementTick+0x158>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a40      	ldr	r2, [pc, #256]	; (8003618 <xTaskIncrementTick+0x154>)
 8003518:	6013      	str	r3, [r2, #0]
 800351a:	4a40      	ldr	r2, [pc, #256]	; (800361c <xTaskIncrementTick+0x158>)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6013      	str	r3, [r2, #0]
 8003520:	4b3f      	ldr	r3, [pc, #252]	; (8003620 <xTaskIncrementTick+0x15c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	3301      	adds	r3, #1
 8003526:	4a3e      	ldr	r2, [pc, #248]	; (8003620 <xTaskIncrementTick+0x15c>)
 8003528:	6013      	str	r3, [r2, #0]
 800352a:	f000 fac7 	bl	8003abc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800352e:	4b3d      	ldr	r3, [pc, #244]	; (8003624 <xTaskIncrementTick+0x160>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	429a      	cmp	r2, r3
 8003536:	d34c      	bcc.n	80035d2 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003538:	4b37      	ldr	r3, [pc, #220]	; (8003618 <xTaskIncrementTick+0x154>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d104      	bne.n	800354c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003542:	4b38      	ldr	r3, [pc, #224]	; (8003624 <xTaskIncrementTick+0x160>)
 8003544:	f04f 32ff 	mov.w	r2, #4294967295
 8003548:	601a      	str	r2, [r3, #0]
                    break;
 800354a:	e042      	b.n	80035d2 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800354c:	4b32      	ldr	r3, [pc, #200]	; (8003618 <xTaskIncrementTick+0x154>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	429a      	cmp	r2, r3
 8003562:	d203      	bcs.n	800356c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003564:	4a2f      	ldr	r2, [pc, #188]	; (8003624 <xTaskIncrementTick+0x160>)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800356a:	e032      	b.n	80035d2 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	3304      	adds	r3, #4
 8003570:	4618      	mov	r0, r3
 8003572:	f7fe ff8d 	bl	8002490 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357a:	2b00      	cmp	r3, #0
 800357c:	d004      	beq.n	8003588 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	3318      	adds	r3, #24
 8003582:	4618      	mov	r0, r3
 8003584:	f7fe ff84 	bl	8002490 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4618      	mov	r0, r3
 800358c:	f003 f99c 	bl	80068c8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003594:	2201      	movs	r2, #1
 8003596:	409a      	lsls	r2, r3
 8003598:	4b23      	ldr	r3, [pc, #140]	; (8003628 <xTaskIncrementTick+0x164>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4313      	orrs	r3, r2
 800359e:	4a22      	ldr	r2, [pc, #136]	; (8003628 <xTaskIncrementTick+0x164>)
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a6:	4613      	mov	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4a1f      	ldr	r2, [pc, #124]	; (800362c <xTaskIncrementTick+0x168>)
 80035b0:	441a      	add	r2, r3
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	3304      	adds	r3, #4
 80035b6:	4619      	mov	r1, r3
 80035b8:	4610      	mov	r0, r2
 80035ba:	f7fe ff0c 	bl	80023d6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c2:	4b1b      	ldr	r3, [pc, #108]	; (8003630 <xTaskIncrementTick+0x16c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d3b5      	bcc.n	8003538 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80035cc:	2301      	movs	r3, #1
 80035ce:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035d0:	e7b2      	b.n	8003538 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80035d2:	4b17      	ldr	r3, [pc, #92]	; (8003630 <xTaskIncrementTick+0x16c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d8:	4914      	ldr	r1, [pc, #80]	; (800362c <xTaskIncrementTick+0x168>)
 80035da:	4613      	mov	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d901      	bls.n	80035ee <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80035ea:	2301      	movs	r3, #1
 80035ec:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80035ee:	4b11      	ldr	r3, [pc, #68]	; (8003634 <xTaskIncrementTick+0x170>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d007      	beq.n	8003606 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80035f6:	2301      	movs	r3, #1
 80035f8:	617b      	str	r3, [r7, #20]
 80035fa:	e004      	b.n	8003606 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80035fc:	4b0e      	ldr	r3, [pc, #56]	; (8003638 <xTaskIncrementTick+0x174>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	3301      	adds	r3, #1
 8003602:	4a0d      	ldr	r2, [pc, #52]	; (8003638 <xTaskIncrementTick+0x174>)
 8003604:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003606:	697b      	ldr	r3, [r7, #20]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3718      	adds	r7, #24
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	200001bc 	.word	0x200001bc
 8003614:	20000198 	.word	0x20000198
 8003618:	2000014c 	.word	0x2000014c
 800361c:	20000150 	.word	0x20000150
 8003620:	200001ac 	.word	0x200001ac
 8003624:	200001b4 	.word	0x200001b4
 8003628:	2000019c 	.word	0x2000019c
 800362c:	200000c0 	.word	0x200000c0
 8003630:	200000bc 	.word	0x200000bc
 8003634:	200001a8 	.word	0x200001a8
 8003638:	200001a4 	.word	0x200001a4

0800363c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003642:	4b2d      	ldr	r3, [pc, #180]	; (80036f8 <vTaskSwitchContext+0xbc>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800364a:	4b2c      	ldr	r3, [pc, #176]	; (80036fc <vTaskSwitchContext+0xc0>)
 800364c:	2201      	movs	r2, #1
 800364e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003650:	e04d      	b.n	80036ee <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003652:	4b2a      	ldr	r3, [pc, #168]	; (80036fc <vTaskSwitchContext+0xc0>)
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003658:	4b29      	ldr	r3, [pc, #164]	; (8003700 <vTaskSwitchContext+0xc4>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	fab3 f383 	clz	r3, r3
 8003664:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003666:	7afb      	ldrb	r3, [r7, #11]
 8003668:	f1c3 031f 	rsb	r3, r3, #31
 800366c:	617b      	str	r3, [r7, #20]
 800366e:	4925      	ldr	r1, [pc, #148]	; (8003704 <vTaskSwitchContext+0xc8>)
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	4613      	mov	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4413      	add	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	440b      	add	r3, r1
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10a      	bne.n	8003698 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003686:	f383 8811 	msr	BASEPRI, r3
 800368a:	f3bf 8f6f 	isb	sy
 800368e:	f3bf 8f4f 	dsb	sy
 8003692:	607b      	str	r3, [r7, #4]
    }
 8003694:	bf00      	nop
 8003696:	e7fe      	b.n	8003696 <vTaskSwitchContext+0x5a>
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	4613      	mov	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4413      	add	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4a18      	ldr	r2, [pc, #96]	; (8003704 <vTaskSwitchContext+0xc8>)
 80036a4:	4413      	add	r3, r2
 80036a6:	613b      	str	r3, [r7, #16]
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	605a      	str	r2, [r3, #4]
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	3308      	adds	r3, #8
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d104      	bne.n	80036c8 <vTaskSwitchContext+0x8c>
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	605a      	str	r2, [r3, #4]
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	4a0e      	ldr	r2, [pc, #56]	; (8003708 <vTaskSwitchContext+0xcc>)
 80036d0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80036d2:	4b0d      	ldr	r3, [pc, #52]	; (8003708 <vTaskSwitchContext+0xcc>)
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	4b0d      	ldr	r3, [pc, #52]	; (800370c <vTaskSwitchContext+0xd0>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d102      	bne.n	80036e4 <vTaskSwitchContext+0xa8>
 80036de:	f003 f853 	bl	8006788 <SEGGER_SYSVIEW_OnIdle>
}
 80036e2:	e004      	b.n	80036ee <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80036e4:	4b08      	ldr	r3, [pc, #32]	; (8003708 <vTaskSwitchContext+0xcc>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f003 f8ab 	bl	8006844 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80036ee:	bf00      	nop
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	200001bc 	.word	0x200001bc
 80036fc:	200001a8 	.word	0x200001a8
 8003700:	2000019c 	.word	0x2000019c
 8003704:	200000c0 	.word	0x200000c0
 8003708:	200000bc 	.word	0x200000bc
 800370c:	200001b8 	.word	0x200001b8

08003710 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10a      	bne.n	8003736 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003724:	f383 8811 	msr	BASEPRI, r3
 8003728:	f3bf 8f6f 	isb	sy
 800372c:	f3bf 8f4f 	dsb	sy
 8003730:	60fb      	str	r3, [r7, #12]
    }
 8003732:	bf00      	nop
 8003734:	e7fe      	b.n	8003734 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003736:	4b07      	ldr	r3, [pc, #28]	; (8003754 <vTaskPlaceOnEventList+0x44>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	3318      	adds	r3, #24
 800373c:	4619      	mov	r1, r3
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7fe fe6d 	bl	800241e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003744:	2101      	movs	r1, #1
 8003746:	6838      	ldr	r0, [r7, #0]
 8003748:	f000 fa72 	bl	8003c30 <prvAddCurrentTaskToDelayedList>
}
 800374c:	bf00      	nop
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	200000bc 	.word	0x200000bc

08003758 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10a      	bne.n	8003780 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800376a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376e:	f383 8811 	msr	BASEPRI, r3
 8003772:	f3bf 8f6f 	isb	sy
 8003776:	f3bf 8f4f 	dsb	sy
 800377a:	617b      	str	r3, [r7, #20]
    }
 800377c:	bf00      	nop
 800377e:	e7fe      	b.n	800377e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003780:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <vTaskPlaceOnEventListRestricted+0x58>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	3318      	adds	r3, #24
 8003786:	4619      	mov	r1, r3
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f7fe fe24 	bl	80023d6 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d002      	beq.n	800379a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003794:	f04f 33ff 	mov.w	r3, #4294967295
 8003798:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800379a:	2024      	movs	r0, #36	; 0x24
 800379c:	f002 faf6 	bl	8005d8c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80037a0:	6879      	ldr	r1, [r7, #4]
 80037a2:	68b8      	ldr	r0, [r7, #8]
 80037a4:	f000 fa44 	bl	8003c30 <prvAddCurrentTaskToDelayedList>
    }
 80037a8:	bf00      	nop
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	200000bc 	.word	0x200000bc

080037b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10a      	bne.n	80037e0 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80037ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ce:	f383 8811 	msr	BASEPRI, r3
 80037d2:	f3bf 8f6f 	isb	sy
 80037d6:	f3bf 8f4f 	dsb	sy
 80037da:	60fb      	str	r3, [r7, #12]
    }
 80037dc:	bf00      	nop
 80037de:	e7fe      	b.n	80037de <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	3318      	adds	r3, #24
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fe fe53 	bl	8002490 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037ea:	4b1f      	ldr	r3, [pc, #124]	; (8003868 <xTaskRemoveFromEventList+0xb4>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d120      	bne.n	8003834 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	3304      	adds	r3, #4
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fe fe4a 	bl	8002490 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	4618      	mov	r0, r3
 8003800:	f003 f862 	bl	80068c8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003808:	2201      	movs	r2, #1
 800380a:	409a      	lsls	r2, r3
 800380c:	4b17      	ldr	r3, [pc, #92]	; (800386c <xTaskRemoveFromEventList+0xb8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4313      	orrs	r3, r2
 8003812:	4a16      	ldr	r2, [pc, #88]	; (800386c <xTaskRemoveFromEventList+0xb8>)
 8003814:	6013      	str	r3, [r2, #0]
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800381a:	4613      	mov	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	4413      	add	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4a13      	ldr	r2, [pc, #76]	; (8003870 <xTaskRemoveFromEventList+0xbc>)
 8003824:	441a      	add	r2, r3
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	3304      	adds	r3, #4
 800382a:	4619      	mov	r1, r3
 800382c:	4610      	mov	r0, r2
 800382e:	f7fe fdd2 	bl	80023d6 <vListInsertEnd>
 8003832:	e005      	b.n	8003840 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	3318      	adds	r3, #24
 8003838:	4619      	mov	r1, r3
 800383a:	480e      	ldr	r0, [pc, #56]	; (8003874 <xTaskRemoveFromEventList+0xc0>)
 800383c:	f7fe fdcb 	bl	80023d6 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003844:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <xTaskRemoveFromEventList+0xc4>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384a:	429a      	cmp	r2, r3
 800384c:	d905      	bls.n	800385a <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800384e:	2301      	movs	r3, #1
 8003850:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003852:	4b0a      	ldr	r3, [pc, #40]	; (800387c <xTaskRemoveFromEventList+0xc8>)
 8003854:	2201      	movs	r2, #1
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	e001      	b.n	800385e <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 800385a:	2300      	movs	r3, #0
 800385c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800385e:	697b      	ldr	r3, [r7, #20]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3718      	adds	r7, #24
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	200001bc 	.word	0x200001bc
 800386c:	2000019c 	.word	0x2000019c
 8003870:	200000c0 	.word	0x200000c0
 8003874:	20000154 	.word	0x20000154
 8003878:	200000bc 	.word	0x200000bc
 800387c:	200001a8 	.word	0x200001a8

08003880 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003888:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <vTaskInternalSetTimeOutState+0x24>)
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003890:	4b05      	ldr	r3, [pc, #20]	; (80038a8 <vTaskInternalSetTimeOutState+0x28>)
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	605a      	str	r2, [r3, #4]
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	200001ac 	.word	0x200001ac
 80038a8:	20000198 	.word	0x20000198

080038ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b088      	sub	sp, #32
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10a      	bne.n	80038d2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80038bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c0:	f383 8811 	msr	BASEPRI, r3
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	f3bf 8f4f 	dsb	sy
 80038cc:	613b      	str	r3, [r7, #16]
    }
 80038ce:	bf00      	nop
 80038d0:	e7fe      	b.n	80038d0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10a      	bne.n	80038ee <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80038d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038dc:	f383 8811 	msr	BASEPRI, r3
 80038e0:	f3bf 8f6f 	isb	sy
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	60fb      	str	r3, [r7, #12]
    }
 80038ea:	bf00      	nop
 80038ec:	e7fe      	b.n	80038ec <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80038ee:	f000 fed9 	bl	80046a4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80038f2:	4b1f      	ldr	r3, [pc, #124]	; (8003970 <xTaskCheckForTimeOut+0xc4>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390a:	d102      	bne.n	8003912 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800390c:	2300      	movs	r3, #0
 800390e:	61fb      	str	r3, [r7, #28]
 8003910:	e026      	b.n	8003960 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	4b17      	ldr	r3, [pc, #92]	; (8003974 <xTaskCheckForTimeOut+0xc8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	429a      	cmp	r2, r3
 800391c:	d00a      	beq.n	8003934 <xTaskCheckForTimeOut+0x88>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	429a      	cmp	r2, r3
 8003926:	d305      	bcc.n	8003934 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003928:	2301      	movs	r3, #1
 800392a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	e015      	b.n	8003960 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	429a      	cmp	r2, r3
 800393c:	d20b      	bcs.n	8003956 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	1ad2      	subs	r2, r2, r3
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7ff ff98 	bl	8003880 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003950:	2300      	movs	r3, #0
 8003952:	61fb      	str	r3, [r7, #28]
 8003954:	e004      	b.n	8003960 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2200      	movs	r2, #0
 800395a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800395c:	2301      	movs	r3, #1
 800395e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003960:	f000 fed0 	bl	8004704 <vPortExitCritical>

    return xReturn;
 8003964:	69fb      	ldr	r3, [r7, #28]
}
 8003966:	4618      	mov	r0, r3
 8003968:	3720      	adds	r7, #32
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	20000198 	.word	0x20000198
 8003974:	200001ac 	.word	0x200001ac

08003978 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800397c:	4b03      	ldr	r3, [pc, #12]	; (800398c <vTaskMissedYield+0x14>)
 800397e:	2201      	movs	r2, #1
 8003980:	601a      	str	r2, [r3, #0]
}
 8003982:	bf00      	nop
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	200001a8 	.word	0x200001a8

08003990 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003998:	f000 f852 	bl	8003a40 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800399c:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <prvIdleTask+0x28>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d9f9      	bls.n	8003998 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80039a4:	4b05      	ldr	r3, [pc, #20]	; (80039bc <prvIdleTask+0x2c>)
 80039a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80039b4:	e7f0      	b.n	8003998 <prvIdleTask+0x8>
 80039b6:	bf00      	nop
 80039b8:	200000c0 	.word	0x200000c0
 80039bc:	e000ed04 	.word	0xe000ed04

080039c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039c6:	2300      	movs	r3, #0
 80039c8:	607b      	str	r3, [r7, #4]
 80039ca:	e00c      	b.n	80039e6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	4613      	mov	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4a12      	ldr	r2, [pc, #72]	; (8003a20 <prvInitialiseTaskLists+0x60>)
 80039d8:	4413      	add	r3, r2
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fe fcce 	bl	800237c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3301      	adds	r3, #1
 80039e4:	607b      	str	r3, [r7, #4]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b04      	cmp	r3, #4
 80039ea:	d9ef      	bls.n	80039cc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80039ec:	480d      	ldr	r0, [pc, #52]	; (8003a24 <prvInitialiseTaskLists+0x64>)
 80039ee:	f7fe fcc5 	bl	800237c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80039f2:	480d      	ldr	r0, [pc, #52]	; (8003a28 <prvInitialiseTaskLists+0x68>)
 80039f4:	f7fe fcc2 	bl	800237c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80039f8:	480c      	ldr	r0, [pc, #48]	; (8003a2c <prvInitialiseTaskLists+0x6c>)
 80039fa:	f7fe fcbf 	bl	800237c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80039fe:	480c      	ldr	r0, [pc, #48]	; (8003a30 <prvInitialiseTaskLists+0x70>)
 8003a00:	f7fe fcbc 	bl	800237c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003a04:	480b      	ldr	r0, [pc, #44]	; (8003a34 <prvInitialiseTaskLists+0x74>)
 8003a06:	f7fe fcb9 	bl	800237c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003a0a:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <prvInitialiseTaskLists+0x78>)
 8003a0c:	4a05      	ldr	r2, [pc, #20]	; (8003a24 <prvInitialiseTaskLists+0x64>)
 8003a0e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a10:	4b0a      	ldr	r3, [pc, #40]	; (8003a3c <prvInitialiseTaskLists+0x7c>)
 8003a12:	4a05      	ldr	r2, [pc, #20]	; (8003a28 <prvInitialiseTaskLists+0x68>)
 8003a14:	601a      	str	r2, [r3, #0]
}
 8003a16:	bf00      	nop
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	200000c0 	.word	0x200000c0
 8003a24:	20000124 	.word	0x20000124
 8003a28:	20000138 	.word	0x20000138
 8003a2c:	20000154 	.word	0x20000154
 8003a30:	20000168 	.word	0x20000168
 8003a34:	20000180 	.word	0x20000180
 8003a38:	2000014c 	.word	0x2000014c
 8003a3c:	20000150 	.word	0x20000150

08003a40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a46:	e019      	b.n	8003a7c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003a48:	f000 fe2c 	bl	80046a4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a4c:	4b10      	ldr	r3, [pc, #64]	; (8003a90 <prvCheckTasksWaitingTermination+0x50>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3304      	adds	r3, #4
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7fe fd19 	bl	8002490 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003a5e:	4b0d      	ldr	r3, [pc, #52]	; (8003a94 <prvCheckTasksWaitingTermination+0x54>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	4a0b      	ldr	r2, [pc, #44]	; (8003a94 <prvCheckTasksWaitingTermination+0x54>)
 8003a66:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003a68:	4b0b      	ldr	r3, [pc, #44]	; (8003a98 <prvCheckTasksWaitingTermination+0x58>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	4a0a      	ldr	r2, [pc, #40]	; (8003a98 <prvCheckTasksWaitingTermination+0x58>)
 8003a70:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003a72:	f000 fe47 	bl	8004704 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f810 	bl	8003a9c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a7c:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <prvCheckTasksWaitingTermination+0x58>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1e1      	bne.n	8003a48 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003a84:	bf00      	nop
 8003a86:	bf00      	nop
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	20000168 	.word	0x20000168
 8003a94:	20000194 	.word	0x20000194
 8003a98:	2000017c 	.word	0x2000017c

08003a9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f001 f807 	bl	8004abc <vPortFree>
                vPortFree( pxTCB );
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f001 f804 	bl	8004abc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003ab4:	bf00      	nop
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ac0:	4b0a      	ldr	r3, [pc, #40]	; (8003aec <prvResetNextTaskUnblockTime+0x30>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d104      	bne.n	8003ad4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003aca:	4b09      	ldr	r3, [pc, #36]	; (8003af0 <prvResetNextTaskUnblockTime+0x34>)
 8003acc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ad0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003ad2:	e005      	b.n	8003ae0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003ad4:	4b05      	ldr	r3, [pc, #20]	; (8003aec <prvResetNextTaskUnblockTime+0x30>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a04      	ldr	r2, [pc, #16]	; (8003af0 <prvResetNextTaskUnblockTime+0x34>)
 8003ade:	6013      	str	r3, [r2, #0]
}
 8003ae0:	bf00      	nop
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	2000014c 	.word	0x2000014c
 8003af0:	200001b4 	.word	0x200001b4

08003af4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003afa:	4b0b      	ldr	r3, [pc, #44]	; (8003b28 <xTaskGetSchedulerState+0x34>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d102      	bne.n	8003b08 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003b02:	2301      	movs	r3, #1
 8003b04:	607b      	str	r3, [r7, #4]
 8003b06:	e008      	b.n	8003b1a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b08:	4b08      	ldr	r3, [pc, #32]	; (8003b2c <xTaskGetSchedulerState+0x38>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d102      	bne.n	8003b16 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003b10:	2302      	movs	r3, #2
 8003b12:	607b      	str	r3, [r7, #4]
 8003b14:	e001      	b.n	8003b1a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003b16:	2300      	movs	r3, #0
 8003b18:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003b1a:	687b      	ldr	r3, [r7, #4]
    }
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	200001a0 	.word	0x200001a0
 8003b2c:	200001bc 	.word	0x200001bc

08003b30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d068      	beq.n	8003c18 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003b46:	4b37      	ldr	r3, [pc, #220]	; (8003c24 <xTaskPriorityDisinherit+0xf4>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d00a      	beq.n	8003b66 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b54:	f383 8811 	msr	BASEPRI, r3
 8003b58:	f3bf 8f6f 	isb	sy
 8003b5c:	f3bf 8f4f 	dsb	sy
 8003b60:	60fb      	str	r3, [r7, #12]
    }
 8003b62:	bf00      	nop
 8003b64:	e7fe      	b.n	8003b64 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10a      	bne.n	8003b84 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b72:	f383 8811 	msr	BASEPRI, r3
 8003b76:	f3bf 8f6f 	isb	sy
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	60bb      	str	r3, [r7, #8]
    }
 8003b80:	bf00      	nop
 8003b82:	e7fe      	b.n	8003b82 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b88:	1e5a      	subs	r2, r3, #1
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d03e      	beq.n	8003c18 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d13a      	bne.n	8003c18 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fe fc72 	bl	8002490 <uxListRemove>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10a      	bne.n	8003bc8 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	43da      	mvns	r2, r3
 8003bbe:	4b1a      	ldr	r3, [pc, #104]	; (8003c28 <xTaskPriorityDisinherit+0xf8>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	4a18      	ldr	r2, [pc, #96]	; (8003c28 <xTaskPriorityDisinherit+0xf8>)
 8003bc6:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4619      	mov	r1, r3
 8003bcc:	204a      	movs	r0, #74	; 0x4a
 8003bce:	f002 f8fb 	bl	8005dc8 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bde:	f1c3 0205 	rsb	r2, r3, #5
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bea:	2201      	movs	r2, #1
 8003bec:	409a      	lsls	r2, r3
 8003bee:	4b0e      	ldr	r3, [pc, #56]	; (8003c28 <xTaskPriorityDisinherit+0xf8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	4a0c      	ldr	r2, [pc, #48]	; (8003c28 <xTaskPriorityDisinherit+0xf8>)
 8003bf6:	6013      	str	r3, [r2, #0]
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4a09      	ldr	r2, [pc, #36]	; (8003c2c <xTaskPriorityDisinherit+0xfc>)
 8003c06:	441a      	add	r2, r3
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4610      	mov	r0, r2
 8003c10:	f7fe fbe1 	bl	80023d6 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003c14:	2301      	movs	r3, #1
 8003c16:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003c18:	697b      	ldr	r3, [r7, #20]
    }
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3718      	adds	r7, #24
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	200000bc 	.word	0x200000bc
 8003c28:	2000019c 	.word	0x2000019c
 8003c2c:	200000c0 	.word	0x200000c0

08003c30 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003c3a:	4b32      	ldr	r3, [pc, #200]	; (8003d04 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c40:	4b31      	ldr	r3, [pc, #196]	; (8003d08 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	3304      	adds	r3, #4
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fe fc22 	bl	8002490 <uxListRemove>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10b      	bne.n	8003c6a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003c52:	4b2d      	ldr	r3, [pc, #180]	; (8003d08 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c58:	2201      	movs	r2, #1
 8003c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5e:	43da      	mvns	r2, r3
 8003c60:	4b2a      	ldr	r3, [pc, #168]	; (8003d0c <prvAddCurrentTaskToDelayedList+0xdc>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4013      	ands	r3, r2
 8003c66:	4a29      	ldr	r2, [pc, #164]	; (8003d0c <prvAddCurrentTaskToDelayedList+0xdc>)
 8003c68:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c70:	d110      	bne.n	8003c94 <prvAddCurrentTaskToDelayedList+0x64>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00d      	beq.n	8003c94 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003c78:	4b23      	ldr	r3, [pc, #140]	; (8003d08 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	211b      	movs	r1, #27
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f002 fe64 	bl	800694c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c84:	4b20      	ldr	r3, [pc, #128]	; (8003d08 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3304      	adds	r3, #4
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	4820      	ldr	r0, [pc, #128]	; (8003d10 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003c8e:	f7fe fba2 	bl	80023d6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003c92:	e032      	b.n	8003cfa <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4413      	add	r3, r2
 8003c9a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c9c:	4b1a      	ldr	r3, [pc, #104]	; (8003d08 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d20f      	bcs.n	8003ccc <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003cac:	4b16      	ldr	r3, [pc, #88]	; (8003d08 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2104      	movs	r1, #4
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f002 fe4a 	bl	800694c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cb8:	4b16      	ldr	r3, [pc, #88]	; (8003d14 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	4b12      	ldr	r3, [pc, #72]	; (8003d08 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	f7fe fbaa 	bl	800241e <vListInsert>
}
 8003cca:	e016      	b.n	8003cfa <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003ccc:	4b0e      	ldr	r3, [pc, #56]	; (8003d08 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2104      	movs	r1, #4
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f002 fe3a 	bl	800694c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cd8:	4b0f      	ldr	r3, [pc, #60]	; (8003d18 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	4b0a      	ldr	r3, [pc, #40]	; (8003d08 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	f7fe fb9a 	bl	800241e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003cea:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <prvAddCurrentTaskToDelayedList+0xec>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d202      	bcs.n	8003cfa <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003cf4:	4a09      	ldr	r2, [pc, #36]	; (8003d1c <prvAddCurrentTaskToDelayedList+0xec>)
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	6013      	str	r3, [r2, #0]
}
 8003cfa:	bf00      	nop
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	20000198 	.word	0x20000198
 8003d08:	200000bc 	.word	0x200000bc
 8003d0c:	2000019c 	.word	0x2000019c
 8003d10:	20000180 	.word	0x20000180
 8003d14:	20000150 	.word	0x20000150
 8003d18:	2000014c 	.word	0x2000014c
 8003d1c:	200001b4 	.word	0x200001b4

08003d20 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003d26:	2300      	movs	r3, #0
 8003d28:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003d2a:	f000 fad5 	bl	80042d8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003d2e:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <xTimerCreateTimerTask+0x54>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00b      	beq.n	8003d4e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003d36:	4b10      	ldr	r3, [pc, #64]	; (8003d78 <xTimerCreateTimerTask+0x58>)
 8003d38:	9301      	str	r3, [sp, #4]
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	2300      	movs	r3, #0
 8003d40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d44:	490d      	ldr	r1, [pc, #52]	; (8003d7c <xTimerCreateTimerTask+0x5c>)
 8003d46:	480e      	ldr	r0, [pc, #56]	; (8003d80 <xTimerCreateTimerTask+0x60>)
 8003d48:	f7ff f926 	bl	8002f98 <xTaskCreate>
 8003d4c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10a      	bne.n	8003d6a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d58:	f383 8811 	msr	BASEPRI, r3
 8003d5c:	f3bf 8f6f 	isb	sy
 8003d60:	f3bf 8f4f 	dsb	sy
 8003d64:	603b      	str	r3, [r7, #0]
    }
 8003d66:	bf00      	nop
 8003d68:	e7fe      	b.n	8003d68 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003d6a:	687b      	ldr	r3, [r7, #4]
    }
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	200001f0 	.word	0x200001f0
 8003d78:	200001f4 	.word	0x200001f4
 8003d7c:	08007038 	.word	0x08007038
 8003d80:	08003eb9 	.word	0x08003eb9

08003d84 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b08a      	sub	sp, #40	; 0x28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
 8003d90:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003d92:	2300      	movs	r3, #0
 8003d94:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10a      	bne.n	8003db2 <xTimerGenericCommand+0x2e>
        __asm volatile
 8003d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da0:	f383 8811 	msr	BASEPRI, r3
 8003da4:	f3bf 8f6f 	isb	sy
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	623b      	str	r3, [r7, #32]
    }
 8003dae:	bf00      	nop
 8003db0:	e7fe      	b.n	8003db0 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003db2:	4b1a      	ldr	r3, [pc, #104]	; (8003e1c <xTimerGenericCommand+0x98>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d02a      	beq.n	8003e10 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	2b05      	cmp	r3, #5
 8003dca:	dc18      	bgt.n	8003dfe <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003dcc:	f7ff fe92 	bl	8003af4 <xTaskGetSchedulerState>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d109      	bne.n	8003dea <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003dd6:	4b11      	ldr	r3, [pc, #68]	; (8003e1c <xTimerGenericCommand+0x98>)
 8003dd8:	6818      	ldr	r0, [r3, #0]
 8003dda:	f107 0114 	add.w	r1, r7, #20
 8003dde:	2300      	movs	r3, #0
 8003de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003de2:	f7fe fc6f 	bl	80026c4 <xQueueGenericSend>
 8003de6:	6278      	str	r0, [r7, #36]	; 0x24
 8003de8:	e012      	b.n	8003e10 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003dea:	4b0c      	ldr	r3, [pc, #48]	; (8003e1c <xTimerGenericCommand+0x98>)
 8003dec:	6818      	ldr	r0, [r3, #0]
 8003dee:	f107 0114 	add.w	r1, r7, #20
 8003df2:	2300      	movs	r3, #0
 8003df4:	2200      	movs	r2, #0
 8003df6:	f7fe fc65 	bl	80026c4 <xQueueGenericSend>
 8003dfa:	6278      	str	r0, [r7, #36]	; 0x24
 8003dfc:	e008      	b.n	8003e10 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003dfe:	4b07      	ldr	r3, [pc, #28]	; (8003e1c <xTimerGenericCommand+0x98>)
 8003e00:	6818      	ldr	r0, [r3, #0]
 8003e02:	f107 0114 	add.w	r1, r7, #20
 8003e06:	2300      	movs	r3, #0
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	f7fe fd81 	bl	8002910 <xQueueGenericSendFromISR>
 8003e0e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003e12:	4618      	mov	r0, r3
 8003e14:	3728      	adds	r7, #40	; 0x28
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	200001f0 	.word	0x200001f0

08003e20 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af02      	add	r7, sp, #8
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e2a:	4b22      	ldr	r3, [pc, #136]	; (8003eb4 <prvProcessExpiredTimer+0x94>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	3304      	adds	r3, #4
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7fe fb29 	bl	8002490 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d022      	beq.n	8003e92 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	699a      	ldr	r2, [r3, #24]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	18d1      	adds	r1, r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	6978      	ldr	r0, [r7, #20]
 8003e5a:	f000 f8d1 	bl	8004000 <prvInsertTimerInActiveList>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d01f      	beq.n	8003ea4 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003e64:	2300      	movs	r3, #0
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	2300      	movs	r3, #0
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	6978      	ldr	r0, [r7, #20]
 8003e70:	f7ff ff88 	bl	8003d84 <xTimerGenericCommand>
 8003e74:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d113      	bne.n	8003ea4 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e80:	f383 8811 	msr	BASEPRI, r3
 8003e84:	f3bf 8f6f 	isb	sy
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	60fb      	str	r3, [r7, #12]
    }
 8003e8e:	bf00      	nop
 8003e90:	e7fe      	b.n	8003e90 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e98:	f023 0301 	bic.w	r3, r3, #1
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	6978      	ldr	r0, [r7, #20]
 8003eaa:	4798      	blx	r3
    }
 8003eac:	bf00      	nop
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	200001e8 	.word	0x200001e8

08003eb8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ec0:	f107 0308 	add.w	r3, r7, #8
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 f857 	bl	8003f78 <prvGetNextExpireTime>
 8003eca:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	4619      	mov	r1, r3
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 f803 	bl	8003edc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003ed6:	f000 f8d5 	bl	8004084 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003eda:	e7f1      	b.n	8003ec0 <prvTimerTask+0x8>

08003edc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003ee6:	f7ff fa1d 	bl	8003324 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003eea:	f107 0308 	add.w	r3, r7, #8
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 f866 	bl	8003fc0 <prvSampleTimeNow>
 8003ef4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d130      	bne.n	8003f5e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10a      	bne.n	8003f18 <prvProcessTimerOrBlockTask+0x3c>
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d806      	bhi.n	8003f18 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003f0a:	f7ff fa19 	bl	8003340 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003f0e:	68f9      	ldr	r1, [r7, #12]
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff ff85 	bl	8003e20 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003f16:	e024      	b.n	8003f62 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d008      	beq.n	8003f30 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003f1e:	4b13      	ldr	r3, [pc, #76]	; (8003f6c <prvProcessTimerOrBlockTask+0x90>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <prvProcessTimerOrBlockTask+0x50>
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e000      	b.n	8003f2e <prvProcessTimerOrBlockTask+0x52>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003f30:	4b0f      	ldr	r3, [pc, #60]	; (8003f70 <prvProcessTimerOrBlockTask+0x94>)
 8003f32:	6818      	ldr	r0, [r3, #0]
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	f7fe fff7 	bl	8002f30 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003f42:	f7ff f9fd 	bl	8003340 <xTaskResumeAll>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10a      	bne.n	8003f62 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003f4c:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <prvProcessTimerOrBlockTask+0x98>)
 8003f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	f3bf 8f4f 	dsb	sy
 8003f58:	f3bf 8f6f 	isb	sy
    }
 8003f5c:	e001      	b.n	8003f62 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003f5e:	f7ff f9ef 	bl	8003340 <xTaskResumeAll>
    }
 8003f62:	bf00      	nop
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	200001ec 	.word	0x200001ec
 8003f70:	200001f0 	.word	0x200001f0
 8003f74:	e000ed04 	.word	0xe000ed04

08003f78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003f80:	4b0e      	ldr	r3, [pc, #56]	; (8003fbc <prvGetNextExpireTime+0x44>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <prvGetNextExpireTime+0x16>
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	e000      	b.n	8003f90 <prvGetNextExpireTime+0x18>
 8003f8e:	2200      	movs	r2, #0
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d105      	bne.n	8003fa8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f9c:	4b07      	ldr	r3, [pc, #28]	; (8003fbc <prvGetNextExpireTime+0x44>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	e001      	b.n	8003fac <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003fac:	68fb      	ldr	r3, [r7, #12]
    }
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	200001e8 	.word	0x200001e8

08003fc0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003fc8:	f7ff fa5a 	bl	8003480 <xTaskGetTickCount>
 8003fcc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003fce:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <prvSampleTimeNow+0x3c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d205      	bcs.n	8003fe4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003fd8:	f000 f91a 	bl	8004210 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	e002      	b.n	8003fea <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003fea:	4a04      	ldr	r2, [pc, #16]	; (8003ffc <prvSampleTimeNow+0x3c>)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
    }
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	200001f8 	.word	0x200001f8

08004000 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
 800400c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800400e:	2300      	movs	r3, #0
 8004010:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	429a      	cmp	r2, r3
 8004024:	d812      	bhi.n	800404c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	1ad2      	subs	r2, r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	429a      	cmp	r2, r3
 8004032:	d302      	bcc.n	800403a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004034:	2301      	movs	r3, #1
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	e01b      	b.n	8004072 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800403a:	4b10      	ldr	r3, [pc, #64]	; (800407c <prvInsertTimerInActiveList+0x7c>)
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	3304      	adds	r3, #4
 8004042:	4619      	mov	r1, r3
 8004044:	4610      	mov	r0, r2
 8004046:	f7fe f9ea 	bl	800241e <vListInsert>
 800404a:	e012      	b.n	8004072 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	429a      	cmp	r2, r3
 8004052:	d206      	bcs.n	8004062 <prvInsertTimerInActiveList+0x62>
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	429a      	cmp	r2, r3
 800405a:	d302      	bcc.n	8004062 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800405c:	2301      	movs	r3, #1
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	e007      	b.n	8004072 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004062:	4b07      	ldr	r3, [pc, #28]	; (8004080 <prvInsertTimerInActiveList+0x80>)
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	3304      	adds	r3, #4
 800406a:	4619      	mov	r1, r3
 800406c:	4610      	mov	r0, r2
 800406e:	f7fe f9d6 	bl	800241e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004072:	697b      	ldr	r3, [r7, #20]
    }
 8004074:	4618      	mov	r0, r3
 8004076:	3718      	adds	r7, #24
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	200001ec 	.word	0x200001ec
 8004080:	200001e8 	.word	0x200001e8

08004084 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004084:	b580      	push	{r7, lr}
 8004086:	b08c      	sub	sp, #48	; 0x30
 8004088:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800408a:	e0ae      	b.n	80041ea <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2b00      	cmp	r3, #0
 8004090:	f2c0 80aa 	blt.w	80041e8 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d004      	beq.n	80040aa <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a2:	3304      	adds	r3, #4
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fe f9f3 	bl	8002490 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040aa:	1d3b      	adds	r3, r7, #4
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7ff ff87 	bl	8003fc0 <prvSampleTimeNow>
 80040b2:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2b09      	cmp	r3, #9
 80040b8:	f200 8097 	bhi.w	80041ea <prvProcessReceivedCommands+0x166>
 80040bc:	a201      	add	r2, pc, #4	; (adr r2, 80040c4 <prvProcessReceivedCommands+0x40>)
 80040be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c2:	bf00      	nop
 80040c4:	080040ed 	.word	0x080040ed
 80040c8:	080040ed 	.word	0x080040ed
 80040cc:	080040ed 	.word	0x080040ed
 80040d0:	08004161 	.word	0x08004161
 80040d4:	08004175 	.word	0x08004175
 80040d8:	080041bf 	.word	0x080041bf
 80040dc:	080040ed 	.word	0x080040ed
 80040e0:	080040ed 	.word	0x080040ed
 80040e4:	08004161 	.word	0x08004161
 80040e8:	08004175 	.word	0x08004175
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040f2:	f043 0301 	orr.w	r3, r3, #1
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	18d1      	adds	r1, r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6a3a      	ldr	r2, [r7, #32]
 800410a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800410c:	f7ff ff78 	bl	8004000 <prvInsertTimerInActiveList>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d069      	beq.n	80041ea <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800411c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004120:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	d05e      	beq.n	80041ea <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	441a      	add	r2, r3
 8004134:	2300      	movs	r3, #0
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	2300      	movs	r3, #0
 800413a:	2100      	movs	r1, #0
 800413c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800413e:	f7ff fe21 	bl	8003d84 <xTimerGenericCommand>
 8004142:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d14f      	bne.n	80041ea <prvProcessReceivedCommands+0x166>
        __asm volatile
 800414a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414e:	f383 8811 	msr	BASEPRI, r3
 8004152:	f3bf 8f6f 	isb	sy
 8004156:	f3bf 8f4f 	dsb	sy
 800415a:	61bb      	str	r3, [r7, #24]
    }
 800415c:	bf00      	nop
 800415e:	e7fe      	b.n	800415e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004162:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004166:	f023 0301 	bic.w	r3, r3, #1
 800416a:	b2da      	uxtb	r2, r3
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004172:	e03a      	b.n	80041ea <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004176:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800417a:	f043 0301 	orr.w	r3, r3, #1
 800417e:	b2da      	uxtb	r2, r3
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10a      	bne.n	80041aa <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004198:	f383 8811 	msr	BASEPRI, r3
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	f3bf 8f4f 	dsb	sy
 80041a4:	617b      	str	r3, [r7, #20]
    }
 80041a6:	bf00      	nop
 80041a8:	e7fe      	b.n	80041a8 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	699a      	ldr	r2, [r3, #24]
 80041ae:	6a3b      	ldr	r3, [r7, #32]
 80041b0:	18d1      	adds	r1, r2, r3
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	6a3a      	ldr	r2, [r7, #32]
 80041b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041b8:	f7ff ff22 	bl	8004000 <prvInsertTimerInActiveList>
                        break;
 80041bc:	e015      	b.n	80041ea <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d103      	bne.n	80041d4 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80041cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041ce:	f000 fc75 	bl	8004abc <vPortFree>
 80041d2:	e00a      	b.n	80041ea <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041da:	f023 0301 	bic.w	r3, r3, #1
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80041e6:	e000      	b.n	80041ea <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80041e8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80041ea:	4b08      	ldr	r3, [pc, #32]	; (800420c <prvProcessReceivedCommands+0x188>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f107 0108 	add.w	r1, r7, #8
 80041f2:	2200      	movs	r2, #0
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fe fc49 	bl	8002a8c <xQueueReceive>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f47f af45 	bne.w	800408c <prvProcessReceivedCommands+0x8>
        }
    }
 8004202:	bf00      	nop
 8004204:	bf00      	nop
 8004206:	3728      	adds	r7, #40	; 0x28
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	200001f0 	.word	0x200001f0

08004210 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004210:	b580      	push	{r7, lr}
 8004212:	b088      	sub	sp, #32
 8004214:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004216:	e048      	b.n	80042aa <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004218:	4b2d      	ldr	r3, [pc, #180]	; (80042d0 <prvSwitchTimerLists+0xc0>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004222:	4b2b      	ldr	r3, [pc, #172]	; (80042d0 <prvSwitchTimerLists+0xc0>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	3304      	adds	r3, #4
 8004230:	4618      	mov	r0, r3
 8004232:	f7fe f92d 	bl	8002490 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b00      	cmp	r3, #0
 800424a:	d02e      	beq.n	80042aa <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	4413      	add	r3, r2
 8004254:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	429a      	cmp	r2, r3
 800425c:	d90e      	bls.n	800427c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800426a:	4b19      	ldr	r3, [pc, #100]	; (80042d0 <prvSwitchTimerLists+0xc0>)
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	3304      	adds	r3, #4
 8004272:	4619      	mov	r1, r3
 8004274:	4610      	mov	r0, r2
 8004276:	f7fe f8d2 	bl	800241e <vListInsert>
 800427a:	e016      	b.n	80042aa <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800427c:	2300      	movs	r3, #0
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	2300      	movs	r3, #0
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	2100      	movs	r1, #0
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f7ff fd7c 	bl	8003d84 <xTimerGenericCommand>
 800428c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10a      	bne.n	80042aa <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004298:	f383 8811 	msr	BASEPRI, r3
 800429c:	f3bf 8f6f 	isb	sy
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	603b      	str	r3, [r7, #0]
    }
 80042a6:	bf00      	nop
 80042a8:	e7fe      	b.n	80042a8 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042aa:	4b09      	ldr	r3, [pc, #36]	; (80042d0 <prvSwitchTimerLists+0xc0>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1b1      	bne.n	8004218 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80042b4:	4b06      	ldr	r3, [pc, #24]	; (80042d0 <prvSwitchTimerLists+0xc0>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80042ba:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <prvSwitchTimerLists+0xc4>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a04      	ldr	r2, [pc, #16]	; (80042d0 <prvSwitchTimerLists+0xc0>)
 80042c0:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80042c2:	4a04      	ldr	r2, [pc, #16]	; (80042d4 <prvSwitchTimerLists+0xc4>)
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	6013      	str	r3, [r2, #0]
    }
 80042c8:	bf00      	nop
 80042ca:	3718      	adds	r7, #24
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	200001e8 	.word	0x200001e8
 80042d4:	200001ec 	.word	0x200001ec

080042d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80042dc:	f000 f9e2 	bl	80046a4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80042e0:	4b12      	ldr	r3, [pc, #72]	; (800432c <prvCheckForValidListAndQueue+0x54>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d11d      	bne.n	8004324 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80042e8:	4811      	ldr	r0, [pc, #68]	; (8004330 <prvCheckForValidListAndQueue+0x58>)
 80042ea:	f7fe f847 	bl	800237c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80042ee:	4811      	ldr	r0, [pc, #68]	; (8004334 <prvCheckForValidListAndQueue+0x5c>)
 80042f0:	f7fe f844 	bl	800237c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80042f4:	4b10      	ldr	r3, [pc, #64]	; (8004338 <prvCheckForValidListAndQueue+0x60>)
 80042f6:	4a0e      	ldr	r2, [pc, #56]	; (8004330 <prvCheckForValidListAndQueue+0x58>)
 80042f8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80042fa:	4b10      	ldr	r3, [pc, #64]	; (800433c <prvCheckForValidListAndQueue+0x64>)
 80042fc:	4a0d      	ldr	r2, [pc, #52]	; (8004334 <prvCheckForValidListAndQueue+0x5c>)
 80042fe:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004300:	2200      	movs	r2, #0
 8004302:	210c      	movs	r1, #12
 8004304:	200a      	movs	r0, #10
 8004306:	f7fe f955 	bl	80025b4 <xQueueGenericCreate>
 800430a:	4603      	mov	r3, r0
 800430c:	4a07      	ldr	r2, [pc, #28]	; (800432c <prvCheckForValidListAndQueue+0x54>)
 800430e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004310:	4b06      	ldr	r3, [pc, #24]	; (800432c <prvCheckForValidListAndQueue+0x54>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d005      	beq.n	8004324 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004318:	4b04      	ldr	r3, [pc, #16]	; (800432c <prvCheckForValidListAndQueue+0x54>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4908      	ldr	r1, [pc, #32]	; (8004340 <prvCheckForValidListAndQueue+0x68>)
 800431e:	4618      	mov	r0, r3
 8004320:	f7fe fdd4 	bl	8002ecc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004324:	f000 f9ee 	bl	8004704 <vPortExitCritical>
    }
 8004328:	bf00      	nop
 800432a:	bd80      	pop	{r7, pc}
 800432c:	200001f0 	.word	0x200001f0
 8004330:	200001c0 	.word	0x200001c0
 8004334:	200001d4 	.word	0x200001d4
 8004338:	200001e8 	.word	0x200001e8
 800433c:	200001ec 	.word	0x200001ec
 8004340:	08007040 	.word	0x08007040

08004344 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	3b04      	subs	r3, #4
 8004354:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800435c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	3b04      	subs	r3, #4
 8004362:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	f023 0201 	bic.w	r2, r3, #1
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	3b04      	subs	r3, #4
 8004372:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004374:	4a0c      	ldr	r2, [pc, #48]	; (80043a8 <pxPortInitialiseStack+0x64>)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	3b14      	subs	r3, #20
 800437e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	3b04      	subs	r3, #4
 800438a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f06f 0202 	mvn.w	r2, #2
 8004392:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	3b20      	subs	r3, #32
 8004398:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800439a:	68fb      	ldr	r3, [r7, #12]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	080043ad 	.word	0x080043ad

080043ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80043b2:	2300      	movs	r3, #0
 80043b4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80043b6:	4b12      	ldr	r3, [pc, #72]	; (8004400 <prvTaskExitError+0x54>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043be:	d00a      	beq.n	80043d6 <prvTaskExitError+0x2a>
        __asm volatile
 80043c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c4:	f383 8811 	msr	BASEPRI, r3
 80043c8:	f3bf 8f6f 	isb	sy
 80043cc:	f3bf 8f4f 	dsb	sy
 80043d0:	60fb      	str	r3, [r7, #12]
    }
 80043d2:	bf00      	nop
 80043d4:	e7fe      	b.n	80043d4 <prvTaskExitError+0x28>
        __asm volatile
 80043d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043da:	f383 8811 	msr	BASEPRI, r3
 80043de:	f3bf 8f6f 	isb	sy
 80043e2:	f3bf 8f4f 	dsb	sy
 80043e6:	60bb      	str	r3, [r7, #8]
    }
 80043e8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80043ea:	bf00      	nop
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0fc      	beq.n	80043ec <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80043f2:	bf00      	nop
 80043f4:	bf00      	nop
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	20000010 	.word	0x20000010
	...

08004410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004410:	4b07      	ldr	r3, [pc, #28]	; (8004430 <pxCurrentTCBConst2>)
 8004412:	6819      	ldr	r1, [r3, #0]
 8004414:	6808      	ldr	r0, [r1, #0]
 8004416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800441a:	f380 8809 	msr	PSP, r0
 800441e:	f3bf 8f6f 	isb	sy
 8004422:	f04f 0000 	mov.w	r0, #0
 8004426:	f380 8811 	msr	BASEPRI, r0
 800442a:	4770      	bx	lr
 800442c:	f3af 8000 	nop.w

08004430 <pxCurrentTCBConst2>:
 8004430:	200000bc 	.word	0x200000bc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004434:	bf00      	nop
 8004436:	bf00      	nop

08004438 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004438:	4808      	ldr	r0, [pc, #32]	; (800445c <prvPortStartFirstTask+0x24>)
 800443a:	6800      	ldr	r0, [r0, #0]
 800443c:	6800      	ldr	r0, [r0, #0]
 800443e:	f380 8808 	msr	MSP, r0
 8004442:	f04f 0000 	mov.w	r0, #0
 8004446:	f380 8814 	msr	CONTROL, r0
 800444a:	b662      	cpsie	i
 800444c:	b661      	cpsie	f
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	df00      	svc	0
 8004458:	bf00      	nop
 800445a:	0000      	.short	0x0000
 800445c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004460:	bf00      	nop
 8004462:	bf00      	nop

08004464 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800446a:	4b46      	ldr	r3, [pc, #280]	; (8004584 <xPortStartScheduler+0x120>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a46      	ldr	r2, [pc, #280]	; (8004588 <xPortStartScheduler+0x124>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d10a      	bne.n	800448a <xPortStartScheduler+0x26>
        __asm volatile
 8004474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004478:	f383 8811 	msr	BASEPRI, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	613b      	str	r3, [r7, #16]
    }
 8004486:	bf00      	nop
 8004488:	e7fe      	b.n	8004488 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800448a:	4b3e      	ldr	r3, [pc, #248]	; (8004584 <xPortStartScheduler+0x120>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a3f      	ldr	r2, [pc, #252]	; (800458c <xPortStartScheduler+0x128>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d10a      	bne.n	80044aa <xPortStartScheduler+0x46>
        __asm volatile
 8004494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004498:	f383 8811 	msr	BASEPRI, r3
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	f3bf 8f4f 	dsb	sy
 80044a4:	60fb      	str	r3, [r7, #12]
    }
 80044a6:	bf00      	nop
 80044a8:	e7fe      	b.n	80044a8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044aa:	4b39      	ldr	r3, [pc, #228]	; (8004590 <xPortStartScheduler+0x12c>)
 80044ac:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	22ff      	movs	r2, #255	; 0xff
 80044ba:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80044c4:	78fb      	ldrb	r3, [r7, #3]
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	4b31      	ldr	r3, [pc, #196]	; (8004594 <xPortStartScheduler+0x130>)
 80044d0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80044d2:	4b31      	ldr	r3, [pc, #196]	; (8004598 <xPortStartScheduler+0x134>)
 80044d4:	2207      	movs	r2, #7
 80044d6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044d8:	e009      	b.n	80044ee <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80044da:	4b2f      	ldr	r3, [pc, #188]	; (8004598 <xPortStartScheduler+0x134>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	3b01      	subs	r3, #1
 80044e0:	4a2d      	ldr	r2, [pc, #180]	; (8004598 <xPortStartScheduler+0x134>)
 80044e2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80044e4:	78fb      	ldrb	r3, [r7, #3]
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044ee:	78fb      	ldrb	r3, [r7, #3]
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f6:	2b80      	cmp	r3, #128	; 0x80
 80044f8:	d0ef      	beq.n	80044da <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80044fa:	4b27      	ldr	r3, [pc, #156]	; (8004598 <xPortStartScheduler+0x134>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f1c3 0307 	rsb	r3, r3, #7
 8004502:	2b04      	cmp	r3, #4
 8004504:	d00a      	beq.n	800451c <xPortStartScheduler+0xb8>
        __asm volatile
 8004506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450a:	f383 8811 	msr	BASEPRI, r3
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	f3bf 8f4f 	dsb	sy
 8004516:	60bb      	str	r3, [r7, #8]
    }
 8004518:	bf00      	nop
 800451a:	e7fe      	b.n	800451a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800451c:	4b1e      	ldr	r3, [pc, #120]	; (8004598 <xPortStartScheduler+0x134>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	021b      	lsls	r3, r3, #8
 8004522:	4a1d      	ldr	r2, [pc, #116]	; (8004598 <xPortStartScheduler+0x134>)
 8004524:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004526:	4b1c      	ldr	r3, [pc, #112]	; (8004598 <xPortStartScheduler+0x134>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800452e:	4a1a      	ldr	r2, [pc, #104]	; (8004598 <xPortStartScheduler+0x134>)
 8004530:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	b2da      	uxtb	r2, r3
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800453a:	4b18      	ldr	r3, [pc, #96]	; (800459c <xPortStartScheduler+0x138>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a17      	ldr	r2, [pc, #92]	; (800459c <xPortStartScheduler+0x138>)
 8004540:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004544:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004546:	4b15      	ldr	r3, [pc, #84]	; (800459c <xPortStartScheduler+0x138>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a14      	ldr	r2, [pc, #80]	; (800459c <xPortStartScheduler+0x138>)
 800454c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004550:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004552:	f000 f963 	bl	800481c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004556:	4b12      	ldr	r3, [pc, #72]	; (80045a0 <xPortStartScheduler+0x13c>)
 8004558:	2200      	movs	r2, #0
 800455a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800455c:	f000 f982 	bl	8004864 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004560:	4b10      	ldr	r3, [pc, #64]	; (80045a4 <xPortStartScheduler+0x140>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a0f      	ldr	r2, [pc, #60]	; (80045a4 <xPortStartScheduler+0x140>)
 8004566:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800456a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800456c:	f7ff ff64 	bl	8004438 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004570:	f7ff f864 	bl	800363c <vTaskSwitchContext>
    prvTaskExitError();
 8004574:	f7ff ff1a 	bl	80043ac <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3718      	adds	r7, #24
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	e000ed00 	.word	0xe000ed00
 8004588:	410fc271 	.word	0x410fc271
 800458c:	410fc270 	.word	0x410fc270
 8004590:	e000e400 	.word	0xe000e400
 8004594:	200001fc 	.word	0x200001fc
 8004598:	20000200 	.word	0x20000200
 800459c:	e000ed20 	.word	0xe000ed20
 80045a0:	20000010 	.word	0x20000010
 80045a4:	e000ef34 	.word	0xe000ef34

080045a8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80045ae:	4b37      	ldr	r3, [pc, #220]	; (800468c <vInitPrioGroupValue+0xe4>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a37      	ldr	r2, [pc, #220]	; (8004690 <vInitPrioGroupValue+0xe8>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d10a      	bne.n	80045ce <vInitPrioGroupValue+0x26>
        __asm volatile
 80045b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045bc:	f383 8811 	msr	BASEPRI, r3
 80045c0:	f3bf 8f6f 	isb	sy
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	613b      	str	r3, [r7, #16]
    }
 80045ca:	bf00      	nop
 80045cc:	e7fe      	b.n	80045cc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80045ce:	4b2f      	ldr	r3, [pc, #188]	; (800468c <vInitPrioGroupValue+0xe4>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a30      	ldr	r2, [pc, #192]	; (8004694 <vInitPrioGroupValue+0xec>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d10a      	bne.n	80045ee <vInitPrioGroupValue+0x46>
        __asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	60fb      	str	r3, [r7, #12]
    }
 80045ea:	bf00      	nop
 80045ec:	e7fe      	b.n	80045ec <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80045ee:	4b2a      	ldr	r3, [pc, #168]	; (8004698 <vInitPrioGroupValue+0xf0>)
 80045f0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	22ff      	movs	r2, #255	; 0xff
 80045fe:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	b2db      	uxtb	r3, r3
 8004606:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004608:	78fb      	ldrb	r3, [r7, #3]
 800460a:	b2db      	uxtb	r3, r3
 800460c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004610:	b2da      	uxtb	r2, r3
 8004612:	4b22      	ldr	r3, [pc, #136]	; (800469c <vInitPrioGroupValue+0xf4>)
 8004614:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004616:	4b22      	ldr	r3, [pc, #136]	; (80046a0 <vInitPrioGroupValue+0xf8>)
 8004618:	2207      	movs	r2, #7
 800461a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800461c:	e009      	b.n	8004632 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800461e:	4b20      	ldr	r3, [pc, #128]	; (80046a0 <vInitPrioGroupValue+0xf8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	3b01      	subs	r3, #1
 8004624:	4a1e      	ldr	r2, [pc, #120]	; (80046a0 <vInitPrioGroupValue+0xf8>)
 8004626:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004628:	78fb      	ldrb	r3, [r7, #3]
 800462a:	b2db      	uxtb	r3, r3
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	b2db      	uxtb	r3, r3
 8004630:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004632:	78fb      	ldrb	r3, [r7, #3]
 8004634:	b2db      	uxtb	r3, r3
 8004636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800463a:	2b80      	cmp	r3, #128	; 0x80
 800463c:	d0ef      	beq.n	800461e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800463e:	4b18      	ldr	r3, [pc, #96]	; (80046a0 <vInitPrioGroupValue+0xf8>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f1c3 0307 	rsb	r3, r3, #7
 8004646:	2b04      	cmp	r3, #4
 8004648:	d00a      	beq.n	8004660 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800464a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	60bb      	str	r3, [r7, #8]
    }
 800465c:	bf00      	nop
 800465e:	e7fe      	b.n	800465e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004660:	4b0f      	ldr	r3, [pc, #60]	; (80046a0 <vInitPrioGroupValue+0xf8>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	021b      	lsls	r3, r3, #8
 8004666:	4a0e      	ldr	r2, [pc, #56]	; (80046a0 <vInitPrioGroupValue+0xf8>)
 8004668:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800466a:	4b0d      	ldr	r3, [pc, #52]	; (80046a0 <vInitPrioGroupValue+0xf8>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004672:	4a0b      	ldr	r2, [pc, #44]	; (80046a0 <vInitPrioGroupValue+0xf8>)
 8004674:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	b2da      	uxtb	r2, r3
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800467e:	bf00      	nop
 8004680:	371c      	adds	r7, #28
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	e000ed00 	.word	0xe000ed00
 8004690:	410fc271 	.word	0x410fc271
 8004694:	410fc270 	.word	0x410fc270
 8004698:	e000e400 	.word	0xe000e400
 800469c:	200001fc 	.word	0x200001fc
 80046a0:	20000200 	.word	0x20000200

080046a4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
        __asm volatile
 80046aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ae:	f383 8811 	msr	BASEPRI, r3
 80046b2:	f3bf 8f6f 	isb	sy
 80046b6:	f3bf 8f4f 	dsb	sy
 80046ba:	607b      	str	r3, [r7, #4]
    }
 80046bc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80046be:	4b0f      	ldr	r3, [pc, #60]	; (80046fc <vPortEnterCritical+0x58>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	3301      	adds	r3, #1
 80046c4:	4a0d      	ldr	r2, [pc, #52]	; (80046fc <vPortEnterCritical+0x58>)
 80046c6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80046c8:	4b0c      	ldr	r3, [pc, #48]	; (80046fc <vPortEnterCritical+0x58>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d10f      	bne.n	80046f0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80046d0:	4b0b      	ldr	r3, [pc, #44]	; (8004700 <vPortEnterCritical+0x5c>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <vPortEnterCritical+0x4c>
        __asm volatile
 80046da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046de:	f383 8811 	msr	BASEPRI, r3
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	603b      	str	r3, [r7, #0]
    }
 80046ec:	bf00      	nop
 80046ee:	e7fe      	b.n	80046ee <vPortEnterCritical+0x4a>
    }
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	20000010 	.word	0x20000010
 8004700:	e000ed04 	.word	0xe000ed04

08004704 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800470a:	4b12      	ldr	r3, [pc, #72]	; (8004754 <vPortExitCritical+0x50>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10a      	bne.n	8004728 <vPortExitCritical+0x24>
        __asm volatile
 8004712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004716:	f383 8811 	msr	BASEPRI, r3
 800471a:	f3bf 8f6f 	isb	sy
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	607b      	str	r3, [r7, #4]
    }
 8004724:	bf00      	nop
 8004726:	e7fe      	b.n	8004726 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004728:	4b0a      	ldr	r3, [pc, #40]	; (8004754 <vPortExitCritical+0x50>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	3b01      	subs	r3, #1
 800472e:	4a09      	ldr	r2, [pc, #36]	; (8004754 <vPortExitCritical+0x50>)
 8004730:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004732:	4b08      	ldr	r3, [pc, #32]	; (8004754 <vPortExitCritical+0x50>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d105      	bne.n	8004746 <vPortExitCritical+0x42>
 800473a:	2300      	movs	r3, #0
 800473c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	f383 8811 	msr	BASEPRI, r3
    }
 8004744:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	20000010 	.word	0x20000010
	...

08004760 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004760:	f3ef 8009 	mrs	r0, PSP
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	4b15      	ldr	r3, [pc, #84]	; (80047c0 <pxCurrentTCBConst>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	f01e 0f10 	tst.w	lr, #16
 8004770:	bf08      	it	eq
 8004772:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004776:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800477a:	6010      	str	r0, [r2, #0]
 800477c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004780:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004784:	f380 8811 	msr	BASEPRI, r0
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	f3bf 8f6f 	isb	sy
 8004790:	f7fe ff54 	bl	800363c <vTaskSwitchContext>
 8004794:	f04f 0000 	mov.w	r0, #0
 8004798:	f380 8811 	msr	BASEPRI, r0
 800479c:	bc09      	pop	{r0, r3}
 800479e:	6819      	ldr	r1, [r3, #0]
 80047a0:	6808      	ldr	r0, [r1, #0]
 80047a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047a6:	f01e 0f10 	tst.w	lr, #16
 80047aa:	bf08      	it	eq
 80047ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80047b0:	f380 8809 	msr	PSP, r0
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	f3af 8000 	nop.w

080047c0 <pxCurrentTCBConst>:
 80047c0:	200000bc 	.word	0x200000bc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80047c4:	bf00      	nop
 80047c6:	bf00      	nop

080047c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
        __asm volatile
 80047ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	607b      	str	r3, [r7, #4]
    }
 80047e0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80047e2:	f001 ff57 	bl	8006694 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80047e6:	f7fe fe6d 	bl	80034c4 <xTaskIncrementTick>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d006      	beq.n	80047fe <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80047f0:	f001 ffae 	bl	8006750 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80047f4:	4b08      	ldr	r3, [pc, #32]	; (8004818 <SysTick_Handler+0x50>)
 80047f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	e001      	b.n	8004802 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80047fe:	f001 ff8b 	bl	8006718 <SEGGER_SYSVIEW_RecordExitISR>
 8004802:	2300      	movs	r3, #0
 8004804:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	f383 8811 	msr	BASEPRI, r3
    }
 800480c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800480e:	bf00      	nop
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	e000ed04 	.word	0xe000ed04

0800481c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800481c:	b480      	push	{r7}
 800481e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004820:	4b0b      	ldr	r3, [pc, #44]	; (8004850 <vPortSetupTimerInterrupt+0x34>)
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004826:	4b0b      	ldr	r3, [pc, #44]	; (8004854 <vPortSetupTimerInterrupt+0x38>)
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800482c:	4b0a      	ldr	r3, [pc, #40]	; (8004858 <vPortSetupTimerInterrupt+0x3c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a0a      	ldr	r2, [pc, #40]	; (800485c <vPortSetupTimerInterrupt+0x40>)
 8004832:	fba2 2303 	umull	r2, r3, r2, r3
 8004836:	099b      	lsrs	r3, r3, #6
 8004838:	4a09      	ldr	r2, [pc, #36]	; (8004860 <vPortSetupTimerInterrupt+0x44>)
 800483a:	3b01      	subs	r3, #1
 800483c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800483e:	4b04      	ldr	r3, [pc, #16]	; (8004850 <vPortSetupTimerInterrupt+0x34>)
 8004840:	2207      	movs	r2, #7
 8004842:	601a      	str	r2, [r3, #0]
}
 8004844:	bf00      	nop
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	e000e010 	.word	0xe000e010
 8004854:	e000e018 	.word	0xe000e018
 8004858:	20000000 	.word	0x20000000
 800485c:	10624dd3 	.word	0x10624dd3
 8004860:	e000e014 	.word	0xe000e014

08004864 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004864:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004874 <vPortEnableVFP+0x10>
 8004868:	6801      	ldr	r1, [r0, #0]
 800486a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800486e:	6001      	str	r1, [r0, #0]
 8004870:	4770      	bx	lr
 8004872:	0000      	.short	0x0000
 8004874:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004878:	bf00      	nop
 800487a:	bf00      	nop

0800487c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004882:	f3ef 8305 	mrs	r3, IPSR
 8004886:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2b0f      	cmp	r3, #15
 800488c:	d914      	bls.n	80048b8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800488e:	4a17      	ldr	r2, [pc, #92]	; (80048ec <vPortValidateInterruptPriority+0x70>)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4413      	add	r3, r2
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004898:	4b15      	ldr	r3, [pc, #84]	; (80048f0 <vPortValidateInterruptPriority+0x74>)
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	7afa      	ldrb	r2, [r7, #11]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d20a      	bcs.n	80048b8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80048a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	607b      	str	r3, [r7, #4]
    }
 80048b4:	bf00      	nop
 80048b6:	e7fe      	b.n	80048b6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80048b8:	4b0e      	ldr	r3, [pc, #56]	; (80048f4 <vPortValidateInterruptPriority+0x78>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048c0:	4b0d      	ldr	r3, [pc, #52]	; (80048f8 <vPortValidateInterruptPriority+0x7c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d90a      	bls.n	80048de <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80048c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048cc:	f383 8811 	msr	BASEPRI, r3
 80048d0:	f3bf 8f6f 	isb	sy
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	603b      	str	r3, [r7, #0]
    }
 80048da:	bf00      	nop
 80048dc:	e7fe      	b.n	80048dc <vPortValidateInterruptPriority+0x60>
    }
 80048de:	bf00      	nop
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	e000e3f0 	.word	0xe000e3f0
 80048f0:	200001fc 	.word	0x200001fc
 80048f4:	e000ed0c 	.word	0xe000ed0c
 80048f8:	20000200 	.word	0x20000200

080048fc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b08a      	sub	sp, #40	; 0x28
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004904:	2300      	movs	r3, #0
 8004906:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004908:	f7fe fd0c 	bl	8003324 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800490c:	4b65      	ldr	r3, [pc, #404]	; (8004aa4 <pvPortMalloc+0x1a8>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d101      	bne.n	8004918 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004914:	f000 f934 	bl	8004b80 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004918:	4b63      	ldr	r3, [pc, #396]	; (8004aa8 <pvPortMalloc+0x1ac>)
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4013      	ands	r3, r2
 8004920:	2b00      	cmp	r3, #0
 8004922:	f040 80a7 	bne.w	8004a74 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d02d      	beq.n	8004988 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800492c:	2208      	movs	r2, #8
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	429a      	cmp	r2, r3
 8004936:	d227      	bcs.n	8004988 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004938:	2208      	movs	r2, #8
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4413      	add	r3, r2
 800493e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	2b00      	cmp	r3, #0
 8004948:	d021      	beq.n	800498e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f023 0307 	bic.w	r3, r3, #7
 8004950:	3308      	adds	r3, #8
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	429a      	cmp	r2, r3
 8004956:	d214      	bcs.n	8004982 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f023 0307 	bic.w	r3, r3, #7
 800495e:	3308      	adds	r3, #8
 8004960:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	2b00      	cmp	r3, #0
 800496a:	d010      	beq.n	800498e <pvPortMalloc+0x92>
        __asm volatile
 800496c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004970:	f383 8811 	msr	BASEPRI, r3
 8004974:	f3bf 8f6f 	isb	sy
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	617b      	str	r3, [r7, #20]
    }
 800497e:	bf00      	nop
 8004980:	e7fe      	b.n	8004980 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004982:	2300      	movs	r3, #0
 8004984:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004986:	e002      	b.n	800498e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004988:	2300      	movs	r3, #0
 800498a:	607b      	str	r3, [r7, #4]
 800498c:	e000      	b.n	8004990 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800498e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d06e      	beq.n	8004a74 <pvPortMalloc+0x178>
 8004996:	4b45      	ldr	r3, [pc, #276]	; (8004aac <pvPortMalloc+0x1b0>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	429a      	cmp	r2, r3
 800499e:	d869      	bhi.n	8004a74 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80049a0:	4b43      	ldr	r3, [pc, #268]	; (8004ab0 <pvPortMalloc+0x1b4>)
 80049a2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80049a4:	4b42      	ldr	r3, [pc, #264]	; (8004ab0 <pvPortMalloc+0x1b4>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049aa:	e004      	b.n	80049b6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80049ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ae:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d903      	bls.n	80049c8 <pvPortMalloc+0xcc>
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1f1      	bne.n	80049ac <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80049c8:	4b36      	ldr	r3, [pc, #216]	; (8004aa4 <pvPortMalloc+0x1a8>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d050      	beq.n	8004a74 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049d2:	6a3b      	ldr	r3, [r7, #32]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2208      	movs	r2, #8
 80049d8:	4413      	add	r3, r2
 80049da:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	1ad2      	subs	r2, r2, r3
 80049ec:	2308      	movs	r3, #8
 80049ee:	005b      	lsls	r3, r3, #1
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d91f      	bls.n	8004a34 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80049f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4413      	add	r3, r2
 80049fa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	f003 0307 	and.w	r3, r3, #7
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00a      	beq.n	8004a1c <pvPortMalloc+0x120>
        __asm volatile
 8004a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0a:	f383 8811 	msr	BASEPRI, r3
 8004a0e:	f3bf 8f6f 	isb	sy
 8004a12:	f3bf 8f4f 	dsb	sy
 8004a16:	613b      	str	r3, [r7, #16]
    }
 8004a18:	bf00      	nop
 8004a1a:	e7fe      	b.n	8004a1a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	1ad2      	subs	r2, r2, r3
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a2e:	69b8      	ldr	r0, [r7, #24]
 8004a30:	f000 f908 	bl	8004c44 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a34:	4b1d      	ldr	r3, [pc, #116]	; (8004aac <pvPortMalloc+0x1b0>)
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	4a1b      	ldr	r2, [pc, #108]	; (8004aac <pvPortMalloc+0x1b0>)
 8004a40:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a42:	4b1a      	ldr	r3, [pc, #104]	; (8004aac <pvPortMalloc+0x1b0>)
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	4b1b      	ldr	r3, [pc, #108]	; (8004ab4 <pvPortMalloc+0x1b8>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d203      	bcs.n	8004a56 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a4e:	4b17      	ldr	r3, [pc, #92]	; (8004aac <pvPortMalloc+0x1b0>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a18      	ldr	r2, [pc, #96]	; (8004ab4 <pvPortMalloc+0x1b8>)
 8004a54:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	4b13      	ldr	r3, [pc, #76]	; (8004aa8 <pvPortMalloc+0x1ac>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	2200      	movs	r2, #0
 8004a68:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004a6a:	4b13      	ldr	r3, [pc, #76]	; (8004ab8 <pvPortMalloc+0x1bc>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	4a11      	ldr	r2, [pc, #68]	; (8004ab8 <pvPortMalloc+0x1bc>)
 8004a72:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004a74:	f7fe fc64 	bl	8003340 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	f003 0307 	and.w	r3, r3, #7
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00a      	beq.n	8004a98 <pvPortMalloc+0x19c>
        __asm volatile
 8004a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	60fb      	str	r3, [r7, #12]
    }
 8004a94:	bf00      	nop
 8004a96:	e7fe      	b.n	8004a96 <pvPortMalloc+0x19a>
    return pvReturn;
 8004a98:	69fb      	ldr	r3, [r7, #28]
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3728      	adds	r7, #40	; 0x28
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20012e0c 	.word	0x20012e0c
 8004aa8:	20012e20 	.word	0x20012e20
 8004aac:	20012e10 	.word	0x20012e10
 8004ab0:	20012e04 	.word	0x20012e04
 8004ab4:	20012e14 	.word	0x20012e14
 8004ab8:	20012e18 	.word	0x20012e18

08004abc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d04d      	beq.n	8004b6a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004ace:	2308      	movs	r3, #8
 8004ad0:	425b      	negs	r3, r3
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	4b24      	ldr	r3, [pc, #144]	; (8004b74 <vPortFree+0xb8>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10a      	bne.n	8004b00 <vPortFree+0x44>
        __asm volatile
 8004aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aee:	f383 8811 	msr	BASEPRI, r3
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	60fb      	str	r3, [r7, #12]
    }
 8004afc:	bf00      	nop
 8004afe:	e7fe      	b.n	8004afe <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00a      	beq.n	8004b1e <vPortFree+0x62>
        __asm volatile
 8004b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0c:	f383 8811 	msr	BASEPRI, r3
 8004b10:	f3bf 8f6f 	isb	sy
 8004b14:	f3bf 8f4f 	dsb	sy
 8004b18:	60bb      	str	r3, [r7, #8]
    }
 8004b1a:	bf00      	nop
 8004b1c:	e7fe      	b.n	8004b1c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	4b14      	ldr	r3, [pc, #80]	; (8004b74 <vPortFree+0xb8>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4013      	ands	r3, r2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d01e      	beq.n	8004b6a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d11a      	bne.n	8004b6a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	4b0e      	ldr	r3, [pc, #56]	; (8004b74 <vPortFree+0xb8>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	43db      	mvns	r3, r3
 8004b3e:	401a      	ands	r2, r3
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004b44:	f7fe fbee 	bl	8003324 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <vPortFree+0xbc>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4413      	add	r3, r2
 8004b52:	4a09      	ldr	r2, [pc, #36]	; (8004b78 <vPortFree+0xbc>)
 8004b54:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b56:	6938      	ldr	r0, [r7, #16]
 8004b58:	f000 f874 	bl	8004c44 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004b5c:	4b07      	ldr	r3, [pc, #28]	; (8004b7c <vPortFree+0xc0>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3301      	adds	r3, #1
 8004b62:	4a06      	ldr	r2, [pc, #24]	; (8004b7c <vPortFree+0xc0>)
 8004b64:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004b66:	f7fe fbeb 	bl	8003340 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004b6a:	bf00      	nop
 8004b6c:	3718      	adds	r7, #24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	20012e20 	.word	0x20012e20
 8004b78:	20012e10 	.word	0x20012e10
 8004b7c:	20012e1c 	.word	0x20012e1c

08004b80 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b86:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004b8a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004b8c:	4b27      	ldr	r3, [pc, #156]	; (8004c2c <prvHeapInit+0xac>)
 8004b8e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f003 0307 	and.w	r3, r3, #7
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00c      	beq.n	8004bb4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	3307      	adds	r3, #7
 8004b9e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f023 0307 	bic.w	r3, r3, #7
 8004ba6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	4a1f      	ldr	r2, [pc, #124]	; (8004c2c <prvHeapInit+0xac>)
 8004bb0:	4413      	add	r3, r2
 8004bb2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004bb8:	4a1d      	ldr	r2, [pc, #116]	; (8004c30 <prvHeapInit+0xb0>)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004bbe:	4b1c      	ldr	r3, [pc, #112]	; (8004c30 <prvHeapInit+0xb0>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	4413      	add	r3, r2
 8004bca:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004bcc:	2208      	movs	r2, #8
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	1a9b      	subs	r3, r3, r2
 8004bd2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f023 0307 	bic.w	r3, r3, #7
 8004bda:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	4a15      	ldr	r2, [pc, #84]	; (8004c34 <prvHeapInit+0xb4>)
 8004be0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004be2:	4b14      	ldr	r3, [pc, #80]	; (8004c34 <prvHeapInit+0xb4>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2200      	movs	r2, #0
 8004be8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004bea:	4b12      	ldr	r3, [pc, #72]	; (8004c34 <prvHeapInit+0xb4>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	1ad2      	subs	r2, r2, r3
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c00:	4b0c      	ldr	r3, [pc, #48]	; (8004c34 <prvHeapInit+0xb4>)
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	4a0a      	ldr	r2, [pc, #40]	; (8004c38 <prvHeapInit+0xb8>)
 8004c0e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	4a09      	ldr	r2, [pc, #36]	; (8004c3c <prvHeapInit+0xbc>)
 8004c16:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004c18:	4b09      	ldr	r3, [pc, #36]	; (8004c40 <prvHeapInit+0xc0>)
 8004c1a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c1e:	601a      	str	r2, [r3, #0]
}
 8004c20:	bf00      	nop
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	20000204 	.word	0x20000204
 8004c30:	20012e04 	.word	0x20012e04
 8004c34:	20012e0c 	.word	0x20012e0c
 8004c38:	20012e14 	.word	0x20012e14
 8004c3c:	20012e10 	.word	0x20012e10
 8004c40:	20012e20 	.word	0x20012e20

08004c44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c4c:	4b28      	ldr	r3, [pc, #160]	; (8004cf0 <prvInsertBlockIntoFreeList+0xac>)
 8004c4e:	60fb      	str	r3, [r7, #12]
 8004c50:	e002      	b.n	8004c58 <prvInsertBlockIntoFreeList+0x14>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d8f7      	bhi.n	8004c52 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d108      	bne.n	8004c86 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	441a      	add	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	441a      	add	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d118      	bne.n	8004ccc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	4b15      	ldr	r3, [pc, #84]	; (8004cf4 <prvInsertBlockIntoFreeList+0xb0>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d00d      	beq.n	8004cc2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	441a      	add	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	601a      	str	r2, [r3, #0]
 8004cc0:	e008      	b.n	8004cd4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004cc2:	4b0c      	ldr	r3, [pc, #48]	; (8004cf4 <prvInsertBlockIntoFreeList+0xb0>)
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	e003      	b.n	8004cd4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d002      	beq.n	8004ce2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004ce2:	bf00      	nop
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	20012e04 	.word	0x20012e04
 8004cf4:	20012e0c 	.word	0x20012e0c

08004cf8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004cfe:	4b26      	ldr	r3, [pc, #152]	; (8004d98 <_DoInit+0xa0>)
 8004d00:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004d02:	22a8      	movs	r2, #168	; 0xa8
 8004d04:	2100      	movs	r1, #0
 8004d06:	6838      	ldr	r0, [r7, #0]
 8004d08:	f002 f958 	bl	8006fbc <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	2203      	movs	r2, #3
 8004d10:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	2203      	movs	r2, #3
 8004d16:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	4a20      	ldr	r2, [pc, #128]	; (8004d9c <_DoInit+0xa4>)
 8004d1c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	4a1f      	ldr	r2, [pc, #124]	; (8004da0 <_DoInit+0xa8>)
 8004d22:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d2a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	2200      	movs	r2, #0
 8004d36:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	4a16      	ldr	r2, [pc, #88]	; (8004d9c <_DoInit+0xa4>)
 8004d42:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	4a17      	ldr	r2, [pc, #92]	; (8004da4 <_DoInit+0xac>)
 8004d48:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	2210      	movs	r2, #16
 8004d4e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	2200      	movs	r2, #0
 8004d54:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004d62:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004d66:	2300      	movs	r3, #0
 8004d68:	607b      	str	r3, [r7, #4]
 8004d6a:	e00c      	b.n	8004d86 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f1c3 030f 	rsb	r3, r3, #15
 8004d72:	4a0d      	ldr	r2, [pc, #52]	; (8004da8 <_DoInit+0xb0>)
 8004d74:	5cd1      	ldrb	r1, [r2, r3]
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	460a      	mov	r2, r1
 8004d7e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	3301      	adds	r3, #1
 8004d84:	607b      	str	r3, [r7, #4]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b0f      	cmp	r3, #15
 8004d8a:	d9ef      	bls.n	8004d6c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004d8c:	f3bf 8f5f 	dmb	sy
}
 8004d90:	bf00      	nop
 8004d92:	3708      	adds	r7, #8
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	20012e24 	.word	0x20012e24
 8004d9c:	08007048 	.word	0x08007048
 8004da0:	20012ecc 	.word	0x20012ecc
 8004da4:	200132cc 	.word	0x200132cc
 8004da8:	08007120 	.word	0x08007120

08004dac <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b08c      	sub	sp, #48	; 0x30
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004db8:	4b3e      	ldr	r3, [pc, #248]	; (8004eb4 <SEGGER_RTT_ReadNoLock+0x108>)
 8004dba:	623b      	str	r3, [r7, #32]
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <SEGGER_RTT_ReadNoLock+0x1e>
 8004dc6:	f7ff ff97 	bl	8004cf8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	4413      	add	r3, r2
 8004dd2:	00db      	lsls	r3, r3, #3
 8004dd4:	3360      	adds	r3, #96	; 0x60
 8004dd6:	4a37      	ldr	r2, [pc, #220]	; (8004eb4 <SEGGER_RTT_ReadNoLock+0x108>)
 8004dd8:	4413      	add	r3, r2
 8004dda:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004dec:	2300      	movs	r3, #0
 8004dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004df0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d92b      	bls.n	8004e50 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	689a      	ldr	r2, [r3, #8]
 8004dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4293      	cmp	r3, r2
 8004e08:	bf28      	it	cs
 8004e0a:	4613      	movcs	r3, r2
 8004e0c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e14:	4413      	add	r3, r2
 8004e16:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	6939      	ldr	r1, [r7, #16]
 8004e1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e1e:	f002 f8bf 	bl	8006fa0 <memcpy>
    NumBytesRead += NumBytesRem;
 8004e22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	4413      	add	r3, r2
 8004e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	4413      	add	r3, r2
 8004e30:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004e3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	4413      	add	r3, r2
 8004e40:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d101      	bne.n	8004e50 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	bf28      	it	cs
 8004e60:	4613      	movcs	r3, r2
 8004e62:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d019      	beq.n	8004e9e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e70:	4413      	add	r3, r2
 8004e72:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	6939      	ldr	r1, [r7, #16]
 8004e78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e7a:	f002 f891 	bl	8006fa0 <memcpy>
    NumBytesRead += NumBytesRem;
 8004e7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	4413      	add	r3, r2
 8004e84:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004e96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d002      	beq.n	8004eaa <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ea8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3730      	adds	r7, #48	; 0x30
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	20012e24 	.word	0x20012e24

08004eb8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b088      	sub	sp, #32
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
 8004ec4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004ec6:	4b3d      	ldr	r3, [pc, #244]	; (8004fbc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004ec8:	61bb      	str	r3, [r7, #24]
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d101      	bne.n	8004ed8 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004ed4:	f7ff ff10 	bl	8004cf8 <_DoInit>
  SEGGER_RTT_LOCK();
 8004ed8:	f3ef 8311 	mrs	r3, BASEPRI
 8004edc:	f04f 0120 	mov.w	r1, #32
 8004ee0:	f381 8811 	msr	BASEPRI, r1
 8004ee4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004ee6:	4b35      	ldr	r3, [pc, #212]	; (8004fbc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004ee8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004eea:	2300      	movs	r3, #0
 8004eec:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004eee:	6939      	ldr	r1, [r7, #16]
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	1c5a      	adds	r2, r3, #1
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	4413      	add	r3, r2
 8004efa:	00db      	lsls	r3, r3, #3
 8004efc:	440b      	add	r3, r1
 8004efe:	3304      	adds	r3, #4
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d008      	beq.n	8004f18 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	69fa      	ldr	r2, [r7, #28]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	dbeb      	blt.n	8004eee <SEGGER_RTT_AllocUpBuffer+0x36>
 8004f16:	e000      	b.n	8004f1a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004f18:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	69fa      	ldr	r2, [r7, #28]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	da3f      	bge.n	8004fa4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004f24:	6939      	ldr	r1, [r7, #16]
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	1c5a      	adds	r2, r3, #1
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	4413      	add	r3, r2
 8004f30:	00db      	lsls	r3, r3, #3
 8004f32:	440b      	add	r3, r1
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004f38:	6939      	ldr	r1, [r7, #16]
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	1c5a      	adds	r2, r3, #1
 8004f3e:	4613      	mov	r3, r2
 8004f40:	005b      	lsls	r3, r3, #1
 8004f42:	4413      	add	r3, r2
 8004f44:	00db      	lsls	r3, r3, #3
 8004f46:	440b      	add	r3, r1
 8004f48:	3304      	adds	r3, #4
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004f4e:	6939      	ldr	r1, [r7, #16]
 8004f50:	69fa      	ldr	r2, [r7, #28]
 8004f52:	4613      	mov	r3, r2
 8004f54:	005b      	lsls	r3, r3, #1
 8004f56:	4413      	add	r3, r2
 8004f58:	00db      	lsls	r3, r3, #3
 8004f5a:	440b      	add	r3, r1
 8004f5c:	3320      	adds	r3, #32
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004f62:	6939      	ldr	r1, [r7, #16]
 8004f64:	69fa      	ldr	r2, [r7, #28]
 8004f66:	4613      	mov	r3, r2
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	4413      	add	r3, r2
 8004f6c:	00db      	lsls	r3, r3, #3
 8004f6e:	440b      	add	r3, r1
 8004f70:	3328      	adds	r3, #40	; 0x28
 8004f72:	2200      	movs	r2, #0
 8004f74:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004f76:	6939      	ldr	r1, [r7, #16]
 8004f78:	69fa      	ldr	r2, [r7, #28]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	4413      	add	r3, r2
 8004f80:	00db      	lsls	r3, r3, #3
 8004f82:	440b      	add	r3, r1
 8004f84:	3324      	adds	r3, #36	; 0x24
 8004f86:	2200      	movs	r2, #0
 8004f88:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004f8a:	6939      	ldr	r1, [r7, #16]
 8004f8c:	69fa      	ldr	r2, [r7, #28]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	005b      	lsls	r3, r3, #1
 8004f92:	4413      	add	r3, r2
 8004f94:	00db      	lsls	r3, r3, #3
 8004f96:	440b      	add	r3, r1
 8004f98:	332c      	adds	r3, #44	; 0x2c
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004f9e:	f3bf 8f5f 	dmb	sy
 8004fa2:	e002      	b.n	8004faa <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8004fa8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004fb0:	69fb      	ldr	r3, [r7, #28]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3720      	adds	r7, #32
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	20012e24 	.word	0x20012e24

08004fc0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b08a      	sub	sp, #40	; 0x28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
 8004fcc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004fce:	4b21      	ldr	r3, [pc, #132]	; (8005054 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004fd0:	623b      	str	r3, [r7, #32]
 8004fd2:	6a3b      	ldr	r3, [r7, #32]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004fdc:	f7ff fe8c 	bl	8004cf8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004fe0:	4b1c      	ldr	r3, [pc, #112]	; (8005054 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004fe2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d82c      	bhi.n	8005044 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004fea:	f3ef 8311 	mrs	r3, BASEPRI
 8004fee:	f04f 0120 	mov.w	r1, #32
 8004ff2:	f381 8811 	msr	BASEPRI, r1
 8004ff6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	4413      	add	r3, r2
 8005000:	00db      	lsls	r3, r3, #3
 8005002:	3360      	adds	r3, #96	; 0x60
 8005004:	69fa      	ldr	r2, [r7, #28]
 8005006:	4413      	add	r3, r2
 8005008:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00e      	beq.n	800502e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	68ba      	ldr	r2, [r7, #8]
 8005014:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	683a      	ldr	r2, [r7, #0]
 8005020:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2200      	movs	r2, #0
 8005026:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	2200      	movs	r2, #0
 800502c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005032:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005034:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800503e:	2300      	movs	r3, #0
 8005040:	627b      	str	r3, [r7, #36]	; 0x24
 8005042:	e002      	b.n	800504a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005044:	f04f 33ff 	mov.w	r3, #4294967295
 8005048:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800504c:	4618      	mov	r0, r3
 800504e:	3728      	adds	r7, #40	; 0x28
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	20012e24 	.word	0x20012e24

08005058 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005064:	2300      	movs	r3, #0
 8005066:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00f      	beq.n	800508e <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800506e:	e002      	b.n	8005076 <_EncodeStr+0x1e>
      Len++;
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	3301      	adds	r3, #1
 8005074:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	4413      	add	r3, r2
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1f6      	bne.n	8005070 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	429a      	cmp	r2, r3
 8005088:	d901      	bls.n	800508e <_EncodeStr+0x36>
      Len = Limit;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	2bfe      	cmp	r3, #254	; 0xfe
 8005092:	d806      	bhi.n	80050a2 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	1c5a      	adds	r2, r3, #1
 8005098:	60fa      	str	r2, [r7, #12]
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	b2d2      	uxtb	r2, r2
 800509e:	701a      	strb	r2, [r3, #0]
 80050a0:	e011      	b.n	80050c6 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	1c5a      	adds	r2, r3, #1
 80050a6:	60fa      	str	r2, [r7, #12]
 80050a8:	22ff      	movs	r2, #255	; 0xff
 80050aa:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	1c5a      	adds	r2, r3, #1
 80050b0:	60fa      	str	r2, [r7, #12]
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	b2d2      	uxtb	r2, r2
 80050b6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	0a19      	lsrs	r1, r3, #8
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	60fa      	str	r2, [r7, #12]
 80050c2:	b2ca      	uxtb	r2, r1
 80050c4:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80050c6:	2300      	movs	r3, #0
 80050c8:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80050ca:	e00a      	b.n	80050e2 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	1c53      	adds	r3, r2, #1
 80050d0:	60bb      	str	r3, [r7, #8]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	1c59      	adds	r1, r3, #1
 80050d6:	60f9      	str	r1, [r7, #12]
 80050d8:	7812      	ldrb	r2, [r2, #0]
 80050da:	701a      	strb	r2, [r3, #0]
    n++;
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	3301      	adds	r3, #1
 80050e0:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d3f0      	bcc.n	80050cc <_EncodeStr+0x74>
  }
  return pPayload;
 80050ea:	68fb      	ldr	r3, [r7, #12]
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	371c      	adds	r7, #28
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	3307      	adds	r3, #7
}
 8005104:	4618      	mov	r0, r3
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005116:	4b35      	ldr	r3, [pc, #212]	; (80051ec <_HandleIncomingPacket+0xdc>)
 8005118:	7e1b      	ldrb	r3, [r3, #24]
 800511a:	4618      	mov	r0, r3
 800511c:	1cfb      	adds	r3, r7, #3
 800511e:	2201      	movs	r2, #1
 8005120:	4619      	mov	r1, r3
 8005122:	f7ff fe43 	bl	8004dac <SEGGER_RTT_ReadNoLock>
 8005126:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d052      	beq.n	80051d4 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 800512e:	78fb      	ldrb	r3, [r7, #3]
 8005130:	2b80      	cmp	r3, #128	; 0x80
 8005132:	d031      	beq.n	8005198 <_HandleIncomingPacket+0x88>
 8005134:	2b80      	cmp	r3, #128	; 0x80
 8005136:	dc40      	bgt.n	80051ba <_HandleIncomingPacket+0xaa>
 8005138:	2b07      	cmp	r3, #7
 800513a:	dc15      	bgt.n	8005168 <_HandleIncomingPacket+0x58>
 800513c:	2b00      	cmp	r3, #0
 800513e:	dd3c      	ble.n	80051ba <_HandleIncomingPacket+0xaa>
 8005140:	3b01      	subs	r3, #1
 8005142:	2b06      	cmp	r3, #6
 8005144:	d839      	bhi.n	80051ba <_HandleIncomingPacket+0xaa>
 8005146:	a201      	add	r2, pc, #4	; (adr r2, 800514c <_HandleIncomingPacket+0x3c>)
 8005148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514c:	0800516f 	.word	0x0800516f
 8005150:	08005175 	.word	0x08005175
 8005154:	0800517b 	.word	0x0800517b
 8005158:	08005181 	.word	0x08005181
 800515c:	08005187 	.word	0x08005187
 8005160:	0800518d 	.word	0x0800518d
 8005164:	08005193 	.word	0x08005193
 8005168:	2b7f      	cmp	r3, #127	; 0x7f
 800516a:	d035      	beq.n	80051d8 <_HandleIncomingPacket+0xc8>
 800516c:	e025      	b.n	80051ba <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800516e:	f000 ffc9 	bl	8006104 <SEGGER_SYSVIEW_Start>
      break;
 8005172:	e036      	b.n	80051e2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005174:	f001 f880 	bl	8006278 <SEGGER_SYSVIEW_Stop>
      break;
 8005178:	e033      	b.n	80051e2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800517a:	f001 fa59 	bl	8006630 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800517e:	e030      	b.n	80051e2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005180:	f001 fa1e 	bl	80065c0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005184:	e02d      	b.n	80051e2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005186:	f001 f89d 	bl	80062c4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800518a:	e02a      	b.n	80051e2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800518c:	f001 fcec 	bl	8006b68 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005190:	e027      	b.n	80051e2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005192:	f001 fccb 	bl	8006b2c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005196:	e024      	b.n	80051e2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005198:	4b14      	ldr	r3, [pc, #80]	; (80051ec <_HandleIncomingPacket+0xdc>)
 800519a:	7e1b      	ldrb	r3, [r3, #24]
 800519c:	4618      	mov	r0, r3
 800519e:	1cfb      	adds	r3, r7, #3
 80051a0:	2201      	movs	r2, #1
 80051a2:	4619      	mov	r1, r3
 80051a4:	f7ff fe02 	bl	8004dac <SEGGER_RTT_ReadNoLock>
 80051a8:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d015      	beq.n	80051dc <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80051b0:	78fb      	ldrb	r3, [r7, #3]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f001 fc3a 	bl	8006a2c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80051b8:	e010      	b.n	80051dc <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80051ba:	78fb      	ldrb	r3, [r7, #3]
 80051bc:	b25b      	sxtb	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	da0e      	bge.n	80051e0 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80051c2:	4b0a      	ldr	r3, [pc, #40]	; (80051ec <_HandleIncomingPacket+0xdc>)
 80051c4:	7e1b      	ldrb	r3, [r3, #24]
 80051c6:	4618      	mov	r0, r3
 80051c8:	1cfb      	adds	r3, r7, #3
 80051ca:	2201      	movs	r2, #1
 80051cc:	4619      	mov	r1, r3
 80051ce:	f7ff fded 	bl	8004dac <SEGGER_RTT_ReadNoLock>
      }
      break;
 80051d2:	e005      	b.n	80051e0 <_HandleIncomingPacket+0xd0>
    }
  }
 80051d4:	bf00      	nop
 80051d6:	e004      	b.n	80051e2 <_HandleIncomingPacket+0xd2>
      break;
 80051d8:	bf00      	nop
 80051da:	e002      	b.n	80051e2 <_HandleIncomingPacket+0xd2>
      break;
 80051dc:	bf00      	nop
 80051de:	e000      	b.n	80051e2 <_HandleIncomingPacket+0xd2>
      break;
 80051e0:	bf00      	nop
}
 80051e2:	bf00      	nop
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	200142e4 	.word	0x200142e4

080051f0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b08c      	sub	sp, #48	; 0x30
 80051f4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80051f6:	2301      	movs	r3, #1
 80051f8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80051fa:	1d3b      	adds	r3, r7, #4
 80051fc:	3301      	adds	r3, #1
 80051fe:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005204:	4b31      	ldr	r3, [pc, #196]	; (80052cc <_TrySendOverflowPacket+0xdc>)
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	62bb      	str	r3, [r7, #40]	; 0x28
 800520a:	e00b      	b.n	8005224 <_TrySendOverflowPacket+0x34>
 800520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520e:	b2da      	uxtb	r2, r3
 8005210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005212:	1c59      	adds	r1, r3, #1
 8005214:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005216:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800521a:	b2d2      	uxtb	r2, r2
 800521c:	701a      	strb	r2, [r3, #0]
 800521e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005220:	09db      	lsrs	r3, r3, #7
 8005222:	62bb      	str	r3, [r7, #40]	; 0x28
 8005224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005226:	2b7f      	cmp	r3, #127	; 0x7f
 8005228:	d8f0      	bhi.n	800520c <_TrySendOverflowPacket+0x1c>
 800522a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522c:	1c5a      	adds	r2, r3, #1
 800522e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005230:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005232:	b2d2      	uxtb	r2, r2
 8005234:	701a      	strb	r2, [r3, #0]
 8005236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005238:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800523a:	4b25      	ldr	r3, [pc, #148]	; (80052d0 <_TrySendOverflowPacket+0xe0>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005240:	4b22      	ldr	r3, [pc, #136]	; (80052cc <_TrySendOverflowPacket+0xdc>)
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	627b      	str	r3, [r7, #36]	; 0x24
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	623b      	str	r3, [r7, #32]
 8005252:	e00b      	b.n	800526c <_TrySendOverflowPacket+0x7c>
 8005254:	6a3b      	ldr	r3, [r7, #32]
 8005256:	b2da      	uxtb	r2, r3
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	1c59      	adds	r1, r3, #1
 800525c:	6279      	str	r1, [r7, #36]	; 0x24
 800525e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005262:	b2d2      	uxtb	r2, r2
 8005264:	701a      	strb	r2, [r3, #0]
 8005266:	6a3b      	ldr	r3, [r7, #32]
 8005268:	09db      	lsrs	r3, r3, #7
 800526a:	623b      	str	r3, [r7, #32]
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	2b7f      	cmp	r3, #127	; 0x7f
 8005270:	d8f0      	bhi.n	8005254 <_TrySendOverflowPacket+0x64>
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005274:	1c5a      	adds	r2, r3, #1
 8005276:	627a      	str	r2, [r7, #36]	; 0x24
 8005278:	6a3a      	ldr	r2, [r7, #32]
 800527a:	b2d2      	uxtb	r2, r2
 800527c:	701a      	strb	r2, [r3, #0]
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005282:	4b12      	ldr	r3, [pc, #72]	; (80052cc <_TrySendOverflowPacket+0xdc>)
 8005284:	785b      	ldrb	r3, [r3, #1]
 8005286:	4618      	mov	r0, r3
 8005288:	1d3b      	adds	r3, r7, #4
 800528a:	69fa      	ldr	r2, [r7, #28]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	461a      	mov	r2, r3
 8005290:	1d3b      	adds	r3, r7, #4
 8005292:	4619      	mov	r1, r3
 8005294:	f7fa ffac 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005298:	4603      	mov	r3, r0
 800529a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d009      	beq.n	80052b6 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80052a2:	4a0a      	ldr	r2, [pc, #40]	; (80052cc <_TrySendOverflowPacket+0xdc>)
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80052a8:	4b08      	ldr	r3, [pc, #32]	; (80052cc <_TrySendOverflowPacket+0xdc>)
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	3b01      	subs	r3, #1
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	4b06      	ldr	r3, [pc, #24]	; (80052cc <_TrySendOverflowPacket+0xdc>)
 80052b2:	701a      	strb	r2, [r3, #0]
 80052b4:	e004      	b.n	80052c0 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80052b6:	4b05      	ldr	r3, [pc, #20]	; (80052cc <_TrySendOverflowPacket+0xdc>)
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	3301      	adds	r3, #1
 80052bc:	4a03      	ldr	r2, [pc, #12]	; (80052cc <_TrySendOverflowPacket+0xdc>)
 80052be:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80052c0:	693b      	ldr	r3, [r7, #16]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3730      	adds	r7, #48	; 0x30
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	200142e4 	.word	0x200142e4
 80052d0:	e0001004 	.word	0xe0001004

080052d4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b08a      	sub	sp, #40	; 0x28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80052e0:	4b98      	ldr	r3, [pc, #608]	; (8005544 <_SendPacket+0x270>)
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d010      	beq.n	800530a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80052e8:	4b96      	ldr	r3, [pc, #600]	; (8005544 <_SendPacket+0x270>)
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 812d 	beq.w	800554c <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80052f2:	4b94      	ldr	r3, [pc, #592]	; (8005544 <_SendPacket+0x270>)
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d109      	bne.n	800530e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80052fa:	f7ff ff79 	bl	80051f0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80052fe:	4b91      	ldr	r3, [pc, #580]	; (8005544 <_SendPacket+0x270>)
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	2b01      	cmp	r3, #1
 8005304:	f040 8124 	bne.w	8005550 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8005308:	e001      	b.n	800530e <_SendPacket+0x3a>
    goto Send;
 800530a:	bf00      	nop
 800530c:	e000      	b.n	8005310 <_SendPacket+0x3c>
Send:
 800530e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b1f      	cmp	r3, #31
 8005314:	d809      	bhi.n	800532a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005316:	4b8b      	ldr	r3, [pc, #556]	; (8005544 <_SendPacket+0x270>)
 8005318:	69da      	ldr	r2, [r3, #28]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	fa22 f303 	lsr.w	r3, r2, r3
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	2b00      	cmp	r3, #0
 8005326:	f040 8115 	bne.w	8005554 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b17      	cmp	r3, #23
 800532e:	d807      	bhi.n	8005340 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	3b01      	subs	r3, #1
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	b2da      	uxtb	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	701a      	strb	r2, [r3, #0]
 800533e:	e0c4      	b.n	80054ca <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	2b7f      	cmp	r3, #127	; 0x7f
 800534c:	d912      	bls.n	8005374 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	09da      	lsrs	r2, r3, #7
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	3b01      	subs	r3, #1
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	b2d2      	uxtb	r2, r2
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	b2db      	uxtb	r3, r3
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	3a01      	subs	r2, #1
 8005366:	60fa      	str	r2, [r7, #12]
 8005368:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800536c:	b2da      	uxtb	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	701a      	strb	r2, [r3, #0]
 8005372:	e006      	b.n	8005382 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	3b01      	subs	r3, #1
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	b2da      	uxtb	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b7e      	cmp	r3, #126	; 0x7e
 8005386:	d807      	bhi.n	8005398 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	3b01      	subs	r3, #1
 800538c:	60fb      	str	r3, [r7, #12]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	b2da      	uxtb	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	701a      	strb	r2, [r3, #0]
 8005396:	e098      	b.n	80054ca <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800539e:	d212      	bcs.n	80053c6 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	09da      	lsrs	r2, r3, #7
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	3b01      	subs	r3, #1
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	b2d2      	uxtb	r2, r2
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	3a01      	subs	r2, #1
 80053b8:	60fa      	str	r2, [r7, #12]
 80053ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80053be:	b2da      	uxtb	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	701a      	strb	r2, [r3, #0]
 80053c4:	e081      	b.n	80054ca <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053cc:	d21d      	bcs.n	800540a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	0b9a      	lsrs	r2, r3, #14
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	3b01      	subs	r3, #1
 80053d6:	60fb      	str	r3, [r7, #12]
 80053d8:	b2d2      	uxtb	r2, r2
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	09db      	lsrs	r3, r3, #7
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	3a01      	subs	r2, #1
 80053e8:	60fa      	str	r2, [r7, #12]
 80053ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80053ee:	b2da      	uxtb	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	3a01      	subs	r2, #1
 80053fc:	60fa      	str	r2, [r7, #12]
 80053fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005402:	b2da      	uxtb	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	701a      	strb	r2, [r3, #0]
 8005408:	e05f      	b.n	80054ca <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005410:	d228      	bcs.n	8005464 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	0d5a      	lsrs	r2, r3, #21
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	3b01      	subs	r3, #1
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	b2d2      	uxtb	r2, r2
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	0b9b      	lsrs	r3, r3, #14
 8005426:	b2db      	uxtb	r3, r3
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	3a01      	subs	r2, #1
 800542c:	60fa      	str	r2, [r7, #12]
 800542e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005432:	b2da      	uxtb	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	09db      	lsrs	r3, r3, #7
 800543c:	b2db      	uxtb	r3, r3
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	3a01      	subs	r2, #1
 8005442:	60fa      	str	r2, [r7, #12]
 8005444:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005448:	b2da      	uxtb	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	b2db      	uxtb	r3, r3
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	3a01      	subs	r2, #1
 8005456:	60fa      	str	r2, [r7, #12]
 8005458:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800545c:	b2da      	uxtb	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	701a      	strb	r2, [r3, #0]
 8005462:	e032      	b.n	80054ca <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	0f1a      	lsrs	r2, r3, #28
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	3b01      	subs	r3, #1
 800546c:	60fb      	str	r3, [r7, #12]
 800546e:	b2d2      	uxtb	r2, r2
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	0d5b      	lsrs	r3, r3, #21
 8005478:	b2db      	uxtb	r3, r3
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	3a01      	subs	r2, #1
 800547e:	60fa      	str	r2, [r7, #12]
 8005480:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005484:	b2da      	uxtb	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	0b9b      	lsrs	r3, r3, #14
 800548e:	b2db      	uxtb	r3, r3
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	3a01      	subs	r2, #1
 8005494:	60fa      	str	r2, [r7, #12]
 8005496:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800549a:	b2da      	uxtb	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	09db      	lsrs	r3, r3, #7
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	3a01      	subs	r2, #1
 80054aa:	60fa      	str	r2, [r7, #12]
 80054ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	3a01      	subs	r2, #1
 80054be:	60fa      	str	r2, [r7, #12]
 80054c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80054c4:	b2da      	uxtb	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80054ca:	4b1f      	ldr	r3, [pc, #124]	; (8005548 <_SendPacket+0x274>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80054d0:	4b1c      	ldr	r3, [pc, #112]	; (8005544 <_SendPacket+0x270>)
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	69ba      	ldr	r2, [r7, #24]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	627b      	str	r3, [r7, #36]	; 0x24
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	623b      	str	r3, [r7, #32]
 80054e2:	e00b      	b.n	80054fc <_SendPacket+0x228>
 80054e4:	6a3b      	ldr	r3, [r7, #32]
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ea:	1c59      	adds	r1, r3, #1
 80054ec:	6279      	str	r1, [r7, #36]	; 0x24
 80054ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054f2:	b2d2      	uxtb	r2, r2
 80054f4:	701a      	strb	r2, [r3, #0]
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	09db      	lsrs	r3, r3, #7
 80054fa:	623b      	str	r3, [r7, #32]
 80054fc:	6a3b      	ldr	r3, [r7, #32]
 80054fe:	2b7f      	cmp	r3, #127	; 0x7f
 8005500:	d8f0      	bhi.n	80054e4 <_SendPacket+0x210>
 8005502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005504:	1c5a      	adds	r2, r3, #1
 8005506:	627a      	str	r2, [r7, #36]	; 0x24
 8005508:	6a3a      	ldr	r2, [r7, #32]
 800550a:	b2d2      	uxtb	r2, r2
 800550c:	701a      	strb	r2, [r3, #0]
 800550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005510:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005512:	4b0c      	ldr	r3, [pc, #48]	; (8005544 <_SendPacket+0x270>)
 8005514:	785b      	ldrb	r3, [r3, #1]
 8005516:	4618      	mov	r0, r3
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	461a      	mov	r2, r3
 8005520:	68f9      	ldr	r1, [r7, #12]
 8005522:	f7fa fe65 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005526:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800552e:	4a05      	ldr	r2, [pc, #20]	; (8005544 <_SendPacket+0x270>)
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	60d3      	str	r3, [r2, #12]
 8005534:	e00f      	b.n	8005556 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005536:	4b03      	ldr	r3, [pc, #12]	; (8005544 <_SendPacket+0x270>)
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	3301      	adds	r3, #1
 800553c:	b2da      	uxtb	r2, r3
 800553e:	4b01      	ldr	r3, [pc, #4]	; (8005544 <_SendPacket+0x270>)
 8005540:	701a      	strb	r2, [r3, #0]
 8005542:	e008      	b.n	8005556 <_SendPacket+0x282>
 8005544:	200142e4 	.word	0x200142e4
 8005548:	e0001004 	.word	0xe0001004
    goto SendDone;
 800554c:	bf00      	nop
 800554e:	e002      	b.n	8005556 <_SendPacket+0x282>
      goto SendDone;
 8005550:	bf00      	nop
 8005552:	e000      	b.n	8005556 <_SendPacket+0x282>
      goto SendDone;
 8005554:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005556:	4b14      	ldr	r3, [pc, #80]	; (80055a8 <_SendPacket+0x2d4>)
 8005558:	7e1b      	ldrb	r3, [r3, #24]
 800555a:	4619      	mov	r1, r3
 800555c:	4a13      	ldr	r2, [pc, #76]	; (80055ac <_SendPacket+0x2d8>)
 800555e:	460b      	mov	r3, r1
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	440b      	add	r3, r1
 8005564:	00db      	lsls	r3, r3, #3
 8005566:	4413      	add	r3, r2
 8005568:	336c      	adds	r3, #108	; 0x6c
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	4b0e      	ldr	r3, [pc, #56]	; (80055a8 <_SendPacket+0x2d4>)
 800556e:	7e1b      	ldrb	r3, [r3, #24]
 8005570:	4618      	mov	r0, r3
 8005572:	490e      	ldr	r1, [pc, #56]	; (80055ac <_SendPacket+0x2d8>)
 8005574:	4603      	mov	r3, r0
 8005576:	005b      	lsls	r3, r3, #1
 8005578:	4403      	add	r3, r0
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	440b      	add	r3, r1
 800557e:	3370      	adds	r3, #112	; 0x70
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	429a      	cmp	r2, r3
 8005584:	d00b      	beq.n	800559e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005586:	4b08      	ldr	r3, [pc, #32]	; (80055a8 <_SendPacket+0x2d4>)
 8005588:	789b      	ldrb	r3, [r3, #2]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d107      	bne.n	800559e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800558e:	4b06      	ldr	r3, [pc, #24]	; (80055a8 <_SendPacket+0x2d4>)
 8005590:	2201      	movs	r2, #1
 8005592:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005594:	f7ff fdbc 	bl	8005110 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005598:	4b03      	ldr	r3, [pc, #12]	; (80055a8 <_SendPacket+0x2d4>)
 800559a:	2200      	movs	r2, #0
 800559c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800559e:	bf00      	nop
 80055a0:	3728      	adds	r7, #40	; 0x28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	200142e4 	.word	0x200142e4
 80055ac:	20012e24 	.word	0x20012e24

080055b0 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b08a      	sub	sp, #40	; 0x28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	460b      	mov	r3, r1
 80055ba:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	3301      	adds	r3, #1
 80055c6:	2b80      	cmp	r3, #128	; 0x80
 80055c8:	d80a      	bhi.n	80055e0 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	1c59      	adds	r1, r3, #1
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	6051      	str	r1, [r2, #4]
 80055d4:	78fa      	ldrb	r2, [r7, #3]
 80055d6:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	1c5a      	adds	r2, r3, #1
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	2b80      	cmp	r3, #128	; 0x80
 80055e6:	d15a      	bne.n	800569e <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691a      	ldr	r2, [r3, #16]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	b2d2      	uxtb	r2, r2
 80055f2:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	627b      	str	r3, [r7, #36]	; 0x24
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	623b      	str	r3, [r7, #32]
 8005608:	e00b      	b.n	8005622 <_StoreChar+0x72>
 800560a:	6a3b      	ldr	r3, [r7, #32]
 800560c:	b2da      	uxtb	r2, r3
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	1c59      	adds	r1, r3, #1
 8005612:	6279      	str	r1, [r7, #36]	; 0x24
 8005614:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005618:	b2d2      	uxtb	r2, r2
 800561a:	701a      	strb	r2, [r3, #0]
 800561c:	6a3b      	ldr	r3, [r7, #32]
 800561e:	09db      	lsrs	r3, r3, #7
 8005620:	623b      	str	r3, [r7, #32]
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	2b7f      	cmp	r3, #127	; 0x7f
 8005626:	d8f0      	bhi.n	800560a <_StoreChar+0x5a>
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	1c5a      	adds	r2, r3, #1
 800562c:	627a      	str	r2, [r7, #36]	; 0x24
 800562e:	6a3a      	ldr	r2, [r7, #32]
 8005630:	b2d2      	uxtb	r2, r2
 8005632:	701a      	strb	r2, [r3, #0]
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	61fb      	str	r3, [r7, #28]
 800563c:	2300      	movs	r3, #0
 800563e:	61bb      	str	r3, [r7, #24]
 8005640:	e00b      	b.n	800565a <_StoreChar+0xaa>
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	b2da      	uxtb	r2, r3
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	1c59      	adds	r1, r3, #1
 800564a:	61f9      	str	r1, [r7, #28]
 800564c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005650:	b2d2      	uxtb	r2, r2
 8005652:	701a      	strb	r2, [r3, #0]
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	09db      	lsrs	r3, r3, #7
 8005658:	61bb      	str	r3, [r7, #24]
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	2b7f      	cmp	r3, #127	; 0x7f
 800565e:	d8f0      	bhi.n	8005642 <_StoreChar+0x92>
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	1c5a      	adds	r2, r3, #1
 8005664:	61fa      	str	r2, [r7, #28]
 8005666:	69ba      	ldr	r2, [r7, #24]
 8005668:	b2d2      	uxtb	r2, r2
 800566a:	701a      	strb	r2, [r3, #0]
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	221a      	movs	r2, #26
 8005676:	6939      	ldr	r1, [r7, #16]
 8005678:	4618      	mov	r0, r3
 800567a:	f7ff fe2b 	bl	80052d4 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4618      	mov	r0, r3
 8005684:	f7ff fd38 	bl	80050f8 <_PreparePacket>
 8005688:	4602      	mov	r2, r0
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	1c5a      	adds	r2, r3, #1
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	611a      	str	r2, [r3, #16]
  }
}
 800569e:	bf00      	nop
 80056a0:	3728      	adds	r7, #40	; 0x28
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
	...

080056a8 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b08a      	sub	sp, #40	; 0x28
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
 80056b4:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80056ba:	2301      	movs	r3, #1
 80056bc:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80056be:	2301      	movs	r3, #1
 80056c0:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80056c2:	e007      	b.n	80056d4 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80056c4:	6a3a      	ldr	r2, [r7, #32]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056cc:	623b      	str	r3, [r7, #32]
    Width++;
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	3301      	adds	r3, #1
 80056d2:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80056d4:	6a3a      	ldr	r2, [r7, #32]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d2f3      	bcs.n	80056c4 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d901      	bls.n	80056e8 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80056e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d11f      	bne.n	8005732 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80056f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d01c      	beq.n	8005732 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80056f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d005      	beq.n	800570e <_PrintUnsigned+0x66>
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d102      	bne.n	800570e <_PrintUnsigned+0x66>
        c = '0';
 8005708:	2330      	movs	r3, #48	; 0x30
 800570a:	76fb      	strb	r3, [r7, #27]
 800570c:	e001      	b.n	8005712 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800570e:	2320      	movs	r3, #32
 8005710:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005712:	e007      	b.n	8005724 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005716:	3b01      	subs	r3, #1
 8005718:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800571a:	7efb      	ldrb	r3, [r7, #27]
 800571c:	4619      	mov	r1, r3
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f7ff ff46 	bl	80055b0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005726:	2b00      	cmp	r3, #0
 8005728:	d003      	beq.n	8005732 <_PrintUnsigned+0x8a>
 800572a:	69fa      	ldr	r2, [r7, #28]
 800572c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572e:	429a      	cmp	r2, r3
 8005730:	d3f0      	bcc.n	8005714 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d903      	bls.n	8005740 <_PrintUnsigned+0x98>
      NumDigits--;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	3b01      	subs	r3, #1
 800573c:	603b      	str	r3, [r7, #0]
 800573e:	e009      	b.n	8005754 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005744:	fbb2 f3f3 	udiv	r3, r2, r3
 8005748:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	429a      	cmp	r2, r3
 8005750:	d200      	bcs.n	8005754 <_PrintUnsigned+0xac>
        break;
 8005752:	e005      	b.n	8005760 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	fb02 f303 	mul.w	r3, r2, r3
 800575c:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800575e:	e7e8      	b.n	8005732 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005760:	68ba      	ldr	r2, [r7, #8]
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005764:	fbb2 f3f3 	udiv	r3, r2, r3
 8005768:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800576e:	fb02 f303 	mul.w	r3, r2, r3
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005778:	4a15      	ldr	r2, [pc, #84]	; (80057d0 <_PrintUnsigned+0x128>)
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	4413      	add	r3, r2
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	4619      	mov	r1, r3
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f7ff ff14 	bl	80055b0 <_StoreChar>
    Digit /= Base;
 8005788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005790:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1e3      	bne.n	8005760 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d011      	beq.n	80057c6 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80057a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00e      	beq.n	80057c6 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80057a8:	e006      	b.n	80057b8 <_PrintUnsigned+0x110>
        FieldWidth--;
 80057aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ac:	3b01      	subs	r3, #1
 80057ae:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80057b0:	2120      	movs	r1, #32
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f7ff fefc 	bl	80055b0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80057b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <_PrintUnsigned+0x11e>
 80057be:	69fa      	ldr	r2, [r7, #28]
 80057c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d3f1      	bcc.n	80057aa <_PrintUnsigned+0x102>
      }
    }
  }
}
 80057c6:	bf00      	nop
 80057c8:	3728      	adds	r7, #40	; 0x28
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	08007140 	.word	0x08007140

080057d4 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b088      	sub	sp, #32
 80057d8:	af02      	add	r7, sp, #8
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
 80057e0:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	bfb8      	it	lt
 80057e8:	425b      	neglt	r3, r3
 80057ea:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80057ec:	2301      	movs	r3, #1
 80057ee:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80057f0:	e007      	b.n	8005802 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80057fa:	613b      	str	r3, [r7, #16]
    Width++;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	3301      	adds	r3, #1
 8005800:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	429a      	cmp	r2, r3
 8005808:	daf3      	bge.n	80057f2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800580a:	683a      	ldr	r2, [r7, #0]
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	429a      	cmp	r2, r3
 8005810:	d901      	bls.n	8005816 <_PrintInt+0x42>
    Width = NumDigits;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005816:	6a3b      	ldr	r3, [r7, #32]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00a      	beq.n	8005832 <_PrintInt+0x5e>
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2b00      	cmp	r3, #0
 8005820:	db04      	blt.n	800582c <_PrintInt+0x58>
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	f003 0304 	and.w	r3, r3, #4
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <_PrintInt+0x5e>
    FieldWidth--;
 800582c:	6a3b      	ldr	r3, [r7, #32]
 800582e:	3b01      	subs	r3, #1
 8005830:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005834:	f003 0302 	and.w	r3, r3, #2
 8005838:	2b00      	cmp	r3, #0
 800583a:	d002      	beq.n	8005842 <_PrintInt+0x6e>
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d016      	beq.n	8005870 <_PrintInt+0x9c>
 8005842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	2b00      	cmp	r3, #0
 800584a:	d111      	bne.n	8005870 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00e      	beq.n	8005870 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005852:	e006      	b.n	8005862 <_PrintInt+0x8e>
        FieldWidth--;
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	3b01      	subs	r3, #1
 8005858:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800585a:	2120      	movs	r1, #32
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f7ff fea7 	bl	80055b0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005862:	6a3b      	ldr	r3, [r7, #32]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d003      	beq.n	8005870 <_PrintInt+0x9c>
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	429a      	cmp	r2, r3
 800586e:	d3f1      	bcc.n	8005854 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	2b00      	cmp	r3, #0
 8005874:	da07      	bge.n	8005886 <_PrintInt+0xb2>
    v = -v;
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	425b      	negs	r3, r3
 800587a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 800587c:	212d      	movs	r1, #45	; 0x2d
 800587e:	68f8      	ldr	r0, [r7, #12]
 8005880:	f7ff fe96 	bl	80055b0 <_StoreChar>
 8005884:	e008      	b.n	8005898 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005888:	f003 0304 	and.w	r3, r3, #4
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005890:	212b      	movs	r1, #43	; 0x2b
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f7ff fe8c 	bl	80055b0 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	f003 0302 	and.w	r3, r3, #2
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d019      	beq.n	80058d6 <_PrintInt+0x102>
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d114      	bne.n	80058d6 <_PrintInt+0x102>
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d111      	bne.n	80058d6 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00e      	beq.n	80058d6 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80058b8:	e006      	b.n	80058c8 <_PrintInt+0xf4>
        FieldWidth--;
 80058ba:	6a3b      	ldr	r3, [r7, #32]
 80058bc:	3b01      	subs	r3, #1
 80058be:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80058c0:	2130      	movs	r1, #48	; 0x30
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f7ff fe74 	bl	80055b0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80058c8:	6a3b      	ldr	r3, [r7, #32]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <_PrintInt+0x102>
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	6a3b      	ldr	r3, [r7, #32]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d3f1      	bcc.n	80058ba <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80058d6:	68b9      	ldr	r1, [r7, #8]
 80058d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058da:	9301      	str	r3, [sp, #4]
 80058dc:	6a3b      	ldr	r3, [r7, #32]
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f7ff fedf 	bl	80056a8 <_PrintUnsigned>
}
 80058ea:	bf00      	nop
 80058ec:	3718      	adds	r7, #24
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
	...

080058f4 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b098      	sub	sp, #96	; 0x60
 80058f8:	af02      	add	r7, sp, #8
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005900:	f3ef 8311 	mrs	r3, BASEPRI
 8005904:	f04f 0120 	mov.w	r1, #32
 8005908:	f381 8811 	msr	BASEPRI, r1
 800590c:	633b      	str	r3, [r7, #48]	; 0x30
 800590e:	48b7      	ldr	r0, [pc, #732]	; (8005bec <_VPrintTarget+0x2f8>)
 8005910:	f7ff fbf2 	bl	80050f8 <_PreparePacket>
 8005914:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005916:	4bb5      	ldr	r3, [pc, #724]	; (8005bec <_VPrintTarget+0x2f8>)
 8005918:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800591a:	2300      	movs	r3, #0
 800591c:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 800591e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005920:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	3301      	adds	r3, #1
 8005926:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	3301      	adds	r3, #1
 8005938:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800593a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800593e:	2b00      	cmp	r3, #0
 8005940:	f000 8183 	beq.w	8005c4a <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005944:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005948:	2b25      	cmp	r3, #37	; 0x25
 800594a:	f040 8170 	bne.w	8005c2e <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800594e:	2300      	movs	r3, #0
 8005950:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005952:	2301      	movs	r3, #1
 8005954:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 800595e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005962:	3b23      	subs	r3, #35	; 0x23
 8005964:	2b0d      	cmp	r3, #13
 8005966:	d83f      	bhi.n	80059e8 <_VPrintTarget+0xf4>
 8005968:	a201      	add	r2, pc, #4	; (adr r2, 8005970 <_VPrintTarget+0x7c>)
 800596a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596e:	bf00      	nop
 8005970:	080059d9 	.word	0x080059d9
 8005974:	080059e9 	.word	0x080059e9
 8005978:	080059e9 	.word	0x080059e9
 800597c:	080059e9 	.word	0x080059e9
 8005980:	080059e9 	.word	0x080059e9
 8005984:	080059e9 	.word	0x080059e9
 8005988:	080059e9 	.word	0x080059e9
 800598c:	080059e9 	.word	0x080059e9
 8005990:	080059c9 	.word	0x080059c9
 8005994:	080059e9 	.word	0x080059e9
 8005998:	080059a9 	.word	0x080059a9
 800599c:	080059e9 	.word	0x080059e9
 80059a0:	080059e9 	.word	0x080059e9
 80059a4:	080059b9 	.word	0x080059b9
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80059a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059aa:	f043 0301 	orr.w	r3, r3, #1
 80059ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	3301      	adds	r3, #1
 80059b4:	60fb      	str	r3, [r7, #12]
 80059b6:	e01a      	b.n	80059ee <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80059b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ba:	f043 0302 	orr.w	r3, r3, #2
 80059be:	64bb      	str	r3, [r7, #72]	; 0x48
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	3301      	adds	r3, #1
 80059c4:	60fb      	str	r3, [r7, #12]
 80059c6:	e012      	b.n	80059ee <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80059c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ca:	f043 0304 	orr.w	r3, r3, #4
 80059ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	3301      	adds	r3, #1
 80059d4:	60fb      	str	r3, [r7, #12]
 80059d6:	e00a      	b.n	80059ee <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80059d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059da:	f043 0308 	orr.w	r3, r3, #8
 80059de:	64bb      	str	r3, [r7, #72]	; 0x48
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	3301      	adds	r3, #1
 80059e4:	60fb      	str	r3, [r7, #12]
 80059e6:	e002      	b.n	80059ee <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80059e8:	2300      	movs	r3, #0
 80059ea:	653b      	str	r3, [r7, #80]	; 0x50
 80059ec:	bf00      	nop
        }
      } while (v);
 80059ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1b0      	bne.n	8005956 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80059f4:	2300      	movs	r3, #0
 80059f6:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005a00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a04:	2b2f      	cmp	r3, #47	; 0x2f
 8005a06:	d912      	bls.n	8005a2e <_VPrintTarget+0x13a>
 8005a08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a0c:	2b39      	cmp	r3, #57	; 0x39
 8005a0e:	d80e      	bhi.n	8005a2e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	3301      	adds	r3, #1
 8005a14:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005a16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a18:	4613      	mov	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	005b      	lsls	r3, r3, #1
 8005a20:	461a      	mov	r2, r3
 8005a22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a26:	4413      	add	r3, r2
 8005a28:	3b30      	subs	r3, #48	; 0x30
 8005a2a:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005a2c:	e7e4      	b.n	80059f8 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005a3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a3e:	2b2e      	cmp	r3, #46	; 0x2e
 8005a40:	d11d      	bne.n	8005a7e <_VPrintTarget+0x18a>
        sFormat++;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	3301      	adds	r3, #1
 8005a46:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005a50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a54:	2b2f      	cmp	r3, #47	; 0x2f
 8005a56:	d912      	bls.n	8005a7e <_VPrintTarget+0x18a>
 8005a58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a5c:	2b39      	cmp	r3, #57	; 0x39
 8005a5e:	d80e      	bhi.n	8005a7e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	3301      	adds	r3, #1
 8005a64:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005a66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a68:	4613      	mov	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4413      	add	r3, r2
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	461a      	mov	r2, r3
 8005a72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a76:	4413      	add	r3, r2
 8005a78:	3b30      	subs	r3, #48	; 0x30
 8005a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005a7c:	e7e4      	b.n	8005a48 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005a86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a8a:	2b6c      	cmp	r3, #108	; 0x6c
 8005a8c:	d003      	beq.n	8005a96 <_VPrintTarget+0x1a2>
 8005a8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a92:	2b68      	cmp	r3, #104	; 0x68
 8005a94:	d107      	bne.n	8005aa6 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005aa4:	e7ef      	b.n	8005a86 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005aa6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005aaa:	2b25      	cmp	r3, #37	; 0x25
 8005aac:	f000 80b3 	beq.w	8005c16 <_VPrintTarget+0x322>
 8005ab0:	2b25      	cmp	r3, #37	; 0x25
 8005ab2:	f2c0 80b7 	blt.w	8005c24 <_VPrintTarget+0x330>
 8005ab6:	2b78      	cmp	r3, #120	; 0x78
 8005ab8:	f300 80b4 	bgt.w	8005c24 <_VPrintTarget+0x330>
 8005abc:	2b58      	cmp	r3, #88	; 0x58
 8005abe:	f2c0 80b1 	blt.w	8005c24 <_VPrintTarget+0x330>
 8005ac2:	3b58      	subs	r3, #88	; 0x58
 8005ac4:	2b20      	cmp	r3, #32
 8005ac6:	f200 80ad 	bhi.w	8005c24 <_VPrintTarget+0x330>
 8005aca:	a201      	add	r2, pc, #4	; (adr r2, 8005ad0 <_VPrintTarget+0x1dc>)
 8005acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad0:	08005bc7 	.word	0x08005bc7
 8005ad4:	08005c25 	.word	0x08005c25
 8005ad8:	08005c25 	.word	0x08005c25
 8005adc:	08005c25 	.word	0x08005c25
 8005ae0:	08005c25 	.word	0x08005c25
 8005ae4:	08005c25 	.word	0x08005c25
 8005ae8:	08005c25 	.word	0x08005c25
 8005aec:	08005c25 	.word	0x08005c25
 8005af0:	08005c25 	.word	0x08005c25
 8005af4:	08005c25 	.word	0x08005c25
 8005af8:	08005c25 	.word	0x08005c25
 8005afc:	08005b55 	.word	0x08005b55
 8005b00:	08005b7b 	.word	0x08005b7b
 8005b04:	08005c25 	.word	0x08005c25
 8005b08:	08005c25 	.word	0x08005c25
 8005b0c:	08005c25 	.word	0x08005c25
 8005b10:	08005c25 	.word	0x08005c25
 8005b14:	08005c25 	.word	0x08005c25
 8005b18:	08005c25 	.word	0x08005c25
 8005b1c:	08005c25 	.word	0x08005c25
 8005b20:	08005c25 	.word	0x08005c25
 8005b24:	08005c25 	.word	0x08005c25
 8005b28:	08005c25 	.word	0x08005c25
 8005b2c:	08005c25 	.word	0x08005c25
 8005b30:	08005bf1 	.word	0x08005bf1
 8005b34:	08005c25 	.word	0x08005c25
 8005b38:	08005c25 	.word	0x08005c25
 8005b3c:	08005c25 	.word	0x08005c25
 8005b40:	08005c25 	.word	0x08005c25
 8005b44:	08005ba1 	.word	0x08005ba1
 8005b48:	08005c25 	.word	0x08005c25
 8005b4c:	08005c25 	.word	0x08005c25
 8005b50:	08005bc7 	.word	0x08005bc7
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	1d19      	adds	r1, r3, #4
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	6011      	str	r1, [r2, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005b62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8005b68:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005b6c:	f107 0314 	add.w	r3, r7, #20
 8005b70:	4611      	mov	r1, r2
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7ff fd1c 	bl	80055b0 <_StoreChar>
        break;
 8005b78:	e055      	b.n	8005c26 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	1d19      	adds	r1, r3, #4
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	6011      	str	r1, [r2, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005b88:	f107 0014 	add.w	r0, r7, #20
 8005b8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b8e:	9301      	str	r3, [sp, #4]
 8005b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b96:	220a      	movs	r2, #10
 8005b98:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005b9a:	f7ff fe1b 	bl	80057d4 <_PrintInt>
        break;
 8005b9e:	e042      	b.n	8005c26 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	1d19      	adds	r1, r3, #4
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	6011      	str	r1, [r2, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005bae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005bb0:	f107 0014 	add.w	r0, r7, #20
 8005bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bb6:	9301      	str	r3, [sp, #4]
 8005bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bba:	9300      	str	r3, [sp, #0]
 8005bbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bbe:	220a      	movs	r2, #10
 8005bc0:	f7ff fd72 	bl	80056a8 <_PrintUnsigned>
        break;
 8005bc4:	e02f      	b.n	8005c26 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	1d19      	adds	r1, r3, #4
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	6011      	str	r1, [r2, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005bd4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005bd6:	f107 0014 	add.w	r0, r7, #20
 8005bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bdc:	9301      	str	r3, [sp, #4]
 8005bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005be4:	2210      	movs	r2, #16
 8005be6:	f7ff fd5f 	bl	80056a8 <_PrintUnsigned>
        break;
 8005bea:	e01c      	b.n	8005c26 <_VPrintTarget+0x332>
 8005bec:	20014314 	.word	0x20014314
      case 'p':
        v = va_arg(*pParamList, int);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	1d19      	adds	r1, r3, #4
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	6011      	str	r1, [r2, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005bfe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c00:	f107 0014 	add.w	r0, r7, #20
 8005c04:	2300      	movs	r3, #0
 8005c06:	9301      	str	r3, [sp, #4]
 8005c08:	2308      	movs	r3, #8
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	2308      	movs	r3, #8
 8005c0e:	2210      	movs	r2, #16
 8005c10:	f7ff fd4a 	bl	80056a8 <_PrintUnsigned>
        break;
 8005c14:	e007      	b.n	8005c26 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005c16:	f107 0314 	add.w	r3, r7, #20
 8005c1a:	2125      	movs	r1, #37	; 0x25
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7ff fcc7 	bl	80055b0 <_StoreChar>
        break;
 8005c22:	e000      	b.n	8005c26 <_VPrintTarget+0x332>
      default:
        break;
 8005c24:	bf00      	nop
      }
      sFormat++;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	e007      	b.n	8005c3e <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005c2e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005c32:	f107 0314 	add.w	r3, r7, #20
 8005c36:	4611      	mov	r1, r2
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7ff fcb9 	bl	80055b0 <_StoreChar>
    }
  } while (*sFormat);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f47f ae72 	bne.w	800592c <_VPrintTarget+0x38>
 8005c48:	e000      	b.n	8005c4c <_VPrintTarget+0x358>
      break;
 8005c4a:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d041      	beq.n	8005cd6 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8005c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	b2d2      	uxtb	r2, r2
 8005c58:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	643b      	str	r3, [r7, #64]	; 0x40
 8005c5e:	6a3b      	ldr	r3, [r7, #32]
 8005c60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c62:	e00b      	b.n	8005c7c <_VPrintTarget+0x388>
 8005c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c66:	b2da      	uxtb	r2, r3
 8005c68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c6a:	1c59      	adds	r1, r3, #1
 8005c6c:	6439      	str	r1, [r7, #64]	; 0x40
 8005c6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c72:	b2d2      	uxtb	r2, r2
 8005c74:	701a      	strb	r2, [r3, #0]
 8005c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c78:	09db      	lsrs	r3, r3, #7
 8005c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c7e:	2b7f      	cmp	r3, #127	; 0x7f
 8005c80:	d8f0      	bhi.n	8005c64 <_VPrintTarget+0x370>
 8005c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c84:	1c5a      	adds	r2, r3, #1
 8005c86:	643a      	str	r2, [r7, #64]	; 0x40
 8005c88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c8a:	b2d2      	uxtb	r2, r2
 8005c8c:	701a      	strb	r2, [r3, #0]
 8005c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c90:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c96:	2300      	movs	r3, #0
 8005c98:	637b      	str	r3, [r7, #52]	; 0x34
 8005c9a:	e00b      	b.n	8005cb4 <_VPrintTarget+0x3c0>
 8005c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c9e:	b2da      	uxtb	r2, r3
 8005ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca2:	1c59      	adds	r1, r3, #1
 8005ca4:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ca6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005caa:	b2d2      	uxtb	r2, r2
 8005cac:	701a      	strb	r2, [r3, #0]
 8005cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb0:	09db      	lsrs	r3, r3, #7
 8005cb2:	637b      	str	r3, [r7, #52]	; 0x34
 8005cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb6:	2b7f      	cmp	r3, #127	; 0x7f
 8005cb8:	d8f0      	bhi.n	8005c9c <_VPrintTarget+0x3a8>
 8005cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbc:	1c5a      	adds	r2, r3, #1
 8005cbe:	63ba      	str	r2, [r7, #56]	; 0x38
 8005cc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cc2:	b2d2      	uxtb	r2, r2
 8005cc4:	701a      	strb	r2, [r3, #0]
 8005cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc8:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	69b9      	ldr	r1, [r7, #24]
 8005cce:	221a      	movs	r2, #26
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7ff faff 	bl	80052d4 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd8:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005cdc:	bf00      	nop
 8005cde:	3758      	adds	r7, #88	; 0x58
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af02      	add	r7, sp, #8
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
 8005cf0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005cf8:	4917      	ldr	r1, [pc, #92]	; (8005d58 <SEGGER_SYSVIEW_Init+0x74>)
 8005cfa:	4818      	ldr	r0, [pc, #96]	; (8005d5c <SEGGER_SYSVIEW_Init+0x78>)
 8005cfc:	f7ff f8dc 	bl	8004eb8 <SEGGER_RTT_AllocUpBuffer>
 8005d00:	4603      	mov	r3, r0
 8005d02:	b2da      	uxtb	r2, r3
 8005d04:	4b16      	ldr	r3, [pc, #88]	; (8005d60 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d06:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005d08:	4b15      	ldr	r3, [pc, #84]	; (8005d60 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d0a:	785a      	ldrb	r2, [r3, #1]
 8005d0c:	4b14      	ldr	r3, [pc, #80]	; (8005d60 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d0e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005d10:	4b13      	ldr	r3, [pc, #76]	; (8005d60 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d12:	7e1b      	ldrb	r3, [r3, #24]
 8005d14:	4618      	mov	r0, r3
 8005d16:	2300      	movs	r3, #0
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	2308      	movs	r3, #8
 8005d1c:	4a11      	ldr	r2, [pc, #68]	; (8005d64 <SEGGER_SYSVIEW_Init+0x80>)
 8005d1e:	490f      	ldr	r1, [pc, #60]	; (8005d5c <SEGGER_SYSVIEW_Init+0x78>)
 8005d20:	f7ff f94e 	bl	8004fc0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005d24:	4b0e      	ldr	r3, [pc, #56]	; (8005d60 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d26:	2200      	movs	r2, #0
 8005d28:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005d2a:	4b0f      	ldr	r3, [pc, #60]	; (8005d68 <SEGGER_SYSVIEW_Init+0x84>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a0c      	ldr	r2, [pc, #48]	; (8005d60 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d30:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005d32:	4a0b      	ldr	r2, [pc, #44]	; (8005d60 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005d38:	4a09      	ldr	r2, [pc, #36]	; (8005d60 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005d3e:	4a08      	ldr	r2, [pc, #32]	; (8005d60 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005d44:	4a06      	ldr	r2, [pc, #24]	; (8005d60 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005d4a:	4b05      	ldr	r3, [pc, #20]	; (8005d60 <SEGGER_SYSVIEW_Init+0x7c>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005d50:	bf00      	nop
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	200132dc 	.word	0x200132dc
 8005d5c:	08007054 	.word	0x08007054
 8005d60:	200142e4 	.word	0x200142e4
 8005d64:	200142dc 	.word	0x200142dc
 8005d68:	e0001004 	.word	0xe0001004

08005d6c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005d74:	4a04      	ldr	r2, [pc, #16]	; (8005d88 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6113      	str	r3, [r2, #16]
}
 8005d7a:	bf00      	nop
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	200142e4 	.word	0x200142e4

08005d8c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005d94:	f3ef 8311 	mrs	r3, BASEPRI
 8005d98:	f04f 0120 	mov.w	r1, #32
 8005d9c:	f381 8811 	msr	BASEPRI, r1
 8005da0:	60fb      	str	r3, [r7, #12]
 8005da2:	4808      	ldr	r0, [pc, #32]	; (8005dc4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005da4:	f7ff f9a8 	bl	80050f8 <_PreparePacket>
 8005da8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	68b9      	ldr	r1, [r7, #8]
 8005dae:	68b8      	ldr	r0, [r7, #8]
 8005db0:	f7ff fa90 	bl	80052d4 <_SendPacket>
  RECORD_END();
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f383 8811 	msr	BASEPRI, r3
}
 8005dba:	bf00      	nop
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	20014314 	.word	0x20014314

08005dc8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b088      	sub	sp, #32
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005dd2:	f3ef 8311 	mrs	r3, BASEPRI
 8005dd6:	f04f 0120 	mov.w	r1, #32
 8005dda:	f381 8811 	msr	BASEPRI, r1
 8005dde:	617b      	str	r3, [r7, #20]
 8005de0:	4816      	ldr	r0, [pc, #88]	; (8005e3c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005de2:	f7ff f989 	bl	80050f8 <_PreparePacket>
 8005de6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	61fb      	str	r3, [r7, #28]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	61bb      	str	r3, [r7, #24]
 8005df4:	e00b      	b.n	8005e0e <SEGGER_SYSVIEW_RecordU32+0x46>
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	b2da      	uxtb	r2, r3
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	1c59      	adds	r1, r3, #1
 8005dfe:	61f9      	str	r1, [r7, #28]
 8005e00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e04:	b2d2      	uxtb	r2, r2
 8005e06:	701a      	strb	r2, [r3, #0]
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	09db      	lsrs	r3, r3, #7
 8005e0c:	61bb      	str	r3, [r7, #24]
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	2b7f      	cmp	r3, #127	; 0x7f
 8005e12:	d8f0      	bhi.n	8005df6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	1c5a      	adds	r2, r3, #1
 8005e18:	61fa      	str	r2, [r7, #28]
 8005e1a:	69ba      	ldr	r2, [r7, #24]
 8005e1c:	b2d2      	uxtb	r2, r2
 8005e1e:	701a      	strb	r2, [r3, #0]
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	68f9      	ldr	r1, [r7, #12]
 8005e28:	6938      	ldr	r0, [r7, #16]
 8005e2a:	f7ff fa53 	bl	80052d4 <_SendPacket>
  RECORD_END();
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f383 8811 	msr	BASEPRI, r3
}
 8005e34:	bf00      	nop
 8005e36:	3720      	adds	r7, #32
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	20014314 	.word	0x20014314

08005e40 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b08c      	sub	sp, #48	; 0x30
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005e4c:	f3ef 8311 	mrs	r3, BASEPRI
 8005e50:	f04f 0120 	mov.w	r1, #32
 8005e54:	f381 8811 	msr	BASEPRI, r1
 8005e58:	61fb      	str	r3, [r7, #28]
 8005e5a:	4825      	ldr	r0, [pc, #148]	; (8005ef0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005e5c:	f7ff f94c 	bl	80050f8 <_PreparePacket>
 8005e60:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e6e:	e00b      	b.n	8005e88 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e72:	b2da      	uxtb	r2, r3
 8005e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e76:	1c59      	adds	r1, r3, #1
 8005e78:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005e7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e7e:	b2d2      	uxtb	r2, r2
 8005e80:	701a      	strb	r2, [r3, #0]
 8005e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e84:	09db      	lsrs	r3, r3, #7
 8005e86:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8a:	2b7f      	cmp	r3, #127	; 0x7f
 8005e8c:	d8f0      	bhi.n	8005e70 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e90:	1c5a      	adds	r2, r3, #1
 8005e92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e96:	b2d2      	uxtb	r2, r2
 8005e98:	701a      	strb	r2, [r3, #0]
 8005e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	623b      	str	r3, [r7, #32]
 8005ea6:	e00b      	b.n	8005ec0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005ea8:	6a3b      	ldr	r3, [r7, #32]
 8005eaa:	b2da      	uxtb	r2, r3
 8005eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eae:	1c59      	adds	r1, r3, #1
 8005eb0:	6279      	str	r1, [r7, #36]	; 0x24
 8005eb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005eb6:	b2d2      	uxtb	r2, r2
 8005eb8:	701a      	strb	r2, [r3, #0]
 8005eba:	6a3b      	ldr	r3, [r7, #32]
 8005ebc:	09db      	lsrs	r3, r3, #7
 8005ebe:	623b      	str	r3, [r7, #32]
 8005ec0:	6a3b      	ldr	r3, [r7, #32]
 8005ec2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ec4:	d8f0      	bhi.n	8005ea8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec8:	1c5a      	adds	r2, r3, #1
 8005eca:	627a      	str	r2, [r7, #36]	; 0x24
 8005ecc:	6a3a      	ldr	r2, [r7, #32]
 8005ece:	b2d2      	uxtb	r2, r2
 8005ed0:	701a      	strb	r2, [r3, #0]
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	6979      	ldr	r1, [r7, #20]
 8005eda:	69b8      	ldr	r0, [r7, #24]
 8005edc:	f7ff f9fa 	bl	80052d4 <_SendPacket>
  RECORD_END();
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	f383 8811 	msr	BASEPRI, r3
}
 8005ee6:	bf00      	nop
 8005ee8:	3730      	adds	r7, #48	; 0x30
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	20014314 	.word	0x20014314

08005ef4 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b08e      	sub	sp, #56	; 0x38
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
 8005f00:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f02:	f3ef 8311 	mrs	r3, BASEPRI
 8005f06:	f04f 0120 	mov.w	r1, #32
 8005f0a:	f381 8811 	msr	BASEPRI, r1
 8005f0e:	61fb      	str	r3, [r7, #28]
 8005f10:	4832      	ldr	r0, [pc, #200]	; (8005fdc <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005f12:	f7ff f8f1 	bl	80050f8 <_PreparePacket>
 8005f16:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	637b      	str	r3, [r7, #52]	; 0x34
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	633b      	str	r3, [r7, #48]	; 0x30
 8005f24:	e00b      	b.n	8005f3e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f2c:	1c59      	adds	r1, r3, #1
 8005f2e:	6379      	str	r1, [r7, #52]	; 0x34
 8005f30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f34:	b2d2      	uxtb	r2, r2
 8005f36:	701a      	strb	r2, [r3, #0]
 8005f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3a:	09db      	lsrs	r3, r3, #7
 8005f3c:	633b      	str	r3, [r7, #48]	; 0x30
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f40:	2b7f      	cmp	r3, #127	; 0x7f
 8005f42:	d8f0      	bhi.n	8005f26 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f46:	1c5a      	adds	r2, r3, #1
 8005f48:	637a      	str	r2, [r7, #52]	; 0x34
 8005f4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f4c:	b2d2      	uxtb	r2, r2
 8005f4e:	701a      	strb	r2, [r3, #0]
 8005f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f52:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f5c:	e00b      	b.n	8005f76 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f64:	1c59      	adds	r1, r3, #1
 8005f66:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005f68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f6c:	b2d2      	uxtb	r2, r2
 8005f6e:	701a      	strb	r2, [r3, #0]
 8005f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f72:	09db      	lsrs	r3, r3, #7
 8005f74:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f78:	2b7f      	cmp	r3, #127	; 0x7f
 8005f7a:	d8f0      	bhi.n	8005f5e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7e:	1c5a      	adds	r2, r3, #1
 8005f80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f84:	b2d2      	uxtb	r2, r2
 8005f86:	701a      	strb	r2, [r3, #0]
 8005f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	623b      	str	r3, [r7, #32]
 8005f94:	e00b      	b.n	8005fae <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005f96:	6a3b      	ldr	r3, [r7, #32]
 8005f98:	b2da      	uxtb	r2, r3
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9c:	1c59      	adds	r1, r3, #1
 8005f9e:	6279      	str	r1, [r7, #36]	; 0x24
 8005fa0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fa4:	b2d2      	uxtb	r2, r2
 8005fa6:	701a      	strb	r2, [r3, #0]
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	09db      	lsrs	r3, r3, #7
 8005fac:	623b      	str	r3, [r7, #32]
 8005fae:	6a3b      	ldr	r3, [r7, #32]
 8005fb0:	2b7f      	cmp	r3, #127	; 0x7f
 8005fb2:	d8f0      	bhi.n	8005f96 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb6:	1c5a      	adds	r2, r3, #1
 8005fb8:	627a      	str	r2, [r7, #36]	; 0x24
 8005fba:	6a3a      	ldr	r2, [r7, #32]
 8005fbc:	b2d2      	uxtb	r2, r2
 8005fbe:	701a      	strb	r2, [r3, #0]
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	6979      	ldr	r1, [r7, #20]
 8005fc8:	69b8      	ldr	r0, [r7, #24]
 8005fca:	f7ff f983 	bl	80052d4 <_SendPacket>
  RECORD_END();
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	f383 8811 	msr	BASEPRI, r3
}
 8005fd4:	bf00      	nop
 8005fd6:	3738      	adds	r7, #56	; 0x38
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	20014314 	.word	0x20014314

08005fe0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b090      	sub	sp, #64	; 0x40
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
 8005fec:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005fee:	f3ef 8311 	mrs	r3, BASEPRI
 8005ff2:	f04f 0120 	mov.w	r1, #32
 8005ff6:	f381 8811 	msr	BASEPRI, r1
 8005ffa:	61fb      	str	r3, [r7, #28]
 8005ffc:	4840      	ldr	r0, [pc, #256]	; (8006100 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005ffe:	f7ff f87b 	bl	80050f8 <_PreparePacket>
 8006002:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006010:	e00b      	b.n	800602a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006014:	b2da      	uxtb	r2, r3
 8006016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006018:	1c59      	adds	r1, r3, #1
 800601a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800601c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006020:	b2d2      	uxtb	r2, r2
 8006022:	701a      	strb	r2, [r3, #0]
 8006024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006026:	09db      	lsrs	r3, r3, #7
 8006028:	63bb      	str	r3, [r7, #56]	; 0x38
 800602a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602c:	2b7f      	cmp	r3, #127	; 0x7f
 800602e:	d8f0      	bhi.n	8006012 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006032:	1c5a      	adds	r2, r3, #1
 8006034:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006036:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006038:	b2d2      	uxtb	r2, r2
 800603a:	701a      	strb	r2, [r3, #0]
 800603c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800603e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	637b      	str	r3, [r7, #52]	; 0x34
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	633b      	str	r3, [r7, #48]	; 0x30
 8006048:	e00b      	b.n	8006062 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800604a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604c:	b2da      	uxtb	r2, r3
 800604e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006050:	1c59      	adds	r1, r3, #1
 8006052:	6379      	str	r1, [r7, #52]	; 0x34
 8006054:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006058:	b2d2      	uxtb	r2, r2
 800605a:	701a      	strb	r2, [r3, #0]
 800605c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605e:	09db      	lsrs	r3, r3, #7
 8006060:	633b      	str	r3, [r7, #48]	; 0x30
 8006062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006064:	2b7f      	cmp	r3, #127	; 0x7f
 8006066:	d8f0      	bhi.n	800604a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800606a:	1c5a      	adds	r2, r3, #1
 800606c:	637a      	str	r2, [r7, #52]	; 0x34
 800606e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006070:	b2d2      	uxtb	r2, r2
 8006072:	701a      	strb	r2, [r3, #0]
 8006074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006076:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006080:	e00b      	b.n	800609a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006084:	b2da      	uxtb	r2, r3
 8006086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006088:	1c59      	adds	r1, r3, #1
 800608a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800608c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006090:	b2d2      	uxtb	r2, r2
 8006092:	701a      	strb	r2, [r3, #0]
 8006094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006096:	09db      	lsrs	r3, r3, #7
 8006098:	62bb      	str	r3, [r7, #40]	; 0x28
 800609a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609c:	2b7f      	cmp	r3, #127	; 0x7f
 800609e:	d8f0      	bhi.n	8006082 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80060a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a2:	1c5a      	adds	r2, r3, #1
 80060a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060a8:	b2d2      	uxtb	r2, r2
 80060aa:	701a      	strb	r2, [r3, #0]
 80060ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	627b      	str	r3, [r7, #36]	; 0x24
 80060b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060b6:	623b      	str	r3, [r7, #32]
 80060b8:	e00b      	b.n	80060d2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80060ba:	6a3b      	ldr	r3, [r7, #32]
 80060bc:	b2da      	uxtb	r2, r3
 80060be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c0:	1c59      	adds	r1, r3, #1
 80060c2:	6279      	str	r1, [r7, #36]	; 0x24
 80060c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060c8:	b2d2      	uxtb	r2, r2
 80060ca:	701a      	strb	r2, [r3, #0]
 80060cc:	6a3b      	ldr	r3, [r7, #32]
 80060ce:	09db      	lsrs	r3, r3, #7
 80060d0:	623b      	str	r3, [r7, #32]
 80060d2:	6a3b      	ldr	r3, [r7, #32]
 80060d4:	2b7f      	cmp	r3, #127	; 0x7f
 80060d6:	d8f0      	bhi.n	80060ba <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80060d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060da:	1c5a      	adds	r2, r3, #1
 80060dc:	627a      	str	r2, [r7, #36]	; 0x24
 80060de:	6a3a      	ldr	r2, [r7, #32]
 80060e0:	b2d2      	uxtb	r2, r2
 80060e2:	701a      	strb	r2, [r3, #0]
 80060e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	6979      	ldr	r1, [r7, #20]
 80060ec:	69b8      	ldr	r0, [r7, #24]
 80060ee:	f7ff f8f1 	bl	80052d4 <_SendPacket>
  RECORD_END();
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	f383 8811 	msr	BASEPRI, r3
}
 80060f8:	bf00      	nop
 80060fa:	3740      	adds	r7, #64	; 0x40
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	20014314 	.word	0x20014314

08006104 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006104:	b580      	push	{r7, lr}
 8006106:	b08c      	sub	sp, #48	; 0x30
 8006108:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800610a:	4b58      	ldr	r3, [pc, #352]	; (800626c <SEGGER_SYSVIEW_Start+0x168>)
 800610c:	2201      	movs	r2, #1
 800610e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006110:	f3ef 8311 	mrs	r3, BASEPRI
 8006114:	f04f 0120 	mov.w	r1, #32
 8006118:	f381 8811 	msr	BASEPRI, r1
 800611c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800611e:	4b53      	ldr	r3, [pc, #332]	; (800626c <SEGGER_SYSVIEW_Start+0x168>)
 8006120:	785b      	ldrb	r3, [r3, #1]
 8006122:	220a      	movs	r2, #10
 8006124:	4952      	ldr	r1, [pc, #328]	; (8006270 <SEGGER_SYSVIEW_Start+0x16c>)
 8006126:	4618      	mov	r0, r3
 8006128:	f7fa f862 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006132:	200a      	movs	r0, #10
 8006134:	f7ff fe2a 	bl	8005d8c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006138:	f3ef 8311 	mrs	r3, BASEPRI
 800613c:	f04f 0120 	mov.w	r1, #32
 8006140:	f381 8811 	msr	BASEPRI, r1
 8006144:	60bb      	str	r3, [r7, #8]
 8006146:	484b      	ldr	r0, [pc, #300]	; (8006274 <SEGGER_SYSVIEW_Start+0x170>)
 8006148:	f7fe ffd6 	bl	80050f8 <_PreparePacket>
 800614c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006156:	4b45      	ldr	r3, [pc, #276]	; (800626c <SEGGER_SYSVIEW_Start+0x168>)
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	62bb      	str	r3, [r7, #40]	; 0x28
 800615c:	e00b      	b.n	8006176 <SEGGER_SYSVIEW_Start+0x72>
 800615e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006160:	b2da      	uxtb	r2, r3
 8006162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006164:	1c59      	adds	r1, r3, #1
 8006166:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006168:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800616c:	b2d2      	uxtb	r2, r2
 800616e:	701a      	strb	r2, [r3, #0]
 8006170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006172:	09db      	lsrs	r3, r3, #7
 8006174:	62bb      	str	r3, [r7, #40]	; 0x28
 8006176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006178:	2b7f      	cmp	r3, #127	; 0x7f
 800617a:	d8f0      	bhi.n	800615e <SEGGER_SYSVIEW_Start+0x5a>
 800617c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617e:	1c5a      	adds	r2, r3, #1
 8006180:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006182:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006184:	b2d2      	uxtb	r2, r2
 8006186:	701a      	strb	r2, [r3, #0]
 8006188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	627b      	str	r3, [r7, #36]	; 0x24
 8006190:	4b36      	ldr	r3, [pc, #216]	; (800626c <SEGGER_SYSVIEW_Start+0x168>)
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	623b      	str	r3, [r7, #32]
 8006196:	e00b      	b.n	80061b0 <SEGGER_SYSVIEW_Start+0xac>
 8006198:	6a3b      	ldr	r3, [r7, #32]
 800619a:	b2da      	uxtb	r2, r3
 800619c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619e:	1c59      	adds	r1, r3, #1
 80061a0:	6279      	str	r1, [r7, #36]	; 0x24
 80061a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061a6:	b2d2      	uxtb	r2, r2
 80061a8:	701a      	strb	r2, [r3, #0]
 80061aa:	6a3b      	ldr	r3, [r7, #32]
 80061ac:	09db      	lsrs	r3, r3, #7
 80061ae:	623b      	str	r3, [r7, #32]
 80061b0:	6a3b      	ldr	r3, [r7, #32]
 80061b2:	2b7f      	cmp	r3, #127	; 0x7f
 80061b4:	d8f0      	bhi.n	8006198 <SEGGER_SYSVIEW_Start+0x94>
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	1c5a      	adds	r2, r3, #1
 80061ba:	627a      	str	r2, [r7, #36]	; 0x24
 80061bc:	6a3a      	ldr	r2, [r7, #32]
 80061be:	b2d2      	uxtb	r2, r2
 80061c0:	701a      	strb	r2, [r3, #0]
 80061c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	61fb      	str	r3, [r7, #28]
 80061ca:	4b28      	ldr	r3, [pc, #160]	; (800626c <SEGGER_SYSVIEW_Start+0x168>)
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	61bb      	str	r3, [r7, #24]
 80061d0:	e00b      	b.n	80061ea <SEGGER_SYSVIEW_Start+0xe6>
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	b2da      	uxtb	r2, r3
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	1c59      	adds	r1, r3, #1
 80061da:	61f9      	str	r1, [r7, #28]
 80061dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061e0:	b2d2      	uxtb	r2, r2
 80061e2:	701a      	strb	r2, [r3, #0]
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	09db      	lsrs	r3, r3, #7
 80061e8:	61bb      	str	r3, [r7, #24]
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	2b7f      	cmp	r3, #127	; 0x7f
 80061ee:	d8f0      	bhi.n	80061d2 <SEGGER_SYSVIEW_Start+0xce>
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	1c5a      	adds	r2, r3, #1
 80061f4:	61fa      	str	r2, [r7, #28]
 80061f6:	69ba      	ldr	r2, [r7, #24]
 80061f8:	b2d2      	uxtb	r2, r2
 80061fa:	701a      	strb	r2, [r3, #0]
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	617b      	str	r3, [r7, #20]
 8006204:	2300      	movs	r3, #0
 8006206:	613b      	str	r3, [r7, #16]
 8006208:	e00b      	b.n	8006222 <SEGGER_SYSVIEW_Start+0x11e>
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	b2da      	uxtb	r2, r3
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	1c59      	adds	r1, r3, #1
 8006212:	6179      	str	r1, [r7, #20]
 8006214:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006218:	b2d2      	uxtb	r2, r2
 800621a:	701a      	strb	r2, [r3, #0]
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	09db      	lsrs	r3, r3, #7
 8006220:	613b      	str	r3, [r7, #16]
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	2b7f      	cmp	r3, #127	; 0x7f
 8006226:	d8f0      	bhi.n	800620a <SEGGER_SYSVIEW_Start+0x106>
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	1c5a      	adds	r2, r3, #1
 800622c:	617a      	str	r2, [r7, #20]
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	b2d2      	uxtb	r2, r2
 8006232:	701a      	strb	r2, [r3, #0]
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006238:	2218      	movs	r2, #24
 800623a:	6839      	ldr	r1, [r7, #0]
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f7ff f849 	bl	80052d4 <_SendPacket>
      RECORD_END();
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006248:	4b08      	ldr	r3, [pc, #32]	; (800626c <SEGGER_SYSVIEW_Start+0x168>)
 800624a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624c:	2b00      	cmp	r3, #0
 800624e:	d002      	beq.n	8006256 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006250:	4b06      	ldr	r3, [pc, #24]	; (800626c <SEGGER_SYSVIEW_Start+0x168>)
 8006252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006254:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006256:	f000 f9eb 	bl	8006630 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800625a:	f000 f9b1 	bl	80065c0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800625e:	f000 fc83 	bl	8006b68 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006262:	bf00      	nop
 8006264:	3730      	adds	r7, #48	; 0x30
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	200142e4 	.word	0x200142e4
 8006270:	08007134 	.word	0x08007134
 8006274:	20014314 	.word	0x20014314

08006278 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800627e:	f3ef 8311 	mrs	r3, BASEPRI
 8006282:	f04f 0120 	mov.w	r1, #32
 8006286:	f381 8811 	msr	BASEPRI, r1
 800628a:	607b      	str	r3, [r7, #4]
 800628c:	480b      	ldr	r0, [pc, #44]	; (80062bc <SEGGER_SYSVIEW_Stop+0x44>)
 800628e:	f7fe ff33 	bl	80050f8 <_PreparePacket>
 8006292:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006294:	4b0a      	ldr	r3, [pc, #40]	; (80062c0 <SEGGER_SYSVIEW_Stop+0x48>)
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d007      	beq.n	80062ac <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800629c:	220b      	movs	r2, #11
 800629e:	6839      	ldr	r1, [r7, #0]
 80062a0:	6838      	ldr	r0, [r7, #0]
 80062a2:	f7ff f817 	bl	80052d4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80062a6:	4b06      	ldr	r3, [pc, #24]	; (80062c0 <SEGGER_SYSVIEW_Stop+0x48>)
 80062a8:	2200      	movs	r2, #0
 80062aa:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f383 8811 	msr	BASEPRI, r3
}
 80062b2:	bf00      	nop
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	20014314 	.word	0x20014314
 80062c0:	200142e4 	.word	0x200142e4

080062c4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b08c      	sub	sp, #48	; 0x30
 80062c8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80062ca:	f3ef 8311 	mrs	r3, BASEPRI
 80062ce:	f04f 0120 	mov.w	r1, #32
 80062d2:	f381 8811 	msr	BASEPRI, r1
 80062d6:	60fb      	str	r3, [r7, #12]
 80062d8:	4845      	ldr	r0, [pc, #276]	; (80063f0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80062da:	f7fe ff0d 	bl	80050f8 <_PreparePacket>
 80062de:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062e8:	4b42      	ldr	r3, [pc, #264]	; (80063f4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80062ee:	e00b      	b.n	8006308 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80062f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f6:	1c59      	adds	r1, r3, #1
 80062f8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80062fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062fe:	b2d2      	uxtb	r2, r2
 8006300:	701a      	strb	r2, [r3, #0]
 8006302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006304:	09db      	lsrs	r3, r3, #7
 8006306:	62bb      	str	r3, [r7, #40]	; 0x28
 8006308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630a:	2b7f      	cmp	r3, #127	; 0x7f
 800630c:	d8f0      	bhi.n	80062f0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800630e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006310:	1c5a      	adds	r2, r3, #1
 8006312:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006314:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006316:	b2d2      	uxtb	r2, r2
 8006318:	701a      	strb	r2, [r3, #0]
 800631a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	627b      	str	r3, [r7, #36]	; 0x24
 8006322:	4b34      	ldr	r3, [pc, #208]	; (80063f4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	623b      	str	r3, [r7, #32]
 8006328:	e00b      	b.n	8006342 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800632a:	6a3b      	ldr	r3, [r7, #32]
 800632c:	b2da      	uxtb	r2, r3
 800632e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006330:	1c59      	adds	r1, r3, #1
 8006332:	6279      	str	r1, [r7, #36]	; 0x24
 8006334:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006338:	b2d2      	uxtb	r2, r2
 800633a:	701a      	strb	r2, [r3, #0]
 800633c:	6a3b      	ldr	r3, [r7, #32]
 800633e:	09db      	lsrs	r3, r3, #7
 8006340:	623b      	str	r3, [r7, #32]
 8006342:	6a3b      	ldr	r3, [r7, #32]
 8006344:	2b7f      	cmp	r3, #127	; 0x7f
 8006346:	d8f0      	bhi.n	800632a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634a:	1c5a      	adds	r2, r3, #1
 800634c:	627a      	str	r2, [r7, #36]	; 0x24
 800634e:	6a3a      	ldr	r2, [r7, #32]
 8006350:	b2d2      	uxtb	r2, r2
 8006352:	701a      	strb	r2, [r3, #0]
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006356:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	61fb      	str	r3, [r7, #28]
 800635c:	4b25      	ldr	r3, [pc, #148]	; (80063f4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	61bb      	str	r3, [r7, #24]
 8006362:	e00b      	b.n	800637c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	b2da      	uxtb	r2, r3
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	1c59      	adds	r1, r3, #1
 800636c:	61f9      	str	r1, [r7, #28]
 800636e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006372:	b2d2      	uxtb	r2, r2
 8006374:	701a      	strb	r2, [r3, #0]
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	09db      	lsrs	r3, r3, #7
 800637a:	61bb      	str	r3, [r7, #24]
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	2b7f      	cmp	r3, #127	; 0x7f
 8006380:	d8f0      	bhi.n	8006364 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	1c5a      	adds	r2, r3, #1
 8006386:	61fa      	str	r2, [r7, #28]
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	b2d2      	uxtb	r2, r2
 800638c:	701a      	strb	r2, [r3, #0]
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	617b      	str	r3, [r7, #20]
 8006396:	2300      	movs	r3, #0
 8006398:	613b      	str	r3, [r7, #16]
 800639a:	e00b      	b.n	80063b4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	b2da      	uxtb	r2, r3
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	1c59      	adds	r1, r3, #1
 80063a4:	6179      	str	r1, [r7, #20]
 80063a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063aa:	b2d2      	uxtb	r2, r2
 80063ac:	701a      	strb	r2, [r3, #0]
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	09db      	lsrs	r3, r3, #7
 80063b2:	613b      	str	r3, [r7, #16]
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	2b7f      	cmp	r3, #127	; 0x7f
 80063b8:	d8f0      	bhi.n	800639c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	1c5a      	adds	r2, r3, #1
 80063be:	617a      	str	r2, [r7, #20]
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	b2d2      	uxtb	r2, r2
 80063c4:	701a      	strb	r2, [r3, #0]
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80063ca:	2218      	movs	r2, #24
 80063cc:	6879      	ldr	r1, [r7, #4]
 80063ce:	68b8      	ldr	r0, [r7, #8]
 80063d0:	f7fe ff80 	bl	80052d4 <_SendPacket>
  RECORD_END();
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80063da:	4b06      	ldr	r3, [pc, #24]	; (80063f4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80063dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d002      	beq.n	80063e8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80063e2:	4b04      	ldr	r3, [pc, #16]	; (80063f4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80063e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e6:	4798      	blx	r3
  }
}
 80063e8:	bf00      	nop
 80063ea:	3730      	adds	r7, #48	; 0x30
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	20014314 	.word	0x20014314
 80063f4:	200142e4 	.word	0x200142e4

080063f8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b092      	sub	sp, #72	; 0x48
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006400:	f3ef 8311 	mrs	r3, BASEPRI
 8006404:	f04f 0120 	mov.w	r1, #32
 8006408:	f381 8811 	msr	BASEPRI, r1
 800640c:	617b      	str	r3, [r7, #20]
 800640e:	486a      	ldr	r0, [pc, #424]	; (80065b8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006410:	f7fe fe72 	bl	80050f8 <_PreparePacket>
 8006414:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	647b      	str	r3, [r7, #68]	; 0x44
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	4b66      	ldr	r3, [pc, #408]	; (80065bc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	643b      	str	r3, [r7, #64]	; 0x40
 800642a:	e00b      	b.n	8006444 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800642c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800642e:	b2da      	uxtb	r2, r3
 8006430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006432:	1c59      	adds	r1, r3, #1
 8006434:	6479      	str	r1, [r7, #68]	; 0x44
 8006436:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800643a:	b2d2      	uxtb	r2, r2
 800643c:	701a      	strb	r2, [r3, #0]
 800643e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006440:	09db      	lsrs	r3, r3, #7
 8006442:	643b      	str	r3, [r7, #64]	; 0x40
 8006444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006446:	2b7f      	cmp	r3, #127	; 0x7f
 8006448:	d8f0      	bhi.n	800642c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800644a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800644c:	1c5a      	adds	r2, r3, #1
 800644e:	647a      	str	r2, [r7, #68]	; 0x44
 8006450:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006452:	b2d2      	uxtb	r2, r2
 8006454:	701a      	strb	r2, [r3, #0]
 8006456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006458:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	63bb      	str	r3, [r7, #56]	; 0x38
 8006464:	e00b      	b.n	800647e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006468:	b2da      	uxtb	r2, r3
 800646a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800646c:	1c59      	adds	r1, r3, #1
 800646e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006470:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006474:	b2d2      	uxtb	r2, r2
 8006476:	701a      	strb	r2, [r3, #0]
 8006478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647a:	09db      	lsrs	r3, r3, #7
 800647c:	63bb      	str	r3, [r7, #56]	; 0x38
 800647e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006480:	2b7f      	cmp	r3, #127	; 0x7f
 8006482:	d8f0      	bhi.n	8006466 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006486:	1c5a      	adds	r2, r3, #1
 8006488:	63fa      	str	r2, [r7, #60]	; 0x3c
 800648a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800648c:	b2d2      	uxtb	r2, r2
 800648e:	701a      	strb	r2, [r3, #0]
 8006490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006492:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	2220      	movs	r2, #32
 800649a:	4619      	mov	r1, r3
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f7fe fddb 	bl	8005058 <_EncodeStr>
 80064a2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80064a4:	2209      	movs	r2, #9
 80064a6:	68f9      	ldr	r1, [r7, #12]
 80064a8:	6938      	ldr	r0, [r7, #16]
 80064aa:	f7fe ff13 	bl	80052d4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	637b      	str	r3, [r7, #52]	; 0x34
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	4b40      	ldr	r3, [pc, #256]	; (80065bc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	633b      	str	r3, [r7, #48]	; 0x30
 80064c2:	e00b      	b.n	80064dc <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80064c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ca:	1c59      	adds	r1, r3, #1
 80064cc:	6379      	str	r1, [r7, #52]	; 0x34
 80064ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064d2:	b2d2      	uxtb	r2, r2
 80064d4:	701a      	strb	r2, [r3, #0]
 80064d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d8:	09db      	lsrs	r3, r3, #7
 80064da:	633b      	str	r3, [r7, #48]	; 0x30
 80064dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064de:	2b7f      	cmp	r3, #127	; 0x7f
 80064e0:	d8f0      	bhi.n	80064c4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80064e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e4:	1c5a      	adds	r2, r3, #1
 80064e6:	637a      	str	r2, [r7, #52]	; 0x34
 80064e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064ea:	b2d2      	uxtb	r2, r2
 80064ec:	701a      	strb	r2, [r3, #0]
 80064ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80064fc:	e00b      	b.n	8006516 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80064fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006500:	b2da      	uxtb	r2, r3
 8006502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006504:	1c59      	adds	r1, r3, #1
 8006506:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006508:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800650c:	b2d2      	uxtb	r2, r2
 800650e:	701a      	strb	r2, [r3, #0]
 8006510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006512:	09db      	lsrs	r3, r3, #7
 8006514:	62bb      	str	r3, [r7, #40]	; 0x28
 8006516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006518:	2b7f      	cmp	r3, #127	; 0x7f
 800651a:	d8f0      	bhi.n	80064fe <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800651c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651e:	1c5a      	adds	r2, r3, #1
 8006520:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006522:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006524:	b2d2      	uxtb	r2, r2
 8006526:	701a      	strb	r2, [r3, #0]
 8006528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	627b      	str	r3, [r7, #36]	; 0x24
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	623b      	str	r3, [r7, #32]
 8006536:	e00b      	b.n	8006550 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006538:	6a3b      	ldr	r3, [r7, #32]
 800653a:	b2da      	uxtb	r2, r3
 800653c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653e:	1c59      	adds	r1, r3, #1
 8006540:	6279      	str	r1, [r7, #36]	; 0x24
 8006542:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006546:	b2d2      	uxtb	r2, r2
 8006548:	701a      	strb	r2, [r3, #0]
 800654a:	6a3b      	ldr	r3, [r7, #32]
 800654c:	09db      	lsrs	r3, r3, #7
 800654e:	623b      	str	r3, [r7, #32]
 8006550:	6a3b      	ldr	r3, [r7, #32]
 8006552:	2b7f      	cmp	r3, #127	; 0x7f
 8006554:	d8f0      	bhi.n	8006538 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006558:	1c5a      	adds	r2, r3, #1
 800655a:	627a      	str	r2, [r7, #36]	; 0x24
 800655c:	6a3a      	ldr	r2, [r7, #32]
 800655e:	b2d2      	uxtb	r2, r2
 8006560:	701a      	strb	r2, [r3, #0]
 8006562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006564:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	61fb      	str	r3, [r7, #28]
 800656a:	2300      	movs	r3, #0
 800656c:	61bb      	str	r3, [r7, #24]
 800656e:	e00b      	b.n	8006588 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	b2da      	uxtb	r2, r3
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	1c59      	adds	r1, r3, #1
 8006578:	61f9      	str	r1, [r7, #28]
 800657a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800657e:	b2d2      	uxtb	r2, r2
 8006580:	701a      	strb	r2, [r3, #0]
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	09db      	lsrs	r3, r3, #7
 8006586:	61bb      	str	r3, [r7, #24]
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	2b7f      	cmp	r3, #127	; 0x7f
 800658c:	d8f0      	bhi.n	8006570 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	1c5a      	adds	r2, r3, #1
 8006592:	61fa      	str	r2, [r7, #28]
 8006594:	69ba      	ldr	r2, [r7, #24]
 8006596:	b2d2      	uxtb	r2, r2
 8006598:	701a      	strb	r2, [r3, #0]
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800659e:	2215      	movs	r2, #21
 80065a0:	68f9      	ldr	r1, [r7, #12]
 80065a2:	6938      	ldr	r0, [r7, #16]
 80065a4:	f7fe fe96 	bl	80052d4 <_SendPacket>
  RECORD_END();
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	f383 8811 	msr	BASEPRI, r3
}
 80065ae:	bf00      	nop
 80065b0:	3748      	adds	r7, #72	; 0x48
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	20014314 	.word	0x20014314
 80065bc:	200142e4 	.word	0x200142e4

080065c0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80065c0:	b580      	push	{r7, lr}
 80065c2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80065c4:	4b07      	ldr	r3, [pc, #28]	; (80065e4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80065c6:	6a1b      	ldr	r3, [r3, #32]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d008      	beq.n	80065de <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80065cc:	4b05      	ldr	r3, [pc, #20]	; (80065e4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80065ce:	6a1b      	ldr	r3, [r3, #32]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d003      	beq.n	80065de <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80065d6:	4b03      	ldr	r3, [pc, #12]	; (80065e4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	4798      	blx	r3
  }
}
 80065de:	bf00      	nop
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	200142e4 	.word	0x200142e4

080065e8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b086      	sub	sp, #24
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80065f0:	f3ef 8311 	mrs	r3, BASEPRI
 80065f4:	f04f 0120 	mov.w	r1, #32
 80065f8:	f381 8811 	msr	BASEPRI, r1
 80065fc:	617b      	str	r3, [r7, #20]
 80065fe:	480b      	ldr	r0, [pc, #44]	; (800662c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006600:	f7fe fd7a 	bl	80050f8 <_PreparePacket>
 8006604:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006606:	2280      	movs	r2, #128	; 0x80
 8006608:	6879      	ldr	r1, [r7, #4]
 800660a:	6938      	ldr	r0, [r7, #16]
 800660c:	f7fe fd24 	bl	8005058 <_EncodeStr>
 8006610:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006612:	220e      	movs	r2, #14
 8006614:	68f9      	ldr	r1, [r7, #12]
 8006616:	6938      	ldr	r0, [r7, #16]
 8006618:	f7fe fe5c 	bl	80052d4 <_SendPacket>
  RECORD_END();
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	f383 8811 	msr	BASEPRI, r3
}
 8006622:	bf00      	nop
 8006624:	3718      	adds	r7, #24
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	20014314 	.word	0x20014314

08006630 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006630:	b590      	push	{r4, r7, lr}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006636:	4b15      	ldr	r3, [pc, #84]	; (800668c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d01a      	beq.n	8006674 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800663e:	4b13      	ldr	r3, [pc, #76]	; (800668c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d015      	beq.n	8006674 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006648:	4b10      	ldr	r3, [pc, #64]	; (800668c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800664a:	6a1b      	ldr	r3, [r3, #32]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4798      	blx	r3
 8006650:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006654:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006656:	e9d7 0100 	ldrd	r0, r1, [r7]
 800665a:	f04f 0200 	mov.w	r2, #0
 800665e:	f04f 0300 	mov.w	r3, #0
 8006662:	000a      	movs	r2, r1
 8006664:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006666:	4613      	mov	r3, r2
 8006668:	461a      	mov	r2, r3
 800666a:	4621      	mov	r1, r4
 800666c:	200d      	movs	r0, #13
 800666e:	f7ff fbe7 	bl	8005e40 <SEGGER_SYSVIEW_RecordU32x2>
 8006672:	e006      	b.n	8006682 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006674:	4b06      	ldr	r3, [pc, #24]	; (8006690 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4619      	mov	r1, r3
 800667a:	200c      	movs	r0, #12
 800667c:	f7ff fba4 	bl	8005dc8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006680:	bf00      	nop
 8006682:	bf00      	nop
 8006684:	370c      	adds	r7, #12
 8006686:	46bd      	mov	sp, r7
 8006688:	bd90      	pop	{r4, r7, pc}
 800668a:	bf00      	nop
 800668c:	200142e4 	.word	0x200142e4
 8006690:	e0001004 	.word	0xe0001004

08006694 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006694:	b580      	push	{r7, lr}
 8006696:	b086      	sub	sp, #24
 8006698:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800669a:	f3ef 8311 	mrs	r3, BASEPRI
 800669e:	f04f 0120 	mov.w	r1, #32
 80066a2:	f381 8811 	msr	BASEPRI, r1
 80066a6:	60fb      	str	r3, [r7, #12]
 80066a8:	4819      	ldr	r0, [pc, #100]	; (8006710 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80066aa:	f7fe fd25 	bl	80050f8 <_PreparePacket>
 80066ae:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80066b4:	4b17      	ldr	r3, [pc, #92]	; (8006714 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066bc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	617b      	str	r3, [r7, #20]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	613b      	str	r3, [r7, #16]
 80066c6:	e00b      	b.n	80066e0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	b2da      	uxtb	r2, r3
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	1c59      	adds	r1, r3, #1
 80066d0:	6179      	str	r1, [r7, #20]
 80066d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066d6:	b2d2      	uxtb	r2, r2
 80066d8:	701a      	strb	r2, [r3, #0]
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	09db      	lsrs	r3, r3, #7
 80066de:	613b      	str	r3, [r7, #16]
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	2b7f      	cmp	r3, #127	; 0x7f
 80066e4:	d8f0      	bhi.n	80066c8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	1c5a      	adds	r2, r3, #1
 80066ea:	617a      	str	r2, [r7, #20]
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	b2d2      	uxtb	r2, r2
 80066f0:	701a      	strb	r2, [r3, #0]
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80066f6:	2202      	movs	r2, #2
 80066f8:	6879      	ldr	r1, [r7, #4]
 80066fa:	68b8      	ldr	r0, [r7, #8]
 80066fc:	f7fe fdea 	bl	80052d4 <_SendPacket>
  RECORD_END();
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f383 8811 	msr	BASEPRI, r3
}
 8006706:	bf00      	nop
 8006708:	3718      	adds	r7, #24
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	20014314 	.word	0x20014314
 8006714:	e000ed04 	.word	0xe000ed04

08006718 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800671e:	f3ef 8311 	mrs	r3, BASEPRI
 8006722:	f04f 0120 	mov.w	r1, #32
 8006726:	f381 8811 	msr	BASEPRI, r1
 800672a:	607b      	str	r3, [r7, #4]
 800672c:	4807      	ldr	r0, [pc, #28]	; (800674c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800672e:	f7fe fce3 	bl	80050f8 <_PreparePacket>
 8006732:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006734:	2203      	movs	r2, #3
 8006736:	6839      	ldr	r1, [r7, #0]
 8006738:	6838      	ldr	r0, [r7, #0]
 800673a:	f7fe fdcb 	bl	80052d4 <_SendPacket>
  RECORD_END();
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f383 8811 	msr	BASEPRI, r3
}
 8006744:	bf00      	nop
 8006746:	3708      	adds	r7, #8
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	20014314 	.word	0x20014314

08006750 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006756:	f3ef 8311 	mrs	r3, BASEPRI
 800675a:	f04f 0120 	mov.w	r1, #32
 800675e:	f381 8811 	msr	BASEPRI, r1
 8006762:	607b      	str	r3, [r7, #4]
 8006764:	4807      	ldr	r0, [pc, #28]	; (8006784 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006766:	f7fe fcc7 	bl	80050f8 <_PreparePacket>
 800676a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800676c:	2212      	movs	r2, #18
 800676e:	6839      	ldr	r1, [r7, #0]
 8006770:	6838      	ldr	r0, [r7, #0]
 8006772:	f7fe fdaf 	bl	80052d4 <_SendPacket>
  RECORD_END();
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f383 8811 	msr	BASEPRI, r3
}
 800677c:	bf00      	nop
 800677e:	3708      	adds	r7, #8
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	20014314 	.word	0x20014314

08006788 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800678e:	f3ef 8311 	mrs	r3, BASEPRI
 8006792:	f04f 0120 	mov.w	r1, #32
 8006796:	f381 8811 	msr	BASEPRI, r1
 800679a:	607b      	str	r3, [r7, #4]
 800679c:	4807      	ldr	r0, [pc, #28]	; (80067bc <SEGGER_SYSVIEW_OnIdle+0x34>)
 800679e:	f7fe fcab 	bl	80050f8 <_PreparePacket>
 80067a2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80067a4:	2211      	movs	r2, #17
 80067a6:	6839      	ldr	r1, [r7, #0]
 80067a8:	6838      	ldr	r0, [r7, #0]
 80067aa:	f7fe fd93 	bl	80052d4 <_SendPacket>
  RECORD_END();
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f383 8811 	msr	BASEPRI, r3
}
 80067b4:	bf00      	nop
 80067b6:	3708      	adds	r7, #8
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	20014314 	.word	0x20014314

080067c0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b088      	sub	sp, #32
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80067c8:	f3ef 8311 	mrs	r3, BASEPRI
 80067cc:	f04f 0120 	mov.w	r1, #32
 80067d0:	f381 8811 	msr	BASEPRI, r1
 80067d4:	617b      	str	r3, [r7, #20]
 80067d6:	4819      	ldr	r0, [pc, #100]	; (800683c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80067d8:	f7fe fc8e 	bl	80050f8 <_PreparePacket>
 80067dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80067e2:	4b17      	ldr	r3, [pc, #92]	; (8006840 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	61fb      	str	r3, [r7, #28]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	61bb      	str	r3, [r7, #24]
 80067f4:	e00b      	b.n	800680e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	1c59      	adds	r1, r3, #1
 80067fe:	61f9      	str	r1, [r7, #28]
 8006800:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006804:	b2d2      	uxtb	r2, r2
 8006806:	701a      	strb	r2, [r3, #0]
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	09db      	lsrs	r3, r3, #7
 800680c:	61bb      	str	r3, [r7, #24]
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	2b7f      	cmp	r3, #127	; 0x7f
 8006812:	d8f0      	bhi.n	80067f6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	1c5a      	adds	r2, r3, #1
 8006818:	61fa      	str	r2, [r7, #28]
 800681a:	69ba      	ldr	r2, [r7, #24]
 800681c:	b2d2      	uxtb	r2, r2
 800681e:	701a      	strb	r2, [r3, #0]
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006824:	2208      	movs	r2, #8
 8006826:	68f9      	ldr	r1, [r7, #12]
 8006828:	6938      	ldr	r0, [r7, #16]
 800682a:	f7fe fd53 	bl	80052d4 <_SendPacket>
  RECORD_END();
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f383 8811 	msr	BASEPRI, r3
}
 8006834:	bf00      	nop
 8006836:	3720      	adds	r7, #32
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	20014314 	.word	0x20014314
 8006840:	200142e4 	.word	0x200142e4

08006844 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006844:	b580      	push	{r7, lr}
 8006846:	b088      	sub	sp, #32
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800684c:	f3ef 8311 	mrs	r3, BASEPRI
 8006850:	f04f 0120 	mov.w	r1, #32
 8006854:	f381 8811 	msr	BASEPRI, r1
 8006858:	617b      	str	r3, [r7, #20]
 800685a:	4819      	ldr	r0, [pc, #100]	; (80068c0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800685c:	f7fe fc4c 	bl	80050f8 <_PreparePacket>
 8006860:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006866:	4b17      	ldr	r3, [pc, #92]	; (80068c4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	61fb      	str	r3, [r7, #28]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	61bb      	str	r3, [r7, #24]
 8006878:	e00b      	b.n	8006892 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	b2da      	uxtb	r2, r3
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	1c59      	adds	r1, r3, #1
 8006882:	61f9      	str	r1, [r7, #28]
 8006884:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006888:	b2d2      	uxtb	r2, r2
 800688a:	701a      	strb	r2, [r3, #0]
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	09db      	lsrs	r3, r3, #7
 8006890:	61bb      	str	r3, [r7, #24]
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	2b7f      	cmp	r3, #127	; 0x7f
 8006896:	d8f0      	bhi.n	800687a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	1c5a      	adds	r2, r3, #1
 800689c:	61fa      	str	r2, [r7, #28]
 800689e:	69ba      	ldr	r2, [r7, #24]
 80068a0:	b2d2      	uxtb	r2, r2
 80068a2:	701a      	strb	r2, [r3, #0]
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80068a8:	2204      	movs	r2, #4
 80068aa:	68f9      	ldr	r1, [r7, #12]
 80068ac:	6938      	ldr	r0, [r7, #16]
 80068ae:	f7fe fd11 	bl	80052d4 <_SendPacket>
  RECORD_END();
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	f383 8811 	msr	BASEPRI, r3
}
 80068b8:	bf00      	nop
 80068ba:	3720      	adds	r7, #32
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	20014314 	.word	0x20014314
 80068c4:	200142e4 	.word	0x200142e4

080068c8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b088      	sub	sp, #32
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80068d0:	f3ef 8311 	mrs	r3, BASEPRI
 80068d4:	f04f 0120 	mov.w	r1, #32
 80068d8:	f381 8811 	msr	BASEPRI, r1
 80068dc:	617b      	str	r3, [r7, #20]
 80068de:	4819      	ldr	r0, [pc, #100]	; (8006944 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80068e0:	f7fe fc0a 	bl	80050f8 <_PreparePacket>
 80068e4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80068ea:	4b17      	ldr	r3, [pc, #92]	; (8006948 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	61fb      	str	r3, [r7, #28]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	61bb      	str	r3, [r7, #24]
 80068fc:	e00b      	b.n	8006916 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	b2da      	uxtb	r2, r3
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	1c59      	adds	r1, r3, #1
 8006906:	61f9      	str	r1, [r7, #28]
 8006908:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800690c:	b2d2      	uxtb	r2, r2
 800690e:	701a      	strb	r2, [r3, #0]
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	09db      	lsrs	r3, r3, #7
 8006914:	61bb      	str	r3, [r7, #24]
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	2b7f      	cmp	r3, #127	; 0x7f
 800691a:	d8f0      	bhi.n	80068fe <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	1c5a      	adds	r2, r3, #1
 8006920:	61fa      	str	r2, [r7, #28]
 8006922:	69ba      	ldr	r2, [r7, #24]
 8006924:	b2d2      	uxtb	r2, r2
 8006926:	701a      	strb	r2, [r3, #0]
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800692c:	2206      	movs	r2, #6
 800692e:	68f9      	ldr	r1, [r7, #12]
 8006930:	6938      	ldr	r0, [r7, #16]
 8006932:	f7fe fccf 	bl	80052d4 <_SendPacket>
  RECORD_END();
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f383 8811 	msr	BASEPRI, r3
}
 800693c:	bf00      	nop
 800693e:	3720      	adds	r7, #32
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	20014314 	.word	0x20014314
 8006948:	200142e4 	.word	0x200142e4

0800694c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800694c:	b580      	push	{r7, lr}
 800694e:	b08a      	sub	sp, #40	; 0x28
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006956:	f3ef 8311 	mrs	r3, BASEPRI
 800695a:	f04f 0120 	mov.w	r1, #32
 800695e:	f381 8811 	msr	BASEPRI, r1
 8006962:	617b      	str	r3, [r7, #20]
 8006964:	4827      	ldr	r0, [pc, #156]	; (8006a04 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006966:	f7fe fbc7 	bl	80050f8 <_PreparePacket>
 800696a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006970:	4b25      	ldr	r3, [pc, #148]	; (8006a08 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	627b      	str	r3, [r7, #36]	; 0x24
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	623b      	str	r3, [r7, #32]
 8006982:	e00b      	b.n	800699c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006984:	6a3b      	ldr	r3, [r7, #32]
 8006986:	b2da      	uxtb	r2, r3
 8006988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698a:	1c59      	adds	r1, r3, #1
 800698c:	6279      	str	r1, [r7, #36]	; 0x24
 800698e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006992:	b2d2      	uxtb	r2, r2
 8006994:	701a      	strb	r2, [r3, #0]
 8006996:	6a3b      	ldr	r3, [r7, #32]
 8006998:	09db      	lsrs	r3, r3, #7
 800699a:	623b      	str	r3, [r7, #32]
 800699c:	6a3b      	ldr	r3, [r7, #32]
 800699e:	2b7f      	cmp	r3, #127	; 0x7f
 80069a0:	d8f0      	bhi.n	8006984 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80069a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a4:	1c5a      	adds	r2, r3, #1
 80069a6:	627a      	str	r2, [r7, #36]	; 0x24
 80069a8:	6a3a      	ldr	r2, [r7, #32]
 80069aa:	b2d2      	uxtb	r2, r2
 80069ac:	701a      	strb	r2, [r3, #0]
 80069ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	61fb      	str	r3, [r7, #28]
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	61bb      	str	r3, [r7, #24]
 80069ba:	e00b      	b.n	80069d4 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	b2da      	uxtb	r2, r3
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	1c59      	adds	r1, r3, #1
 80069c4:	61f9      	str	r1, [r7, #28]
 80069c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069ca:	b2d2      	uxtb	r2, r2
 80069cc:	701a      	strb	r2, [r3, #0]
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	09db      	lsrs	r3, r3, #7
 80069d2:	61bb      	str	r3, [r7, #24]
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	2b7f      	cmp	r3, #127	; 0x7f
 80069d8:	d8f0      	bhi.n	80069bc <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	1c5a      	adds	r2, r3, #1
 80069de:	61fa      	str	r2, [r7, #28]
 80069e0:	69ba      	ldr	r2, [r7, #24]
 80069e2:	b2d2      	uxtb	r2, r2
 80069e4:	701a      	strb	r2, [r3, #0]
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80069ea:	2207      	movs	r2, #7
 80069ec:	68f9      	ldr	r1, [r7, #12]
 80069ee:	6938      	ldr	r0, [r7, #16]
 80069f0:	f7fe fc70 	bl	80052d4 <_SendPacket>
  RECORD_END();
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	f383 8811 	msr	BASEPRI, r3
}
 80069fa:	bf00      	nop
 80069fc:	3728      	adds	r7, #40	; 0x28
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	20014314 	.word	0x20014314
 8006a08:	200142e4 	.word	0x200142e4

08006a0c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006a14:	4b04      	ldr	r3, [pc, #16]	; (8006a28 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	1ad3      	subs	r3, r2, r3
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr
 8006a28:	200142e4 	.word	0x200142e4

08006a2c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b08c      	sub	sp, #48	; 0x30
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	4603      	mov	r3, r0
 8006a34:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006a36:	4b3b      	ldr	r3, [pc, #236]	; (8006b24 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d06d      	beq.n	8006b1a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006a3e:	4b39      	ldr	r3, [pc, #228]	; (8006b24 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006a44:	2300      	movs	r3, #0
 8006a46:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a48:	e008      	b.n	8006a5c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d007      	beq.n	8006a66 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a58:	3301      	adds	r3, #1
 8006a5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a5c:	79fb      	ldrb	r3, [r7, #7]
 8006a5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d3f2      	bcc.n	8006a4a <SEGGER_SYSVIEW_SendModule+0x1e>
 8006a64:	e000      	b.n	8006a68 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006a66:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d055      	beq.n	8006b1a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a6e:	f3ef 8311 	mrs	r3, BASEPRI
 8006a72:	f04f 0120 	mov.w	r1, #32
 8006a76:	f381 8811 	msr	BASEPRI, r1
 8006a7a:	617b      	str	r3, [r7, #20]
 8006a7c:	482a      	ldr	r0, [pc, #168]	; (8006b28 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006a7e:	f7fe fb3b 	bl	80050f8 <_PreparePacket>
 8006a82:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a8c:	79fb      	ldrb	r3, [r7, #7]
 8006a8e:	623b      	str	r3, [r7, #32]
 8006a90:	e00b      	b.n	8006aaa <SEGGER_SYSVIEW_SendModule+0x7e>
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	b2da      	uxtb	r2, r3
 8006a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a98:	1c59      	adds	r1, r3, #1
 8006a9a:	6279      	str	r1, [r7, #36]	; 0x24
 8006a9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006aa0:	b2d2      	uxtb	r2, r2
 8006aa2:	701a      	strb	r2, [r3, #0]
 8006aa4:	6a3b      	ldr	r3, [r7, #32]
 8006aa6:	09db      	lsrs	r3, r3, #7
 8006aa8:	623b      	str	r3, [r7, #32]
 8006aaa:	6a3b      	ldr	r3, [r7, #32]
 8006aac:	2b7f      	cmp	r3, #127	; 0x7f
 8006aae:	d8f0      	bhi.n	8006a92 <SEGGER_SYSVIEW_SendModule+0x66>
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab2:	1c5a      	adds	r2, r3, #1
 8006ab4:	627a      	str	r2, [r7, #36]	; 0x24
 8006ab6:	6a3a      	ldr	r2, [r7, #32]
 8006ab8:	b2d2      	uxtb	r2, r2
 8006aba:	701a      	strb	r2, [r3, #0]
 8006abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abe:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	61fb      	str	r3, [r7, #28]
 8006ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	61bb      	str	r3, [r7, #24]
 8006aca:	e00b      	b.n	8006ae4 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	b2da      	uxtb	r2, r3
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	1c59      	adds	r1, r3, #1
 8006ad4:	61f9      	str	r1, [r7, #28]
 8006ad6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ada:	b2d2      	uxtb	r2, r2
 8006adc:	701a      	strb	r2, [r3, #0]
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	09db      	lsrs	r3, r3, #7
 8006ae2:	61bb      	str	r3, [r7, #24]
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	2b7f      	cmp	r3, #127	; 0x7f
 8006ae8:	d8f0      	bhi.n	8006acc <SEGGER_SYSVIEW_SendModule+0xa0>
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	1c5a      	adds	r2, r3, #1
 8006aee:	61fa      	str	r2, [r7, #28]
 8006af0:	69ba      	ldr	r2, [r7, #24]
 8006af2:	b2d2      	uxtb	r2, r2
 8006af4:	701a      	strb	r2, [r3, #0]
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2280      	movs	r2, #128	; 0x80
 8006b00:	4619      	mov	r1, r3
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	f7fe faa8 	bl	8005058 <_EncodeStr>
 8006b08:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006b0a:	2216      	movs	r2, #22
 8006b0c:	68f9      	ldr	r1, [r7, #12]
 8006b0e:	6938      	ldr	r0, [r7, #16]
 8006b10:	f7fe fbe0 	bl	80052d4 <_SendPacket>
      RECORD_END();
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006b1a:	bf00      	nop
 8006b1c:	3730      	adds	r7, #48	; 0x30
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	2001430c 	.word	0x2001430c
 8006b28:	20014314 	.word	0x20014314

08006b2c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006b32:	4b0c      	ldr	r3, [pc, #48]	; (8006b64 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00f      	beq.n	8006b5a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006b3a:	4b0a      	ldr	r3, [pc, #40]	; (8006b64 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d002      	beq.n	8006b4e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1f2      	bne.n	8006b40 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006b5a:	bf00      	nop
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	2001430c 	.word	0x2001430c

08006b68 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b086      	sub	sp, #24
 8006b6c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006b6e:	f3ef 8311 	mrs	r3, BASEPRI
 8006b72:	f04f 0120 	mov.w	r1, #32
 8006b76:	f381 8811 	msr	BASEPRI, r1
 8006b7a:	60fb      	str	r3, [r7, #12]
 8006b7c:	4817      	ldr	r0, [pc, #92]	; (8006bdc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006b7e:	f7fe fabb 	bl	80050f8 <_PreparePacket>
 8006b82:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	617b      	str	r3, [r7, #20]
 8006b8c:	4b14      	ldr	r3, [pc, #80]	; (8006be0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	613b      	str	r3, [r7, #16]
 8006b92:	e00b      	b.n	8006bac <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	b2da      	uxtb	r2, r3
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	1c59      	adds	r1, r3, #1
 8006b9c:	6179      	str	r1, [r7, #20]
 8006b9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ba2:	b2d2      	uxtb	r2, r2
 8006ba4:	701a      	strb	r2, [r3, #0]
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	09db      	lsrs	r3, r3, #7
 8006baa:	613b      	str	r3, [r7, #16]
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	2b7f      	cmp	r3, #127	; 0x7f
 8006bb0:	d8f0      	bhi.n	8006b94 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	1c5a      	adds	r2, r3, #1
 8006bb6:	617a      	str	r2, [r7, #20]
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	b2d2      	uxtb	r2, r2
 8006bbc:	701a      	strb	r2, [r3, #0]
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006bc2:	221b      	movs	r2, #27
 8006bc4:	6879      	ldr	r1, [r7, #4]
 8006bc6:	68b8      	ldr	r0, [r7, #8]
 8006bc8:	f7fe fb84 	bl	80052d4 <_SendPacket>
  RECORD_END();
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f383 8811 	msr	BASEPRI, r3
}
 8006bd2:	bf00      	nop
 8006bd4:	3718      	adds	r7, #24
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	20014314 	.word	0x20014314
 8006be0:	20014310 	.word	0x20014310

08006be4 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006be4:	b40f      	push	{r0, r1, r2, r3}
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b082      	sub	sp, #8
 8006bea:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006bec:	f107 0314 	add.w	r3, r7, #20
 8006bf0:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006bf2:	1d3b      	adds	r3, r7, #4
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	2100      	movs	r1, #0
 8006bf8:	6938      	ldr	r0, [r7, #16]
 8006bfa:	f7fe fe7b 	bl	80058f4 <_VPrintTarget>
  va_end(ParamList);
}
 8006bfe:	bf00      	nop
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c08:	b004      	add	sp, #16
 8006c0a:	4770      	bx	lr

08006c0c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b08a      	sub	sp, #40	; 0x28
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c14:	f3ef 8311 	mrs	r3, BASEPRI
 8006c18:	f04f 0120 	mov.w	r1, #32
 8006c1c:	f381 8811 	msr	BASEPRI, r1
 8006c20:	617b      	str	r3, [r7, #20]
 8006c22:	4827      	ldr	r0, [pc, #156]	; (8006cc0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006c24:	f7fe fa68 	bl	80050f8 <_PreparePacket>
 8006c28:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c2a:	2280      	movs	r2, #128	; 0x80
 8006c2c:	6879      	ldr	r1, [r7, #4]
 8006c2e:	6938      	ldr	r0, [r7, #16]
 8006c30:	f7fe fa12 	bl	8005058 <_EncodeStr>
 8006c34:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	627b      	str	r3, [r7, #36]	; 0x24
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	623b      	str	r3, [r7, #32]
 8006c3e:	e00b      	b.n	8006c58 <SEGGER_SYSVIEW_Warn+0x4c>
 8006c40:	6a3b      	ldr	r3, [r7, #32]
 8006c42:	b2da      	uxtb	r2, r3
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	1c59      	adds	r1, r3, #1
 8006c48:	6279      	str	r1, [r7, #36]	; 0x24
 8006c4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c4e:	b2d2      	uxtb	r2, r2
 8006c50:	701a      	strb	r2, [r3, #0]
 8006c52:	6a3b      	ldr	r3, [r7, #32]
 8006c54:	09db      	lsrs	r3, r3, #7
 8006c56:	623b      	str	r3, [r7, #32]
 8006c58:	6a3b      	ldr	r3, [r7, #32]
 8006c5a:	2b7f      	cmp	r3, #127	; 0x7f
 8006c5c:	d8f0      	bhi.n	8006c40 <SEGGER_SYSVIEW_Warn+0x34>
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c60:	1c5a      	adds	r2, r3, #1
 8006c62:	627a      	str	r2, [r7, #36]	; 0x24
 8006c64:	6a3a      	ldr	r2, [r7, #32]
 8006c66:	b2d2      	uxtb	r2, r2
 8006c68:	701a      	strb	r2, [r3, #0]
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	61fb      	str	r3, [r7, #28]
 8006c72:	2300      	movs	r3, #0
 8006c74:	61bb      	str	r3, [r7, #24]
 8006c76:	e00b      	b.n	8006c90 <SEGGER_SYSVIEW_Warn+0x84>
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	b2da      	uxtb	r2, r3
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	1c59      	adds	r1, r3, #1
 8006c80:	61f9      	str	r1, [r7, #28]
 8006c82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c86:	b2d2      	uxtb	r2, r2
 8006c88:	701a      	strb	r2, [r3, #0]
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	09db      	lsrs	r3, r3, #7
 8006c8e:	61bb      	str	r3, [r7, #24]
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	2b7f      	cmp	r3, #127	; 0x7f
 8006c94:	d8f0      	bhi.n	8006c78 <SEGGER_SYSVIEW_Warn+0x6c>
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	1c5a      	adds	r2, r3, #1
 8006c9a:	61fa      	str	r2, [r7, #28]
 8006c9c:	69ba      	ldr	r2, [r7, #24]
 8006c9e:	b2d2      	uxtb	r2, r2
 8006ca0:	701a      	strb	r2, [r3, #0]
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006ca6:	221a      	movs	r2, #26
 8006ca8:	68f9      	ldr	r1, [r7, #12]
 8006caa:	6938      	ldr	r0, [r7, #16]
 8006cac:	f7fe fb12 	bl	80052d4 <_SendPacket>
  RECORD_END();
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	f383 8811 	msr	BASEPRI, r3
}
 8006cb6:	bf00      	nop
 8006cb8:	3728      	adds	r7, #40	; 0x28
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	20014314 	.word	0x20014314

08006cc4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8006cc8:	4803      	ldr	r0, [pc, #12]	; (8006cd8 <_cbSendSystemDesc+0x14>)
 8006cca:	f7ff fc8d 	bl	80065e8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8006cce:	4803      	ldr	r0, [pc, #12]	; (8006cdc <_cbSendSystemDesc+0x18>)
 8006cd0:	f7ff fc8a 	bl	80065e8 <SEGGER_SYSVIEW_SendSysDesc>
}
 8006cd4:	bf00      	nop
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	0800705c 	.word	0x0800705c
 8006cdc:	080070a0 	.word	0x080070a0

08006ce0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8006ce4:	4b06      	ldr	r3, [pc, #24]	; (8006d00 <SEGGER_SYSVIEW_Conf+0x20>)
 8006ce6:	6818      	ldr	r0, [r3, #0]
 8006ce8:	4b05      	ldr	r3, [pc, #20]	; (8006d00 <SEGGER_SYSVIEW_Conf+0x20>)
 8006cea:	6819      	ldr	r1, [r3, #0]
 8006cec:	4b05      	ldr	r3, [pc, #20]	; (8006d04 <SEGGER_SYSVIEW_Conf+0x24>)
 8006cee:	4a06      	ldr	r2, [pc, #24]	; (8006d08 <SEGGER_SYSVIEW_Conf+0x28>)
 8006cf0:	f7fe fff8 	bl	8005ce4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8006cf4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8006cf8:	f7ff f838 	bl	8005d6c <SEGGER_SYSVIEW_SetRAMBase>
}
 8006cfc:	bf00      	nop
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	20000000 	.word	0x20000000
 8006d04:	08006cc5 	.word	0x08006cc5
 8006d08:	08007150 	.word	0x08007150

08006d0c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8006d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8006d12:	2300      	movs	r3, #0
 8006d14:	607b      	str	r3, [r7, #4]
 8006d16:	e033      	b.n	8006d80 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8006d18:	491e      	ldr	r1, [pc, #120]	; (8006d94 <_cbSendTaskList+0x88>)
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4413      	add	r3, r2
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	440b      	add	r3, r1
 8006d26:	6818      	ldr	r0, [r3, #0]
 8006d28:	491a      	ldr	r1, [pc, #104]	; (8006d94 <_cbSendTaskList+0x88>)
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	440b      	add	r3, r1
 8006d36:	3304      	adds	r3, #4
 8006d38:	6819      	ldr	r1, [r3, #0]
 8006d3a:	4c16      	ldr	r4, [pc, #88]	; (8006d94 <_cbSendTaskList+0x88>)
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4413      	add	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	4423      	add	r3, r4
 8006d48:	3308      	adds	r3, #8
 8006d4a:	681c      	ldr	r4, [r3, #0]
 8006d4c:	4d11      	ldr	r5, [pc, #68]	; (8006d94 <_cbSendTaskList+0x88>)
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	4613      	mov	r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4413      	add	r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	442b      	add	r3, r5
 8006d5a:	330c      	adds	r3, #12
 8006d5c:	681d      	ldr	r5, [r3, #0]
 8006d5e:	4e0d      	ldr	r6, [pc, #52]	; (8006d94 <_cbSendTaskList+0x88>)
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	4613      	mov	r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	4413      	add	r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4433      	add	r3, r6
 8006d6c:	3310      	adds	r3, #16
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	9300      	str	r3, [sp, #0]
 8006d72:	462b      	mov	r3, r5
 8006d74:	4622      	mov	r2, r4
 8006d76:	f000 f8bd 	bl	8006ef4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	607b      	str	r3, [r7, #4]
 8006d80:	4b05      	ldr	r3, [pc, #20]	; (8006d98 <_cbSendTaskList+0x8c>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d3c6      	bcc.n	8006d18 <_cbSendTaskList+0xc>
  }
}
 8006d8a:	bf00      	nop
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d94:	200143f8 	.word	0x200143f8
 8006d98:	20014498 	.word	0x20014498

08006d9c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8006d9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006da0:	b082      	sub	sp, #8
 8006da2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8006da4:	f7fc fb7c 	bl	80034a0 <xTaskGetTickCountFromISR>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2200      	movs	r2, #0
 8006dac:	469a      	mov	sl, r3
 8006dae:	4693      	mov	fp, r2
 8006db0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8006db4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006db8:	4602      	mov	r2, r0
 8006dba:	460b      	mov	r3, r1
 8006dbc:	f04f 0a00 	mov.w	sl, #0
 8006dc0:	f04f 0b00 	mov.w	fp, #0
 8006dc4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8006dc8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8006dcc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8006dd0:	4652      	mov	r2, sl
 8006dd2:	465b      	mov	r3, fp
 8006dd4:	1a14      	subs	r4, r2, r0
 8006dd6:	eb63 0501 	sbc.w	r5, r3, r1
 8006dda:	f04f 0200 	mov.w	r2, #0
 8006dde:	f04f 0300 	mov.w	r3, #0
 8006de2:	00ab      	lsls	r3, r5, #2
 8006de4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8006de8:	00a2      	lsls	r2, r4, #2
 8006dea:	4614      	mov	r4, r2
 8006dec:	461d      	mov	r5, r3
 8006dee:	eb14 0800 	adds.w	r8, r4, r0
 8006df2:	eb45 0901 	adc.w	r9, r5, r1
 8006df6:	f04f 0200 	mov.w	r2, #0
 8006dfa:	f04f 0300 	mov.w	r3, #0
 8006dfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e0a:	4690      	mov	r8, r2
 8006e0c:	4699      	mov	r9, r3
 8006e0e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8006e12:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8006e16:	4610      	mov	r0, r2
 8006e18:	4619      	mov	r1, r3
 8006e1a:	3708      	adds	r7, #8
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08006e24 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b086      	sub	sp, #24
 8006e28:	af02      	add	r7, sp, #8
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	607a      	str	r2, [r7, #4]
 8006e30:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8006e32:	2205      	movs	r2, #5
 8006e34:	492b      	ldr	r1, [pc, #172]	; (8006ee4 <SYSVIEW_AddTask+0xc0>)
 8006e36:	68b8      	ldr	r0, [r7, #8]
 8006e38:	f000 f8a2 	bl	8006f80 <memcmp>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d04b      	beq.n	8006eda <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8006e42:	4b29      	ldr	r3, [pc, #164]	; (8006ee8 <SYSVIEW_AddTask+0xc4>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2b07      	cmp	r3, #7
 8006e48:	d903      	bls.n	8006e52 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8006e4a:	4828      	ldr	r0, [pc, #160]	; (8006eec <SYSVIEW_AddTask+0xc8>)
 8006e4c:	f7ff fede 	bl	8006c0c <SEGGER_SYSVIEW_Warn>
    return;
 8006e50:	e044      	b.n	8006edc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8006e52:	4b25      	ldr	r3, [pc, #148]	; (8006ee8 <SYSVIEW_AddTask+0xc4>)
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	4926      	ldr	r1, [pc, #152]	; (8006ef0 <SYSVIEW_AddTask+0xcc>)
 8006e58:	4613      	mov	r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	440b      	add	r3, r1
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8006e66:	4b20      	ldr	r3, [pc, #128]	; (8006ee8 <SYSVIEW_AddTask+0xc4>)
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	4921      	ldr	r1, [pc, #132]	; (8006ef0 <SYSVIEW_AddTask+0xcc>)
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4413      	add	r3, r2
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	440b      	add	r3, r1
 8006e76:	3304      	adds	r3, #4
 8006e78:	68ba      	ldr	r2, [r7, #8]
 8006e7a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8006e7c:	4b1a      	ldr	r3, [pc, #104]	; (8006ee8 <SYSVIEW_AddTask+0xc4>)
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	491b      	ldr	r1, [pc, #108]	; (8006ef0 <SYSVIEW_AddTask+0xcc>)
 8006e82:	4613      	mov	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4413      	add	r3, r2
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	440b      	add	r3, r1
 8006e8c:	3308      	adds	r3, #8
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8006e92:	4b15      	ldr	r3, [pc, #84]	; (8006ee8 <SYSVIEW_AddTask+0xc4>)
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	4916      	ldr	r1, [pc, #88]	; (8006ef0 <SYSVIEW_AddTask+0xcc>)
 8006e98:	4613      	mov	r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4413      	add	r3, r2
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	440b      	add	r3, r1
 8006ea2:	330c      	adds	r3, #12
 8006ea4:	683a      	ldr	r2, [r7, #0]
 8006ea6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8006ea8:	4b0f      	ldr	r3, [pc, #60]	; (8006ee8 <SYSVIEW_AddTask+0xc4>)
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	4910      	ldr	r1, [pc, #64]	; (8006ef0 <SYSVIEW_AddTask+0xcc>)
 8006eae:	4613      	mov	r3, r2
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4413      	add	r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	440b      	add	r3, r1
 8006eb8:	3310      	adds	r3, #16
 8006eba:	69ba      	ldr	r2, [r7, #24]
 8006ebc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8006ebe:	4b0a      	ldr	r3, [pc, #40]	; (8006ee8 <SYSVIEW_AddTask+0xc4>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	4a08      	ldr	r2, [pc, #32]	; (8006ee8 <SYSVIEW_AddTask+0xc4>)
 8006ec6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	68b9      	ldr	r1, [r7, #8]
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f000 f80e 	bl	8006ef4 <SYSVIEW_SendTaskInfo>
 8006ed8:	e000      	b.n	8006edc <SYSVIEW_AddTask+0xb8>
    return;
 8006eda:	bf00      	nop

}
 8006edc:	3710      	adds	r7, #16
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	080070b0 	.word	0x080070b0
 8006ee8:	20014498 	.word	0x20014498
 8006eec:	080070b8 	.word	0x080070b8
 8006ef0:	200143f8 	.word	0x200143f8

08006ef4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b08a      	sub	sp, #40	; 0x28
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
 8006f00:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8006f02:	f107 0314 	add.w	r3, r7, #20
 8006f06:	2214      	movs	r2, #20
 8006f08:	2100      	movs	r1, #0
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f000 f856 	bl	8006fbc <memset>
  TaskInfo.TaskID     = TaskID;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8006f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f22:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8006f24:	f107 0314 	add.w	r3, r7, #20
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7ff fa65 	bl	80063f8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8006f2e:	bf00      	nop
 8006f30:	3728      	adds	r7, #40	; 0x28
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
	...

08006f38 <__libc_init_array>:
 8006f38:	b570      	push	{r4, r5, r6, lr}
 8006f3a:	4d0d      	ldr	r5, [pc, #52]	; (8006f70 <__libc_init_array+0x38>)
 8006f3c:	4c0d      	ldr	r4, [pc, #52]	; (8006f74 <__libc_init_array+0x3c>)
 8006f3e:	1b64      	subs	r4, r4, r5
 8006f40:	10a4      	asrs	r4, r4, #2
 8006f42:	2600      	movs	r6, #0
 8006f44:	42a6      	cmp	r6, r4
 8006f46:	d109      	bne.n	8006f5c <__libc_init_array+0x24>
 8006f48:	4d0b      	ldr	r5, [pc, #44]	; (8006f78 <__libc_init_array+0x40>)
 8006f4a:	4c0c      	ldr	r4, [pc, #48]	; (8006f7c <__libc_init_array+0x44>)
 8006f4c:	f000 f83e 	bl	8006fcc <_init>
 8006f50:	1b64      	subs	r4, r4, r5
 8006f52:	10a4      	asrs	r4, r4, #2
 8006f54:	2600      	movs	r6, #0
 8006f56:	42a6      	cmp	r6, r4
 8006f58:	d105      	bne.n	8006f66 <__libc_init_array+0x2e>
 8006f5a:	bd70      	pop	{r4, r5, r6, pc}
 8006f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f60:	4798      	blx	r3
 8006f62:	3601      	adds	r6, #1
 8006f64:	e7ee      	b.n	8006f44 <__libc_init_array+0xc>
 8006f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f6a:	4798      	blx	r3
 8006f6c:	3601      	adds	r6, #1
 8006f6e:	e7f2      	b.n	8006f56 <__libc_init_array+0x1e>
 8006f70:	08007160 	.word	0x08007160
 8006f74:	08007160 	.word	0x08007160
 8006f78:	08007160 	.word	0x08007160
 8006f7c:	08007164 	.word	0x08007164

08006f80 <memcmp>:
 8006f80:	b510      	push	{r4, lr}
 8006f82:	3901      	subs	r1, #1
 8006f84:	4402      	add	r2, r0
 8006f86:	4290      	cmp	r0, r2
 8006f88:	d101      	bne.n	8006f8e <memcmp+0xe>
 8006f8a:	2000      	movs	r0, #0
 8006f8c:	e005      	b.n	8006f9a <memcmp+0x1a>
 8006f8e:	7803      	ldrb	r3, [r0, #0]
 8006f90:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006f94:	42a3      	cmp	r3, r4
 8006f96:	d001      	beq.n	8006f9c <memcmp+0x1c>
 8006f98:	1b18      	subs	r0, r3, r4
 8006f9a:	bd10      	pop	{r4, pc}
 8006f9c:	3001      	adds	r0, #1
 8006f9e:	e7f2      	b.n	8006f86 <memcmp+0x6>

08006fa0 <memcpy>:
 8006fa0:	440a      	add	r2, r1
 8006fa2:	4291      	cmp	r1, r2
 8006fa4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fa8:	d100      	bne.n	8006fac <memcpy+0xc>
 8006faa:	4770      	bx	lr
 8006fac:	b510      	push	{r4, lr}
 8006fae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fb6:	4291      	cmp	r1, r2
 8006fb8:	d1f9      	bne.n	8006fae <memcpy+0xe>
 8006fba:	bd10      	pop	{r4, pc}

08006fbc <memset>:
 8006fbc:	4402      	add	r2, r0
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d100      	bne.n	8006fc6 <memset+0xa>
 8006fc4:	4770      	bx	lr
 8006fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8006fca:	e7f9      	b.n	8006fc0 <memset+0x4>

08006fcc <_init>:
 8006fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fce:	bf00      	nop
 8006fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fd2:	bc08      	pop	{r3}
 8006fd4:	469e      	mov	lr, r3
 8006fd6:	4770      	bx	lr

08006fd8 <_fini>:
 8006fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fda:	bf00      	nop
 8006fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fde:	bc08      	pop	{r3}
 8006fe0:	469e      	mov	lr, r3
 8006fe2:	4770      	bx	lr
