
USART_INT_BUFFER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009654  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  08009804  08009804  00019804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b90  08009b90  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08009b90  08009b90  00019b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b98  08009b98  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b98  08009b98  00019b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b9c  08009b9c  00019b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08009ba0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000145a0  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200145b0  200145b0  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001adbc  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a72  00000000  00000000  0003adfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001658  00000000  00000000  0003e870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014c0  00000000  00000000  0003fec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000044ae  00000000  00000000  00041388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e8a4  00000000  00000000  00045836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e939a  00000000  00000000  000640da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014d474  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d58  00000000  00000000  0014d4c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080097ec 	.word	0x080097ec

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	080097ec 	.word	0x080097ec

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20012f38 	.word	0x20012f38

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b974 	b.w	8000584 <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9d08      	ldr	r5, [sp, #32]
 80002ba:	4604      	mov	r4, r0
 80002bc:	468e      	mov	lr, r1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d14d      	bne.n	800035e <__udivmoddi4+0xaa>
 80002c2:	428a      	cmp	r2, r1
 80002c4:	4694      	mov	ip, r2
 80002c6:	d969      	bls.n	800039c <__udivmoddi4+0xe8>
 80002c8:	fab2 f282 	clz	r2, r2
 80002cc:	b152      	cbz	r2, 80002e4 <__udivmoddi4+0x30>
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	f1c2 0120 	rsb	r1, r2, #32
 80002d6:	fa20 f101 	lsr.w	r1, r0, r1
 80002da:	fa0c fc02 	lsl.w	ip, ip, r2
 80002de:	ea41 0e03 	orr.w	lr, r1, r3
 80002e2:	4094      	lsls	r4, r2
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	0c21      	lsrs	r1, r4, #16
 80002ea:	fbbe f6f8 	udiv	r6, lr, r8
 80002ee:	fa1f f78c 	uxth.w	r7, ip
 80002f2:	fb08 e316 	mls	r3, r8, r6, lr
 80002f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002fa:	fb06 f107 	mul.w	r1, r6, r7
 80002fe:	4299      	cmp	r1, r3
 8000300:	d90a      	bls.n	8000318 <__udivmoddi4+0x64>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 30ff 	add.w	r0, r6, #4294967295
 800030a:	f080 811f 	bcs.w	800054c <__udivmoddi4+0x298>
 800030e:	4299      	cmp	r1, r3
 8000310:	f240 811c 	bls.w	800054c <__udivmoddi4+0x298>
 8000314:	3e02      	subs	r6, #2
 8000316:	4463      	add	r3, ip
 8000318:	1a5b      	subs	r3, r3, r1
 800031a:	b2a4      	uxth	r4, r4
 800031c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000320:	fb08 3310 	mls	r3, r8, r0, r3
 8000324:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000328:	fb00 f707 	mul.w	r7, r0, r7
 800032c:	42a7      	cmp	r7, r4
 800032e:	d90a      	bls.n	8000346 <__udivmoddi4+0x92>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	f080 810a 	bcs.w	8000550 <__udivmoddi4+0x29c>
 800033c:	42a7      	cmp	r7, r4
 800033e:	f240 8107 	bls.w	8000550 <__udivmoddi4+0x29c>
 8000342:	4464      	add	r4, ip
 8000344:	3802      	subs	r0, #2
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	1be4      	subs	r4, r4, r7
 800034c:	2600      	movs	r6, #0
 800034e:	b11d      	cbz	r5, 8000358 <__udivmoddi4+0xa4>
 8000350:	40d4      	lsrs	r4, r2
 8000352:	2300      	movs	r3, #0
 8000354:	e9c5 4300 	strd	r4, r3, [r5]
 8000358:	4631      	mov	r1, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0xc2>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80ef 	beq.w	8000546 <__udivmoddi4+0x292>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x160>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xd4>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80f9 	bhi.w	800057a <__udivmoddi4+0x2c6>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0303 	sbc.w	r3, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	469e      	mov	lr, r3
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e0      	beq.n	8000358 <__udivmoddi4+0xa4>
 8000396:	e9c5 4e00 	strd	r4, lr, [r5]
 800039a:	e7dd      	b.n	8000358 <__udivmoddi4+0xa4>
 800039c:	b902      	cbnz	r2, 80003a0 <__udivmoddi4+0xec>
 800039e:	deff      	udf	#255	; 0xff
 80003a0:	fab2 f282 	clz	r2, r2
 80003a4:	2a00      	cmp	r2, #0
 80003a6:	f040 8092 	bne.w	80004ce <__udivmoddi4+0x21a>
 80003aa:	eba1 010c 	sub.w	r1, r1, ip
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	2601      	movs	r6, #1
 80003b8:	0c20      	lsrs	r0, r4, #16
 80003ba:	fbb1 f3f7 	udiv	r3, r1, r7
 80003be:	fb07 1113 	mls	r1, r7, r3, r1
 80003c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c6:	fb0e f003 	mul.w	r0, lr, r3
 80003ca:	4288      	cmp	r0, r1
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x12c>
 80003ce:	eb1c 0101 	adds.w	r1, ip, r1
 80003d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x12a>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f200 80cb 	bhi.w	8000574 <__udivmoddi4+0x2c0>
 80003de:	4643      	mov	r3, r8
 80003e0:	1a09      	subs	r1, r1, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e8:	fb07 1110 	mls	r1, r7, r0, r1
 80003ec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003f0:	fb0e fe00 	mul.w	lr, lr, r0
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x156>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x154>
 8000402:	45a6      	cmp	lr, r4
 8000404:	f200 80bb 	bhi.w	800057e <__udivmoddi4+0x2ca>
 8000408:	4608      	mov	r0, r1
 800040a:	eba4 040e 	sub.w	r4, r4, lr
 800040e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000412:	e79c      	b.n	800034e <__udivmoddi4+0x9a>
 8000414:	f1c6 0720 	rsb	r7, r6, #32
 8000418:	40b3      	lsls	r3, r6
 800041a:	fa22 fc07 	lsr.w	ip, r2, r7
 800041e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000422:	fa20 f407 	lsr.w	r4, r0, r7
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	431c      	orrs	r4, r3
 800042c:	40f9      	lsrs	r1, r7
 800042e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000432:	fa00 f306 	lsl.w	r3, r0, r6
 8000436:	fbb1 f8f9 	udiv	r8, r1, r9
 800043a:	0c20      	lsrs	r0, r4, #16
 800043c:	fa1f fe8c 	uxth.w	lr, ip
 8000440:	fb09 1118 	mls	r1, r9, r8, r1
 8000444:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000448:	fb08 f00e 	mul.w	r0, r8, lr
 800044c:	4288      	cmp	r0, r1
 800044e:	fa02 f206 	lsl.w	r2, r2, r6
 8000452:	d90b      	bls.n	800046c <__udivmoddi4+0x1b8>
 8000454:	eb1c 0101 	adds.w	r1, ip, r1
 8000458:	f108 3aff 	add.w	sl, r8, #4294967295
 800045c:	f080 8088 	bcs.w	8000570 <__udivmoddi4+0x2bc>
 8000460:	4288      	cmp	r0, r1
 8000462:	f240 8085 	bls.w	8000570 <__udivmoddi4+0x2bc>
 8000466:	f1a8 0802 	sub.w	r8, r8, #2
 800046a:	4461      	add	r1, ip
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f9 	udiv	r0, r1, r9
 8000474:	fb09 1110 	mls	r1, r9, r0, r1
 8000478:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800047c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000480:	458e      	cmp	lr, r1
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x1e2>
 8000484:	eb1c 0101 	adds.w	r1, ip, r1
 8000488:	f100 34ff 	add.w	r4, r0, #4294967295
 800048c:	d26c      	bcs.n	8000568 <__udivmoddi4+0x2b4>
 800048e:	458e      	cmp	lr, r1
 8000490:	d96a      	bls.n	8000568 <__udivmoddi4+0x2b4>
 8000492:	3802      	subs	r0, #2
 8000494:	4461      	add	r1, ip
 8000496:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800049a:	fba0 9402 	umull	r9, r4, r0, r2
 800049e:	eba1 010e 	sub.w	r1, r1, lr
 80004a2:	42a1      	cmp	r1, r4
 80004a4:	46c8      	mov	r8, r9
 80004a6:	46a6      	mov	lr, r4
 80004a8:	d356      	bcc.n	8000558 <__udivmoddi4+0x2a4>
 80004aa:	d053      	beq.n	8000554 <__udivmoddi4+0x2a0>
 80004ac:	b15d      	cbz	r5, 80004c6 <__udivmoddi4+0x212>
 80004ae:	ebb3 0208 	subs.w	r2, r3, r8
 80004b2:	eb61 010e 	sbc.w	r1, r1, lr
 80004b6:	fa01 f707 	lsl.w	r7, r1, r7
 80004ba:	fa22 f306 	lsr.w	r3, r2, r6
 80004be:	40f1      	lsrs	r1, r6
 80004c0:	431f      	orrs	r7, r3
 80004c2:	e9c5 7100 	strd	r7, r1, [r5]
 80004c6:	2600      	movs	r6, #0
 80004c8:	4631      	mov	r1, r6
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	40d8      	lsrs	r0, r3
 80004d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d8:	fa21 f303 	lsr.w	r3, r1, r3
 80004dc:	4091      	lsls	r1, r2
 80004de:	4301      	orrs	r1, r0
 80004e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e4:	fa1f fe8c 	uxth.w	lr, ip
 80004e8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004ec:	fb07 3610 	mls	r6, r7, r0, r3
 80004f0:	0c0b      	lsrs	r3, r1, #16
 80004f2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f6:	fb00 f60e 	mul.w	r6, r0, lr
 80004fa:	429e      	cmp	r6, r3
 80004fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x260>
 8000502:	eb1c 0303 	adds.w	r3, ip, r3
 8000506:	f100 38ff 	add.w	r8, r0, #4294967295
 800050a:	d22f      	bcs.n	800056c <__udivmoddi4+0x2b8>
 800050c:	429e      	cmp	r6, r3
 800050e:	d92d      	bls.n	800056c <__udivmoddi4+0x2b8>
 8000510:	3802      	subs	r0, #2
 8000512:	4463      	add	r3, ip
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	b289      	uxth	r1, r1
 8000518:	fbb3 f6f7 	udiv	r6, r3, r7
 800051c:	fb07 3316 	mls	r3, r7, r6, r3
 8000520:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000524:	fb06 f30e 	mul.w	r3, r6, lr
 8000528:	428b      	cmp	r3, r1
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x28a>
 800052c:	eb1c 0101 	adds.w	r1, ip, r1
 8000530:	f106 38ff 	add.w	r8, r6, #4294967295
 8000534:	d216      	bcs.n	8000564 <__udivmoddi4+0x2b0>
 8000536:	428b      	cmp	r3, r1
 8000538:	d914      	bls.n	8000564 <__udivmoddi4+0x2b0>
 800053a:	3e02      	subs	r6, #2
 800053c:	4461      	add	r1, ip
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000544:	e738      	b.n	80003b8 <__udivmoddi4+0x104>
 8000546:	462e      	mov	r6, r5
 8000548:	4628      	mov	r0, r5
 800054a:	e705      	b.n	8000358 <__udivmoddi4+0xa4>
 800054c:	4606      	mov	r6, r0
 800054e:	e6e3      	b.n	8000318 <__udivmoddi4+0x64>
 8000550:	4618      	mov	r0, r3
 8000552:	e6f8      	b.n	8000346 <__udivmoddi4+0x92>
 8000554:	454b      	cmp	r3, r9
 8000556:	d2a9      	bcs.n	80004ac <__udivmoddi4+0x1f8>
 8000558:	ebb9 0802 	subs.w	r8, r9, r2
 800055c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000560:	3801      	subs	r0, #1
 8000562:	e7a3      	b.n	80004ac <__udivmoddi4+0x1f8>
 8000564:	4646      	mov	r6, r8
 8000566:	e7ea      	b.n	800053e <__udivmoddi4+0x28a>
 8000568:	4620      	mov	r0, r4
 800056a:	e794      	b.n	8000496 <__udivmoddi4+0x1e2>
 800056c:	4640      	mov	r0, r8
 800056e:	e7d1      	b.n	8000514 <__udivmoddi4+0x260>
 8000570:	46d0      	mov	r8, sl
 8000572:	e77b      	b.n	800046c <__udivmoddi4+0x1b8>
 8000574:	3b02      	subs	r3, #2
 8000576:	4461      	add	r1, ip
 8000578:	e732      	b.n	80003e0 <__udivmoddi4+0x12c>
 800057a:	4630      	mov	r0, r6
 800057c:	e709      	b.n	8000392 <__udivmoddi4+0xde>
 800057e:	4464      	add	r4, ip
 8000580:	3802      	subs	r0, #2
 8000582:	e742      	b.n	800040a <__udivmoddi4+0x156>

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <initUart1Pins>:
#include "UartQuickDirtyInit.h"
#include <stm32f4xx_hal.h>
#include <main.h>

void initUart1Pins( void )
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

	//PA9 is USART1_RX PA10 is USART1_TX
	GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800059c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80005a0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a2:	2302      	movs	r3, #2
 80005a4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005aa:	2303      	movs	r3, #3
 80005ac:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80005ae:	2307      	movs	r3, #7
 80005b0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	4619      	mov	r1, r3
 80005b6:	4803      	ldr	r0, [pc, #12]	; (80005c4 <initUart1Pins+0x3c>)
 80005b8:	f001 fd46 	bl	8002048 <HAL_GPIO_Init>
}
 80005bc:	bf00      	nop
 80005be:	3718      	adds	r7, #24
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40020000 	.word	0x40020000

080005c8 <initUart5Pins>:

void initUart5Pins( void )
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = GPIO_PIN_12;
 80005dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e2:	2302      	movs	r3, #2
 80005e4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ea:	2303      	movs	r3, #3
 80005ec:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80005ee:	2308      	movs	r3, #8
 80005f0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	4619      	mov	r1, r3
 80005f6:	480b      	ldr	r0, [pc, #44]	; (8000624 <initUart5Pins+0x5c>)
 80005f8:	f001 fd26 	bl	8002048 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005fc:	2304      	movs	r3, #4
 80005fe:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000600:	2302      	movs	r3, #2
 8000602:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000608:	2303      	movs	r3, #3
 800060a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800060c:	2308      	movs	r3, #8
 800060e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	4619      	mov	r1, r3
 8000614:	4804      	ldr	r0, [pc, #16]	; (8000628 <initUart5Pins+0x60>)
 8000616:	f001 fd17 	bl	8002048 <HAL_GPIO_Init>

}
 800061a:	bf00      	nop
 800061c:	3718      	adds	r7, #24
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40020800 	.word	0x40020800
 8000628:	40020c00 	.word	0x40020c00

0800062c <STM_UartInit>:
 * @param Baudrate desired baudrate the UART will be setup to use
 * @param DmaTx pointer to DMA struct to use when transmitting via DMA
 * @param DmaRx pointer to DMA struct to use when receiving via DMA
 */
void STM_UartInit( USART_TypeDef* STM_UART_PERIPH, uint32_t Baudrate, DMA_HandleTypeDef* DmaTx, DMA_HandleTypeDef* DmaRx )
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b098      	sub	sp, #96	; 0x60
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
 8000638:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef retVal;
	UART_HandleTypeDef uartInitStruct;
	assert_param(	STM_UART_PERIPH == USART1 ||
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	4a2e      	ldr	r2, [pc, #184]	; (80006f8 <STM_UartInit+0xcc>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d007      	beq.n	8000652 <STM_UartInit+0x26>
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	4a2d      	ldr	r2, [pc, #180]	; (80006fc <STM_UartInit+0xd0>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d003      	beq.n	8000652 <STM_UartInit+0x26>
 800064a:	2150      	movs	r1, #80	; 0x50
 800064c:	482c      	ldr	r0, [pc, #176]	; (8000700 <STM_UartInit+0xd4>)
 800064e:	f000 fdf1 	bl	8001234 <assert_failed>
					STM_UART_PERIPH == UART5 );

	if(STM_UART_PERIPH == USART1)
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	4a28      	ldr	r2, [pc, #160]	; (80006f8 <STM_UartInit+0xcc>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d110      	bne.n	800067c <STM_UartInit+0x50>
	{
		initUart1Pins();
 800065a:	f7ff ff95 	bl	8000588 <initUart1Pins>
		__USART1_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]
 8000662:	4b28      	ldr	r3, [pc, #160]	; (8000704 <STM_UartInit+0xd8>)
 8000664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000666:	4a27      	ldr	r2, [pc, #156]	; (8000704 <STM_UartInit+0xd8>)
 8000668:	f043 0310 	orr.w	r3, r3, #16
 800066c:	6453      	str	r3, [r2, #68]	; 0x44
 800066e:	4b25      	ldr	r3, [pc, #148]	; (8000704 <STM_UartInit+0xd8>)
 8000670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000672:	f003 0310 	and.w	r3, r3, #16
 8000676:	617b      	str	r3, [r7, #20]
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	e013      	b.n	80006a4 <STM_UartInit+0x78>
	}
	else if (STM_UART_PERIPH == UART5)
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	4a1f      	ldr	r2, [pc, #124]	; (80006fc <STM_UartInit+0xd0>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d10f      	bne.n	80006a4 <STM_UartInit+0x78>
	{
		initUart5Pins();
 8000684:	f7ff ffa0 	bl	80005c8 <initUart5Pins>
		__UART5_CLK_ENABLE();
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]
 800068c:	4b1d      	ldr	r3, [pc, #116]	; (8000704 <STM_UartInit+0xd8>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	4a1c      	ldr	r2, [pc, #112]	; (8000704 <STM_UartInit+0xd8>)
 8000692:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000696:	6413      	str	r3, [r2, #64]	; 0x40
 8000698:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <STM_UartInit+0xd8>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80006a0:	613b      	str	r3, [r7, #16]
 80006a2:	693b      	ldr	r3, [r7, #16]
	}

	uartInitStruct.Instance = STM_UART_PERIPH;
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	61bb      	str	r3, [r7, #24]
	uartInitStruct.Init.BaudRate = Baudrate;
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	61fb      	str	r3, [r7, #28]
	uartInitStruct.Init.WordLength = UART_WORDLENGTH_8B;
 80006ac:	2300      	movs	r3, #0
 80006ae:	623b      	str	r3, [r7, #32]
	uartInitStruct.Init.StopBits = UART_STOPBITS_1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24
	uartInitStruct.Init.Parity = UART_PARITY_NONE;
 80006b4:	2300      	movs	r3, #0
 80006b6:	62bb      	str	r3, [r7, #40]	; 0x28
	uartInitStruct.Init.Mode = UART_MODE_TX_RX;
 80006b8:	230c      	movs	r3, #12
 80006ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	uartInitStruct.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006bc:	2300      	movs	r3, #0
 80006be:	633b      	str	r3, [r7, #48]	; 0x30
	uartInitStruct.Init.OverSampling = UART_OVERSAMPLING_8;
 80006c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006c4:	637b      	str	r3, [r7, #52]	; 0x34
	//uartInitStruct.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	uartInitStruct.hdmatx = DmaTx;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	64fb      	str	r3, [r7, #76]	; 0x4c
	uartInitStruct.hdmarx = DmaRx;
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	653b      	str	r3, [r7, #80]	; 0x50
	//uartInitStruct.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;

	retVal = HAL_UART_Init(&uartInitStruct);
 80006ce:	f107 0318 	add.w	r3, r7, #24
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 f9f4 	bl	8003ac0 <HAL_UART_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	assert_param(retVal == HAL_OK);
 80006de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d003      	beq.n	80006ee <STM_UartInit+0xc2>
 80006e6:	216c      	movs	r1, #108	; 0x6c
 80006e8:	4805      	ldr	r0, [pc, #20]	; (8000700 <STM_UartInit+0xd4>)
 80006ea:	f000 fda3 	bl	8001234 <assert_failed>
}
 80006ee:	bf00      	nop
 80006f0:	3760      	adds	r7, #96	; 0x60
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40011000 	.word	0x40011000
 80006fc:	40005000 	.word	0x40005000
 8000700:	08009804 	.word	0x08009804
 8000704:	40023800 	.word	0x40023800

08000708 <SetupUart5ExternalSim>:
 * @param Baudrate desired baudrate for the UART4
 *
 * This is a quick and dirty setup. . .
 */
void SetupUart5ExternalSim( uint32_t BaudRate )
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	//setup DMA
	uart5TxDmaSetup();
 8000710:	f000 f81a 	bl	8000748 <uart5TxDmaSetup>

	//GPIO pins are setup in BSP/Nucleo_F767ZI_Init
	STM_UartInit(UART5, BaudRate, &hdma_uart5_tx, NULL);
 8000714:	2300      	movs	r3, #0
 8000716:	4a09      	ldr	r2, [pc, #36]	; (800073c <SetupUart5ExternalSim+0x34>)
 8000718:	6879      	ldr	r1, [r7, #4]
 800071a:	4809      	ldr	r0, [pc, #36]	; (8000740 <SetupUart5ExternalSim+0x38>)
 800071c:	f7ff ff86 	bl	800062c <STM_UartInit>

	//also enable DMA for UART5 Transmits
	UART5->CR3 |= USART_CR3_DMAT;
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <SetupUart5ExternalSim+0x38>)
 8000722:	695b      	ldr	r3, [r3, #20]
 8000724:	4a06      	ldr	r2, [pc, #24]	; (8000740 <SetupUart5ExternalSim+0x38>)
 8000726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800072a:	6153      	str	r3, [r2, #20]
	 *	start the repeating DMA transfer.  Eventually, non-circular
	 *	receivers will loose a character here or there at high baudrates.
	 *	When this happens, SEGGER_SYSVIEW_Print() will stop printing when it hits
	 *	the first NULL character.
	 */
	uart5TxDmaStartRepeat(uart5Msg, sizeof(uart5Msg));
 800072c:	2110      	movs	r1, #16
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <SetupUart5ExternalSim+0x3c>)
 8000730:	f000 f874 	bl	800081c <uart5TxDmaStartRepeat>
}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2000002c 	.word	0x2000002c
 8000740:	40005000 	.word	0x40005000
 8000744:	08009b38 	.word	0x08009b38

08000748 <uart5TxDmaSetup>:

static void uart5TxDmaSetup( void )
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	  __HAL_RCC_DMA1_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	4b2d      	ldr	r3, [pc, #180]	; (8000808 <uart5TxDmaSetup+0xc0>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a2c      	ldr	r2, [pc, #176]	; (8000808 <uart5TxDmaSetup+0xc0>)
 8000758:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b2a      	ldr	r3, [pc, #168]	; (8000808 <uart5TxDmaSetup+0xc0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

	  /* DMA interrupt init */
	  /* DMA1_Stream7_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2100      	movs	r1, #0
 800076e:	202f      	movs	r0, #47	; 0x2f
 8000770:	f001 f850 	bl	8001814 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000774:	202f      	movs	r0, #47	; 0x2f
 8000776:	f001 f879 	bl	800186c <HAL_NVIC_EnableIRQ>

	//initialize the DMA peripheral to transfer uart4Msg
	//to UART4 repeatedly
	memset(&hdma_uart5_tx, 0, sizeof(hdma_uart5_tx));
 800077a:	2260      	movs	r2, #96	; 0x60
 800077c:	2100      	movs	r1, #0
 800077e:	4823      	ldr	r0, [pc, #140]	; (800080c <uart5TxDmaSetup+0xc4>)
 8000780:	f009 f82c 	bl	80097dc <memset>
	hdma_uart5_tx.Instance = DMA1_Stream7;
 8000784:	4b21      	ldr	r3, [pc, #132]	; (800080c <uart5TxDmaSetup+0xc4>)
 8000786:	4a22      	ldr	r2, [pc, #136]	; (8000810 <uart5TxDmaSetup+0xc8>)
 8000788:	601a      	str	r2, [r3, #0]
	hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;			//channel 4 is for UART5 Tx
 800078a:	4b20      	ldr	r3, [pc, #128]	; (800080c <uart5TxDmaSetup+0xc4>)
 800078c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000790:	605a      	str	r2, [r3, #4]
	hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;	//transfering out of memory and into the peripheral register
 8000792:	4b1e      	ldr	r3, [pc, #120]	; (800080c <uart5TxDmaSetup+0xc4>)
 8000794:	2240      	movs	r2, #64	; 0x40
 8000796:	609a      	str	r2, [r3, #8]
	hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;	//no fifo
 8000798:	4b1c      	ldr	r3, [pc, #112]	; (800080c <uart5TxDmaSetup+0xc4>)
 800079a:	2200      	movs	r2, #0
 800079c:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_uart5_tx.Init.MemBurst = DMA_MBURST_SINGLE;		//transfer 1 at a time
 800079e:	4b1b      	ldr	r3, [pc, #108]	; (800080c <uart5TxDmaSetup+0xc4>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007a4:	4b19      	ldr	r3, [pc, #100]	; (800080c <uart5TxDmaSetup+0xc4>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	619a      	str	r2, [r3, #24]
	hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;			//increment 1 byte at a time
 80007aa:	4b18      	ldr	r3, [pc, #96]	; (800080c <uart5TxDmaSetup+0xc4>)
 80007ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007b0:	611a      	str	r2, [r3, #16]
	hdma_uart5_tx.Init.Mode = DMA_CIRCULAR;				//this will automatically restart the transfer at the beginning after it has finished
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <uart5TxDmaSetup+0xc4>)
 80007b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007b8:	61da      	str	r2, [r3, #28]
	hdma_uart5_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;	//write 1 at a time to the peripheral
 80007ba:	4b14      	ldr	r3, [pc, #80]	; (800080c <uart5TxDmaSetup+0xc4>)
 80007bc:	2200      	movs	r2, #0
 80007be:	631a      	str	r2, [r3, #48]	; 0x30
	hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;		//always keep the peripheral address the same (the Tx data register is always in the same location)
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <uart5TxDmaSetup+0xc4>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
	hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <uart5TxDmaSetup+0xc4>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	615a      	str	r2, [r3, #20]
	//we're setting low priority since this is meant to be simulated data - the DMA
	//transfers of the active code should take priority
	hdma_uart5_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <uart5TxDmaSetup+0xc4>)
 80007ce:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007d2:	621a      	str	r2, [r3, #32]
	assert_param(HAL_DMA_Init(&hdma_uart5_tx) == HAL_OK);
 80007d4:	480d      	ldr	r0, [pc, #52]	; (800080c <uart5TxDmaSetup+0xc4>)
 80007d6:	f001 f861 	bl	800189c <HAL_DMA_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d003      	beq.n	80007e8 <uart5TxDmaSetup+0xa0>
 80007e0:	2161      	movs	r1, #97	; 0x61
 80007e2:	480c      	ldr	r0, [pc, #48]	; (8000814 <uart5TxDmaSetup+0xcc>)
 80007e4:	f000 fd26 	bl	8001234 <assert_failed>
	DMA1_Stream7->CR &= ~DMA_SxCR_EN;
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <uart5TxDmaSetup+0xc8>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a08      	ldr	r2, [pc, #32]	; (8000810 <uart5TxDmaSetup+0xc8>)
 80007ee:	f023 0301 	bic.w	r3, r3, #1
 80007f2:	6013      	str	r3, [r2, #0]

	//set the DMA transmit mode flag to enable DMA transfers
	UART5->CR3 |= USART_CR3_DMAT;
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <uart5TxDmaSetup+0xd0>)
 80007f6:	695b      	ldr	r3, [r3, #20]
 80007f8:	4a07      	ldr	r2, [pc, #28]	; (8000818 <uart5TxDmaSetup+0xd0>)
 80007fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007fe:	6153      	str	r3, [r2, #20]
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40023800 	.word	0x40023800
 800080c:	2000002c 	.word	0x2000002c
 8000810:	400260b8 	.word	0x400260b8
 8000814:	08009828 	.word	0x08009828
 8000818:	40005000 	.word	0x40005000

0800081c <uart5TxDmaStartRepeat>:
 * that will automatically repeat after it is finished
 * @param Msg pointer to array to transfer
 * @param Len number of elements in the array
 */
static void uart5TxDmaStartRepeat( const uint8_t* Msg, uint16_t Len )
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	460b      	mov	r3, r1
 8000826:	807b      	strh	r3, [r7, #2]

	//clear the transfer complete flag to make sure our transfer starts
	//UART5->ICR |= USART_ICR_TCCF;
	UART5->SR &= ~USART_SR_TC;
 8000828:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <uart5TxDmaStartRepeat+0x3c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <uart5TxDmaStartRepeat+0x3c>)
 800082e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000832:	6013      	str	r3, [r2, #0]
	assert_param(HAL_DMA_Start(&hdma_uart5_tx, (uint32_t)Msg, (uint32_t)&(UART5->DR), Len) == HAL_OK);
 8000834:	6879      	ldr	r1, [r7, #4]
 8000836:	887b      	ldrh	r3, [r7, #2]
 8000838:	4a08      	ldr	r2, [pc, #32]	; (800085c <uart5TxDmaStartRepeat+0x40>)
 800083a:	4809      	ldr	r0, [pc, #36]	; (8000860 <uart5TxDmaStartRepeat+0x44>)
 800083c:	f001 fa48 	bl	8001cd0 <HAL_DMA_Start>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d003      	beq.n	800084e <uart5TxDmaStartRepeat+0x32>
 8000846:	2174      	movs	r1, #116	; 0x74
 8000848:	4806      	ldr	r0, [pc, #24]	; (8000864 <uart5TxDmaStartRepeat+0x48>)
 800084a:	f000 fcf3 	bl	8001234 <assert_failed>
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40005000 	.word	0x40005000
 800085c:	40005004 	.word	0x40005004
 8000860:	2000002c 	.word	0x2000002c
 8000864:	08009828 	.word	0x08009828

08000868 <DMA1_Stream7_IRQHandler>:

void DMA1_Stream7_IRQHandler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
	//shouldn't ever get here - interrupts are not enabled
	while(1);
 800086c:	e7fe      	b.n	800086c <DMA1_Stream7_IRQHandler+0x4>
	...

08000870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f003 0307 	and.w	r3, r3, #7
 800087e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000886:	68ba      	ldr	r2, [r7, #8]
 8000888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800088c:	4013      	ands	r3, r2
 800088e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800089c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008a2:	4a04      	ldr	r2, [pc, #16]	; (80008b4 <__NVIC_SetPriorityGrouping+0x44>)
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	60d3      	str	r3, [r2, #12]
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	db0b      	blt.n	80008e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	f003 021f 	and.w	r2, r3, #31
 80008d0:	4907      	ldr	r1, [pc, #28]	; (80008f0 <__NVIC_EnableIRQ+0x38>)
 80008d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d6:	095b      	lsrs	r3, r3, #5
 80008d8:	2001      	movs	r0, #1
 80008da:	fa00 f202 	lsl.w	r2, r0, r2
 80008de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	e000e100 	.word	0xe000e100

080008f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	6039      	str	r1, [r7, #0]
 80008fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000904:	2b00      	cmp	r3, #0
 8000906:	db0a      	blt.n	800091e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	b2da      	uxtb	r2, r3
 800090c:	490c      	ldr	r1, [pc, #48]	; (8000940 <__NVIC_SetPriority+0x4c>)
 800090e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000912:	0112      	lsls	r2, r2, #4
 8000914:	b2d2      	uxtb	r2, r2
 8000916:	440b      	add	r3, r1
 8000918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800091c:	e00a      	b.n	8000934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	b2da      	uxtb	r2, r3
 8000922:	4908      	ldr	r1, [pc, #32]	; (8000944 <__NVIC_SetPriority+0x50>)
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	f003 030f 	and.w	r3, r3, #15
 800092a:	3b04      	subs	r3, #4
 800092c:	0112      	lsls	r2, r2, #4
 800092e:	b2d2      	uxtb	r2, r2
 8000930:	440b      	add	r3, r1
 8000932:	761a      	strb	r2, [r3, #24]
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	e000e100 	.word	0xe000e100
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <main>:
static uint8_t* rxBuff = NULL;
static uint_fast16_t rxItr = 0;


int main(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af02      	add	r7, sp, #8
	HWInit();
 800094e:	f000 f975 	bl	8000c3c <HWInit>
	SEGGER_SYSVIEW_Conf();
 8000952:	f008 fdd5 	bl	8009500 <SEGGER_SYSVIEW_Conf>
	//value for the NVIC. The argument passed to the function is the priority grouping
	//value, which is a number from 0 to 7. The value 0 means that no preemption and sub-priority bits are used,
	//and all interrupts have the same priority level.

	//ensure proper priority grouping for freeRTOS
	NVIC_SetPriorityGrouping(0);  // This means that priority grouping is use all the systems have the same priority
 8000956:	2000      	movs	r0, #0
 8000958:	f7ff ff8a 	bl	8000870 <__NVIC_SetPriorityGrouping>
	//this delay is only present since we're using a simple
	//block-based buffer for receiving data - the transmission
	//needs to start after the receiver is ready for data for the
	//strings to start in the correct position in this simple setup
	TimerHandle_t oneShotHandle =
		xTimerCreate(	"startUart5Traffic",
 800095c:	4b27      	ldr	r3, [pc, #156]	; (80009fc <main+0xb4>)
 800095e:	9300      	str	r3, [sp, #0]
 8000960:	2300      	movs	r3, #0
 8000962:	2200      	movs	r2, #0
 8000964:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000968:	4825      	ldr	r0, [pc, #148]	; (8000a00 <main+0xb8>)
 800096a:	f006 f8c1 	bl	8006af0 <xTimerCreate>
 800096e:	6078      	str	r0, [r7, #4]
						500 /portTICK_PERIOD_MS,
						pdFALSE,
						NULL,
						startUart5Traffic);
		assert_param(oneShotHandle != NULL);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d103      	bne.n	800097e <main+0x36>
 8000976:	213b      	movs	r1, #59	; 0x3b
 8000978:	4822      	ldr	r0, [pc, #136]	; (8000a04 <main+0xbc>)
 800097a:	f000 fc5b 	bl	8001234 <assert_failed>
		xTimerStart(oneShotHandle, 0);
 800097e:	f005 fb0f 	bl	8005fa0 <xTaskGetTickCount>
 8000982:	4602      	mov	r2, r0
 8000984:	2300      	movs	r3, #0
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2300      	movs	r3, #0
 800098a:	2101      	movs	r1, #1
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f006 f90b 	bl	8006ba8 <xTimerGenericCommand>

	//setup tasks, making sure they have been properly created before moving on
	rxDone = xSemaphoreCreateBinary();
 8000992:	2203      	movs	r2, #3
 8000994:	2100      	movs	r1, #0
 8000996:	2001      	movs	r0, #1
 8000998:	f004 f998 	bl	8004ccc <xQueueGenericCreate>
 800099c:	4603      	mov	r3, r0
 800099e:	4a1a      	ldr	r2, [pc, #104]	; (8000a08 <main+0xc0>)
 80009a0:	6013      	str	r3, [r2, #0]
	assert_param(rxDone != NULL);
 80009a2:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <main+0xc0>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d103      	bne.n	80009b2 <main+0x6a>
 80009aa:	2140      	movs	r1, #64	; 0x40
 80009ac:	4815      	ldr	r0, [pc, #84]	; (8000a04 <main+0xbc>)
 80009ae:	f000 fc41 	bl	8001234 <assert_failed>

	assert_param(xTaskCreate(uartPrintOutTask, "uartPrint", STACK_SIZE, NULL, tskIDLE_PRIORITY + 3, NULL) == pdPASS);
 80009b2:	2300      	movs	r3, #0
 80009b4:	9301      	str	r3, [sp, #4]
 80009b6:	2303      	movs	r3, #3
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	2300      	movs	r3, #0
 80009bc:	2280      	movs	r2, #128	; 0x80
 80009be:	4913      	ldr	r1, [pc, #76]	; (8000a0c <main+0xc4>)
 80009c0:	4813      	ldr	r0, [pc, #76]	; (8000a10 <main+0xc8>)
 80009c2:	f005 f879 	bl	8005ab8 <xTaskCreate>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d003      	beq.n	80009d4 <main+0x8c>
 80009cc:	2142      	movs	r1, #66	; 0x42
 80009ce:	480d      	ldr	r0, [pc, #52]	; (8000a04 <main+0xbc>)
 80009d0:	f000 fc30 	bl	8001234 <assert_failed>
	assert_param(xTaskCreate(wastefulTask, "wastefulTask", STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL) == pdPASS);
 80009d4:	2300      	movs	r3, #0
 80009d6:	9301      	str	r3, [sp, #4]
 80009d8:	2302      	movs	r3, #2
 80009da:	9300      	str	r3, [sp, #0]
 80009dc:	2300      	movs	r3, #0
 80009de:	2280      	movs	r2, #128	; 0x80
 80009e0:	490c      	ldr	r1, [pc, #48]	; (8000a14 <main+0xcc>)
 80009e2:	480d      	ldr	r0, [pc, #52]	; (8000a18 <main+0xd0>)
 80009e4:	f005 f868 	bl	8005ab8 <xTaskCreate>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d003      	beq.n	80009f6 <main+0xae>
 80009ee:	2143      	movs	r1, #67	; 0x43
 80009f0:	4804      	ldr	r0, [pc, #16]	; (8000a04 <main+0xbc>)
 80009f2:	f000 fc1f 	bl	8001234 <assert_failed>

	//start the scheduler - shouldn't return unless there's a problem
	vTaskStartScheduler();
 80009f6:	f005 f9c3 	bl	8005d80 <vTaskStartScheduler>

	//if you've wound up here, there is likely an issue with overrunning the freeRTOS heap
	while(1)
 80009fa:	e7fe      	b.n	80009fa <main+0xb2>
 80009fc:	08000aa1 	.word	0x08000aa1
 8000a00:	08009840 	.word	0x08009840
 8000a04:	08009854 	.word	0x08009854
 8000a08:	2000008c 	.word	0x2000008c
 8000a0c:	08009870 	.word	0x08009870
 8000a10:	08000ad1 	.word	0x08000ad1
 8000a14:	0800987c 	.word	0x0800987c
 8000a18:	08000ab9 	.word	0x08000ab9

08000a1c <startReceiveInt>:
/**
 * Start an interrupt driven receive.  This particular ISR is hard-coded
 * to push characters into a queue
 */
int32_t startReceiveInt( uint8_t* Buffer, uint_fast16_t Len )
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
	if(!rxInProgress && (Buffer != NULL))
 8000a26:	4b19      	ldr	r3, [pc, #100]	; (8000a8c <startReceiveInt+0x70>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	f083 0301 	eor.w	r3, r3, #1
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d025      	beq.n	8000a80 <startReceiveInt+0x64>
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d022      	beq.n	8000a80 <startReceiveInt+0x64>
	{
		rxInProgress = true;
 8000a3a:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <startReceiveInt+0x70>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	701a      	strb	r2, [r3, #0]
		rxLen = Len;
 8000a40:	4a13      	ldr	r2, [pc, #76]	; (8000a90 <startReceiveInt+0x74>)
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	6013      	str	r3, [r2, #0]
		rxBuff = Buffer;
 8000a46:	4a13      	ldr	r2, [pc, #76]	; (8000a94 <startReceiveInt+0x78>)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6013      	str	r3, [r2, #0]
		rxItr = 0;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <startReceiveInt+0x7c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
		USART1->CR3 |= USART_CR3_EIE;	//enable error interrupts
 8000a52:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <startReceiveInt+0x80>)
 8000a54:	695b      	ldr	r3, [r3, #20]
 8000a56:	4a11      	ldr	r2, [pc, #68]	; (8000a9c <startReceiveInt+0x80>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6153      	str	r3, [r2, #20]
		USART1->CR1 |= (USART_CR1_UE | USART_CR1_RXNEIE);
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <startReceiveInt+0x80>)
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <startReceiveInt+0x80>)
 8000a64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a68:	f043 0320 	orr.w	r3, r3, #32
 8000a6c:	60d3      	str	r3, [r2, #12]
		//all 4 bits are for preemption priority -
		NVIC_SetPriority(USART1_IRQn, 6);
 8000a6e:	2106      	movs	r1, #6
 8000a70:	2025      	movs	r0, #37	; 0x25
 8000a72:	f7ff ff3f 	bl	80008f4 <__NVIC_SetPriority>
		NVIC_EnableIRQ(USART1_IRQn);
 8000a76:	2025      	movs	r0, #37	; 0x25
 8000a78:	f7ff ff1e 	bl	80008b8 <__NVIC_EnableIRQ>
		return 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	e001      	b.n	8000a84 <startReceiveInt+0x68>
	}

	return -1;
 8000a80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000090 	.word	0x20000090
 8000a90:	20000094 	.word	0x20000094
 8000a94:	20000098 	.word	0x20000098
 8000a98:	2000009c 	.word	0x2000009c
 8000a9c:	40011000 	.word	0x40011000

08000aa0 <startUart5Traffic>:



void startUart5Traffic( TimerHandle_t xTimer )
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	SetupUart5ExternalSim(9600);
 8000aa8:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000aac:	f7ff fe2c 	bl	8000708 <SetupUart5ExternalSim>
}
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <wastefulTask>:



void wastefulTask( void* NotUsed)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	while(1)
	{
		volatile int i, j;
		i = 10;
 8000ac0:	230a      	movs	r3, #10
 8000ac2:	60fb      	str	r3, [r7, #12]
		j = i;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	60bb      	str	r3, [r7, #8]
		i = j;
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	60fb      	str	r3, [r7, #12]
	{
 8000acc:	e7f8      	b.n	8000ac0 <wastefulTask+0x8>
	...

08000ad0 <uartPrintOutTask>:
	}
}


void uartPrintOutTask( void* NotUsed)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	uint8_t rxData[20];
	uint8_t expectedLen = 16;
 8000ad8:	2310      	movs	r3, #16
 8000ada:	77fb      	strb	r3, [r7, #31]
	memset((void*)rxData, 0, 20);
 8000adc:	f107 0308 	add.w	r3, r7, #8
 8000ae0:	2214      	movs	r2, #20
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f008 fe79 	bl	80097dc <memset>

	STM_UartInit(USART1, 9600, NULL, NULL);
 8000aea:	2300      	movs	r3, #0
 8000aec:	2200      	movs	r2, #0
 8000aee:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8000af2:	4816      	ldr	r0, [pc, #88]	; (8000b4c <uartPrintOutTask+0x7c>)
 8000af4:	f7ff fd9a 	bl	800062c <STM_UartInit>
	while(1)
	{
		startReceiveInt(rxData, expectedLen);
 8000af8:	7ffa      	ldrb	r2, [r7, #31]
 8000afa:	f107 0308 	add.w	r3, r7, #8
 8000afe:	4611      	mov	r1, r2
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ff8b 	bl	8000a1c <startReceiveInt>
		if(xSemaphoreTake(rxDone, 100) == pdPASS)
 8000b06:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <uartPrintOutTask+0x80>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2164      	movs	r1, #100	; 0x64
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f004 fd09 	bl	8005524 <xQueueSemaphoreTake>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d115      	bne.n	8000b44 <uartPrintOutTask+0x74>
		{
			if(expectedLen == rxItr)
 8000b18:	7ffa      	ldrb	r2, [r7, #31]
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <uartPrintOutTask+0x84>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d108      	bne.n	8000b34 <uartPrintOutTask+0x64>
			{
				SEGGER_SYSVIEW_PrintfHost("received: ");
 8000b22:	480d      	ldr	r0, [pc, #52]	; (8000b58 <uartPrintOutTask+0x88>)
 8000b24:	f008 fc12 	bl	800934c <SEGGER_SYSVIEW_PrintfHost>
				SEGGER_SYSVIEW_Print((char*)rxData);
 8000b28:	f107 0308 	add.w	r3, r7, #8
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f008 fc21 	bl	8009374 <SEGGER_SYSVIEW_Print>
 8000b32:	e7e1      	b.n	8000af8 <uartPrintOutTask+0x28>
			}
			else
			{
				SEGGER_SYSVIEW_PrintfHost("expected %i bytes received %i", expectedLen, rxItr);
 8000b34:	7ffb      	ldrb	r3, [r7, #31]
 8000b36:	4a07      	ldr	r2, [pc, #28]	; (8000b54 <uartPrintOutTask+0x84>)
 8000b38:	6812      	ldr	r2, [r2, #0]
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4807      	ldr	r0, [pc, #28]	; (8000b5c <uartPrintOutTask+0x8c>)
 8000b3e:	f008 fc05 	bl	800934c <SEGGER_SYSVIEW_PrintfHost>
 8000b42:	e7d9      	b.n	8000af8 <uartPrintOutTask+0x28>
			}
		}
		else
		{
			SEGGER_SYSVIEW_PrintfHost("timeout");
 8000b44:	4806      	ldr	r0, [pc, #24]	; (8000b60 <uartPrintOutTask+0x90>)
 8000b46:	f008 fc01 	bl	800934c <SEGGER_SYSVIEW_PrintfHost>
		startReceiveInt(rxData, expectedLen);
 8000b4a:	e7d5      	b.n	8000af8 <uartPrintOutTask+0x28>
 8000b4c:	40011000 	.word	0x40011000
 8000b50:	2000008c 	.word	0x2000008c
 8000b54:	2000009c 	.word	0x2000009c
 8000b58:	0800988c 	.word	0x0800988c
 8000b5c:	08009898 	.word	0x08009898
 8000b60:	080098b8 	.word	0x080098b8

08000b64 <USART1_IRQHandler>:
		}
	}
}

void USART1_IRQHandler( void )
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	603b      	str	r3, [r7, #0]
	SEGGER_SYSVIEW_RecordEnterISR();
 8000b6e:	f008 f945 	bl	8008dfc <SEGGER_SYSVIEW_RecordEnterISR>

	//first check for errors
	if(	USART1->SR & (	USART_SR_ORE_Msk |
 8000b72:	4b2b      	ldr	r3, [pc, #172]	; (8000c20 <USART1_IRQHandler+0xbc>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f003 030f 	and.w	r3, r3, #15
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d013      	beq.n	8000ba6 <USART1_IRQHandler+0x42>
			USART_SR_NE_Msk |
			USART_SR_FE_Msk |
			USART_SR_PE_Msk ))
	{
		//clear error flags
		USART1->SR &= ~(USART_SR_ORE |  // overun error
 8000b7e:	4b28      	ldr	r3, [pc, #160]	; (8000c20 <USART1_IRQHandler+0xbc>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a27      	ldr	r2, [pc, #156]	; (8000c20 <USART1_IRQHandler+0xbc>)
 8000b84:	f023 030f 	bic.w	r3, r3, #15
 8000b88:	6013      	str	r3, [r2, #0]
		//if a function pointer-based callback is used instead
		//of a semaphore, an error flag could be sent directly
		//through the function call.  With this semaphore approach,
		//the closest thing we can do is set an external error flag
		//or explicitly check the number of received bytes
		if(rxInProgress)
 8000b8a:	4b26      	ldr	r3, [pc, #152]	; (8000c24 <USART1_IRQHandler+0xc0>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d009      	beq.n	8000ba6 <USART1_IRQHandler+0x42>
		{
			rxInProgress = false;
 8000b92:	4b24      	ldr	r3, [pc, #144]	; (8000c24 <USART1_IRQHandler+0xc0>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	701a      	strb	r2, [r3, #0]
			xSemaphoreGiveFromISR(rxDone, &xHigherPriorityTaskWoken);
 8000b98:	4b23      	ldr	r3, [pc, #140]	; (8000c28 <USART1_IRQHandler+0xc4>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	463a      	mov	r2, r7
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f004 faff 	bl	80051a4 <xQueueGiveFromISR>
		}
	}

	if(	USART1->SR & USART_SR_RXNE_Msk)
 8000ba6:	4b1e      	ldr	r3, [pc, #120]	; (8000c20 <USART1_IRQHandler+0xbc>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f003 0320 	and.w	r3, r3, #32
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d020      	beq.n	8000bf4 <USART1_IRQHandler+0x90>
	{
		//read the data register unconditionally to clear
		//the receive not empty interrupt if no reception is
		//in progress
		uint8_t tempVal = (uint8_t) USART1->DR;
 8000bb2:	4b1b      	ldr	r3, [pc, #108]	; (8000c20 <USART1_IRQHandler+0xbc>)
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	71fb      	strb	r3, [r7, #7]

		if(rxInProgress)
 8000bb8:	4b1a      	ldr	r3, [pc, #104]	; (8000c24 <USART1_IRQHandler+0xc0>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d019      	beq.n	8000bf4 <USART1_IRQHandler+0x90>
		{
			rxBuff[rxItr++] = tempVal;
 8000bc0:	4b1a      	ldr	r3, [pc, #104]	; (8000c2c <USART1_IRQHandler+0xc8>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <USART1_IRQHandler+0xcc>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	1c59      	adds	r1, r3, #1
 8000bca:	4819      	ldr	r0, [pc, #100]	; (8000c30 <USART1_IRQHandler+0xcc>)
 8000bcc:	6001      	str	r1, [r0, #0]
 8000bce:	4413      	add	r3, r2
 8000bd0:	79fa      	ldrb	r2, [r7, #7]
 8000bd2:	701a      	strb	r2, [r3, #0]
			if(rxItr >= rxLen)
 8000bd4:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <USART1_IRQHandler+0xcc>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <USART1_IRQHandler+0xd0>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d309      	bcc.n	8000bf4 <USART1_IRQHandler+0x90>
			{
				rxInProgress = false;
 8000be0:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <USART1_IRQHandler+0xc0>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	701a      	strb	r2, [r3, #0]
				xSemaphoreGiveFromISR(rxDone, &xHigherPriorityTaskWoken);
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <USART1_IRQHandler+0xc4>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	463a      	mov	r2, r7
 8000bec:	4611      	mov	r1, r2
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f004 fad8 	bl	80051a4 <xQueueGiveFromISR>
			}
		}
	}
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d00a      	beq.n	8000c10 <USART1_IRQHandler+0xac>
 8000bfa:	f008 f95d 	bl	8008eb8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <USART1_IRQHandler+0xd4>)
 8000c00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	f3bf 8f4f 	dsb	sy
 8000c0a:	f3bf 8f6f 	isb	sy
 8000c0e:	e001      	b.n	8000c14 <USART1_IRQHandler+0xb0>
 8000c10:	f008 f936 	bl	8008e80 <SEGGER_SYSVIEW_RecordExitISR>
	SEGGER_SYSVIEW_RecordExitISR();
 8000c14:	f008 f934 	bl	8008e80 <SEGGER_SYSVIEW_RecordExitISR>
}
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40011000 	.word	0x40011000
 8000c24:	20000090 	.word	0x20000090
 8000c28:	2000008c 	.word	0x2000008c
 8000c2c:	20000098 	.word	0x20000098
 8000c30:	2000009c 	.word	0x2000009c
 8000c34:	20000094 	.word	0x20000094
 8000c38:	e000ed04 	.word	0xe000ed04

08000c3c <HWInit>:
 * Initialize the minimum amount of hardware that will be used in all examples
 * Other initialization might also be necessary (PWM for LED's, USART's, USB, etc)
 * and should be performed after the initial call to HWInit
 */
void HWInit( void )
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	HAL_Init();
 8000c40:	f000 fcec 	bl	800161c <HAL_Init>
	SystemClock_Config();
 8000c44:	f000 f806 	bl	8000c54 <SystemClock_Config>
	gpioPinsInit();			//initialize GPIO lines for LED's
 8000c48:	f000 f870 	bl	8000d2c <gpioPinsInit>
	rngInit();
 8000c4c:	f000 fac8 	bl	80011e0 <rngInit>
}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <SystemClock_Config>:
	return RNG->DR %Max + Min;
}


void SystemClock_Config(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b094      	sub	sp, #80	; 0x50
 8000c58:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c5a:	f107 0320 	add.w	r3, r7, #32
 8000c5e:	2230      	movs	r2, #48	; 0x30
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f008 fdba 	bl	80097dc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c68:	f107 030c 	add.w	r3, r7, #12
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	4b29      	ldr	r3, [pc, #164]	; (8000d24 <SystemClock_Config+0xd0>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	4a28      	ldr	r2, [pc, #160]	; (8000d24 <SystemClock_Config+0xd0>)
 8000c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c86:	6413      	str	r3, [r2, #64]	; 0x40
 8000c88:	4b26      	ldr	r3, [pc, #152]	; (8000d24 <SystemClock_Config+0xd0>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c94:	2300      	movs	r3, #0
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	4b23      	ldr	r3, [pc, #140]	; (8000d28 <SystemClock_Config+0xd4>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ca0:	4a21      	ldr	r2, [pc, #132]	; (8000d28 <SystemClock_Config+0xd4>)
 8000ca2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca6:	6013      	str	r3, [r2, #0]
 8000ca8:	4b1f      	ldr	r3, [pc, #124]	; (8000d28 <SystemClock_Config+0xd4>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cbc:	2310      	movs	r3, #16
 8000cbe:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000cc8:	2308      	movs	r3, #8
 8000cca:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 50;
 8000ccc:	2332      	movs	r3, #50	; 0x32
 8000cce:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000cd0:	2304      	movs	r3, #4
 8000cd2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000cd4:	2307      	movs	r3, #7
 8000cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd8:	f107 0320 	add.w	r3, r7, #32
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f001 fd07 	bl	80026f0 <HAL_RCC_OscConfig>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <SystemClock_Config+0x98>
	{
		Error_Handler();
 8000ce8:	f000 fa9c 	bl	8001224 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cec:	230f      	movs	r3, #15
 8000cee:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000cf8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000cfc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000cfe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d02:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f002 f818 	bl	8002d40 <HAL_RCC_ClockConfig>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <SystemClock_Config+0xc6>
	{
		Error_Handler();
 8000d16:	f000 fa85 	bl	8001224 <Error_Handler>
	}

}
 8000d1a:	bf00      	nop
 8000d1c:	3750      	adds	r7, #80	; 0x50
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40007000 	.word	0x40007000

08000d2c <gpioPinsInit>:
/**
  * Initialize all relevant GPIO lines for LED's used in examples, as well as
  * USB pins
  */
static void gpioPinsInit(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08e      	sub	sp, #56	; 0x38
 8000d30:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
 8000d40:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	623b      	str	r3, [r7, #32]
 8000d46:	4bb2      	ldr	r3, [pc, #712]	; (8001010 <gpioPinsInit+0x2e4>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4ab1      	ldr	r2, [pc, #708]	; (8001010 <gpioPinsInit+0x2e4>)
 8000d4c:	f043 0304 	orr.w	r3, r3, #4
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4baf      	ldr	r3, [pc, #700]	; (8001010 <gpioPinsInit+0x2e4>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0304 	and.w	r3, r3, #4
 8000d5a:	623b      	str	r3, [r7, #32]
 8000d5c:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
 8000d62:	4bab      	ldr	r3, [pc, #684]	; (8001010 <gpioPinsInit+0x2e4>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4aaa      	ldr	r2, [pc, #680]	; (8001010 <gpioPinsInit+0x2e4>)
 8000d68:	f043 0320 	orr.w	r3, r3, #32
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4ba8      	ldr	r3, [pc, #672]	; (8001010 <gpioPinsInit+0x2e4>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0320 	and.w	r3, r3, #32
 8000d76:	61fb      	str	r3, [r7, #28]
 8000d78:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61bb      	str	r3, [r7, #24]
 8000d7e:	4ba4      	ldr	r3, [pc, #656]	; (8001010 <gpioPinsInit+0x2e4>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4aa3      	ldr	r2, [pc, #652]	; (8001010 <gpioPinsInit+0x2e4>)
 8000d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4ba1      	ldr	r3, [pc, #644]	; (8001010 <gpioPinsInit+0x2e4>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d92:	61bb      	str	r3, [r7, #24]
 8000d94:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
 8000d9a:	4b9d      	ldr	r3, [pc, #628]	; (8001010 <gpioPinsInit+0x2e4>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a9c      	ldr	r2, [pc, #624]	; (8001010 <gpioPinsInit+0x2e4>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b9a      	ldr	r3, [pc, #616]	; (8001010 <gpioPinsInit+0x2e4>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	4b96      	ldr	r3, [pc, #600]	; (8001010 <gpioPinsInit+0x2e4>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a95      	ldr	r2, [pc, #596]	; (8001010 <gpioPinsInit+0x2e4>)
 8000dbc:	f043 0302 	orr.w	r3, r3, #2
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b93      	ldr	r3, [pc, #588]	; (8001010 <gpioPinsInit+0x2e4>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	4b8f      	ldr	r3, [pc, #572]	; (8001010 <gpioPinsInit+0x2e4>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4a8e      	ldr	r2, [pc, #568]	; (8001010 <gpioPinsInit+0x2e4>)
 8000dd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4b8c      	ldr	r3, [pc, #560]	; (8001010 <gpioPinsInit+0x2e4>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	4b88      	ldr	r3, [pc, #544]	; (8001010 <gpioPinsInit+0x2e4>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a87      	ldr	r2, [pc, #540]	; (8001010 <gpioPinsInit+0x2e4>)
 8000df4:	f043 0310 	orr.w	r3, r3, #16
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b85      	ldr	r3, [pc, #532]	; (8001010 <gpioPinsInit+0x2e4>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0310 	and.w	r3, r3, #16
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	4b81      	ldr	r3, [pc, #516]	; (8001010 <gpioPinsInit+0x2e4>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a80      	ldr	r2, [pc, #512]	; (8001010 <gpioPinsInit+0x2e4>)
 8000e10:	f043 0308 	orr.w	r3, r3, #8
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b7e      	ldr	r3, [pc, #504]	; (8001010 <gpioPinsInit+0x2e4>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0308 	and.w	r3, r3, #8
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2116      	movs	r1, #22
 8000e26:	487b      	ldr	r0, [pc, #492]	; (8001014 <gpioPinsInit+0x2e8>)
 8000e28:	f001 fc30 	bl	800268c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2180      	movs	r1, #128	; 0x80
 8000e30:	4879      	ldr	r0, [pc, #484]	; (8001018 <gpioPinsInit+0x2ec>)
 8000e32:	f001 fc2b 	bl	800268c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000e3c:	4877      	ldr	r0, [pc, #476]	; (800101c <gpioPinsInit+0x2f0>)
 8000e3e:	f001 fc25 	bl	800268c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000e48:	4875      	ldr	r0, [pc, #468]	; (8001020 <gpioPinsInit+0x2f4>)
 8000e4a:	f001 fc1f 	bl	800268c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
	                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
	                           A7_Pin A8_Pin A9_Pin */
	GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000e4e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
			|A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
			|A7_Pin|A8_Pin|A9_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e60:	230c      	movs	r3, #12
 8000e62:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e68:	4619      	mov	r1, r3
 8000e6a:	486e      	ldr	r0, [pc, #440]	; (8001024 <gpioPinsInit+0x2f8>)
 8000e6c:	f001 f8ec 	bl	8002048 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
	GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000e70:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000e82:	2305      	movs	r3, #5
 8000e84:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4865      	ldr	r0, [pc, #404]	; (8001024 <gpioPinsInit+0x2f8>)
 8000e8e:	f001 f8db 	bl	8002048 <HAL_GPIO_Init>

	/*Configure GPIO pin : ENABLE_Pin */
	GPIO_InitStruct.Pin = ENABLE_Pin;
 8000e92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ea4:	230e      	movs	r3, #14
 8000ea6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000ea8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eac:	4619      	mov	r1, r3
 8000eae:	485d      	ldr	r0, [pc, #372]	; (8001024 <gpioPinsInit+0x2f8>)
 8000eb0:	f001 f8ca 	bl	8002048 <HAL_GPIO_Init>

	/*Configure GPIO pin : SDNWE_Pin */
	GPIO_InitStruct.Pin = SDNWE_Pin;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ec4:	230c      	movs	r3, #12
 8000ec6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4851      	ldr	r0, [pc, #324]	; (8001014 <gpioPinsInit+0x2e8>)
 8000ed0:	f001 f8ba 	bl	8002048 <HAL_GPIO_Init>

	/*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
	GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000ed4:	2316      	movs	r3, #22
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee8:	4619      	mov	r1, r3
 8000eea:	484a      	ldr	r0, [pc, #296]	; (8001014 <gpioPinsInit+0x2e8>)
 8000eec:	f001 f8ac 	bl	8002048 <HAL_GPIO_Init>

	/*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
	GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000ef0:	f248 0307 	movw	r3, #32775	; 0x8007
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ef6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f04:	4619      	mov	r1, r3
 8000f06:	4844      	ldr	r0, [pc, #272]	; (8001018 <gpioPinsInit+0x2ec>)
 8000f08:	f001 f89e 	bl	8002048 <HAL_GPIO_Init>

	/*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
	                           R5_Pin */
	GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000f0c:	f641 0358 	movw	r3, #6232	; 0x1858
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
			|R5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f1e:	230e      	movs	r3, #14
 8000f20:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f26:	4619      	mov	r1, r3
 8000f28:	483b      	ldr	r0, [pc, #236]	; (8001018 <gpioPinsInit+0x2ec>)
 8000f2a:	f001 f88d 	bl	8002048 <HAL_GPIO_Init>

	/*Configure GPIO pin : ACP_RST_Pin */
	GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000f2e:	2380      	movs	r3, #128	; 0x80
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f32:	2301      	movs	r3, #1
 8000f34:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f42:	4619      	mov	r1, r3
 8000f44:	4834      	ldr	r0, [pc, #208]	; (8001018 <gpioPinsInit+0x2ec>)
 8000f46:	f001 f87f 	bl	8002048 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OC_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000f4a:	2320      	movs	r3, #32
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f4e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f52:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	482d      	ldr	r0, [pc, #180]	; (8001014 <gpioPinsInit+0x2e8>)
 8000f60:	f001 f872 	bl	8002048 <HAL_GPIO_Init>

	/*Configure GPIO pins : R3_Pin R6_Pin */
	GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000f64:	2303      	movs	r3, #3
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000f74:	2309      	movs	r3, #9
 8000f76:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	482a      	ldr	r0, [pc, #168]	; (8001028 <gpioPinsInit+0x2fc>)
 8000f80:	f001 f862 	bl	8002048 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8000f84:	2304      	movs	r3, #4
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f94:	4619      	mov	r1, r3
 8000f96:	4824      	ldr	r0, [pc, #144]	; (8001028 <gpioPinsInit+0x2fc>)
 8000f98:	f001 f856 	bl	8002048 <HAL_GPIO_Init>

	/*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
	                           SDCLK_Pin SDNCAS_Pin */
	GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000f9c:	f248 1333 	movw	r3, #33075	; 0x8133
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
			|SDCLK_Pin|SDNCAS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000faa:	2303      	movs	r3, #3
 8000fac:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000fae:	230c      	movs	r3, #12
 8000fb0:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4819      	ldr	r0, [pc, #100]	; (8001020 <gpioPinsInit+0x2f4>)
 8000fba:	f001 f845 	bl	8002048 <HAL_GPIO_Init>

	/*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
	                           D8_Pin D9_Pin D10_Pin D11_Pin
	                           D12_Pin NBL0_Pin NBL1_Pin */
	GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000fbe:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000fc2:	627b      	str	r3, [r7, #36]	; 0x24
			|D8_Pin|D9_Pin|D10_Pin|D11_Pin
			|D12_Pin|NBL0_Pin|NBL1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000fd0:	230c      	movs	r3, #12
 8000fd2:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4814      	ldr	r0, [pc, #80]	; (800102c <gpioPinsInit+0x300>)
 8000fdc:	f001 f834 	bl	8002048 <HAL_GPIO_Init>

	/*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
	GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000fe0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ff2:	230e      	movs	r3, #14
 8000ff4:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	480a      	ldr	r0, [pc, #40]	; (8001028 <gpioPinsInit+0x2fc>)
 8000ffe:	f001 f823 	bl	8002048 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
	GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001002:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	62bb      	str	r3, [r7, #40]	; 0x28
 800100c:	e010      	b.n	8001030 <gpioPinsInit+0x304>
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800
 8001014:	40020800 	.word	0x40020800
 8001018:	40020000 	.word	0x40020000
 800101c:	40020c00 	.word	0x40020c00
 8001020:	40021800 	.word	0x40021800
 8001024:	40021400 	.word	0x40021400
 8001028:	40020400 	.word	0x40020400
 800102c:	40021000 	.word	0x40021000
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001038:	230c      	movs	r3, #12
 800103a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001040:	4619      	mov	r1, r3
 8001042:	4862      	ldr	r0, [pc, #392]	; (80011cc <gpioPinsInit+0x4a0>)
 8001044:	f001 f800 	bl	8002048 <HAL_GPIO_Init>

	/*Configure GPIO pin : VBUS_HS_Pin */
	GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001048:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800104e:	2300      	movs	r3, #0
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105a:	4619      	mov	r1, r3
 800105c:	485b      	ldr	r0, [pc, #364]	; (80011cc <gpioPinsInit+0x4a0>)
 800105e:	f000 fff3 	bl	8002048 <HAL_GPIO_Init>

	/*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
	                           D1_Pin D2_Pin D3_Pin */
	GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001062:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
			|D1_Pin|D2_Pin|D3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001070:	2303      	movs	r3, #3
 8001072:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001074:	230c      	movs	r3, #12
 8001076:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107c:	4619      	mov	r1, r3
 800107e:	4854      	ldr	r0, [pc, #336]	; (80011d0 <gpioPinsInit+0x4a4>)
 8001080:	f000 ffe2 	bl	8002048 <HAL_GPIO_Init>

	/*Configure GPIO pin : TE_Pin */
	GPIO_InitStruct.Pin = TE_Pin;
 8001084:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800108a:	2300      	movs	r3, #0
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001096:	4619      	mov	r1, r3
 8001098:	484d      	ldr	r0, [pc, #308]	; (80011d0 <gpioPinsInit+0x4a4>)
 800109a:	f000 ffd5 	bl	8002048 <HAL_GPIO_Init>

	/*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
	GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800109e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a4:	2301      	movs	r3, #1
 80010a6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2300      	movs	r3, #0
 80010ae:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b4:	4619      	mov	r1, r3
 80010b6:	4846      	ldr	r0, [pc, #280]	; (80011d0 <gpioPinsInit+0x4a4>)
 80010b8:	f000 ffc6 	bl	8002048 <HAL_GPIO_Init>

	/*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
	GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80010bc:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010ce:	230e      	movs	r3, #14
 80010d0:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d6:	4619      	mov	r1, r3
 80010d8:	483e      	ldr	r0, [pc, #248]	; (80011d4 <gpioPinsInit+0x4a8>)
 80010da:	f000 ffb5 	bl	8002048 <HAL_GPIO_Init>

	/*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
	GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80010de:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2300      	movs	r3, #0
 80010ee:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010f0:	230e      	movs	r3, #14
 80010f2:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f8:	4619      	mov	r1, r3
 80010fa:	4837      	ldr	r0, [pc, #220]	; (80011d8 <gpioPinsInit+0x4ac>)
 80010fc:	f000 ffa4 	bl	8002048 <HAL_GPIO_Init>

	/*Configure GPIO pin : I2C3_SDA_Pin */
	GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001100:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001106:	2312      	movs	r3, #18
 8001108:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001112:	2304      	movs	r3, #4
 8001114:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111a:	4619      	mov	r1, r3
 800111c:	482e      	ldr	r0, [pc, #184]	; (80011d8 <gpioPinsInit+0x4ac>)
 800111e:	f000 ff93 	bl	8002048 <HAL_GPIO_Init>

	/*Configure GPIO pin : I2C3_SCL_Pin */
	GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001122:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001128:	2312      	movs	r3, #18
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001134:	2304      	movs	r3, #4
 8001136:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113c:	4619      	mov	r1, r3
 800113e:	4827      	ldr	r0, [pc, #156]	; (80011dc <gpioPinsInit+0x4b0>)
 8001140:	f000 ff82 	bl	8002048 <HAL_GPIO_Init>

	/*Configure GPIO pins : G7_Pin B2_Pin */
	GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001144:	2348      	movs	r3, #72	; 0x48
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2302      	movs	r3, #2
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001154:	230e      	movs	r3, #14
 8001156:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115c:	4619      	mov	r1, r3
 800115e:	481c      	ldr	r0, [pc, #112]	; (80011d0 <gpioPinsInit+0x4a4>)
 8001160:	f000 ff72 	bl	8002048 <HAL_GPIO_Init>

	/*Configure GPIO pins : G3_Pin B4_Pin */
	GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001164:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	2302      	movs	r3, #2
 800116c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001176:	2309      	movs	r3, #9
 8001178:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800117a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117e:	4619      	mov	r1, r3
 8001180:	4814      	ldr	r0, [pc, #80]	; (80011d4 <gpioPinsInit+0x4a8>)
 8001182:	f000 ff61 	bl	8002048 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin LD4_Pin */
	GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001186:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118c:	2301      	movs	r3, #1
 800118e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001194:	2300      	movs	r3, #0
 8001196:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119c:	4619      	mov	r1, r3
 800119e:	480d      	ldr	r0, [pc, #52]	; (80011d4 <gpioPinsInit+0x4a8>)
 80011a0:	f000 ff52 	bl	8002048 <HAL_GPIO_Init>

	/*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
	GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80011a4:	2360      	movs	r3, #96	; 0x60
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a8:	2302      	movs	r3, #2
 80011aa:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b0:	2303      	movs	r3, #3
 80011b2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011b4:	230c      	movs	r3, #12
 80011b6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011bc:	4619      	mov	r1, r3
 80011be:	4803      	ldr	r0, [pc, #12]	; (80011cc <gpioPinsInit+0x4a0>)
 80011c0:	f000 ff42 	bl	8002048 <HAL_GPIO_Init>

}
 80011c4:	bf00      	nop
 80011c6:	3738      	adds	r7, #56	; 0x38
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40020400 	.word	0x40020400
 80011d0:	40020c00 	.word	0x40020c00
 80011d4:	40021800 	.word	0x40021800
 80011d8:	40020800 	.word	0x40020800
 80011dc:	40020000 	.word	0x40020000

080011e0 <rngInit>:

/**
 * Init the random number generator (RNG) peripheral
 */
static void rngInit( void )
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
	//start the peripheral clock
	__HAL_RCC_RNG_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	4b0c      	ldr	r3, [pc, #48]	; (800121c <rngInit+0x3c>)
 80011ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ee:	4a0b      	ldr	r2, [pc, #44]	; (800121c <rngInit+0x3c>)
 80011f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011f4:	6353      	str	r3, [r2, #52]	; 0x34
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <rngInit+0x3c>)
 80011f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]

	//enable the random number generator
	RNG->CR |= RNG_CR_RNGEN;
 8001202:	4b07      	ldr	r3, [pc, #28]	; (8001220 <rngInit+0x40>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a06      	ldr	r2, [pc, #24]	; (8001220 <rngInit+0x40>)
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	6013      	str	r3, [r2, #0]
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800
 8001220:	50060800 	.word	0x50060800

08001224 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
	...

08001234 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  SEGGER_SYSVIEW_PrintfHost("Assertion Failed:file %s \
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	6879      	ldr	r1, [r7, #4]
 8001242:	4802      	ldr	r0, [pc, #8]	; (800124c <assert_failed+0x18>)
 8001244:	f008 f882 	bl	800934c <SEGGER_SYSVIEW_PrintfHost>
                            on line %d\r\n", file, line);
  while(1);
 8001248:	e7fe      	b.n	8001248 <assert_failed+0x14>
 800124a:	bf00      	nop
 800124c:	080098c0 	.word	0x080098c0

08001250 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <HAL_MspInit+0x4c>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	4a0f      	ldr	r2, [pc, #60]	; (800129c <HAL_MspInit+0x4c>)
 8001260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001264:	6453      	str	r3, [r2, #68]	; 0x44
 8001266:	4b0d      	ldr	r3, [pc, #52]	; (800129c <HAL_MspInit+0x4c>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	603b      	str	r3, [r7, #0]
 8001276:	4b09      	ldr	r3, [pc, #36]	; (800129c <HAL_MspInit+0x4c>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	4a08      	ldr	r2, [pc, #32]	; (800129c <HAL_MspInit+0x4c>)
 800127c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001280:	6413      	str	r3, [r2, #64]	; 0x40
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_MspInit+0x4c>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800128e:	2007      	movs	r0, #7
 8001290:	f000 faa0 	bl	80017d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40023800 	.word	0x40023800

080012a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08c      	sub	sp, #48	; 0x30
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 031c 	add.w	r3, r7, #28
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a5e      	ldr	r2, [pc, #376]	; (8001438 <HAL_UART_MspInit+0x198>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	f040 8083 	bne.w	80013ca <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80012c4:	2300      	movs	r3, #0
 80012c6:	61bb      	str	r3, [r7, #24]
 80012c8:	4b5c      	ldr	r3, [pc, #368]	; (800143c <HAL_UART_MspInit+0x19c>)
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	4a5b      	ldr	r2, [pc, #364]	; (800143c <HAL_UART_MspInit+0x19c>)
 80012ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80012d2:	6413      	str	r3, [r2, #64]	; 0x40
 80012d4:	4b59      	ldr	r3, [pc, #356]	; (800143c <HAL_UART_MspInit+0x19c>)
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012dc:	61bb      	str	r3, [r7, #24]
 80012de:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	4b55      	ldr	r3, [pc, #340]	; (800143c <HAL_UART_MspInit+0x19c>)
 80012e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e8:	4a54      	ldr	r2, [pc, #336]	; (800143c <HAL_UART_MspInit+0x19c>)
 80012ea:	f043 0304 	orr.w	r3, r3, #4
 80012ee:	6313      	str	r3, [r2, #48]	; 0x30
 80012f0:	4b52      	ldr	r3, [pc, #328]	; (800143c <HAL_UART_MspInit+0x19c>)
 80012f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f4:	f003 0304 	and.w	r3, r3, #4
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012fc:	2300      	movs	r3, #0
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	4b4e      	ldr	r3, [pc, #312]	; (800143c <HAL_UART_MspInit+0x19c>)
 8001302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001304:	4a4d      	ldr	r2, [pc, #308]	; (800143c <HAL_UART_MspInit+0x19c>)
 8001306:	f043 0308 	orr.w	r3, r3, #8
 800130a:	6313      	str	r3, [r2, #48]	; 0x30
 800130c:	4b4b      	ldr	r3, [pc, #300]	; (800143c <HAL_UART_MspInit+0x19c>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001310:	f003 0308 	and.w	r3, r3, #8
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800131c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	2302      	movs	r3, #2
 8001320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001326:	2303      	movs	r3, #3
 8001328:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800132a:	2308      	movs	r3, #8
 800132c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132e:	f107 031c 	add.w	r3, r7, #28
 8001332:	4619      	mov	r1, r3
 8001334:	4842      	ldr	r0, [pc, #264]	; (8001440 <HAL_UART_MspInit+0x1a0>)
 8001336:	f000 fe87 	bl	8002048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800133a:	2304      	movs	r3, #4
 800133c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	2302      	movs	r3, #2
 8001340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001346:	2303      	movs	r3, #3
 8001348:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800134a:	2308      	movs	r3, #8
 800134c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800134e:	f107 031c 	add.w	r3, r7, #28
 8001352:	4619      	mov	r1, r3
 8001354:	483b      	ldr	r0, [pc, #236]	; (8001444 <HAL_UART_MspInit+0x1a4>)
 8001356:	f000 fe77 	bl	8002048 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream7;
 800135a:	4b3b      	ldr	r3, [pc, #236]	; (8001448 <HAL_UART_MspInit+0x1a8>)
 800135c:	4a3b      	ldr	r2, [pc, #236]	; (800144c <HAL_UART_MspInit+0x1ac>)
 800135e:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8001360:	4b39      	ldr	r3, [pc, #228]	; (8001448 <HAL_UART_MspInit+0x1a8>)
 8001362:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001366:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001368:	4b37      	ldr	r3, [pc, #220]	; (8001448 <HAL_UART_MspInit+0x1a8>)
 800136a:	2240      	movs	r2, #64	; 0x40
 800136c:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800136e:	4b36      	ldr	r3, [pc, #216]	; (8001448 <HAL_UART_MspInit+0x1a8>)
 8001370:	2200      	movs	r2, #0
 8001372:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001374:	4b34      	ldr	r3, [pc, #208]	; (8001448 <HAL_UART_MspInit+0x1a8>)
 8001376:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800137a:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800137c:	4b32      	ldr	r3, [pc, #200]	; (8001448 <HAL_UART_MspInit+0x1a8>)
 800137e:	2200      	movs	r2, #0
 8001380:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001382:	4b31      	ldr	r3, [pc, #196]	; (8001448 <HAL_UART_MspInit+0x1a8>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8001388:	4b2f      	ldr	r3, [pc, #188]	; (8001448 <HAL_UART_MspInit+0x1a8>)
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800138e:	4b2e      	ldr	r3, [pc, #184]	; (8001448 <HAL_UART_MspInit+0x1a8>)
 8001390:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001394:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001396:	4b2c      	ldr	r3, [pc, #176]	; (8001448 <HAL_UART_MspInit+0x1a8>)
 8001398:	2200      	movs	r2, #0
 800139a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 800139c:	482a      	ldr	r0, [pc, #168]	; (8001448 <HAL_UART_MspInit+0x1a8>)
 800139e:	f000 fa7d 	bl	800189c <HAL_DMA_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80013a8:	f7ff ff3c 	bl	8001224 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a26      	ldr	r2, [pc, #152]	; (8001448 <HAL_UART_MspInit+0x1a8>)
 80013b0:	635a      	str	r2, [r3, #52]	; 0x34
 80013b2:	4a25      	ldr	r2, [pc, #148]	; (8001448 <HAL_UART_MspInit+0x1a8>)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2100      	movs	r1, #0
 80013bc:	2035      	movs	r0, #53	; 0x35
 80013be:	f000 fa29 	bl	8001814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80013c2:	2035      	movs	r0, #53	; 0x35
 80013c4:	f000 fa52 	bl	800186c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013c8:	e031      	b.n	800142e <HAL_UART_MspInit+0x18e>
  else if(huart->Instance==USART1)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a20      	ldr	r2, [pc, #128]	; (8001450 <HAL_UART_MspInit+0x1b0>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d12c      	bne.n	800142e <HAL_UART_MspInit+0x18e>
    __HAL_RCC_USART1_CLK_ENABLE();
 80013d4:	2300      	movs	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	4b18      	ldr	r3, [pc, #96]	; (800143c <HAL_UART_MspInit+0x19c>)
 80013da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013dc:	4a17      	ldr	r2, [pc, #92]	; (800143c <HAL_UART_MspInit+0x19c>)
 80013de:	f043 0310 	orr.w	r3, r3, #16
 80013e2:	6453      	str	r3, [r2, #68]	; 0x44
 80013e4:	4b15      	ldr	r3, [pc, #84]	; (800143c <HAL_UART_MspInit+0x19c>)
 80013e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e8:	f003 0310 	and.w	r3, r3, #16
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f0:	2300      	movs	r3, #0
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <HAL_UART_MspInit+0x19c>)
 80013f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f8:	4a10      	ldr	r2, [pc, #64]	; (800143c <HAL_UART_MspInit+0x19c>)
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001400:	4b0e      	ldr	r3, [pc, #56]	; (800143c <HAL_UART_MspInit+0x19c>)
 8001402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800140c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141a:	2303      	movs	r3, #3
 800141c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800141e:	2307      	movs	r3, #7
 8001420:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001422:	f107 031c 	add.w	r3, r7, #28
 8001426:	4619      	mov	r1, r3
 8001428:	480a      	ldr	r0, [pc, #40]	; (8001454 <HAL_UART_MspInit+0x1b4>)
 800142a:	f000 fe0d 	bl	8002048 <HAL_GPIO_Init>
}
 800142e:	bf00      	nop
 8001430:	3730      	adds	r7, #48	; 0x30
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40005000 	.word	0x40005000
 800143c:	40023800 	.word	0x40023800
 8001440:	40020800 	.word	0x40020800
 8001444:	40020c00 	.word	0x40020c00
 8001448:	200000e4 	.word	0x200000e4
 800144c:	400260b8 	.word	0x400260b8
 8001450:	40011000 	.word	0x40011000
 8001454:	40020000 	.word	0x40020000

08001458 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08e      	sub	sp, #56	; 0x38
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001460:	2300      	movs	r3, #0
 8001462:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001464:	2300      	movs	r3, #0
 8001466:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	4b33      	ldr	r3, [pc, #204]	; (800153c <HAL_InitTick+0xe4>)
 800146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001470:	4a32      	ldr	r2, [pc, #200]	; (800153c <HAL_InitTick+0xe4>)
 8001472:	f043 0310 	orr.w	r3, r3, #16
 8001476:	6413      	str	r3, [r2, #64]	; 0x40
 8001478:	4b30      	ldr	r3, [pc, #192]	; (800153c <HAL_InitTick+0xe4>)
 800147a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147c:	f003 0310 	and.w	r3, r3, #16
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001484:	f107 0210 	add.w	r2, r7, #16
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	4611      	mov	r1, r2
 800148e:	4618      	mov	r0, r3
 8001490:	f001 ff36 	bl	8003300 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001494:	6a3b      	ldr	r3, [r7, #32]
 8001496:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800149a:	2b00      	cmp	r3, #0
 800149c:	d103      	bne.n	80014a6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800149e:	f001 ff07 	bl	80032b0 <HAL_RCC_GetPCLK1Freq>
 80014a2:	6378      	str	r0, [r7, #52]	; 0x34
 80014a4:	e004      	b.n	80014b0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80014a6:	f001 ff03 	bl	80032b0 <HAL_RCC_GetPCLK1Freq>
 80014aa:	4603      	mov	r3, r0
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014b2:	4a23      	ldr	r2, [pc, #140]	; (8001540 <HAL_InitTick+0xe8>)
 80014b4:	fba2 2303 	umull	r2, r3, r2, r3
 80014b8:	0c9b      	lsrs	r3, r3, #18
 80014ba:	3b01      	subs	r3, #1
 80014bc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80014be:	4b21      	ldr	r3, [pc, #132]	; (8001544 <HAL_InitTick+0xec>)
 80014c0:	4a21      	ldr	r2, [pc, #132]	; (8001548 <HAL_InitTick+0xf0>)
 80014c2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80014c4:	4b1f      	ldr	r3, [pc, #124]	; (8001544 <HAL_InitTick+0xec>)
 80014c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014ca:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80014cc:	4a1d      	ldr	r2, [pc, #116]	; (8001544 <HAL_InitTick+0xec>)
 80014ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80014d2:	4b1c      	ldr	r3, [pc, #112]	; (8001544 <HAL_InitTick+0xec>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d8:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <HAL_InitTick+0xec>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014de:	4b19      	ldr	r3, [pc, #100]	; (8001544 <HAL_InitTick+0xec>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80014e4:	4817      	ldr	r0, [pc, #92]	; (8001544 <HAL_InitTick+0xec>)
 80014e6:	f001 ff3d 	bl	8003364 <HAL_TIM_Base_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80014f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d11b      	bne.n	8001530 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80014f8:	4812      	ldr	r0, [pc, #72]	; (8001544 <HAL_InitTick+0xec>)
 80014fa:	f002 f82d 	bl	8003558 <HAL_TIM_Base_Start_IT>
 80014fe:	4603      	mov	r3, r0
 8001500:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001504:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001508:	2b00      	cmp	r3, #0
 800150a:	d111      	bne.n	8001530 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800150c:	2036      	movs	r0, #54	; 0x36
 800150e:	f000 f9ad 	bl	800186c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b0f      	cmp	r3, #15
 8001516:	d808      	bhi.n	800152a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001518:	2200      	movs	r2, #0
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	2036      	movs	r0, #54	; 0x36
 800151e:	f000 f979 	bl	8001814 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001522:	4a0a      	ldr	r2, [pc, #40]	; (800154c <HAL_InitTick+0xf4>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	e002      	b.n	8001530 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001530:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001534:	4618      	mov	r0, r3
 8001536:	3738      	adds	r7, #56	; 0x38
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40023800 	.word	0x40023800
 8001540:	431bde83 	.word	0x431bde83
 8001544:	20000144 	.word	0x20000144
 8001548:	40001000 	.word	0x40001000
 800154c:	20000004 	.word	0x20000004

08001550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <NMI_Handler+0x4>

08001556 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800155a:	e7fe      	b.n	800155a <HardFault_Handler+0x4>

0800155c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001560:	e7fe      	b.n	8001560 <MemManage_Handler+0x4>

08001562 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001566:	e7fe      	b.n	8001566 <BusFault_Handler+0x4>

08001568 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800156c:	e7fe      	b.n	800156c <UsageFault_Handler+0x4>

0800156e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001580:	4802      	ldr	r0, [pc, #8]	; (800158c <UART5_IRQHandler+0x10>)
 8001582:	f002 fb7b 	bl	8003c7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200000a0 	.word	0x200000a0

08001590 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <TIM6_DAC_IRQHandler+0x10>)
 8001596:	f002 f8a5 	bl	80036e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000144 	.word	0x20000144

080015a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <SystemInit+0x20>)
 80015aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ae:	4a05      	ldr	r2, [pc, #20]	; (80015c4 <SystemInit+0x20>)
 80015b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80015c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001600 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015cc:	480d      	ldr	r0, [pc, #52]	; (8001604 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015ce:	490e      	ldr	r1, [pc, #56]	; (8001608 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015d0:	4a0e      	ldr	r2, [pc, #56]	; (800160c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d4:	e002      	b.n	80015dc <LoopCopyDataInit>

080015d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015da:	3304      	adds	r3, #4

080015dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e0:	d3f9      	bcc.n	80015d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e2:	4a0b      	ldr	r2, [pc, #44]	; (8001610 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015e4:	4c0b      	ldr	r4, [pc, #44]	; (8001614 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e8:	e001      	b.n	80015ee <LoopFillZerobss>

080015ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ec:	3204      	adds	r2, #4

080015ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f0:	d3fb      	bcc.n	80015ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015f2:	f7ff ffd7 	bl	80015a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015f6:	f008 f8af 	bl	8009758 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015fa:	f7ff f9a5 	bl	8000948 <main>
  bx  lr    
 80015fe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001600:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001608:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800160c:	08009ba0 	.word	0x08009ba0
  ldr r2, =_sbss
 8001610:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001614:	200145b0 	.word	0x200145b0

08001618 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001618:	e7fe      	b.n	8001618 <ADC_IRQHandler>
	...

0800161c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001620:	4b0e      	ldr	r3, [pc, #56]	; (800165c <HAL_Init+0x40>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a0d      	ldr	r2, [pc, #52]	; (800165c <HAL_Init+0x40>)
 8001626:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800162a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800162c:	4b0b      	ldr	r3, [pc, #44]	; (800165c <HAL_Init+0x40>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a0a      	ldr	r2, [pc, #40]	; (800165c <HAL_Init+0x40>)
 8001632:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001636:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <HAL_Init+0x40>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a07      	ldr	r2, [pc, #28]	; (800165c <HAL_Init+0x40>)
 800163e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001642:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001644:	2003      	movs	r0, #3
 8001646:	f000 f8c5 	bl	80017d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800164a:	2000      	movs	r0, #0
 800164c:	f7ff ff04 	bl	8001458 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001650:	f7ff fdfe 	bl	8001250 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40023c00 	.word	0x40023c00

08001660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return uwTick;
 8001664:	4b03      	ldr	r3, [pc, #12]	; (8001674 <HAL_GetTick+0x14>)
 8001666:	681b      	ldr	r3, [r3, #0]
}
 8001668:	4618      	mov	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	2000018c 	.word	0x2000018c

08001678 <__NVIC_SetPriorityGrouping>:
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <__NVIC_SetPriorityGrouping+0x44>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001694:	4013      	ands	r3, r2
 8001696:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016aa:	4a04      	ldr	r2, [pc, #16]	; (80016bc <__NVIC_SetPriorityGrouping+0x44>)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	60d3      	str	r3, [r2, #12]
}
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <__NVIC_GetPriorityGrouping>:
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <__NVIC_GetPriorityGrouping+0x18>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	0a1b      	lsrs	r3, r3, #8
 80016ca:	f003 0307 	and.w	r3, r3, #7
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <__NVIC_EnableIRQ>:
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	db0b      	blt.n	8001706 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	f003 021f 	and.w	r2, r3, #31
 80016f4:	4907      	ldr	r1, [pc, #28]	; (8001714 <__NVIC_EnableIRQ+0x38>)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	095b      	lsrs	r3, r3, #5
 80016fc:	2001      	movs	r0, #1
 80016fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000e100 	.word	0xe000e100

08001718 <__NVIC_SetPriority>:
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	6039      	str	r1, [r7, #0]
 8001722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001728:	2b00      	cmp	r3, #0
 800172a:	db0a      	blt.n	8001742 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	b2da      	uxtb	r2, r3
 8001730:	490c      	ldr	r1, [pc, #48]	; (8001764 <__NVIC_SetPriority+0x4c>)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	0112      	lsls	r2, r2, #4
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	440b      	add	r3, r1
 800173c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001740:	e00a      	b.n	8001758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	b2da      	uxtb	r2, r3
 8001746:	4908      	ldr	r1, [pc, #32]	; (8001768 <__NVIC_SetPriority+0x50>)
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	3b04      	subs	r3, #4
 8001750:	0112      	lsls	r2, r2, #4
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	440b      	add	r3, r1
 8001756:	761a      	strb	r2, [r3, #24]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000e100 	.word	0xe000e100
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800176c:	b480      	push	{r7}
 800176e:	b089      	sub	sp, #36	; 0x24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f1c3 0307 	rsb	r3, r3, #7
 8001786:	2b04      	cmp	r3, #4
 8001788:	bf28      	it	cs
 800178a:	2304      	movcs	r3, #4
 800178c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3304      	adds	r3, #4
 8001792:	2b06      	cmp	r3, #6
 8001794:	d902      	bls.n	800179c <NVIC_EncodePriority+0x30>
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3b03      	subs	r3, #3
 800179a:	e000      	b.n	800179e <NVIC_EncodePriority+0x32>
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a0:	f04f 32ff 	mov.w	r2, #4294967295
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43da      	mvns	r2, r3
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	401a      	ands	r2, r3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b4:	f04f 31ff 	mov.w	r1, #4294967295
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	fa01 f303 	lsl.w	r3, r1, r3
 80017be:	43d9      	mvns	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c4:	4313      	orrs	r3, r2
         );
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3724      	adds	r7, #36	; 0x24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
	...

080017d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b07      	cmp	r3, #7
 80017e0:	d00f      	beq.n	8001802 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b06      	cmp	r3, #6
 80017e6:	d00c      	beq.n	8001802 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b05      	cmp	r3, #5
 80017ec:	d009      	beq.n	8001802 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b04      	cmp	r3, #4
 80017f2:	d006      	beq.n	8001802 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d003      	beq.n	8001802 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80017fa:	2190      	movs	r1, #144	; 0x90
 80017fc:	4804      	ldr	r0, [pc, #16]	; (8001810 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80017fe:	f7ff fd19 	bl	8001234 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff ff38 	bl	8001678 <__NVIC_SetPriorityGrouping>
}
 8001808:	bf00      	nop
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	08009904 	.word	0x08009904

08001814 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
 8001820:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b0f      	cmp	r3, #15
 800182a:	d903      	bls.n	8001834 <HAL_NVIC_SetPriority+0x20>
 800182c:	21a8      	movs	r1, #168	; 0xa8
 800182e:	480e      	ldr	r0, [pc, #56]	; (8001868 <HAL_NVIC_SetPriority+0x54>)
 8001830:	f7ff fd00 	bl	8001234 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	2b0f      	cmp	r3, #15
 8001838:	d903      	bls.n	8001842 <HAL_NVIC_SetPriority+0x2e>
 800183a:	21a9      	movs	r1, #169	; 0xa9
 800183c:	480a      	ldr	r0, [pc, #40]	; (8001868 <HAL_NVIC_SetPriority+0x54>)
 800183e:	f7ff fcf9 	bl	8001234 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001842:	f7ff ff3d 	bl	80016c0 <__NVIC_GetPriorityGrouping>
 8001846:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	68b9      	ldr	r1, [r7, #8]
 800184c:	6978      	ldr	r0, [r7, #20]
 800184e:	f7ff ff8d 	bl	800176c <NVIC_EncodePriority>
 8001852:	4602      	mov	r2, r0
 8001854:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001858:	4611      	mov	r1, r2
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff ff5c 	bl	8001718 <__NVIC_SetPriority>
}
 8001860:	bf00      	nop
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	08009904 	.word	0x08009904

0800186c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	2b00      	cmp	r3, #0
 800187c:	da03      	bge.n	8001886 <HAL_NVIC_EnableIRQ+0x1a>
 800187e:	21bc      	movs	r1, #188	; 0xbc
 8001880:	4805      	ldr	r0, [pc, #20]	; (8001898 <HAL_NVIC_EnableIRQ+0x2c>)
 8001882:	f7ff fcd7 	bl	8001234 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff ff26 	bl	80016dc <__NVIC_EnableIRQ>
}
 8001890:	bf00      	nop
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	08009904 	.word	0x08009904

0800189c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018a8:	f7ff feda 	bl	8001660 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e203      	b.n	8001cc0 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a8b      	ldr	r2, [pc, #556]	; (8001aec <HAL_DMA_Init+0x250>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d04e      	beq.n	8001960 <HAL_DMA_Init+0xc4>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a8a      	ldr	r2, [pc, #552]	; (8001af0 <HAL_DMA_Init+0x254>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d049      	beq.n	8001960 <HAL_DMA_Init+0xc4>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a88      	ldr	r2, [pc, #544]	; (8001af4 <HAL_DMA_Init+0x258>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d044      	beq.n	8001960 <HAL_DMA_Init+0xc4>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a87      	ldr	r2, [pc, #540]	; (8001af8 <HAL_DMA_Init+0x25c>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d03f      	beq.n	8001960 <HAL_DMA_Init+0xc4>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a85      	ldr	r2, [pc, #532]	; (8001afc <HAL_DMA_Init+0x260>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d03a      	beq.n	8001960 <HAL_DMA_Init+0xc4>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a84      	ldr	r2, [pc, #528]	; (8001b00 <HAL_DMA_Init+0x264>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d035      	beq.n	8001960 <HAL_DMA_Init+0xc4>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a82      	ldr	r2, [pc, #520]	; (8001b04 <HAL_DMA_Init+0x268>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d030      	beq.n	8001960 <HAL_DMA_Init+0xc4>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a81      	ldr	r2, [pc, #516]	; (8001b08 <HAL_DMA_Init+0x26c>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d02b      	beq.n	8001960 <HAL_DMA_Init+0xc4>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a7f      	ldr	r2, [pc, #508]	; (8001b0c <HAL_DMA_Init+0x270>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d026      	beq.n	8001960 <HAL_DMA_Init+0xc4>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a7e      	ldr	r2, [pc, #504]	; (8001b10 <HAL_DMA_Init+0x274>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d021      	beq.n	8001960 <HAL_DMA_Init+0xc4>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a7c      	ldr	r2, [pc, #496]	; (8001b14 <HAL_DMA_Init+0x278>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d01c      	beq.n	8001960 <HAL_DMA_Init+0xc4>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a7b      	ldr	r2, [pc, #492]	; (8001b18 <HAL_DMA_Init+0x27c>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d017      	beq.n	8001960 <HAL_DMA_Init+0xc4>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a79      	ldr	r2, [pc, #484]	; (8001b1c <HAL_DMA_Init+0x280>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d012      	beq.n	8001960 <HAL_DMA_Init+0xc4>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a78      	ldr	r2, [pc, #480]	; (8001b20 <HAL_DMA_Init+0x284>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d00d      	beq.n	8001960 <HAL_DMA_Init+0xc4>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a76      	ldr	r2, [pc, #472]	; (8001b24 <HAL_DMA_Init+0x288>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d008      	beq.n	8001960 <HAL_DMA_Init+0xc4>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a75      	ldr	r2, [pc, #468]	; (8001b28 <HAL_DMA_Init+0x28c>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d003      	beq.n	8001960 <HAL_DMA_Init+0xc4>
 8001958:	21b7      	movs	r1, #183	; 0xb7
 800195a:	4874      	ldr	r0, [pc, #464]	; (8001b2c <HAL_DMA_Init+0x290>)
 800195c:	f7ff fc6a 	bl	8001234 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d026      	beq.n	80019b6 <HAL_DMA_Init+0x11a>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001970:	d021      	beq.n	80019b6 <HAL_DMA_Init+0x11a>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800197a:	d01c      	beq.n	80019b6 <HAL_DMA_Init+0x11a>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8001984:	d017      	beq.n	80019b6 <HAL_DMA_Init+0x11a>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800198e:	d012      	beq.n	80019b6 <HAL_DMA_Init+0x11a>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8001998:	d00d      	beq.n	80019b6 <HAL_DMA_Init+0x11a>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80019a2:	d008      	beq.n	80019b6 <HAL_DMA_Init+0x11a>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80019ac:	d003      	beq.n	80019b6 <HAL_DMA_Init+0x11a>
 80019ae:	21b8      	movs	r1, #184	; 0xb8
 80019b0:	485e      	ldr	r0, [pc, #376]	; (8001b2c <HAL_DMA_Init+0x290>)
 80019b2:	f7ff fc3f 	bl	8001234 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d00b      	beq.n	80019d6 <HAL_DMA_Init+0x13a>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	2b40      	cmp	r3, #64	; 0x40
 80019c4:	d007      	beq.n	80019d6 <HAL_DMA_Init+0x13a>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	2b80      	cmp	r3, #128	; 0x80
 80019cc:	d003      	beq.n	80019d6 <HAL_DMA_Init+0x13a>
 80019ce:	21b9      	movs	r1, #185	; 0xb9
 80019d0:	4856      	ldr	r0, [pc, #344]	; (8001b2c <HAL_DMA_Init+0x290>)
 80019d2:	f7ff fc2f 	bl	8001234 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019de:	d007      	beq.n	80019f0 <HAL_DMA_Init+0x154>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <HAL_DMA_Init+0x154>
 80019e8:	21ba      	movs	r1, #186	; 0xba
 80019ea:	4850      	ldr	r0, [pc, #320]	; (8001b2c <HAL_DMA_Init+0x290>)
 80019ec:	f7ff fc22 	bl	8001234 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019f8:	d007      	beq.n	8001a0a <HAL_DMA_Init+0x16e>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_DMA_Init+0x16e>
 8001a02:	21bb      	movs	r1, #187	; 0xbb
 8001a04:	4849      	ldr	r0, [pc, #292]	; (8001b2c <HAL_DMA_Init+0x290>)
 8001a06:	f7ff fc15 	bl	8001234 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00d      	beq.n	8001a2e <HAL_DMA_Init+0x192>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a1a:	d008      	beq.n	8001a2e <HAL_DMA_Init+0x192>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a24:	d003      	beq.n	8001a2e <HAL_DMA_Init+0x192>
 8001a26:	21bc      	movs	r1, #188	; 0xbc
 8001a28:	4840      	ldr	r0, [pc, #256]	; (8001b2c <HAL_DMA_Init+0x290>)
 8001a2a:	f7ff fc03 	bl	8001234 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00d      	beq.n	8001a52 <HAL_DMA_Init+0x1b6>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a3e:	d008      	beq.n	8001a52 <HAL_DMA_Init+0x1b6>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a48:	d003      	beq.n	8001a52 <HAL_DMA_Init+0x1b6>
 8001a4a:	21bd      	movs	r1, #189	; 0xbd
 8001a4c:	4837      	ldr	r0, [pc, #220]	; (8001b2c <HAL_DMA_Init+0x290>)
 8001a4e:	f7ff fbf1 	bl	8001234 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00c      	beq.n	8001a74 <HAL_DMA_Init+0x1d8>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a62:	d007      	beq.n	8001a74 <HAL_DMA_Init+0x1d8>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	2b20      	cmp	r3, #32
 8001a6a:	d003      	beq.n	8001a74 <HAL_DMA_Init+0x1d8>
 8001a6c:	21be      	movs	r1, #190	; 0xbe
 8001a6e:	482f      	ldr	r0, [pc, #188]	; (8001b2c <HAL_DMA_Init+0x290>)
 8001a70:	f7ff fbe0 	bl	8001234 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d012      	beq.n	8001aa2 <HAL_DMA_Init+0x206>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a84:	d00d      	beq.n	8001aa2 <HAL_DMA_Init+0x206>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a8e:	d008      	beq.n	8001aa2 <HAL_DMA_Init+0x206>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001a98:	d003      	beq.n	8001aa2 <HAL_DMA_Init+0x206>
 8001a9a:	21bf      	movs	r1, #191	; 0xbf
 8001a9c:	4823      	ldr	r0, [pc, #140]	; (8001b2c <HAL_DMA_Init+0x290>)
 8001a9e:	f7ff fbc9 	bl	8001234 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d007      	beq.n	8001aba <HAL_DMA_Init+0x21e>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	d003      	beq.n	8001aba <HAL_DMA_Init+0x21e>
 8001ab2:	21c0      	movs	r1, #192	; 0xc0
 8001ab4:	481d      	ldr	r0, [pc, #116]	; (8001b2c <HAL_DMA_Init+0x290>)
 8001ab6:	f7ff fbbd 	bl	8001234 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d064      	beq.n	8001b8c <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d032      	beq.n	8001b30 <HAL_DMA_Init+0x294>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d02e      	beq.n	8001b30 <HAL_DMA_Init+0x294>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d02a      	beq.n	8001b30 <HAL_DMA_Init+0x294>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ade:	2b03      	cmp	r3, #3
 8001ae0:	d026      	beq.n	8001b30 <HAL_DMA_Init+0x294>
 8001ae2:	21c5      	movs	r1, #197	; 0xc5
 8001ae4:	4811      	ldr	r0, [pc, #68]	; (8001b2c <HAL_DMA_Init+0x290>)
 8001ae6:	f7ff fba5 	bl	8001234 <assert_failed>
 8001aea:	e021      	b.n	8001b30 <HAL_DMA_Init+0x294>
 8001aec:	40026010 	.word	0x40026010
 8001af0:	40026028 	.word	0x40026028
 8001af4:	40026040 	.word	0x40026040
 8001af8:	40026058 	.word	0x40026058
 8001afc:	40026070 	.word	0x40026070
 8001b00:	40026088 	.word	0x40026088
 8001b04:	400260a0 	.word	0x400260a0
 8001b08:	400260b8 	.word	0x400260b8
 8001b0c:	40026410 	.word	0x40026410
 8001b10:	40026428 	.word	0x40026428
 8001b14:	40026440 	.word	0x40026440
 8001b18:	40026458 	.word	0x40026458
 8001b1c:	40026470 	.word	0x40026470
 8001b20:	40026488 	.word	0x40026488
 8001b24:	400264a0 	.word	0x400264a0
 8001b28:	400264b8 	.word	0x400264b8
 8001b2c:	08009940 	.word	0x08009940
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d012      	beq.n	8001b5e <HAL_DMA_Init+0x2c2>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001b40:	d00d      	beq.n	8001b5e <HAL_DMA_Init+0x2c2>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b4a:	d008      	beq.n	8001b5e <HAL_DMA_Init+0x2c2>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b54:	d003      	beq.n	8001b5e <HAL_DMA_Init+0x2c2>
 8001b56:	21c6      	movs	r1, #198	; 0xc6
 8001b58:	485b      	ldr	r0, [pc, #364]	; (8001cc8 <HAL_DMA_Init+0x42c>)
 8001b5a:	f7ff fb6b 	bl	8001234 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d012      	beq.n	8001b8c <HAL_DMA_Init+0x2f0>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b6e:	d00d      	beq.n	8001b8c <HAL_DMA_Init+0x2f0>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b78:	d008      	beq.n	8001b8c <HAL_DMA_Init+0x2f0>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001b82:	d003      	beq.n	8001b8c <HAL_DMA_Init+0x2f0>
 8001b84:	21c7      	movs	r1, #199	; 0xc7
 8001b86:	4850      	ldr	r0, [pc, #320]	; (8001cc8 <HAL_DMA_Init+0x42c>)
 8001b88:	f7ff fb54 	bl	8001234 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0201 	bic.w	r2, r2, #1
 8001baa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bac:	e00f      	b.n	8001bce <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bae:	f7ff fd57 	bl	8001660 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b05      	cmp	r3, #5
 8001bba:	d908      	bls.n	8001bce <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e078      	b.n	8001cc0 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1e8      	bne.n	8001bae <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	4b39      	ldr	r3, [pc, #228]	; (8001ccc <HAL_DMA_Init+0x430>)
 8001be8:	4013      	ands	r3, r2
 8001bea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	2b04      	cmp	r3, #4
 8001c26:	d107      	bne.n	8001c38 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c30:	4313      	orrs	r3, r2
 8001c32:	697a      	ldr	r2, [r7, #20]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f023 0307 	bic.w	r3, r3, #7
 8001c4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	d117      	bne.n	8001c92 <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d00e      	beq.n	8001c92 <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 f96b 	bl	8001f50 <DMA_CheckFifoParam>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d008      	beq.n	8001c92 <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2240      	movs	r2, #64	; 0x40
 8001c84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e016      	b.n	8001cc0 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f922 	bl	8001ee4 <DMA_CalcBaseAndBitshift>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca8:	223f      	movs	r2, #63	; 0x3f
 8001caa:	409a      	lsls	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	08009940 	.word	0x08009940
 8001ccc:	f010803f 	.word	0xf010803f

08001cd0 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
 8001cdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <HAL_DMA_Start+0x20>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cee:	d304      	bcc.n	8001cfa <HAL_DMA_Start+0x2a>
 8001cf0:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8001cf4:	481a      	ldr	r0, [pc, #104]	; (8001d60 <HAL_DMA_Start+0x90>)
 8001cf6:	f7ff fa9d 	bl	8001234 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d101      	bne.n	8001d08 <HAL_DMA_Start+0x38>
 8001d04:	2302      	movs	r3, #2
 8001d06:	e026      	b.n	8001d56 <HAL_DMA_Start+0x86>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d115      	bne.n	8001d48 <HAL_DMA_Start+0x78>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2202      	movs	r2, #2
 8001d20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	68b9      	ldr	r1, [r7, #8]
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f000 f8a9 	bl	8001e88 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f042 0201 	orr.w	r2, r2, #1
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	e005      	b.n	8001d54 <HAL_DMA_Start+0x84>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d50:	2302      	movs	r3, #2
 8001d52:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8001d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	08009940 	.word	0x08009940

08001d64 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d70:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d72:	f7ff fc75 	bl	8001660 <HAL_GetTick>
 8001d76:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d008      	beq.n	8001d96 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2280      	movs	r2, #128	; 0x80
 8001d88:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e052      	b.n	8001e3c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 0216 	bic.w	r2, r2, #22
 8001da4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	695a      	ldr	r2, [r3, #20]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001db4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d103      	bne.n	8001dc6 <HAL_DMA_Abort+0x62>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d007      	beq.n	8001dd6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 0208 	bic.w	r2, r2, #8
 8001dd4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0201 	bic.w	r2, r2, #1
 8001de4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001de6:	e013      	b.n	8001e10 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001de8:	f7ff fc3a 	bl	8001660 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b05      	cmp	r3, #5
 8001df4:	d90c      	bls.n	8001e10 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2220      	movs	r2, #32
 8001dfa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2203      	movs	r2, #3
 8001e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e015      	b.n	8001e3c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1e4      	bne.n	8001de8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e22:	223f      	movs	r2, #63	; 0x3f
 8001e24:	409a      	lsls	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d004      	beq.n	8001e62 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2280      	movs	r2, #128	; 0x80
 8001e5c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e00c      	b.n	8001e7c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2205      	movs	r2, #5
 8001e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 0201 	bic.w	r2, r2, #1
 8001e78:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
 8001e94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ea4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2b40      	cmp	r3, #64	; 0x40
 8001eb4:	d108      	bne.n	8001ec8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ec6:	e007      	b.n	8001ed8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68ba      	ldr	r2, [r7, #8]
 8001ece:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	60da      	str	r2, [r3, #12]
}
 8001ed8:	bf00      	nop
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	3b10      	subs	r3, #16
 8001ef4:	4a14      	ldr	r2, [pc, #80]	; (8001f48 <DMA_CalcBaseAndBitshift+0x64>)
 8001ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8001efa:	091b      	lsrs	r3, r3, #4
 8001efc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001efe:	4a13      	ldr	r2, [pc, #76]	; (8001f4c <DMA_CalcBaseAndBitshift+0x68>)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	4413      	add	r3, r2
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2b03      	cmp	r3, #3
 8001f10:	d909      	bls.n	8001f26 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f1a:	f023 0303 	bic.w	r3, r3, #3
 8001f1e:	1d1a      	adds	r2, r3, #4
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	659a      	str	r2, [r3, #88]	; 0x58
 8001f24:	e007      	b.n	8001f36 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f2e:	f023 0303 	bic.w	r3, r3, #3
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	aaaaaaab 	.word	0xaaaaaaab
 8001f4c:	08009b60 	.word	0x08009b60

08001f50 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f60:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d11f      	bne.n	8001faa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	2b03      	cmp	r3, #3
 8001f6e:	d856      	bhi.n	800201e <DMA_CheckFifoParam+0xce>
 8001f70:	a201      	add	r2, pc, #4	; (adr r2, 8001f78 <DMA_CheckFifoParam+0x28>)
 8001f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f76:	bf00      	nop
 8001f78:	08001f89 	.word	0x08001f89
 8001f7c:	08001f9b 	.word	0x08001f9b
 8001f80:	08001f89 	.word	0x08001f89
 8001f84:	0800201f 	.word	0x0800201f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d046      	beq.n	8002022 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f98:	e043      	b.n	8002022 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fa2:	d140      	bne.n	8002026 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fa8:	e03d      	b.n	8002026 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fb2:	d121      	bne.n	8001ff8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	d837      	bhi.n	800202a <DMA_CheckFifoParam+0xda>
 8001fba:	a201      	add	r2, pc, #4	; (adr r2, 8001fc0 <DMA_CheckFifoParam+0x70>)
 8001fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc0:	08001fd1 	.word	0x08001fd1
 8001fc4:	08001fd7 	.word	0x08001fd7
 8001fc8:	08001fd1 	.word	0x08001fd1
 8001fcc:	08001fe9 	.word	0x08001fe9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8001fd4:	e030      	b.n	8002038 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d025      	beq.n	800202e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fe6:	e022      	b.n	800202e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ff0:	d11f      	bne.n	8002032 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ff6:	e01c      	b.n	8002032 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d903      	bls.n	8002006 <DMA_CheckFifoParam+0xb6>
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	2b03      	cmp	r3, #3
 8002002:	d003      	beq.n	800200c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002004:	e018      	b.n	8002038 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	73fb      	strb	r3, [r7, #15]
      break;
 800200a:	e015      	b.n	8002038 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002010:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00e      	beq.n	8002036 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	73fb      	strb	r3, [r7, #15]
      break;
 800201c:	e00b      	b.n	8002036 <DMA_CheckFifoParam+0xe6>
      break;
 800201e:	bf00      	nop
 8002020:	e00a      	b.n	8002038 <DMA_CheckFifoParam+0xe8>
      break;
 8002022:	bf00      	nop
 8002024:	e008      	b.n	8002038 <DMA_CheckFifoParam+0xe8>
      break;
 8002026:	bf00      	nop
 8002028:	e006      	b.n	8002038 <DMA_CheckFifoParam+0xe8>
      break;
 800202a:	bf00      	nop
 800202c:	e004      	b.n	8002038 <DMA_CheckFifoParam+0xe8>
      break;
 800202e:	bf00      	nop
 8002030:	e002      	b.n	8002038 <DMA_CheckFifoParam+0xe8>
      break;   
 8002032:	bf00      	nop
 8002034:	e000      	b.n	8002038 <DMA_CheckFifoParam+0xe8>
      break;
 8002036:	bf00      	nop
    }
  } 
  
  return status; 
 8002038:	7bfb      	ldrb	r3, [r7, #15]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop

08002048 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b088      	sub	sp, #32
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002056:	2300      	movs	r3, #0
 8002058:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800205a:	2300      	movs	r3, #0
 800205c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a3d      	ldr	r2, [pc, #244]	; (8002158 <HAL_GPIO_Init+0x110>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d02b      	beq.n	80020be <HAL_GPIO_Init+0x76>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a3c      	ldr	r2, [pc, #240]	; (800215c <HAL_GPIO_Init+0x114>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d027      	beq.n	80020be <HAL_GPIO_Init+0x76>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a3b      	ldr	r2, [pc, #236]	; (8002160 <HAL_GPIO_Init+0x118>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d023      	beq.n	80020be <HAL_GPIO_Init+0x76>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a3a      	ldr	r2, [pc, #232]	; (8002164 <HAL_GPIO_Init+0x11c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d01f      	beq.n	80020be <HAL_GPIO_Init+0x76>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a39      	ldr	r2, [pc, #228]	; (8002168 <HAL_GPIO_Init+0x120>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d01b      	beq.n	80020be <HAL_GPIO_Init+0x76>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a38      	ldr	r2, [pc, #224]	; (800216c <HAL_GPIO_Init+0x124>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d017      	beq.n	80020be <HAL_GPIO_Init+0x76>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a37      	ldr	r2, [pc, #220]	; (8002170 <HAL_GPIO_Init+0x128>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d013      	beq.n	80020be <HAL_GPIO_Init+0x76>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a36      	ldr	r2, [pc, #216]	; (8002174 <HAL_GPIO_Init+0x12c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d00f      	beq.n	80020be <HAL_GPIO_Init+0x76>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a35      	ldr	r2, [pc, #212]	; (8002178 <HAL_GPIO_Init+0x130>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d00b      	beq.n	80020be <HAL_GPIO_Init+0x76>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a34      	ldr	r2, [pc, #208]	; (800217c <HAL_GPIO_Init+0x134>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d007      	beq.n	80020be <HAL_GPIO_Init+0x76>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a33      	ldr	r2, [pc, #204]	; (8002180 <HAL_GPIO_Init+0x138>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_Init+0x76>
 80020b6:	21ac      	movs	r1, #172	; 0xac
 80020b8:	4832      	ldr	r0, [pc, #200]	; (8002184 <HAL_GPIO_Init+0x13c>)
 80020ba:	f7ff f8bb 	bl	8001234 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d005      	beq.n	80020d4 <HAL_GPIO_Init+0x8c>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	0c1b      	lsrs	r3, r3, #16
 80020ce:	041b      	lsls	r3, r3, #16
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_GPIO_Init+0x94>
 80020d4:	21ad      	movs	r1, #173	; 0xad
 80020d6:	482b      	ldr	r0, [pc, #172]	; (8002184 <HAL_GPIO_Init+0x13c>)
 80020d8:	f7ff f8ac 	bl	8001234 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d035      	beq.n	8002150 <HAL_GPIO_Init+0x108>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d031      	beq.n	8002150 <HAL_GPIO_Init+0x108>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b11      	cmp	r3, #17
 80020f2:	d02d      	beq.n	8002150 <HAL_GPIO_Init+0x108>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d029      	beq.n	8002150 <HAL_GPIO_Init+0x108>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b12      	cmp	r3, #18
 8002102:	d025      	beq.n	8002150 <HAL_GPIO_Init+0x108>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800210c:	d020      	beq.n	8002150 <HAL_GPIO_Init+0x108>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002116:	d01b      	beq.n	8002150 <HAL_GPIO_Init+0x108>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8002120:	d016      	beq.n	8002150 <HAL_GPIO_Init+0x108>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800212a:	d011      	beq.n	8002150 <HAL_GPIO_Init+0x108>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8002134:	d00c      	beq.n	8002150 <HAL_GPIO_Init+0x108>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800213e:	d007      	beq.n	8002150 <HAL_GPIO_Init+0x108>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2b03      	cmp	r3, #3
 8002146:	d003      	beq.n	8002150 <HAL_GPIO_Init+0x108>
 8002148:	21ae      	movs	r1, #174	; 0xae
 800214a:	480e      	ldr	r0, [pc, #56]	; (8002184 <HAL_GPIO_Init+0x13c>)
 800214c:	f7ff f872 	bl	8001234 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002150:	2300      	movs	r3, #0
 8002152:	61fb      	str	r3, [r7, #28]
 8002154:	e274      	b.n	8002640 <HAL_GPIO_Init+0x5f8>
 8002156:	bf00      	nop
 8002158:	40020000 	.word	0x40020000
 800215c:	40020400 	.word	0x40020400
 8002160:	40020800 	.word	0x40020800
 8002164:	40020c00 	.word	0x40020c00
 8002168:	40021000 	.word	0x40021000
 800216c:	40021400 	.word	0x40021400
 8002170:	40021800 	.word	0x40021800
 8002174:	40021c00 	.word	0x40021c00
 8002178:	40022000 	.word	0x40022000
 800217c:	40022400 	.word	0x40022400
 8002180:	40022800 	.word	0x40022800
 8002184:	08009978 	.word	0x08009978
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002188:	2201      	movs	r2, #1
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	4013      	ands	r3, r2
 800219a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	f040 824a 	bne.w	800263a <HAL_GPIO_Init+0x5f2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d005      	beq.n	80021be <HAL_GPIO_Init+0x176>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d144      	bne.n	8002248 <HAL_GPIO_Init+0x200>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00f      	beq.n	80021e6 <HAL_GPIO_Init+0x19e>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d00b      	beq.n	80021e6 <HAL_GPIO_Init+0x19e>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d007      	beq.n	80021e6 <HAL_GPIO_Init+0x19e>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d003      	beq.n	80021e6 <HAL_GPIO_Init+0x19e>
 80021de:	21c0      	movs	r1, #192	; 0xc0
 80021e0:	4831      	ldr	r0, [pc, #196]	; (80022a8 <HAL_GPIO_Init+0x260>)
 80021e2:	f7ff f827 	bl	8001234 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	2203      	movs	r2, #3
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4013      	ands	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800221c:	2201      	movs	r2, #1
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	43db      	mvns	r3, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	091b      	lsrs	r3, r3, #4
 8002232:	f003 0201 	and.w	r2, r3, #1
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	2b03      	cmp	r3, #3
 8002252:	d02b      	beq.n	80022ac <HAL_GPIO_Init+0x264>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00b      	beq.n	8002274 <HAL_GPIO_Init+0x22c>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d007      	beq.n	8002274 <HAL_GPIO_Init+0x22c>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	2b02      	cmp	r3, #2
 800226a:	d003      	beq.n	8002274 <HAL_GPIO_Init+0x22c>
 800226c:	21d1      	movs	r1, #209	; 0xd1
 800226e:	480e      	ldr	r0, [pc, #56]	; (80022a8 <HAL_GPIO_Init+0x260>)
 8002270:	f7fe ffe0 	bl	8001234 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	2203      	movs	r2, #3
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	60da      	str	r2, [r3, #12]
 80022a4:	e002      	b.n	80022ac <HAL_GPIO_Init+0x264>
 80022a6:	bf00      	nop
 80022a8:	08009978 	.word	0x08009978
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	f040 80df 	bne.w	8002478 <HAL_GPIO_Init+0x430>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 80b6 	beq.w	8002430 <HAL_GPIO_Init+0x3e8>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	2b09      	cmp	r3, #9
 80022ca:	f000 80b1 	beq.w	8002430 <HAL_GPIO_Init+0x3e8>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f000 80ac 	beq.w	8002430 <HAL_GPIO_Init+0x3e8>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f000 80a7 	beq.w	8002430 <HAL_GPIO_Init+0x3e8>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 80a2 	beq.w	8002430 <HAL_GPIO_Init+0x3e8>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 809d 	beq.w	8002430 <HAL_GPIO_Init+0x3e8>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	f000 8098 	beq.w	8002430 <HAL_GPIO_Init+0x3e8>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	2b01      	cmp	r3, #1
 8002306:	f000 8093 	beq.w	8002430 <HAL_GPIO_Init+0x3e8>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	2b02      	cmp	r3, #2
 8002310:	f000 808e 	beq.w	8002430 <HAL_GPIO_Init+0x3e8>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	2b02      	cmp	r3, #2
 800231a:	f000 8089 	beq.w	8002430 <HAL_GPIO_Init+0x3e8>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	2b02      	cmp	r3, #2
 8002324:	f000 8084 	beq.w	8002430 <HAL_GPIO_Init+0x3e8>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	2b03      	cmp	r3, #3
 800232e:	d07f      	beq.n	8002430 <HAL_GPIO_Init+0x3e8>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	2b04      	cmp	r3, #4
 8002336:	d07b      	beq.n	8002430 <HAL_GPIO_Init+0x3e8>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	2b04      	cmp	r3, #4
 800233e:	d077      	beq.n	8002430 <HAL_GPIO_Init+0x3e8>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	2b04      	cmp	r3, #4
 8002346:	d073      	beq.n	8002430 <HAL_GPIO_Init+0x3e8>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	2b05      	cmp	r3, #5
 800234e:	d06f      	beq.n	8002430 <HAL_GPIO_Init+0x3e8>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	2b05      	cmp	r3, #5
 8002356:	d06b      	beq.n	8002430 <HAL_GPIO_Init+0x3e8>
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	2b09      	cmp	r3, #9
 800235e:	d067      	beq.n	8002430 <HAL_GPIO_Init+0x3e8>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	2b06      	cmp	r3, #6
 8002366:	d063      	beq.n	8002430 <HAL_GPIO_Init+0x3e8>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	2b09      	cmp	r3, #9
 800236e:	d05f      	beq.n	8002430 <HAL_GPIO_Init+0x3e8>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	2b07      	cmp	r3, #7
 8002376:	d05b      	beq.n	8002430 <HAL_GPIO_Init+0x3e8>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	2b07      	cmp	r3, #7
 800237e:	d057      	beq.n	8002430 <HAL_GPIO_Init+0x3e8>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	2b07      	cmp	r3, #7
 8002386:	d053      	beq.n	8002430 <HAL_GPIO_Init+0x3e8>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	2b08      	cmp	r3, #8
 800238e:	d04f      	beq.n	8002430 <HAL_GPIO_Init+0x3e8>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	2b08      	cmp	r3, #8
 8002396:	d04b      	beq.n	8002430 <HAL_GPIO_Init+0x3e8>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	2b08      	cmp	r3, #8
 800239e:	d047      	beq.n	8002430 <HAL_GPIO_Init+0x3e8>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	2b09      	cmp	r3, #9
 80023a6:	d043      	beq.n	8002430 <HAL_GPIO_Init+0x3e8>
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	2b09      	cmp	r3, #9
 80023ae:	d03f      	beq.n	8002430 <HAL_GPIO_Init+0x3e8>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	2b0a      	cmp	r3, #10
 80023b6:	d03b      	beq.n	8002430 <HAL_GPIO_Init+0x3e8>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	2b0a      	cmp	r3, #10
 80023be:	d037      	beq.n	8002430 <HAL_GPIO_Init+0x3e8>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	2b0b      	cmp	r3, #11
 80023c6:	d033      	beq.n	8002430 <HAL_GPIO_Init+0x3e8>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	2b0c      	cmp	r3, #12
 80023ce:	d02f      	beq.n	8002430 <HAL_GPIO_Init+0x3e8>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	2b0c      	cmp	r3, #12
 80023d6:	d02b      	beq.n	8002430 <HAL_GPIO_Init+0x3e8>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	2b0d      	cmp	r3, #13
 80023de:	d027      	beq.n	8002430 <HAL_GPIO_Init+0x3e8>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	2b0f      	cmp	r3, #15
 80023e6:	d023      	beq.n	8002430 <HAL_GPIO_Init+0x3e8>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	2b05      	cmp	r3, #5
 80023ee:	d01f      	beq.n	8002430 <HAL_GPIO_Init+0x3e8>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	2b05      	cmp	r3, #5
 80023f6:	d01b      	beq.n	8002430 <HAL_GPIO_Init+0x3e8>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	2b05      	cmp	r3, #5
 80023fe:	d017      	beq.n	8002430 <HAL_GPIO_Init+0x3e8>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	2b08      	cmp	r3, #8
 8002406:	d013      	beq.n	8002430 <HAL_GPIO_Init+0x3e8>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	2b08      	cmp	r3, #8
 800240e:	d00f      	beq.n	8002430 <HAL_GPIO_Init+0x3e8>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	2b0c      	cmp	r3, #12
 8002416:	d00b      	beq.n	8002430 <HAL_GPIO_Init+0x3e8>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	2b06      	cmp	r3, #6
 800241e:	d007      	beq.n	8002430 <HAL_GPIO_Init+0x3e8>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	2b0e      	cmp	r3, #14
 8002426:	d003      	beq.n	8002430 <HAL_GPIO_Init+0x3e8>
 8002428:	21de      	movs	r1, #222	; 0xde
 800242a:	488a      	ldr	r0, [pc, #552]	; (8002654 <HAL_GPIO_Init+0x60c>)
 800242c:	f7fe ff02 	bl	8001234 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	08da      	lsrs	r2, r3, #3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3208      	adds	r2, #8
 8002438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800243c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	220f      	movs	r2, #15
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	691a      	ldr	r2, [r3, #16]
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	08da      	lsrs	r2, r3, #3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3208      	adds	r2, #8
 8002472:	69b9      	ldr	r1, [r7, #24]
 8002474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	2203      	movs	r2, #3
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 0203 	and.w	r2, r3, #3
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 80c0 	beq.w	800263a <HAL_GPIO_Init+0x5f2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	4b66      	ldr	r3, [pc, #408]	; (8002658 <HAL_GPIO_Init+0x610>)
 80024c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c2:	4a65      	ldr	r2, [pc, #404]	; (8002658 <HAL_GPIO_Init+0x610>)
 80024c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024c8:	6453      	str	r3, [r2, #68]	; 0x44
 80024ca:	4b63      	ldr	r3, [pc, #396]	; (8002658 <HAL_GPIO_Init+0x610>)
 80024cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024d6:	4a61      	ldr	r2, [pc, #388]	; (800265c <HAL_GPIO_Init+0x614>)
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	089b      	lsrs	r3, r3, #2
 80024dc:	3302      	adds	r3, #2
 80024de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	220f      	movs	r2, #15
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4013      	ands	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a58      	ldr	r2, [pc, #352]	; (8002660 <HAL_GPIO_Init+0x618>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d037      	beq.n	8002572 <HAL_GPIO_Init+0x52a>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a57      	ldr	r2, [pc, #348]	; (8002664 <HAL_GPIO_Init+0x61c>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d031      	beq.n	800256e <HAL_GPIO_Init+0x526>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a56      	ldr	r2, [pc, #344]	; (8002668 <HAL_GPIO_Init+0x620>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d02b      	beq.n	800256a <HAL_GPIO_Init+0x522>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a55      	ldr	r2, [pc, #340]	; (800266c <HAL_GPIO_Init+0x624>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d025      	beq.n	8002566 <HAL_GPIO_Init+0x51e>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a54      	ldr	r2, [pc, #336]	; (8002670 <HAL_GPIO_Init+0x628>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d01f      	beq.n	8002562 <HAL_GPIO_Init+0x51a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a53      	ldr	r2, [pc, #332]	; (8002674 <HAL_GPIO_Init+0x62c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d019      	beq.n	800255e <HAL_GPIO_Init+0x516>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a52      	ldr	r2, [pc, #328]	; (8002678 <HAL_GPIO_Init+0x630>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d013      	beq.n	800255a <HAL_GPIO_Init+0x512>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a51      	ldr	r2, [pc, #324]	; (800267c <HAL_GPIO_Init+0x634>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d00d      	beq.n	8002556 <HAL_GPIO_Init+0x50e>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a50      	ldr	r2, [pc, #320]	; (8002680 <HAL_GPIO_Init+0x638>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d007      	beq.n	8002552 <HAL_GPIO_Init+0x50a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a4f      	ldr	r2, [pc, #316]	; (8002684 <HAL_GPIO_Init+0x63c>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d101      	bne.n	800254e <HAL_GPIO_Init+0x506>
 800254a:	2309      	movs	r3, #9
 800254c:	e012      	b.n	8002574 <HAL_GPIO_Init+0x52c>
 800254e:	230a      	movs	r3, #10
 8002550:	e010      	b.n	8002574 <HAL_GPIO_Init+0x52c>
 8002552:	2308      	movs	r3, #8
 8002554:	e00e      	b.n	8002574 <HAL_GPIO_Init+0x52c>
 8002556:	2307      	movs	r3, #7
 8002558:	e00c      	b.n	8002574 <HAL_GPIO_Init+0x52c>
 800255a:	2306      	movs	r3, #6
 800255c:	e00a      	b.n	8002574 <HAL_GPIO_Init+0x52c>
 800255e:	2305      	movs	r3, #5
 8002560:	e008      	b.n	8002574 <HAL_GPIO_Init+0x52c>
 8002562:	2304      	movs	r3, #4
 8002564:	e006      	b.n	8002574 <HAL_GPIO_Init+0x52c>
 8002566:	2303      	movs	r3, #3
 8002568:	e004      	b.n	8002574 <HAL_GPIO_Init+0x52c>
 800256a:	2302      	movs	r3, #2
 800256c:	e002      	b.n	8002574 <HAL_GPIO_Init+0x52c>
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <HAL_GPIO_Init+0x52c>
 8002572:	2300      	movs	r3, #0
 8002574:	69fa      	ldr	r2, [r7, #28]
 8002576:	f002 0203 	and.w	r2, r2, #3
 800257a:	0092      	lsls	r2, r2, #2
 800257c:	4093      	lsls	r3, r2
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002584:	4935      	ldr	r1, [pc, #212]	; (800265c <HAL_GPIO_Init+0x614>)
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	089b      	lsrs	r3, r3, #2
 800258a:	3302      	adds	r3, #2
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002592:	4b3d      	ldr	r3, [pc, #244]	; (8002688 <HAL_GPIO_Init+0x640>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	43db      	mvns	r3, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4013      	ands	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_GPIO_Init+0x56e>
        {
          temp |= iocurrent;
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025b6:	4a34      	ldr	r2, [pc, #208]	; (8002688 <HAL_GPIO_Init+0x640>)
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025bc:	4b32      	ldr	r3, [pc, #200]	; (8002688 <HAL_GPIO_Init+0x640>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	43db      	mvns	r3, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4013      	ands	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <HAL_GPIO_Init+0x598>
        {
          temp |= iocurrent;
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025e0:	4a29      	ldr	r2, [pc, #164]	; (8002688 <HAL_GPIO_Init+0x640>)
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025e6:	4b28      	ldr	r3, [pc, #160]	; (8002688 <HAL_GPIO_Init+0x640>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	43db      	mvns	r3, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4013      	ands	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_GPIO_Init+0x5c2>
        {
          temp |= iocurrent;
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	4313      	orrs	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800260a:	4a1f      	ldr	r2, [pc, #124]	; (8002688 <HAL_GPIO_Init+0x640>)
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002610:	4b1d      	ldr	r3, [pc, #116]	; (8002688 <HAL_GPIO_Init+0x640>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	43db      	mvns	r3, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <HAL_GPIO_Init+0x5ec>
        {
          temp |= iocurrent;
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002634:	4a14      	ldr	r2, [pc, #80]	; (8002688 <HAL_GPIO_Init+0x640>)
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	3301      	adds	r3, #1
 800263e:	61fb      	str	r3, [r7, #28]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	2b0f      	cmp	r3, #15
 8002644:	f67f ada0 	bls.w	8002188 <HAL_GPIO_Init+0x140>
      }
    }
  }
}
 8002648:	bf00      	nop
 800264a:	bf00      	nop
 800264c:	3720      	adds	r7, #32
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	08009978 	.word	0x08009978
 8002658:	40023800 	.word	0x40023800
 800265c:	40013800 	.word	0x40013800
 8002660:	40020000 	.word	0x40020000
 8002664:	40020400 	.word	0x40020400
 8002668:	40020800 	.word	0x40020800
 800266c:	40020c00 	.word	0x40020c00
 8002670:	40021000 	.word	0x40021000
 8002674:	40021400 	.word	0x40021400
 8002678:	40021800 	.word	0x40021800
 800267c:	40021c00 	.word	0x40021c00
 8002680:	40022000 	.word	0x40022000
 8002684:	40022400 	.word	0x40022400
 8002688:	40013c00 	.word	0x40013c00

0800268c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	460b      	mov	r3, r1
 8002696:	807b      	strh	r3, [r7, #2]
 8002698:	4613      	mov	r3, r2
 800269a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800269c:	887b      	ldrh	r3, [r7, #2]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d004      	beq.n	80026ac <HAL_GPIO_WritePin+0x20>
 80026a2:	887b      	ldrh	r3, [r7, #2]
 80026a4:	0c1b      	lsrs	r3, r3, #16
 80026a6:	041b      	lsls	r3, r3, #16
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d004      	beq.n	80026b6 <HAL_GPIO_WritePin+0x2a>
 80026ac:	f240 119d 	movw	r1, #413	; 0x19d
 80026b0:	480e      	ldr	r0, [pc, #56]	; (80026ec <HAL_GPIO_WritePin+0x60>)
 80026b2:	f7fe fdbf 	bl	8001234 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80026b6:	787b      	ldrb	r3, [r7, #1]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d007      	beq.n	80026cc <HAL_GPIO_WritePin+0x40>
 80026bc:	787b      	ldrb	r3, [r7, #1]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d004      	beq.n	80026cc <HAL_GPIO_WritePin+0x40>
 80026c2:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80026c6:	4809      	ldr	r0, [pc, #36]	; (80026ec <HAL_GPIO_WritePin+0x60>)
 80026c8:	f7fe fdb4 	bl	8001234 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80026cc:	787b      	ldrb	r3, [r7, #1]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026d2:	887a      	ldrh	r2, [r7, #2]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026d8:	e003      	b.n	80026e2 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026da:	887b      	ldrh	r3, [r7, #2]
 80026dc:	041a      	lsls	r2, r3, #16
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	619a      	str	r2, [r3, #24]
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	08009978 	.word	0x08009978

080026f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e314      	b.n	8002d2c <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2b0f      	cmp	r3, #15
 8002708:	d903      	bls.n	8002712 <HAL_RCC_OscConfig+0x22>
 800270a:	21e6      	movs	r1, #230	; 0xe6
 800270c:	4897      	ldr	r0, [pc, #604]	; (800296c <HAL_RCC_OscConfig+0x27c>)
 800270e:	f7fe fd91 	bl	8001234 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 8088 	beq.w	8002830 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00d      	beq.n	8002744 <HAL_RCC_OscConfig+0x54>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002730:	d008      	beq.n	8002744 <HAL_RCC_OscConfig+0x54>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800273a:	d003      	beq.n	8002744 <HAL_RCC_OscConfig+0x54>
 800273c:	21eb      	movs	r1, #235	; 0xeb
 800273e:	488b      	ldr	r0, [pc, #556]	; (800296c <HAL_RCC_OscConfig+0x27c>)
 8002740:	f7fe fd78 	bl	8001234 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002744:	4b8a      	ldr	r3, [pc, #552]	; (8002970 <HAL_RCC_OscConfig+0x280>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 030c 	and.w	r3, r3, #12
 800274c:	2b04      	cmp	r3, #4
 800274e:	d00c      	beq.n	800276a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002750:	4b87      	ldr	r3, [pc, #540]	; (8002970 <HAL_RCC_OscConfig+0x280>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002758:	2b08      	cmp	r3, #8
 800275a:	d112      	bne.n	8002782 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800275c:	4b84      	ldr	r3, [pc, #528]	; (8002970 <HAL_RCC_OscConfig+0x280>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002764:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002768:	d10b      	bne.n	8002782 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800276a:	4b81      	ldr	r3, [pc, #516]	; (8002970 <HAL_RCC_OscConfig+0x280>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d05b      	beq.n	800282e <HAL_RCC_OscConfig+0x13e>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d157      	bne.n	800282e <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e2d4      	b.n	8002d2c <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800278a:	d106      	bne.n	800279a <HAL_RCC_OscConfig+0xaa>
 800278c:	4b78      	ldr	r3, [pc, #480]	; (8002970 <HAL_RCC_OscConfig+0x280>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a77      	ldr	r2, [pc, #476]	; (8002970 <HAL_RCC_OscConfig+0x280>)
 8002792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002796:	6013      	str	r3, [r2, #0]
 8002798:	e01d      	b.n	80027d6 <HAL_RCC_OscConfig+0xe6>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027a2:	d10c      	bne.n	80027be <HAL_RCC_OscConfig+0xce>
 80027a4:	4b72      	ldr	r3, [pc, #456]	; (8002970 <HAL_RCC_OscConfig+0x280>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a71      	ldr	r2, [pc, #452]	; (8002970 <HAL_RCC_OscConfig+0x280>)
 80027aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027ae:	6013      	str	r3, [r2, #0]
 80027b0:	4b6f      	ldr	r3, [pc, #444]	; (8002970 <HAL_RCC_OscConfig+0x280>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a6e      	ldr	r2, [pc, #440]	; (8002970 <HAL_RCC_OscConfig+0x280>)
 80027b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ba:	6013      	str	r3, [r2, #0]
 80027bc:	e00b      	b.n	80027d6 <HAL_RCC_OscConfig+0xe6>
 80027be:	4b6c      	ldr	r3, [pc, #432]	; (8002970 <HAL_RCC_OscConfig+0x280>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a6b      	ldr	r2, [pc, #428]	; (8002970 <HAL_RCC_OscConfig+0x280>)
 80027c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	4b69      	ldr	r3, [pc, #420]	; (8002970 <HAL_RCC_OscConfig+0x280>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a68      	ldr	r2, [pc, #416]	; (8002970 <HAL_RCC_OscConfig+0x280>)
 80027d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027d4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d013      	beq.n	8002806 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027de:	f7fe ff3f 	bl	8001660 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027e6:	f7fe ff3b 	bl	8001660 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b64      	cmp	r3, #100	; 0x64
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e299      	b.n	8002d2c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f8:	4b5d      	ldr	r3, [pc, #372]	; (8002970 <HAL_RCC_OscConfig+0x280>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0f0      	beq.n	80027e6 <HAL_RCC_OscConfig+0xf6>
 8002804:	e014      	b.n	8002830 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002806:	f7fe ff2b 	bl	8001660 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800280e:	f7fe ff27 	bl	8001660 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b64      	cmp	r3, #100	; 0x64
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e285      	b.n	8002d2c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002820:	4b53      	ldr	r3, [pc, #332]	; (8002970 <HAL_RCC_OscConfig+0x280>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1f0      	bne.n	800280e <HAL_RCC_OscConfig+0x11e>
 800282c:	e000      	b.n	8002830 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800282e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d079      	beq.n	8002930 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d008      	beq.n	8002856 <HAL_RCC_OscConfig+0x166>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d004      	beq.n	8002856 <HAL_RCC_OscConfig+0x166>
 800284c:	f240 111d 	movw	r1, #285	; 0x11d
 8002850:	4846      	ldr	r0, [pc, #280]	; (800296c <HAL_RCC_OscConfig+0x27c>)
 8002852:	f7fe fcef 	bl	8001234 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	2b1f      	cmp	r3, #31
 800285c:	d904      	bls.n	8002868 <HAL_RCC_OscConfig+0x178>
 800285e:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8002862:	4842      	ldr	r0, [pc, #264]	; (800296c <HAL_RCC_OscConfig+0x27c>)
 8002864:	f7fe fce6 	bl	8001234 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002868:	4b41      	ldr	r3, [pc, #260]	; (8002970 <HAL_RCC_OscConfig+0x280>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 030c 	and.w	r3, r3, #12
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00b      	beq.n	800288c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002874:	4b3e      	ldr	r3, [pc, #248]	; (8002970 <HAL_RCC_OscConfig+0x280>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800287c:	2b08      	cmp	r3, #8
 800287e:	d11c      	bne.n	80028ba <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002880:	4b3b      	ldr	r3, [pc, #236]	; (8002970 <HAL_RCC_OscConfig+0x280>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d116      	bne.n	80028ba <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800288c:	4b38      	ldr	r3, [pc, #224]	; (8002970 <HAL_RCC_OscConfig+0x280>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d005      	beq.n	80028a4 <HAL_RCC_OscConfig+0x1b4>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d001      	beq.n	80028a4 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e243      	b.n	8002d2c <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a4:	4b32      	ldr	r3, [pc, #200]	; (8002970 <HAL_RCC_OscConfig+0x280>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	492f      	ldr	r1, [pc, #188]	; (8002970 <HAL_RCC_OscConfig+0x280>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028b8:	e03a      	b.n	8002930 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d020      	beq.n	8002904 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028c2:	4b2c      	ldr	r3, [pc, #176]	; (8002974 <HAL_RCC_OscConfig+0x284>)
 80028c4:	2201      	movs	r2, #1
 80028c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c8:	f7fe feca 	bl	8001660 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028d0:	f7fe fec6 	bl	8001660 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e224      	b.n	8002d2c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e2:	4b23      	ldr	r3, [pc, #140]	; (8002970 <HAL_RCC_OscConfig+0x280>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0f0      	beq.n	80028d0 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ee:	4b20      	ldr	r3, [pc, #128]	; (8002970 <HAL_RCC_OscConfig+0x280>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	491c      	ldr	r1, [pc, #112]	; (8002970 <HAL_RCC_OscConfig+0x280>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	600b      	str	r3, [r1, #0]
 8002902:	e015      	b.n	8002930 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002904:	4b1b      	ldr	r3, [pc, #108]	; (8002974 <HAL_RCC_OscConfig+0x284>)
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290a:	f7fe fea9 	bl	8001660 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002912:	f7fe fea5 	bl	8001660 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e203      	b.n	8002d2c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002924:	4b12      	ldr	r3, [pc, #72]	; (8002970 <HAL_RCC_OscConfig+0x280>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1f0      	bne.n	8002912 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0308 	and.w	r3, r3, #8
 8002938:	2b00      	cmp	r3, #0
 800293a:	d045      	beq.n	80029c8 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	695b      	ldr	r3, [r3, #20]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d008      	beq.n	8002956 <HAL_RCC_OscConfig+0x266>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d004      	beq.n	8002956 <HAL_RCC_OscConfig+0x266>
 800294c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002950:	4806      	ldr	r0, [pc, #24]	; (800296c <HAL_RCC_OscConfig+0x27c>)
 8002952:	f7fe fc6f 	bl	8001234 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d01e      	beq.n	800299c <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800295e:	4b06      	ldr	r3, [pc, #24]	; (8002978 <HAL_RCC_OscConfig+0x288>)
 8002960:	2201      	movs	r2, #1
 8002962:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002964:	f7fe fe7c 	bl	8001660 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800296a:	e010      	b.n	800298e <HAL_RCC_OscConfig+0x29e>
 800296c:	080099b4 	.word	0x080099b4
 8002970:	40023800 	.word	0x40023800
 8002974:	42470000 	.word	0x42470000
 8002978:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800297c:	f7fe fe70 	bl	8001660 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e1ce      	b.n	8002d2c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800298e:	4b5e      	ldr	r3, [pc, #376]	; (8002b08 <HAL_RCC_OscConfig+0x418>)
 8002990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0x28c>
 800299a:	e015      	b.n	80029c8 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800299c:	4b5b      	ldr	r3, [pc, #364]	; (8002b0c <HAL_RCC_OscConfig+0x41c>)
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a2:	f7fe fe5d 	bl	8001660 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029aa:	f7fe fe59 	bl	8001660 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e1b7      	b.n	8002d2c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029bc:	4b52      	ldr	r3, [pc, #328]	; (8002b08 <HAL_RCC_OscConfig+0x418>)
 80029be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1f0      	bne.n	80029aa <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 80b0 	beq.w	8002b36 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029d6:	2300      	movs	r3, #0
 80029d8:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00c      	beq.n	80029fc <HAL_RCC_OscConfig+0x30c>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d008      	beq.n	80029fc <HAL_RCC_OscConfig+0x30c>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	2b05      	cmp	r3, #5
 80029f0:	d004      	beq.n	80029fc <HAL_RCC_OscConfig+0x30c>
 80029f2:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80029f6:	4846      	ldr	r0, [pc, #280]	; (8002b10 <HAL_RCC_OscConfig+0x420>)
 80029f8:	f7fe fc1c 	bl	8001234 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029fc:	4b42      	ldr	r3, [pc, #264]	; (8002b08 <HAL_RCC_OscConfig+0x418>)
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10f      	bne.n	8002a28 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60bb      	str	r3, [r7, #8]
 8002a0c:	4b3e      	ldr	r3, [pc, #248]	; (8002b08 <HAL_RCC_OscConfig+0x418>)
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	4a3d      	ldr	r2, [pc, #244]	; (8002b08 <HAL_RCC_OscConfig+0x418>)
 8002a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a16:	6413      	str	r3, [r2, #64]	; 0x40
 8002a18:	4b3b      	ldr	r3, [pc, #236]	; (8002b08 <HAL_RCC_OscConfig+0x418>)
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a20:	60bb      	str	r3, [r7, #8]
 8002a22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a24:	2301      	movs	r3, #1
 8002a26:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a28:	4b3a      	ldr	r3, [pc, #232]	; (8002b14 <HAL_RCC_OscConfig+0x424>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d118      	bne.n	8002a66 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a34:	4b37      	ldr	r3, [pc, #220]	; (8002b14 <HAL_RCC_OscConfig+0x424>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a36      	ldr	r2, [pc, #216]	; (8002b14 <HAL_RCC_OscConfig+0x424>)
 8002a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a40:	f7fe fe0e 	bl	8001660 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a48:	f7fe fe0a 	bl	8001660 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e168      	b.n	8002d2c <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5a:	4b2e      	ldr	r3, [pc, #184]	; (8002b14 <HAL_RCC_OscConfig+0x424>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d106      	bne.n	8002a7c <HAL_RCC_OscConfig+0x38c>
 8002a6e:	4b26      	ldr	r3, [pc, #152]	; (8002b08 <HAL_RCC_OscConfig+0x418>)
 8002a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a72:	4a25      	ldr	r2, [pc, #148]	; (8002b08 <HAL_RCC_OscConfig+0x418>)
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	6713      	str	r3, [r2, #112]	; 0x70
 8002a7a:	e01c      	b.n	8002ab6 <HAL_RCC_OscConfig+0x3c6>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b05      	cmp	r3, #5
 8002a82:	d10c      	bne.n	8002a9e <HAL_RCC_OscConfig+0x3ae>
 8002a84:	4b20      	ldr	r3, [pc, #128]	; (8002b08 <HAL_RCC_OscConfig+0x418>)
 8002a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a88:	4a1f      	ldr	r2, [pc, #124]	; (8002b08 <HAL_RCC_OscConfig+0x418>)
 8002a8a:	f043 0304 	orr.w	r3, r3, #4
 8002a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a90:	4b1d      	ldr	r3, [pc, #116]	; (8002b08 <HAL_RCC_OscConfig+0x418>)
 8002a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a94:	4a1c      	ldr	r2, [pc, #112]	; (8002b08 <HAL_RCC_OscConfig+0x418>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a9c:	e00b      	b.n	8002ab6 <HAL_RCC_OscConfig+0x3c6>
 8002a9e:	4b1a      	ldr	r3, [pc, #104]	; (8002b08 <HAL_RCC_OscConfig+0x418>)
 8002aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa2:	4a19      	ldr	r2, [pc, #100]	; (8002b08 <HAL_RCC_OscConfig+0x418>)
 8002aa4:	f023 0301 	bic.w	r3, r3, #1
 8002aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aaa:	4b17      	ldr	r3, [pc, #92]	; (8002b08 <HAL_RCC_OscConfig+0x418>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aae:	4a16      	ldr	r2, [pc, #88]	; (8002b08 <HAL_RCC_OscConfig+0x418>)
 8002ab0:	f023 0304 	bic.w	r3, r3, #4
 8002ab4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d015      	beq.n	8002aea <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002abe:	f7fe fdcf 	bl	8001660 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac4:	e00a      	b.n	8002adc <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ac6:	f7fe fdcb 	bl	8001660 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e127      	b.n	8002d2c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002adc:	4b0a      	ldr	r3, [pc, #40]	; (8002b08 <HAL_RCC_OscConfig+0x418>)
 8002ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0ee      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x3d6>
 8002ae8:	e01c      	b.n	8002b24 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aea:	f7fe fdb9 	bl	8001660 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af0:	e012      	b.n	8002b18 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002af2:	f7fe fdb5 	bl	8001660 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d909      	bls.n	8002b18 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e111      	b.n	8002d2c <HAL_RCC_OscConfig+0x63c>
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	42470e80 	.word	0x42470e80
 8002b10:	080099b4 	.word	0x080099b4
 8002b14:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b18:	4b86      	ldr	r3, [pc, #536]	; (8002d34 <HAL_RCC_OscConfig+0x644>)
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1e6      	bne.n	8002af2 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b24:	7dfb      	ldrb	r3, [r7, #23]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d105      	bne.n	8002b36 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b2a:	4b82      	ldr	r3, [pc, #520]	; (8002d34 <HAL_RCC_OscConfig+0x644>)
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	4a81      	ldr	r2, [pc, #516]	; (8002d34 <HAL_RCC_OscConfig+0x644>)
 8002b30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00c      	beq.n	8002b58 <HAL_RCC_OscConfig+0x468>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d008      	beq.n	8002b58 <HAL_RCC_OscConfig+0x468>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d004      	beq.n	8002b58 <HAL_RCC_OscConfig+0x468>
 8002b4e:	f240 11cd 	movw	r1, #461	; 0x1cd
 8002b52:	4879      	ldr	r0, [pc, #484]	; (8002d38 <HAL_RCC_OscConfig+0x648>)
 8002b54:	f7fe fb6e 	bl	8001234 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 80e4 	beq.w	8002d2a <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b62:	4b74      	ldr	r3, [pc, #464]	; (8002d34 <HAL_RCC_OscConfig+0x644>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 030c 	and.w	r3, r3, #12
 8002b6a:	2b08      	cmp	r3, #8
 8002b6c:	f000 80a5 	beq.w	8002cba <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	f040 8089 	bne.w	8002c8c <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d009      	beq.n	8002b96 <HAL_RCC_OscConfig+0x4a6>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b8a:	d004      	beq.n	8002b96 <HAL_RCC_OscConfig+0x4a6>
 8002b8c:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8002b90:	4869      	ldr	r0, [pc, #420]	; (8002d38 <HAL_RCC_OscConfig+0x648>)
 8002b92:	f7fe fb4f 	bl	8001234 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	2b3f      	cmp	r3, #63	; 0x3f
 8002b9c:	d904      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x4b8>
 8002b9e:	f240 11d7 	movw	r1, #471	; 0x1d7
 8002ba2:	4865      	ldr	r0, [pc, #404]	; (8002d38 <HAL_RCC_OscConfig+0x648>)
 8002ba4:	f7fe fb46 	bl	8001234 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	2b31      	cmp	r3, #49	; 0x31
 8002bae:	d904      	bls.n	8002bba <HAL_RCC_OscConfig+0x4ca>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8002bb8:	d904      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x4d4>
 8002bba:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8002bbe:	485e      	ldr	r0, [pc, #376]	; (8002d38 <HAL_RCC_OscConfig+0x648>)
 8002bc0:	f7fe fb38 	bl	8001234 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d010      	beq.n	8002bee <HAL_RCC_OscConfig+0x4fe>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd0:	2b04      	cmp	r3, #4
 8002bd2:	d00c      	beq.n	8002bee <HAL_RCC_OscConfig+0x4fe>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd8:	2b06      	cmp	r3, #6
 8002bda:	d008      	beq.n	8002bee <HAL_RCC_OscConfig+0x4fe>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d004      	beq.n	8002bee <HAL_RCC_OscConfig+0x4fe>
 8002be4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8002be8:	4853      	ldr	r0, [pc, #332]	; (8002d38 <HAL_RCC_OscConfig+0x648>)
 8002bea:	f7fe fb23 	bl	8001234 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d903      	bls.n	8002bfe <HAL_RCC_OscConfig+0x50e>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfa:	2b0f      	cmp	r3, #15
 8002bfc:	d904      	bls.n	8002c08 <HAL_RCC_OscConfig+0x518>
 8002bfe:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8002c02:	484d      	ldr	r0, [pc, #308]	; (8002d38 <HAL_RCC_OscConfig+0x648>)
 8002c04:	f7fe fb16 	bl	8001234 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c08:	4b4c      	ldr	r3, [pc, #304]	; (8002d3c <HAL_RCC_OscConfig+0x64c>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0e:	f7fe fd27 	bl	8001660 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c16:	f7fe fd23 	bl	8001660 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e081      	b.n	8002d2c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c28:	4b42      	ldr	r3, [pc, #264]	; (8002d34 <HAL_RCC_OscConfig+0x644>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1f0      	bne.n	8002c16 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69da      	ldr	r2, [r3, #28]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	019b      	lsls	r3, r3, #6
 8002c44:	431a      	orrs	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4a:	085b      	lsrs	r3, r3, #1
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	041b      	lsls	r3, r3, #16
 8002c50:	431a      	orrs	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c56:	061b      	lsls	r3, r3, #24
 8002c58:	4936      	ldr	r1, [pc, #216]	; (8002d34 <HAL_RCC_OscConfig+0x644>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c5e:	4b37      	ldr	r3, [pc, #220]	; (8002d3c <HAL_RCC_OscConfig+0x64c>)
 8002c60:	2201      	movs	r2, #1
 8002c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c64:	f7fe fcfc 	bl	8001660 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c6c:	f7fe fcf8 	bl	8001660 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e056      	b.n	8002d2c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c7e:	4b2d      	ldr	r3, [pc, #180]	; (8002d34 <HAL_RCC_OscConfig+0x644>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0f0      	beq.n	8002c6c <HAL_RCC_OscConfig+0x57c>
 8002c8a:	e04e      	b.n	8002d2a <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c8c:	4b2b      	ldr	r3, [pc, #172]	; (8002d3c <HAL_RCC_OscConfig+0x64c>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c92:	f7fe fce5 	bl	8001660 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c98:	e008      	b.n	8002cac <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c9a:	f7fe fce1 	bl	8001660 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e03f      	b.n	8002d2c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cac:	4b21      	ldr	r3, [pc, #132]	; (8002d34 <HAL_RCC_OscConfig+0x644>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1f0      	bne.n	8002c9a <HAL_RCC_OscConfig+0x5aa>
 8002cb8:	e037      	b.n	8002d2a <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d101      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e032      	b.n	8002d2c <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cc6:	4b1b      	ldr	r3, [pc, #108]	; (8002d34 <HAL_RCC_OscConfig+0x644>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d028      	beq.n	8002d26 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d121      	bne.n	8002d26 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d11a      	bne.n	8002d26 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cfc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d111      	bne.n	8002d26 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0c:	085b      	lsrs	r3, r3, #1
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d107      	bne.n	8002d26 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d20:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d001      	beq.n	8002d2a <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40023800 	.word	0x40023800
 8002d38:	080099b4 	.word	0x080099b4
 8002d3c:	42470060 	.word	0x42470060

08002d40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e18c      	b.n	800306e <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x24>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b0f      	cmp	r3, #15
 8002d62:	d904      	bls.n	8002d6e <HAL_RCC_ClockConfig+0x2e>
 8002d64:	f240 215a 	movw	r1, #602	; 0x25a
 8002d68:	4887      	ldr	r0, [pc, #540]	; (8002f88 <HAL_RCC_ClockConfig+0x248>)
 8002d6a:	f7fe fa63 	bl	8001234 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d031      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x98>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d02e      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x98>
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d02b      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x98>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	2b03      	cmp	r3, #3
 8002d84:	d028      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x98>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d025      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x98>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	2b05      	cmp	r3, #5
 8002d90:	d022      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x98>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b06      	cmp	r3, #6
 8002d96:	d01f      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x98>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	2b07      	cmp	r3, #7
 8002d9c:	d01c      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x98>
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d019      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x98>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	2b09      	cmp	r3, #9
 8002da8:	d016      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x98>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	2b0a      	cmp	r3, #10
 8002dae:	d013      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x98>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	2b0b      	cmp	r3, #11
 8002db4:	d010      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x98>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b0c      	cmp	r3, #12
 8002dba:	d00d      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x98>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	2b0d      	cmp	r3, #13
 8002dc0:	d00a      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x98>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	2b0e      	cmp	r3, #14
 8002dc6:	d007      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x98>
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	2b0f      	cmp	r3, #15
 8002dcc:	d004      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x98>
 8002dce:	f240 215b 	movw	r1, #603	; 0x25b
 8002dd2:	486d      	ldr	r0, [pc, #436]	; (8002f88 <HAL_RCC_ClockConfig+0x248>)
 8002dd4:	f7fe fa2e 	bl	8001234 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dd8:	4b6c      	ldr	r3, [pc, #432]	; (8002f8c <HAL_RCC_ClockConfig+0x24c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 030f 	and.w	r3, r3, #15
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d90c      	bls.n	8002e00 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de6:	4b69      	ldr	r3, [pc, #420]	; (8002f8c <HAL_RCC_ClockConfig+0x24c>)
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dee:	4b67      	ldr	r3, [pc, #412]	; (8002f8c <HAL_RCC_ClockConfig+0x24c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d001      	beq.n	8002e00 <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e136      	b.n	800306e <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d049      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d005      	beq.n	8002e24 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e18:	4b5d      	ldr	r3, [pc, #372]	; (8002f90 <HAL_RCC_ClockConfig+0x250>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	4a5c      	ldr	r2, [pc, #368]	; (8002f90 <HAL_RCC_ClockConfig+0x250>)
 8002e1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0308 	and.w	r3, r3, #8
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d005      	beq.n	8002e3c <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e30:	4b57      	ldr	r3, [pc, #348]	; (8002f90 <HAL_RCC_ClockConfig+0x250>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	4a56      	ldr	r2, [pc, #344]	; (8002f90 <HAL_RCC_ClockConfig+0x250>)
 8002e36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d024      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x14e>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	2b80      	cmp	r3, #128	; 0x80
 8002e4a:	d020      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x14e>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	2b90      	cmp	r3, #144	; 0x90
 8002e52:	d01c      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x14e>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	2ba0      	cmp	r3, #160	; 0xa0
 8002e5a:	d018      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x14e>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2bb0      	cmp	r3, #176	; 0xb0
 8002e62:	d014      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x14e>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	2bc0      	cmp	r3, #192	; 0xc0
 8002e6a:	d010      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x14e>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	2bd0      	cmp	r3, #208	; 0xd0
 8002e72:	d00c      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x14e>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	2be0      	cmp	r3, #224	; 0xe0
 8002e7a:	d008      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x14e>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2bf0      	cmp	r3, #240	; 0xf0
 8002e82:	d004      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x14e>
 8002e84:	f240 217e 	movw	r1, #638	; 0x27e
 8002e88:	483f      	ldr	r0, [pc, #252]	; (8002f88 <HAL_RCC_ClockConfig+0x248>)
 8002e8a:	f7fe f9d3 	bl	8001234 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e8e:	4b40      	ldr	r3, [pc, #256]	; (8002f90 <HAL_RCC_ClockConfig+0x250>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	493d      	ldr	r1, [pc, #244]	; (8002f90 <HAL_RCC_ClockConfig+0x250>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d059      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d010      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x196>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d00c      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x196>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d008      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x196>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b03      	cmp	r3, #3
 8002eca:	d004      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x196>
 8002ecc:	f240 2185 	movw	r1, #645	; 0x285
 8002ed0:	482d      	ldr	r0, [pc, #180]	; (8002f88 <HAL_RCC_ClockConfig+0x248>)
 8002ed2:	f7fe f9af 	bl	8001234 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d107      	bne.n	8002eee <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ede:	4b2c      	ldr	r3, [pc, #176]	; (8002f90 <HAL_RCC_ClockConfig+0x250>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d119      	bne.n	8002f1e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e0bf      	b.n	800306e <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d003      	beq.n	8002efe <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002efa:	2b03      	cmp	r3, #3
 8002efc:	d107      	bne.n	8002f0e <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002efe:	4b24      	ldr	r3, [pc, #144]	; (8002f90 <HAL_RCC_ClockConfig+0x250>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d109      	bne.n	8002f1e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e0af      	b.n	800306e <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f0e:	4b20      	ldr	r3, [pc, #128]	; (8002f90 <HAL_RCC_ClockConfig+0x250>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e0a7      	b.n	800306e <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f1e:	4b1c      	ldr	r3, [pc, #112]	; (8002f90 <HAL_RCC_ClockConfig+0x250>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f023 0203 	bic.w	r2, r3, #3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	4919      	ldr	r1, [pc, #100]	; (8002f90 <HAL_RCC_ClockConfig+0x250>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f30:	f7fe fb96 	bl	8001660 <HAL_GetTick>
 8002f34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f36:	e00a      	b.n	8002f4e <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f38:	f7fe fb92 	bl	8001660 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e08f      	b.n	800306e <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f4e:	4b10      	ldr	r3, [pc, #64]	; (8002f90 <HAL_RCC_ClockConfig+0x250>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 020c 	and.w	r2, r3, #12
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d1eb      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f60:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <HAL_RCC_ClockConfig+0x24c>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 030f 	and.w	r3, r3, #15
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d212      	bcs.n	8002f94 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6e:	4b07      	ldr	r3, [pc, #28]	; (8002f8c <HAL_RCC_ClockConfig+0x24c>)
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f76:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <HAL_RCC_ClockConfig+0x24c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d007      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e072      	b.n	800306e <HAL_RCC_ClockConfig+0x32e>
 8002f88:	080099b4 	.word	0x080099b4
 8002f8c:	40023c00 	.word	0x40023c00
 8002f90:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d025      	beq.n	8002fec <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d018      	beq.n	8002fda <HAL_RCC_ClockConfig+0x29a>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb0:	d013      	beq.n	8002fda <HAL_RCC_ClockConfig+0x29a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002fba:	d00e      	beq.n	8002fda <HAL_RCC_ClockConfig+0x29a>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002fc4:	d009      	beq.n	8002fda <HAL_RCC_ClockConfig+0x29a>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002fce:	d004      	beq.n	8002fda <HAL_RCC_ClockConfig+0x29a>
 8002fd0:	f240 21c3 	movw	r1, #707	; 0x2c3
 8002fd4:	4828      	ldr	r0, [pc, #160]	; (8003078 <HAL_RCC_ClockConfig+0x338>)
 8002fd6:	f7fe f92d 	bl	8001234 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fda:	4b28      	ldr	r3, [pc, #160]	; (800307c <HAL_RCC_ClockConfig+0x33c>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	4925      	ldr	r1, [pc, #148]	; (800307c <HAL_RCC_ClockConfig+0x33c>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0308 	and.w	r3, r3, #8
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d026      	beq.n	8003046 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d018      	beq.n	8003032 <HAL_RCC_ClockConfig+0x2f2>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003008:	d013      	beq.n	8003032 <HAL_RCC_ClockConfig+0x2f2>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003012:	d00e      	beq.n	8003032 <HAL_RCC_ClockConfig+0x2f2>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800301c:	d009      	beq.n	8003032 <HAL_RCC_ClockConfig+0x2f2>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8003026:	d004      	beq.n	8003032 <HAL_RCC_ClockConfig+0x2f2>
 8003028:	f240 21ca 	movw	r1, #714	; 0x2ca
 800302c:	4812      	ldr	r0, [pc, #72]	; (8003078 <HAL_RCC_ClockConfig+0x338>)
 800302e:	f7fe f901 	bl	8001234 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003032:	4b12      	ldr	r3, [pc, #72]	; (800307c <HAL_RCC_ClockConfig+0x33c>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	490e      	ldr	r1, [pc, #56]	; (800307c <HAL_RCC_ClockConfig+0x33c>)
 8003042:	4313      	orrs	r3, r2
 8003044:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003046:	f000 f821 	bl	800308c <HAL_RCC_GetSysClockFreq>
 800304a:	4602      	mov	r2, r0
 800304c:	4b0b      	ldr	r3, [pc, #44]	; (800307c <HAL_RCC_ClockConfig+0x33c>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	091b      	lsrs	r3, r3, #4
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	490a      	ldr	r1, [pc, #40]	; (8003080 <HAL_RCC_ClockConfig+0x340>)
 8003058:	5ccb      	ldrb	r3, [r1, r3]
 800305a:	fa22 f303 	lsr.w	r3, r2, r3
 800305e:	4a09      	ldr	r2, [pc, #36]	; (8003084 <HAL_RCC_ClockConfig+0x344>)
 8003060:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003062:	4b09      	ldr	r3, [pc, #36]	; (8003088 <HAL_RCC_ClockConfig+0x348>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f7fe f9f6 	bl	8001458 <HAL_InitTick>

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	080099b4 	.word	0x080099b4
 800307c:	40023800 	.word	0x40023800
 8003080:	08009b48 	.word	0x08009b48
 8003084:	20000000 	.word	0x20000000
 8003088:	20000004 	.word	0x20000004

0800308c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800308c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003090:	b094      	sub	sp, #80	; 0x50
 8003092:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	647b      	str	r3, [r7, #68]	; 0x44
 8003098:	2300      	movs	r3, #0
 800309a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800309c:	2300      	movs	r3, #0
 800309e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030a4:	4b79      	ldr	r3, [pc, #484]	; (800328c <HAL_RCC_GetSysClockFreq+0x200>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 030c 	and.w	r3, r3, #12
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d00d      	beq.n	80030cc <HAL_RCC_GetSysClockFreq+0x40>
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	f200 80e1 	bhi.w	8003278 <HAL_RCC_GetSysClockFreq+0x1ec>
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d002      	beq.n	80030c0 <HAL_RCC_GetSysClockFreq+0x34>
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	d003      	beq.n	80030c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80030be:	e0db      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030c0:	4b73      	ldr	r3, [pc, #460]	; (8003290 <HAL_RCC_GetSysClockFreq+0x204>)
 80030c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80030c4:	e0db      	b.n	800327e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030c6:	4b73      	ldr	r3, [pc, #460]	; (8003294 <HAL_RCC_GetSysClockFreq+0x208>)
 80030c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030ca:	e0d8      	b.n	800327e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030cc:	4b6f      	ldr	r3, [pc, #444]	; (800328c <HAL_RCC_GetSysClockFreq+0x200>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030d6:	4b6d      	ldr	r3, [pc, #436]	; (800328c <HAL_RCC_GetSysClockFreq+0x200>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d063      	beq.n	80031aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030e2:	4b6a      	ldr	r3, [pc, #424]	; (800328c <HAL_RCC_GetSysClockFreq+0x200>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	099b      	lsrs	r3, r3, #6
 80030e8:	2200      	movs	r2, #0
 80030ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80030ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80030ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030f4:	633b      	str	r3, [r7, #48]	; 0x30
 80030f6:	2300      	movs	r3, #0
 80030f8:	637b      	str	r3, [r7, #52]	; 0x34
 80030fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80030fe:	4622      	mov	r2, r4
 8003100:	462b      	mov	r3, r5
 8003102:	f04f 0000 	mov.w	r0, #0
 8003106:	f04f 0100 	mov.w	r1, #0
 800310a:	0159      	lsls	r1, r3, #5
 800310c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003110:	0150      	lsls	r0, r2, #5
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	4621      	mov	r1, r4
 8003118:	1a51      	subs	r1, r2, r1
 800311a:	6139      	str	r1, [r7, #16]
 800311c:	4629      	mov	r1, r5
 800311e:	eb63 0301 	sbc.w	r3, r3, r1
 8003122:	617b      	str	r3, [r7, #20]
 8003124:	f04f 0200 	mov.w	r2, #0
 8003128:	f04f 0300 	mov.w	r3, #0
 800312c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003130:	4659      	mov	r1, fp
 8003132:	018b      	lsls	r3, r1, #6
 8003134:	4651      	mov	r1, sl
 8003136:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800313a:	4651      	mov	r1, sl
 800313c:	018a      	lsls	r2, r1, #6
 800313e:	4651      	mov	r1, sl
 8003140:	ebb2 0801 	subs.w	r8, r2, r1
 8003144:	4659      	mov	r1, fp
 8003146:	eb63 0901 	sbc.w	r9, r3, r1
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	f04f 0300 	mov.w	r3, #0
 8003152:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003156:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800315a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800315e:	4690      	mov	r8, r2
 8003160:	4699      	mov	r9, r3
 8003162:	4623      	mov	r3, r4
 8003164:	eb18 0303 	adds.w	r3, r8, r3
 8003168:	60bb      	str	r3, [r7, #8]
 800316a:	462b      	mov	r3, r5
 800316c:	eb49 0303 	adc.w	r3, r9, r3
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	f04f 0200 	mov.w	r2, #0
 8003176:	f04f 0300 	mov.w	r3, #0
 800317a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800317e:	4629      	mov	r1, r5
 8003180:	024b      	lsls	r3, r1, #9
 8003182:	4621      	mov	r1, r4
 8003184:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003188:	4621      	mov	r1, r4
 800318a:	024a      	lsls	r2, r1, #9
 800318c:	4610      	mov	r0, r2
 800318e:	4619      	mov	r1, r3
 8003190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003192:	2200      	movs	r2, #0
 8003194:	62bb      	str	r3, [r7, #40]	; 0x28
 8003196:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003198:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800319c:	f7fd f872 	bl	8000284 <__aeabi_uldivmod>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4613      	mov	r3, r2
 80031a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031a8:	e058      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031aa:	4b38      	ldr	r3, [pc, #224]	; (800328c <HAL_RCC_GetSysClockFreq+0x200>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	099b      	lsrs	r3, r3, #6
 80031b0:	2200      	movs	r2, #0
 80031b2:	4618      	mov	r0, r3
 80031b4:	4611      	mov	r1, r2
 80031b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031ba:	623b      	str	r3, [r7, #32]
 80031bc:	2300      	movs	r3, #0
 80031be:	627b      	str	r3, [r7, #36]	; 0x24
 80031c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031c4:	4642      	mov	r2, r8
 80031c6:	464b      	mov	r3, r9
 80031c8:	f04f 0000 	mov.w	r0, #0
 80031cc:	f04f 0100 	mov.w	r1, #0
 80031d0:	0159      	lsls	r1, r3, #5
 80031d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031d6:	0150      	lsls	r0, r2, #5
 80031d8:	4602      	mov	r2, r0
 80031da:	460b      	mov	r3, r1
 80031dc:	4641      	mov	r1, r8
 80031de:	ebb2 0a01 	subs.w	sl, r2, r1
 80031e2:	4649      	mov	r1, r9
 80031e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031fc:	ebb2 040a 	subs.w	r4, r2, sl
 8003200:	eb63 050b 	sbc.w	r5, r3, fp
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	f04f 0300 	mov.w	r3, #0
 800320c:	00eb      	lsls	r3, r5, #3
 800320e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003212:	00e2      	lsls	r2, r4, #3
 8003214:	4614      	mov	r4, r2
 8003216:	461d      	mov	r5, r3
 8003218:	4643      	mov	r3, r8
 800321a:	18e3      	adds	r3, r4, r3
 800321c:	603b      	str	r3, [r7, #0]
 800321e:	464b      	mov	r3, r9
 8003220:	eb45 0303 	adc.w	r3, r5, r3
 8003224:	607b      	str	r3, [r7, #4]
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	f04f 0300 	mov.w	r3, #0
 800322e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003232:	4629      	mov	r1, r5
 8003234:	028b      	lsls	r3, r1, #10
 8003236:	4621      	mov	r1, r4
 8003238:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800323c:	4621      	mov	r1, r4
 800323e:	028a      	lsls	r2, r1, #10
 8003240:	4610      	mov	r0, r2
 8003242:	4619      	mov	r1, r3
 8003244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003246:	2200      	movs	r2, #0
 8003248:	61bb      	str	r3, [r7, #24]
 800324a:	61fa      	str	r2, [r7, #28]
 800324c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003250:	f7fd f818 	bl	8000284 <__aeabi_uldivmod>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	4613      	mov	r3, r2
 800325a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800325c:	4b0b      	ldr	r3, [pc, #44]	; (800328c <HAL_RCC_GetSysClockFreq+0x200>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	0c1b      	lsrs	r3, r3, #16
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	3301      	adds	r3, #1
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800326c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800326e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003270:	fbb2 f3f3 	udiv	r3, r2, r3
 8003274:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003276:	e002      	b.n	800327e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003278:	4b05      	ldr	r3, [pc, #20]	; (8003290 <HAL_RCC_GetSysClockFreq+0x204>)
 800327a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800327c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800327e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003280:	4618      	mov	r0, r3
 8003282:	3750      	adds	r7, #80	; 0x50
 8003284:	46bd      	mov	sp, r7
 8003286:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800328a:	bf00      	nop
 800328c:	40023800 	.word	0x40023800
 8003290:	00f42400 	.word	0x00f42400
 8003294:	007a1200 	.word	0x007a1200

08003298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800329c:	4b03      	ldr	r3, [pc, #12]	; (80032ac <HAL_RCC_GetHCLKFreq+0x14>)
 800329e:	681b      	ldr	r3, [r3, #0]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	20000000 	.word	0x20000000

080032b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032b4:	f7ff fff0 	bl	8003298 <HAL_RCC_GetHCLKFreq>
 80032b8:	4602      	mov	r2, r0
 80032ba:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	0a9b      	lsrs	r3, r3, #10
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	4903      	ldr	r1, [pc, #12]	; (80032d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032c6:	5ccb      	ldrb	r3, [r1, r3]
 80032c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40023800 	.word	0x40023800
 80032d4:	08009b58 	.word	0x08009b58

080032d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032dc:	f7ff ffdc 	bl	8003298 <HAL_RCC_GetHCLKFreq>
 80032e0:	4602      	mov	r2, r0
 80032e2:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	0b5b      	lsrs	r3, r3, #13
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	4903      	ldr	r1, [pc, #12]	; (80032fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ee:	5ccb      	ldrb	r3, [r1, r3]
 80032f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40023800 	.word	0x40023800
 80032fc:	08009b58 	.word	0x08009b58

08003300 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	220f      	movs	r2, #15
 800330e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003310:	4b12      	ldr	r3, [pc, #72]	; (800335c <HAL_RCC_GetClockConfig+0x5c>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 0203 	and.w	r2, r3, #3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800331c:	4b0f      	ldr	r3, [pc, #60]	; (800335c <HAL_RCC_GetClockConfig+0x5c>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003328:	4b0c      	ldr	r3, [pc, #48]	; (800335c <HAL_RCC_GetClockConfig+0x5c>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003334:	4b09      	ldr	r3, [pc, #36]	; (800335c <HAL_RCC_GetClockConfig+0x5c>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	08db      	lsrs	r3, r3, #3
 800333a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003342:	4b07      	ldr	r3, [pc, #28]	; (8003360 <HAL_RCC_GetClockConfig+0x60>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 020f 	and.w	r2, r3, #15
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	601a      	str	r2, [r3, #0]
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	40023800 	.word	0x40023800
 8003360:	40023c00 	.word	0x40023c00

08003364 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e0c5      	b.n	8003502 <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a64      	ldr	r2, [pc, #400]	; (800350c <HAL_TIM_Base_Init+0x1a8>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d045      	beq.n	800340c <HAL_TIM_Base_Init+0xa8>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003388:	d040      	beq.n	800340c <HAL_TIM_Base_Init+0xa8>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a60      	ldr	r2, [pc, #384]	; (8003510 <HAL_TIM_Base_Init+0x1ac>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d03b      	beq.n	800340c <HAL_TIM_Base_Init+0xa8>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a5e      	ldr	r2, [pc, #376]	; (8003514 <HAL_TIM_Base_Init+0x1b0>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d036      	beq.n	800340c <HAL_TIM_Base_Init+0xa8>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a5d      	ldr	r2, [pc, #372]	; (8003518 <HAL_TIM_Base_Init+0x1b4>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d031      	beq.n	800340c <HAL_TIM_Base_Init+0xa8>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a5b      	ldr	r2, [pc, #364]	; (800351c <HAL_TIM_Base_Init+0x1b8>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d02c      	beq.n	800340c <HAL_TIM_Base_Init+0xa8>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a5a      	ldr	r2, [pc, #360]	; (8003520 <HAL_TIM_Base_Init+0x1bc>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d027      	beq.n	800340c <HAL_TIM_Base_Init+0xa8>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a58      	ldr	r2, [pc, #352]	; (8003524 <HAL_TIM_Base_Init+0x1c0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d022      	beq.n	800340c <HAL_TIM_Base_Init+0xa8>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a57      	ldr	r2, [pc, #348]	; (8003528 <HAL_TIM_Base_Init+0x1c4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d01d      	beq.n	800340c <HAL_TIM_Base_Init+0xa8>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a55      	ldr	r2, [pc, #340]	; (800352c <HAL_TIM_Base_Init+0x1c8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d018      	beq.n	800340c <HAL_TIM_Base_Init+0xa8>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a54      	ldr	r2, [pc, #336]	; (8003530 <HAL_TIM_Base_Init+0x1cc>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d013      	beq.n	800340c <HAL_TIM_Base_Init+0xa8>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a52      	ldr	r2, [pc, #328]	; (8003534 <HAL_TIM_Base_Init+0x1d0>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00e      	beq.n	800340c <HAL_TIM_Base_Init+0xa8>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a51      	ldr	r2, [pc, #324]	; (8003538 <HAL_TIM_Base_Init+0x1d4>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d009      	beq.n	800340c <HAL_TIM_Base_Init+0xa8>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a4f      	ldr	r2, [pc, #316]	; (800353c <HAL_TIM_Base_Init+0x1d8>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d004      	beq.n	800340c <HAL_TIM_Base_Init+0xa8>
 8003402:	f240 1113 	movw	r1, #275	; 0x113
 8003406:	484e      	ldr	r0, [pc, #312]	; (8003540 <HAL_TIM_Base_Init+0x1dc>)
 8003408:	f7fd ff14 	bl	8001234 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d014      	beq.n	800343e <HAL_TIM_Base_Init+0xda>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	2b10      	cmp	r3, #16
 800341a:	d010      	beq.n	800343e <HAL_TIM_Base_Init+0xda>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	2b20      	cmp	r3, #32
 8003422:	d00c      	beq.n	800343e <HAL_TIM_Base_Init+0xda>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	2b40      	cmp	r3, #64	; 0x40
 800342a:	d008      	beq.n	800343e <HAL_TIM_Base_Init+0xda>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	2b60      	cmp	r3, #96	; 0x60
 8003432:	d004      	beq.n	800343e <HAL_TIM_Base_Init+0xda>
 8003434:	f44f 718a 	mov.w	r1, #276	; 0x114
 8003438:	4841      	ldr	r0, [pc, #260]	; (8003540 <HAL_TIM_Base_Init+0x1dc>)
 800343a:	f7fd fefb 	bl	8001234 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00e      	beq.n	8003464 <HAL_TIM_Base_Init+0x100>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800344e:	d009      	beq.n	8003464 <HAL_TIM_Base_Init+0x100>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003458:	d004      	beq.n	8003464 <HAL_TIM_Base_Init+0x100>
 800345a:	f240 1115 	movw	r1, #277	; 0x115
 800345e:	4838      	ldr	r0, [pc, #224]	; (8003540 <HAL_TIM_Base_Init+0x1dc>)
 8003460:	f7fd fee8 	bl	8001234 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d008      	beq.n	800347e <HAL_TIM_Base_Init+0x11a>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	2b80      	cmp	r3, #128	; 0x80
 8003472:	d004      	beq.n	800347e <HAL_TIM_Base_Init+0x11a>
 8003474:	f44f 718b 	mov.w	r1, #278	; 0x116
 8003478:	4831      	ldr	r0, [pc, #196]	; (8003540 <HAL_TIM_Base_Init+0x1dc>)
 800347a:	f7fd fedb 	bl	8001234 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d106      	bne.n	8003498 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f856 	bl	8003544 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3304      	adds	r3, #4
 80034a8:	4619      	mov	r1, r3
 80034aa:	4610      	mov	r0, r2
 80034ac:	f000 fa54 	bl	8003958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40010000 	.word	0x40010000
 8003510:	40000400 	.word	0x40000400
 8003514:	40000800 	.word	0x40000800
 8003518:	40000c00 	.word	0x40000c00
 800351c:	40001000 	.word	0x40001000
 8003520:	40001400 	.word	0x40001400
 8003524:	40010400 	.word	0x40010400
 8003528:	40014000 	.word	0x40014000
 800352c:	40014400 	.word	0x40014400
 8003530:	40014800 	.word	0x40014800
 8003534:	40001800 	.word	0x40001800
 8003538:	40001c00 	.word	0x40001c00
 800353c:	40002000 	.word	0x40002000
 8003540:	080099ec 	.word	0x080099ec

08003544 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a51      	ldr	r2, [pc, #324]	; (80036ac <HAL_TIM_Base_Start_IT+0x154>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d045      	beq.n	80035f6 <HAL_TIM_Base_Start_IT+0x9e>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003572:	d040      	beq.n	80035f6 <HAL_TIM_Base_Start_IT+0x9e>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a4d      	ldr	r2, [pc, #308]	; (80036b0 <HAL_TIM_Base_Start_IT+0x158>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d03b      	beq.n	80035f6 <HAL_TIM_Base_Start_IT+0x9e>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a4c      	ldr	r2, [pc, #304]	; (80036b4 <HAL_TIM_Base_Start_IT+0x15c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d036      	beq.n	80035f6 <HAL_TIM_Base_Start_IT+0x9e>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a4a      	ldr	r2, [pc, #296]	; (80036b8 <HAL_TIM_Base_Start_IT+0x160>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d031      	beq.n	80035f6 <HAL_TIM_Base_Start_IT+0x9e>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a49      	ldr	r2, [pc, #292]	; (80036bc <HAL_TIM_Base_Start_IT+0x164>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d02c      	beq.n	80035f6 <HAL_TIM_Base_Start_IT+0x9e>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a47      	ldr	r2, [pc, #284]	; (80036c0 <HAL_TIM_Base_Start_IT+0x168>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d027      	beq.n	80035f6 <HAL_TIM_Base_Start_IT+0x9e>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a46      	ldr	r2, [pc, #280]	; (80036c4 <HAL_TIM_Base_Start_IT+0x16c>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d022      	beq.n	80035f6 <HAL_TIM_Base_Start_IT+0x9e>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a44      	ldr	r2, [pc, #272]	; (80036c8 <HAL_TIM_Base_Start_IT+0x170>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d01d      	beq.n	80035f6 <HAL_TIM_Base_Start_IT+0x9e>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a43      	ldr	r2, [pc, #268]	; (80036cc <HAL_TIM_Base_Start_IT+0x174>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d018      	beq.n	80035f6 <HAL_TIM_Base_Start_IT+0x9e>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a41      	ldr	r2, [pc, #260]	; (80036d0 <HAL_TIM_Base_Start_IT+0x178>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d013      	beq.n	80035f6 <HAL_TIM_Base_Start_IT+0x9e>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a40      	ldr	r2, [pc, #256]	; (80036d4 <HAL_TIM_Base_Start_IT+0x17c>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d00e      	beq.n	80035f6 <HAL_TIM_Base_Start_IT+0x9e>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a3e      	ldr	r2, [pc, #248]	; (80036d8 <HAL_TIM_Base_Start_IT+0x180>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d009      	beq.n	80035f6 <HAL_TIM_Base_Start_IT+0x9e>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a3d      	ldr	r2, [pc, #244]	; (80036dc <HAL_TIM_Base_Start_IT+0x184>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d004      	beq.n	80035f6 <HAL_TIM_Base_Start_IT+0x9e>
 80035ec:	f240 11cf 	movw	r1, #463	; 0x1cf
 80035f0:	483b      	ldr	r0, [pc, #236]	; (80036e0 <HAL_TIM_Base_Start_IT+0x188>)
 80035f2:	f7fd fe1f 	bl	8001234 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d001      	beq.n	8003606 <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e04e      	b.n	80036a4 <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2202      	movs	r2, #2
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f042 0201 	orr.w	r2, r2, #1
 800361c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a22      	ldr	r2, [pc, #136]	; (80036ac <HAL_TIM_Base_Start_IT+0x154>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d022      	beq.n	800366e <HAL_TIM_Base_Start_IT+0x116>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003630:	d01d      	beq.n	800366e <HAL_TIM_Base_Start_IT+0x116>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a1e      	ldr	r2, [pc, #120]	; (80036b0 <HAL_TIM_Base_Start_IT+0x158>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d018      	beq.n	800366e <HAL_TIM_Base_Start_IT+0x116>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a1c      	ldr	r2, [pc, #112]	; (80036b4 <HAL_TIM_Base_Start_IT+0x15c>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d013      	beq.n	800366e <HAL_TIM_Base_Start_IT+0x116>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a1b      	ldr	r2, [pc, #108]	; (80036b8 <HAL_TIM_Base_Start_IT+0x160>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d00e      	beq.n	800366e <HAL_TIM_Base_Start_IT+0x116>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a1b      	ldr	r2, [pc, #108]	; (80036c4 <HAL_TIM_Base_Start_IT+0x16c>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d009      	beq.n	800366e <HAL_TIM_Base_Start_IT+0x116>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a1a      	ldr	r2, [pc, #104]	; (80036c8 <HAL_TIM_Base_Start_IT+0x170>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d004      	beq.n	800366e <HAL_TIM_Base_Start_IT+0x116>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a1a      	ldr	r2, [pc, #104]	; (80036d4 <HAL_TIM_Base_Start_IT+0x17c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d111      	bne.n	8003692 <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2b06      	cmp	r3, #6
 800367e:	d010      	beq.n	80036a2 <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 0201 	orr.w	r2, r2, #1
 800368e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003690:	e007      	b.n	80036a2 <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f042 0201 	orr.w	r2, r2, #1
 80036a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40010000 	.word	0x40010000
 80036b0:	40000400 	.word	0x40000400
 80036b4:	40000800 	.word	0x40000800
 80036b8:	40000c00 	.word	0x40000c00
 80036bc:	40001000 	.word	0x40001000
 80036c0:	40001400 	.word	0x40001400
 80036c4:	40010400 	.word	0x40010400
 80036c8:	40014000 	.word	0x40014000
 80036cc:	40014400 	.word	0x40014400
 80036d0:	40014800 	.word	0x40014800
 80036d4:	40001800 	.word	0x40001800
 80036d8:	40001c00 	.word	0x40001c00
 80036dc:	40002000 	.word	0x40002000
 80036e0:	080099ec 	.word	0x080099ec

080036e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d122      	bne.n	8003740 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b02      	cmp	r3, #2
 8003706:	d11b      	bne.n	8003740 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f06f 0202 	mvn.w	r2, #2
 8003710:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	f003 0303 	and.w	r3, r3, #3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f8f8 	bl	800391c <HAL_TIM_IC_CaptureCallback>
 800372c:	e005      	b.n	800373a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f8ea 	bl	8003908 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f8fb 	bl	8003930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	f003 0304 	and.w	r3, r3, #4
 800374a:	2b04      	cmp	r3, #4
 800374c:	d122      	bne.n	8003794 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b04      	cmp	r3, #4
 800375a:	d11b      	bne.n	8003794 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f06f 0204 	mvn.w	r2, #4
 8003764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2202      	movs	r2, #2
 800376a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f8ce 	bl	800391c <HAL_TIM_IC_CaptureCallback>
 8003780:	e005      	b.n	800378e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f8c0 	bl	8003908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f8d1 	bl	8003930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f003 0308 	and.w	r3, r3, #8
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d122      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d11b      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f06f 0208 	mvn.w	r2, #8
 80037b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2204      	movs	r2, #4
 80037be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f8a4 	bl	800391c <HAL_TIM_IC_CaptureCallback>
 80037d4:	e005      	b.n	80037e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f896 	bl	8003908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f8a7 	bl	8003930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	f003 0310 	and.w	r3, r3, #16
 80037f2:	2b10      	cmp	r3, #16
 80037f4:	d122      	bne.n	800383c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f003 0310 	and.w	r3, r3, #16
 8003800:	2b10      	cmp	r3, #16
 8003802:	d11b      	bne.n	800383c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f06f 0210 	mvn.w	r2, #16
 800380c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2208      	movs	r2, #8
 8003812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f87a 	bl	800391c <HAL_TIM_IC_CaptureCallback>
 8003828:	e005      	b.n	8003836 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f86c 	bl	8003908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f87d 	bl	8003930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b01      	cmp	r3, #1
 8003848:	d10e      	bne.n	8003868 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b01      	cmp	r3, #1
 8003856:	d107      	bne.n	8003868 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f06f 0201 	mvn.w	r2, #1
 8003860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f846 	bl	80038f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003872:	2b80      	cmp	r3, #128	; 0x80
 8003874:	d10e      	bne.n	8003894 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003880:	2b80      	cmp	r3, #128	; 0x80
 8003882:	d107      	bne.n	8003894 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800388c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f90c 	bl	8003aac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389e:	2b40      	cmp	r3, #64	; 0x40
 80038a0:	d10e      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ac:	2b40      	cmp	r3, #64	; 0x40
 80038ae:	d107      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f842 	bl	8003944 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	f003 0320 	and.w	r3, r3, #32
 80038ca:	2b20      	cmp	r3, #32
 80038cc:	d10e      	bne.n	80038ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f003 0320 	and.w	r3, r3, #32
 80038d8:	2b20      	cmp	r3, #32
 80038da:	d107      	bne.n	80038ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f06f 0220 	mvn.w	r2, #32
 80038e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f8d6 	bl	8003a98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038ec:	bf00      	nop
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a40      	ldr	r2, [pc, #256]	; (8003a6c <TIM_Base_SetConfig+0x114>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d013      	beq.n	8003998 <TIM_Base_SetConfig+0x40>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003976:	d00f      	beq.n	8003998 <TIM_Base_SetConfig+0x40>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a3d      	ldr	r2, [pc, #244]	; (8003a70 <TIM_Base_SetConfig+0x118>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d00b      	beq.n	8003998 <TIM_Base_SetConfig+0x40>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a3c      	ldr	r2, [pc, #240]	; (8003a74 <TIM_Base_SetConfig+0x11c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d007      	beq.n	8003998 <TIM_Base_SetConfig+0x40>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a3b      	ldr	r2, [pc, #236]	; (8003a78 <TIM_Base_SetConfig+0x120>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d003      	beq.n	8003998 <TIM_Base_SetConfig+0x40>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a3a      	ldr	r2, [pc, #232]	; (8003a7c <TIM_Base_SetConfig+0x124>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d108      	bne.n	80039aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a2f      	ldr	r2, [pc, #188]	; (8003a6c <TIM_Base_SetConfig+0x114>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d02b      	beq.n	8003a0a <TIM_Base_SetConfig+0xb2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b8:	d027      	beq.n	8003a0a <TIM_Base_SetConfig+0xb2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a2c      	ldr	r2, [pc, #176]	; (8003a70 <TIM_Base_SetConfig+0x118>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d023      	beq.n	8003a0a <TIM_Base_SetConfig+0xb2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a2b      	ldr	r2, [pc, #172]	; (8003a74 <TIM_Base_SetConfig+0x11c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d01f      	beq.n	8003a0a <TIM_Base_SetConfig+0xb2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a2a      	ldr	r2, [pc, #168]	; (8003a78 <TIM_Base_SetConfig+0x120>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d01b      	beq.n	8003a0a <TIM_Base_SetConfig+0xb2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a29      	ldr	r2, [pc, #164]	; (8003a7c <TIM_Base_SetConfig+0x124>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d017      	beq.n	8003a0a <TIM_Base_SetConfig+0xb2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a28      	ldr	r2, [pc, #160]	; (8003a80 <TIM_Base_SetConfig+0x128>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d013      	beq.n	8003a0a <TIM_Base_SetConfig+0xb2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a27      	ldr	r2, [pc, #156]	; (8003a84 <TIM_Base_SetConfig+0x12c>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d00f      	beq.n	8003a0a <TIM_Base_SetConfig+0xb2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a26      	ldr	r2, [pc, #152]	; (8003a88 <TIM_Base_SetConfig+0x130>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d00b      	beq.n	8003a0a <TIM_Base_SetConfig+0xb2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a25      	ldr	r2, [pc, #148]	; (8003a8c <TIM_Base_SetConfig+0x134>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d007      	beq.n	8003a0a <TIM_Base_SetConfig+0xb2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a24      	ldr	r2, [pc, #144]	; (8003a90 <TIM_Base_SetConfig+0x138>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d003      	beq.n	8003a0a <TIM_Base_SetConfig+0xb2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a23      	ldr	r2, [pc, #140]	; (8003a94 <TIM_Base_SetConfig+0x13c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d108      	bne.n	8003a1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a0a      	ldr	r2, [pc, #40]	; (8003a6c <TIM_Base_SetConfig+0x114>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d003      	beq.n	8003a50 <TIM_Base_SetConfig+0xf8>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a0c      	ldr	r2, [pc, #48]	; (8003a7c <TIM_Base_SetConfig+0x124>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d103      	bne.n	8003a58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	691a      	ldr	r2, [r3, #16]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	615a      	str	r2, [r3, #20]
}
 8003a5e:	bf00      	nop
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	40010000 	.word	0x40010000
 8003a70:	40000400 	.word	0x40000400
 8003a74:	40000800 	.word	0x40000800
 8003a78:	40000c00 	.word	0x40000c00
 8003a7c:	40010400 	.word	0x40010400
 8003a80:	40014000 	.word	0x40014000
 8003a84:	40014400 	.word	0x40014400
 8003a88:	40014800 	.word	0x40014800
 8003a8c:	40001800 	.word	0x40001800
 8003a90:	40001c00 	.word	0x40001c00
 8003a94:	40002000 	.word	0x40002000

08003a98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e0be      	b.n	8003c50 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d031      	beq.n	8003b3e <HAL_UART_Init+0x7e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a5e      	ldr	r2, [pc, #376]	; (8003c58 <HAL_UART_Init+0x198>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d013      	beq.n	8003b0c <HAL_UART_Init+0x4c>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a5c      	ldr	r2, [pc, #368]	; (8003c5c <HAL_UART_Init+0x19c>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d00e      	beq.n	8003b0c <HAL_UART_Init+0x4c>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a5b      	ldr	r2, [pc, #364]	; (8003c60 <HAL_UART_Init+0x1a0>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d009      	beq.n	8003b0c <HAL_UART_Init+0x4c>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a59      	ldr	r2, [pc, #356]	; (8003c64 <HAL_UART_Init+0x1a4>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d004      	beq.n	8003b0c <HAL_UART_Init+0x4c>
 8003b02:	f240 1173 	movw	r1, #371	; 0x173
 8003b06:	4858      	ldr	r0, [pc, #352]	; (8003c68 <HAL_UART_Init+0x1a8>)
 8003b08:	f7fd fb94 	bl	8001234 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d041      	beq.n	8003b98 <HAL_UART_Init+0xd8>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b1c:	d03c      	beq.n	8003b98 <HAL_UART_Init+0xd8>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b26:	d037      	beq.n	8003b98 <HAL_UART_Init+0xd8>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b30:	d032      	beq.n	8003b98 <HAL_UART_Init+0xd8>
 8003b32:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8003b36:	484c      	ldr	r0, [pc, #304]	; (8003c68 <HAL_UART_Init+0x1a8>)
 8003b38:	f7fd fb7c 	bl	8001234 <assert_failed>
 8003b3c:	e02c      	b.n	8003b98 <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a45      	ldr	r2, [pc, #276]	; (8003c58 <HAL_UART_Init+0x198>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d027      	beq.n	8003b98 <HAL_UART_Init+0xd8>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a43      	ldr	r2, [pc, #268]	; (8003c5c <HAL_UART_Init+0x19c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d022      	beq.n	8003b98 <HAL_UART_Init+0xd8>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a42      	ldr	r2, [pc, #264]	; (8003c60 <HAL_UART_Init+0x1a0>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d01d      	beq.n	8003b98 <HAL_UART_Init+0xd8>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a42      	ldr	r2, [pc, #264]	; (8003c6c <HAL_UART_Init+0x1ac>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d018      	beq.n	8003b98 <HAL_UART_Init+0xd8>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a41      	ldr	r2, [pc, #260]	; (8003c70 <HAL_UART_Init+0x1b0>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d013      	beq.n	8003b98 <HAL_UART_Init+0xd8>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a3b      	ldr	r2, [pc, #236]	; (8003c64 <HAL_UART_Init+0x1a4>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00e      	beq.n	8003b98 <HAL_UART_Init+0xd8>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a3d      	ldr	r2, [pc, #244]	; (8003c74 <HAL_UART_Init+0x1b4>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d009      	beq.n	8003b98 <HAL_UART_Init+0xd8>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a3b      	ldr	r2, [pc, #236]	; (8003c78 <HAL_UART_Init+0x1b8>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d004      	beq.n	8003b98 <HAL_UART_Init+0xd8>
 8003b8e:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8003b92:	4835      	ldr	r0, [pc, #212]	; (8003c68 <HAL_UART_Init+0x1a8>)
 8003b94:	f7fd fb4e 	bl	8001234 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d009      	beq.n	8003bb4 <HAL_UART_Init+0xf4>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ba8:	d004      	beq.n	8003bb4 <HAL_UART_Init+0xf4>
 8003baa:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8003bae:	482e      	ldr	r0, [pc, #184]	; (8003c68 <HAL_UART_Init+0x1a8>)
 8003bb0:	f7fd fb40 	bl	8001234 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	69db      	ldr	r3, [r3, #28]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d009      	beq.n	8003bd0 <HAL_UART_Init+0x110>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bc4:	d004      	beq.n	8003bd0 <HAL_UART_Init+0x110>
 8003bc6:	f240 117b 	movw	r1, #379	; 0x17b
 8003bca:	4827      	ldr	r0, [pc, #156]	; (8003c68 <HAL_UART_Init+0x1a8>)
 8003bcc:	f7fd fb32 	bl	8001234 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d106      	bne.n	8003bea <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7fd fb5b 	bl	80012a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2224      	movs	r2, #36	; 0x24
 8003bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c00:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 fc8c 	bl	8004520 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	691a      	ldr	r2, [r3, #16]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c16:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	695a      	ldr	r2, [r3, #20]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c26:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c36:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2220      	movs	r2, #32
 8003c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40011000 	.word	0x40011000
 8003c5c:	40004400 	.word	0x40004400
 8003c60:	40004800 	.word	0x40004800
 8003c64:	40011400 	.word	0x40011400
 8003c68:	08009a24 	.word	0x08009a24
 8003c6c:	40004c00 	.word	0x40004c00
 8003c70:	40005000 	.word	0x40005000
 8003c74:	40007800 	.word	0x40007800
 8003c78:	40007c00 	.word	0x40007c00

08003c7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b0ba      	sub	sp, #232	; 0xe8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cb2:	f003 030f 	and.w	r3, r3, #15
 8003cb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003cba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10f      	bne.n	8003ce2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cc6:	f003 0320 	and.w	r3, r3, #32
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d009      	beq.n	8003ce2 <HAL_UART_IRQHandler+0x66>
 8003cce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cd2:	f003 0320 	and.w	r3, r3, #32
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 fb65 	bl	80043aa <UART_Receive_IT>
      return;
 8003ce0:	e256      	b.n	8004190 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ce2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 80de 	beq.w	8003ea8 <HAL_UART_IRQHandler+0x22c>
 8003cec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d106      	bne.n	8003d06 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cfc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 80d1 	beq.w	8003ea8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00b      	beq.n	8003d2a <HAL_UART_IRQHandler+0xae>
 8003d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d005      	beq.n	8003d2a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	f043 0201 	orr.w	r2, r3, #1
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00b      	beq.n	8003d4e <HAL_UART_IRQHandler+0xd2>
 8003d36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d005      	beq.n	8003d4e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	f043 0202 	orr.w	r2, r3, #2
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00b      	beq.n	8003d72 <HAL_UART_IRQHandler+0xf6>
 8003d5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d005      	beq.n	8003d72 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	f043 0204 	orr.w	r2, r3, #4
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d76:	f003 0308 	and.w	r3, r3, #8
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d011      	beq.n	8003da2 <HAL_UART_IRQHandler+0x126>
 8003d7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d82:	f003 0320 	and.w	r3, r3, #32
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d105      	bne.n	8003d96 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d005      	beq.n	8003da2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	f043 0208 	orr.w	r2, r3, #8
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 81ed 	beq.w	8004186 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003db0:	f003 0320 	and.w	r3, r3, #32
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d008      	beq.n	8003dca <HAL_UART_IRQHandler+0x14e>
 8003db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dbc:	f003 0320 	and.w	r3, r3, #32
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d002      	beq.n	8003dca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 faf0 	bl	80043aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd4:	2b40      	cmp	r3, #64	; 0x40
 8003dd6:	bf0c      	ite	eq
 8003dd8:	2301      	moveq	r3, #1
 8003dda:	2300      	movne	r3, #0
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d103      	bne.n	8003df6 <HAL_UART_IRQHandler+0x17a>
 8003dee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d04f      	beq.n	8003e96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f9f8 	bl	80041ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e06:	2b40      	cmp	r3, #64	; 0x40
 8003e08:	d141      	bne.n	8003e8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	3314      	adds	r3, #20
 8003e10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e18:	e853 3f00 	ldrex	r3, [r3]
 8003e1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	3314      	adds	r3, #20
 8003e32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e46:	e841 2300 	strex	r3, r2, [r1]
 8003e4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1d9      	bne.n	8003e0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d013      	beq.n	8003e86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e62:	4a7d      	ldr	r2, [pc, #500]	; (8004058 <HAL_UART_IRQHandler+0x3dc>)
 8003e64:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7fd ffea 	bl	8001e44 <HAL_DMA_Abort_IT>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d016      	beq.n	8003ea4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e80:	4610      	mov	r0, r2
 8003e82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e84:	e00e      	b.n	8003ea4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f99a 	bl	80041c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e8c:	e00a      	b.n	8003ea4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f996 	bl	80041c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e94:	e006      	b.n	8003ea4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f992 	bl	80041c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003ea2:	e170      	b.n	8004186 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ea4:	bf00      	nop
    return;
 8003ea6:	e16e      	b.n	8004186 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	f040 814a 	bne.w	8004146 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eb6:	f003 0310 	and.w	r3, r3, #16
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 8143 	beq.w	8004146 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ec4:	f003 0310 	and.w	r3, r3, #16
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 813c 	beq.w	8004146 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60bb      	str	r3, [r7, #8]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	60bb      	str	r3, [r7, #8]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	60bb      	str	r3, [r7, #8]
 8003ee2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eee:	2b40      	cmp	r3, #64	; 0x40
 8003ef0:	f040 80b4 	bne.w	800405c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 8140 	beq.w	800418a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f12:	429a      	cmp	r2, r3
 8003f14:	f080 8139 	bcs.w	800418a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f1e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f2a:	f000 8088 	beq.w	800403e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	330c      	adds	r3, #12
 8003f34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f3c:	e853 3f00 	ldrex	r3, [r3]
 8003f40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	330c      	adds	r3, #12
 8003f56:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003f5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f62:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f6a:	e841 2300 	strex	r3, r2, [r1]
 8003f6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1d9      	bne.n	8003f2e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	3314      	adds	r3, #20
 8003f80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f84:	e853 3f00 	ldrex	r3, [r3]
 8003f88:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f8c:	f023 0301 	bic.w	r3, r3, #1
 8003f90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	3314      	adds	r3, #20
 8003f9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f9e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003fa2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003fa6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003faa:	e841 2300 	strex	r3, r2, [r1]
 8003fae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003fb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1e1      	bne.n	8003f7a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	3314      	adds	r3, #20
 8003fbc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fc0:	e853 3f00 	ldrex	r3, [r3]
 8003fc4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003fc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	3314      	adds	r3, #20
 8003fd6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003fda:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003fdc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fde:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003fe0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003fe2:	e841 2300 	strex	r3, r2, [r1]
 8003fe6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003fe8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1e3      	bne.n	8003fb6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	330c      	adds	r3, #12
 8004002:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004006:	e853 3f00 	ldrex	r3, [r3]
 800400a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800400c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800400e:	f023 0310 	bic.w	r3, r3, #16
 8004012:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	330c      	adds	r3, #12
 800401c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004020:	65ba      	str	r2, [r7, #88]	; 0x58
 8004022:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004024:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004026:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004028:	e841 2300 	strex	r3, r2, [r1]
 800402c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800402e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1e3      	bne.n	8003ffc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004038:	4618      	mov	r0, r3
 800403a:	f7fd fe93 	bl	8001d64 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004046:	b29b      	uxth	r3, r3
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	b29b      	uxth	r3, r3
 800404c:	4619      	mov	r1, r3
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f8c0 	bl	80041d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004054:	e099      	b.n	800418a <HAL_UART_IRQHandler+0x50e>
 8004056:	bf00      	nop
 8004058:	080042b3 	.word	0x080042b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004064:	b29b      	uxth	r3, r3
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004070:	b29b      	uxth	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 808b 	beq.w	800418e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004078:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 8086 	beq.w	800418e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	330c      	adds	r3, #12
 8004088:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408c:	e853 3f00 	ldrex	r3, [r3]
 8004090:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004094:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004098:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	330c      	adds	r3, #12
 80040a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80040a6:	647a      	str	r2, [r7, #68]	; 0x44
 80040a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040ae:	e841 2300 	strex	r3, r2, [r1]
 80040b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1e3      	bne.n	8004082 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	3314      	adds	r3, #20
 80040c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	e853 3f00 	ldrex	r3, [r3]
 80040c8:	623b      	str	r3, [r7, #32]
   return(result);
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	f023 0301 	bic.w	r3, r3, #1
 80040d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	3314      	adds	r3, #20
 80040da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80040de:	633a      	str	r2, [r7, #48]	; 0x30
 80040e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040e6:	e841 2300 	strex	r3, r2, [r1]
 80040ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1e3      	bne.n	80040ba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2220      	movs	r2, #32
 80040f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	330c      	adds	r3, #12
 8004106:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	e853 3f00 	ldrex	r3, [r3]
 800410e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f023 0310 	bic.w	r3, r3, #16
 8004116:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	330c      	adds	r3, #12
 8004120:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004124:	61fa      	str	r2, [r7, #28]
 8004126:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004128:	69b9      	ldr	r1, [r7, #24]
 800412a:	69fa      	ldr	r2, [r7, #28]
 800412c:	e841 2300 	strex	r3, r2, [r1]
 8004130:	617b      	str	r3, [r7, #20]
   return(result);
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1e3      	bne.n	8004100 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004138:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800413c:	4619      	mov	r1, r3
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f848 	bl	80041d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004144:	e023      	b.n	800418e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800414a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800414e:	2b00      	cmp	r3, #0
 8004150:	d009      	beq.n	8004166 <HAL_UART_IRQHandler+0x4ea>
 8004152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f8bb 	bl	80042da <UART_Transmit_IT>
    return;
 8004164:	e014      	b.n	8004190 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800416a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00e      	beq.n	8004190 <HAL_UART_IRQHandler+0x514>
 8004172:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417a:	2b00      	cmp	r3, #0
 800417c:	d008      	beq.n	8004190 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f8fb 	bl	800437a <UART_EndTransmit_IT>
    return;
 8004184:	e004      	b.n	8004190 <HAL_UART_IRQHandler+0x514>
    return;
 8004186:	bf00      	nop
 8004188:	e002      	b.n	8004190 <HAL_UART_IRQHandler+0x514>
      return;
 800418a:	bf00      	nop
 800418c:	e000      	b.n	8004190 <HAL_UART_IRQHandler+0x514>
      return;
 800418e:	bf00      	nop
  }
}
 8004190:	37e8      	adds	r7, #232	; 0xe8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop

08004198 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	460b      	mov	r3, r1
 80041de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b095      	sub	sp, #84	; 0x54
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	330c      	adds	r3, #12
 80041fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041fe:	e853 3f00 	ldrex	r3, [r3]
 8004202:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004206:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800420a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	330c      	adds	r3, #12
 8004212:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004214:	643a      	str	r2, [r7, #64]	; 0x40
 8004216:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004218:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800421a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800421c:	e841 2300 	strex	r3, r2, [r1]
 8004220:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1e5      	bne.n	80041f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3314      	adds	r3, #20
 800422e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	e853 3f00 	ldrex	r3, [r3]
 8004236:	61fb      	str	r3, [r7, #28]
   return(result);
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	f023 0301 	bic.w	r3, r3, #1
 800423e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3314      	adds	r3, #20
 8004246:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004248:	62fa      	str	r2, [r7, #44]	; 0x2c
 800424a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800424e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004250:	e841 2300 	strex	r3, r2, [r1]
 8004254:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1e5      	bne.n	8004228 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004260:	2b01      	cmp	r3, #1
 8004262:	d119      	bne.n	8004298 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	330c      	adds	r3, #12
 800426a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	e853 3f00 	ldrex	r3, [r3]
 8004272:	60bb      	str	r3, [r7, #8]
   return(result);
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f023 0310 	bic.w	r3, r3, #16
 800427a:	647b      	str	r3, [r7, #68]	; 0x44
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	330c      	adds	r3, #12
 8004282:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004284:	61ba      	str	r2, [r7, #24]
 8004286:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004288:	6979      	ldr	r1, [r7, #20]
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	e841 2300 	strex	r3, r2, [r1]
 8004290:	613b      	str	r3, [r7, #16]
   return(result);
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1e5      	bne.n	8004264 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2220      	movs	r2, #32
 800429c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80042a6:	bf00      	nop
 80042a8:	3754      	adds	r7, #84	; 0x54
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b084      	sub	sp, #16
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f7ff ff77 	bl	80041c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042d2:	bf00      	nop
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042da:	b480      	push	{r7}
 80042dc:	b085      	sub	sp, #20
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b21      	cmp	r3, #33	; 0x21
 80042ec:	d13e      	bne.n	800436c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f6:	d114      	bne.n	8004322 <UART_Transmit_IT+0x48>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d110      	bne.n	8004322 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	881b      	ldrh	r3, [r3, #0]
 800430a:	461a      	mov	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004314:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	1c9a      	adds	r2, r3, #2
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	621a      	str	r2, [r3, #32]
 8004320:	e008      	b.n	8004334 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	1c59      	adds	r1, r3, #1
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6211      	str	r1, [r2, #32]
 800432c:	781a      	ldrb	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004338:	b29b      	uxth	r3, r3
 800433a:	3b01      	subs	r3, #1
 800433c:	b29b      	uxth	r3, r3
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	4619      	mov	r1, r3
 8004342:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10f      	bne.n	8004368 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004356:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68da      	ldr	r2, [r3, #12]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004366:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004368:	2300      	movs	r3, #0
 800436a:	e000      	b.n	800436e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800436c:	2302      	movs	r3, #2
  }
}
 800436e:	4618      	mov	r0, r3
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b082      	sub	sp, #8
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68da      	ldr	r2, [r3, #12]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004390:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2220      	movs	r2, #32
 8004396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7ff fefc 	bl	8004198 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b08c      	sub	sp, #48	; 0x30
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b22      	cmp	r3, #34	; 0x22
 80043bc:	f040 80ab 	bne.w	8004516 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043c8:	d117      	bne.n	80043fa <UART_Receive_IT+0x50>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d113      	bne.n	80043fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80043d2:	2300      	movs	r3, #0
 80043d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043da:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f2:	1c9a      	adds	r2, r3, #2
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	629a      	str	r2, [r3, #40]	; 0x28
 80043f8:	e026      	b.n	8004448 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004400:	2300      	movs	r3, #0
 8004402:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800440c:	d007      	beq.n	800441e <UART_Receive_IT+0x74>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10a      	bne.n	800442c <UART_Receive_IT+0x82>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d106      	bne.n	800442c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	b2da      	uxtb	r2, r3
 8004426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004428:	701a      	strb	r2, [r3, #0]
 800442a:	e008      	b.n	800443e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	b2db      	uxtb	r3, r3
 8004434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004438:	b2da      	uxtb	r2, r3
 800443a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004442:	1c5a      	adds	r2, r3, #1
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800444c:	b29b      	uxth	r3, r3
 800444e:	3b01      	subs	r3, #1
 8004450:	b29b      	uxth	r3, r3
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	4619      	mov	r1, r3
 8004456:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004458:	2b00      	cmp	r3, #0
 800445a:	d15a      	bne.n	8004512 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 0220 	bic.w	r2, r2, #32
 800446a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68da      	ldr	r2, [r3, #12]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800447a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	695a      	ldr	r2, [r3, #20]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0201 	bic.w	r2, r2, #1
 800448a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2220      	movs	r2, #32
 8004490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004498:	2b01      	cmp	r3, #1
 800449a:	d135      	bne.n	8004508 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	330c      	adds	r3, #12
 80044a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	e853 3f00 	ldrex	r3, [r3]
 80044b0:	613b      	str	r3, [r7, #16]
   return(result);
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f023 0310 	bic.w	r3, r3, #16
 80044b8:	627b      	str	r3, [r7, #36]	; 0x24
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	330c      	adds	r3, #12
 80044c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c2:	623a      	str	r2, [r7, #32]
 80044c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c6:	69f9      	ldr	r1, [r7, #28]
 80044c8:	6a3a      	ldr	r2, [r7, #32]
 80044ca:	e841 2300 	strex	r3, r2, [r1]
 80044ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1e5      	bne.n	80044a2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0310 	and.w	r3, r3, #16
 80044e0:	2b10      	cmp	r3, #16
 80044e2:	d10a      	bne.n	80044fa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044e4:	2300      	movs	r3, #0
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044fe:	4619      	mov	r1, r3
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7ff fe67 	bl	80041d4 <HAL_UARTEx_RxEventCallback>
 8004506:	e002      	b.n	800450e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f7ff fe4f 	bl	80041ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800450e:	2300      	movs	r3, #0
 8004510:	e002      	b.n	8004518 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004512:	2300      	movs	r3, #0
 8004514:	e000      	b.n	8004518 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004516:	2302      	movs	r3, #2
  }
}
 8004518:	4618      	mov	r0, r3
 800451a:	3730      	adds	r7, #48	; 0x30
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004524:	b0c0      	sub	sp, #256	; 0x100
 8004526:	af00      	add	r7, sp, #0
 8004528:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800452c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	4bcf      	ldr	r3, [pc, #828]	; (8004870 <UART_SetConfig+0x350>)
 8004534:	429a      	cmp	r2, r3
 8004536:	d904      	bls.n	8004542 <UART_SetConfig+0x22>
 8004538:	f640 6161 	movw	r1, #3681	; 0xe61
 800453c:	48cd      	ldr	r0, [pc, #820]	; (8004874 <UART_SetConfig+0x354>)
 800453e:	f7fc fe79 	bl	8001234 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8004542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00a      	beq.n	8004562 <UART_SetConfig+0x42>
 800454c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004556:	d004      	beq.n	8004562 <UART_SetConfig+0x42>
 8004558:	f640 6162 	movw	r1, #3682	; 0xe62
 800455c:	48c5      	ldr	r0, [pc, #788]	; (8004874 <UART_SetConfig+0x354>)
 800455e:	f7fc fe69 	bl	8001234 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8004562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d010      	beq.n	800458e <UART_SetConfig+0x6e>
 800456c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004576:	d00a      	beq.n	800458e <UART_SetConfig+0x6e>
 8004578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004582:	d004      	beq.n	800458e <UART_SetConfig+0x6e>
 8004584:	f640 6163 	movw	r1, #3683	; 0xe63
 8004588:	48ba      	ldr	r0, [pc, #744]	; (8004874 <UART_SetConfig+0x354>)
 800458a:	f7fc fe53 	bl	8001234 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800458e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004592:	695a      	ldr	r2, [r3, #20]
 8004594:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8004598:	4013      	ands	r3, r2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d104      	bne.n	80045a8 <UART_SetConfig+0x88>
 800459e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d104      	bne.n	80045b2 <UART_SetConfig+0x92>
 80045a8:	f640 6164 	movw	r1, #3684	; 0xe64
 80045ac:	48b1      	ldr	r0, [pc, #708]	; (8004874 <UART_SetConfig+0x354>)
 80045ae:	f7fc fe41 	bl	8001234 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80045be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c2:	68d9      	ldr	r1, [r3, #12]
 80045c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	ea40 0301 	orr.w	r3, r0, r1
 80045ce:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d4:	689a      	ldr	r2, [r3, #8]
 80045d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	431a      	orrs	r2, r3
 80045de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	431a      	orrs	r2, r3
 80045e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80045fe:	f021 010c 	bic.w	r1, r1, #12
 8004602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800460c:	430b      	orrs	r3, r1
 800460e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800461c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004620:	6999      	ldr	r1, [r3, #24]
 8004622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	ea40 0301 	orr.w	r3, r0, r1
 800462c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800462e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	4b90      	ldr	r3, [pc, #576]	; (8004878 <UART_SetConfig+0x358>)
 8004636:	429a      	cmp	r2, r3
 8004638:	d005      	beq.n	8004646 <UART_SetConfig+0x126>
 800463a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	4b8e      	ldr	r3, [pc, #568]	; (800487c <UART_SetConfig+0x35c>)
 8004642:	429a      	cmp	r2, r3
 8004644:	d104      	bne.n	8004650 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004646:	f7fe fe47 	bl	80032d8 <HAL_RCC_GetPCLK2Freq>
 800464a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800464e:	e003      	b.n	8004658 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004650:	f7fe fe2e 	bl	80032b0 <HAL_RCC_GetPCLK1Freq>
 8004654:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004662:	f040 810f 	bne.w	8004884 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800466a:	2200      	movs	r2, #0
 800466c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004670:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004674:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004678:	4622      	mov	r2, r4
 800467a:	462b      	mov	r3, r5
 800467c:	1891      	adds	r1, r2, r2
 800467e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004680:	415b      	adcs	r3, r3
 8004682:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004684:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004688:	4621      	mov	r1, r4
 800468a:	eb12 0801 	adds.w	r8, r2, r1
 800468e:	4629      	mov	r1, r5
 8004690:	eb43 0901 	adc.w	r9, r3, r1
 8004694:	f04f 0200 	mov.w	r2, #0
 8004698:	f04f 0300 	mov.w	r3, #0
 800469c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046a0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046a4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046a8:	4690      	mov	r8, r2
 80046aa:	4699      	mov	r9, r3
 80046ac:	4623      	mov	r3, r4
 80046ae:	eb18 0303 	adds.w	r3, r8, r3
 80046b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80046b6:	462b      	mov	r3, r5
 80046b8:	eb49 0303 	adc.w	r3, r9, r3
 80046bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80046c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80046cc:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80046d0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80046d4:	460b      	mov	r3, r1
 80046d6:	18db      	adds	r3, r3, r3
 80046d8:	653b      	str	r3, [r7, #80]	; 0x50
 80046da:	4613      	mov	r3, r2
 80046dc:	eb42 0303 	adc.w	r3, r2, r3
 80046e0:	657b      	str	r3, [r7, #84]	; 0x54
 80046e2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80046e6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80046ea:	f7fb fdcb 	bl	8000284 <__aeabi_uldivmod>
 80046ee:	4602      	mov	r2, r0
 80046f0:	460b      	mov	r3, r1
 80046f2:	4b63      	ldr	r3, [pc, #396]	; (8004880 <UART_SetConfig+0x360>)
 80046f4:	fba3 2302 	umull	r2, r3, r3, r2
 80046f8:	095b      	lsrs	r3, r3, #5
 80046fa:	011c      	lsls	r4, r3, #4
 80046fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004700:	2200      	movs	r2, #0
 8004702:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004706:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800470a:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800470e:	4642      	mov	r2, r8
 8004710:	464b      	mov	r3, r9
 8004712:	1891      	adds	r1, r2, r2
 8004714:	64b9      	str	r1, [r7, #72]	; 0x48
 8004716:	415b      	adcs	r3, r3
 8004718:	64fb      	str	r3, [r7, #76]	; 0x4c
 800471a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800471e:	4641      	mov	r1, r8
 8004720:	eb12 0a01 	adds.w	sl, r2, r1
 8004724:	4649      	mov	r1, r9
 8004726:	eb43 0b01 	adc.w	fp, r3, r1
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	f04f 0300 	mov.w	r3, #0
 8004732:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004736:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800473a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800473e:	4692      	mov	sl, r2
 8004740:	469b      	mov	fp, r3
 8004742:	4643      	mov	r3, r8
 8004744:	eb1a 0303 	adds.w	r3, sl, r3
 8004748:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800474c:	464b      	mov	r3, r9
 800474e:	eb4b 0303 	adc.w	r3, fp, r3
 8004752:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004762:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004766:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800476a:	460b      	mov	r3, r1
 800476c:	18db      	adds	r3, r3, r3
 800476e:	643b      	str	r3, [r7, #64]	; 0x40
 8004770:	4613      	mov	r3, r2
 8004772:	eb42 0303 	adc.w	r3, r2, r3
 8004776:	647b      	str	r3, [r7, #68]	; 0x44
 8004778:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800477c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004780:	f7fb fd80 	bl	8000284 <__aeabi_uldivmod>
 8004784:	4602      	mov	r2, r0
 8004786:	460b      	mov	r3, r1
 8004788:	4611      	mov	r1, r2
 800478a:	4b3d      	ldr	r3, [pc, #244]	; (8004880 <UART_SetConfig+0x360>)
 800478c:	fba3 2301 	umull	r2, r3, r3, r1
 8004790:	095b      	lsrs	r3, r3, #5
 8004792:	2264      	movs	r2, #100	; 0x64
 8004794:	fb02 f303 	mul.w	r3, r2, r3
 8004798:	1acb      	subs	r3, r1, r3
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80047a0:	4b37      	ldr	r3, [pc, #220]	; (8004880 <UART_SetConfig+0x360>)
 80047a2:	fba3 2302 	umull	r2, r3, r3, r2
 80047a6:	095b      	lsrs	r3, r3, #5
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047ae:	441c      	add	r4, r3
 80047b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047b4:	2200      	movs	r2, #0
 80047b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047ba:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80047be:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80047c2:	4642      	mov	r2, r8
 80047c4:	464b      	mov	r3, r9
 80047c6:	1891      	adds	r1, r2, r2
 80047c8:	63b9      	str	r1, [r7, #56]	; 0x38
 80047ca:	415b      	adcs	r3, r3
 80047cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047ce:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80047d2:	4641      	mov	r1, r8
 80047d4:	1851      	adds	r1, r2, r1
 80047d6:	6339      	str	r1, [r7, #48]	; 0x30
 80047d8:	4649      	mov	r1, r9
 80047da:	414b      	adcs	r3, r1
 80047dc:	637b      	str	r3, [r7, #52]	; 0x34
 80047de:	f04f 0200 	mov.w	r2, #0
 80047e2:	f04f 0300 	mov.w	r3, #0
 80047e6:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80047ea:	4659      	mov	r1, fp
 80047ec:	00cb      	lsls	r3, r1, #3
 80047ee:	4651      	mov	r1, sl
 80047f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047f4:	4651      	mov	r1, sl
 80047f6:	00ca      	lsls	r2, r1, #3
 80047f8:	4610      	mov	r0, r2
 80047fa:	4619      	mov	r1, r3
 80047fc:	4603      	mov	r3, r0
 80047fe:	4642      	mov	r2, r8
 8004800:	189b      	adds	r3, r3, r2
 8004802:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004806:	464b      	mov	r3, r9
 8004808:	460a      	mov	r2, r1
 800480a:	eb42 0303 	adc.w	r3, r2, r3
 800480e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800481e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004822:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004826:	460b      	mov	r3, r1
 8004828:	18db      	adds	r3, r3, r3
 800482a:	62bb      	str	r3, [r7, #40]	; 0x28
 800482c:	4613      	mov	r3, r2
 800482e:	eb42 0303 	adc.w	r3, r2, r3
 8004832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004834:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004838:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800483c:	f7fb fd22 	bl	8000284 <__aeabi_uldivmod>
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	4b0e      	ldr	r3, [pc, #56]	; (8004880 <UART_SetConfig+0x360>)
 8004846:	fba3 1302 	umull	r1, r3, r3, r2
 800484a:	095b      	lsrs	r3, r3, #5
 800484c:	2164      	movs	r1, #100	; 0x64
 800484e:	fb01 f303 	mul.w	r3, r1, r3
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	00db      	lsls	r3, r3, #3
 8004856:	3332      	adds	r3, #50	; 0x32
 8004858:	4a09      	ldr	r2, [pc, #36]	; (8004880 <UART_SetConfig+0x360>)
 800485a:	fba2 2303 	umull	r2, r3, r2, r3
 800485e:	095b      	lsrs	r3, r3, #5
 8004860:	f003 0207 	and.w	r2, r3, #7
 8004864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4422      	add	r2, r4
 800486c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800486e:	e108      	b.n	8004a82 <UART_SetConfig+0x562>
 8004870:	00a037a0 	.word	0x00a037a0
 8004874:	08009a24 	.word	0x08009a24
 8004878:	40011000 	.word	0x40011000
 800487c:	40011400 	.word	0x40011400
 8004880:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004888:	2200      	movs	r2, #0
 800488a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800488e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004892:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004896:	4642      	mov	r2, r8
 8004898:	464b      	mov	r3, r9
 800489a:	1891      	adds	r1, r2, r2
 800489c:	6239      	str	r1, [r7, #32]
 800489e:	415b      	adcs	r3, r3
 80048a0:	627b      	str	r3, [r7, #36]	; 0x24
 80048a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048a6:	4641      	mov	r1, r8
 80048a8:	1854      	adds	r4, r2, r1
 80048aa:	4649      	mov	r1, r9
 80048ac:	eb43 0501 	adc.w	r5, r3, r1
 80048b0:	f04f 0200 	mov.w	r2, #0
 80048b4:	f04f 0300 	mov.w	r3, #0
 80048b8:	00eb      	lsls	r3, r5, #3
 80048ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048be:	00e2      	lsls	r2, r4, #3
 80048c0:	4614      	mov	r4, r2
 80048c2:	461d      	mov	r5, r3
 80048c4:	4643      	mov	r3, r8
 80048c6:	18e3      	adds	r3, r4, r3
 80048c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80048cc:	464b      	mov	r3, r9
 80048ce:	eb45 0303 	adc.w	r3, r5, r3
 80048d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80048d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80048e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80048e6:	f04f 0200 	mov.w	r2, #0
 80048ea:	f04f 0300 	mov.w	r3, #0
 80048ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80048f2:	4629      	mov	r1, r5
 80048f4:	008b      	lsls	r3, r1, #2
 80048f6:	4621      	mov	r1, r4
 80048f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048fc:	4621      	mov	r1, r4
 80048fe:	008a      	lsls	r2, r1, #2
 8004900:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004904:	f7fb fcbe 	bl	8000284 <__aeabi_uldivmod>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4b60      	ldr	r3, [pc, #384]	; (8004a90 <UART_SetConfig+0x570>)
 800490e:	fba3 2302 	umull	r2, r3, r3, r2
 8004912:	095b      	lsrs	r3, r3, #5
 8004914:	011c      	lsls	r4, r3, #4
 8004916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800491a:	2200      	movs	r2, #0
 800491c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004920:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004924:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004928:	4642      	mov	r2, r8
 800492a:	464b      	mov	r3, r9
 800492c:	1891      	adds	r1, r2, r2
 800492e:	61b9      	str	r1, [r7, #24]
 8004930:	415b      	adcs	r3, r3
 8004932:	61fb      	str	r3, [r7, #28]
 8004934:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004938:	4641      	mov	r1, r8
 800493a:	1851      	adds	r1, r2, r1
 800493c:	6139      	str	r1, [r7, #16]
 800493e:	4649      	mov	r1, r9
 8004940:	414b      	adcs	r3, r1
 8004942:	617b      	str	r3, [r7, #20]
 8004944:	f04f 0200 	mov.w	r2, #0
 8004948:	f04f 0300 	mov.w	r3, #0
 800494c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004950:	4659      	mov	r1, fp
 8004952:	00cb      	lsls	r3, r1, #3
 8004954:	4651      	mov	r1, sl
 8004956:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800495a:	4651      	mov	r1, sl
 800495c:	00ca      	lsls	r2, r1, #3
 800495e:	4610      	mov	r0, r2
 8004960:	4619      	mov	r1, r3
 8004962:	4603      	mov	r3, r0
 8004964:	4642      	mov	r2, r8
 8004966:	189b      	adds	r3, r3, r2
 8004968:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800496c:	464b      	mov	r3, r9
 800496e:	460a      	mov	r2, r1
 8004970:	eb42 0303 	adc.w	r3, r2, r3
 8004974:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	67bb      	str	r3, [r7, #120]	; 0x78
 8004982:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004984:	f04f 0200 	mov.w	r2, #0
 8004988:	f04f 0300 	mov.w	r3, #0
 800498c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004990:	4649      	mov	r1, r9
 8004992:	008b      	lsls	r3, r1, #2
 8004994:	4641      	mov	r1, r8
 8004996:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800499a:	4641      	mov	r1, r8
 800499c:	008a      	lsls	r2, r1, #2
 800499e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80049a2:	f7fb fc6f 	bl	8000284 <__aeabi_uldivmod>
 80049a6:	4602      	mov	r2, r0
 80049a8:	460b      	mov	r3, r1
 80049aa:	4b39      	ldr	r3, [pc, #228]	; (8004a90 <UART_SetConfig+0x570>)
 80049ac:	fba3 1302 	umull	r1, r3, r3, r2
 80049b0:	095b      	lsrs	r3, r3, #5
 80049b2:	2164      	movs	r1, #100	; 0x64
 80049b4:	fb01 f303 	mul.w	r3, r1, r3
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	011b      	lsls	r3, r3, #4
 80049bc:	3332      	adds	r3, #50	; 0x32
 80049be:	4a34      	ldr	r2, [pc, #208]	; (8004a90 <UART_SetConfig+0x570>)
 80049c0:	fba2 2303 	umull	r2, r3, r2, r3
 80049c4:	095b      	lsrs	r3, r3, #5
 80049c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049ca:	441c      	add	r4, r3
 80049cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049d0:	2200      	movs	r2, #0
 80049d2:	673b      	str	r3, [r7, #112]	; 0x70
 80049d4:	677a      	str	r2, [r7, #116]	; 0x74
 80049d6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80049da:	4642      	mov	r2, r8
 80049dc:	464b      	mov	r3, r9
 80049de:	1891      	adds	r1, r2, r2
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	415b      	adcs	r3, r3
 80049e4:	60fb      	str	r3, [r7, #12]
 80049e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049ea:	4641      	mov	r1, r8
 80049ec:	1851      	adds	r1, r2, r1
 80049ee:	6039      	str	r1, [r7, #0]
 80049f0:	4649      	mov	r1, r9
 80049f2:	414b      	adcs	r3, r1
 80049f4:	607b      	str	r3, [r7, #4]
 80049f6:	f04f 0200 	mov.w	r2, #0
 80049fa:	f04f 0300 	mov.w	r3, #0
 80049fe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a02:	4659      	mov	r1, fp
 8004a04:	00cb      	lsls	r3, r1, #3
 8004a06:	4651      	mov	r1, sl
 8004a08:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a0c:	4651      	mov	r1, sl
 8004a0e:	00ca      	lsls	r2, r1, #3
 8004a10:	4610      	mov	r0, r2
 8004a12:	4619      	mov	r1, r3
 8004a14:	4603      	mov	r3, r0
 8004a16:	4642      	mov	r2, r8
 8004a18:	189b      	adds	r3, r3, r2
 8004a1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a1c:	464b      	mov	r3, r9
 8004a1e:	460a      	mov	r2, r1
 8004a20:	eb42 0303 	adc.w	r3, r2, r3
 8004a24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	663b      	str	r3, [r7, #96]	; 0x60
 8004a30:	667a      	str	r2, [r7, #100]	; 0x64
 8004a32:	f04f 0200 	mov.w	r2, #0
 8004a36:	f04f 0300 	mov.w	r3, #0
 8004a3a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004a3e:	4649      	mov	r1, r9
 8004a40:	008b      	lsls	r3, r1, #2
 8004a42:	4641      	mov	r1, r8
 8004a44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a48:	4641      	mov	r1, r8
 8004a4a:	008a      	lsls	r2, r1, #2
 8004a4c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004a50:	f7fb fc18 	bl	8000284 <__aeabi_uldivmod>
 8004a54:	4602      	mov	r2, r0
 8004a56:	460b      	mov	r3, r1
 8004a58:	4b0d      	ldr	r3, [pc, #52]	; (8004a90 <UART_SetConfig+0x570>)
 8004a5a:	fba3 1302 	umull	r1, r3, r3, r2
 8004a5e:	095b      	lsrs	r3, r3, #5
 8004a60:	2164      	movs	r1, #100	; 0x64
 8004a62:	fb01 f303 	mul.w	r3, r1, r3
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	011b      	lsls	r3, r3, #4
 8004a6a:	3332      	adds	r3, #50	; 0x32
 8004a6c:	4a08      	ldr	r2, [pc, #32]	; (8004a90 <UART_SetConfig+0x570>)
 8004a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a72:	095b      	lsrs	r3, r3, #5
 8004a74:	f003 020f 	and.w	r2, r3, #15
 8004a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4422      	add	r2, r4
 8004a80:	609a      	str	r2, [r3, #8]
}
 8004a82:	bf00      	nop
 8004a84:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a8e:	bf00      	nop
 8004a90:	51eb851f 	.word	0x51eb851f

08004a94 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f103 0208 	add.w	r2, r3, #8
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8004aac:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f103 0208 	add.w	r2, r3, #8
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f103 0208 	add.w	r2, r3, #8
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ae2:	bf00      	nop
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8004aee:	b480      	push	{r7}
 8004af0:	b085      	sub	sp, #20
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
 8004af6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	601a      	str	r2, [r3, #0]
}
 8004b2a:	bf00      	nop
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004b36:	b480      	push	{r7}
 8004b38:	b085      	sub	sp, #20
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
 8004b3e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4c:	d103      	bne.n	8004b56 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	e00c      	b.n	8004b70 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	3308      	adds	r3, #8
 8004b5a:	60fb      	str	r3, [r7, #12]
 8004b5c:	e002      	b.n	8004b64 <vListInsert+0x2e>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	60fb      	str	r3, [r7, #12]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d2f6      	bcs.n	8004b5e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	683a      	ldr	r2, [r7, #0]
 8004b8a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	601a      	str	r2, [r3, #0]
}
 8004b9c:	bf00      	nop
 8004b9e:	3714      	adds	r7, #20
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	6892      	ldr	r2, [r2, #8]
 8004bbe:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	6852      	ldr	r2, [r2, #4]
 8004bc8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d103      	bne.n	8004bdc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	1e5a      	subs	r2, r3, #1
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3714      	adds	r7, #20
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10a      	bne.n	8004c26 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8004c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c14:	f383 8811 	msr	BASEPRI, r3
 8004c18:	f3bf 8f6f 	isb	sy
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8004c22:	bf00      	nop
 8004c24:	e7fe      	b.n	8004c24 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8004c26:	f002 fbcf 	bl	80073c8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c32:	68f9      	ldr	r1, [r7, #12]
 8004c34:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c36:	fb01 f303 	mul.w	r3, r1, r3
 8004c3a:	441a      	add	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c56:	3b01      	subs	r3, #1
 8004c58:	68f9      	ldr	r1, [r7, #12]
 8004c5a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c5c:	fb01 f303 	mul.w	r3, r1, r3
 8004c60:	441a      	add	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	22ff      	movs	r2, #255	; 0xff
 8004c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	22ff      	movs	r2, #255	; 0xff
 8004c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d114      	bne.n	8004ca6 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d01a      	beq.n	8004cba <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	3310      	adds	r3, #16
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f001 fb23 	bl	80062d4 <xTaskRemoveFromEventList>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d012      	beq.n	8004cba <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8004c94:	4b0c      	ldr	r3, [pc, #48]	; (8004cc8 <xQueueGenericReset+0xcc>)
 8004c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	f3bf 8f4f 	dsb	sy
 8004ca0:	f3bf 8f6f 	isb	sy
 8004ca4:	e009      	b.n	8004cba <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	3310      	adds	r3, #16
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7ff fef2 	bl	8004a94 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	3324      	adds	r3, #36	; 0x24
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7ff feed 	bl	8004a94 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8004cba:	f002 fbb5 	bl	8007428 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8004cbe:	2301      	movs	r3, #1
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	e000ed04 	.word	0xe000ed04

08004ccc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08c      	sub	sp, #48	; 0x30
 8004cd0:	af02      	add	r7, sp, #8
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10a      	bne.n	8004cf6 <xQueueGenericCreate+0x2a>
        __asm volatile
 8004ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce4:	f383 8811 	msr	BASEPRI, r3
 8004ce8:	f3bf 8f6f 	isb	sy
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	61bb      	str	r3, [r7, #24]
    }
 8004cf2:	bf00      	nop
 8004cf4:	e7fe      	b.n	8004cf4 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	fb02 f303 	mul.w	r3, r2, r3
 8004cfe:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d006      	beq.n	8004d14 <xQueueGenericCreate+0x48>
 8004d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d101      	bne.n	8004d18 <xQueueGenericCreate+0x4c>
 8004d14:	2301      	movs	r3, #1
 8004d16:	e000      	b.n	8004d1a <xQueueGenericCreate+0x4e>
 8004d18:	2300      	movs	r3, #0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10a      	bne.n	8004d34 <xQueueGenericCreate+0x68>
        __asm volatile
 8004d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d22:	f383 8811 	msr	BASEPRI, r3
 8004d26:	f3bf 8f6f 	isb	sy
 8004d2a:	f3bf 8f4f 	dsb	sy
 8004d2e:	617b      	str	r3, [r7, #20]
    }
 8004d30:	bf00      	nop
 8004d32:	e7fe      	b.n	8004d32 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d36:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8004d3a:	d90a      	bls.n	8004d52 <xQueueGenericCreate+0x86>
        __asm volatile
 8004d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d40:	f383 8811 	msr	BASEPRI, r3
 8004d44:	f3bf 8f6f 	isb	sy
 8004d48:	f3bf 8f4f 	dsb	sy
 8004d4c:	613b      	str	r3, [r7, #16]
    }
 8004d4e:	bf00      	nop
 8004d50:	e7fe      	b.n	8004d50 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	3350      	adds	r3, #80	; 0x50
 8004d56:	4618      	mov	r0, r3
 8004d58:	f002 fc60 	bl	800761c <pvPortMalloc>
 8004d5c:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8004d5e:	6a3b      	ldr	r3, [r7, #32]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00d      	beq.n	8004d80 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	3350      	adds	r3, #80	; 0x50
 8004d6c:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d6e:	79fa      	ldrb	r2, [r7, #7]
 8004d70:	6a3b      	ldr	r3, [r7, #32]
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	4613      	mov	r3, r2
 8004d76:	69fa      	ldr	r2, [r7, #28]
 8004d78:	68b9      	ldr	r1, [r7, #8]
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 f805 	bl	8004d8a <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004d80:	6a3b      	ldr	r3, [r7, #32]
    }
 8004d82:	4618      	mov	r0, r3
 8004d84:	3728      	adds	r7, #40	; 0x28
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b084      	sub	sp, #16
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	60f8      	str	r0, [r7, #12]
 8004d92:	60b9      	str	r1, [r7, #8]
 8004d94:	607a      	str	r2, [r7, #4]
 8004d96:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d103      	bne.n	8004da6 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	e002      	b.n	8004dac <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004db8:	2101      	movs	r1, #1
 8004dba:	69b8      	ldr	r0, [r7, #24]
 8004dbc:	f7ff ff1e 	bl	8004bfc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	78fa      	ldrb	r2, [r7, #3]
 8004dc4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8004dc8:	78fb      	ldrb	r3, [r7, #3]
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	68f9      	ldr	r1, [r7, #12]
 8004dce:	2073      	movs	r0, #115	; 0x73
 8004dd0:	f003 fc44 	bl	800865c <SEGGER_SYSVIEW_RecordU32x3>
}
 8004dd4:	bf00      	nop
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b090      	sub	sp, #64	; 0x40
 8004de0:	af02      	add	r7, sp, #8
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004dea:	2300      	movs	r3, #0
 8004dec:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8004df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10a      	bne.n	8004e0e <xQueueGenericSend+0x32>
        __asm volatile
 8004df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfc:	f383 8811 	msr	BASEPRI, r3
 8004e00:	f3bf 8f6f 	isb	sy
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004e0a:	bf00      	nop
 8004e0c:	e7fe      	b.n	8004e0c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d103      	bne.n	8004e1c <xQueueGenericSend+0x40>
 8004e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <xQueueGenericSend+0x44>
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e000      	b.n	8004e22 <xQueueGenericSend+0x46>
 8004e20:	2300      	movs	r3, #0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10a      	bne.n	8004e3c <xQueueGenericSend+0x60>
        __asm volatile
 8004e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2a:	f383 8811 	msr	BASEPRI, r3
 8004e2e:	f3bf 8f6f 	isb	sy
 8004e32:	f3bf 8f4f 	dsb	sy
 8004e36:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004e38:	bf00      	nop
 8004e3a:	e7fe      	b.n	8004e3a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d103      	bne.n	8004e4a <xQueueGenericSend+0x6e>
 8004e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d101      	bne.n	8004e4e <xQueueGenericSend+0x72>
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e000      	b.n	8004e50 <xQueueGenericSend+0x74>
 8004e4e:	2300      	movs	r3, #0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10a      	bne.n	8004e6a <xQueueGenericSend+0x8e>
        __asm volatile
 8004e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e58:	f383 8811 	msr	BASEPRI, r3
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	623b      	str	r3, [r7, #32]
    }
 8004e66:	bf00      	nop
 8004e68:	e7fe      	b.n	8004e68 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e6a:	f001 fbd3 	bl	8006614 <xTaskGetSchedulerState>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d102      	bne.n	8004e7a <xQueueGenericSend+0x9e>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <xQueueGenericSend+0xa2>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e000      	b.n	8004e80 <xQueueGenericSend+0xa4>
 8004e7e:	2300      	movs	r3, #0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d10a      	bne.n	8004e9a <xQueueGenericSend+0xbe>
        __asm volatile
 8004e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e88:	f383 8811 	msr	BASEPRI, r3
 8004e8c:	f3bf 8f6f 	isb	sy
 8004e90:	f3bf 8f4f 	dsb	sy
 8004e94:	61fb      	str	r3, [r7, #28]
    }
 8004e96:	bf00      	nop
 8004e98:	e7fe      	b.n	8004e98 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004e9a:	f002 fa95 	bl	80073c8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d302      	bcc.n	8004eb0 <xQueueGenericSend+0xd4>
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d136      	bne.n	8004f1e <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8004eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f004 f95e 	bl	8009174 <SEGGER_SYSVIEW_ShrinkId>
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	6879      	ldr	r1, [r7, #4]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	4601      	mov	r1, r0
 8004ec4:	205a      	movs	r0, #90	; 0x5a
 8004ec6:	f003 fc3f 	bl	8008748 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	68b9      	ldr	r1, [r7, #8]
 8004ece:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ed0:	f000 fc7c 	bl	80057cc <prvCopyDataToQueue>
 8004ed4:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d010      	beq.n	8004f00 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee0:	3324      	adds	r3, #36	; 0x24
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f001 f9f6 	bl	80062d4 <xTaskRemoveFromEventList>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d013      	beq.n	8004f16 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8004eee:	4b4d      	ldr	r3, [pc, #308]	; (8005024 <xQueueGenericSend+0x248>)
 8004ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ef4:	601a      	str	r2, [r3, #0]
 8004ef6:	f3bf 8f4f 	dsb	sy
 8004efa:	f3bf 8f6f 	isb	sy
 8004efe:	e00a      	b.n	8004f16 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8004f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d007      	beq.n	8004f16 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004f06:	4b47      	ldr	r3, [pc, #284]	; (8005024 <xQueueGenericSend+0x248>)
 8004f08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f0c:	601a      	str	r2, [r3, #0]
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004f16:	f002 fa87 	bl	8007428 <vPortExitCritical>
                return pdPASS;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e07d      	b.n	800501a <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d110      	bne.n	8004f46 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004f24:	f002 fa80 	bl	8007428 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8004f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f004 f922 	bl	8009174 <SEGGER_SYSVIEW_ShrinkId>
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	6879      	ldr	r1, [r7, #4]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	460b      	mov	r3, r1
 8004f3a:	4601      	mov	r1, r0
 8004f3c:	205a      	movs	r0, #90	; 0x5a
 8004f3e:	f003 fc03 	bl	8008748 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8004f42:	2300      	movs	r3, #0
 8004f44:	e069      	b.n	800501a <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d106      	bne.n	8004f5a <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004f4c:	f107 0314 	add.w	r3, r7, #20
 8004f50:	4618      	mov	r0, r3
 8004f52:	f001 fa25 	bl	80063a0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004f56:	2301      	movs	r3, #1
 8004f58:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004f5a:	f002 fa65 	bl	8007428 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004f5e:	f000 ff71 	bl	8005e44 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004f62:	f002 fa31 	bl	80073c8 <vPortEnterCritical>
 8004f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f6c:	b25b      	sxtb	r3, r3
 8004f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f72:	d103      	bne.n	8004f7c <xQueueGenericSend+0x1a0>
 8004f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f82:	b25b      	sxtb	r3, r3
 8004f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f88:	d103      	bne.n	8004f92 <xQueueGenericSend+0x1b6>
 8004f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f92:	f002 fa49 	bl	8007428 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f96:	1d3a      	adds	r2, r7, #4
 8004f98:	f107 0314 	add.w	r3, r7, #20
 8004f9c:	4611      	mov	r1, r2
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f001 fa14 	bl	80063cc <xTaskCheckForTimeOut>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d124      	bne.n	8004ff4 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004faa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fac:	f000 fd06 	bl	80059bc <prvIsQueueFull>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d018      	beq.n	8004fe8 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb8:	3310      	adds	r3, #16
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	4611      	mov	r1, r2
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f001 f936 	bl	8006230 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004fc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fc6:	f000 fc91 	bl	80058ec <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004fca:	f000 ff49 	bl	8005e60 <xTaskResumeAll>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f47f af62 	bne.w	8004e9a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8004fd6:	4b13      	ldr	r3, [pc, #76]	; (8005024 <xQueueGenericSend+0x248>)
 8004fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	f3bf 8f4f 	dsb	sy
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	e758      	b.n	8004e9a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004fe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fea:	f000 fc7f 	bl	80058ec <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004fee:	f000 ff37 	bl	8005e60 <xTaskResumeAll>
 8004ff2:	e752      	b.n	8004e9a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004ff4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ff6:	f000 fc79 	bl	80058ec <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004ffa:	f000 ff31 	bl	8005e60 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005000:	4618      	mov	r0, r3
 8005002:	f004 f8b7 	bl	8009174 <SEGGER_SYSVIEW_ShrinkId>
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	6879      	ldr	r1, [r7, #4]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	460b      	mov	r3, r1
 8005010:	4601      	mov	r1, r0
 8005012:	205a      	movs	r0, #90	; 0x5a
 8005014:	f003 fb98 	bl	8008748 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8005018:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800501a:	4618      	mov	r0, r3
 800501c:	3738      	adds	r7, #56	; 0x38
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	e000ed04 	.word	0xe000ed04

08005028 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b090      	sub	sp, #64	; 0x40
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
 8005034:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800503a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10a      	bne.n	8005056 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8005040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005044:	f383 8811 	msr	BASEPRI, r3
 8005048:	f3bf 8f6f 	isb	sy
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005052:	bf00      	nop
 8005054:	e7fe      	b.n	8005054 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d103      	bne.n	8005064 <xQueueGenericSendFromISR+0x3c>
 800505c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005060:	2b00      	cmp	r3, #0
 8005062:	d101      	bne.n	8005068 <xQueueGenericSendFromISR+0x40>
 8005064:	2301      	movs	r3, #1
 8005066:	e000      	b.n	800506a <xQueueGenericSendFromISR+0x42>
 8005068:	2300      	movs	r3, #0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10a      	bne.n	8005084 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800506e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005080:	bf00      	nop
 8005082:	e7fe      	b.n	8005082 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	2b02      	cmp	r3, #2
 8005088:	d103      	bne.n	8005092 <xQueueGenericSendFromISR+0x6a>
 800508a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800508e:	2b01      	cmp	r3, #1
 8005090:	d101      	bne.n	8005096 <xQueueGenericSendFromISR+0x6e>
 8005092:	2301      	movs	r3, #1
 8005094:	e000      	b.n	8005098 <xQueueGenericSendFromISR+0x70>
 8005096:	2300      	movs	r3, #0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10a      	bne.n	80050b2 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 800509c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a0:	f383 8811 	msr	BASEPRI, r3
 80050a4:	f3bf 8f6f 	isb	sy
 80050a8:	f3bf 8f4f 	dsb	sy
 80050ac:	623b      	str	r3, [r7, #32]
    }
 80050ae:	bf00      	nop
 80050b0:	e7fe      	b.n	80050b0 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80050b2:	f002 fa73 	bl	800759c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80050b6:	f3ef 8211 	mrs	r2, BASEPRI
 80050ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050be:	f383 8811 	msr	BASEPRI, r3
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	f3bf 8f4f 	dsb	sy
 80050ca:	61fa      	str	r2, [r7, #28]
 80050cc:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80050ce:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80050d0:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80050d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050da:	429a      	cmp	r2, r3
 80050dc:	d302      	bcc.n	80050e4 <xQueueGenericSendFromISR+0xbc>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d148      	bne.n	8005176 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80050e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f2:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80050f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f6:	4618      	mov	r0, r3
 80050f8:	f004 f83c 	bl	8009174 <SEGGER_SYSVIEW_ShrinkId>
 80050fc:	4601      	mov	r1, r0
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	461a      	mov	r2, r3
 8005102:	2060      	movs	r0, #96	; 0x60
 8005104:	f003 fa50 	bl	80085a8 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	68b9      	ldr	r1, [r7, #8]
 800510c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800510e:	f000 fb5d 	bl	80057cc <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8005112:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800511a:	d112      	bne.n	8005142 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800511c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005120:	2b00      	cmp	r3, #0
 8005122:	d025      	beq.n	8005170 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005126:	3324      	adds	r3, #36	; 0x24
 8005128:	4618      	mov	r0, r3
 800512a:	f001 f8d3 	bl	80062d4 <xTaskRemoveFromEventList>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d01d      	beq.n	8005170 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d01a      	beq.n	8005170 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	601a      	str	r2, [r3, #0]
 8005140:	e016      	b.n	8005170 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8005142:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005146:	2b7f      	cmp	r3, #127	; 0x7f
 8005148:	d10a      	bne.n	8005160 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 800514a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514e:	f383 8811 	msr	BASEPRI, r3
 8005152:	f3bf 8f6f 	isb	sy
 8005156:	f3bf 8f4f 	dsb	sy
 800515a:	617b      	str	r3, [r7, #20]
    }
 800515c:	bf00      	nop
 800515e:	e7fe      	b.n	800515e <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005160:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005164:	3301      	adds	r3, #1
 8005166:	b2db      	uxtb	r3, r3
 8005168:	b25a      	sxtb	r2, r3
 800516a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8005170:	2301      	movs	r3, #1
 8005172:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8005174:	e00b      	b.n	800518e <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8005176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005178:	4618      	mov	r0, r3
 800517a:	f003 fffb 	bl	8009174 <SEGGER_SYSVIEW_ShrinkId>
 800517e:	4601      	mov	r1, r0
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	461a      	mov	r2, r3
 8005184:	2060      	movs	r0, #96	; 0x60
 8005186:	f003 fa0f 	bl	80085a8 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800518a:	2300      	movs	r3, #0
 800518c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800518e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005190:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005198:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800519a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800519c:	4618      	mov	r0, r3
 800519e:	3740      	adds	r7, #64	; 0x40
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b08e      	sub	sp, #56	; 0x38
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	633b      	str	r3, [r7, #48]	; 0x30
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 80051b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d10a      	bne.n	80051ce <xQueueGiveFromISR+0x2a>
        __asm volatile
 80051b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051bc:	f383 8811 	msr	BASEPRI, r3
 80051c0:	f3bf 8f6f 	isb	sy
 80051c4:	f3bf 8f4f 	dsb	sy
 80051c8:	623b      	str	r3, [r7, #32]
    }
 80051ca:	bf00      	nop
 80051cc:	e7fe      	b.n	80051cc <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80051ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00a      	beq.n	80051ec <xQueueGiveFromISR+0x48>
        __asm volatile
 80051d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051da:	f383 8811 	msr	BASEPRI, r3
 80051de:	f3bf 8f6f 	isb	sy
 80051e2:	f3bf 8f4f 	dsb	sy
 80051e6:	61fb      	str	r3, [r7, #28]
    }
 80051e8:	bf00      	nop
 80051ea:	e7fe      	b.n	80051ea <xQueueGiveFromISR+0x46>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80051ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d103      	bne.n	80051fc <xQueueGiveFromISR+0x58>
 80051f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d101      	bne.n	8005200 <xQueueGiveFromISR+0x5c>
 80051fc:	2301      	movs	r3, #1
 80051fe:	e000      	b.n	8005202 <xQueueGiveFromISR+0x5e>
 8005200:	2300      	movs	r3, #0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10a      	bne.n	800521c <xQueueGiveFromISR+0x78>
        __asm volatile
 8005206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520a:	f383 8811 	msr	BASEPRI, r3
 800520e:	f3bf 8f6f 	isb	sy
 8005212:	f3bf 8f4f 	dsb	sy
 8005216:	61bb      	str	r3, [r7, #24]
    }
 8005218:	bf00      	nop
 800521a:	e7fe      	b.n	800521a <xQueueGiveFromISR+0x76>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800521c:	f002 f9be 	bl	800759c <vPortValidateInterruptPriority>
        __asm volatile
 8005220:	f3ef 8211 	mrs	r2, BASEPRI
 8005224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	617a      	str	r2, [r7, #20]
 8005236:	613b      	str	r3, [r7, #16]
        return ulOriginalBASEPRI;
 8005238:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800523a:	62fb      	str	r3, [r7, #44]	; 0x2c
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800523c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005240:	62bb      	str	r3, [r7, #40]	; 0x28

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8005242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005248:	429a      	cmp	r2, r3
 800524a:	d244      	bcs.n	80052d6 <xQueueGiveFromISR+0x132>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800524c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005252:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8005256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005258:	4618      	mov	r0, r3
 800525a:	f003 ff8b 	bl	8009174 <SEGGER_SYSVIEW_ShrinkId>
 800525e:	4601      	mov	r1, r0
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	461a      	mov	r2, r3
 8005264:	2060      	movs	r0, #96	; 0x60
 8005266:	f003 f99f 	bl	80085a8 <SEGGER_SYSVIEW_RecordU32x2>
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800526a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526c:	1c5a      	adds	r2, r3, #1
 800526e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005270:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8005272:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800527a:	d112      	bne.n	80052a2 <xQueueGiveFromISR+0xfe>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800527c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	2b00      	cmp	r3, #0
 8005282:	d025      	beq.n	80052d0 <xQueueGiveFromISR+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005286:	3324      	adds	r3, #36	; 0x24
 8005288:	4618      	mov	r0, r3
 800528a:	f001 f823 	bl	80062d4 <xTaskRemoveFromEventList>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d01d      	beq.n	80052d0 <xQueueGiveFromISR+0x12c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d01a      	beq.n	80052d0 <xQueueGiveFromISR+0x12c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	2201      	movs	r2, #1
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	e016      	b.n	80052d0 <xQueueGiveFromISR+0x12c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80052a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80052a6:	2b7f      	cmp	r3, #127	; 0x7f
 80052a8:	d10a      	bne.n	80052c0 <xQueueGiveFromISR+0x11c>
        __asm volatile
 80052aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ae:	f383 8811 	msr	BASEPRI, r3
 80052b2:	f3bf 8f6f 	isb	sy
 80052b6:	f3bf 8f4f 	dsb	sy
 80052ba:	60fb      	str	r3, [r7, #12]
    }
 80052bc:	bf00      	nop
 80052be:	e7fe      	b.n	80052be <xQueueGiveFromISR+0x11a>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80052c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052c4:	3301      	adds	r3, #1
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	b25a      	sxtb	r2, r3
 80052ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80052d0:	2301      	movs	r3, #1
 80052d2:	637b      	str	r3, [r7, #52]	; 0x34
 80052d4:	e00b      	b.n	80052ee <xQueueGiveFromISR+0x14a>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80052d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d8:	4618      	mov	r0, r3
 80052da:	f003 ff4b 	bl	8009174 <SEGGER_SYSVIEW_ShrinkId>
 80052de:	4601      	mov	r1, r0
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	461a      	mov	r2, r3
 80052e4:	2060      	movs	r0, #96	; 0x60
 80052e6:	f003 f95f 	bl	80085a8 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 80052ea:	2300      	movs	r3, #0
 80052ec:	637b      	str	r3, [r7, #52]	; 0x34
 80052ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f0:	60bb      	str	r3, [r7, #8]
        __asm volatile
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	f383 8811 	msr	BASEPRI, r3
    }
 80052f8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80052fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3738      	adds	r7, #56	; 0x38
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005304:	b590      	push	{r4, r7, lr}
 8005306:	b08f      	sub	sp, #60	; 0x3c
 8005308:	af02      	add	r7, sp, #8
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005310:	2300      	movs	r3, #0
 8005312:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10a      	bne.n	8005334 <xQueueReceive+0x30>
        __asm volatile
 800531e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005322:	f383 8811 	msr	BASEPRI, r3
 8005326:	f3bf 8f6f 	isb	sy
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	623b      	str	r3, [r7, #32]
    }
 8005330:	bf00      	nop
 8005332:	e7fe      	b.n	8005332 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d103      	bne.n	8005342 <xQueueReceive+0x3e>
 800533a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <xQueueReceive+0x42>
 8005342:	2301      	movs	r3, #1
 8005344:	e000      	b.n	8005348 <xQueueReceive+0x44>
 8005346:	2300      	movs	r3, #0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10a      	bne.n	8005362 <xQueueReceive+0x5e>
        __asm volatile
 800534c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005350:	f383 8811 	msr	BASEPRI, r3
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	61fb      	str	r3, [r7, #28]
    }
 800535e:	bf00      	nop
 8005360:	e7fe      	b.n	8005360 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005362:	f001 f957 	bl	8006614 <xTaskGetSchedulerState>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d102      	bne.n	8005372 <xQueueReceive+0x6e>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <xQueueReceive+0x72>
 8005372:	2301      	movs	r3, #1
 8005374:	e000      	b.n	8005378 <xQueueReceive+0x74>
 8005376:	2300      	movs	r3, #0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10a      	bne.n	8005392 <xQueueReceive+0x8e>
        __asm volatile
 800537c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005380:	f383 8811 	msr	BASEPRI, r3
 8005384:	f3bf 8f6f 	isb	sy
 8005388:	f3bf 8f4f 	dsb	sy
 800538c:	61bb      	str	r3, [r7, #24]
    }
 800538e:	bf00      	nop
 8005390:	e7fe      	b.n	8005390 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005392:	f002 f819 	bl	80073c8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d02f      	beq.n	8005402 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80053a2:	68b9      	ldr	r1, [r7, #8]
 80053a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053a6:	f000 fa7b 	bl	80058a0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80053aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ac:	4618      	mov	r0, r3
 80053ae:	f003 fee1 	bl	8009174 <SEGGER_SYSVIEW_ShrinkId>
 80053b2:	4604      	mov	r4, r0
 80053b4:	2000      	movs	r0, #0
 80053b6:	f003 fedd 	bl	8009174 <SEGGER_SYSVIEW_ShrinkId>
 80053ba:	4602      	mov	r2, r0
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2101      	movs	r1, #1
 80053c0:	9100      	str	r1, [sp, #0]
 80053c2:	4621      	mov	r1, r4
 80053c4:	205c      	movs	r0, #92	; 0x5c
 80053c6:	f003 f9bf 	bl	8008748 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	1e5a      	subs	r2, r3, #1
 80053ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00f      	beq.n	80053fa <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053dc:	3310      	adds	r3, #16
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 ff78 	bl	80062d4 <xTaskRemoveFromEventList>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d007      	beq.n	80053fa <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80053ea:	4b4d      	ldr	r3, [pc, #308]	; (8005520 <xQueueReceive+0x21c>)
 80053ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	f3bf 8f4f 	dsb	sy
 80053f6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80053fa:	f002 f815 	bl	8007428 <vPortExitCritical>
                return pdPASS;
 80053fe:	2301      	movs	r3, #1
 8005400:	e08a      	b.n	8005518 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d113      	bne.n	8005430 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005408:	f002 f80e 	bl	8007428 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800540c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540e:	4618      	mov	r0, r3
 8005410:	f003 feb0 	bl	8009174 <SEGGER_SYSVIEW_ShrinkId>
 8005414:	4604      	mov	r4, r0
 8005416:	2000      	movs	r0, #0
 8005418:	f003 feac 	bl	8009174 <SEGGER_SYSVIEW_ShrinkId>
 800541c:	4602      	mov	r2, r0
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2101      	movs	r1, #1
 8005422:	9100      	str	r1, [sp, #0]
 8005424:	4621      	mov	r1, r4
 8005426:	205c      	movs	r0, #92	; 0x5c
 8005428:	f003 f98e 	bl	8008748 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800542c:	2300      	movs	r3, #0
 800542e:	e073      	b.n	8005518 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005432:	2b00      	cmp	r3, #0
 8005434:	d106      	bne.n	8005444 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005436:	f107 0310 	add.w	r3, r7, #16
 800543a:	4618      	mov	r0, r3
 800543c:	f000 ffb0 	bl	80063a0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005440:	2301      	movs	r3, #1
 8005442:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005444:	f001 fff0 	bl	8007428 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005448:	f000 fcfc 	bl	8005e44 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800544c:	f001 ffbc 	bl	80073c8 <vPortEnterCritical>
 8005450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005452:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005456:	b25b      	sxtb	r3, r3
 8005458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545c:	d103      	bne.n	8005466 <xQueueReceive+0x162>
 800545e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005468:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800546c:	b25b      	sxtb	r3, r3
 800546e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005472:	d103      	bne.n	800547c <xQueueReceive+0x178>
 8005474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800547c:	f001 ffd4 	bl	8007428 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005480:	1d3a      	adds	r2, r7, #4
 8005482:	f107 0310 	add.w	r3, r7, #16
 8005486:	4611      	mov	r1, r2
 8005488:	4618      	mov	r0, r3
 800548a:	f000 ff9f 	bl	80063cc <xTaskCheckForTimeOut>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d124      	bne.n	80054de <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005494:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005496:	f000 fa7b 	bl	8005990 <prvIsQueueEmpty>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d018      	beq.n	80054d2 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80054a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a2:	3324      	adds	r3, #36	; 0x24
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	4611      	mov	r1, r2
 80054a8:	4618      	mov	r0, r3
 80054aa:	f000 fec1 	bl	8006230 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80054ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054b0:	f000 fa1c 	bl	80058ec <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80054b4:	f000 fcd4 	bl	8005e60 <xTaskResumeAll>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f47f af69 	bne.w	8005392 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80054c0:	4b17      	ldr	r3, [pc, #92]	; (8005520 <xQueueReceive+0x21c>)
 80054c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054c6:	601a      	str	r2, [r3, #0]
 80054c8:	f3bf 8f4f 	dsb	sy
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	e75f      	b.n	8005392 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80054d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054d4:	f000 fa0a 	bl	80058ec <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80054d8:	f000 fcc2 	bl	8005e60 <xTaskResumeAll>
 80054dc:	e759      	b.n	8005392 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80054de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054e0:	f000 fa04 	bl	80058ec <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80054e4:	f000 fcbc 	bl	8005e60 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054ea:	f000 fa51 	bl	8005990 <prvIsQueueEmpty>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f43f af4e 	beq.w	8005392 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80054f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f8:	4618      	mov	r0, r3
 80054fa:	f003 fe3b 	bl	8009174 <SEGGER_SYSVIEW_ShrinkId>
 80054fe:	4604      	mov	r4, r0
 8005500:	2000      	movs	r0, #0
 8005502:	f003 fe37 	bl	8009174 <SEGGER_SYSVIEW_ShrinkId>
 8005506:	4602      	mov	r2, r0
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2101      	movs	r1, #1
 800550c:	9100      	str	r1, [sp, #0]
 800550e:	4621      	mov	r1, r4
 8005510:	205c      	movs	r0, #92	; 0x5c
 8005512:	f003 f919 	bl	8008748 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8005516:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005518:	4618      	mov	r0, r3
 800551a:	3734      	adds	r7, #52	; 0x34
 800551c:	46bd      	mov	sp, r7
 800551e:	bd90      	pop	{r4, r7, pc}
 8005520:	e000ed04 	.word	0xe000ed04

08005524 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8005524:	b590      	push	{r4, r7, lr}
 8005526:	b091      	sub	sp, #68	; 0x44
 8005528:	af02      	add	r7, sp, #8
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800552e:	2300      	movs	r3, #0
 8005530:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8005536:	2300      	movs	r3, #0
 8005538:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800553a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10a      	bne.n	8005556 <xQueueSemaphoreTake+0x32>
        __asm volatile
 8005540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005544:	f383 8811 	msr	BASEPRI, r3
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	623b      	str	r3, [r7, #32]
    }
 8005552:	bf00      	nop
 8005554:	e7fe      	b.n	8005554 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8005556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00a      	beq.n	8005574 <xQueueSemaphoreTake+0x50>
        __asm volatile
 800555e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005562:	f383 8811 	msr	BASEPRI, r3
 8005566:	f3bf 8f6f 	isb	sy
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	61fb      	str	r3, [r7, #28]
    }
 8005570:	bf00      	nop
 8005572:	e7fe      	b.n	8005572 <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005574:	f001 f84e 	bl	8006614 <xTaskGetSchedulerState>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d102      	bne.n	8005584 <xQueueSemaphoreTake+0x60>
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <xQueueSemaphoreTake+0x64>
 8005584:	2301      	movs	r3, #1
 8005586:	e000      	b.n	800558a <xQueueSemaphoreTake+0x66>
 8005588:	2300      	movs	r3, #0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10a      	bne.n	80055a4 <xQueueSemaphoreTake+0x80>
        __asm volatile
 800558e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	61bb      	str	r3, [r7, #24]
    }
 80055a0:	bf00      	nop
 80055a2:	e7fe      	b.n	80055a2 <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80055a4:	f001 ff10 	bl	80073c8 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80055a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ac:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80055ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d034      	beq.n	800561e <xQueueSemaphoreTake+0xfa>
            {
                traceQUEUE_RECEIVE( pxQueue );
 80055b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b6:	4618      	mov	r0, r3
 80055b8:	f003 fddc 	bl	8009174 <SEGGER_SYSVIEW_ShrinkId>
 80055bc:	4604      	mov	r4, r0
 80055be:	2000      	movs	r0, #0
 80055c0:	f003 fdd8 	bl	8009174 <SEGGER_SYSVIEW_ShrinkId>
 80055c4:	4602      	mov	r2, r0
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2101      	movs	r1, #1
 80055ca:	9100      	str	r1, [sp, #0]
 80055cc:	4621      	mov	r1, r4
 80055ce:	205c      	movs	r0, #92	; 0x5c
 80055d0:	f003 f8ba 	bl	8008748 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80055d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d6:	1e5a      	subs	r2, r3, #1
 80055d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055da:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80055dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d104      	bne.n	80055ee <xQueueSemaphoreTake+0xca>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80055e4:	f001 f9c6 	bl	8006974 <pvTaskIncrementMutexHeldCount>
 80055e8:	4602      	mov	r2, r0
 80055ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ec:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00f      	beq.n	8005616 <xQueueSemaphoreTake+0xf2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f8:	3310      	adds	r3, #16
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 fe6a 	bl	80062d4 <xTaskRemoveFromEventList>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d007      	beq.n	8005616 <xQueueSemaphoreTake+0xf2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005606:	4b64      	ldr	r3, [pc, #400]	; (8005798 <xQueueSemaphoreTake+0x274>)
 8005608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	f3bf 8f4f 	dsb	sy
 8005612:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005616:	f001 ff07 	bl	8007428 <vPortExitCritical>
                return pdPASS;
 800561a:	2301      	movs	r3, #1
 800561c:	e0b7      	b.n	800578e <xQueueSemaphoreTake+0x26a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d121      	bne.n	8005668 <xQueueSemaphoreTake+0x144>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8005624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00a      	beq.n	8005640 <xQueueSemaphoreTake+0x11c>
        __asm volatile
 800562a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562e:	f383 8811 	msr	BASEPRI, r3
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	617b      	str	r3, [r7, #20]
    }
 800563c:	bf00      	nop
 800563e:	e7fe      	b.n	800563e <xQueueSemaphoreTake+0x11a>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8005640:	f001 fef2 	bl	8007428 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8005644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005646:	4618      	mov	r0, r3
 8005648:	f003 fd94 	bl	8009174 <SEGGER_SYSVIEW_ShrinkId>
 800564c:	4604      	mov	r4, r0
 800564e:	2000      	movs	r0, #0
 8005650:	f003 fd90 	bl	8009174 <SEGGER_SYSVIEW_ShrinkId>
 8005654:	4602      	mov	r2, r0
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2101      	movs	r1, #1
 800565a:	9100      	str	r1, [sp, #0]
 800565c:	4621      	mov	r1, r4
 800565e:	205c      	movs	r0, #92	; 0x5c
 8005660:	f003 f872 	bl	8008748 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8005664:	2300      	movs	r3, #0
 8005666:	e092      	b.n	800578e <xQueueSemaphoreTake+0x26a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566a:	2b00      	cmp	r3, #0
 800566c:	d106      	bne.n	800567c <xQueueSemaphoreTake+0x158>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800566e:	f107 030c 	add.w	r3, r7, #12
 8005672:	4618      	mov	r0, r3
 8005674:	f000 fe94 	bl	80063a0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005678:	2301      	movs	r3, #1
 800567a:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800567c:	f001 fed4 	bl	8007428 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005680:	f000 fbe0 	bl	8005e44 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005684:	f001 fea0 	bl	80073c8 <vPortEnterCritical>
 8005688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800568e:	b25b      	sxtb	r3, r3
 8005690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005694:	d103      	bne.n	800569e <xQueueSemaphoreTake+0x17a>
 8005696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800569e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056a4:	b25b      	sxtb	r3, r3
 80056a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056aa:	d103      	bne.n	80056b4 <xQueueSemaphoreTake+0x190>
 80056ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056b4:	f001 feb8 	bl	8007428 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056b8:	463a      	mov	r2, r7
 80056ba:	f107 030c 	add.w	r3, r7, #12
 80056be:	4611      	mov	r1, r2
 80056c0:	4618      	mov	r0, r3
 80056c2:	f000 fe83 	bl	80063cc <xTaskCheckForTimeOut>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d132      	bne.n	8005732 <xQueueSemaphoreTake+0x20e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056ce:	f000 f95f 	bl	8005990 <prvIsQueueEmpty>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d026      	beq.n	8005726 <xQueueSemaphoreTake+0x202>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d109      	bne.n	80056f4 <xQueueSemaphoreTake+0x1d0>
                        {
                            taskENTER_CRITICAL();
 80056e0:	f001 fe72 	bl	80073c8 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80056e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	4618      	mov	r0, r3
 80056ea:	f000 ffb1 	bl	8006650 <xTaskPriorityInherit>
 80056ee:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 80056f0:	f001 fe9a 	bl	8007428 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80056f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f6:	3324      	adds	r3, #36	; 0x24
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	4611      	mov	r1, r2
 80056fc:	4618      	mov	r0, r3
 80056fe:	f000 fd97 	bl	8006230 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8005702:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005704:	f000 f8f2 	bl	80058ec <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005708:	f000 fbaa 	bl	8005e60 <xTaskResumeAll>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	f47f af48 	bne.w	80055a4 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8005714:	4b20      	ldr	r3, [pc, #128]	; (8005798 <xQueueSemaphoreTake+0x274>)
 8005716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	f3bf 8f4f 	dsb	sy
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	e73e      	b.n	80055a4 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8005726:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005728:	f000 f8e0 	bl	80058ec <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800572c:	f000 fb98 	bl	8005e60 <xTaskResumeAll>
 8005730:	e738      	b.n	80055a4 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8005732:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005734:	f000 f8da 	bl	80058ec <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005738:	f000 fb92 	bl	8005e60 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800573c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800573e:	f000 f927 	bl	8005990 <prvIsQueueEmpty>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	f43f af2d 	beq.w	80055a4 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 800574a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00d      	beq.n	800576c <xQueueSemaphoreTake+0x248>
                        {
                            taskENTER_CRITICAL();
 8005750:	f001 fe3a 	bl	80073c8 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005754:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005756:	f000 f821 	bl	800579c <prvGetDisinheritPriorityAfterTimeout>
 800575a:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800575c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005762:	4618      	mov	r0, r3
 8005764:	f001 f86e 	bl	8006844 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8005768:	f001 fe5e 	bl	8007428 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800576c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576e:	4618      	mov	r0, r3
 8005770:	f003 fd00 	bl	8009174 <SEGGER_SYSVIEW_ShrinkId>
 8005774:	4604      	mov	r4, r0
 8005776:	2000      	movs	r0, #0
 8005778:	f003 fcfc 	bl	8009174 <SEGGER_SYSVIEW_ShrinkId>
 800577c:	4602      	mov	r2, r0
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	2101      	movs	r1, #1
 8005782:	9100      	str	r1, [sp, #0]
 8005784:	4621      	mov	r1, r4
 8005786:	205c      	movs	r0, #92	; 0x5c
 8005788:	f002 ffde 	bl	8008748 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800578c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800578e:	4618      	mov	r0, r3
 8005790:	373c      	adds	r7, #60	; 0x3c
 8005792:	46bd      	mov	sp, r7
 8005794:	bd90      	pop	{r4, r7, pc}
 8005796:	bf00      	nop
 8005798:	e000ed04 	.word	0xe000ed04

0800579c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d006      	beq.n	80057ba <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f1c3 0305 	rsb	r3, r3, #5
 80057b6:	60fb      	str	r3, [r7, #12]
 80057b8:	e001      	b.n	80057be <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80057ba:	2300      	movs	r3, #0
 80057bc:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80057be:	68fb      	ldr	r3, [r7, #12]
    }
 80057c0:	4618      	mov	r0, r3
 80057c2:	3714      	adds	r7, #20
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80057d8:	2300      	movs	r3, #0
 80057da:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10d      	bne.n	8005806 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d14d      	bne.n	800588e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 ffa4 	bl	8006744 <xTaskPriorityDisinherit>
 80057fc:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	609a      	str	r2, [r3, #8]
 8005804:	e043      	b.n	800588e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d119      	bne.n	8005840 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6858      	ldr	r0, [r3, #4]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005814:	461a      	mov	r2, r3
 8005816:	68b9      	ldr	r1, [r7, #8]
 8005818:	f003 ffd2 	bl	80097c0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005824:	441a      	add	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	429a      	cmp	r2, r3
 8005834:	d32b      	bcc.n	800588e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	605a      	str	r2, [r3, #4]
 800583e:	e026      	b.n	800588e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	68d8      	ldr	r0, [r3, #12]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005848:	461a      	mov	r2, r3
 800584a:	68b9      	ldr	r1, [r7, #8]
 800584c:	f003 ffb8 	bl	80097c0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	68da      	ldr	r2, [r3, #12]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005858:	425b      	negs	r3, r3
 800585a:	441a      	add	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	68da      	ldr	r2, [r3, #12]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	429a      	cmp	r2, r3
 800586a:	d207      	bcs.n	800587c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	689a      	ldr	r2, [r3, #8]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005874:	425b      	negs	r3, r3
 8005876:	441a      	add	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b02      	cmp	r3, #2
 8005880:	d105      	bne.n	800588e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d002      	beq.n	800588e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	3b01      	subs	r3, #1
 800588c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	1c5a      	adds	r2, r3, #1
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8005896:	697b      	ldr	r3, [r7, #20]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3718      	adds	r7, #24
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d018      	beq.n	80058e4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68da      	ldr	r2, [r3, #12]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ba:	441a      	add	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	68da      	ldr	r2, [r3, #12]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d303      	bcc.n	80058d4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68d9      	ldr	r1, [r3, #12]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058dc:	461a      	mov	r2, r3
 80058de:	6838      	ldr	r0, [r7, #0]
 80058e0:	f003 ff6e 	bl	80097c0 <memcpy>
    }
}
 80058e4:	bf00      	nop
 80058e6:	3708      	adds	r7, #8
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80058f4:	f001 fd68 	bl	80073c8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058fe:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005900:	e011      	b.n	8005926 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005906:	2b00      	cmp	r3, #0
 8005908:	d012      	beq.n	8005930 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	3324      	adds	r3, #36	; 0x24
 800590e:	4618      	mov	r0, r3
 8005910:	f000 fce0 	bl	80062d4 <xTaskRemoveFromEventList>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d001      	beq.n	800591e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800591a:	f000 fdbd 	bl	8006498 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800591e:	7bfb      	ldrb	r3, [r7, #15]
 8005920:	3b01      	subs	r3, #1
 8005922:	b2db      	uxtb	r3, r3
 8005924:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800592a:	2b00      	cmp	r3, #0
 800592c:	dce9      	bgt.n	8005902 <prvUnlockQueue+0x16>
 800592e:	e000      	b.n	8005932 <prvUnlockQueue+0x46>
                        break;
 8005930:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	22ff      	movs	r2, #255	; 0xff
 8005936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800593a:	f001 fd75 	bl	8007428 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800593e:	f001 fd43 	bl	80073c8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005948:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800594a:	e011      	b.n	8005970 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d012      	beq.n	800597a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	3310      	adds	r3, #16
 8005958:	4618      	mov	r0, r3
 800595a:	f000 fcbb 	bl	80062d4 <xTaskRemoveFromEventList>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d001      	beq.n	8005968 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8005964:	f000 fd98 	bl	8006498 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8005968:	7bbb      	ldrb	r3, [r7, #14]
 800596a:	3b01      	subs	r3, #1
 800596c:	b2db      	uxtb	r3, r3
 800596e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005970:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005974:	2b00      	cmp	r3, #0
 8005976:	dce9      	bgt.n	800594c <prvUnlockQueue+0x60>
 8005978:	e000      	b.n	800597c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800597a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	22ff      	movs	r2, #255	; 0xff
 8005980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8005984:	f001 fd50 	bl	8007428 <vPortExitCritical>
}
 8005988:	bf00      	nop
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005998:	f001 fd16 	bl	80073c8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d102      	bne.n	80059aa <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80059a4:	2301      	movs	r3, #1
 80059a6:	60fb      	str	r3, [r7, #12]
 80059a8:	e001      	b.n	80059ae <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80059aa:	2300      	movs	r3, #0
 80059ac:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80059ae:	f001 fd3b 	bl	8007428 <vPortExitCritical>

    return xReturn;
 80059b2:	68fb      	ldr	r3, [r7, #12]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80059c4:	f001 fd00 	bl	80073c8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d102      	bne.n	80059da <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80059d4:	2301      	movs	r3, #1
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	e001      	b.n	80059de <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80059da:	2300      	movs	r3, #0
 80059dc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80059de:	f001 fd23 	bl	8007428 <vPortExitCritical>

    return xReturn;
 80059e2:	68fb      	ldr	r3, [r7, #12]
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059f6:	2300      	movs	r3, #0
 80059f8:	60fb      	str	r3, [r7, #12]
 80059fa:	e01e      	b.n	8005a3a <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80059fc:	4a13      	ldr	r2, [pc, #76]	; (8005a4c <vQueueAddToRegistry+0x60>)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d115      	bne.n	8005a34 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005a08:	4910      	ldr	r1, [pc, #64]	; (8005a4c <vQueueAddToRegistry+0x60>)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	683a      	ldr	r2, [r7, #0]
 8005a0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8005a12:	4a0e      	ldr	r2, [pc, #56]	; (8005a4c <vQueueAddToRegistry+0x60>)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	00db      	lsls	r3, r3, #3
 8005a18:	4413      	add	r3, r2
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f003 fba7 	bl	8009174 <SEGGER_SYSVIEW_ShrinkId>
 8005a26:	4601      	mov	r1, r0
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	2071      	movs	r0, #113	; 0x71
 8005a2e:	f002 fdbb 	bl	80085a8 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8005a32:	e006      	b.n	8005a42 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	3301      	adds	r3, #1
 8005a38:	60fb      	str	r3, [r7, #12]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2b07      	cmp	r3, #7
 8005a3e:	d9dd      	bls.n	80059fc <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8005a40:	bf00      	nop
 8005a42:	bf00      	nop
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	20000190 	.word	0x20000190

08005a50 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8005a60:	f001 fcb2 	bl	80073c8 <vPortEnterCritical>
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a6a:	b25b      	sxtb	r3, r3
 8005a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a70:	d103      	bne.n	8005a7a <vQueueWaitForMessageRestricted+0x2a>
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a80:	b25b      	sxtb	r3, r3
 8005a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a86:	d103      	bne.n	8005a90 <vQueueWaitForMessageRestricted+0x40>
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a90:	f001 fcca 	bl	8007428 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d106      	bne.n	8005aaa <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	3324      	adds	r3, #36	; 0x24
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	68b9      	ldr	r1, [r7, #8]
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f000 fbe7 	bl	8006278 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8005aaa:	6978      	ldr	r0, [r7, #20]
 8005aac:	f7ff ff1e 	bl	80058ec <prvUnlockQueue>
    }
 8005ab0:	bf00      	nop
 8005ab2:	3718      	adds	r7, #24
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b08c      	sub	sp, #48	; 0x30
 8005abc:	af04      	add	r7, sp, #16
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	603b      	str	r3, [r7, #0]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ac8:	88fb      	ldrh	r3, [r7, #6]
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4618      	mov	r0, r3
 8005ace:	f001 fda5 	bl	800761c <pvPortMalloc>
 8005ad2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00e      	beq.n	8005af8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005ada:	2058      	movs	r0, #88	; 0x58
 8005adc:	f001 fd9e 	bl	800761c <pvPortMalloc>
 8005ae0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d003      	beq.n	8005af0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	631a      	str	r2, [r3, #48]	; 0x30
 8005aee:	e005      	b.n	8005afc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8005af0:	6978      	ldr	r0, [r7, #20]
 8005af2:	f001 fe73 	bl	80077dc <vPortFree>
 8005af6:	e001      	b.n	8005afc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8005af8:	2300      	movs	r3, #0
 8005afa:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d013      	beq.n	8005b2a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005b02:	88fa      	ldrh	r2, [r7, #6]
 8005b04:	2300      	movs	r3, #0
 8005b06:	9303      	str	r3, [sp, #12]
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	9302      	str	r3, [sp, #8]
 8005b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0e:	9301      	str	r3, [sp, #4]
 8005b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	68b9      	ldr	r1, [r7, #8]
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f000 f80e 	bl	8005b3a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005b1e:	69f8      	ldr	r0, [r7, #28]
 8005b20:	f000 f8a2 	bl	8005c68 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005b24:	2301      	movs	r3, #1
 8005b26:	61bb      	str	r3, [r7, #24]
 8005b28:	e002      	b.n	8005b30 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b2e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005b30:	69bb      	ldr	r3, [r7, #24]
    }
 8005b32:	4618      	mov	r0, r3
 8005b34:	3720      	adds	r7, #32
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b088      	sub	sp, #32
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	60f8      	str	r0, [r7, #12]
 8005b42:	60b9      	str	r1, [r7, #8]
 8005b44:	607a      	str	r2, [r7, #4]
 8005b46:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	461a      	mov	r2, r3
 8005b52:	21a5      	movs	r1, #165	; 0xa5
 8005b54:	f003 fe42 	bl	80097dc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005b62:	3b01      	subs	r3, #1
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4413      	add	r3, r2
 8005b68:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	f023 0307 	bic.w	r3, r3, #7
 8005b70:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	f003 0307 	and.w	r3, r3, #7
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00a      	beq.n	8005b92 <prvInitialiseNewTask+0x58>
        __asm volatile
 8005b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	617b      	str	r3, [r7, #20]
    }
 8005b8e:	bf00      	nop
 8005b90:	e7fe      	b.n	8005b90 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d01f      	beq.n	8005bd8 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b98:	2300      	movs	r3, #0
 8005b9a:	61fb      	str	r3, [r7, #28]
 8005b9c:	e012      	b.n	8005bc4 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	7819      	ldrb	r1, [r3, #0]
 8005ba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	4413      	add	r3, r2
 8005bac:	3334      	adds	r3, #52	; 0x34
 8005bae:	460a      	mov	r2, r1
 8005bb0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d006      	beq.n	8005bcc <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	61fb      	str	r3, [r7, #28]
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	2b09      	cmp	r3, #9
 8005bc8:	d9e9      	bls.n	8005b9e <prvInitialiseNewTask+0x64>
 8005bca:	e000      	b.n	8005bce <prvInitialiseNewTask+0x94>
            {
                break;
 8005bcc:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005bd6:	e003      	b.n	8005be0 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be2:	2b04      	cmp	r3, #4
 8005be4:	d901      	bls.n	8005bea <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005be6:	2304      	movs	r3, #4
 8005be8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bee:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8005bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bf4:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8005bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfe:	3304      	adds	r3, #4
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7fe ff67 	bl	8004ad4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c08:	3318      	adds	r3, #24
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7fe ff62 	bl	8004ad4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c14:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c18:	f1c3 0205 	rsb	r2, r3, #5
 8005c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c24:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8005c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c28:	3350      	adds	r3, #80	; 0x50
 8005c2a:	2204      	movs	r2, #4
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f003 fdd4 	bl	80097dc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8005c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c36:	3354      	adds	r3, #84	; 0x54
 8005c38:	2201      	movs	r2, #1
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f003 fdcd 	bl	80097dc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	68f9      	ldr	r1, [r7, #12]
 8005c46:	69b8      	ldr	r0, [r7, #24]
 8005c48:	f001 fa8e 	bl	8007168 <pxPortInitialiseStack>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c50:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8005c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d002      	beq.n	8005c5e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c5c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005c5e:	bf00      	nop
 8005c60:	3720      	adds	r7, #32
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
	...

08005c68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005c68:	b5b0      	push	{r4, r5, r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af02      	add	r7, sp, #8
 8005c6e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005c70:	f001 fbaa 	bl	80073c8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8005c74:	4b3b      	ldr	r3, [pc, #236]	; (8005d64 <prvAddNewTaskToReadyList+0xfc>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	4a3a      	ldr	r2, [pc, #232]	; (8005d64 <prvAddNewTaskToReadyList+0xfc>)
 8005c7c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8005c7e:	4b3a      	ldr	r3, [pc, #232]	; (8005d68 <prvAddNewTaskToReadyList+0x100>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d109      	bne.n	8005c9a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8005c86:	4a38      	ldr	r2, [pc, #224]	; (8005d68 <prvAddNewTaskToReadyList+0x100>)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c8c:	4b35      	ldr	r3, [pc, #212]	; (8005d64 <prvAddNewTaskToReadyList+0xfc>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d110      	bne.n	8005cb6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005c94:	f000 fc24 	bl	80064e0 <prvInitialiseTaskLists>
 8005c98:	e00d      	b.n	8005cb6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8005c9a:	4b34      	ldr	r3, [pc, #208]	; (8005d6c <prvAddNewTaskToReadyList+0x104>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d109      	bne.n	8005cb6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ca2:	4b31      	ldr	r3, [pc, #196]	; (8005d68 <prvAddNewTaskToReadyList+0x100>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d802      	bhi.n	8005cb6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005cb0:	4a2d      	ldr	r2, [pc, #180]	; (8005d68 <prvAddNewTaskToReadyList+0x100>)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8005cb6:	4b2e      	ldr	r3, [pc, #184]	; (8005d70 <prvAddNewTaskToReadyList+0x108>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	3301      	adds	r3, #1
 8005cbc:	4a2c      	ldr	r2, [pc, #176]	; (8005d70 <prvAddNewTaskToReadyList+0x108>)
 8005cbe:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005cc0:	4b2b      	ldr	r3, [pc, #172]	; (8005d70 <prvAddNewTaskToReadyList+0x108>)
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d016      	beq.n	8005cfc <prvAddNewTaskToReadyList+0x94>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f003 f929 	bl	8008f28 <SEGGER_SYSVIEW_OnTaskCreate>
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce6:	461d      	mov	r5, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	461c      	mov	r4, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf2:	1ae3      	subs	r3, r4, r3
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	462b      	mov	r3, r5
 8005cf8:	f003 fca4 	bl	8009644 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f003 f996 	bl	8009030 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d08:	2201      	movs	r2, #1
 8005d0a:	409a      	lsls	r2, r3
 8005d0c:	4b19      	ldr	r3, [pc, #100]	; (8005d74 <prvAddNewTaskToReadyList+0x10c>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	4a18      	ldr	r2, [pc, #96]	; (8005d74 <prvAddNewTaskToReadyList+0x10c>)
 8005d14:	6013      	str	r3, [r2, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	4413      	add	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4a15      	ldr	r2, [pc, #84]	; (8005d78 <prvAddNewTaskToReadyList+0x110>)
 8005d24:	441a      	add	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	3304      	adds	r3, #4
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	4610      	mov	r0, r2
 8005d2e:	f7fe fede 	bl	8004aee <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8005d32:	f001 fb79 	bl	8007428 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8005d36:	4b0d      	ldr	r3, [pc, #52]	; (8005d6c <prvAddNewTaskToReadyList+0x104>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00e      	beq.n	8005d5c <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005d3e:	4b0a      	ldr	r3, [pc, #40]	; (8005d68 <prvAddNewTaskToReadyList+0x100>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d207      	bcs.n	8005d5c <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005d4c:	4b0b      	ldr	r3, [pc, #44]	; (8005d7c <prvAddNewTaskToReadyList+0x114>)
 8005d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	f3bf 8f4f 	dsb	sy
 8005d58:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005d5c:	bf00      	nop
 8005d5e:	3708      	adds	r7, #8
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bdb0      	pop	{r4, r5, r7, pc}
 8005d64:	200002a8 	.word	0x200002a8
 8005d68:	200001d0 	.word	0x200001d0
 8005d6c:	200002b4 	.word	0x200002b4
 8005d70:	200002c4 	.word	0x200002c4
 8005d74:	200002b0 	.word	0x200002b0
 8005d78:	200001d4 	.word	0x200001d4
 8005d7c:	e000ed04 	.word	0xe000ed04

08005d80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8005d86:	4b27      	ldr	r3, [pc, #156]	; (8005e24 <vTaskStartScheduler+0xa4>)
 8005d88:	9301      	str	r3, [sp, #4]
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	9300      	str	r3, [sp, #0]
 8005d8e:	2300      	movs	r3, #0
 8005d90:	2282      	movs	r2, #130	; 0x82
 8005d92:	4925      	ldr	r1, [pc, #148]	; (8005e28 <vTaskStartScheduler+0xa8>)
 8005d94:	4825      	ldr	r0, [pc, #148]	; (8005e2c <vTaskStartScheduler+0xac>)
 8005d96:	f7ff fe8f 	bl	8005ab8 <xTaskCreate>
 8005d9a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d102      	bne.n	8005da8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8005da2:	f000 fe73 	bl	8006a8c <xTimerCreateTimerTask>
 8005da6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d124      	bne.n	8005df8 <vTaskStartScheduler+0x78>
        __asm volatile
 8005dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db2:	f383 8811 	msr	BASEPRI, r3
 8005db6:	f3bf 8f6f 	isb	sy
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	60bb      	str	r3, [r7, #8]
    }
 8005dc0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8005dc2:	4b1b      	ldr	r3, [pc, #108]	; (8005e30 <vTaskStartScheduler+0xb0>)
 8005dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005dca:	4b1a      	ldr	r3, [pc, #104]	; (8005e34 <vTaskStartScheduler+0xb4>)
 8005dcc:	2201      	movs	r2, #1
 8005dce:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005dd0:	4b19      	ldr	r3, [pc, #100]	; (8005e38 <vTaskStartScheduler+0xb8>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8005dd6:	4b19      	ldr	r3, [pc, #100]	; (8005e3c <vTaskStartScheduler+0xbc>)
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	4b12      	ldr	r3, [pc, #72]	; (8005e24 <vTaskStartScheduler+0xa4>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d102      	bne.n	8005de8 <vTaskStartScheduler+0x68>
 8005de2:	f003 f885 	bl	8008ef0 <SEGGER_SYSVIEW_OnIdle>
 8005de6:	e004      	b.n	8005df2 <vTaskStartScheduler+0x72>
 8005de8:	4b14      	ldr	r3, [pc, #80]	; (8005e3c <vTaskStartScheduler+0xbc>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4618      	mov	r0, r3
 8005dee:	f003 f8dd 	bl	8008fac <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8005df2:	f001 fa47 	bl	8007284 <xPortStartScheduler>
 8005df6:	e00e      	b.n	8005e16 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfe:	d10a      	bne.n	8005e16 <vTaskStartScheduler+0x96>
        __asm volatile
 8005e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	607b      	str	r3, [r7, #4]
    }
 8005e12:	bf00      	nop
 8005e14:	e7fe      	b.n	8005e14 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005e16:	4b0a      	ldr	r3, [pc, #40]	; (8005e40 <vTaskStartScheduler+0xc0>)
 8005e18:	681b      	ldr	r3, [r3, #0]
}
 8005e1a:	bf00      	nop
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	200002cc 	.word	0x200002cc
 8005e28:	08009a60 	.word	0x08009a60
 8005e2c:	080064b1 	.word	0x080064b1
 8005e30:	200002c8 	.word	0x200002c8
 8005e34:	200002b4 	.word	0x200002b4
 8005e38:	200002ac 	.word	0x200002ac
 8005e3c:	200001d0 	.word	0x200001d0
 8005e40:	20000008 	.word	0x20000008

08005e44 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005e44:	b480      	push	{r7}
 8005e46:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005e48:	4b04      	ldr	r3, [pc, #16]	; (8005e5c <vTaskSuspendAll+0x18>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	4a03      	ldr	r2, [pc, #12]	; (8005e5c <vTaskSuspendAll+0x18>)
 8005e50:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8005e52:	bf00      	nop
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	200002d0 	.word	0x200002d0

08005e60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005e66:	2300      	movs	r3, #0
 8005e68:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005e6e:	4b43      	ldr	r3, [pc, #268]	; (8005f7c <xTaskResumeAll+0x11c>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10a      	bne.n	8005e8c <xTaskResumeAll+0x2c>
        __asm volatile
 8005e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7a:	f383 8811 	msr	BASEPRI, r3
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	603b      	str	r3, [r7, #0]
    }
 8005e88:	bf00      	nop
 8005e8a:	e7fe      	b.n	8005e8a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005e8c:	f001 fa9c 	bl	80073c8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005e90:	4b3a      	ldr	r3, [pc, #232]	; (8005f7c <xTaskResumeAll+0x11c>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	3b01      	subs	r3, #1
 8005e96:	4a39      	ldr	r2, [pc, #228]	; (8005f7c <xTaskResumeAll+0x11c>)
 8005e98:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e9a:	4b38      	ldr	r3, [pc, #224]	; (8005f7c <xTaskResumeAll+0x11c>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d165      	bne.n	8005f6e <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005ea2:	4b37      	ldr	r3, [pc, #220]	; (8005f80 <xTaskResumeAll+0x120>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d061      	beq.n	8005f6e <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005eaa:	e032      	b.n	8005f12 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eac:	4b35      	ldr	r3, [pc, #212]	; (8005f84 <xTaskResumeAll+0x124>)
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	3318      	adds	r3, #24
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7fe fe75 	bl	8004ba8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	3304      	adds	r3, #4
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7fe fe70 	bl	8004ba8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f003 f8b0 	bl	8009030 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	409a      	lsls	r2, r3
 8005ed8:	4b2b      	ldr	r3, [pc, #172]	; (8005f88 <xTaskResumeAll+0x128>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	4a2a      	ldr	r2, [pc, #168]	; (8005f88 <xTaskResumeAll+0x128>)
 8005ee0:	6013      	str	r3, [r2, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4a27      	ldr	r2, [pc, #156]	; (8005f8c <xTaskResumeAll+0x12c>)
 8005ef0:	441a      	add	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	4610      	mov	r0, r2
 8005efa:	f7fe fdf8 	bl	8004aee <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f02:	4b23      	ldr	r3, [pc, #140]	; (8005f90 <xTaskResumeAll+0x130>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d302      	bcc.n	8005f12 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8005f0c:	4b21      	ldr	r3, [pc, #132]	; (8005f94 <xTaskResumeAll+0x134>)
 8005f0e:	2201      	movs	r2, #1
 8005f10:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f12:	4b1c      	ldr	r3, [pc, #112]	; (8005f84 <xTaskResumeAll+0x124>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1c8      	bne.n	8005eac <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d001      	beq.n	8005f24 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005f20:	f000 fb5c 	bl	80065dc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005f24:	4b1c      	ldr	r3, [pc, #112]	; (8005f98 <xTaskResumeAll+0x138>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d010      	beq.n	8005f52 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005f30:	f000 f858 	bl	8005fe4 <xTaskIncrementTick>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d002      	beq.n	8005f40 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8005f3a:	4b16      	ldr	r3, [pc, #88]	; (8005f94 <xTaskResumeAll+0x134>)
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	3b01      	subs	r3, #1
 8005f44:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1f1      	bne.n	8005f30 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8005f4c:	4b12      	ldr	r3, [pc, #72]	; (8005f98 <xTaskResumeAll+0x138>)
 8005f4e:	2200      	movs	r2, #0
 8005f50:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005f52:	4b10      	ldr	r3, [pc, #64]	; (8005f94 <xTaskResumeAll+0x134>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d009      	beq.n	8005f6e <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005f5e:	4b0f      	ldr	r3, [pc, #60]	; (8005f9c <xTaskResumeAll+0x13c>)
 8005f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	f3bf 8f4f 	dsb	sy
 8005f6a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005f6e:	f001 fa5b 	bl	8007428 <vPortExitCritical>

    return xAlreadyYielded;
 8005f72:	68bb      	ldr	r3, [r7, #8]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3710      	adds	r7, #16
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	200002d0 	.word	0x200002d0
 8005f80:	200002a8 	.word	0x200002a8
 8005f84:	20000268 	.word	0x20000268
 8005f88:	200002b0 	.word	0x200002b0
 8005f8c:	200001d4 	.word	0x200001d4
 8005f90:	200001d0 	.word	0x200001d0
 8005f94:	200002bc 	.word	0x200002bc
 8005f98:	200002b8 	.word	0x200002b8
 8005f9c:	e000ed04 	.word	0xe000ed04

08005fa0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005fa6:	4b05      	ldr	r3, [pc, #20]	; (8005fbc <xTaskGetTickCount+0x1c>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005fac:	687b      	ldr	r3, [r7, #4]
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	200002ac 	.word	0x200002ac

08005fc0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fc6:	f001 fae9 	bl	800759c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005fca:	2300      	movs	r3, #0
 8005fcc:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8005fce:	4b04      	ldr	r3, [pc, #16]	; (8005fe0 <xTaskGetTickCountFromISR+0x20>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005fd4:	683b      	ldr	r3, [r7, #0]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3708      	adds	r7, #8
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	200002ac 	.word	0x200002ac

08005fe4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005fea:	2300      	movs	r3, #0
 8005fec:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fee:	4b50      	ldr	r3, [pc, #320]	; (8006130 <xTaskIncrementTick+0x14c>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f040 8092 	bne.w	800611c <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ff8:	4b4e      	ldr	r3, [pc, #312]	; (8006134 <xTaskIncrementTick+0x150>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006000:	4a4c      	ldr	r2, [pc, #304]	; (8006134 <xTaskIncrementTick+0x150>)
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d120      	bne.n	800604e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800600c:	4b4a      	ldr	r3, [pc, #296]	; (8006138 <xTaskIncrementTick+0x154>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00a      	beq.n	800602c <xTaskIncrementTick+0x48>
        __asm volatile
 8006016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601a:	f383 8811 	msr	BASEPRI, r3
 800601e:	f3bf 8f6f 	isb	sy
 8006022:	f3bf 8f4f 	dsb	sy
 8006026:	603b      	str	r3, [r7, #0]
    }
 8006028:	bf00      	nop
 800602a:	e7fe      	b.n	800602a <xTaskIncrementTick+0x46>
 800602c:	4b42      	ldr	r3, [pc, #264]	; (8006138 <xTaskIncrementTick+0x154>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	60fb      	str	r3, [r7, #12]
 8006032:	4b42      	ldr	r3, [pc, #264]	; (800613c <xTaskIncrementTick+0x158>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a40      	ldr	r2, [pc, #256]	; (8006138 <xTaskIncrementTick+0x154>)
 8006038:	6013      	str	r3, [r2, #0]
 800603a:	4a40      	ldr	r2, [pc, #256]	; (800613c <xTaskIncrementTick+0x158>)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6013      	str	r3, [r2, #0]
 8006040:	4b3f      	ldr	r3, [pc, #252]	; (8006140 <xTaskIncrementTick+0x15c>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3301      	adds	r3, #1
 8006046:	4a3e      	ldr	r2, [pc, #248]	; (8006140 <xTaskIncrementTick+0x15c>)
 8006048:	6013      	str	r3, [r2, #0]
 800604a:	f000 fac7 	bl	80065dc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800604e:	4b3d      	ldr	r3, [pc, #244]	; (8006144 <xTaskIncrementTick+0x160>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	429a      	cmp	r2, r3
 8006056:	d34c      	bcc.n	80060f2 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006058:	4b37      	ldr	r3, [pc, #220]	; (8006138 <xTaskIncrementTick+0x154>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d104      	bne.n	800606c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006062:	4b38      	ldr	r3, [pc, #224]	; (8006144 <xTaskIncrementTick+0x160>)
 8006064:	f04f 32ff 	mov.w	r2, #4294967295
 8006068:	601a      	str	r2, [r3, #0]
                    break;
 800606a:	e042      	b.n	80060f2 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800606c:	4b32      	ldr	r3, [pc, #200]	; (8006138 <xTaskIncrementTick+0x154>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	429a      	cmp	r2, r3
 8006082:	d203      	bcs.n	800608c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8006084:	4a2f      	ldr	r2, [pc, #188]	; (8006144 <xTaskIncrementTick+0x160>)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800608a:	e032      	b.n	80060f2 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	3304      	adds	r3, #4
 8006090:	4618      	mov	r0, r3
 8006092:	f7fe fd89 	bl	8004ba8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609a:	2b00      	cmp	r3, #0
 800609c:	d004      	beq.n	80060a8 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	3318      	adds	r3, #24
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7fe fd80 	bl	8004ba8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f002 ffc0 	bl	8009030 <SEGGER_SYSVIEW_OnTaskStartReady>
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b4:	2201      	movs	r2, #1
 80060b6:	409a      	lsls	r2, r3
 80060b8:	4b23      	ldr	r3, [pc, #140]	; (8006148 <xTaskIncrementTick+0x164>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4313      	orrs	r3, r2
 80060be:	4a22      	ldr	r2, [pc, #136]	; (8006148 <xTaskIncrementTick+0x164>)
 80060c0:	6013      	str	r3, [r2, #0]
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c6:	4613      	mov	r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	4413      	add	r3, r2
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4a1f      	ldr	r2, [pc, #124]	; (800614c <xTaskIncrementTick+0x168>)
 80060d0:	441a      	add	r2, r3
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	3304      	adds	r3, #4
 80060d6:	4619      	mov	r1, r3
 80060d8:	4610      	mov	r0, r2
 80060da:	f7fe fd08 	bl	8004aee <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e2:	4b1b      	ldr	r3, [pc, #108]	; (8006150 <xTaskIncrementTick+0x16c>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d3b5      	bcc.n	8006058 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80060ec:	2301      	movs	r3, #1
 80060ee:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060f0:	e7b2      	b.n	8006058 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80060f2:	4b17      	ldr	r3, [pc, #92]	; (8006150 <xTaskIncrementTick+0x16c>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f8:	4914      	ldr	r1, [pc, #80]	; (800614c <xTaskIncrementTick+0x168>)
 80060fa:	4613      	mov	r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	4413      	add	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	440b      	add	r3, r1
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d901      	bls.n	800610e <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 800610a:	2301      	movs	r3, #1
 800610c:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800610e:	4b11      	ldr	r3, [pc, #68]	; (8006154 <xTaskIncrementTick+0x170>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d007      	beq.n	8006126 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8006116:	2301      	movs	r3, #1
 8006118:	617b      	str	r3, [r7, #20]
 800611a:	e004      	b.n	8006126 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800611c:	4b0e      	ldr	r3, [pc, #56]	; (8006158 <xTaskIncrementTick+0x174>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	3301      	adds	r3, #1
 8006122:	4a0d      	ldr	r2, [pc, #52]	; (8006158 <xTaskIncrementTick+0x174>)
 8006124:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8006126:	697b      	ldr	r3, [r7, #20]
}
 8006128:	4618      	mov	r0, r3
 800612a:	3718      	adds	r7, #24
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	200002d0 	.word	0x200002d0
 8006134:	200002ac 	.word	0x200002ac
 8006138:	20000260 	.word	0x20000260
 800613c:	20000264 	.word	0x20000264
 8006140:	200002c0 	.word	0x200002c0
 8006144:	200002c8 	.word	0x200002c8
 8006148:	200002b0 	.word	0x200002b0
 800614c:	200001d4 	.word	0x200001d4
 8006150:	200001d0 	.word	0x200001d0
 8006154:	200002bc 	.word	0x200002bc
 8006158:	200002b8 	.word	0x200002b8

0800615c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b086      	sub	sp, #24
 8006160:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006162:	4b2d      	ldr	r3, [pc, #180]	; (8006218 <vTaskSwitchContext+0xbc>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d003      	beq.n	8006172 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800616a:	4b2c      	ldr	r3, [pc, #176]	; (800621c <vTaskSwitchContext+0xc0>)
 800616c:	2201      	movs	r2, #1
 800616e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8006170:	e04d      	b.n	800620e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8006172:	4b2a      	ldr	r3, [pc, #168]	; (800621c <vTaskSwitchContext+0xc0>)
 8006174:	2200      	movs	r2, #0
 8006176:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006178:	4b29      	ldr	r3, [pc, #164]	; (8006220 <vTaskSwitchContext+0xc4>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	fab3 f383 	clz	r3, r3
 8006184:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8006186:	7afb      	ldrb	r3, [r7, #11]
 8006188:	f1c3 031f 	rsb	r3, r3, #31
 800618c:	617b      	str	r3, [r7, #20]
 800618e:	4925      	ldr	r1, [pc, #148]	; (8006224 <vTaskSwitchContext+0xc8>)
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	4613      	mov	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4413      	add	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	440b      	add	r3, r1
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d10a      	bne.n	80061b8 <vTaskSwitchContext+0x5c>
        __asm volatile
 80061a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a6:	f383 8811 	msr	BASEPRI, r3
 80061aa:	f3bf 8f6f 	isb	sy
 80061ae:	f3bf 8f4f 	dsb	sy
 80061b2:	607b      	str	r3, [r7, #4]
    }
 80061b4:	bf00      	nop
 80061b6:	e7fe      	b.n	80061b6 <vTaskSwitchContext+0x5a>
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	4613      	mov	r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4413      	add	r3, r2
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4a18      	ldr	r2, [pc, #96]	; (8006224 <vTaskSwitchContext+0xc8>)
 80061c4:	4413      	add	r3, r2
 80061c6:	613b      	str	r3, [r7, #16]
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	605a      	str	r2, [r3, #4]
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	685a      	ldr	r2, [r3, #4]
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	3308      	adds	r3, #8
 80061da:	429a      	cmp	r2, r3
 80061dc:	d104      	bne.n	80061e8 <vTaskSwitchContext+0x8c>
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	605a      	str	r2, [r3, #4]
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	4a0e      	ldr	r2, [pc, #56]	; (8006228 <vTaskSwitchContext+0xcc>)
 80061f0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80061f2:	4b0d      	ldr	r3, [pc, #52]	; (8006228 <vTaskSwitchContext+0xcc>)
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	4b0d      	ldr	r3, [pc, #52]	; (800622c <vTaskSwitchContext+0xd0>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d102      	bne.n	8006204 <vTaskSwitchContext+0xa8>
 80061fe:	f002 fe77 	bl	8008ef0 <SEGGER_SYSVIEW_OnIdle>
}
 8006202:	e004      	b.n	800620e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8006204:	4b08      	ldr	r3, [pc, #32]	; (8006228 <vTaskSwitchContext+0xcc>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4618      	mov	r0, r3
 800620a:	f002 fecf 	bl	8008fac <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800620e:	bf00      	nop
 8006210:	3718      	adds	r7, #24
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	200002d0 	.word	0x200002d0
 800621c:	200002bc 	.word	0x200002bc
 8006220:	200002b0 	.word	0x200002b0
 8006224:	200001d4 	.word	0x200001d4
 8006228:	200001d0 	.word	0x200001d0
 800622c:	200002cc 	.word	0x200002cc

08006230 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10a      	bne.n	8006256 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8006240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	60fb      	str	r3, [r7, #12]
    }
 8006252:	bf00      	nop
 8006254:	e7fe      	b.n	8006254 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006256:	4b07      	ldr	r3, [pc, #28]	; (8006274 <vTaskPlaceOnEventList+0x44>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	3318      	adds	r3, #24
 800625c:	4619      	mov	r1, r3
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7fe fc69 	bl	8004b36 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006264:	2101      	movs	r1, #1
 8006266:	6838      	ldr	r0, [r7, #0]
 8006268:	f000 fb98 	bl	800699c <prvAddCurrentTaskToDelayedList>
}
 800626c:	bf00      	nop
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	200001d0 	.word	0x200001d0

08006278 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10a      	bne.n	80062a0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800628a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628e:	f383 8811 	msr	BASEPRI, r3
 8006292:	f3bf 8f6f 	isb	sy
 8006296:	f3bf 8f4f 	dsb	sy
 800629a:	617b      	str	r3, [r7, #20]
    }
 800629c:	bf00      	nop
 800629e:	e7fe      	b.n	800629e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062a0:	4b0b      	ldr	r3, [pc, #44]	; (80062d0 <vTaskPlaceOnEventListRestricted+0x58>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	3318      	adds	r3, #24
 80062a6:	4619      	mov	r1, r3
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f7fe fc20 	bl	8004aee <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d002      	beq.n	80062ba <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80062b4:	f04f 33ff 	mov.w	r3, #4294967295
 80062b8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80062ba:	2024      	movs	r0, #36	; 0x24
 80062bc:	f002 f91a 	bl	80084f4 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80062c0:	6879      	ldr	r1, [r7, #4]
 80062c2:	68b8      	ldr	r0, [r7, #8]
 80062c4:	f000 fb6a 	bl	800699c <prvAddCurrentTaskToDelayedList>
    }
 80062c8:	bf00      	nop
 80062ca:	3718      	adds	r7, #24
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	200001d0 	.word	0x200001d0

080062d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b086      	sub	sp, #24
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10a      	bne.n	8006300 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80062ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	60fb      	str	r3, [r7, #12]
    }
 80062fc:	bf00      	nop
 80062fe:	e7fe      	b.n	80062fe <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	3318      	adds	r3, #24
 8006304:	4618      	mov	r0, r3
 8006306:	f7fe fc4f 	bl	8004ba8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800630a:	4b1f      	ldr	r3, [pc, #124]	; (8006388 <xTaskRemoveFromEventList+0xb4>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d120      	bne.n	8006354 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	3304      	adds	r3, #4
 8006316:	4618      	mov	r0, r3
 8006318:	f7fe fc46 	bl	8004ba8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	4618      	mov	r0, r3
 8006320:	f002 fe86 	bl	8009030 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006328:	2201      	movs	r2, #1
 800632a:	409a      	lsls	r2, r3
 800632c:	4b17      	ldr	r3, [pc, #92]	; (800638c <xTaskRemoveFromEventList+0xb8>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4313      	orrs	r3, r2
 8006332:	4a16      	ldr	r2, [pc, #88]	; (800638c <xTaskRemoveFromEventList+0xb8>)
 8006334:	6013      	str	r3, [r2, #0]
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800633a:	4613      	mov	r3, r2
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	4413      	add	r3, r2
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4a13      	ldr	r2, [pc, #76]	; (8006390 <xTaskRemoveFromEventList+0xbc>)
 8006344:	441a      	add	r2, r3
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	3304      	adds	r3, #4
 800634a:	4619      	mov	r1, r3
 800634c:	4610      	mov	r0, r2
 800634e:	f7fe fbce 	bl	8004aee <vListInsertEnd>
 8006352:	e005      	b.n	8006360 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	3318      	adds	r3, #24
 8006358:	4619      	mov	r1, r3
 800635a:	480e      	ldr	r0, [pc, #56]	; (8006394 <xTaskRemoveFromEventList+0xc0>)
 800635c:	f7fe fbc7 	bl	8004aee <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006364:	4b0c      	ldr	r3, [pc, #48]	; (8006398 <xTaskRemoveFromEventList+0xc4>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636a:	429a      	cmp	r2, r3
 800636c:	d905      	bls.n	800637a <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800636e:	2301      	movs	r3, #1
 8006370:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006372:	4b0a      	ldr	r3, [pc, #40]	; (800639c <xTaskRemoveFromEventList+0xc8>)
 8006374:	2201      	movs	r2, #1
 8006376:	601a      	str	r2, [r3, #0]
 8006378:	e001      	b.n	800637e <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 800637a:	2300      	movs	r3, #0
 800637c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800637e:	697b      	ldr	r3, [r7, #20]
}
 8006380:	4618      	mov	r0, r3
 8006382:	3718      	adds	r7, #24
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	200002d0 	.word	0x200002d0
 800638c:	200002b0 	.word	0x200002b0
 8006390:	200001d4 	.word	0x200001d4
 8006394:	20000268 	.word	0x20000268
 8006398:	200001d0 	.word	0x200001d0
 800639c:	200002bc 	.word	0x200002bc

080063a0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80063a8:	4b06      	ldr	r3, [pc, #24]	; (80063c4 <vTaskInternalSetTimeOutState+0x24>)
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80063b0:	4b05      	ldr	r3, [pc, #20]	; (80063c8 <vTaskInternalSetTimeOutState+0x28>)
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	605a      	str	r2, [r3, #4]
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr
 80063c4:	200002c0 	.word	0x200002c0
 80063c8:	200002ac 	.word	0x200002ac

080063cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b088      	sub	sp, #32
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d10a      	bne.n	80063f2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80063dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e0:	f383 8811 	msr	BASEPRI, r3
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	613b      	str	r3, [r7, #16]
    }
 80063ee:	bf00      	nop
 80063f0:	e7fe      	b.n	80063f0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10a      	bne.n	800640e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80063f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fc:	f383 8811 	msr	BASEPRI, r3
 8006400:	f3bf 8f6f 	isb	sy
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	60fb      	str	r3, [r7, #12]
    }
 800640a:	bf00      	nop
 800640c:	e7fe      	b.n	800640c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800640e:	f000 ffdb 	bl	80073c8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8006412:	4b1f      	ldr	r3, [pc, #124]	; (8006490 <xTaskCheckForTimeOut+0xc4>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	69ba      	ldr	r2, [r7, #24]
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800642a:	d102      	bne.n	8006432 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800642c:	2300      	movs	r3, #0
 800642e:	61fb      	str	r3, [r7, #28]
 8006430:	e026      	b.n	8006480 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	4b17      	ldr	r3, [pc, #92]	; (8006494 <xTaskCheckForTimeOut+0xc8>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	429a      	cmp	r2, r3
 800643c:	d00a      	beq.n	8006454 <xTaskCheckForTimeOut+0x88>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	69ba      	ldr	r2, [r7, #24]
 8006444:	429a      	cmp	r2, r3
 8006446:	d305      	bcc.n	8006454 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006448:	2301      	movs	r3, #1
 800644a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	2200      	movs	r2, #0
 8006450:	601a      	str	r2, [r3, #0]
 8006452:	e015      	b.n	8006480 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	697a      	ldr	r2, [r7, #20]
 800645a:	429a      	cmp	r2, r3
 800645c:	d20b      	bcs.n	8006476 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	1ad2      	subs	r2, r2, r3
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f7ff ff98 	bl	80063a0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8006470:	2300      	movs	r3, #0
 8006472:	61fb      	str	r3, [r7, #28]
 8006474:	e004      	b.n	8006480 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	2200      	movs	r2, #0
 800647a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800647c:	2301      	movs	r3, #1
 800647e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8006480:	f000 ffd2 	bl	8007428 <vPortExitCritical>

    return xReturn;
 8006484:	69fb      	ldr	r3, [r7, #28]
}
 8006486:	4618      	mov	r0, r3
 8006488:	3720      	adds	r7, #32
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	200002ac 	.word	0x200002ac
 8006494:	200002c0 	.word	0x200002c0

08006498 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006498:	b480      	push	{r7}
 800649a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800649c:	4b03      	ldr	r3, [pc, #12]	; (80064ac <vTaskMissedYield+0x14>)
 800649e:	2201      	movs	r2, #1
 80064a0:	601a      	str	r2, [r3, #0]
}
 80064a2:	bf00      	nop
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr
 80064ac:	200002bc 	.word	0x200002bc

080064b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80064b8:	f000 f852 	bl	8006560 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80064bc:	4b06      	ldr	r3, [pc, #24]	; (80064d8 <prvIdleTask+0x28>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d9f9      	bls.n	80064b8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80064c4:	4b05      	ldr	r3, [pc, #20]	; (80064dc <prvIdleTask+0x2c>)
 80064c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ca:	601a      	str	r2, [r3, #0]
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80064d4:	e7f0      	b.n	80064b8 <prvIdleTask+0x8>
 80064d6:	bf00      	nop
 80064d8:	200001d4 	.word	0x200001d4
 80064dc:	e000ed04 	.word	0xe000ed04

080064e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064e6:	2300      	movs	r3, #0
 80064e8:	607b      	str	r3, [r7, #4]
 80064ea:	e00c      	b.n	8006506 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	4613      	mov	r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4413      	add	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4a12      	ldr	r2, [pc, #72]	; (8006540 <prvInitialiseTaskLists+0x60>)
 80064f8:	4413      	add	r3, r2
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7fe faca 	bl	8004a94 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	3301      	adds	r3, #1
 8006504:	607b      	str	r3, [r7, #4]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2b04      	cmp	r3, #4
 800650a:	d9ef      	bls.n	80064ec <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800650c:	480d      	ldr	r0, [pc, #52]	; (8006544 <prvInitialiseTaskLists+0x64>)
 800650e:	f7fe fac1 	bl	8004a94 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8006512:	480d      	ldr	r0, [pc, #52]	; (8006548 <prvInitialiseTaskLists+0x68>)
 8006514:	f7fe fabe 	bl	8004a94 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006518:	480c      	ldr	r0, [pc, #48]	; (800654c <prvInitialiseTaskLists+0x6c>)
 800651a:	f7fe fabb 	bl	8004a94 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800651e:	480c      	ldr	r0, [pc, #48]	; (8006550 <prvInitialiseTaskLists+0x70>)
 8006520:	f7fe fab8 	bl	8004a94 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8006524:	480b      	ldr	r0, [pc, #44]	; (8006554 <prvInitialiseTaskLists+0x74>)
 8006526:	f7fe fab5 	bl	8004a94 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800652a:	4b0b      	ldr	r3, [pc, #44]	; (8006558 <prvInitialiseTaskLists+0x78>)
 800652c:	4a05      	ldr	r2, [pc, #20]	; (8006544 <prvInitialiseTaskLists+0x64>)
 800652e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006530:	4b0a      	ldr	r3, [pc, #40]	; (800655c <prvInitialiseTaskLists+0x7c>)
 8006532:	4a05      	ldr	r2, [pc, #20]	; (8006548 <prvInitialiseTaskLists+0x68>)
 8006534:	601a      	str	r2, [r3, #0]
}
 8006536:	bf00      	nop
 8006538:	3708      	adds	r7, #8
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	200001d4 	.word	0x200001d4
 8006544:	20000238 	.word	0x20000238
 8006548:	2000024c 	.word	0x2000024c
 800654c:	20000268 	.word	0x20000268
 8006550:	2000027c 	.word	0x2000027c
 8006554:	20000294 	.word	0x20000294
 8006558:	20000260 	.word	0x20000260
 800655c:	20000264 	.word	0x20000264

08006560 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006566:	e019      	b.n	800659c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8006568:	f000 ff2e 	bl	80073c8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800656c:	4b10      	ldr	r3, [pc, #64]	; (80065b0 <prvCheckTasksWaitingTermination+0x50>)
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	3304      	adds	r3, #4
 8006578:	4618      	mov	r0, r3
 800657a:	f7fe fb15 	bl	8004ba8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800657e:	4b0d      	ldr	r3, [pc, #52]	; (80065b4 <prvCheckTasksWaitingTermination+0x54>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	3b01      	subs	r3, #1
 8006584:	4a0b      	ldr	r2, [pc, #44]	; (80065b4 <prvCheckTasksWaitingTermination+0x54>)
 8006586:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8006588:	4b0b      	ldr	r3, [pc, #44]	; (80065b8 <prvCheckTasksWaitingTermination+0x58>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	3b01      	subs	r3, #1
 800658e:	4a0a      	ldr	r2, [pc, #40]	; (80065b8 <prvCheckTasksWaitingTermination+0x58>)
 8006590:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8006592:	f000 ff49 	bl	8007428 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 f810 	bl	80065bc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800659c:	4b06      	ldr	r3, [pc, #24]	; (80065b8 <prvCheckTasksWaitingTermination+0x58>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d1e1      	bne.n	8006568 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80065a4:	bf00      	nop
 80065a6:	bf00      	nop
 80065a8:	3708      	adds	r7, #8
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	2000027c 	.word	0x2000027c
 80065b4:	200002a8 	.word	0x200002a8
 80065b8:	20000290 	.word	0x20000290

080065bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c8:	4618      	mov	r0, r3
 80065ca:	f001 f907 	bl	80077dc <vPortFree>
                vPortFree( pxTCB );
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f001 f904 	bl	80077dc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80065d4:	bf00      	nop
 80065d6:	3708      	adds	r7, #8
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80065dc:	b480      	push	{r7}
 80065de:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065e0:	4b0a      	ldr	r3, [pc, #40]	; (800660c <prvResetNextTaskUnblockTime+0x30>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d104      	bne.n	80065f4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80065ea:	4b09      	ldr	r3, [pc, #36]	; (8006610 <prvResetNextTaskUnblockTime+0x34>)
 80065ec:	f04f 32ff 	mov.w	r2, #4294967295
 80065f0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80065f2:	e005      	b.n	8006600 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80065f4:	4b05      	ldr	r3, [pc, #20]	; (800660c <prvResetNextTaskUnblockTime+0x30>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a04      	ldr	r2, [pc, #16]	; (8006610 <prvResetNextTaskUnblockTime+0x34>)
 80065fe:	6013      	str	r3, [r2, #0]
}
 8006600:	bf00      	nop
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	20000260 	.word	0x20000260
 8006610:	200002c8 	.word	0x200002c8

08006614 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800661a:	4b0b      	ldr	r3, [pc, #44]	; (8006648 <xTaskGetSchedulerState+0x34>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d102      	bne.n	8006628 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8006622:	2301      	movs	r3, #1
 8006624:	607b      	str	r3, [r7, #4]
 8006626:	e008      	b.n	800663a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006628:	4b08      	ldr	r3, [pc, #32]	; (800664c <xTaskGetSchedulerState+0x38>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d102      	bne.n	8006636 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8006630:	2302      	movs	r3, #2
 8006632:	607b      	str	r3, [r7, #4]
 8006634:	e001      	b.n	800663a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8006636:	2300      	movs	r3, #0
 8006638:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800663a:	687b      	ldr	r3, [r7, #4]
    }
 800663c:	4618      	mov	r0, r3
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	200002b4 	.word	0x200002b4
 800664c:	200002d0 	.word	0x200002d0

08006650 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 800665c:	2300      	movs	r3, #0
 800665e:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d063      	beq.n	800672e <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800666a:	4b33      	ldr	r3, [pc, #204]	; (8006738 <xTaskPriorityInherit+0xe8>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006670:	429a      	cmp	r2, r3
 8006672:	d253      	bcs.n	800671c <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	2b00      	cmp	r3, #0
 800667a:	db06      	blt.n	800668a <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800667c:	4b2e      	ldr	r3, [pc, #184]	; (8006738 <xTaskPriorityInherit+0xe8>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006682:	f1c3 0205 	rsb	r2, r3, #5
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	6959      	ldr	r1, [r3, #20]
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006692:	4613      	mov	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4413      	add	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4a28      	ldr	r2, [pc, #160]	; (800673c <xTaskPriorityInherit+0xec>)
 800669c:	4413      	add	r3, r2
 800669e:	4299      	cmp	r1, r3
 80066a0:	d12f      	bne.n	8006702 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	3304      	adds	r3, #4
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7fe fa7e 	bl	8004ba8 <uxListRemove>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10a      	bne.n	80066c8 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b6:	2201      	movs	r2, #1
 80066b8:	fa02 f303 	lsl.w	r3, r2, r3
 80066bc:	43da      	mvns	r2, r3
 80066be:	4b20      	ldr	r3, [pc, #128]	; (8006740 <xTaskPriorityInherit+0xf0>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4013      	ands	r3, r2
 80066c4:	4a1e      	ldr	r2, [pc, #120]	; (8006740 <xTaskPriorityInherit+0xf0>)
 80066c6:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80066c8:	4b1b      	ldr	r3, [pc, #108]	; (8006738 <xTaskPriorityInherit+0xe8>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d6:	2201      	movs	r2, #1
 80066d8:	409a      	lsls	r2, r3
 80066da:	4b19      	ldr	r3, [pc, #100]	; (8006740 <xTaskPriorityInherit+0xf0>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4313      	orrs	r3, r2
 80066e0:	4a17      	ldr	r2, [pc, #92]	; (8006740 <xTaskPriorityInherit+0xf0>)
 80066e2:	6013      	str	r3, [r2, #0]
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066e8:	4613      	mov	r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4413      	add	r3, r2
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4a12      	ldr	r2, [pc, #72]	; (800673c <xTaskPriorityInherit+0xec>)
 80066f2:	441a      	add	r2, r3
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	3304      	adds	r3, #4
 80066f8:	4619      	mov	r1, r3
 80066fa:	4610      	mov	r0, r2
 80066fc:	f7fe f9f7 	bl	8004aee <vListInsertEnd>
 8006700:	e004      	b.n	800670c <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006702:	4b0d      	ldr	r3, [pc, #52]	; (8006738 <xTaskPriorityInherit+0xe8>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4619      	mov	r1, r3
 8006710:	2049      	movs	r0, #73	; 0x49
 8006712:	f001 ff0d 	bl	8008530 <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8006716:	2301      	movs	r3, #1
 8006718:	60fb      	str	r3, [r7, #12]
 800671a:	e008      	b.n	800672e <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006720:	4b05      	ldr	r3, [pc, #20]	; (8006738 <xTaskPriorityInherit+0xe8>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006726:	429a      	cmp	r2, r3
 8006728:	d201      	bcs.n	800672e <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800672a:	2301      	movs	r3, #1
 800672c:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800672e:	68fb      	ldr	r3, [r7, #12]
    }
 8006730:	4618      	mov	r0, r3
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	200001d0 	.word	0x200001d0
 800673c:	200001d4 	.word	0x200001d4
 8006740:	200002b0 	.word	0x200002b0

08006744 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8006750:	2300      	movs	r3, #0
 8006752:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d068      	beq.n	800682c <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800675a:	4b37      	ldr	r3, [pc, #220]	; (8006838 <xTaskPriorityDisinherit+0xf4>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	693a      	ldr	r2, [r7, #16]
 8006760:	429a      	cmp	r2, r3
 8006762:	d00a      	beq.n	800677a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8006764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006768:	f383 8811 	msr	BASEPRI, r3
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	f3bf 8f4f 	dsb	sy
 8006774:	60fb      	str	r3, [r7, #12]
    }
 8006776:	bf00      	nop
 8006778:	e7fe      	b.n	8006778 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10a      	bne.n	8006798 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8006782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006786:	f383 8811 	msr	BASEPRI, r3
 800678a:	f3bf 8f6f 	isb	sy
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	60bb      	str	r3, [r7, #8]
    }
 8006794:	bf00      	nop
 8006796:	e7fe      	b.n	8006796 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800679c:	1e5a      	subs	r2, r3, #1
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d03e      	beq.n	800682c <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d13a      	bne.n	800682c <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	3304      	adds	r3, #4
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7fe f9f4 	bl	8004ba8 <uxListRemove>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10a      	bne.n	80067dc <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ca:	2201      	movs	r2, #1
 80067cc:	fa02 f303 	lsl.w	r3, r2, r3
 80067d0:	43da      	mvns	r2, r3
 80067d2:	4b1a      	ldr	r3, [pc, #104]	; (800683c <xTaskPriorityDisinherit+0xf8>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4013      	ands	r3, r2
 80067d8:	4a18      	ldr	r2, [pc, #96]	; (800683c <xTaskPriorityDisinherit+0xf8>)
 80067da:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4619      	mov	r1, r3
 80067e0:	204a      	movs	r0, #74	; 0x4a
 80067e2:	f001 fea5 	bl	8008530 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f2:	f1c3 0205 	rsb	r2, r3, #5
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fe:	2201      	movs	r2, #1
 8006800:	409a      	lsls	r2, r3
 8006802:	4b0e      	ldr	r3, [pc, #56]	; (800683c <xTaskPriorityDisinherit+0xf8>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4313      	orrs	r3, r2
 8006808:	4a0c      	ldr	r2, [pc, #48]	; (800683c <xTaskPriorityDisinherit+0xf8>)
 800680a:	6013      	str	r3, [r2, #0]
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006810:	4613      	mov	r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4413      	add	r3, r2
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	4a09      	ldr	r2, [pc, #36]	; (8006840 <xTaskPriorityDisinherit+0xfc>)
 800681a:	441a      	add	r2, r3
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	3304      	adds	r3, #4
 8006820:	4619      	mov	r1, r3
 8006822:	4610      	mov	r0, r2
 8006824:	f7fe f963 	bl	8004aee <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8006828:	2301      	movs	r3, #1
 800682a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800682c:	697b      	ldr	r3, [r7, #20]
    }
 800682e:	4618      	mov	r0, r3
 8006830:	3718      	adds	r7, #24
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	200001d0 	.word	0x200001d0
 800683c:	200002b0 	.word	0x200002b0
 8006840:	200001d4 	.word	0x200001d4

08006844 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8006844:	b580      	push	{r7, lr}
 8006846:	b088      	sub	sp, #32
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006852:	2301      	movs	r3, #1
 8006854:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2b00      	cmp	r3, #0
 800685a:	f000 8081 	beq.w	8006960 <vTaskPriorityDisinheritAfterTimeout+0x11c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10a      	bne.n	800687c <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 8006866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686a:	f383 8811 	msr	BASEPRI, r3
 800686e:	f3bf 8f6f 	isb	sy
 8006872:	f3bf 8f4f 	dsb	sy
 8006876:	60fb      	str	r3, [r7, #12]
    }
 8006878:	bf00      	nop
 800687a:	e7fe      	b.n	800687a <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006880:	683a      	ldr	r2, [r7, #0]
 8006882:	429a      	cmp	r2, r3
 8006884:	d902      	bls.n	800688c <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	61fb      	str	r3, [r7, #28]
 800688a:	e002      	b.n	8006892 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006890:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006896:	69fa      	ldr	r2, [r7, #28]
 8006898:	429a      	cmp	r2, r3
 800689a:	d061      	beq.n	8006960 <vTaskPriorityDisinheritAfterTimeout+0x11c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d15c      	bne.n	8006960 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80068a6:	4b30      	ldr	r3, [pc, #192]	; (8006968 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	69ba      	ldr	r2, [r7, #24]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d10a      	bne.n	80068c6 <vTaskPriorityDisinheritAfterTimeout+0x82>
        __asm volatile
 80068b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b4:	f383 8811 	msr	BASEPRI, r3
 80068b8:	f3bf 8f6f 	isb	sy
 80068bc:	f3bf 8f4f 	dsb	sy
 80068c0:	60bb      	str	r3, [r7, #8]
    }
 80068c2:	bf00      	nop
 80068c4:	e7fe      	b.n	80068c4 <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4619      	mov	r1, r3
 80068ca:	204a      	movs	r0, #74	; 0x4a
 80068cc:	f001 fe30 	bl	8008530 <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d4:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	69fa      	ldr	r2, [r7, #28]
 80068da:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	699b      	ldr	r3, [r3, #24]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	db04      	blt.n	80068ee <vTaskPriorityDisinheritAfterTimeout+0xaa>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	f1c3 0205 	rsb	r2, r3, #5
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	6959      	ldr	r1, [r3, #20]
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	4613      	mov	r3, r2
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	4413      	add	r3, r2
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	4a1b      	ldr	r2, [pc, #108]	; (800696c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80068fe:	4413      	add	r3, r2
 8006900:	4299      	cmp	r1, r3
 8006902:	d12d      	bne.n	8006960 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	3304      	adds	r3, #4
 8006908:	4618      	mov	r0, r3
 800690a:	f7fe f94d 	bl	8004ba8 <uxListRemove>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10a      	bne.n	800692a <vTaskPriorityDisinheritAfterTimeout+0xe6>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006918:	2201      	movs	r2, #1
 800691a:	fa02 f303 	lsl.w	r3, r2, r3
 800691e:	43da      	mvns	r2, r3
 8006920:	4b13      	ldr	r3, [pc, #76]	; (8006970 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4013      	ands	r3, r2
 8006926:	4a12      	ldr	r2, [pc, #72]	; (8006970 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8006928:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	4618      	mov	r0, r3
 800692e:	f002 fb7f 	bl	8009030 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006936:	2201      	movs	r2, #1
 8006938:	409a      	lsls	r2, r3
 800693a:	4b0d      	ldr	r3, [pc, #52]	; (8006970 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4313      	orrs	r3, r2
 8006940:	4a0b      	ldr	r2, [pc, #44]	; (8006970 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8006942:	6013      	str	r3, [r2, #0]
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006948:	4613      	mov	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4a06      	ldr	r2, [pc, #24]	; (800696c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8006952:	441a      	add	r2, r3
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	3304      	adds	r3, #4
 8006958:	4619      	mov	r1, r3
 800695a:	4610      	mov	r0, r2
 800695c:	f7fe f8c7 	bl	8004aee <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8006960:	bf00      	nop
 8006962:	3720      	adds	r7, #32
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	200001d0 	.word	0x200001d0
 800696c:	200001d4 	.word	0x200001d4
 8006970:	200002b0 	.word	0x200002b0

08006974 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8006974:	b480      	push	{r7}
 8006976:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8006978:	4b07      	ldr	r3, [pc, #28]	; (8006998 <pvTaskIncrementMutexHeldCount+0x24>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d004      	beq.n	800698a <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8006980:	4b05      	ldr	r3, [pc, #20]	; (8006998 <pvTaskIncrementMutexHeldCount+0x24>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006986:	3201      	adds	r2, #1
 8006988:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 800698a:	4b03      	ldr	r3, [pc, #12]	; (8006998 <pvTaskIncrementMutexHeldCount+0x24>)
 800698c:	681b      	ldr	r3, [r3, #0]
    }
 800698e:	4618      	mov	r0, r3
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr
 8006998:	200001d0 	.word	0x200001d0

0800699c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80069a6:	4b32      	ldr	r3, [pc, #200]	; (8006a70 <prvAddCurrentTaskToDelayedList+0xd4>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069ac:	4b31      	ldr	r3, [pc, #196]	; (8006a74 <prvAddCurrentTaskToDelayedList+0xd8>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	3304      	adds	r3, #4
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7fe f8f8 	bl	8004ba8 <uxListRemove>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10b      	bne.n	80069d6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80069be:	4b2d      	ldr	r3, [pc, #180]	; (8006a74 <prvAddCurrentTaskToDelayedList+0xd8>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c4:	2201      	movs	r2, #1
 80069c6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ca:	43da      	mvns	r2, r3
 80069cc:	4b2a      	ldr	r3, [pc, #168]	; (8006a78 <prvAddCurrentTaskToDelayedList+0xdc>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4013      	ands	r3, r2
 80069d2:	4a29      	ldr	r2, [pc, #164]	; (8006a78 <prvAddCurrentTaskToDelayedList+0xdc>)
 80069d4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069dc:	d110      	bne.n	8006a00 <prvAddCurrentTaskToDelayedList+0x64>
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00d      	beq.n	8006a00 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80069e4:	4b23      	ldr	r3, [pc, #140]	; (8006a74 <prvAddCurrentTaskToDelayedList+0xd8>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	211b      	movs	r1, #27
 80069ea:	4618      	mov	r0, r3
 80069ec:	f002 fb62 	bl	80090b4 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069f0:	4b20      	ldr	r3, [pc, #128]	; (8006a74 <prvAddCurrentTaskToDelayedList+0xd8>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	3304      	adds	r3, #4
 80069f6:	4619      	mov	r1, r3
 80069f8:	4820      	ldr	r0, [pc, #128]	; (8006a7c <prvAddCurrentTaskToDelayedList+0xe0>)
 80069fa:	f7fe f878 	bl	8004aee <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80069fe:	e032      	b.n	8006a66 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4413      	add	r3, r2
 8006a06:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a08:	4b1a      	ldr	r3, [pc, #104]	; (8006a74 <prvAddCurrentTaskToDelayedList+0xd8>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8006a10:	68ba      	ldr	r2, [r7, #8]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d20f      	bcs.n	8006a38 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8006a18:	4b16      	ldr	r3, [pc, #88]	; (8006a74 <prvAddCurrentTaskToDelayedList+0xd8>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2104      	movs	r1, #4
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f002 fb48 	bl	80090b4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a24:	4b16      	ldr	r3, [pc, #88]	; (8006a80 <prvAddCurrentTaskToDelayedList+0xe4>)
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	4b12      	ldr	r3, [pc, #72]	; (8006a74 <prvAddCurrentTaskToDelayedList+0xd8>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	3304      	adds	r3, #4
 8006a2e:	4619      	mov	r1, r3
 8006a30:	4610      	mov	r0, r2
 8006a32:	f7fe f880 	bl	8004b36 <vListInsert>
}
 8006a36:	e016      	b.n	8006a66 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8006a38:	4b0e      	ldr	r3, [pc, #56]	; (8006a74 <prvAddCurrentTaskToDelayedList+0xd8>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2104      	movs	r1, #4
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f002 fb38 	bl	80090b4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a44:	4b0f      	ldr	r3, [pc, #60]	; (8006a84 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	4b0a      	ldr	r3, [pc, #40]	; (8006a74 <prvAddCurrentTaskToDelayedList+0xd8>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	3304      	adds	r3, #4
 8006a4e:	4619      	mov	r1, r3
 8006a50:	4610      	mov	r0, r2
 8006a52:	f7fe f870 	bl	8004b36 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8006a56:	4b0c      	ldr	r3, [pc, #48]	; (8006a88 <prvAddCurrentTaskToDelayedList+0xec>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d202      	bcs.n	8006a66 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8006a60:	4a09      	ldr	r2, [pc, #36]	; (8006a88 <prvAddCurrentTaskToDelayedList+0xec>)
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	6013      	str	r3, [r2, #0]
}
 8006a66:	bf00      	nop
 8006a68:	3710      	adds	r7, #16
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	200002ac 	.word	0x200002ac
 8006a74:	200001d0 	.word	0x200001d0
 8006a78:	200002b0 	.word	0x200002b0
 8006a7c:	20000294 	.word	0x20000294
 8006a80:	20000264 	.word	0x20000264
 8006a84:	20000260 	.word	0x20000260
 8006a88:	200002c8 	.word	0x200002c8

08006a8c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8006a92:	2300      	movs	r3, #0
 8006a94:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8006a96:	f000 fb31 	bl	80070fc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8006a9a:	4b11      	ldr	r3, [pc, #68]	; (8006ae0 <xTimerCreateTimerTask+0x54>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00b      	beq.n	8006aba <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8006aa2:	4b10      	ldr	r3, [pc, #64]	; (8006ae4 <xTimerCreateTimerTask+0x58>)
 8006aa4:	9301      	str	r3, [sp, #4]
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	2300      	movs	r3, #0
 8006aac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006ab0:	490d      	ldr	r1, [pc, #52]	; (8006ae8 <xTimerCreateTimerTask+0x5c>)
 8006ab2:	480e      	ldr	r0, [pc, #56]	; (8006aec <xTimerCreateTimerTask+0x60>)
 8006ab4:	f7ff f800 	bl	8005ab8 <xTaskCreate>
 8006ab8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d10a      	bne.n	8006ad6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8006ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac4:	f383 8811 	msr	BASEPRI, r3
 8006ac8:	f3bf 8f6f 	isb	sy
 8006acc:	f3bf 8f4f 	dsb	sy
 8006ad0:	603b      	str	r3, [r7, #0]
    }
 8006ad2:	bf00      	nop
 8006ad4:	e7fe      	b.n	8006ad4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8006ad6:	687b      	ldr	r3, [r7, #4]
    }
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3708      	adds	r7, #8
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	20000304 	.word	0x20000304
 8006ae4:	20000308 	.word	0x20000308
 8006ae8:	08009a68 	.word	0x08009a68
 8006aec:	08006cdd 	.word	0x08006cdd

08006af0 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b088      	sub	sp, #32
 8006af4:	af02      	add	r7, sp, #8
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
 8006afc:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006afe:	202c      	movs	r0, #44	; 0x2c
 8006b00:	f000 fd8c 	bl	800761c <pvPortMalloc>
 8006b04:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00d      	beq.n	8006b28 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	9301      	str	r3, [sp, #4]
 8006b18:	6a3b      	ldr	r3, [r7, #32]
 8006b1a:	9300      	str	r3, [sp, #0]
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	68b9      	ldr	r1, [r7, #8]
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f000 f805 	bl	8006b32 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8006b28:	697b      	ldr	r3, [r7, #20]
        }
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3718      	adds	r7, #24
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b086      	sub	sp, #24
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	60f8      	str	r0, [r7, #12]
 8006b3a:	60b9      	str	r1, [r7, #8]
 8006b3c:	607a      	str	r2, [r7, #4]
 8006b3e:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10a      	bne.n	8006b5c <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8006b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4a:	f383 8811 	msr	BASEPRI, r3
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	f3bf 8f4f 	dsb	sy
 8006b56:	617b      	str	r3, [r7, #20]
    }
 8006b58:	bf00      	nop
 8006b5a:	e7fe      	b.n	8006b5a <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d01e      	beq.n	8006ba0 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8006b62:	f000 facb 	bl	80070fc <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8006b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6e:	68ba      	ldr	r2, [r7, #8]
 8006b70:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8006b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b74:	683a      	ldr	r2, [r7, #0]
 8006b76:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7a:	6a3a      	ldr	r2, [r7, #32]
 8006b7c:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b80:	3304      	adds	r3, #4
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7fd ffa6 	bl	8004ad4 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d008      	beq.n	8006ba0 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b94:	f043 0304 	orr.w	r3, r3, #4
 8006b98:	b2da      	uxtb	r2, r3
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8006ba0:	bf00      	nop
 8006ba2:	3718      	adds	r7, #24
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b08a      	sub	sp, #40	; 0x28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
 8006bb4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10a      	bne.n	8006bd6 <xTimerGenericCommand+0x2e>
        __asm volatile
 8006bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc4:	f383 8811 	msr	BASEPRI, r3
 8006bc8:	f3bf 8f6f 	isb	sy
 8006bcc:	f3bf 8f4f 	dsb	sy
 8006bd0:	623b      	str	r3, [r7, #32]
    }
 8006bd2:	bf00      	nop
 8006bd4:	e7fe      	b.n	8006bd4 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8006bd6:	4b1a      	ldr	r3, [pc, #104]	; (8006c40 <xTimerGenericCommand+0x98>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d02a      	beq.n	8006c34 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	2b05      	cmp	r3, #5
 8006bee:	dc18      	bgt.n	8006c22 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006bf0:	f7ff fd10 	bl	8006614 <xTaskGetSchedulerState>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d109      	bne.n	8006c0e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006bfa:	4b11      	ldr	r3, [pc, #68]	; (8006c40 <xTimerGenericCommand+0x98>)
 8006bfc:	6818      	ldr	r0, [r3, #0]
 8006bfe:	f107 0114 	add.w	r1, r7, #20
 8006c02:	2300      	movs	r3, #0
 8006c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c06:	f7fe f8e9 	bl	8004ddc <xQueueGenericSend>
 8006c0a:	6278      	str	r0, [r7, #36]	; 0x24
 8006c0c:	e012      	b.n	8006c34 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006c0e:	4b0c      	ldr	r3, [pc, #48]	; (8006c40 <xTimerGenericCommand+0x98>)
 8006c10:	6818      	ldr	r0, [r3, #0]
 8006c12:	f107 0114 	add.w	r1, r7, #20
 8006c16:	2300      	movs	r3, #0
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f7fe f8df 	bl	8004ddc <xQueueGenericSend>
 8006c1e:	6278      	str	r0, [r7, #36]	; 0x24
 8006c20:	e008      	b.n	8006c34 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006c22:	4b07      	ldr	r3, [pc, #28]	; (8006c40 <xTimerGenericCommand+0x98>)
 8006c24:	6818      	ldr	r0, [r3, #0]
 8006c26:	f107 0114 	add.w	r1, r7, #20
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	683a      	ldr	r2, [r7, #0]
 8006c2e:	f7fe f9fb 	bl	8005028 <xQueueGenericSendFromISR>
 8006c32:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006c36:	4618      	mov	r0, r3
 8006c38:	3728      	adds	r7, #40	; 0x28
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	20000304 	.word	0x20000304

08006c44 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b088      	sub	sp, #32
 8006c48:	af02      	add	r7, sp, #8
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c4e:	4b22      	ldr	r3, [pc, #136]	; (8006cd8 <prvProcessExpiredTimer+0x94>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fd ffa3 	bl	8004ba8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c68:	f003 0304 	and.w	r3, r3, #4
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d022      	beq.n	8006cb6 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	699a      	ldr	r2, [r3, #24]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	18d1      	adds	r1, r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	683a      	ldr	r2, [r7, #0]
 8006c7c:	6978      	ldr	r0, [r7, #20]
 8006c7e:	f000 f8d1 	bl	8006e24 <prvInsertTimerInActiveList>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d01f      	beq.n	8006cc8 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c88:	2300      	movs	r3, #0
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	2100      	movs	r1, #0
 8006c92:	6978      	ldr	r0, [r7, #20]
 8006c94:	f7ff ff88 	bl	8006ba8 <xTimerGenericCommand>
 8006c98:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d113      	bne.n	8006cc8 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8006ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	60fb      	str	r3, [r7, #12]
    }
 8006cb2:	bf00      	nop
 8006cb4:	e7fe      	b.n	8006cb4 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cbc:	f023 0301 	bic.w	r3, r3, #1
 8006cc0:	b2da      	uxtb	r2, r3
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	6a1b      	ldr	r3, [r3, #32]
 8006ccc:	6978      	ldr	r0, [r7, #20]
 8006cce:	4798      	blx	r3
    }
 8006cd0:	bf00      	nop
 8006cd2:	3718      	adds	r7, #24
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	200002fc 	.word	0x200002fc

08006cdc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ce4:	f107 0308 	add.w	r3, r7, #8
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f000 f857 	bl	8006d9c <prvGetNextExpireTime>
 8006cee:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f000 f803 	bl	8006d00 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006cfa:	f000 f8d5 	bl	8006ea8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006cfe:	e7f1      	b.n	8006ce4 <prvTimerTask+0x8>

08006d00 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006d0a:	f7ff f89b 	bl	8005e44 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d0e:	f107 0308 	add.w	r3, r7, #8
 8006d12:	4618      	mov	r0, r3
 8006d14:	f000 f866 	bl	8006de4 <prvSampleTimeNow>
 8006d18:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d130      	bne.n	8006d82 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10a      	bne.n	8006d3c <prvProcessTimerOrBlockTask+0x3c>
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d806      	bhi.n	8006d3c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8006d2e:	f7ff f897 	bl	8005e60 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006d32:	68f9      	ldr	r1, [r7, #12]
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f7ff ff85 	bl	8006c44 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006d3a:	e024      	b.n	8006d86 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d008      	beq.n	8006d54 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d42:	4b13      	ldr	r3, [pc, #76]	; (8006d90 <prvProcessTimerOrBlockTask+0x90>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d101      	bne.n	8006d50 <prvProcessTimerOrBlockTask+0x50>
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e000      	b.n	8006d52 <prvProcessTimerOrBlockTask+0x52>
 8006d50:	2300      	movs	r3, #0
 8006d52:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d54:	4b0f      	ldr	r3, [pc, #60]	; (8006d94 <prvProcessTimerOrBlockTask+0x94>)
 8006d56:	6818      	ldr	r0, [r3, #0]
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	683a      	ldr	r2, [r7, #0]
 8006d60:	4619      	mov	r1, r3
 8006d62:	f7fe fe75 	bl	8005a50 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006d66:	f7ff f87b 	bl	8005e60 <xTaskResumeAll>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10a      	bne.n	8006d86 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006d70:	4b09      	ldr	r3, [pc, #36]	; (8006d98 <prvProcessTimerOrBlockTask+0x98>)
 8006d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d76:	601a      	str	r2, [r3, #0]
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	f3bf 8f6f 	isb	sy
    }
 8006d80:	e001      	b.n	8006d86 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006d82:	f7ff f86d 	bl	8005e60 <xTaskResumeAll>
    }
 8006d86:	bf00      	nop
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	20000300 	.word	0x20000300
 8006d94:	20000304 	.word	0x20000304
 8006d98:	e000ed04 	.word	0xe000ed04

08006d9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006d9c:	b480      	push	{r7}
 8006d9e:	b085      	sub	sp, #20
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006da4:	4b0e      	ldr	r3, [pc, #56]	; (8006de0 <prvGetNextExpireTime+0x44>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d101      	bne.n	8006db2 <prvGetNextExpireTime+0x16>
 8006dae:	2201      	movs	r2, #1
 8006db0:	e000      	b.n	8006db4 <prvGetNextExpireTime+0x18>
 8006db2:	2200      	movs	r2, #0
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d105      	bne.n	8006dcc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006dc0:	4b07      	ldr	r3, [pc, #28]	; (8006de0 <prvGetNextExpireTime+0x44>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	60fb      	str	r3, [r7, #12]
 8006dca:	e001      	b.n	8006dd0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
    }
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3714      	adds	r7, #20
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	200002fc 	.word	0x200002fc

08006de4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006dec:	f7ff f8d8 	bl	8005fa0 <xTaskGetTickCount>
 8006df0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8006df2:	4b0b      	ldr	r3, [pc, #44]	; (8006e20 <prvSampleTimeNow+0x3c>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d205      	bcs.n	8006e08 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006dfc:	f000 f91a 	bl	8007034 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	601a      	str	r2, [r3, #0]
 8006e06:	e002      	b.n	8006e0e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006e0e:	4a04      	ldr	r2, [pc, #16]	; (8006e20 <prvSampleTimeNow+0x3c>)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006e14:	68fb      	ldr	r3, [r7, #12]
    }
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	2000030c 	.word	0x2000030c

08006e24 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b086      	sub	sp, #24
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	607a      	str	r2, [r7, #4]
 8006e30:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006e32:	2300      	movs	r3, #0
 8006e34:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006e42:	68ba      	ldr	r2, [r7, #8]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d812      	bhi.n	8006e70 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	1ad2      	subs	r2, r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d302      	bcc.n	8006e5e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	617b      	str	r3, [r7, #20]
 8006e5c:	e01b      	b.n	8006e96 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006e5e:	4b10      	ldr	r3, [pc, #64]	; (8006ea0 <prvInsertTimerInActiveList+0x7c>)
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	3304      	adds	r3, #4
 8006e66:	4619      	mov	r1, r3
 8006e68:	4610      	mov	r0, r2
 8006e6a:	f7fd fe64 	bl	8004b36 <vListInsert>
 8006e6e:	e012      	b.n	8006e96 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d206      	bcs.n	8006e86 <prvInsertTimerInActiveList+0x62>
 8006e78:	68ba      	ldr	r2, [r7, #8]
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d302      	bcc.n	8006e86 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006e80:	2301      	movs	r3, #1
 8006e82:	617b      	str	r3, [r7, #20]
 8006e84:	e007      	b.n	8006e96 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e86:	4b07      	ldr	r3, [pc, #28]	; (8006ea4 <prvInsertTimerInActiveList+0x80>)
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	3304      	adds	r3, #4
 8006e8e:	4619      	mov	r1, r3
 8006e90:	4610      	mov	r0, r2
 8006e92:	f7fd fe50 	bl	8004b36 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006e96:	697b      	ldr	r3, [r7, #20]
    }
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3718      	adds	r7, #24
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	20000300 	.word	0x20000300
 8006ea4:	200002fc 	.word	0x200002fc

08006ea8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b08c      	sub	sp, #48	; 0x30
 8006eac:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006eae:	e0ae      	b.n	800700e <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f2c0 80aa 	blt.w	800700c <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebe:	695b      	ldr	r3, [r3, #20]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d004      	beq.n	8006ece <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec6:	3304      	adds	r3, #4
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7fd fe6d 	bl	8004ba8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ece:	1d3b      	adds	r3, r7, #4
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7ff ff87 	bl	8006de4 <prvSampleTimeNow>
 8006ed6:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	2b09      	cmp	r3, #9
 8006edc:	f200 8097 	bhi.w	800700e <prvProcessReceivedCommands+0x166>
 8006ee0:	a201      	add	r2, pc, #4	; (adr r2, 8006ee8 <prvProcessReceivedCommands+0x40>)
 8006ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee6:	bf00      	nop
 8006ee8:	08006f11 	.word	0x08006f11
 8006eec:	08006f11 	.word	0x08006f11
 8006ef0:	08006f11 	.word	0x08006f11
 8006ef4:	08006f85 	.word	0x08006f85
 8006ef8:	08006f99 	.word	0x08006f99
 8006efc:	08006fe3 	.word	0x08006fe3
 8006f00:	08006f11 	.word	0x08006f11
 8006f04:	08006f11 	.word	0x08006f11
 8006f08:	08006f85 	.word	0x08006f85
 8006f0c:	08006f99 	.word	0x08006f99
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f16:	f043 0301 	orr.w	r3, r3, #1
 8006f1a:	b2da      	uxtb	r2, r3
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f26:	699b      	ldr	r3, [r3, #24]
 8006f28:	18d1      	adds	r1, r2, r3
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6a3a      	ldr	r2, [r7, #32]
 8006f2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f30:	f7ff ff78 	bl	8006e24 <prvInsertTimerInActiveList>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d069      	beq.n	800700e <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f40:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f48:	f003 0304 	and.w	r3, r3, #4
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d05e      	beq.n	800700e <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006f50:	68fa      	ldr	r2, [r7, #12]
 8006f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	441a      	add	r2, r3
 8006f58:	2300      	movs	r3, #0
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	2100      	movs	r1, #0
 8006f60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f62:	f7ff fe21 	bl	8006ba8 <xTimerGenericCommand>
 8006f66:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d14f      	bne.n	800700e <prvProcessReceivedCommands+0x166>
        __asm volatile
 8006f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f72:	f383 8811 	msr	BASEPRI, r3
 8006f76:	f3bf 8f6f 	isb	sy
 8006f7a:	f3bf 8f4f 	dsb	sy
 8006f7e:	61bb      	str	r3, [r7, #24]
    }
 8006f80:	bf00      	nop
 8006f82:	e7fe      	b.n	8006f82 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f8a:	f023 0301 	bic.w	r3, r3, #1
 8006f8e:	b2da      	uxtb	r2, r3
 8006f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8006f96:	e03a      	b.n	800700e <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f9e:	f043 0301 	orr.w	r3, r3, #1
 8006fa2:	b2da      	uxtb	r2, r3
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fae:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb2:	699b      	ldr	r3, [r3, #24]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10a      	bne.n	8006fce <prvProcessReceivedCommands+0x126>
        __asm volatile
 8006fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fbc:	f383 8811 	msr	BASEPRI, r3
 8006fc0:	f3bf 8f6f 	isb	sy
 8006fc4:	f3bf 8f4f 	dsb	sy
 8006fc8:	617b      	str	r3, [r7, #20]
    }
 8006fca:	bf00      	nop
 8006fcc:	e7fe      	b.n	8006fcc <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd0:	699a      	ldr	r2, [r3, #24]
 8006fd2:	6a3b      	ldr	r3, [r7, #32]
 8006fd4:	18d1      	adds	r1, r2, r3
 8006fd6:	6a3b      	ldr	r3, [r7, #32]
 8006fd8:	6a3a      	ldr	r2, [r7, #32]
 8006fda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006fdc:	f7ff ff22 	bl	8006e24 <prvInsertTimerInActiveList>
                        break;
 8006fe0:	e015      	b.n	800700e <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fe8:	f003 0302 	and.w	r3, r3, #2
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d103      	bne.n	8006ff8 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8006ff0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ff2:	f000 fbf3 	bl	80077dc <vPortFree>
 8006ff6:	e00a      	b.n	800700e <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ffe:	f023 0301 	bic.w	r3, r3, #1
 8007002:	b2da      	uxtb	r2, r3
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800700a:	e000      	b.n	800700e <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800700c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800700e:	4b08      	ldr	r3, [pc, #32]	; (8007030 <prvProcessReceivedCommands+0x188>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f107 0108 	add.w	r1, r7, #8
 8007016:	2200      	movs	r2, #0
 8007018:	4618      	mov	r0, r3
 800701a:	f7fe f973 	bl	8005304 <xQueueReceive>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	f47f af45 	bne.w	8006eb0 <prvProcessReceivedCommands+0x8>
        }
    }
 8007026:	bf00      	nop
 8007028:	bf00      	nop
 800702a:	3728      	adds	r7, #40	; 0x28
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	20000304 	.word	0x20000304

08007034 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8007034:	b580      	push	{r7, lr}
 8007036:	b088      	sub	sp, #32
 8007038:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800703a:	e048      	b.n	80070ce <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800703c:	4b2d      	ldr	r3, [pc, #180]	; (80070f4 <prvSwitchTimerLists+0xc0>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007046:	4b2b      	ldr	r3, [pc, #172]	; (80070f4 <prvSwitchTimerLists+0xc0>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	3304      	adds	r3, #4
 8007054:	4618      	mov	r0, r3
 8007056:	f7fd fda7 	bl	8004ba8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007068:	f003 0304 	and.w	r3, r3, #4
 800706c:	2b00      	cmp	r3, #0
 800706e:	d02e      	beq.n	80070ce <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	699b      	ldr	r3, [r3, #24]
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	4413      	add	r3, r2
 8007078:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800707a:	68ba      	ldr	r2, [r7, #8]
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	429a      	cmp	r2, r3
 8007080:	d90e      	bls.n	80070a0 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	68ba      	ldr	r2, [r7, #8]
 8007086:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800708e:	4b19      	ldr	r3, [pc, #100]	; (80070f4 <prvSwitchTimerLists+0xc0>)
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	3304      	adds	r3, #4
 8007096:	4619      	mov	r1, r3
 8007098:	4610      	mov	r0, r2
 800709a:	f7fd fd4c 	bl	8004b36 <vListInsert>
 800709e:	e016      	b.n	80070ce <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070a0:	2300      	movs	r3, #0
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	2300      	movs	r3, #0
 80070a6:	693a      	ldr	r2, [r7, #16]
 80070a8:	2100      	movs	r1, #0
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f7ff fd7c 	bl	8006ba8 <xTimerGenericCommand>
 80070b0:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d10a      	bne.n	80070ce <prvSwitchTimerLists+0x9a>
        __asm volatile
 80070b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070bc:	f383 8811 	msr	BASEPRI, r3
 80070c0:	f3bf 8f6f 	isb	sy
 80070c4:	f3bf 8f4f 	dsb	sy
 80070c8:	603b      	str	r3, [r7, #0]
    }
 80070ca:	bf00      	nop
 80070cc:	e7fe      	b.n	80070cc <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80070ce:	4b09      	ldr	r3, [pc, #36]	; (80070f4 <prvSwitchTimerLists+0xc0>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1b1      	bne.n	800703c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80070d8:	4b06      	ldr	r3, [pc, #24]	; (80070f4 <prvSwitchTimerLists+0xc0>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80070de:	4b06      	ldr	r3, [pc, #24]	; (80070f8 <prvSwitchTimerLists+0xc4>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a04      	ldr	r2, [pc, #16]	; (80070f4 <prvSwitchTimerLists+0xc0>)
 80070e4:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80070e6:	4a04      	ldr	r2, [pc, #16]	; (80070f8 <prvSwitchTimerLists+0xc4>)
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	6013      	str	r3, [r2, #0]
    }
 80070ec:	bf00      	nop
 80070ee:	3718      	adds	r7, #24
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	200002fc 	.word	0x200002fc
 80070f8:	20000300 	.word	0x20000300

080070fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80070fc:	b580      	push	{r7, lr}
 80070fe:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007100:	f000 f962 	bl	80073c8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007104:	4b12      	ldr	r3, [pc, #72]	; (8007150 <prvCheckForValidListAndQueue+0x54>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d11d      	bne.n	8007148 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800710c:	4811      	ldr	r0, [pc, #68]	; (8007154 <prvCheckForValidListAndQueue+0x58>)
 800710e:	f7fd fcc1 	bl	8004a94 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8007112:	4811      	ldr	r0, [pc, #68]	; (8007158 <prvCheckForValidListAndQueue+0x5c>)
 8007114:	f7fd fcbe 	bl	8004a94 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8007118:	4b10      	ldr	r3, [pc, #64]	; (800715c <prvCheckForValidListAndQueue+0x60>)
 800711a:	4a0e      	ldr	r2, [pc, #56]	; (8007154 <prvCheckForValidListAndQueue+0x58>)
 800711c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800711e:	4b10      	ldr	r3, [pc, #64]	; (8007160 <prvCheckForValidListAndQueue+0x64>)
 8007120:	4a0d      	ldr	r2, [pc, #52]	; (8007158 <prvCheckForValidListAndQueue+0x5c>)
 8007122:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8007124:	2200      	movs	r2, #0
 8007126:	210c      	movs	r1, #12
 8007128:	200a      	movs	r0, #10
 800712a:	f7fd fdcf 	bl	8004ccc <xQueueGenericCreate>
 800712e:	4603      	mov	r3, r0
 8007130:	4a07      	ldr	r2, [pc, #28]	; (8007150 <prvCheckForValidListAndQueue+0x54>)
 8007132:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8007134:	4b06      	ldr	r3, [pc, #24]	; (8007150 <prvCheckForValidListAndQueue+0x54>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d005      	beq.n	8007148 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800713c:	4b04      	ldr	r3, [pc, #16]	; (8007150 <prvCheckForValidListAndQueue+0x54>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4908      	ldr	r1, [pc, #32]	; (8007164 <prvCheckForValidListAndQueue+0x68>)
 8007142:	4618      	mov	r0, r3
 8007144:	f7fe fc52 	bl	80059ec <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007148:	f000 f96e 	bl	8007428 <vPortExitCritical>
    }
 800714c:	bf00      	nop
 800714e:	bd80      	pop	{r7, pc}
 8007150:	20000304 	.word	0x20000304
 8007154:	200002d4 	.word	0x200002d4
 8007158:	200002e8 	.word	0x200002e8
 800715c:	200002fc 	.word	0x200002fc
 8007160:	20000300 	.word	0x20000300
 8007164:	08009a70 	.word	0x08009a70

08007168 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	3b04      	subs	r3, #4
 8007178:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007180:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	3b04      	subs	r3, #4
 8007186:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	f023 0201 	bic.w	r2, r3, #1
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	3b04      	subs	r3, #4
 8007196:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007198:	4a0c      	ldr	r2, [pc, #48]	; (80071cc <pxPortInitialiseStack+0x64>)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	3b14      	subs	r3, #20
 80071a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	3b04      	subs	r3, #4
 80071ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f06f 0202 	mvn.w	r2, #2
 80071b6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	3b20      	subs	r3, #32
 80071bc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80071be:	68fb      	ldr	r3, [r7, #12]
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3714      	adds	r7, #20
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr
 80071cc:	080071d1 	.word	0x080071d1

080071d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80071d6:	2300      	movs	r3, #0
 80071d8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80071da:	4b12      	ldr	r3, [pc, #72]	; (8007224 <prvTaskExitError+0x54>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e2:	d00a      	beq.n	80071fa <prvTaskExitError+0x2a>
        __asm volatile
 80071e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e8:	f383 8811 	msr	BASEPRI, r3
 80071ec:	f3bf 8f6f 	isb	sy
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	60fb      	str	r3, [r7, #12]
    }
 80071f6:	bf00      	nop
 80071f8:	e7fe      	b.n	80071f8 <prvTaskExitError+0x28>
        __asm volatile
 80071fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fe:	f383 8811 	msr	BASEPRI, r3
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	60bb      	str	r3, [r7, #8]
    }
 800720c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800720e:	bf00      	nop
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d0fc      	beq.n	8007210 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007216:	bf00      	nop
 8007218:	bf00      	nop
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr
 8007224:	2000000c 	.word	0x2000000c
	...

08007230 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007230:	4b07      	ldr	r3, [pc, #28]	; (8007250 <pxCurrentTCBConst2>)
 8007232:	6819      	ldr	r1, [r3, #0]
 8007234:	6808      	ldr	r0, [r1, #0]
 8007236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800723a:	f380 8809 	msr	PSP, r0
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	f04f 0000 	mov.w	r0, #0
 8007246:	f380 8811 	msr	BASEPRI, r0
 800724a:	4770      	bx	lr
 800724c:	f3af 8000 	nop.w

08007250 <pxCurrentTCBConst2>:
 8007250:	200001d0 	.word	0x200001d0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007254:	bf00      	nop
 8007256:	bf00      	nop

08007258 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007258:	4808      	ldr	r0, [pc, #32]	; (800727c <prvPortStartFirstTask+0x24>)
 800725a:	6800      	ldr	r0, [r0, #0]
 800725c:	6800      	ldr	r0, [r0, #0]
 800725e:	f380 8808 	msr	MSP, r0
 8007262:	f04f 0000 	mov.w	r0, #0
 8007266:	f380 8814 	msr	CONTROL, r0
 800726a:	b662      	cpsie	i
 800726c:	b661      	cpsie	f
 800726e:	f3bf 8f4f 	dsb	sy
 8007272:	f3bf 8f6f 	isb	sy
 8007276:	df00      	svc	0
 8007278:	bf00      	nop
 800727a:	0000      	.short	0x0000
 800727c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007280:	bf00      	nop
 8007282:	bf00      	nop

08007284 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b086      	sub	sp, #24
 8007288:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800728a:	4b46      	ldr	r3, [pc, #280]	; (80073a4 <xPortStartScheduler+0x120>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a46      	ldr	r2, [pc, #280]	; (80073a8 <xPortStartScheduler+0x124>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d10a      	bne.n	80072aa <xPortStartScheduler+0x26>
        __asm volatile
 8007294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007298:	f383 8811 	msr	BASEPRI, r3
 800729c:	f3bf 8f6f 	isb	sy
 80072a0:	f3bf 8f4f 	dsb	sy
 80072a4:	613b      	str	r3, [r7, #16]
    }
 80072a6:	bf00      	nop
 80072a8:	e7fe      	b.n	80072a8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80072aa:	4b3e      	ldr	r3, [pc, #248]	; (80073a4 <xPortStartScheduler+0x120>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a3f      	ldr	r2, [pc, #252]	; (80073ac <xPortStartScheduler+0x128>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d10a      	bne.n	80072ca <xPortStartScheduler+0x46>
        __asm volatile
 80072b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b8:	f383 8811 	msr	BASEPRI, r3
 80072bc:	f3bf 8f6f 	isb	sy
 80072c0:	f3bf 8f4f 	dsb	sy
 80072c4:	60fb      	str	r3, [r7, #12]
    }
 80072c6:	bf00      	nop
 80072c8:	e7fe      	b.n	80072c8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80072ca:	4b39      	ldr	r3, [pc, #228]	; (80073b0 <xPortStartScheduler+0x12c>)
 80072cc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	22ff      	movs	r2, #255	; 0xff
 80072da:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80072e4:	78fb      	ldrb	r3, [r7, #3]
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80072ec:	b2da      	uxtb	r2, r3
 80072ee:	4b31      	ldr	r3, [pc, #196]	; (80073b4 <xPortStartScheduler+0x130>)
 80072f0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80072f2:	4b31      	ldr	r3, [pc, #196]	; (80073b8 <xPortStartScheduler+0x134>)
 80072f4:	2207      	movs	r2, #7
 80072f6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072f8:	e009      	b.n	800730e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80072fa:	4b2f      	ldr	r3, [pc, #188]	; (80073b8 <xPortStartScheduler+0x134>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	3b01      	subs	r3, #1
 8007300:	4a2d      	ldr	r2, [pc, #180]	; (80073b8 <xPortStartScheduler+0x134>)
 8007302:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007304:	78fb      	ldrb	r3, [r7, #3]
 8007306:	b2db      	uxtb	r3, r3
 8007308:	005b      	lsls	r3, r3, #1
 800730a:	b2db      	uxtb	r3, r3
 800730c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800730e:	78fb      	ldrb	r3, [r7, #3]
 8007310:	b2db      	uxtb	r3, r3
 8007312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007316:	2b80      	cmp	r3, #128	; 0x80
 8007318:	d0ef      	beq.n	80072fa <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800731a:	4b27      	ldr	r3, [pc, #156]	; (80073b8 <xPortStartScheduler+0x134>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f1c3 0307 	rsb	r3, r3, #7
 8007322:	2b04      	cmp	r3, #4
 8007324:	d00a      	beq.n	800733c <xPortStartScheduler+0xb8>
        __asm volatile
 8007326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732a:	f383 8811 	msr	BASEPRI, r3
 800732e:	f3bf 8f6f 	isb	sy
 8007332:	f3bf 8f4f 	dsb	sy
 8007336:	60bb      	str	r3, [r7, #8]
    }
 8007338:	bf00      	nop
 800733a:	e7fe      	b.n	800733a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800733c:	4b1e      	ldr	r3, [pc, #120]	; (80073b8 <xPortStartScheduler+0x134>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	021b      	lsls	r3, r3, #8
 8007342:	4a1d      	ldr	r2, [pc, #116]	; (80073b8 <xPortStartScheduler+0x134>)
 8007344:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007346:	4b1c      	ldr	r3, [pc, #112]	; (80073b8 <xPortStartScheduler+0x134>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800734e:	4a1a      	ldr	r2, [pc, #104]	; (80073b8 <xPortStartScheduler+0x134>)
 8007350:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	b2da      	uxtb	r2, r3
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800735a:	4b18      	ldr	r3, [pc, #96]	; (80073bc <xPortStartScheduler+0x138>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a17      	ldr	r2, [pc, #92]	; (80073bc <xPortStartScheduler+0x138>)
 8007360:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007364:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007366:	4b15      	ldr	r3, [pc, #84]	; (80073bc <xPortStartScheduler+0x138>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a14      	ldr	r2, [pc, #80]	; (80073bc <xPortStartScheduler+0x138>)
 800736c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007370:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007372:	f000 f8e3 	bl	800753c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007376:	4b12      	ldr	r3, [pc, #72]	; (80073c0 <xPortStartScheduler+0x13c>)
 8007378:	2200      	movs	r2, #0
 800737a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800737c:	f000 f902 	bl	8007584 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007380:	4b10      	ldr	r3, [pc, #64]	; (80073c4 <xPortStartScheduler+0x140>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a0f      	ldr	r2, [pc, #60]	; (80073c4 <xPortStartScheduler+0x140>)
 8007386:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800738a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800738c:	f7ff ff64 	bl	8007258 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007390:	f7fe fee4 	bl	800615c <vTaskSwitchContext>
    prvTaskExitError();
 8007394:	f7ff ff1c 	bl	80071d0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3718      	adds	r7, #24
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	e000ed00 	.word	0xe000ed00
 80073a8:	410fc271 	.word	0x410fc271
 80073ac:	410fc270 	.word	0x410fc270
 80073b0:	e000e400 	.word	0xe000e400
 80073b4:	20000310 	.word	0x20000310
 80073b8:	20000314 	.word	0x20000314
 80073bc:	e000ed20 	.word	0xe000ed20
 80073c0:	2000000c 	.word	0x2000000c
 80073c4:	e000ef34 	.word	0xe000ef34

080073c8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
        __asm volatile
 80073ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d2:	f383 8811 	msr	BASEPRI, r3
 80073d6:	f3bf 8f6f 	isb	sy
 80073da:	f3bf 8f4f 	dsb	sy
 80073de:	607b      	str	r3, [r7, #4]
    }
 80073e0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80073e2:	4b0f      	ldr	r3, [pc, #60]	; (8007420 <vPortEnterCritical+0x58>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	3301      	adds	r3, #1
 80073e8:	4a0d      	ldr	r2, [pc, #52]	; (8007420 <vPortEnterCritical+0x58>)
 80073ea:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80073ec:	4b0c      	ldr	r3, [pc, #48]	; (8007420 <vPortEnterCritical+0x58>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d10f      	bne.n	8007414 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80073f4:	4b0b      	ldr	r3, [pc, #44]	; (8007424 <vPortEnterCritical+0x5c>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00a      	beq.n	8007414 <vPortEnterCritical+0x4c>
        __asm volatile
 80073fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007402:	f383 8811 	msr	BASEPRI, r3
 8007406:	f3bf 8f6f 	isb	sy
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	603b      	str	r3, [r7, #0]
    }
 8007410:	bf00      	nop
 8007412:	e7fe      	b.n	8007412 <vPortEnterCritical+0x4a>
    }
}
 8007414:	bf00      	nop
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr
 8007420:	2000000c 	.word	0x2000000c
 8007424:	e000ed04 	.word	0xe000ed04

08007428 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800742e:	4b12      	ldr	r3, [pc, #72]	; (8007478 <vPortExitCritical+0x50>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d10a      	bne.n	800744c <vPortExitCritical+0x24>
        __asm volatile
 8007436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743a:	f383 8811 	msr	BASEPRI, r3
 800743e:	f3bf 8f6f 	isb	sy
 8007442:	f3bf 8f4f 	dsb	sy
 8007446:	607b      	str	r3, [r7, #4]
    }
 8007448:	bf00      	nop
 800744a:	e7fe      	b.n	800744a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800744c:	4b0a      	ldr	r3, [pc, #40]	; (8007478 <vPortExitCritical+0x50>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	3b01      	subs	r3, #1
 8007452:	4a09      	ldr	r2, [pc, #36]	; (8007478 <vPortExitCritical+0x50>)
 8007454:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007456:	4b08      	ldr	r3, [pc, #32]	; (8007478 <vPortExitCritical+0x50>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d105      	bne.n	800746a <vPortExitCritical+0x42>
 800745e:	2300      	movs	r3, #0
 8007460:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	f383 8811 	msr	BASEPRI, r3
    }
 8007468:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800746a:	bf00      	nop
 800746c:	370c      	adds	r7, #12
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	2000000c 	.word	0x2000000c
 800747c:	00000000 	.word	0x00000000

08007480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007480:	f3ef 8009 	mrs	r0, PSP
 8007484:	f3bf 8f6f 	isb	sy
 8007488:	4b15      	ldr	r3, [pc, #84]	; (80074e0 <pxCurrentTCBConst>)
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	f01e 0f10 	tst.w	lr, #16
 8007490:	bf08      	it	eq
 8007492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800749a:	6010      	str	r0, [r2, #0]
 800749c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80074a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80074a4:	f380 8811 	msr	BASEPRI, r0
 80074a8:	f3bf 8f4f 	dsb	sy
 80074ac:	f3bf 8f6f 	isb	sy
 80074b0:	f7fe fe54 	bl	800615c <vTaskSwitchContext>
 80074b4:	f04f 0000 	mov.w	r0, #0
 80074b8:	f380 8811 	msr	BASEPRI, r0
 80074bc:	bc09      	pop	{r0, r3}
 80074be:	6819      	ldr	r1, [r3, #0]
 80074c0:	6808      	ldr	r0, [r1, #0]
 80074c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074c6:	f01e 0f10 	tst.w	lr, #16
 80074ca:	bf08      	it	eq
 80074cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80074d0:	f380 8809 	msr	PSP, r0
 80074d4:	f3bf 8f6f 	isb	sy
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	f3af 8000 	nop.w

080074e0 <pxCurrentTCBConst>:
 80074e0:	200001d0 	.word	0x200001d0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80074e4:	bf00      	nop
 80074e6:	bf00      	nop

080074e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
        __asm volatile
 80074ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f2:	f383 8811 	msr	BASEPRI, r3
 80074f6:	f3bf 8f6f 	isb	sy
 80074fa:	f3bf 8f4f 	dsb	sy
 80074fe:	607b      	str	r3, [r7, #4]
    }
 8007500:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8007502:	f001 fc7b 	bl	8008dfc <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007506:	f7fe fd6d 	bl	8005fe4 <xTaskIncrementTick>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d006      	beq.n	800751e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8007510:	f001 fcd2 	bl	8008eb8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007514:	4b08      	ldr	r3, [pc, #32]	; (8007538 <SysTick_Handler+0x50>)
 8007516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800751a:	601a      	str	r2, [r3, #0]
 800751c:	e001      	b.n	8007522 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800751e:	f001 fcaf 	bl	8008e80 <SEGGER_SYSVIEW_RecordExitISR>
 8007522:	2300      	movs	r3, #0
 8007524:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	f383 8811 	msr	BASEPRI, r3
    }
 800752c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800752e:	bf00      	nop
 8007530:	3708      	adds	r7, #8
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	e000ed04 	.word	0xe000ed04

0800753c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800753c:	b480      	push	{r7}
 800753e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007540:	4b0b      	ldr	r3, [pc, #44]	; (8007570 <vPortSetupTimerInterrupt+0x34>)
 8007542:	2200      	movs	r2, #0
 8007544:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007546:	4b0b      	ldr	r3, [pc, #44]	; (8007574 <vPortSetupTimerInterrupt+0x38>)
 8007548:	2200      	movs	r2, #0
 800754a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800754c:	4b0a      	ldr	r3, [pc, #40]	; (8007578 <vPortSetupTimerInterrupt+0x3c>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a0a      	ldr	r2, [pc, #40]	; (800757c <vPortSetupTimerInterrupt+0x40>)
 8007552:	fba2 2303 	umull	r2, r3, r2, r3
 8007556:	099b      	lsrs	r3, r3, #6
 8007558:	4a09      	ldr	r2, [pc, #36]	; (8007580 <vPortSetupTimerInterrupt+0x44>)
 800755a:	3b01      	subs	r3, #1
 800755c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800755e:	4b04      	ldr	r3, [pc, #16]	; (8007570 <vPortSetupTimerInterrupt+0x34>)
 8007560:	2207      	movs	r2, #7
 8007562:	601a      	str	r2, [r3, #0]
}
 8007564:	bf00      	nop
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr
 800756e:	bf00      	nop
 8007570:	e000e010 	.word	0xe000e010
 8007574:	e000e018 	.word	0xe000e018
 8007578:	20000000 	.word	0x20000000
 800757c:	10624dd3 	.word	0x10624dd3
 8007580:	e000e014 	.word	0xe000e014

08007584 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007584:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007594 <vPortEnableVFP+0x10>
 8007588:	6801      	ldr	r1, [r0, #0]
 800758a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800758e:	6001      	str	r1, [r0, #0]
 8007590:	4770      	bx	lr
 8007592:	0000      	.short	0x0000
 8007594:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007598:	bf00      	nop
 800759a:	bf00      	nop

0800759c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80075a2:	f3ef 8305 	mrs	r3, IPSR
 80075a6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2b0f      	cmp	r3, #15
 80075ac:	d914      	bls.n	80075d8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80075ae:	4a17      	ldr	r2, [pc, #92]	; (800760c <vPortValidateInterruptPriority+0x70>)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	4413      	add	r3, r2
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80075b8:	4b15      	ldr	r3, [pc, #84]	; (8007610 <vPortValidateInterruptPriority+0x74>)
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	7afa      	ldrb	r2, [r7, #11]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d20a      	bcs.n	80075d8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80075c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c6:	f383 8811 	msr	BASEPRI, r3
 80075ca:	f3bf 8f6f 	isb	sy
 80075ce:	f3bf 8f4f 	dsb	sy
 80075d2:	607b      	str	r3, [r7, #4]
    }
 80075d4:	bf00      	nop
 80075d6:	e7fe      	b.n	80075d6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80075d8:	4b0e      	ldr	r3, [pc, #56]	; (8007614 <vPortValidateInterruptPriority+0x78>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80075e0:	4b0d      	ldr	r3, [pc, #52]	; (8007618 <vPortValidateInterruptPriority+0x7c>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d90a      	bls.n	80075fe <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80075e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ec:	f383 8811 	msr	BASEPRI, r3
 80075f0:	f3bf 8f6f 	isb	sy
 80075f4:	f3bf 8f4f 	dsb	sy
 80075f8:	603b      	str	r3, [r7, #0]
    }
 80075fa:	bf00      	nop
 80075fc:	e7fe      	b.n	80075fc <vPortValidateInterruptPriority+0x60>
    }
 80075fe:	bf00      	nop
 8007600:	3714      	adds	r7, #20
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	e000e3f0 	.word	0xe000e3f0
 8007610:	20000310 	.word	0x20000310
 8007614:	e000ed0c 	.word	0xe000ed0c
 8007618:	20000314 	.word	0x20000314

0800761c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b08a      	sub	sp, #40	; 0x28
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8007624:	2300      	movs	r3, #0
 8007626:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8007628:	f7fe fc0c 	bl	8005e44 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800762c:	4b65      	ldr	r3, [pc, #404]	; (80077c4 <pvPortMalloc+0x1a8>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d101      	bne.n	8007638 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007634:	f000 f934 	bl	80078a0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007638:	4b63      	ldr	r3, [pc, #396]	; (80077c8 <pvPortMalloc+0x1ac>)
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4013      	ands	r3, r2
 8007640:	2b00      	cmp	r3, #0
 8007642:	f040 80a7 	bne.w	8007794 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d02d      	beq.n	80076a8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800764c:	2208      	movs	r2, #8
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	429a      	cmp	r2, r3
 8007656:	d227      	bcs.n	80076a8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8007658:	2208      	movs	r2, #8
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4413      	add	r3, r2
 800765e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f003 0307 	and.w	r3, r3, #7
 8007666:	2b00      	cmp	r3, #0
 8007668:	d021      	beq.n	80076ae <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f023 0307 	bic.w	r3, r3, #7
 8007670:	3308      	adds	r3, #8
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	429a      	cmp	r2, r3
 8007676:	d214      	bcs.n	80076a2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f023 0307 	bic.w	r3, r3, #7
 800767e:	3308      	adds	r3, #8
 8007680:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f003 0307 	and.w	r3, r3, #7
 8007688:	2b00      	cmp	r3, #0
 800768a:	d010      	beq.n	80076ae <pvPortMalloc+0x92>
        __asm volatile
 800768c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007690:	f383 8811 	msr	BASEPRI, r3
 8007694:	f3bf 8f6f 	isb	sy
 8007698:	f3bf 8f4f 	dsb	sy
 800769c:	617b      	str	r3, [r7, #20]
    }
 800769e:	bf00      	nop
 80076a0:	e7fe      	b.n	80076a0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80076a2:	2300      	movs	r3, #0
 80076a4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80076a6:	e002      	b.n	80076ae <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80076a8:	2300      	movs	r3, #0
 80076aa:	607b      	str	r3, [r7, #4]
 80076ac:	e000      	b.n	80076b0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80076ae:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d06e      	beq.n	8007794 <pvPortMalloc+0x178>
 80076b6:	4b45      	ldr	r3, [pc, #276]	; (80077cc <pvPortMalloc+0x1b0>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d869      	bhi.n	8007794 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80076c0:	4b43      	ldr	r3, [pc, #268]	; (80077d0 <pvPortMalloc+0x1b4>)
 80076c2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80076c4:	4b42      	ldr	r3, [pc, #264]	; (80077d0 <pvPortMalloc+0x1b4>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076ca:	e004      	b.n	80076d6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80076cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ce:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80076d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d903      	bls.n	80076e8 <pvPortMalloc+0xcc>
 80076e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d1f1      	bne.n	80076cc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80076e8:	4b36      	ldr	r3, [pc, #216]	; (80077c4 <pvPortMalloc+0x1a8>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d050      	beq.n	8007794 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80076f2:	6a3b      	ldr	r3, [r7, #32]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2208      	movs	r2, #8
 80076f8:	4413      	add	r3, r2
 80076fa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80076fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	6a3b      	ldr	r3, [r7, #32]
 8007702:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007706:	685a      	ldr	r2, [r3, #4]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	1ad2      	subs	r2, r2, r3
 800770c:	2308      	movs	r3, #8
 800770e:	005b      	lsls	r3, r3, #1
 8007710:	429a      	cmp	r2, r3
 8007712:	d91f      	bls.n	8007754 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4413      	add	r3, r2
 800771a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	f003 0307 	and.w	r3, r3, #7
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00a      	beq.n	800773c <pvPortMalloc+0x120>
        __asm volatile
 8007726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772a:	f383 8811 	msr	BASEPRI, r3
 800772e:	f3bf 8f6f 	isb	sy
 8007732:	f3bf 8f4f 	dsb	sy
 8007736:	613b      	str	r3, [r7, #16]
    }
 8007738:	bf00      	nop
 800773a:	e7fe      	b.n	800773a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800773c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773e:	685a      	ldr	r2, [r3, #4]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	1ad2      	subs	r2, r2, r3
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800774e:	69b8      	ldr	r0, [r7, #24]
 8007750:	f000 f908 	bl	8007964 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007754:	4b1d      	ldr	r3, [pc, #116]	; (80077cc <pvPortMalloc+0x1b0>)
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	4a1b      	ldr	r2, [pc, #108]	; (80077cc <pvPortMalloc+0x1b0>)
 8007760:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007762:	4b1a      	ldr	r3, [pc, #104]	; (80077cc <pvPortMalloc+0x1b0>)
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	4b1b      	ldr	r3, [pc, #108]	; (80077d4 <pvPortMalloc+0x1b8>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	429a      	cmp	r2, r3
 800776c:	d203      	bcs.n	8007776 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800776e:	4b17      	ldr	r3, [pc, #92]	; (80077cc <pvPortMalloc+0x1b0>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a18      	ldr	r2, [pc, #96]	; (80077d4 <pvPortMalloc+0x1b8>)
 8007774:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007778:	685a      	ldr	r2, [r3, #4]
 800777a:	4b13      	ldr	r3, [pc, #76]	; (80077c8 <pvPortMalloc+0x1ac>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	431a      	orrs	r2, r3
 8007780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007782:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007786:	2200      	movs	r2, #0
 8007788:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800778a:	4b13      	ldr	r3, [pc, #76]	; (80077d8 <pvPortMalloc+0x1bc>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	3301      	adds	r3, #1
 8007790:	4a11      	ldr	r2, [pc, #68]	; (80077d8 <pvPortMalloc+0x1bc>)
 8007792:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007794:	f7fe fb64 	bl	8005e60 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	f003 0307 	and.w	r3, r3, #7
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00a      	beq.n	80077b8 <pvPortMalloc+0x19c>
        __asm volatile
 80077a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a6:	f383 8811 	msr	BASEPRI, r3
 80077aa:	f3bf 8f6f 	isb	sy
 80077ae:	f3bf 8f4f 	dsb	sy
 80077b2:	60fb      	str	r3, [r7, #12]
    }
 80077b4:	bf00      	nop
 80077b6:	e7fe      	b.n	80077b6 <pvPortMalloc+0x19a>
    return pvReturn;
 80077b8:	69fb      	ldr	r3, [r7, #28]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3728      	adds	r7, #40	; 0x28
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	20012f20 	.word	0x20012f20
 80077c8:	20012f34 	.word	0x20012f34
 80077cc:	20012f24 	.word	0x20012f24
 80077d0:	20012f18 	.word	0x20012f18
 80077d4:	20012f28 	.word	0x20012f28
 80077d8:	20012f2c 	.word	0x20012f2c

080077dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b086      	sub	sp, #24
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d04d      	beq.n	800788a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80077ee:	2308      	movs	r3, #8
 80077f0:	425b      	negs	r3, r3
 80077f2:	697a      	ldr	r2, [r7, #20]
 80077f4:	4413      	add	r3, r2
 80077f6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	685a      	ldr	r2, [r3, #4]
 8007800:	4b24      	ldr	r3, [pc, #144]	; (8007894 <vPortFree+0xb8>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4013      	ands	r3, r2
 8007806:	2b00      	cmp	r3, #0
 8007808:	d10a      	bne.n	8007820 <vPortFree+0x44>
        __asm volatile
 800780a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780e:	f383 8811 	msr	BASEPRI, r3
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	f3bf 8f4f 	dsb	sy
 800781a:	60fb      	str	r3, [r7, #12]
    }
 800781c:	bf00      	nop
 800781e:	e7fe      	b.n	800781e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d00a      	beq.n	800783e <vPortFree+0x62>
        __asm volatile
 8007828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782c:	f383 8811 	msr	BASEPRI, r3
 8007830:	f3bf 8f6f 	isb	sy
 8007834:	f3bf 8f4f 	dsb	sy
 8007838:	60bb      	str	r3, [r7, #8]
    }
 800783a:	bf00      	nop
 800783c:	e7fe      	b.n	800783c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	685a      	ldr	r2, [r3, #4]
 8007842:	4b14      	ldr	r3, [pc, #80]	; (8007894 <vPortFree+0xb8>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4013      	ands	r3, r2
 8007848:	2b00      	cmp	r3, #0
 800784a:	d01e      	beq.n	800788a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d11a      	bne.n	800788a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	685a      	ldr	r2, [r3, #4]
 8007858:	4b0e      	ldr	r3, [pc, #56]	; (8007894 <vPortFree+0xb8>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	43db      	mvns	r3, r3
 800785e:	401a      	ands	r2, r3
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8007864:	f7fe faee 	bl	8005e44 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	685a      	ldr	r2, [r3, #4]
 800786c:	4b0a      	ldr	r3, [pc, #40]	; (8007898 <vPortFree+0xbc>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4413      	add	r3, r2
 8007872:	4a09      	ldr	r2, [pc, #36]	; (8007898 <vPortFree+0xbc>)
 8007874:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007876:	6938      	ldr	r0, [r7, #16]
 8007878:	f000 f874 	bl	8007964 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800787c:	4b07      	ldr	r3, [pc, #28]	; (800789c <vPortFree+0xc0>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	3301      	adds	r3, #1
 8007882:	4a06      	ldr	r2, [pc, #24]	; (800789c <vPortFree+0xc0>)
 8007884:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007886:	f7fe faeb 	bl	8005e60 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800788a:	bf00      	nop
 800788c:	3718      	adds	r7, #24
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	20012f34 	.word	0x20012f34
 8007898:	20012f24 	.word	0x20012f24
 800789c:	20012f30 	.word	0x20012f30

080078a0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80078a0:	b480      	push	{r7}
 80078a2:	b085      	sub	sp, #20
 80078a4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80078a6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80078aa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80078ac:	4b27      	ldr	r3, [pc, #156]	; (800794c <prvHeapInit+0xac>)
 80078ae:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f003 0307 	and.w	r3, r3, #7
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d00c      	beq.n	80078d4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	3307      	adds	r3, #7
 80078be:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f023 0307 	bic.w	r3, r3, #7
 80078c6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80078c8:	68ba      	ldr	r2, [r7, #8]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	4a1f      	ldr	r2, [pc, #124]	; (800794c <prvHeapInit+0xac>)
 80078d0:	4413      	add	r3, r2
 80078d2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80078d8:	4a1d      	ldr	r2, [pc, #116]	; (8007950 <prvHeapInit+0xb0>)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80078de:	4b1c      	ldr	r3, [pc, #112]	; (8007950 <prvHeapInit+0xb0>)
 80078e0:	2200      	movs	r2, #0
 80078e2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	4413      	add	r3, r2
 80078ea:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80078ec:	2208      	movs	r2, #8
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	1a9b      	subs	r3, r3, r2
 80078f2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f023 0307 	bic.w	r3, r3, #7
 80078fa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	4a15      	ldr	r2, [pc, #84]	; (8007954 <prvHeapInit+0xb4>)
 8007900:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007902:	4b14      	ldr	r3, [pc, #80]	; (8007954 <prvHeapInit+0xb4>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2200      	movs	r2, #0
 8007908:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800790a:	4b12      	ldr	r3, [pc, #72]	; (8007954 <prvHeapInit+0xb4>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2200      	movs	r2, #0
 8007910:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	1ad2      	subs	r2, r2, r3
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007920:	4b0c      	ldr	r3, [pc, #48]	; (8007954 <prvHeapInit+0xb4>)
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	4a0a      	ldr	r2, [pc, #40]	; (8007958 <prvHeapInit+0xb8>)
 800792e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	4a09      	ldr	r2, [pc, #36]	; (800795c <prvHeapInit+0xbc>)
 8007936:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007938:	4b09      	ldr	r3, [pc, #36]	; (8007960 <prvHeapInit+0xc0>)
 800793a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800793e:	601a      	str	r2, [r3, #0]
}
 8007940:	bf00      	nop
 8007942:	3714      	adds	r7, #20
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr
 800794c:	20000318 	.word	0x20000318
 8007950:	20012f18 	.word	0x20012f18
 8007954:	20012f20 	.word	0x20012f20
 8007958:	20012f28 	.word	0x20012f28
 800795c:	20012f24 	.word	0x20012f24
 8007960:	20012f34 	.word	0x20012f34

08007964 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800796c:	4b28      	ldr	r3, [pc, #160]	; (8007a10 <prvInsertBlockIntoFreeList+0xac>)
 800796e:	60fb      	str	r3, [r7, #12]
 8007970:	e002      	b.n	8007978 <prvInsertBlockIntoFreeList+0x14>
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	60fb      	str	r3, [r7, #12]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	429a      	cmp	r2, r3
 8007980:	d8f7      	bhi.n	8007972 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	68ba      	ldr	r2, [r7, #8]
 800798c:	4413      	add	r3, r2
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	429a      	cmp	r2, r3
 8007992:	d108      	bne.n	80079a6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	685a      	ldr	r2, [r3, #4]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	441a      	add	r2, r3
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	68ba      	ldr	r2, [r7, #8]
 80079b0:	441a      	add	r2, r3
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d118      	bne.n	80079ec <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	4b15      	ldr	r3, [pc, #84]	; (8007a14 <prvInsertBlockIntoFreeList+0xb0>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d00d      	beq.n	80079e2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	685a      	ldr	r2, [r3, #4]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	441a      	add	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	601a      	str	r2, [r3, #0]
 80079e0:	e008      	b.n	80079f4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80079e2:	4b0c      	ldr	r3, [pc, #48]	; (8007a14 <prvInsertBlockIntoFreeList+0xb0>)
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	601a      	str	r2, [r3, #0]
 80079ea:	e003      	b.n	80079f4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d002      	beq.n	8007a02 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007a02:	bf00      	nop
 8007a04:	3714      	adds	r7, #20
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	20012f18 	.word	0x20012f18
 8007a14:	20012f20 	.word	0x20012f20

08007a18 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8007a1e:	4b26      	ldr	r3, [pc, #152]	; (8007ab8 <_DoInit+0xa0>)
 8007a20:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8007a22:	22a8      	movs	r2, #168	; 0xa8
 8007a24:	2100      	movs	r1, #0
 8007a26:	6838      	ldr	r0, [r7, #0]
 8007a28:	f001 fed8 	bl	80097dc <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	2203      	movs	r2, #3
 8007a30:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	2203      	movs	r2, #3
 8007a36:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	4a20      	ldr	r2, [pc, #128]	; (8007abc <_DoInit+0xa4>)
 8007a3c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	4a1f      	ldr	r2, [pc, #124]	; (8007ac0 <_DoInit+0xa8>)
 8007a42:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007a4a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	2200      	movs	r2, #0
 8007a56:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	4a16      	ldr	r2, [pc, #88]	; (8007abc <_DoInit+0xa4>)
 8007a62:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	4a17      	ldr	r2, [pc, #92]	; (8007ac4 <_DoInit+0xac>)
 8007a68:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	2210      	movs	r2, #16
 8007a6e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	2200      	movs	r2, #0
 8007a74:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8007a82:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8007a86:	2300      	movs	r3, #0
 8007a88:	607b      	str	r3, [r7, #4]
 8007a8a:	e00c      	b.n	8007aa6 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f1c3 030f 	rsb	r3, r3, #15
 8007a92:	4a0d      	ldr	r2, [pc, #52]	; (8007ac8 <_DoInit+0xb0>)
 8007a94:	5cd1      	ldrb	r1, [r2, r3]
 8007a96:	683a      	ldr	r2, [r7, #0]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	460a      	mov	r2, r1
 8007a9e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	607b      	str	r3, [r7, #4]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2b0f      	cmp	r3, #15
 8007aaa:	d9ef      	bls.n	8007a8c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8007aac:	f3bf 8f5f 	dmb	sy
}
 8007ab0:	bf00      	nop
 8007ab2:	3708      	adds	r7, #8
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	20012f38 	.word	0x20012f38
 8007abc:	08009a78 	.word	0x08009a78
 8007ac0:	20012fe0 	.word	0x20012fe0
 8007ac4:	200133e0 	.word	0x200133e0
 8007ac8:	08009b68 	.word	0x08009b68

08007acc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b08c      	sub	sp, #48	; 0x30
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8007ad8:	4b3e      	ldr	r3, [pc, #248]	; (8007bd4 <SEGGER_RTT_ReadNoLock+0x108>)
 8007ada:	623b      	str	r3, [r7, #32]
 8007adc:	6a3b      	ldr	r3, [r7, #32]
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d101      	bne.n	8007aea <SEGGER_RTT_ReadNoLock+0x1e>
 8007ae6:	f7ff ff97 	bl	8007a18 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	4613      	mov	r3, r2
 8007aee:	005b      	lsls	r3, r3, #1
 8007af0:	4413      	add	r3, r2
 8007af2:	00db      	lsls	r3, r3, #3
 8007af4:	3360      	adds	r3, #96	; 0x60
 8007af6:	4a37      	ldr	r2, [pc, #220]	; (8007bd4 <SEGGER_RTT_ReadNoLock+0x108>)
 8007af8:	4413      	add	r3, r2
 8007afa:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	691b      	ldr	r3, [r3, #16]
 8007b04:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8007b10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d92b      	bls.n	8007b70 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	689a      	ldr	r2, [r3, #8]
 8007b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1e:	1ad3      	subs	r3, r2, r3
 8007b20:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007b22:	697a      	ldr	r2, [r7, #20]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4293      	cmp	r3, r2
 8007b28:	bf28      	it	cs
 8007b2a:	4613      	movcs	r3, r2
 8007b2c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8007b2e:	69fb      	ldr	r3, [r7, #28]
 8007b30:	685a      	ldr	r2, [r3, #4]
 8007b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b34:	4413      	add	r3, r2
 8007b36:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8007b38:	697a      	ldr	r2, [r7, #20]
 8007b3a:	6939      	ldr	r1, [r7, #16]
 8007b3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b3e:	f001 fe3f 	bl	80097c0 <memcpy>
    NumBytesRead += NumBytesRem;
 8007b42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	4413      	add	r3, r2
 8007b48:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8007b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	4413      	add	r3, r2
 8007b50:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8007b5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	4413      	add	r3, r2
 8007b60:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d101      	bne.n	8007b70 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8007b70:	69ba      	ldr	r2, [r7, #24]
 8007b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007b78:	697a      	ldr	r2, [r7, #20]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	bf28      	it	cs
 8007b80:	4613      	movcs	r3, r2
 8007b82:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d019      	beq.n	8007bbe <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	685a      	ldr	r2, [r3, #4]
 8007b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b90:	4413      	add	r3, r2
 8007b92:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8007b94:	697a      	ldr	r2, [r7, #20]
 8007b96:	6939      	ldr	r1, [r7, #16]
 8007b98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b9a:	f001 fe11 	bl	80097c0 <memcpy>
    NumBytesRead += NumBytesRem;
 8007b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8007ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	4413      	add	r3, r2
 8007bac:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	1ad3      	subs	r3, r2, r3
 8007bb4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8007bb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	4413      	add	r3, r2
 8007bbc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8007bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d002      	beq.n	8007bca <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bc8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8007bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3730      	adds	r7, #48	; 0x30
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	20012f38 	.word	0x20012f38

08007bd8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b088      	sub	sp, #32
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	607a      	str	r2, [r7, #4]
 8007be4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8007be6:	4b3d      	ldr	r3, [pc, #244]	; (8007cdc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8007be8:	61bb      	str	r3, [r7, #24]
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d101      	bne.n	8007bf8 <SEGGER_RTT_AllocUpBuffer+0x20>
 8007bf4:	f7ff ff10 	bl	8007a18 <_DoInit>
  SEGGER_RTT_LOCK();
 8007bf8:	f3ef 8311 	mrs	r3, BASEPRI
 8007bfc:	f04f 0120 	mov.w	r1, #32
 8007c00:	f381 8811 	msr	BASEPRI, r1
 8007c04:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007c06:	4b35      	ldr	r3, [pc, #212]	; (8007cdc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8007c08:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8007c0e:	6939      	ldr	r1, [r7, #16]
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	1c5a      	adds	r2, r3, #1
 8007c14:	4613      	mov	r3, r2
 8007c16:	005b      	lsls	r3, r3, #1
 8007c18:	4413      	add	r3, r2
 8007c1a:	00db      	lsls	r3, r3, #3
 8007c1c:	440b      	add	r3, r1
 8007c1e:	3304      	adds	r3, #4
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d008      	beq.n	8007c38 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	69fa      	ldr	r2, [r7, #28]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	dbeb      	blt.n	8007c0e <SEGGER_RTT_AllocUpBuffer+0x36>
 8007c36:	e000      	b.n	8007c3a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8007c38:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	691b      	ldr	r3, [r3, #16]
 8007c3e:	69fa      	ldr	r2, [r7, #28]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	da3f      	bge.n	8007cc4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8007c44:	6939      	ldr	r1, [r7, #16]
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	1c5a      	adds	r2, r3, #1
 8007c4a:	4613      	mov	r3, r2
 8007c4c:	005b      	lsls	r3, r3, #1
 8007c4e:	4413      	add	r3, r2
 8007c50:	00db      	lsls	r3, r3, #3
 8007c52:	440b      	add	r3, r1
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8007c58:	6939      	ldr	r1, [r7, #16]
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	1c5a      	adds	r2, r3, #1
 8007c5e:	4613      	mov	r3, r2
 8007c60:	005b      	lsls	r3, r3, #1
 8007c62:	4413      	add	r3, r2
 8007c64:	00db      	lsls	r3, r3, #3
 8007c66:	440b      	add	r3, r1
 8007c68:	3304      	adds	r3, #4
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8007c6e:	6939      	ldr	r1, [r7, #16]
 8007c70:	69fa      	ldr	r2, [r7, #28]
 8007c72:	4613      	mov	r3, r2
 8007c74:	005b      	lsls	r3, r3, #1
 8007c76:	4413      	add	r3, r2
 8007c78:	00db      	lsls	r3, r3, #3
 8007c7a:	440b      	add	r3, r1
 8007c7c:	3320      	adds	r3, #32
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8007c82:	6939      	ldr	r1, [r7, #16]
 8007c84:	69fa      	ldr	r2, [r7, #28]
 8007c86:	4613      	mov	r3, r2
 8007c88:	005b      	lsls	r3, r3, #1
 8007c8a:	4413      	add	r3, r2
 8007c8c:	00db      	lsls	r3, r3, #3
 8007c8e:	440b      	add	r3, r1
 8007c90:	3328      	adds	r3, #40	; 0x28
 8007c92:	2200      	movs	r2, #0
 8007c94:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8007c96:	6939      	ldr	r1, [r7, #16]
 8007c98:	69fa      	ldr	r2, [r7, #28]
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	005b      	lsls	r3, r3, #1
 8007c9e:	4413      	add	r3, r2
 8007ca0:	00db      	lsls	r3, r3, #3
 8007ca2:	440b      	add	r3, r1
 8007ca4:	3324      	adds	r3, #36	; 0x24
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8007caa:	6939      	ldr	r1, [r7, #16]
 8007cac:	69fa      	ldr	r2, [r7, #28]
 8007cae:	4613      	mov	r3, r2
 8007cb0:	005b      	lsls	r3, r3, #1
 8007cb2:	4413      	add	r3, r2
 8007cb4:	00db      	lsls	r3, r3, #3
 8007cb6:	440b      	add	r3, r1
 8007cb8:	332c      	adds	r3, #44	; 0x2c
 8007cba:	683a      	ldr	r2, [r7, #0]
 8007cbc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8007cbe:	f3bf 8f5f 	dmb	sy
 8007cc2:	e002      	b.n	8007cca <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8007cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8007cc8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8007cd0:	69fb      	ldr	r3, [r7, #28]
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3720      	adds	r7, #32
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	20012f38 	.word	0x20012f38

08007ce0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b08a      	sub	sp, #40	; 0x28
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
 8007cec:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8007cee:	4b21      	ldr	r3, [pc, #132]	; (8007d74 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8007cf0:	623b      	str	r3, [r7, #32]
 8007cf2:	6a3b      	ldr	r3, [r7, #32]
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d101      	bne.n	8007d00 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8007cfc:	f7ff fe8c 	bl	8007a18 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007d00:	4b1c      	ldr	r3, [pc, #112]	; (8007d74 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8007d02:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2b02      	cmp	r3, #2
 8007d08:	d82c      	bhi.n	8007d64 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8007d0a:	f3ef 8311 	mrs	r3, BASEPRI
 8007d0e:	f04f 0120 	mov.w	r1, #32
 8007d12:	f381 8811 	msr	BASEPRI, r1
 8007d16:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	005b      	lsls	r3, r3, #1
 8007d1e:	4413      	add	r3, r2
 8007d20:	00db      	lsls	r3, r3, #3
 8007d22:	3360      	adds	r3, #96	; 0x60
 8007d24:	69fa      	ldr	r2, [r7, #28]
 8007d26:	4413      	add	r3, r2
 8007d28:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00e      	beq.n	8007d4e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	683a      	ldr	r2, [r7, #0]
 8007d40:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	2200      	movs	r2, #0
 8007d46:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d52:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8007d54:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	627b      	str	r3, [r7, #36]	; 0x24
 8007d62:	e002      	b.n	8007d6a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8007d64:	f04f 33ff 	mov.w	r3, #4294967295
 8007d68:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8007d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3728      	adds	r7, #40	; 0x28
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	20012f38 	.word	0x20012f38

08007d78 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8007d78:	b480      	push	{r7}
 8007d7a:	b087      	sub	sp, #28
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	60b9      	str	r1, [r7, #8]
 8007d82:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8007d84:	2300      	movs	r3, #0
 8007d86:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00f      	beq.n	8007dae <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8007d8e:	e002      	b.n	8007d96 <_EncodeStr+0x1e>
      Len++;
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	3301      	adds	r3, #1
 8007d94:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8007d96:	68ba      	ldr	r2, [r7, #8]
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1f6      	bne.n	8007d90 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8007da2:	693a      	ldr	r2, [r7, #16]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d901      	bls.n	8007dae <_EncodeStr+0x36>
      Len = Limit;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	2bfe      	cmp	r3, #254	; 0xfe
 8007db2:	d806      	bhi.n	8007dc2 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	1c5a      	adds	r2, r3, #1
 8007db8:	60fa      	str	r2, [r7, #12]
 8007dba:	693a      	ldr	r2, [r7, #16]
 8007dbc:	b2d2      	uxtb	r2, r2
 8007dbe:	701a      	strb	r2, [r3, #0]
 8007dc0:	e011      	b.n	8007de6 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	1c5a      	adds	r2, r3, #1
 8007dc6:	60fa      	str	r2, [r7, #12]
 8007dc8:	22ff      	movs	r2, #255	; 0xff
 8007dca:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	1c5a      	adds	r2, r3, #1
 8007dd0:	60fa      	str	r2, [r7, #12]
 8007dd2:	693a      	ldr	r2, [r7, #16]
 8007dd4:	b2d2      	uxtb	r2, r2
 8007dd6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	0a19      	lsrs	r1, r3, #8
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	1c5a      	adds	r2, r3, #1
 8007de0:	60fa      	str	r2, [r7, #12]
 8007de2:	b2ca      	uxtb	r2, r1
 8007de4:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8007de6:	2300      	movs	r3, #0
 8007de8:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8007dea:	e00a      	b.n	8007e02 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8007dec:	68ba      	ldr	r2, [r7, #8]
 8007dee:	1c53      	adds	r3, r2, #1
 8007df0:	60bb      	str	r3, [r7, #8]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	1c59      	adds	r1, r3, #1
 8007df6:	60f9      	str	r1, [r7, #12]
 8007df8:	7812      	ldrb	r2, [r2, #0]
 8007dfa:	701a      	strb	r2, [r3, #0]
    n++;
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8007e02:	697a      	ldr	r2, [r7, #20]
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d3f0      	bcc.n	8007dec <_EncodeStr+0x74>
  }
  return pPayload;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	371c      	adds	r7, #28
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	3307      	adds	r3, #7
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007e36:	4b35      	ldr	r3, [pc, #212]	; (8007f0c <_HandleIncomingPacket+0xdc>)
 8007e38:	7e1b      	ldrb	r3, [r3, #24]
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	1cfb      	adds	r3, r7, #3
 8007e3e:	2201      	movs	r2, #1
 8007e40:	4619      	mov	r1, r3
 8007e42:	f7ff fe43 	bl	8007acc <SEGGER_RTT_ReadNoLock>
 8007e46:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d052      	beq.n	8007ef4 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8007e4e:	78fb      	ldrb	r3, [r7, #3]
 8007e50:	2b80      	cmp	r3, #128	; 0x80
 8007e52:	d031      	beq.n	8007eb8 <_HandleIncomingPacket+0x88>
 8007e54:	2b80      	cmp	r3, #128	; 0x80
 8007e56:	dc40      	bgt.n	8007eda <_HandleIncomingPacket+0xaa>
 8007e58:	2b07      	cmp	r3, #7
 8007e5a:	dc15      	bgt.n	8007e88 <_HandleIncomingPacket+0x58>
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	dd3c      	ble.n	8007eda <_HandleIncomingPacket+0xaa>
 8007e60:	3b01      	subs	r3, #1
 8007e62:	2b06      	cmp	r3, #6
 8007e64:	d839      	bhi.n	8007eda <_HandleIncomingPacket+0xaa>
 8007e66:	a201      	add	r2, pc, #4	; (adr r2, 8007e6c <_HandleIncomingPacket+0x3c>)
 8007e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e6c:	08007e8f 	.word	0x08007e8f
 8007e70:	08007e95 	.word	0x08007e95
 8007e74:	08007e9b 	.word	0x08007e9b
 8007e78:	08007ea1 	.word	0x08007ea1
 8007e7c:	08007ea7 	.word	0x08007ea7
 8007e80:	08007ead 	.word	0x08007ead
 8007e84:	08007eb3 	.word	0x08007eb3
 8007e88:	2b7f      	cmp	r3, #127	; 0x7f
 8007e8a:	d035      	beq.n	8007ef8 <_HandleIncomingPacket+0xc8>
 8007e8c:	e025      	b.n	8007eda <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8007e8e:	f000 fced 	bl	800886c <SEGGER_SYSVIEW_Start>
      break;
 8007e92:	e036      	b.n	8007f02 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8007e94:	f000 fda4 	bl	80089e0 <SEGGER_SYSVIEW_Stop>
      break;
 8007e98:	e033      	b.n	8007f02 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8007e9a:	f000 ff7d 	bl	8008d98 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8007e9e:	e030      	b.n	8007f02 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8007ea0:	f000 ff42 	bl	8008d28 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8007ea4:	e02d      	b.n	8007f02 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8007ea6:	f000 fdc1 	bl	8008a2c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8007eaa:	e02a      	b.n	8007f02 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8007eac:	f001 fa10 	bl	80092d0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8007eb0:	e027      	b.n	8007f02 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8007eb2:	f001 f9ef 	bl	8009294 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8007eb6:	e024      	b.n	8007f02 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007eb8:	4b14      	ldr	r3, [pc, #80]	; (8007f0c <_HandleIncomingPacket+0xdc>)
 8007eba:	7e1b      	ldrb	r3, [r3, #24]
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	1cfb      	adds	r3, r7, #3
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	f7ff fe02 	bl	8007acc <SEGGER_RTT_ReadNoLock>
 8007ec8:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d015      	beq.n	8007efc <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8007ed0:	78fb      	ldrb	r3, [r7, #3]
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f001 f95e 	bl	8009194 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8007ed8:	e010      	b.n	8007efc <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8007eda:	78fb      	ldrb	r3, [r7, #3]
 8007edc:	b25b      	sxtb	r3, r3
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	da0e      	bge.n	8007f00 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007ee2:	4b0a      	ldr	r3, [pc, #40]	; (8007f0c <_HandleIncomingPacket+0xdc>)
 8007ee4:	7e1b      	ldrb	r3, [r3, #24]
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	1cfb      	adds	r3, r7, #3
 8007eea:	2201      	movs	r2, #1
 8007eec:	4619      	mov	r1, r3
 8007eee:	f7ff fded 	bl	8007acc <SEGGER_RTT_ReadNoLock>
      }
      break;
 8007ef2:	e005      	b.n	8007f00 <_HandleIncomingPacket+0xd0>
    }
  }
 8007ef4:	bf00      	nop
 8007ef6:	e004      	b.n	8007f02 <_HandleIncomingPacket+0xd2>
      break;
 8007ef8:	bf00      	nop
 8007efa:	e002      	b.n	8007f02 <_HandleIncomingPacket+0xd2>
      break;
 8007efc:	bf00      	nop
 8007efe:	e000      	b.n	8007f02 <_HandleIncomingPacket+0xd2>
      break;
 8007f00:	bf00      	nop
}
 8007f02:	bf00      	nop
 8007f04:	3708      	adds	r7, #8
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	200143f8 	.word	0x200143f8

08007f10 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b08c      	sub	sp, #48	; 0x30
 8007f14:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8007f16:	2301      	movs	r3, #1
 8007f18:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8007f1a:	1d3b      	adds	r3, r7, #4
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f24:	4b31      	ldr	r3, [pc, #196]	; (8007fec <_TrySendOverflowPacket+0xdc>)
 8007f26:	695b      	ldr	r3, [r3, #20]
 8007f28:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f2a:	e00b      	b.n	8007f44 <_TrySendOverflowPacket+0x34>
 8007f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2e:	b2da      	uxtb	r2, r3
 8007f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f32:	1c59      	adds	r1, r3, #1
 8007f34:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007f36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f3a:	b2d2      	uxtb	r2, r2
 8007f3c:	701a      	strb	r2, [r3, #0]
 8007f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f40:	09db      	lsrs	r3, r3, #7
 8007f42:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f46:	2b7f      	cmp	r3, #127	; 0x7f
 8007f48:	d8f0      	bhi.n	8007f2c <_TrySendOverflowPacket+0x1c>
 8007f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4c:	1c5a      	adds	r2, r3, #1
 8007f4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f52:	b2d2      	uxtb	r2, r2
 8007f54:	701a      	strb	r2, [r3, #0]
 8007f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f58:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007f5a:	4b25      	ldr	r3, [pc, #148]	; (8007ff0 <_TrySendOverflowPacket+0xe0>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8007f60:	4b22      	ldr	r3, [pc, #136]	; (8007fec <_TrySendOverflowPacket+0xdc>)
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	69ba      	ldr	r2, [r7, #24]
 8007f66:	1ad3      	subs	r3, r2, r3
 8007f68:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	623b      	str	r3, [r7, #32]
 8007f72:	e00b      	b.n	8007f8c <_TrySendOverflowPacket+0x7c>
 8007f74:	6a3b      	ldr	r3, [r7, #32]
 8007f76:	b2da      	uxtb	r2, r3
 8007f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7a:	1c59      	adds	r1, r3, #1
 8007f7c:	6279      	str	r1, [r7, #36]	; 0x24
 8007f7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f82:	b2d2      	uxtb	r2, r2
 8007f84:	701a      	strb	r2, [r3, #0]
 8007f86:	6a3b      	ldr	r3, [r7, #32]
 8007f88:	09db      	lsrs	r3, r3, #7
 8007f8a:	623b      	str	r3, [r7, #32]
 8007f8c:	6a3b      	ldr	r3, [r7, #32]
 8007f8e:	2b7f      	cmp	r3, #127	; 0x7f
 8007f90:	d8f0      	bhi.n	8007f74 <_TrySendOverflowPacket+0x64>
 8007f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f94:	1c5a      	adds	r2, r3, #1
 8007f96:	627a      	str	r2, [r7, #36]	; 0x24
 8007f98:	6a3a      	ldr	r2, [r7, #32]
 8007f9a:	b2d2      	uxtb	r2, r2
 8007f9c:	701a      	strb	r2, [r3, #0]
 8007f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8007fa2:	4b12      	ldr	r3, [pc, #72]	; (8007fec <_TrySendOverflowPacket+0xdc>)
 8007fa4:	785b      	ldrb	r3, [r3, #1]
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	1d3b      	adds	r3, r7, #4
 8007faa:	69fa      	ldr	r2, [r7, #28]
 8007fac:	1ad3      	subs	r3, r2, r3
 8007fae:	461a      	mov	r2, r3
 8007fb0:	1d3b      	adds	r3, r7, #4
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	f7f8 f91c 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d009      	beq.n	8007fd6 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8007fc2:	4a0a      	ldr	r2, [pc, #40]	; (8007fec <_TrySendOverflowPacket+0xdc>)
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8007fc8:	4b08      	ldr	r3, [pc, #32]	; (8007fec <_TrySendOverflowPacket+0xdc>)
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	4b06      	ldr	r3, [pc, #24]	; (8007fec <_TrySendOverflowPacket+0xdc>)
 8007fd2:	701a      	strb	r2, [r3, #0]
 8007fd4:	e004      	b.n	8007fe0 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8007fd6:	4b05      	ldr	r3, [pc, #20]	; (8007fec <_TrySendOverflowPacket+0xdc>)
 8007fd8:	695b      	ldr	r3, [r3, #20]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	4a03      	ldr	r2, [pc, #12]	; (8007fec <_TrySendOverflowPacket+0xdc>)
 8007fde:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8007fe0:	693b      	ldr	r3, [r7, #16]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3730      	adds	r7, #48	; 0x30
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	200143f8 	.word	0x200143f8
 8007ff0:	e0001004 	.word	0xe0001004

08007ff4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b08a      	sub	sp, #40	; 0x28
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8008000:	4b98      	ldr	r3, [pc, #608]	; (8008264 <_SendPacket+0x270>)
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	2b01      	cmp	r3, #1
 8008006:	d010      	beq.n	800802a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8008008:	4b96      	ldr	r3, [pc, #600]	; (8008264 <_SendPacket+0x270>)
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	f000 812d 	beq.w	800826c <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8008012:	4b94      	ldr	r3, [pc, #592]	; (8008264 <_SendPacket+0x270>)
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	2b02      	cmp	r3, #2
 8008018:	d109      	bne.n	800802e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800801a:	f7ff ff79 	bl	8007f10 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800801e:	4b91      	ldr	r3, [pc, #580]	; (8008264 <_SendPacket+0x270>)
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	2b01      	cmp	r3, #1
 8008024:	f040 8124 	bne.w	8008270 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8008028:	e001      	b.n	800802e <_SendPacket+0x3a>
    goto Send;
 800802a:	bf00      	nop
 800802c:	e000      	b.n	8008030 <_SendPacket+0x3c>
Send:
 800802e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2b1f      	cmp	r3, #31
 8008034:	d809      	bhi.n	800804a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8008036:	4b8b      	ldr	r3, [pc, #556]	; (8008264 <_SendPacket+0x270>)
 8008038:	69da      	ldr	r2, [r3, #28]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	fa22 f303 	lsr.w	r3, r2, r3
 8008040:	f003 0301 	and.w	r3, r3, #1
 8008044:	2b00      	cmp	r3, #0
 8008046:	f040 8115 	bne.w	8008274 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2b17      	cmp	r3, #23
 800804e:	d807      	bhi.n	8008060 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	3b01      	subs	r3, #1
 8008054:	60fb      	str	r3, [r7, #12]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	b2da      	uxtb	r2, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	701a      	strb	r2, [r3, #0]
 800805e:	e0c4      	b.n	80081ea <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8008060:	68ba      	ldr	r2, [r7, #8]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	1ad3      	subs	r3, r2, r3
 8008066:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	2b7f      	cmp	r3, #127	; 0x7f
 800806c:	d912      	bls.n	8008094 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	09da      	lsrs	r2, r3, #7
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	3b01      	subs	r3, #1
 8008076:	60fb      	str	r3, [r7, #12]
 8008078:	b2d2      	uxtb	r2, r2
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	b2db      	uxtb	r3, r3
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	3a01      	subs	r2, #1
 8008086:	60fa      	str	r2, [r7, #12]
 8008088:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800808c:	b2da      	uxtb	r2, r3
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	701a      	strb	r2, [r3, #0]
 8008092:	e006      	b.n	80080a2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	3b01      	subs	r3, #1
 8008098:	60fb      	str	r3, [r7, #12]
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	b2da      	uxtb	r2, r3
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2b7e      	cmp	r3, #126	; 0x7e
 80080a6:	d807      	bhi.n	80080b8 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	3b01      	subs	r3, #1
 80080ac:	60fb      	str	r3, [r7, #12]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	b2da      	uxtb	r2, r3
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	701a      	strb	r2, [r3, #0]
 80080b6:	e098      	b.n	80081ea <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080be:	d212      	bcs.n	80080e6 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	09da      	lsrs	r2, r3, #7
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	3b01      	subs	r3, #1
 80080c8:	60fb      	str	r3, [r7, #12]
 80080ca:	b2d2      	uxtb	r2, r2
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	3a01      	subs	r2, #1
 80080d8:	60fa      	str	r2, [r7, #12]
 80080da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80080de:	b2da      	uxtb	r2, r3
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	701a      	strb	r2, [r3, #0]
 80080e4:	e081      	b.n	80081ea <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080ec:	d21d      	bcs.n	800812a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	0b9a      	lsrs	r2, r3, #14
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	3b01      	subs	r3, #1
 80080f6:	60fb      	str	r3, [r7, #12]
 80080f8:	b2d2      	uxtb	r2, r2
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	09db      	lsrs	r3, r3, #7
 8008102:	b2db      	uxtb	r3, r3
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	3a01      	subs	r2, #1
 8008108:	60fa      	str	r2, [r7, #12]
 800810a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800810e:	b2da      	uxtb	r2, r3
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	b2db      	uxtb	r3, r3
 8008118:	68fa      	ldr	r2, [r7, #12]
 800811a:	3a01      	subs	r2, #1
 800811c:	60fa      	str	r2, [r7, #12]
 800811e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008122:	b2da      	uxtb	r2, r3
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	701a      	strb	r2, [r3, #0]
 8008128:	e05f      	b.n	80081ea <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008130:	d228      	bcs.n	8008184 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	0d5a      	lsrs	r2, r3, #21
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	3b01      	subs	r3, #1
 800813a:	60fb      	str	r3, [r7, #12]
 800813c:	b2d2      	uxtb	r2, r2
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	0b9b      	lsrs	r3, r3, #14
 8008146:	b2db      	uxtb	r3, r3
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	3a01      	subs	r2, #1
 800814c:	60fa      	str	r2, [r7, #12]
 800814e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008152:	b2da      	uxtb	r2, r3
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	09db      	lsrs	r3, r3, #7
 800815c:	b2db      	uxtb	r3, r3
 800815e:	68fa      	ldr	r2, [r7, #12]
 8008160:	3a01      	subs	r2, #1
 8008162:	60fa      	str	r2, [r7, #12]
 8008164:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008168:	b2da      	uxtb	r2, r3
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	b2db      	uxtb	r3, r3
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	3a01      	subs	r2, #1
 8008176:	60fa      	str	r2, [r7, #12]
 8008178:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800817c:	b2da      	uxtb	r2, r3
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	701a      	strb	r2, [r3, #0]
 8008182:	e032      	b.n	80081ea <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	0f1a      	lsrs	r2, r3, #28
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	3b01      	subs	r3, #1
 800818c:	60fb      	str	r3, [r7, #12]
 800818e:	b2d2      	uxtb	r2, r2
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	0d5b      	lsrs	r3, r3, #21
 8008198:	b2db      	uxtb	r3, r3
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	3a01      	subs	r2, #1
 800819e:	60fa      	str	r2, [r7, #12]
 80081a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80081a4:	b2da      	uxtb	r2, r3
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	0b9b      	lsrs	r3, r3, #14
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	68fa      	ldr	r2, [r7, #12]
 80081b2:	3a01      	subs	r2, #1
 80081b4:	60fa      	str	r2, [r7, #12]
 80081b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80081ba:	b2da      	uxtb	r2, r3
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	09db      	lsrs	r3, r3, #7
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	3a01      	subs	r2, #1
 80081ca:	60fa      	str	r2, [r7, #12]
 80081cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80081d0:	b2da      	uxtb	r2, r3
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	3a01      	subs	r2, #1
 80081de:	60fa      	str	r2, [r7, #12]
 80081e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80081e4:	b2da      	uxtb	r2, r3
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80081ea:	4b1f      	ldr	r3, [pc, #124]	; (8008268 <_SendPacket+0x274>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80081f0:	4b1c      	ldr	r3, [pc, #112]	; (8008264 <_SendPacket+0x270>)
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	69ba      	ldr	r2, [r7, #24]
 80081f6:	1ad3      	subs	r3, r2, r3
 80081f8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	627b      	str	r3, [r7, #36]	; 0x24
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	623b      	str	r3, [r7, #32]
 8008202:	e00b      	b.n	800821c <_SendPacket+0x228>
 8008204:	6a3b      	ldr	r3, [r7, #32]
 8008206:	b2da      	uxtb	r2, r3
 8008208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820a:	1c59      	adds	r1, r3, #1
 800820c:	6279      	str	r1, [r7, #36]	; 0x24
 800820e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008212:	b2d2      	uxtb	r2, r2
 8008214:	701a      	strb	r2, [r3, #0]
 8008216:	6a3b      	ldr	r3, [r7, #32]
 8008218:	09db      	lsrs	r3, r3, #7
 800821a:	623b      	str	r3, [r7, #32]
 800821c:	6a3b      	ldr	r3, [r7, #32]
 800821e:	2b7f      	cmp	r3, #127	; 0x7f
 8008220:	d8f0      	bhi.n	8008204 <_SendPacket+0x210>
 8008222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008224:	1c5a      	adds	r2, r3, #1
 8008226:	627a      	str	r2, [r7, #36]	; 0x24
 8008228:	6a3a      	ldr	r2, [r7, #32]
 800822a:	b2d2      	uxtb	r2, r2
 800822c:	701a      	strb	r2, [r3, #0]
 800822e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008230:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8008232:	4b0c      	ldr	r3, [pc, #48]	; (8008264 <_SendPacket+0x270>)
 8008234:	785b      	ldrb	r3, [r3, #1]
 8008236:	4618      	mov	r0, r3
 8008238:	68ba      	ldr	r2, [r7, #8]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	1ad3      	subs	r3, r2, r3
 800823e:	461a      	mov	r2, r3
 8008240:	68f9      	ldr	r1, [r7, #12]
 8008242:	f7f7 ffd5 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8008246:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d003      	beq.n	8008256 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800824e:	4a05      	ldr	r2, [pc, #20]	; (8008264 <_SendPacket+0x270>)
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	60d3      	str	r3, [r2, #12]
 8008254:	e00f      	b.n	8008276 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8008256:	4b03      	ldr	r3, [pc, #12]	; (8008264 <_SendPacket+0x270>)
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	3301      	adds	r3, #1
 800825c:	b2da      	uxtb	r2, r3
 800825e:	4b01      	ldr	r3, [pc, #4]	; (8008264 <_SendPacket+0x270>)
 8008260:	701a      	strb	r2, [r3, #0]
 8008262:	e008      	b.n	8008276 <_SendPacket+0x282>
 8008264:	200143f8 	.word	0x200143f8
 8008268:	e0001004 	.word	0xe0001004
    goto SendDone;
 800826c:	bf00      	nop
 800826e:	e002      	b.n	8008276 <_SendPacket+0x282>
      goto SendDone;
 8008270:	bf00      	nop
 8008272:	e000      	b.n	8008276 <_SendPacket+0x282>
      goto SendDone;
 8008274:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8008276:	4b14      	ldr	r3, [pc, #80]	; (80082c8 <_SendPacket+0x2d4>)
 8008278:	7e1b      	ldrb	r3, [r3, #24]
 800827a:	4619      	mov	r1, r3
 800827c:	4a13      	ldr	r2, [pc, #76]	; (80082cc <_SendPacket+0x2d8>)
 800827e:	460b      	mov	r3, r1
 8008280:	005b      	lsls	r3, r3, #1
 8008282:	440b      	add	r3, r1
 8008284:	00db      	lsls	r3, r3, #3
 8008286:	4413      	add	r3, r2
 8008288:	336c      	adds	r3, #108	; 0x6c
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	4b0e      	ldr	r3, [pc, #56]	; (80082c8 <_SendPacket+0x2d4>)
 800828e:	7e1b      	ldrb	r3, [r3, #24]
 8008290:	4618      	mov	r0, r3
 8008292:	490e      	ldr	r1, [pc, #56]	; (80082cc <_SendPacket+0x2d8>)
 8008294:	4603      	mov	r3, r0
 8008296:	005b      	lsls	r3, r3, #1
 8008298:	4403      	add	r3, r0
 800829a:	00db      	lsls	r3, r3, #3
 800829c:	440b      	add	r3, r1
 800829e:	3370      	adds	r3, #112	; 0x70
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d00b      	beq.n	80082be <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80082a6:	4b08      	ldr	r3, [pc, #32]	; (80082c8 <_SendPacket+0x2d4>)
 80082a8:	789b      	ldrb	r3, [r3, #2]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d107      	bne.n	80082be <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80082ae:	4b06      	ldr	r3, [pc, #24]	; (80082c8 <_SendPacket+0x2d4>)
 80082b0:	2201      	movs	r2, #1
 80082b2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80082b4:	f7ff fdbc 	bl	8007e30 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80082b8:	4b03      	ldr	r3, [pc, #12]	; (80082c8 <_SendPacket+0x2d4>)
 80082ba:	2200      	movs	r2, #0
 80082bc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80082be:	bf00      	nop
 80082c0:	3728      	adds	r7, #40	; 0x28
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	200143f8 	.word	0x200143f8
 80082cc:	20012f38 	.word	0x20012f38

080082d0 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b0a2      	sub	sp, #136	; 0x88
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 80082e0:	2300      	movs	r3, #0
 80082e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 80082e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80082e8:	1c5a      	adds	r2, r3, #1
 80082ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 80082f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d01d      	beq.n	8008336 <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 80082fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082fe:	2b25      	cmp	r3, #37	; 0x25
 8008300:	d1f1      	bne.n	80082e6 <_VPrintHost+0x16>
      c = *p;
 8008302:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	1d19      	adds	r1, r3, #4
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	6011      	str	r1, [r2, #0]
 8008314:	6819      	ldr	r1, [r3, #0]
 8008316:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800831a:	1c5a      	adds	r2, r3, #1
 800831c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008320:	460a      	mov	r2, r1
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	3388      	adds	r3, #136	; 0x88
 8008326:	443b      	add	r3, r7
 8008328:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 800832c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008330:	2b10      	cmp	r3, #16
 8008332:	d002      	beq.n	800833a <_VPrintHost+0x6a>
    c = *p++;
 8008334:	e7d7      	b.n	80082e6 <_VPrintHost+0x16>
      break;
 8008336:	bf00      	nop
 8008338:	e000      	b.n	800833c <_VPrintHost+0x6c>
        break;
 800833a:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 800833c:	f3ef 8311 	mrs	r3, BASEPRI
 8008340:	f04f 0120 	mov.w	r1, #32
 8008344:	f381 8811 	msr	BASEPRI, r1
 8008348:	65bb      	str	r3, [r7, #88]	; 0x58
 800834a:	483f      	ldr	r0, [pc, #252]	; (8008448 <_VPrintHost+0x178>)
 800834c:	f7ff fd64 	bl	8007e18 <_PreparePacket>
 8008350:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008352:	2280      	movs	r2, #128	; 0x80
 8008354:	68f9      	ldr	r1, [r7, #12]
 8008356:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008358:	f7ff fd0e 	bl	8007d78 <_EncodeStr>
 800835c:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 800835e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008360:	677b      	str	r3, [r7, #116]	; 0x74
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	673b      	str	r3, [r7, #112]	; 0x70
 8008366:	e00b      	b.n	8008380 <_VPrintHost+0xb0>
 8008368:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800836a:	b2da      	uxtb	r2, r3
 800836c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800836e:	1c59      	adds	r1, r3, #1
 8008370:	6779      	str	r1, [r7, #116]	; 0x74
 8008372:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008376:	b2d2      	uxtb	r2, r2
 8008378:	701a      	strb	r2, [r3, #0]
 800837a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800837c:	09db      	lsrs	r3, r3, #7
 800837e:	673b      	str	r3, [r7, #112]	; 0x70
 8008380:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008382:	2b7f      	cmp	r3, #127	; 0x7f
 8008384:	d8f0      	bhi.n	8008368 <_VPrintHost+0x98>
 8008386:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008388:	1c5a      	adds	r2, r3, #1
 800838a:	677a      	str	r2, [r7, #116]	; 0x74
 800838c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800838e:	b2d2      	uxtb	r2, r2
 8008390:	701a      	strb	r2, [r3, #0]
 8008392:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008394:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 8008396:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008398:	66fb      	str	r3, [r7, #108]	; 0x6c
 800839a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800839e:	66bb      	str	r3, [r7, #104]	; 0x68
 80083a0:	e00b      	b.n	80083ba <_VPrintHost+0xea>
 80083a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083a4:	b2da      	uxtb	r2, r3
 80083a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083a8:	1c59      	adds	r1, r3, #1
 80083aa:	66f9      	str	r1, [r7, #108]	; 0x6c
 80083ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80083b0:	b2d2      	uxtb	r2, r2
 80083b2:	701a      	strb	r2, [r3, #0]
 80083b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083b6:	09db      	lsrs	r3, r3, #7
 80083b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80083ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083bc:	2b7f      	cmp	r3, #127	; 0x7f
 80083be:	d8f0      	bhi.n	80083a2 <_VPrintHost+0xd2>
 80083c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083c2:	1c5a      	adds	r2, r3, #1
 80083c4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80083c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80083c8:	b2d2      	uxtb	r2, r2
 80083ca:	701a      	strb	r2, [r3, #0]
 80083cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083ce:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 80083d0:	f107 0314 	add.w	r3, r7, #20
 80083d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 80083d8:	e022      	b.n	8008420 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 80083da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083dc:	667b      	str	r3, [r7, #100]	; 0x64
 80083de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	663b      	str	r3, [r7, #96]	; 0x60
 80083e6:	e00b      	b.n	8008400 <_VPrintHost+0x130>
 80083e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083ea:	b2da      	uxtb	r2, r3
 80083ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083ee:	1c59      	adds	r1, r3, #1
 80083f0:	6679      	str	r1, [r7, #100]	; 0x64
 80083f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80083f6:	b2d2      	uxtb	r2, r2
 80083f8:	701a      	strb	r2, [r3, #0]
 80083fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083fc:	09db      	lsrs	r3, r3, #7
 80083fe:	663b      	str	r3, [r7, #96]	; 0x60
 8008400:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008402:	2b7f      	cmp	r3, #127	; 0x7f
 8008404:	d8f0      	bhi.n	80083e8 <_VPrintHost+0x118>
 8008406:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008408:	1c5a      	adds	r2, r3, #1
 800840a:	667a      	str	r2, [r7, #100]	; 0x64
 800840c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800840e:	b2d2      	uxtb	r2, r2
 8008410:	701a      	strb	r2, [r3, #0]
 8008412:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008414:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 8008416:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800841a:	3304      	adds	r3, #4
 800841c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8008420:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008424:	1e5a      	subs	r2, r3, #1
 8008426:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1d5      	bne.n	80083da <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800842e:	221a      	movs	r2, #26
 8008430:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008432:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008434:	f7ff fdde 	bl	8007ff4 <_SendPacket>
    RECORD_END();
 8008438:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800843a:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 800843e:	2300      	movs	r3, #0
}
 8008440:	4618      	mov	r0, r3
 8008442:	3788      	adds	r7, #136	; 0x88
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	20014428 	.word	0x20014428

0800844c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800844c:	b580      	push	{r7, lr}
 800844e:	b086      	sub	sp, #24
 8008450:	af02      	add	r7, sp, #8
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]
 8008458:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800845a:	2300      	movs	r3, #0
 800845c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008460:	4917      	ldr	r1, [pc, #92]	; (80084c0 <SEGGER_SYSVIEW_Init+0x74>)
 8008462:	4818      	ldr	r0, [pc, #96]	; (80084c4 <SEGGER_SYSVIEW_Init+0x78>)
 8008464:	f7ff fbb8 	bl	8007bd8 <SEGGER_RTT_AllocUpBuffer>
 8008468:	4603      	mov	r3, r0
 800846a:	b2da      	uxtb	r2, r3
 800846c:	4b16      	ldr	r3, [pc, #88]	; (80084c8 <SEGGER_SYSVIEW_Init+0x7c>)
 800846e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8008470:	4b15      	ldr	r3, [pc, #84]	; (80084c8 <SEGGER_SYSVIEW_Init+0x7c>)
 8008472:	785a      	ldrb	r2, [r3, #1]
 8008474:	4b14      	ldr	r3, [pc, #80]	; (80084c8 <SEGGER_SYSVIEW_Init+0x7c>)
 8008476:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8008478:	4b13      	ldr	r3, [pc, #76]	; (80084c8 <SEGGER_SYSVIEW_Init+0x7c>)
 800847a:	7e1b      	ldrb	r3, [r3, #24]
 800847c:	4618      	mov	r0, r3
 800847e:	2300      	movs	r3, #0
 8008480:	9300      	str	r3, [sp, #0]
 8008482:	2308      	movs	r3, #8
 8008484:	4a11      	ldr	r2, [pc, #68]	; (80084cc <SEGGER_SYSVIEW_Init+0x80>)
 8008486:	490f      	ldr	r1, [pc, #60]	; (80084c4 <SEGGER_SYSVIEW_Init+0x78>)
 8008488:	f7ff fc2a 	bl	8007ce0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800848c:	4b0e      	ldr	r3, [pc, #56]	; (80084c8 <SEGGER_SYSVIEW_Init+0x7c>)
 800848e:	2200      	movs	r2, #0
 8008490:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8008492:	4b0f      	ldr	r3, [pc, #60]	; (80084d0 <SEGGER_SYSVIEW_Init+0x84>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a0c      	ldr	r2, [pc, #48]	; (80084c8 <SEGGER_SYSVIEW_Init+0x7c>)
 8008498:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800849a:	4a0b      	ldr	r2, [pc, #44]	; (80084c8 <SEGGER_SYSVIEW_Init+0x7c>)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80084a0:	4a09      	ldr	r2, [pc, #36]	; (80084c8 <SEGGER_SYSVIEW_Init+0x7c>)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80084a6:	4a08      	ldr	r2, [pc, #32]	; (80084c8 <SEGGER_SYSVIEW_Init+0x7c>)
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80084ac:	4a06      	ldr	r2, [pc, #24]	; (80084c8 <SEGGER_SYSVIEW_Init+0x7c>)
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80084b2:	4b05      	ldr	r3, [pc, #20]	; (80084c8 <SEGGER_SYSVIEW_Init+0x7c>)
 80084b4:	2200      	movs	r2, #0
 80084b6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80084b8:	bf00      	nop
 80084ba:	3710      	adds	r7, #16
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	200133f0 	.word	0x200133f0
 80084c4:	08009a84 	.word	0x08009a84
 80084c8:	200143f8 	.word	0x200143f8
 80084cc:	200143f0 	.word	0x200143f0
 80084d0:	e0001004 	.word	0xe0001004

080084d4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80084dc:	4a04      	ldr	r2, [pc, #16]	; (80084f0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6113      	str	r3, [r2, #16]
}
 80084e2:	bf00      	nop
 80084e4:	370c      	adds	r7, #12
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	200143f8 	.word	0x200143f8

080084f4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80084fc:	f3ef 8311 	mrs	r3, BASEPRI
 8008500:	f04f 0120 	mov.w	r1, #32
 8008504:	f381 8811 	msr	BASEPRI, r1
 8008508:	60fb      	str	r3, [r7, #12]
 800850a:	4808      	ldr	r0, [pc, #32]	; (800852c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800850c:	f7ff fc84 	bl	8007e18 <_PreparePacket>
 8008510:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	68b9      	ldr	r1, [r7, #8]
 8008516:	68b8      	ldr	r0, [r7, #8]
 8008518:	f7ff fd6c 	bl	8007ff4 <_SendPacket>
  RECORD_END();
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f383 8811 	msr	BASEPRI, r3
}
 8008522:	bf00      	nop
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	20014428 	.word	0x20014428

08008530 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8008530:	b580      	push	{r7, lr}
 8008532:	b088      	sub	sp, #32
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800853a:	f3ef 8311 	mrs	r3, BASEPRI
 800853e:	f04f 0120 	mov.w	r1, #32
 8008542:	f381 8811 	msr	BASEPRI, r1
 8008546:	617b      	str	r3, [r7, #20]
 8008548:	4816      	ldr	r0, [pc, #88]	; (80085a4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800854a:	f7ff fc65 	bl	8007e18 <_PreparePacket>
 800854e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	61fb      	str	r3, [r7, #28]
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	61bb      	str	r3, [r7, #24]
 800855c:	e00b      	b.n	8008576 <SEGGER_SYSVIEW_RecordU32+0x46>
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	b2da      	uxtb	r2, r3
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	1c59      	adds	r1, r3, #1
 8008566:	61f9      	str	r1, [r7, #28]
 8008568:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800856c:	b2d2      	uxtb	r2, r2
 800856e:	701a      	strb	r2, [r3, #0]
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	09db      	lsrs	r3, r3, #7
 8008574:	61bb      	str	r3, [r7, #24]
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	2b7f      	cmp	r3, #127	; 0x7f
 800857a:	d8f0      	bhi.n	800855e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	1c5a      	adds	r2, r3, #1
 8008580:	61fa      	str	r2, [r7, #28]
 8008582:	69ba      	ldr	r2, [r7, #24]
 8008584:	b2d2      	uxtb	r2, r2
 8008586:	701a      	strb	r2, [r3, #0]
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	68f9      	ldr	r1, [r7, #12]
 8008590:	6938      	ldr	r0, [r7, #16]
 8008592:	f7ff fd2f 	bl	8007ff4 <_SendPacket>
  RECORD_END();
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	f383 8811 	msr	BASEPRI, r3
}
 800859c:	bf00      	nop
 800859e:	3720      	adds	r7, #32
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	20014428 	.word	0x20014428

080085a8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b08c      	sub	sp, #48	; 0x30
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80085b4:	f3ef 8311 	mrs	r3, BASEPRI
 80085b8:	f04f 0120 	mov.w	r1, #32
 80085bc:	f381 8811 	msr	BASEPRI, r1
 80085c0:	61fb      	str	r3, [r7, #28]
 80085c2:	4825      	ldr	r0, [pc, #148]	; (8008658 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80085c4:	f7ff fc28 	bl	8007e18 <_PreparePacket>
 80085c8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80085d6:	e00b      	b.n	80085f0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80085d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085da:	b2da      	uxtb	r2, r3
 80085dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085de:	1c59      	adds	r1, r3, #1
 80085e0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80085e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80085e6:	b2d2      	uxtb	r2, r2
 80085e8:	701a      	strb	r2, [r3, #0]
 80085ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ec:	09db      	lsrs	r3, r3, #7
 80085ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80085f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f2:	2b7f      	cmp	r3, #127	; 0x7f
 80085f4:	d8f0      	bhi.n	80085d8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80085f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f8:	1c5a      	adds	r2, r3, #1
 80085fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80085fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085fe:	b2d2      	uxtb	r2, r2
 8008600:	701a      	strb	r2, [r3, #0]
 8008602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008604:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	627b      	str	r3, [r7, #36]	; 0x24
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	623b      	str	r3, [r7, #32]
 800860e:	e00b      	b.n	8008628 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8008610:	6a3b      	ldr	r3, [r7, #32]
 8008612:	b2da      	uxtb	r2, r3
 8008614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008616:	1c59      	adds	r1, r3, #1
 8008618:	6279      	str	r1, [r7, #36]	; 0x24
 800861a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800861e:	b2d2      	uxtb	r2, r2
 8008620:	701a      	strb	r2, [r3, #0]
 8008622:	6a3b      	ldr	r3, [r7, #32]
 8008624:	09db      	lsrs	r3, r3, #7
 8008626:	623b      	str	r3, [r7, #32]
 8008628:	6a3b      	ldr	r3, [r7, #32]
 800862a:	2b7f      	cmp	r3, #127	; 0x7f
 800862c:	d8f0      	bhi.n	8008610 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800862e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008630:	1c5a      	adds	r2, r3, #1
 8008632:	627a      	str	r2, [r7, #36]	; 0x24
 8008634:	6a3a      	ldr	r2, [r7, #32]
 8008636:	b2d2      	uxtb	r2, r2
 8008638:	701a      	strb	r2, [r3, #0]
 800863a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	6979      	ldr	r1, [r7, #20]
 8008642:	69b8      	ldr	r0, [r7, #24]
 8008644:	f7ff fcd6 	bl	8007ff4 <_SendPacket>
  RECORD_END();
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	f383 8811 	msr	BASEPRI, r3
}
 800864e:	bf00      	nop
 8008650:	3730      	adds	r7, #48	; 0x30
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	20014428 	.word	0x20014428

0800865c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800865c:	b580      	push	{r7, lr}
 800865e:	b08e      	sub	sp, #56	; 0x38
 8008660:	af00      	add	r7, sp, #0
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	607a      	str	r2, [r7, #4]
 8008668:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800866a:	f3ef 8311 	mrs	r3, BASEPRI
 800866e:	f04f 0120 	mov.w	r1, #32
 8008672:	f381 8811 	msr	BASEPRI, r1
 8008676:	61fb      	str	r3, [r7, #28]
 8008678:	4832      	ldr	r0, [pc, #200]	; (8008744 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800867a:	f7ff fbcd 	bl	8007e18 <_PreparePacket>
 800867e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	637b      	str	r3, [r7, #52]	; 0x34
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	633b      	str	r3, [r7, #48]	; 0x30
 800868c:	e00b      	b.n	80086a6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800868e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008690:	b2da      	uxtb	r2, r3
 8008692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008694:	1c59      	adds	r1, r3, #1
 8008696:	6379      	str	r1, [r7, #52]	; 0x34
 8008698:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800869c:	b2d2      	uxtb	r2, r2
 800869e:	701a      	strb	r2, [r3, #0]
 80086a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a2:	09db      	lsrs	r3, r3, #7
 80086a4:	633b      	str	r3, [r7, #48]	; 0x30
 80086a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a8:	2b7f      	cmp	r3, #127	; 0x7f
 80086aa:	d8f0      	bhi.n	800868e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80086ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ae:	1c5a      	adds	r2, r3, #1
 80086b0:	637a      	str	r2, [r7, #52]	; 0x34
 80086b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086b4:	b2d2      	uxtb	r2, r2
 80086b6:	701a      	strb	r2, [r3, #0]
 80086b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80086c4:	e00b      	b.n	80086de <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80086c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c8:	b2da      	uxtb	r2, r3
 80086ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086cc:	1c59      	adds	r1, r3, #1
 80086ce:	62f9      	str	r1, [r7, #44]	; 0x2c
 80086d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80086d4:	b2d2      	uxtb	r2, r2
 80086d6:	701a      	strb	r2, [r3, #0]
 80086d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086da:	09db      	lsrs	r3, r3, #7
 80086dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80086de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e0:	2b7f      	cmp	r3, #127	; 0x7f
 80086e2:	d8f0      	bhi.n	80086c6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80086e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e6:	1c5a      	adds	r2, r3, #1
 80086e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80086ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086ec:	b2d2      	uxtb	r2, r2
 80086ee:	701a      	strb	r2, [r3, #0]
 80086f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	627b      	str	r3, [r7, #36]	; 0x24
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	623b      	str	r3, [r7, #32]
 80086fc:	e00b      	b.n	8008716 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80086fe:	6a3b      	ldr	r3, [r7, #32]
 8008700:	b2da      	uxtb	r2, r3
 8008702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008704:	1c59      	adds	r1, r3, #1
 8008706:	6279      	str	r1, [r7, #36]	; 0x24
 8008708:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800870c:	b2d2      	uxtb	r2, r2
 800870e:	701a      	strb	r2, [r3, #0]
 8008710:	6a3b      	ldr	r3, [r7, #32]
 8008712:	09db      	lsrs	r3, r3, #7
 8008714:	623b      	str	r3, [r7, #32]
 8008716:	6a3b      	ldr	r3, [r7, #32]
 8008718:	2b7f      	cmp	r3, #127	; 0x7f
 800871a:	d8f0      	bhi.n	80086fe <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800871c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871e:	1c5a      	adds	r2, r3, #1
 8008720:	627a      	str	r2, [r7, #36]	; 0x24
 8008722:	6a3a      	ldr	r2, [r7, #32]
 8008724:	b2d2      	uxtb	r2, r2
 8008726:	701a      	strb	r2, [r3, #0]
 8008728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	6979      	ldr	r1, [r7, #20]
 8008730:	69b8      	ldr	r0, [r7, #24]
 8008732:	f7ff fc5f 	bl	8007ff4 <_SendPacket>
  RECORD_END();
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	f383 8811 	msr	BASEPRI, r3
}
 800873c:	bf00      	nop
 800873e:	3738      	adds	r7, #56	; 0x38
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	20014428 	.word	0x20014428

08008748 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8008748:	b580      	push	{r7, lr}
 800874a:	b090      	sub	sp, #64	; 0x40
 800874c:	af00      	add	r7, sp, #0
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	607a      	str	r2, [r7, #4]
 8008754:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8008756:	f3ef 8311 	mrs	r3, BASEPRI
 800875a:	f04f 0120 	mov.w	r1, #32
 800875e:	f381 8811 	msr	BASEPRI, r1
 8008762:	61fb      	str	r3, [r7, #28]
 8008764:	4840      	ldr	r0, [pc, #256]	; (8008868 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8008766:	f7ff fb57 	bl	8007e18 <_PreparePacket>
 800876a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	63bb      	str	r3, [r7, #56]	; 0x38
 8008778:	e00b      	b.n	8008792 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800877a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877c:	b2da      	uxtb	r2, r3
 800877e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008780:	1c59      	adds	r1, r3, #1
 8008782:	63f9      	str	r1, [r7, #60]	; 0x3c
 8008784:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008788:	b2d2      	uxtb	r2, r2
 800878a:	701a      	strb	r2, [r3, #0]
 800878c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878e:	09db      	lsrs	r3, r3, #7
 8008790:	63bb      	str	r3, [r7, #56]	; 0x38
 8008792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008794:	2b7f      	cmp	r3, #127	; 0x7f
 8008796:	d8f0      	bhi.n	800877a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8008798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800879a:	1c5a      	adds	r2, r3, #1
 800879c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800879e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087a0:	b2d2      	uxtb	r2, r2
 80087a2:	701a      	strb	r2, [r3, #0]
 80087a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087a6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	637b      	str	r3, [r7, #52]	; 0x34
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	633b      	str	r3, [r7, #48]	; 0x30
 80087b0:	e00b      	b.n	80087ca <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80087b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b4:	b2da      	uxtb	r2, r3
 80087b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b8:	1c59      	adds	r1, r3, #1
 80087ba:	6379      	str	r1, [r7, #52]	; 0x34
 80087bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80087c0:	b2d2      	uxtb	r2, r2
 80087c2:	701a      	strb	r2, [r3, #0]
 80087c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c6:	09db      	lsrs	r3, r3, #7
 80087c8:	633b      	str	r3, [r7, #48]	; 0x30
 80087ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087cc:	2b7f      	cmp	r3, #127	; 0x7f
 80087ce:	d8f0      	bhi.n	80087b2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80087d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087d2:	1c5a      	adds	r2, r3, #1
 80087d4:	637a      	str	r2, [r7, #52]	; 0x34
 80087d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087d8:	b2d2      	uxtb	r2, r2
 80087da:	701a      	strb	r2, [r3, #0]
 80087dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087de:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80087e8:	e00b      	b.n	8008802 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80087ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ec:	b2da      	uxtb	r2, r3
 80087ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f0:	1c59      	adds	r1, r3, #1
 80087f2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80087f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80087f8:	b2d2      	uxtb	r2, r2
 80087fa:	701a      	strb	r2, [r3, #0]
 80087fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fe:	09db      	lsrs	r3, r3, #7
 8008800:	62bb      	str	r3, [r7, #40]	; 0x28
 8008802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008804:	2b7f      	cmp	r3, #127	; 0x7f
 8008806:	d8f0      	bhi.n	80087ea <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8008808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800880a:	1c5a      	adds	r2, r3, #1
 800880c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800880e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008810:	b2d2      	uxtb	r2, r2
 8008812:	701a      	strb	r2, [r3, #0]
 8008814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008816:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	627b      	str	r3, [r7, #36]	; 0x24
 800881c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800881e:	623b      	str	r3, [r7, #32]
 8008820:	e00b      	b.n	800883a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8008822:	6a3b      	ldr	r3, [r7, #32]
 8008824:	b2da      	uxtb	r2, r3
 8008826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008828:	1c59      	adds	r1, r3, #1
 800882a:	6279      	str	r1, [r7, #36]	; 0x24
 800882c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008830:	b2d2      	uxtb	r2, r2
 8008832:	701a      	strb	r2, [r3, #0]
 8008834:	6a3b      	ldr	r3, [r7, #32]
 8008836:	09db      	lsrs	r3, r3, #7
 8008838:	623b      	str	r3, [r7, #32]
 800883a:	6a3b      	ldr	r3, [r7, #32]
 800883c:	2b7f      	cmp	r3, #127	; 0x7f
 800883e:	d8f0      	bhi.n	8008822 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8008840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008842:	1c5a      	adds	r2, r3, #1
 8008844:	627a      	str	r2, [r7, #36]	; 0x24
 8008846:	6a3a      	ldr	r2, [r7, #32]
 8008848:	b2d2      	uxtb	r2, r2
 800884a:	701a      	strb	r2, [r3, #0]
 800884c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008850:	68fa      	ldr	r2, [r7, #12]
 8008852:	6979      	ldr	r1, [r7, #20]
 8008854:	69b8      	ldr	r0, [r7, #24]
 8008856:	f7ff fbcd 	bl	8007ff4 <_SendPacket>
  RECORD_END();
 800885a:	69fb      	ldr	r3, [r7, #28]
 800885c:	f383 8811 	msr	BASEPRI, r3
}
 8008860:	bf00      	nop
 8008862:	3740      	adds	r7, #64	; 0x40
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	20014428 	.word	0x20014428

0800886c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800886c:	b580      	push	{r7, lr}
 800886e:	b08c      	sub	sp, #48	; 0x30
 8008870:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8008872:	4b58      	ldr	r3, [pc, #352]	; (80089d4 <SEGGER_SYSVIEW_Start+0x168>)
 8008874:	2201      	movs	r2, #1
 8008876:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8008878:	f3ef 8311 	mrs	r3, BASEPRI
 800887c:	f04f 0120 	mov.w	r1, #32
 8008880:	f381 8811 	msr	BASEPRI, r1
 8008884:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8008886:	4b53      	ldr	r3, [pc, #332]	; (80089d4 <SEGGER_SYSVIEW_Start+0x168>)
 8008888:	785b      	ldrb	r3, [r3, #1]
 800888a:	220a      	movs	r2, #10
 800888c:	4952      	ldr	r1, [pc, #328]	; (80089d8 <SEGGER_SYSVIEW_Start+0x16c>)
 800888e:	4618      	mov	r0, r3
 8008890:	f7f7 fcae 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800889a:	200a      	movs	r0, #10
 800889c:	f7ff fe2a 	bl	80084f4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80088a0:	f3ef 8311 	mrs	r3, BASEPRI
 80088a4:	f04f 0120 	mov.w	r1, #32
 80088a8:	f381 8811 	msr	BASEPRI, r1
 80088ac:	60bb      	str	r3, [r7, #8]
 80088ae:	484b      	ldr	r0, [pc, #300]	; (80089dc <SEGGER_SYSVIEW_Start+0x170>)
 80088b0:	f7ff fab2 	bl	8007e18 <_PreparePacket>
 80088b4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088be:	4b45      	ldr	r3, [pc, #276]	; (80089d4 <SEGGER_SYSVIEW_Start+0x168>)
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80088c4:	e00b      	b.n	80088de <SEGGER_SYSVIEW_Start+0x72>
 80088c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c8:	b2da      	uxtb	r2, r3
 80088ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088cc:	1c59      	adds	r1, r3, #1
 80088ce:	62f9      	str	r1, [r7, #44]	; 0x2c
 80088d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80088d4:	b2d2      	uxtb	r2, r2
 80088d6:	701a      	strb	r2, [r3, #0]
 80088d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088da:	09db      	lsrs	r3, r3, #7
 80088dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80088de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e0:	2b7f      	cmp	r3, #127	; 0x7f
 80088e2:	d8f0      	bhi.n	80088c6 <SEGGER_SYSVIEW_Start+0x5a>
 80088e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e6:	1c5a      	adds	r2, r3, #1
 80088e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80088ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088ec:	b2d2      	uxtb	r2, r2
 80088ee:	701a      	strb	r2, [r3, #0]
 80088f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	627b      	str	r3, [r7, #36]	; 0x24
 80088f8:	4b36      	ldr	r3, [pc, #216]	; (80089d4 <SEGGER_SYSVIEW_Start+0x168>)
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	623b      	str	r3, [r7, #32]
 80088fe:	e00b      	b.n	8008918 <SEGGER_SYSVIEW_Start+0xac>
 8008900:	6a3b      	ldr	r3, [r7, #32]
 8008902:	b2da      	uxtb	r2, r3
 8008904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008906:	1c59      	adds	r1, r3, #1
 8008908:	6279      	str	r1, [r7, #36]	; 0x24
 800890a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800890e:	b2d2      	uxtb	r2, r2
 8008910:	701a      	strb	r2, [r3, #0]
 8008912:	6a3b      	ldr	r3, [r7, #32]
 8008914:	09db      	lsrs	r3, r3, #7
 8008916:	623b      	str	r3, [r7, #32]
 8008918:	6a3b      	ldr	r3, [r7, #32]
 800891a:	2b7f      	cmp	r3, #127	; 0x7f
 800891c:	d8f0      	bhi.n	8008900 <SEGGER_SYSVIEW_Start+0x94>
 800891e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008920:	1c5a      	adds	r2, r3, #1
 8008922:	627a      	str	r2, [r7, #36]	; 0x24
 8008924:	6a3a      	ldr	r2, [r7, #32]
 8008926:	b2d2      	uxtb	r2, r2
 8008928:	701a      	strb	r2, [r3, #0]
 800892a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	61fb      	str	r3, [r7, #28]
 8008932:	4b28      	ldr	r3, [pc, #160]	; (80089d4 <SEGGER_SYSVIEW_Start+0x168>)
 8008934:	691b      	ldr	r3, [r3, #16]
 8008936:	61bb      	str	r3, [r7, #24]
 8008938:	e00b      	b.n	8008952 <SEGGER_SYSVIEW_Start+0xe6>
 800893a:	69bb      	ldr	r3, [r7, #24]
 800893c:	b2da      	uxtb	r2, r3
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	1c59      	adds	r1, r3, #1
 8008942:	61f9      	str	r1, [r7, #28]
 8008944:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008948:	b2d2      	uxtb	r2, r2
 800894a:	701a      	strb	r2, [r3, #0]
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	09db      	lsrs	r3, r3, #7
 8008950:	61bb      	str	r3, [r7, #24]
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	2b7f      	cmp	r3, #127	; 0x7f
 8008956:	d8f0      	bhi.n	800893a <SEGGER_SYSVIEW_Start+0xce>
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	1c5a      	adds	r2, r3, #1
 800895c:	61fa      	str	r2, [r7, #28]
 800895e:	69ba      	ldr	r2, [r7, #24]
 8008960:	b2d2      	uxtb	r2, r2
 8008962:	701a      	strb	r2, [r3, #0]
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	617b      	str	r3, [r7, #20]
 800896c:	2300      	movs	r3, #0
 800896e:	613b      	str	r3, [r7, #16]
 8008970:	e00b      	b.n	800898a <SEGGER_SYSVIEW_Start+0x11e>
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	b2da      	uxtb	r2, r3
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	1c59      	adds	r1, r3, #1
 800897a:	6179      	str	r1, [r7, #20]
 800897c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008980:	b2d2      	uxtb	r2, r2
 8008982:	701a      	strb	r2, [r3, #0]
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	09db      	lsrs	r3, r3, #7
 8008988:	613b      	str	r3, [r7, #16]
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	2b7f      	cmp	r3, #127	; 0x7f
 800898e:	d8f0      	bhi.n	8008972 <SEGGER_SYSVIEW_Start+0x106>
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	1c5a      	adds	r2, r3, #1
 8008994:	617a      	str	r2, [r7, #20]
 8008996:	693a      	ldr	r2, [r7, #16]
 8008998:	b2d2      	uxtb	r2, r2
 800899a:	701a      	strb	r2, [r3, #0]
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80089a0:	2218      	movs	r2, #24
 80089a2:	6839      	ldr	r1, [r7, #0]
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f7ff fb25 	bl	8007ff4 <_SendPacket>
      RECORD_END();
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80089b0:	4b08      	ldr	r3, [pc, #32]	; (80089d4 <SEGGER_SYSVIEW_Start+0x168>)
 80089b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d002      	beq.n	80089be <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80089b8:	4b06      	ldr	r3, [pc, #24]	; (80089d4 <SEGGER_SYSVIEW_Start+0x168>)
 80089ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089bc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80089be:	f000 f9eb 	bl	8008d98 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80089c2:	f000 f9b1 	bl	8008d28 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80089c6:	f000 fc83 	bl	80092d0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80089ca:	bf00      	nop
 80089cc:	3730      	adds	r7, #48	; 0x30
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	200143f8 	.word	0x200143f8
 80089d8:	08009b7c 	.word	0x08009b7c
 80089dc:	20014428 	.word	0x20014428

080089e0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80089e6:	f3ef 8311 	mrs	r3, BASEPRI
 80089ea:	f04f 0120 	mov.w	r1, #32
 80089ee:	f381 8811 	msr	BASEPRI, r1
 80089f2:	607b      	str	r3, [r7, #4]
 80089f4:	480b      	ldr	r0, [pc, #44]	; (8008a24 <SEGGER_SYSVIEW_Stop+0x44>)
 80089f6:	f7ff fa0f 	bl	8007e18 <_PreparePacket>
 80089fa:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80089fc:	4b0a      	ldr	r3, [pc, #40]	; (8008a28 <SEGGER_SYSVIEW_Stop+0x48>)
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d007      	beq.n	8008a14 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8008a04:	220b      	movs	r2, #11
 8008a06:	6839      	ldr	r1, [r7, #0]
 8008a08:	6838      	ldr	r0, [r7, #0]
 8008a0a:	f7ff faf3 	bl	8007ff4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8008a0e:	4b06      	ldr	r3, [pc, #24]	; (8008a28 <SEGGER_SYSVIEW_Stop+0x48>)
 8008a10:	2200      	movs	r2, #0
 8008a12:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f383 8811 	msr	BASEPRI, r3
}
 8008a1a:	bf00      	nop
 8008a1c:	3708      	adds	r7, #8
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
 8008a22:	bf00      	nop
 8008a24:	20014428 	.word	0x20014428
 8008a28:	200143f8 	.word	0x200143f8

08008a2c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b08c      	sub	sp, #48	; 0x30
 8008a30:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8008a32:	f3ef 8311 	mrs	r3, BASEPRI
 8008a36:	f04f 0120 	mov.w	r1, #32
 8008a3a:	f381 8811 	msr	BASEPRI, r1
 8008a3e:	60fb      	str	r3, [r7, #12]
 8008a40:	4845      	ldr	r0, [pc, #276]	; (8008b58 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8008a42:	f7ff f9e9 	bl	8007e18 <_PreparePacket>
 8008a46:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a50:	4b42      	ldr	r3, [pc, #264]	; (8008b5c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a56:	e00b      	b.n	8008a70 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8008a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a5a:	b2da      	uxtb	r2, r3
 8008a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a5e:	1c59      	adds	r1, r3, #1
 8008a60:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008a62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a66:	b2d2      	uxtb	r2, r2
 8008a68:	701a      	strb	r2, [r3, #0]
 8008a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6c:	09db      	lsrs	r3, r3, #7
 8008a6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a72:	2b7f      	cmp	r3, #127	; 0x7f
 8008a74:	d8f0      	bhi.n	8008a58 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8008a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a78:	1c5a      	adds	r2, r3, #1
 8008a7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a7e:	b2d2      	uxtb	r2, r2
 8008a80:	701a      	strb	r2, [r3, #0]
 8008a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a84:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	627b      	str	r3, [r7, #36]	; 0x24
 8008a8a:	4b34      	ldr	r3, [pc, #208]	; (8008b5c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	623b      	str	r3, [r7, #32]
 8008a90:	e00b      	b.n	8008aaa <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8008a92:	6a3b      	ldr	r3, [r7, #32]
 8008a94:	b2da      	uxtb	r2, r3
 8008a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a98:	1c59      	adds	r1, r3, #1
 8008a9a:	6279      	str	r1, [r7, #36]	; 0x24
 8008a9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008aa0:	b2d2      	uxtb	r2, r2
 8008aa2:	701a      	strb	r2, [r3, #0]
 8008aa4:	6a3b      	ldr	r3, [r7, #32]
 8008aa6:	09db      	lsrs	r3, r3, #7
 8008aa8:	623b      	str	r3, [r7, #32]
 8008aaa:	6a3b      	ldr	r3, [r7, #32]
 8008aac:	2b7f      	cmp	r3, #127	; 0x7f
 8008aae:	d8f0      	bhi.n	8008a92 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8008ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab2:	1c5a      	adds	r2, r3, #1
 8008ab4:	627a      	str	r2, [r7, #36]	; 0x24
 8008ab6:	6a3a      	ldr	r2, [r7, #32]
 8008ab8:	b2d2      	uxtb	r2, r2
 8008aba:	701a      	strb	r2, [r3, #0]
 8008abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	61fb      	str	r3, [r7, #28]
 8008ac4:	4b25      	ldr	r3, [pc, #148]	; (8008b5c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008ac6:	691b      	ldr	r3, [r3, #16]
 8008ac8:	61bb      	str	r3, [r7, #24]
 8008aca:	e00b      	b.n	8008ae4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8008acc:	69bb      	ldr	r3, [r7, #24]
 8008ace:	b2da      	uxtb	r2, r3
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	1c59      	adds	r1, r3, #1
 8008ad4:	61f9      	str	r1, [r7, #28]
 8008ad6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008ada:	b2d2      	uxtb	r2, r2
 8008adc:	701a      	strb	r2, [r3, #0]
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	09db      	lsrs	r3, r3, #7
 8008ae2:	61bb      	str	r3, [r7, #24]
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	2b7f      	cmp	r3, #127	; 0x7f
 8008ae8:	d8f0      	bhi.n	8008acc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8008aea:	69fb      	ldr	r3, [r7, #28]
 8008aec:	1c5a      	adds	r2, r3, #1
 8008aee:	61fa      	str	r2, [r7, #28]
 8008af0:	69ba      	ldr	r2, [r7, #24]
 8008af2:	b2d2      	uxtb	r2, r2
 8008af4:	701a      	strb	r2, [r3, #0]
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	617b      	str	r3, [r7, #20]
 8008afe:	2300      	movs	r3, #0
 8008b00:	613b      	str	r3, [r7, #16]
 8008b02:	e00b      	b.n	8008b1c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	b2da      	uxtb	r2, r3
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	1c59      	adds	r1, r3, #1
 8008b0c:	6179      	str	r1, [r7, #20]
 8008b0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008b12:	b2d2      	uxtb	r2, r2
 8008b14:	701a      	strb	r2, [r3, #0]
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	09db      	lsrs	r3, r3, #7
 8008b1a:	613b      	str	r3, [r7, #16]
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	2b7f      	cmp	r3, #127	; 0x7f
 8008b20:	d8f0      	bhi.n	8008b04 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	1c5a      	adds	r2, r3, #1
 8008b26:	617a      	str	r2, [r7, #20]
 8008b28:	693a      	ldr	r2, [r7, #16]
 8008b2a:	b2d2      	uxtb	r2, r2
 8008b2c:	701a      	strb	r2, [r3, #0]
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8008b32:	2218      	movs	r2, #24
 8008b34:	6879      	ldr	r1, [r7, #4]
 8008b36:	68b8      	ldr	r0, [r7, #8]
 8008b38:	f7ff fa5c 	bl	8007ff4 <_SendPacket>
  RECORD_END();
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8008b42:	4b06      	ldr	r3, [pc, #24]	; (8008b5c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d002      	beq.n	8008b50 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8008b4a:	4b04      	ldr	r3, [pc, #16]	; (8008b5c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4e:	4798      	blx	r3
  }
}
 8008b50:	bf00      	nop
 8008b52:	3730      	adds	r7, #48	; 0x30
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	20014428 	.word	0x20014428
 8008b5c:	200143f8 	.word	0x200143f8

08008b60 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b092      	sub	sp, #72	; 0x48
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8008b68:	f3ef 8311 	mrs	r3, BASEPRI
 8008b6c:	f04f 0120 	mov.w	r1, #32
 8008b70:	f381 8811 	msr	BASEPRI, r1
 8008b74:	617b      	str	r3, [r7, #20]
 8008b76:	486a      	ldr	r0, [pc, #424]	; (8008d20 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8008b78:	f7ff f94e 	bl	8007e18 <_PreparePacket>
 8008b7c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	647b      	str	r3, [r7, #68]	; 0x44
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	4b66      	ldr	r3, [pc, #408]	; (8008d24 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8008b8c:	691b      	ldr	r3, [r3, #16]
 8008b8e:	1ad3      	subs	r3, r2, r3
 8008b90:	643b      	str	r3, [r7, #64]	; 0x40
 8008b92:	e00b      	b.n	8008bac <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8008b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b96:	b2da      	uxtb	r2, r3
 8008b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b9a:	1c59      	adds	r1, r3, #1
 8008b9c:	6479      	str	r1, [r7, #68]	; 0x44
 8008b9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008ba2:	b2d2      	uxtb	r2, r2
 8008ba4:	701a      	strb	r2, [r3, #0]
 8008ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ba8:	09db      	lsrs	r3, r3, #7
 8008baa:	643b      	str	r3, [r7, #64]	; 0x40
 8008bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bae:	2b7f      	cmp	r3, #127	; 0x7f
 8008bb0:	d8f0      	bhi.n	8008b94 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8008bb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bb4:	1c5a      	adds	r2, r3, #1
 8008bb6:	647a      	str	r2, [r7, #68]	; 0x44
 8008bb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008bba:	b2d2      	uxtb	r2, r2
 8008bbc:	701a      	strb	r2, [r3, #0]
 8008bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bc0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	63bb      	str	r3, [r7, #56]	; 0x38
 8008bcc:	e00b      	b.n	8008be6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8008bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd0:	b2da      	uxtb	r2, r3
 8008bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bd4:	1c59      	adds	r1, r3, #1
 8008bd6:	63f9      	str	r1, [r7, #60]	; 0x3c
 8008bd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008bdc:	b2d2      	uxtb	r2, r2
 8008bde:	701a      	strb	r2, [r3, #0]
 8008be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be2:	09db      	lsrs	r3, r3, #7
 8008be4:	63bb      	str	r3, [r7, #56]	; 0x38
 8008be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be8:	2b7f      	cmp	r3, #127	; 0x7f
 8008bea:	d8f0      	bhi.n	8008bce <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8008bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bee:	1c5a      	adds	r2, r3, #1
 8008bf0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008bf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bf4:	b2d2      	uxtb	r2, r2
 8008bf6:	701a      	strb	r2, [r3, #0]
 8008bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bfa:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	2220      	movs	r2, #32
 8008c02:	4619      	mov	r1, r3
 8008c04:	68f8      	ldr	r0, [r7, #12]
 8008c06:	f7ff f8b7 	bl	8007d78 <_EncodeStr>
 8008c0a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8008c0c:	2209      	movs	r2, #9
 8008c0e:	68f9      	ldr	r1, [r7, #12]
 8008c10:	6938      	ldr	r0, [r7, #16]
 8008c12:	f7ff f9ef 	bl	8007ff4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	637b      	str	r3, [r7, #52]	; 0x34
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	4b40      	ldr	r3, [pc, #256]	; (8008d24 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8008c24:	691b      	ldr	r3, [r3, #16]
 8008c26:	1ad3      	subs	r3, r2, r3
 8008c28:	633b      	str	r3, [r7, #48]	; 0x30
 8008c2a:	e00b      	b.n	8008c44 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8008c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2e:	b2da      	uxtb	r2, r3
 8008c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c32:	1c59      	adds	r1, r3, #1
 8008c34:	6379      	str	r1, [r7, #52]	; 0x34
 8008c36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008c3a:	b2d2      	uxtb	r2, r2
 8008c3c:	701a      	strb	r2, [r3, #0]
 8008c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c40:	09db      	lsrs	r3, r3, #7
 8008c42:	633b      	str	r3, [r7, #48]	; 0x30
 8008c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c46:	2b7f      	cmp	r3, #127	; 0x7f
 8008c48:	d8f0      	bhi.n	8008c2c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8008c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c4c:	1c5a      	adds	r2, r3, #1
 8008c4e:	637a      	str	r2, [r7, #52]	; 0x34
 8008c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c52:	b2d2      	uxtb	r2, r2
 8008c54:	701a      	strb	r2, [r3, #0]
 8008c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c58:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c64:	e00b      	b.n	8008c7e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8008c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c68:	b2da      	uxtb	r2, r3
 8008c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6c:	1c59      	adds	r1, r3, #1
 8008c6e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008c70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008c74:	b2d2      	uxtb	r2, r2
 8008c76:	701a      	strb	r2, [r3, #0]
 8008c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c7a:	09db      	lsrs	r3, r3, #7
 8008c7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c80:	2b7f      	cmp	r3, #127	; 0x7f
 8008c82:	d8f0      	bhi.n	8008c66 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8008c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c86:	1c5a      	adds	r2, r3, #1
 8008c88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c8c:	b2d2      	uxtb	r2, r2
 8008c8e:	701a      	strb	r2, [r3, #0]
 8008c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c92:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	627b      	str	r3, [r7, #36]	; 0x24
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	691b      	ldr	r3, [r3, #16]
 8008c9c:	623b      	str	r3, [r7, #32]
 8008c9e:	e00b      	b.n	8008cb8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8008ca0:	6a3b      	ldr	r3, [r7, #32]
 8008ca2:	b2da      	uxtb	r2, r3
 8008ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca6:	1c59      	adds	r1, r3, #1
 8008ca8:	6279      	str	r1, [r7, #36]	; 0x24
 8008caa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008cae:	b2d2      	uxtb	r2, r2
 8008cb0:	701a      	strb	r2, [r3, #0]
 8008cb2:	6a3b      	ldr	r3, [r7, #32]
 8008cb4:	09db      	lsrs	r3, r3, #7
 8008cb6:	623b      	str	r3, [r7, #32]
 8008cb8:	6a3b      	ldr	r3, [r7, #32]
 8008cba:	2b7f      	cmp	r3, #127	; 0x7f
 8008cbc:	d8f0      	bhi.n	8008ca0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8008cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc0:	1c5a      	adds	r2, r3, #1
 8008cc2:	627a      	str	r2, [r7, #36]	; 0x24
 8008cc4:	6a3a      	ldr	r2, [r7, #32]
 8008cc6:	b2d2      	uxtb	r2, r2
 8008cc8:	701a      	strb	r2, [r3, #0]
 8008cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ccc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	61fb      	str	r3, [r7, #28]
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	61bb      	str	r3, [r7, #24]
 8008cd6:	e00b      	b.n	8008cf0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	b2da      	uxtb	r2, r3
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	1c59      	adds	r1, r3, #1
 8008ce0:	61f9      	str	r1, [r7, #28]
 8008ce2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008ce6:	b2d2      	uxtb	r2, r2
 8008ce8:	701a      	strb	r2, [r3, #0]
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	09db      	lsrs	r3, r3, #7
 8008cee:	61bb      	str	r3, [r7, #24]
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	2b7f      	cmp	r3, #127	; 0x7f
 8008cf4:	d8f0      	bhi.n	8008cd8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	1c5a      	adds	r2, r3, #1
 8008cfa:	61fa      	str	r2, [r7, #28]
 8008cfc:	69ba      	ldr	r2, [r7, #24]
 8008cfe:	b2d2      	uxtb	r2, r2
 8008d00:	701a      	strb	r2, [r3, #0]
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8008d06:	2215      	movs	r2, #21
 8008d08:	68f9      	ldr	r1, [r7, #12]
 8008d0a:	6938      	ldr	r0, [r7, #16]
 8008d0c:	f7ff f972 	bl	8007ff4 <_SendPacket>
  RECORD_END();
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	f383 8811 	msr	BASEPRI, r3
}
 8008d16:	bf00      	nop
 8008d18:	3748      	adds	r7, #72	; 0x48
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	20014428 	.word	0x20014428
 8008d24:	200143f8 	.word	0x200143f8

08008d28 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8008d2c:	4b07      	ldr	r3, [pc, #28]	; (8008d4c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008d2e:	6a1b      	ldr	r3, [r3, #32]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d008      	beq.n	8008d46 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8008d34:	4b05      	ldr	r3, [pc, #20]	; (8008d4c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008d36:	6a1b      	ldr	r3, [r3, #32]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d003      	beq.n	8008d46 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8008d3e:	4b03      	ldr	r3, [pc, #12]	; (8008d4c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008d40:	6a1b      	ldr	r3, [r3, #32]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	4798      	blx	r3
  }
}
 8008d46:	bf00      	nop
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	200143f8 	.word	0x200143f8

08008d50 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b086      	sub	sp, #24
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008d58:	f3ef 8311 	mrs	r3, BASEPRI
 8008d5c:	f04f 0120 	mov.w	r1, #32
 8008d60:	f381 8811 	msr	BASEPRI, r1
 8008d64:	617b      	str	r3, [r7, #20]
 8008d66:	480b      	ldr	r0, [pc, #44]	; (8008d94 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8008d68:	f7ff f856 	bl	8007e18 <_PreparePacket>
 8008d6c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008d6e:	2280      	movs	r2, #128	; 0x80
 8008d70:	6879      	ldr	r1, [r7, #4]
 8008d72:	6938      	ldr	r0, [r7, #16]
 8008d74:	f7ff f800 	bl	8007d78 <_EncodeStr>
 8008d78:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8008d7a:	220e      	movs	r2, #14
 8008d7c:	68f9      	ldr	r1, [r7, #12]
 8008d7e:	6938      	ldr	r0, [r7, #16]
 8008d80:	f7ff f938 	bl	8007ff4 <_SendPacket>
  RECORD_END();
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	f383 8811 	msr	BASEPRI, r3
}
 8008d8a:	bf00      	nop
 8008d8c:	3718      	adds	r7, #24
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	20014428 	.word	0x20014428

08008d98 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8008d98:	b590      	push	{r4, r7, lr}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8008d9e:	4b15      	ldr	r3, [pc, #84]	; (8008df4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008da0:	6a1b      	ldr	r3, [r3, #32]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d01a      	beq.n	8008ddc <SEGGER_SYSVIEW_RecordSystime+0x44>
 8008da6:	4b13      	ldr	r3, [pc, #76]	; (8008df4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008da8:	6a1b      	ldr	r3, [r3, #32]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d015      	beq.n	8008ddc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8008db0:	4b10      	ldr	r3, [pc, #64]	; (8008df4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008db2:	6a1b      	ldr	r3, [r3, #32]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4798      	blx	r3
 8008db8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8008dbc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8008dbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008dc2:	f04f 0200 	mov.w	r2, #0
 8008dc6:	f04f 0300 	mov.w	r3, #0
 8008dca:	000a      	movs	r2, r1
 8008dcc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8008dce:	4613      	mov	r3, r2
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	4621      	mov	r1, r4
 8008dd4:	200d      	movs	r0, #13
 8008dd6:	f7ff fbe7 	bl	80085a8 <SEGGER_SYSVIEW_RecordU32x2>
 8008dda:	e006      	b.n	8008dea <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8008ddc:	4b06      	ldr	r3, [pc, #24]	; (8008df8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4619      	mov	r1, r3
 8008de2:	200c      	movs	r0, #12
 8008de4:	f7ff fba4 	bl	8008530 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8008de8:	bf00      	nop
 8008dea:	bf00      	nop
 8008dec:	370c      	adds	r7, #12
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd90      	pop	{r4, r7, pc}
 8008df2:	bf00      	nop
 8008df4:	200143f8 	.word	0x200143f8
 8008df8:	e0001004 	.word	0xe0001004

08008dfc <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b086      	sub	sp, #24
 8008e00:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008e02:	f3ef 8311 	mrs	r3, BASEPRI
 8008e06:	f04f 0120 	mov.w	r1, #32
 8008e0a:	f381 8811 	msr	BASEPRI, r1
 8008e0e:	60fb      	str	r3, [r7, #12]
 8008e10:	4819      	ldr	r0, [pc, #100]	; (8008e78 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8008e12:	f7ff f801 	bl	8007e18 <_PreparePacket>
 8008e16:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8008e1c:	4b17      	ldr	r3, [pc, #92]	; (8008e7c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e24:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	617b      	str	r3, [r7, #20]
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	613b      	str	r3, [r7, #16]
 8008e2e:	e00b      	b.n	8008e48 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	b2da      	uxtb	r2, r3
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	1c59      	adds	r1, r3, #1
 8008e38:	6179      	str	r1, [r7, #20]
 8008e3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008e3e:	b2d2      	uxtb	r2, r2
 8008e40:	701a      	strb	r2, [r3, #0]
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	09db      	lsrs	r3, r3, #7
 8008e46:	613b      	str	r3, [r7, #16]
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	2b7f      	cmp	r3, #127	; 0x7f
 8008e4c:	d8f0      	bhi.n	8008e30 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	1c5a      	adds	r2, r3, #1
 8008e52:	617a      	str	r2, [r7, #20]
 8008e54:	693a      	ldr	r2, [r7, #16]
 8008e56:	b2d2      	uxtb	r2, r2
 8008e58:	701a      	strb	r2, [r3, #0]
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8008e5e:	2202      	movs	r2, #2
 8008e60:	6879      	ldr	r1, [r7, #4]
 8008e62:	68b8      	ldr	r0, [r7, #8]
 8008e64:	f7ff f8c6 	bl	8007ff4 <_SendPacket>
  RECORD_END();
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f383 8811 	msr	BASEPRI, r3
}
 8008e6e:	bf00      	nop
 8008e70:	3718      	adds	r7, #24
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	20014428 	.word	0x20014428
 8008e7c:	e000ed04 	.word	0xe000ed04

08008e80 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008e86:	f3ef 8311 	mrs	r3, BASEPRI
 8008e8a:	f04f 0120 	mov.w	r1, #32
 8008e8e:	f381 8811 	msr	BASEPRI, r1
 8008e92:	607b      	str	r3, [r7, #4]
 8008e94:	4807      	ldr	r0, [pc, #28]	; (8008eb4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8008e96:	f7fe ffbf 	bl	8007e18 <_PreparePacket>
 8008e9a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8008e9c:	2203      	movs	r2, #3
 8008e9e:	6839      	ldr	r1, [r7, #0]
 8008ea0:	6838      	ldr	r0, [r7, #0]
 8008ea2:	f7ff f8a7 	bl	8007ff4 <_SendPacket>
  RECORD_END();
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f383 8811 	msr	BASEPRI, r3
}
 8008eac:	bf00      	nop
 8008eae:	3708      	adds	r7, #8
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	20014428 	.word	0x20014428

08008eb8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008ebe:	f3ef 8311 	mrs	r3, BASEPRI
 8008ec2:	f04f 0120 	mov.w	r1, #32
 8008ec6:	f381 8811 	msr	BASEPRI, r1
 8008eca:	607b      	str	r3, [r7, #4]
 8008ecc:	4807      	ldr	r0, [pc, #28]	; (8008eec <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8008ece:	f7fe ffa3 	bl	8007e18 <_PreparePacket>
 8008ed2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8008ed4:	2212      	movs	r2, #18
 8008ed6:	6839      	ldr	r1, [r7, #0]
 8008ed8:	6838      	ldr	r0, [r7, #0]
 8008eda:	f7ff f88b 	bl	8007ff4 <_SendPacket>
  RECORD_END();
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f383 8811 	msr	BASEPRI, r3
}
 8008ee4:	bf00      	nop
 8008ee6:	3708      	adds	r7, #8
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	20014428 	.word	0x20014428

08008ef0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008ef6:	f3ef 8311 	mrs	r3, BASEPRI
 8008efa:	f04f 0120 	mov.w	r1, #32
 8008efe:	f381 8811 	msr	BASEPRI, r1
 8008f02:	607b      	str	r3, [r7, #4]
 8008f04:	4807      	ldr	r0, [pc, #28]	; (8008f24 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8008f06:	f7fe ff87 	bl	8007e18 <_PreparePacket>
 8008f0a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8008f0c:	2211      	movs	r2, #17
 8008f0e:	6839      	ldr	r1, [r7, #0]
 8008f10:	6838      	ldr	r0, [r7, #0]
 8008f12:	f7ff f86f 	bl	8007ff4 <_SendPacket>
  RECORD_END();
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f383 8811 	msr	BASEPRI, r3
}
 8008f1c:	bf00      	nop
 8008f1e:	3708      	adds	r7, #8
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	20014428 	.word	0x20014428

08008f28 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b088      	sub	sp, #32
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008f30:	f3ef 8311 	mrs	r3, BASEPRI
 8008f34:	f04f 0120 	mov.w	r1, #32
 8008f38:	f381 8811 	msr	BASEPRI, r1
 8008f3c:	617b      	str	r3, [r7, #20]
 8008f3e:	4819      	ldr	r0, [pc, #100]	; (8008fa4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8008f40:	f7fe ff6a 	bl	8007e18 <_PreparePacket>
 8008f44:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008f4a:	4b17      	ldr	r3, [pc, #92]	; (8008fa8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	1ad3      	subs	r3, r2, r3
 8008f52:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	61fb      	str	r3, [r7, #28]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	61bb      	str	r3, [r7, #24]
 8008f5c:	e00b      	b.n	8008f76 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	b2da      	uxtb	r2, r3
 8008f62:	69fb      	ldr	r3, [r7, #28]
 8008f64:	1c59      	adds	r1, r3, #1
 8008f66:	61f9      	str	r1, [r7, #28]
 8008f68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008f6c:	b2d2      	uxtb	r2, r2
 8008f6e:	701a      	strb	r2, [r3, #0]
 8008f70:	69bb      	ldr	r3, [r7, #24]
 8008f72:	09db      	lsrs	r3, r3, #7
 8008f74:	61bb      	str	r3, [r7, #24]
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	2b7f      	cmp	r3, #127	; 0x7f
 8008f7a:	d8f0      	bhi.n	8008f5e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	1c5a      	adds	r2, r3, #1
 8008f80:	61fa      	str	r2, [r7, #28]
 8008f82:	69ba      	ldr	r2, [r7, #24]
 8008f84:	b2d2      	uxtb	r2, r2
 8008f86:	701a      	strb	r2, [r3, #0]
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8008f8c:	2208      	movs	r2, #8
 8008f8e:	68f9      	ldr	r1, [r7, #12]
 8008f90:	6938      	ldr	r0, [r7, #16]
 8008f92:	f7ff f82f 	bl	8007ff4 <_SendPacket>
  RECORD_END();
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	f383 8811 	msr	BASEPRI, r3
}
 8008f9c:	bf00      	nop
 8008f9e:	3720      	adds	r7, #32
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	20014428 	.word	0x20014428
 8008fa8:	200143f8 	.word	0x200143f8

08008fac <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b088      	sub	sp, #32
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008fb4:	f3ef 8311 	mrs	r3, BASEPRI
 8008fb8:	f04f 0120 	mov.w	r1, #32
 8008fbc:	f381 8811 	msr	BASEPRI, r1
 8008fc0:	617b      	str	r3, [r7, #20]
 8008fc2:	4819      	ldr	r0, [pc, #100]	; (8009028 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8008fc4:	f7fe ff28 	bl	8007e18 <_PreparePacket>
 8008fc8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008fce:	4b17      	ldr	r3, [pc, #92]	; (800902c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8008fd0:	691b      	ldr	r3, [r3, #16]
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	61fb      	str	r3, [r7, #28]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	61bb      	str	r3, [r7, #24]
 8008fe0:	e00b      	b.n	8008ffa <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	b2da      	uxtb	r2, r3
 8008fe6:	69fb      	ldr	r3, [r7, #28]
 8008fe8:	1c59      	adds	r1, r3, #1
 8008fea:	61f9      	str	r1, [r7, #28]
 8008fec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008ff0:	b2d2      	uxtb	r2, r2
 8008ff2:	701a      	strb	r2, [r3, #0]
 8008ff4:	69bb      	ldr	r3, [r7, #24]
 8008ff6:	09db      	lsrs	r3, r3, #7
 8008ff8:	61bb      	str	r3, [r7, #24]
 8008ffa:	69bb      	ldr	r3, [r7, #24]
 8008ffc:	2b7f      	cmp	r3, #127	; 0x7f
 8008ffe:	d8f0      	bhi.n	8008fe2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8009000:	69fb      	ldr	r3, [r7, #28]
 8009002:	1c5a      	adds	r2, r3, #1
 8009004:	61fa      	str	r2, [r7, #28]
 8009006:	69ba      	ldr	r2, [r7, #24]
 8009008:	b2d2      	uxtb	r2, r2
 800900a:	701a      	strb	r2, [r3, #0]
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8009010:	2204      	movs	r2, #4
 8009012:	68f9      	ldr	r1, [r7, #12]
 8009014:	6938      	ldr	r0, [r7, #16]
 8009016:	f7fe ffed 	bl	8007ff4 <_SendPacket>
  RECORD_END();
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	f383 8811 	msr	BASEPRI, r3
}
 8009020:	bf00      	nop
 8009022:	3720      	adds	r7, #32
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	20014428 	.word	0x20014428
 800902c:	200143f8 	.word	0x200143f8

08009030 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8009030:	b580      	push	{r7, lr}
 8009032:	b088      	sub	sp, #32
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009038:	f3ef 8311 	mrs	r3, BASEPRI
 800903c:	f04f 0120 	mov.w	r1, #32
 8009040:	f381 8811 	msr	BASEPRI, r1
 8009044:	617b      	str	r3, [r7, #20]
 8009046:	4819      	ldr	r0, [pc, #100]	; (80090ac <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8009048:	f7fe fee6 	bl	8007e18 <_PreparePacket>
 800904c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8009052:	4b17      	ldr	r3, [pc, #92]	; (80090b0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8009054:	691b      	ldr	r3, [r3, #16]
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	1ad3      	subs	r3, r2, r3
 800905a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	61fb      	str	r3, [r7, #28]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	61bb      	str	r3, [r7, #24]
 8009064:	e00b      	b.n	800907e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8009066:	69bb      	ldr	r3, [r7, #24]
 8009068:	b2da      	uxtb	r2, r3
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	1c59      	adds	r1, r3, #1
 800906e:	61f9      	str	r1, [r7, #28]
 8009070:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009074:	b2d2      	uxtb	r2, r2
 8009076:	701a      	strb	r2, [r3, #0]
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	09db      	lsrs	r3, r3, #7
 800907c:	61bb      	str	r3, [r7, #24]
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	2b7f      	cmp	r3, #127	; 0x7f
 8009082:	d8f0      	bhi.n	8009066 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	1c5a      	adds	r2, r3, #1
 8009088:	61fa      	str	r2, [r7, #28]
 800908a:	69ba      	ldr	r2, [r7, #24]
 800908c:	b2d2      	uxtb	r2, r2
 800908e:	701a      	strb	r2, [r3, #0]
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8009094:	2206      	movs	r2, #6
 8009096:	68f9      	ldr	r1, [r7, #12]
 8009098:	6938      	ldr	r0, [r7, #16]
 800909a:	f7fe ffab 	bl	8007ff4 <_SendPacket>
  RECORD_END();
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	f383 8811 	msr	BASEPRI, r3
}
 80090a4:	bf00      	nop
 80090a6:	3720      	adds	r7, #32
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	20014428 	.word	0x20014428
 80090b0:	200143f8 	.word	0x200143f8

080090b4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b08a      	sub	sp, #40	; 0x28
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80090be:	f3ef 8311 	mrs	r3, BASEPRI
 80090c2:	f04f 0120 	mov.w	r1, #32
 80090c6:	f381 8811 	msr	BASEPRI, r1
 80090ca:	617b      	str	r3, [r7, #20]
 80090cc:	4827      	ldr	r0, [pc, #156]	; (800916c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80090ce:	f7fe fea3 	bl	8007e18 <_PreparePacket>
 80090d2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80090d8:	4b25      	ldr	r3, [pc, #148]	; (8009170 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80090da:	691b      	ldr	r3, [r3, #16]
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	1ad3      	subs	r3, r2, r3
 80090e0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	627b      	str	r3, [r7, #36]	; 0x24
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	623b      	str	r3, [r7, #32]
 80090ea:	e00b      	b.n	8009104 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80090ec:	6a3b      	ldr	r3, [r7, #32]
 80090ee:	b2da      	uxtb	r2, r3
 80090f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f2:	1c59      	adds	r1, r3, #1
 80090f4:	6279      	str	r1, [r7, #36]	; 0x24
 80090f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80090fa:	b2d2      	uxtb	r2, r2
 80090fc:	701a      	strb	r2, [r3, #0]
 80090fe:	6a3b      	ldr	r3, [r7, #32]
 8009100:	09db      	lsrs	r3, r3, #7
 8009102:	623b      	str	r3, [r7, #32]
 8009104:	6a3b      	ldr	r3, [r7, #32]
 8009106:	2b7f      	cmp	r3, #127	; 0x7f
 8009108:	d8f0      	bhi.n	80090ec <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800910a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910c:	1c5a      	adds	r2, r3, #1
 800910e:	627a      	str	r2, [r7, #36]	; 0x24
 8009110:	6a3a      	ldr	r2, [r7, #32]
 8009112:	b2d2      	uxtb	r2, r2
 8009114:	701a      	strb	r2, [r3, #0]
 8009116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009118:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	61fb      	str	r3, [r7, #28]
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	61bb      	str	r3, [r7, #24]
 8009122:	e00b      	b.n	800913c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8009124:	69bb      	ldr	r3, [r7, #24]
 8009126:	b2da      	uxtb	r2, r3
 8009128:	69fb      	ldr	r3, [r7, #28]
 800912a:	1c59      	adds	r1, r3, #1
 800912c:	61f9      	str	r1, [r7, #28]
 800912e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009132:	b2d2      	uxtb	r2, r2
 8009134:	701a      	strb	r2, [r3, #0]
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	09db      	lsrs	r3, r3, #7
 800913a:	61bb      	str	r3, [r7, #24]
 800913c:	69bb      	ldr	r3, [r7, #24]
 800913e:	2b7f      	cmp	r3, #127	; 0x7f
 8009140:	d8f0      	bhi.n	8009124 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8009142:	69fb      	ldr	r3, [r7, #28]
 8009144:	1c5a      	adds	r2, r3, #1
 8009146:	61fa      	str	r2, [r7, #28]
 8009148:	69ba      	ldr	r2, [r7, #24]
 800914a:	b2d2      	uxtb	r2, r2
 800914c:	701a      	strb	r2, [r3, #0]
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8009152:	2207      	movs	r2, #7
 8009154:	68f9      	ldr	r1, [r7, #12]
 8009156:	6938      	ldr	r0, [r7, #16]
 8009158:	f7fe ff4c 	bl	8007ff4 <_SendPacket>
  RECORD_END();
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	f383 8811 	msr	BASEPRI, r3
}
 8009162:	bf00      	nop
 8009164:	3728      	adds	r7, #40	; 0x28
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	20014428 	.word	0x20014428
 8009170:	200143f8 	.word	0x200143f8

08009174 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800917c:	4b04      	ldr	r3, [pc, #16]	; (8009190 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800917e:	691b      	ldr	r3, [r3, #16]
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	1ad3      	subs	r3, r2, r3
}
 8009184:	4618      	mov	r0, r3
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr
 8009190:	200143f8 	.word	0x200143f8

08009194 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8009194:	b580      	push	{r7, lr}
 8009196:	b08c      	sub	sp, #48	; 0x30
 8009198:	af00      	add	r7, sp, #0
 800919a:	4603      	mov	r3, r0
 800919c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800919e:	4b3b      	ldr	r3, [pc, #236]	; (800928c <SEGGER_SYSVIEW_SendModule+0xf8>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d06d      	beq.n	8009282 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80091a6:	4b39      	ldr	r3, [pc, #228]	; (800928c <SEGGER_SYSVIEW_SendModule+0xf8>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80091ac:	2300      	movs	r3, #0
 80091ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80091b0:	e008      	b.n	80091c4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80091b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80091b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d007      	beq.n	80091ce <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80091be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c0:	3301      	adds	r3, #1
 80091c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80091c4:	79fb      	ldrb	r3, [r7, #7]
 80091c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d3f2      	bcc.n	80091b2 <SEGGER_SYSVIEW_SendModule+0x1e>
 80091cc:	e000      	b.n	80091d0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80091ce:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80091d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d055      	beq.n	8009282 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80091d6:	f3ef 8311 	mrs	r3, BASEPRI
 80091da:	f04f 0120 	mov.w	r1, #32
 80091de:	f381 8811 	msr	BASEPRI, r1
 80091e2:	617b      	str	r3, [r7, #20]
 80091e4:	482a      	ldr	r0, [pc, #168]	; (8009290 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80091e6:	f7fe fe17 	bl	8007e18 <_PreparePacket>
 80091ea:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	627b      	str	r3, [r7, #36]	; 0x24
 80091f4:	79fb      	ldrb	r3, [r7, #7]
 80091f6:	623b      	str	r3, [r7, #32]
 80091f8:	e00b      	b.n	8009212 <SEGGER_SYSVIEW_SendModule+0x7e>
 80091fa:	6a3b      	ldr	r3, [r7, #32]
 80091fc:	b2da      	uxtb	r2, r3
 80091fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009200:	1c59      	adds	r1, r3, #1
 8009202:	6279      	str	r1, [r7, #36]	; 0x24
 8009204:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009208:	b2d2      	uxtb	r2, r2
 800920a:	701a      	strb	r2, [r3, #0]
 800920c:	6a3b      	ldr	r3, [r7, #32]
 800920e:	09db      	lsrs	r3, r3, #7
 8009210:	623b      	str	r3, [r7, #32]
 8009212:	6a3b      	ldr	r3, [r7, #32]
 8009214:	2b7f      	cmp	r3, #127	; 0x7f
 8009216:	d8f0      	bhi.n	80091fa <SEGGER_SYSVIEW_SendModule+0x66>
 8009218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921a:	1c5a      	adds	r2, r3, #1
 800921c:	627a      	str	r2, [r7, #36]	; 0x24
 800921e:	6a3a      	ldr	r2, [r7, #32]
 8009220:	b2d2      	uxtb	r2, r2
 8009222:	701a      	strb	r2, [r3, #0]
 8009224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009226:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	61fb      	str	r3, [r7, #28]
 800922c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	61bb      	str	r3, [r7, #24]
 8009232:	e00b      	b.n	800924c <SEGGER_SYSVIEW_SendModule+0xb8>
 8009234:	69bb      	ldr	r3, [r7, #24]
 8009236:	b2da      	uxtb	r2, r3
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	1c59      	adds	r1, r3, #1
 800923c:	61f9      	str	r1, [r7, #28]
 800923e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009242:	b2d2      	uxtb	r2, r2
 8009244:	701a      	strb	r2, [r3, #0]
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	09db      	lsrs	r3, r3, #7
 800924a:	61bb      	str	r3, [r7, #24]
 800924c:	69bb      	ldr	r3, [r7, #24]
 800924e:	2b7f      	cmp	r3, #127	; 0x7f
 8009250:	d8f0      	bhi.n	8009234 <SEGGER_SYSVIEW_SendModule+0xa0>
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	1c5a      	adds	r2, r3, #1
 8009256:	61fa      	str	r2, [r7, #28]
 8009258:	69ba      	ldr	r2, [r7, #24]
 800925a:	b2d2      	uxtb	r2, r2
 800925c:	701a      	strb	r2, [r3, #0]
 800925e:	69fb      	ldr	r3, [r7, #28]
 8009260:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	2280      	movs	r2, #128	; 0x80
 8009268:	4619      	mov	r1, r3
 800926a:	68f8      	ldr	r0, [r7, #12]
 800926c:	f7fe fd84 	bl	8007d78 <_EncodeStr>
 8009270:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8009272:	2216      	movs	r2, #22
 8009274:	68f9      	ldr	r1, [r7, #12]
 8009276:	6938      	ldr	r0, [r7, #16]
 8009278:	f7fe febc 	bl	8007ff4 <_SendPacket>
      RECORD_END();
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8009282:	bf00      	nop
 8009284:	3730      	adds	r7, #48	; 0x30
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	20014420 	.word	0x20014420
 8009290:	20014428 	.word	0x20014428

08009294 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800929a:	4b0c      	ldr	r3, [pc, #48]	; (80092cc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00f      	beq.n	80092c2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80092a2:	4b0a      	ldr	r3, [pc, #40]	; (80092cc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d002      	beq.n	80092b6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	68db      	ldr	r3, [r3, #12]
 80092b4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	691b      	ldr	r3, [r3, #16]
 80092ba:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d1f2      	bne.n	80092a8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80092c2:	bf00      	nop
 80092c4:	3708      	adds	r7, #8
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	20014420 	.word	0x20014420

080092d0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b086      	sub	sp, #24
 80092d4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80092d6:	f3ef 8311 	mrs	r3, BASEPRI
 80092da:	f04f 0120 	mov.w	r1, #32
 80092de:	f381 8811 	msr	BASEPRI, r1
 80092e2:	60fb      	str	r3, [r7, #12]
 80092e4:	4817      	ldr	r0, [pc, #92]	; (8009344 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80092e6:	f7fe fd97 	bl	8007e18 <_PreparePacket>
 80092ea:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	617b      	str	r3, [r7, #20]
 80092f4:	4b14      	ldr	r3, [pc, #80]	; (8009348 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	613b      	str	r3, [r7, #16]
 80092fa:	e00b      	b.n	8009314 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	b2da      	uxtb	r2, r3
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	1c59      	adds	r1, r3, #1
 8009304:	6179      	str	r1, [r7, #20]
 8009306:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800930a:	b2d2      	uxtb	r2, r2
 800930c:	701a      	strb	r2, [r3, #0]
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	09db      	lsrs	r3, r3, #7
 8009312:	613b      	str	r3, [r7, #16]
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	2b7f      	cmp	r3, #127	; 0x7f
 8009318:	d8f0      	bhi.n	80092fc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	1c5a      	adds	r2, r3, #1
 800931e:	617a      	str	r2, [r7, #20]
 8009320:	693a      	ldr	r2, [r7, #16]
 8009322:	b2d2      	uxtb	r2, r2
 8009324:	701a      	strb	r2, [r3, #0]
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800932a:	221b      	movs	r2, #27
 800932c:	6879      	ldr	r1, [r7, #4]
 800932e:	68b8      	ldr	r0, [r7, #8]
 8009330:	f7fe fe60 	bl	8007ff4 <_SendPacket>
  RECORD_END();
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f383 8811 	msr	BASEPRI, r3
}
 800933a:	bf00      	nop
 800933c:	3718      	adds	r7, #24
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	20014428 	.word	0x20014428
 8009348:	20014424 	.word	0x20014424

0800934c <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 800934c:	b40f      	push	{r0, r1, r2, r3}
 800934e:	b580      	push	{r7, lr}
 8009350:	b082      	sub	sp, #8
 8009352:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 8009354:	f107 0314 	add.w	r3, r7, #20
 8009358:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800935a:	1d3b      	adds	r3, r7, #4
 800935c:	461a      	mov	r2, r3
 800935e:	2100      	movs	r1, #0
 8009360:	6938      	ldr	r0, [r7, #16]
 8009362:	f7fe ffb5 	bl	80082d0 <_VPrintHost>
  va_end(ParamList);
#endif
}
 8009366:	bf00      	nop
 8009368:	3708      	adds	r7, #8
 800936a:	46bd      	mov	sp, r7
 800936c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009370:	b004      	add	sp, #16
 8009372:	4770      	bx	lr

08009374 <SEGGER_SYSVIEW_Print>:
*    Print a string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Print(const char* s) {
 8009374:	b580      	push	{r7, lr}
 8009376:	b08a      	sub	sp, #40	; 0x28
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800937c:	f3ef 8311 	mrs	r3, BASEPRI
 8009380:	f04f 0120 	mov.w	r1, #32
 8009384:	f381 8811 	msr	BASEPRI, r1
 8009388:	617b      	str	r3, [r7, #20]
 800938a:	4827      	ldr	r0, [pc, #156]	; (8009428 <SEGGER_SYSVIEW_Print+0xb4>)
 800938c:	f7fe fd44 	bl	8007e18 <_PreparePacket>
 8009390:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009392:	2280      	movs	r2, #128	; 0x80
 8009394:	6879      	ldr	r1, [r7, #4]
 8009396:	6938      	ldr	r0, [r7, #16]
 8009398:	f7fe fcee 	bl	8007d78 <_EncodeStr>
 800939c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_LOG);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	627b      	str	r3, [r7, #36]	; 0x24
 80093a2:	2300      	movs	r3, #0
 80093a4:	623b      	str	r3, [r7, #32]
 80093a6:	e00b      	b.n	80093c0 <SEGGER_SYSVIEW_Print+0x4c>
 80093a8:	6a3b      	ldr	r3, [r7, #32]
 80093aa:	b2da      	uxtb	r2, r3
 80093ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ae:	1c59      	adds	r1, r3, #1
 80093b0:	6279      	str	r1, [r7, #36]	; 0x24
 80093b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80093b6:	b2d2      	uxtb	r2, r2
 80093b8:	701a      	strb	r2, [r3, #0]
 80093ba:	6a3b      	ldr	r3, [r7, #32]
 80093bc:	09db      	lsrs	r3, r3, #7
 80093be:	623b      	str	r3, [r7, #32]
 80093c0:	6a3b      	ldr	r3, [r7, #32]
 80093c2:	2b7f      	cmp	r3, #127	; 0x7f
 80093c4:	d8f0      	bhi.n	80093a8 <SEGGER_SYSVIEW_Print+0x34>
 80093c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c8:	1c5a      	adds	r2, r3, #1
 80093ca:	627a      	str	r2, [r7, #36]	; 0x24
 80093cc:	6a3a      	ldr	r2, [r7, #32]
 80093ce:	b2d2      	uxtb	r2, r2
 80093d0:	701a      	strb	r2, [r3, #0]
 80093d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	61fb      	str	r3, [r7, #28]
 80093da:	2300      	movs	r3, #0
 80093dc:	61bb      	str	r3, [r7, #24]
 80093de:	e00b      	b.n	80093f8 <SEGGER_SYSVIEW_Print+0x84>
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	b2da      	uxtb	r2, r3
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	1c59      	adds	r1, r3, #1
 80093e8:	61f9      	str	r1, [r7, #28]
 80093ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80093ee:	b2d2      	uxtb	r2, r2
 80093f0:	701a      	strb	r2, [r3, #0]
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	09db      	lsrs	r3, r3, #7
 80093f6:	61bb      	str	r3, [r7, #24]
 80093f8:	69bb      	ldr	r3, [r7, #24]
 80093fa:	2b7f      	cmp	r3, #127	; 0x7f
 80093fc:	d8f0      	bhi.n	80093e0 <SEGGER_SYSVIEW_Print+0x6c>
 80093fe:	69fb      	ldr	r3, [r7, #28]
 8009400:	1c5a      	adds	r2, r3, #1
 8009402:	61fa      	str	r2, [r7, #28]
 8009404:	69ba      	ldr	r2, [r7, #24]
 8009406:	b2d2      	uxtb	r2, r2
 8009408:	701a      	strb	r2, [r3, #0]
 800940a:	69fb      	ldr	r3, [r7, #28]
 800940c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800940e:	221a      	movs	r2, #26
 8009410:	68f9      	ldr	r1, [r7, #12]
 8009412:	6938      	ldr	r0, [r7, #16]
 8009414:	f7fe fdee 	bl	8007ff4 <_SendPacket>
  RECORD_END();
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	f383 8811 	msr	BASEPRI, r3
}
 800941e:	bf00      	nop
 8009420:	3728      	adds	r7, #40	; 0x28
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	20014428 	.word	0x20014428

0800942c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800942c:	b580      	push	{r7, lr}
 800942e:	b08a      	sub	sp, #40	; 0x28
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009434:	f3ef 8311 	mrs	r3, BASEPRI
 8009438:	f04f 0120 	mov.w	r1, #32
 800943c:	f381 8811 	msr	BASEPRI, r1
 8009440:	617b      	str	r3, [r7, #20]
 8009442:	4827      	ldr	r0, [pc, #156]	; (80094e0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8009444:	f7fe fce8 	bl	8007e18 <_PreparePacket>
 8009448:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800944a:	2280      	movs	r2, #128	; 0x80
 800944c:	6879      	ldr	r1, [r7, #4]
 800944e:	6938      	ldr	r0, [r7, #16]
 8009450:	f7fe fc92 	bl	8007d78 <_EncodeStr>
 8009454:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	627b      	str	r3, [r7, #36]	; 0x24
 800945a:	2301      	movs	r3, #1
 800945c:	623b      	str	r3, [r7, #32]
 800945e:	e00b      	b.n	8009478 <SEGGER_SYSVIEW_Warn+0x4c>
 8009460:	6a3b      	ldr	r3, [r7, #32]
 8009462:	b2da      	uxtb	r2, r3
 8009464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009466:	1c59      	adds	r1, r3, #1
 8009468:	6279      	str	r1, [r7, #36]	; 0x24
 800946a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800946e:	b2d2      	uxtb	r2, r2
 8009470:	701a      	strb	r2, [r3, #0]
 8009472:	6a3b      	ldr	r3, [r7, #32]
 8009474:	09db      	lsrs	r3, r3, #7
 8009476:	623b      	str	r3, [r7, #32]
 8009478:	6a3b      	ldr	r3, [r7, #32]
 800947a:	2b7f      	cmp	r3, #127	; 0x7f
 800947c:	d8f0      	bhi.n	8009460 <SEGGER_SYSVIEW_Warn+0x34>
 800947e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009480:	1c5a      	adds	r2, r3, #1
 8009482:	627a      	str	r2, [r7, #36]	; 0x24
 8009484:	6a3a      	ldr	r2, [r7, #32]
 8009486:	b2d2      	uxtb	r2, r2
 8009488:	701a      	strb	r2, [r3, #0]
 800948a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	61fb      	str	r3, [r7, #28]
 8009492:	2300      	movs	r3, #0
 8009494:	61bb      	str	r3, [r7, #24]
 8009496:	e00b      	b.n	80094b0 <SEGGER_SYSVIEW_Warn+0x84>
 8009498:	69bb      	ldr	r3, [r7, #24]
 800949a:	b2da      	uxtb	r2, r3
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	1c59      	adds	r1, r3, #1
 80094a0:	61f9      	str	r1, [r7, #28]
 80094a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80094a6:	b2d2      	uxtb	r2, r2
 80094a8:	701a      	strb	r2, [r3, #0]
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	09db      	lsrs	r3, r3, #7
 80094ae:	61bb      	str	r3, [r7, #24]
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	2b7f      	cmp	r3, #127	; 0x7f
 80094b4:	d8f0      	bhi.n	8009498 <SEGGER_SYSVIEW_Warn+0x6c>
 80094b6:	69fb      	ldr	r3, [r7, #28]
 80094b8:	1c5a      	adds	r2, r3, #1
 80094ba:	61fa      	str	r2, [r7, #28]
 80094bc:	69ba      	ldr	r2, [r7, #24]
 80094be:	b2d2      	uxtb	r2, r2
 80094c0:	701a      	strb	r2, [r3, #0]
 80094c2:	69fb      	ldr	r3, [r7, #28]
 80094c4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80094c6:	221a      	movs	r2, #26
 80094c8:	68f9      	ldr	r1, [r7, #12]
 80094ca:	6938      	ldr	r0, [r7, #16]
 80094cc:	f7fe fd92 	bl	8007ff4 <_SendPacket>
  RECORD_END();
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	f383 8811 	msr	BASEPRI, r3
}
 80094d6:	bf00      	nop
 80094d8:	3728      	adds	r7, #40	; 0x28
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	20014428 	.word	0x20014428

080094e4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80094e4:	b580      	push	{r7, lr}
 80094e6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80094e8:	4803      	ldr	r0, [pc, #12]	; (80094f8 <_cbSendSystemDesc+0x14>)
 80094ea:	f7ff fc31 	bl	8008d50 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80094ee:	4803      	ldr	r0, [pc, #12]	; (80094fc <_cbSendSystemDesc+0x18>)
 80094f0:	f7ff fc2e 	bl	8008d50 <SEGGER_SYSVIEW_SendSysDesc>
}
 80094f4:	bf00      	nop
 80094f6:	bd80      	pop	{r7, pc}
 80094f8:	08009a8c 	.word	0x08009a8c
 80094fc:	08009ad0 	.word	0x08009ad0

08009500 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8009500:	b580      	push	{r7, lr}
 8009502:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8009504:	4b06      	ldr	r3, [pc, #24]	; (8009520 <SEGGER_SYSVIEW_Conf+0x20>)
 8009506:	6818      	ldr	r0, [r3, #0]
 8009508:	4b05      	ldr	r3, [pc, #20]	; (8009520 <SEGGER_SYSVIEW_Conf+0x20>)
 800950a:	6819      	ldr	r1, [r3, #0]
 800950c:	4b05      	ldr	r3, [pc, #20]	; (8009524 <SEGGER_SYSVIEW_Conf+0x24>)
 800950e:	4a06      	ldr	r2, [pc, #24]	; (8009528 <SEGGER_SYSVIEW_Conf+0x28>)
 8009510:	f7fe ff9c 	bl	800844c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8009514:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8009518:	f7fe ffdc 	bl	80084d4 <SEGGER_SYSVIEW_SetRAMBase>
}
 800951c:	bf00      	nop
 800951e:	bd80      	pop	{r7, pc}
 8009520:	20000000 	.word	0x20000000
 8009524:	080094e5 	.word	0x080094e5
 8009528:	08009b88 	.word	0x08009b88

0800952c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800952c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800952e:	b085      	sub	sp, #20
 8009530:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8009532:	2300      	movs	r3, #0
 8009534:	607b      	str	r3, [r7, #4]
 8009536:	e033      	b.n	80095a0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8009538:	491e      	ldr	r1, [pc, #120]	; (80095b4 <_cbSendTaskList+0x88>)
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	4613      	mov	r3, r2
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	4413      	add	r3, r2
 8009542:	009b      	lsls	r3, r3, #2
 8009544:	440b      	add	r3, r1
 8009546:	6818      	ldr	r0, [r3, #0]
 8009548:	491a      	ldr	r1, [pc, #104]	; (80095b4 <_cbSendTaskList+0x88>)
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	4613      	mov	r3, r2
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	4413      	add	r3, r2
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	440b      	add	r3, r1
 8009556:	3304      	adds	r3, #4
 8009558:	6819      	ldr	r1, [r3, #0]
 800955a:	4c16      	ldr	r4, [pc, #88]	; (80095b4 <_cbSendTaskList+0x88>)
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	4613      	mov	r3, r2
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	4413      	add	r3, r2
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	4423      	add	r3, r4
 8009568:	3308      	adds	r3, #8
 800956a:	681c      	ldr	r4, [r3, #0]
 800956c:	4d11      	ldr	r5, [pc, #68]	; (80095b4 <_cbSendTaskList+0x88>)
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	4613      	mov	r3, r2
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	4413      	add	r3, r2
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	442b      	add	r3, r5
 800957a:	330c      	adds	r3, #12
 800957c:	681d      	ldr	r5, [r3, #0]
 800957e:	4e0d      	ldr	r6, [pc, #52]	; (80095b4 <_cbSendTaskList+0x88>)
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	4613      	mov	r3, r2
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	4413      	add	r3, r2
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	4433      	add	r3, r6
 800958c:	3310      	adds	r3, #16
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	9300      	str	r3, [sp, #0]
 8009592:	462b      	mov	r3, r5
 8009594:	4622      	mov	r2, r4
 8009596:	f000 f8bd 	bl	8009714 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	3301      	adds	r3, #1
 800959e:	607b      	str	r3, [r7, #4]
 80095a0:	4b05      	ldr	r3, [pc, #20]	; (80095b8 <_cbSendTaskList+0x8c>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d3c6      	bcc.n	8009538 <_cbSendTaskList+0xc>
  }
}
 80095aa:	bf00      	nop
 80095ac:	bf00      	nop
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095b4:	2001450c 	.word	0x2001450c
 80095b8:	200145ac 	.word	0x200145ac

080095bc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80095bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095c0:	b082      	sub	sp, #8
 80095c2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80095c4:	f7fc fcfc 	bl	8005fc0 <xTaskGetTickCountFromISR>
 80095c8:	4603      	mov	r3, r0
 80095ca:	2200      	movs	r2, #0
 80095cc:	469a      	mov	sl, r3
 80095ce:	4693      	mov	fp, r2
 80095d0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80095d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095d8:	4602      	mov	r2, r0
 80095da:	460b      	mov	r3, r1
 80095dc:	f04f 0a00 	mov.w	sl, #0
 80095e0:	f04f 0b00 	mov.w	fp, #0
 80095e4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80095e8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80095ec:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80095f0:	4652      	mov	r2, sl
 80095f2:	465b      	mov	r3, fp
 80095f4:	1a14      	subs	r4, r2, r0
 80095f6:	eb63 0501 	sbc.w	r5, r3, r1
 80095fa:	f04f 0200 	mov.w	r2, #0
 80095fe:	f04f 0300 	mov.w	r3, #0
 8009602:	00ab      	lsls	r3, r5, #2
 8009604:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8009608:	00a2      	lsls	r2, r4, #2
 800960a:	4614      	mov	r4, r2
 800960c:	461d      	mov	r5, r3
 800960e:	eb14 0800 	adds.w	r8, r4, r0
 8009612:	eb45 0901 	adc.w	r9, r5, r1
 8009616:	f04f 0200 	mov.w	r2, #0
 800961a:	f04f 0300 	mov.w	r3, #0
 800961e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009622:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009626:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800962a:	4690      	mov	r8, r2
 800962c:	4699      	mov	r9, r3
 800962e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8009632:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8009636:	4610      	mov	r0, r2
 8009638:	4619      	mov	r1, r3
 800963a:	3708      	adds	r7, #8
 800963c:	46bd      	mov	sp, r7
 800963e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08009644 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8009644:	b580      	push	{r7, lr}
 8009646:	b086      	sub	sp, #24
 8009648:	af02      	add	r7, sp, #8
 800964a:	60f8      	str	r0, [r7, #12]
 800964c:	60b9      	str	r1, [r7, #8]
 800964e:	607a      	str	r2, [r7, #4]
 8009650:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8009652:	2205      	movs	r2, #5
 8009654:	492b      	ldr	r1, [pc, #172]	; (8009704 <SYSVIEW_AddTask+0xc0>)
 8009656:	68b8      	ldr	r0, [r7, #8]
 8009658:	f000 f8a2 	bl	80097a0 <memcmp>
 800965c:	4603      	mov	r3, r0
 800965e:	2b00      	cmp	r3, #0
 8009660:	d04b      	beq.n	80096fa <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8009662:	4b29      	ldr	r3, [pc, #164]	; (8009708 <SYSVIEW_AddTask+0xc4>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	2b07      	cmp	r3, #7
 8009668:	d903      	bls.n	8009672 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800966a:	4828      	ldr	r0, [pc, #160]	; (800970c <SYSVIEW_AddTask+0xc8>)
 800966c:	f7ff fede 	bl	800942c <SEGGER_SYSVIEW_Warn>
    return;
 8009670:	e044      	b.n	80096fc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8009672:	4b25      	ldr	r3, [pc, #148]	; (8009708 <SYSVIEW_AddTask+0xc4>)
 8009674:	681a      	ldr	r2, [r3, #0]
 8009676:	4926      	ldr	r1, [pc, #152]	; (8009710 <SYSVIEW_AddTask+0xcc>)
 8009678:	4613      	mov	r3, r2
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	4413      	add	r3, r2
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	440b      	add	r3, r1
 8009682:	68fa      	ldr	r2, [r7, #12]
 8009684:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8009686:	4b20      	ldr	r3, [pc, #128]	; (8009708 <SYSVIEW_AddTask+0xc4>)
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	4921      	ldr	r1, [pc, #132]	; (8009710 <SYSVIEW_AddTask+0xcc>)
 800968c:	4613      	mov	r3, r2
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	4413      	add	r3, r2
 8009692:	009b      	lsls	r3, r3, #2
 8009694:	440b      	add	r3, r1
 8009696:	3304      	adds	r3, #4
 8009698:	68ba      	ldr	r2, [r7, #8]
 800969a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800969c:	4b1a      	ldr	r3, [pc, #104]	; (8009708 <SYSVIEW_AddTask+0xc4>)
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	491b      	ldr	r1, [pc, #108]	; (8009710 <SYSVIEW_AddTask+0xcc>)
 80096a2:	4613      	mov	r3, r2
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	4413      	add	r3, r2
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	440b      	add	r3, r1
 80096ac:	3308      	adds	r3, #8
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80096b2:	4b15      	ldr	r3, [pc, #84]	; (8009708 <SYSVIEW_AddTask+0xc4>)
 80096b4:	681a      	ldr	r2, [r3, #0]
 80096b6:	4916      	ldr	r1, [pc, #88]	; (8009710 <SYSVIEW_AddTask+0xcc>)
 80096b8:	4613      	mov	r3, r2
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	4413      	add	r3, r2
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	440b      	add	r3, r1
 80096c2:	330c      	adds	r3, #12
 80096c4:	683a      	ldr	r2, [r7, #0]
 80096c6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80096c8:	4b0f      	ldr	r3, [pc, #60]	; (8009708 <SYSVIEW_AddTask+0xc4>)
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	4910      	ldr	r1, [pc, #64]	; (8009710 <SYSVIEW_AddTask+0xcc>)
 80096ce:	4613      	mov	r3, r2
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	4413      	add	r3, r2
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	440b      	add	r3, r1
 80096d8:	3310      	adds	r3, #16
 80096da:	69ba      	ldr	r2, [r7, #24]
 80096dc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80096de:	4b0a      	ldr	r3, [pc, #40]	; (8009708 <SYSVIEW_AddTask+0xc4>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	3301      	adds	r3, #1
 80096e4:	4a08      	ldr	r2, [pc, #32]	; (8009708 <SYSVIEW_AddTask+0xc4>)
 80096e6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80096e8:	69bb      	ldr	r3, [r7, #24]
 80096ea:	9300      	str	r3, [sp, #0]
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	68b9      	ldr	r1, [r7, #8]
 80096f2:	68f8      	ldr	r0, [r7, #12]
 80096f4:	f000 f80e 	bl	8009714 <SYSVIEW_SendTaskInfo>
 80096f8:	e000      	b.n	80096fc <SYSVIEW_AddTask+0xb8>
    return;
 80096fa:	bf00      	nop

}
 80096fc:	3710      	adds	r7, #16
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	08009ae0 	.word	0x08009ae0
 8009708:	200145ac 	.word	0x200145ac
 800970c:	08009ae8 	.word	0x08009ae8
 8009710:	2001450c 	.word	0x2001450c

08009714 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8009714:	b580      	push	{r7, lr}
 8009716:	b08a      	sub	sp, #40	; 0x28
 8009718:	af00      	add	r7, sp, #0
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	607a      	str	r2, [r7, #4]
 8009720:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8009722:	f107 0314 	add.w	r3, r7, #20
 8009726:	2214      	movs	r2, #20
 8009728:	2100      	movs	r1, #0
 800972a:	4618      	mov	r0, r3
 800972c:	f000 f856 	bl	80097dc <memset>
  TaskInfo.TaskID     = TaskID;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8009740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009742:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8009744:	f107 0314 	add.w	r3, r7, #20
 8009748:	4618      	mov	r0, r3
 800974a:	f7ff fa09 	bl	8008b60 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800974e:	bf00      	nop
 8009750:	3728      	adds	r7, #40	; 0x28
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
	...

08009758 <__libc_init_array>:
 8009758:	b570      	push	{r4, r5, r6, lr}
 800975a:	4d0d      	ldr	r5, [pc, #52]	; (8009790 <__libc_init_array+0x38>)
 800975c:	4c0d      	ldr	r4, [pc, #52]	; (8009794 <__libc_init_array+0x3c>)
 800975e:	1b64      	subs	r4, r4, r5
 8009760:	10a4      	asrs	r4, r4, #2
 8009762:	2600      	movs	r6, #0
 8009764:	42a6      	cmp	r6, r4
 8009766:	d109      	bne.n	800977c <__libc_init_array+0x24>
 8009768:	4d0b      	ldr	r5, [pc, #44]	; (8009798 <__libc_init_array+0x40>)
 800976a:	4c0c      	ldr	r4, [pc, #48]	; (800979c <__libc_init_array+0x44>)
 800976c:	f000 f83e 	bl	80097ec <_init>
 8009770:	1b64      	subs	r4, r4, r5
 8009772:	10a4      	asrs	r4, r4, #2
 8009774:	2600      	movs	r6, #0
 8009776:	42a6      	cmp	r6, r4
 8009778:	d105      	bne.n	8009786 <__libc_init_array+0x2e>
 800977a:	bd70      	pop	{r4, r5, r6, pc}
 800977c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009780:	4798      	blx	r3
 8009782:	3601      	adds	r6, #1
 8009784:	e7ee      	b.n	8009764 <__libc_init_array+0xc>
 8009786:	f855 3b04 	ldr.w	r3, [r5], #4
 800978a:	4798      	blx	r3
 800978c:	3601      	adds	r6, #1
 800978e:	e7f2      	b.n	8009776 <__libc_init_array+0x1e>
 8009790:	08009b98 	.word	0x08009b98
 8009794:	08009b98 	.word	0x08009b98
 8009798:	08009b98 	.word	0x08009b98
 800979c:	08009b9c 	.word	0x08009b9c

080097a0 <memcmp>:
 80097a0:	b510      	push	{r4, lr}
 80097a2:	3901      	subs	r1, #1
 80097a4:	4402      	add	r2, r0
 80097a6:	4290      	cmp	r0, r2
 80097a8:	d101      	bne.n	80097ae <memcmp+0xe>
 80097aa:	2000      	movs	r0, #0
 80097ac:	e005      	b.n	80097ba <memcmp+0x1a>
 80097ae:	7803      	ldrb	r3, [r0, #0]
 80097b0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80097b4:	42a3      	cmp	r3, r4
 80097b6:	d001      	beq.n	80097bc <memcmp+0x1c>
 80097b8:	1b18      	subs	r0, r3, r4
 80097ba:	bd10      	pop	{r4, pc}
 80097bc:	3001      	adds	r0, #1
 80097be:	e7f2      	b.n	80097a6 <memcmp+0x6>

080097c0 <memcpy>:
 80097c0:	440a      	add	r2, r1
 80097c2:	4291      	cmp	r1, r2
 80097c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80097c8:	d100      	bne.n	80097cc <memcpy+0xc>
 80097ca:	4770      	bx	lr
 80097cc:	b510      	push	{r4, lr}
 80097ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097d6:	4291      	cmp	r1, r2
 80097d8:	d1f9      	bne.n	80097ce <memcpy+0xe>
 80097da:	bd10      	pop	{r4, pc}

080097dc <memset>:
 80097dc:	4402      	add	r2, r0
 80097de:	4603      	mov	r3, r0
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d100      	bne.n	80097e6 <memset+0xa>
 80097e4:	4770      	bx	lr
 80097e6:	f803 1b01 	strb.w	r1, [r3], #1
 80097ea:	e7f9      	b.n	80097e0 <memset+0x4>

080097ec <_init>:
 80097ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ee:	bf00      	nop
 80097f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097f2:	bc08      	pop	{r3}
 80097f4:	469e      	mov	lr, r3
 80097f6:	4770      	bx	lr

080097f8 <_fini>:
 80097f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097fa:	bf00      	nop
 80097fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097fe:	bc08      	pop	{r3}
 8009800:	469e      	mov	lr, r3
 8009802:	4770      	bx	lr
