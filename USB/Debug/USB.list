
USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db48  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  0800dcf8  0800dcf8  0001dcf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e088  0800e088  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  0800e088  0800e088  0001e088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e090  0800e090  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e090  0800e090  0001e090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e094  0800e094  0001e094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  0800e098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020104  2**0
                  CONTENTS
 10 .bss          000168e8  20000104  20000104  00020104  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200169ec  200169ec  00020104  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024743  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000513f  00000000  00000000  00044877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d70  00000000  00000000  000499b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b48  00000000  00000000  0004b728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000089a1  00000000  00000000  0004d270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000268b5  00000000  00000000  00055c11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed78a  00000000  00000000  0007c4c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00169c50  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007b94  00000000  00000000  00169ca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000104 	.word	0x20000104
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800dce0 	.word	0x0800dce0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000108 	.word	0x20000108
 80001ec:	0800dce0 	.word	0x0800dce0

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20015374 	.word	0x20015374

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b974 	b.w	8000584 <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9d08      	ldr	r5, [sp, #32]
 80002ba:	4604      	mov	r4, r0
 80002bc:	468e      	mov	lr, r1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d14d      	bne.n	800035e <__udivmoddi4+0xaa>
 80002c2:	428a      	cmp	r2, r1
 80002c4:	4694      	mov	ip, r2
 80002c6:	d969      	bls.n	800039c <__udivmoddi4+0xe8>
 80002c8:	fab2 f282 	clz	r2, r2
 80002cc:	b152      	cbz	r2, 80002e4 <__udivmoddi4+0x30>
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	f1c2 0120 	rsb	r1, r2, #32
 80002d6:	fa20 f101 	lsr.w	r1, r0, r1
 80002da:	fa0c fc02 	lsl.w	ip, ip, r2
 80002de:	ea41 0e03 	orr.w	lr, r1, r3
 80002e2:	4094      	lsls	r4, r2
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	0c21      	lsrs	r1, r4, #16
 80002ea:	fbbe f6f8 	udiv	r6, lr, r8
 80002ee:	fa1f f78c 	uxth.w	r7, ip
 80002f2:	fb08 e316 	mls	r3, r8, r6, lr
 80002f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002fa:	fb06 f107 	mul.w	r1, r6, r7
 80002fe:	4299      	cmp	r1, r3
 8000300:	d90a      	bls.n	8000318 <__udivmoddi4+0x64>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 30ff 	add.w	r0, r6, #4294967295
 800030a:	f080 811f 	bcs.w	800054c <__udivmoddi4+0x298>
 800030e:	4299      	cmp	r1, r3
 8000310:	f240 811c 	bls.w	800054c <__udivmoddi4+0x298>
 8000314:	3e02      	subs	r6, #2
 8000316:	4463      	add	r3, ip
 8000318:	1a5b      	subs	r3, r3, r1
 800031a:	b2a4      	uxth	r4, r4
 800031c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000320:	fb08 3310 	mls	r3, r8, r0, r3
 8000324:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000328:	fb00 f707 	mul.w	r7, r0, r7
 800032c:	42a7      	cmp	r7, r4
 800032e:	d90a      	bls.n	8000346 <__udivmoddi4+0x92>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	f080 810a 	bcs.w	8000550 <__udivmoddi4+0x29c>
 800033c:	42a7      	cmp	r7, r4
 800033e:	f240 8107 	bls.w	8000550 <__udivmoddi4+0x29c>
 8000342:	4464      	add	r4, ip
 8000344:	3802      	subs	r0, #2
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	1be4      	subs	r4, r4, r7
 800034c:	2600      	movs	r6, #0
 800034e:	b11d      	cbz	r5, 8000358 <__udivmoddi4+0xa4>
 8000350:	40d4      	lsrs	r4, r2
 8000352:	2300      	movs	r3, #0
 8000354:	e9c5 4300 	strd	r4, r3, [r5]
 8000358:	4631      	mov	r1, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0xc2>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80ef 	beq.w	8000546 <__udivmoddi4+0x292>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x160>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xd4>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80f9 	bhi.w	800057a <__udivmoddi4+0x2c6>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0303 	sbc.w	r3, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	469e      	mov	lr, r3
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e0      	beq.n	8000358 <__udivmoddi4+0xa4>
 8000396:	e9c5 4e00 	strd	r4, lr, [r5]
 800039a:	e7dd      	b.n	8000358 <__udivmoddi4+0xa4>
 800039c:	b902      	cbnz	r2, 80003a0 <__udivmoddi4+0xec>
 800039e:	deff      	udf	#255	; 0xff
 80003a0:	fab2 f282 	clz	r2, r2
 80003a4:	2a00      	cmp	r2, #0
 80003a6:	f040 8092 	bne.w	80004ce <__udivmoddi4+0x21a>
 80003aa:	eba1 010c 	sub.w	r1, r1, ip
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	2601      	movs	r6, #1
 80003b8:	0c20      	lsrs	r0, r4, #16
 80003ba:	fbb1 f3f7 	udiv	r3, r1, r7
 80003be:	fb07 1113 	mls	r1, r7, r3, r1
 80003c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c6:	fb0e f003 	mul.w	r0, lr, r3
 80003ca:	4288      	cmp	r0, r1
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x12c>
 80003ce:	eb1c 0101 	adds.w	r1, ip, r1
 80003d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x12a>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f200 80cb 	bhi.w	8000574 <__udivmoddi4+0x2c0>
 80003de:	4643      	mov	r3, r8
 80003e0:	1a09      	subs	r1, r1, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e8:	fb07 1110 	mls	r1, r7, r0, r1
 80003ec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003f0:	fb0e fe00 	mul.w	lr, lr, r0
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x156>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x154>
 8000402:	45a6      	cmp	lr, r4
 8000404:	f200 80bb 	bhi.w	800057e <__udivmoddi4+0x2ca>
 8000408:	4608      	mov	r0, r1
 800040a:	eba4 040e 	sub.w	r4, r4, lr
 800040e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000412:	e79c      	b.n	800034e <__udivmoddi4+0x9a>
 8000414:	f1c6 0720 	rsb	r7, r6, #32
 8000418:	40b3      	lsls	r3, r6
 800041a:	fa22 fc07 	lsr.w	ip, r2, r7
 800041e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000422:	fa20 f407 	lsr.w	r4, r0, r7
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	431c      	orrs	r4, r3
 800042c:	40f9      	lsrs	r1, r7
 800042e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000432:	fa00 f306 	lsl.w	r3, r0, r6
 8000436:	fbb1 f8f9 	udiv	r8, r1, r9
 800043a:	0c20      	lsrs	r0, r4, #16
 800043c:	fa1f fe8c 	uxth.w	lr, ip
 8000440:	fb09 1118 	mls	r1, r9, r8, r1
 8000444:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000448:	fb08 f00e 	mul.w	r0, r8, lr
 800044c:	4288      	cmp	r0, r1
 800044e:	fa02 f206 	lsl.w	r2, r2, r6
 8000452:	d90b      	bls.n	800046c <__udivmoddi4+0x1b8>
 8000454:	eb1c 0101 	adds.w	r1, ip, r1
 8000458:	f108 3aff 	add.w	sl, r8, #4294967295
 800045c:	f080 8088 	bcs.w	8000570 <__udivmoddi4+0x2bc>
 8000460:	4288      	cmp	r0, r1
 8000462:	f240 8085 	bls.w	8000570 <__udivmoddi4+0x2bc>
 8000466:	f1a8 0802 	sub.w	r8, r8, #2
 800046a:	4461      	add	r1, ip
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f9 	udiv	r0, r1, r9
 8000474:	fb09 1110 	mls	r1, r9, r0, r1
 8000478:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800047c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000480:	458e      	cmp	lr, r1
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x1e2>
 8000484:	eb1c 0101 	adds.w	r1, ip, r1
 8000488:	f100 34ff 	add.w	r4, r0, #4294967295
 800048c:	d26c      	bcs.n	8000568 <__udivmoddi4+0x2b4>
 800048e:	458e      	cmp	lr, r1
 8000490:	d96a      	bls.n	8000568 <__udivmoddi4+0x2b4>
 8000492:	3802      	subs	r0, #2
 8000494:	4461      	add	r1, ip
 8000496:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800049a:	fba0 9402 	umull	r9, r4, r0, r2
 800049e:	eba1 010e 	sub.w	r1, r1, lr
 80004a2:	42a1      	cmp	r1, r4
 80004a4:	46c8      	mov	r8, r9
 80004a6:	46a6      	mov	lr, r4
 80004a8:	d356      	bcc.n	8000558 <__udivmoddi4+0x2a4>
 80004aa:	d053      	beq.n	8000554 <__udivmoddi4+0x2a0>
 80004ac:	b15d      	cbz	r5, 80004c6 <__udivmoddi4+0x212>
 80004ae:	ebb3 0208 	subs.w	r2, r3, r8
 80004b2:	eb61 010e 	sbc.w	r1, r1, lr
 80004b6:	fa01 f707 	lsl.w	r7, r1, r7
 80004ba:	fa22 f306 	lsr.w	r3, r2, r6
 80004be:	40f1      	lsrs	r1, r6
 80004c0:	431f      	orrs	r7, r3
 80004c2:	e9c5 7100 	strd	r7, r1, [r5]
 80004c6:	2600      	movs	r6, #0
 80004c8:	4631      	mov	r1, r6
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	40d8      	lsrs	r0, r3
 80004d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d8:	fa21 f303 	lsr.w	r3, r1, r3
 80004dc:	4091      	lsls	r1, r2
 80004de:	4301      	orrs	r1, r0
 80004e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e4:	fa1f fe8c 	uxth.w	lr, ip
 80004e8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004ec:	fb07 3610 	mls	r6, r7, r0, r3
 80004f0:	0c0b      	lsrs	r3, r1, #16
 80004f2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f6:	fb00 f60e 	mul.w	r6, r0, lr
 80004fa:	429e      	cmp	r6, r3
 80004fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x260>
 8000502:	eb1c 0303 	adds.w	r3, ip, r3
 8000506:	f100 38ff 	add.w	r8, r0, #4294967295
 800050a:	d22f      	bcs.n	800056c <__udivmoddi4+0x2b8>
 800050c:	429e      	cmp	r6, r3
 800050e:	d92d      	bls.n	800056c <__udivmoddi4+0x2b8>
 8000510:	3802      	subs	r0, #2
 8000512:	4463      	add	r3, ip
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	b289      	uxth	r1, r1
 8000518:	fbb3 f6f7 	udiv	r6, r3, r7
 800051c:	fb07 3316 	mls	r3, r7, r6, r3
 8000520:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000524:	fb06 f30e 	mul.w	r3, r6, lr
 8000528:	428b      	cmp	r3, r1
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x28a>
 800052c:	eb1c 0101 	adds.w	r1, ip, r1
 8000530:	f106 38ff 	add.w	r8, r6, #4294967295
 8000534:	d216      	bcs.n	8000564 <__udivmoddi4+0x2b0>
 8000536:	428b      	cmp	r3, r1
 8000538:	d914      	bls.n	8000564 <__udivmoddi4+0x2b0>
 800053a:	3e02      	subs	r6, #2
 800053c:	4461      	add	r1, ip
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000544:	e738      	b.n	80003b8 <__udivmoddi4+0x104>
 8000546:	462e      	mov	r6, r5
 8000548:	4628      	mov	r0, r5
 800054a:	e705      	b.n	8000358 <__udivmoddi4+0xa4>
 800054c:	4606      	mov	r6, r0
 800054e:	e6e3      	b.n	8000318 <__udivmoddi4+0x64>
 8000550:	4618      	mov	r0, r3
 8000552:	e6f8      	b.n	8000346 <__udivmoddi4+0x92>
 8000554:	454b      	cmp	r3, r9
 8000556:	d2a9      	bcs.n	80004ac <__udivmoddi4+0x1f8>
 8000558:	ebb9 0802 	subs.w	r8, r9, r2
 800055c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000560:	3801      	subs	r0, #1
 8000562:	e7a3      	b.n	80004ac <__udivmoddi4+0x1f8>
 8000564:	4646      	mov	r6, r8
 8000566:	e7ea      	b.n	800053e <__udivmoddi4+0x28a>
 8000568:	4620      	mov	r0, r4
 800056a:	e794      	b.n	8000496 <__udivmoddi4+0x1e2>
 800056c:	4640      	mov	r0, r8
 800056e:	e7d1      	b.n	8000514 <__udivmoddi4+0x260>
 8000570:	46d0      	mov	r8, sl
 8000572:	e77b      	b.n	800046c <__udivmoddi4+0x1b8>
 8000574:	3b02      	subs	r3, #2
 8000576:	4461      	add	r1, ip
 8000578:	e732      	b.n	80003e0 <__udivmoddi4+0x12c>
 800057a:	4630      	mov	r0, r6
 800057c:	e709      	b.n	8000392 <__udivmoddi4+0xde>
 800057e:	4464      	add	r4, ip
 8000580:	3802      	subs	r0, #2
 8000582:	e742      	b.n	800040a <__udivmoddi4+0x156>

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	6039      	str	r1, [r7, #0]
 8000592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000598:	2b00      	cmp	r3, #0
 800059a:	db0a      	blt.n	80005b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	b2da      	uxtb	r2, r3
 80005a0:	490c      	ldr	r1, [pc, #48]	; (80005d4 <__NVIC_SetPriority+0x4c>)
 80005a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a6:	0112      	lsls	r2, r2, #4
 80005a8:	b2d2      	uxtb	r2, r2
 80005aa:	440b      	add	r3, r1
 80005ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005b0:	e00a      	b.n	80005c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	b2da      	uxtb	r2, r3
 80005b6:	4908      	ldr	r1, [pc, #32]	; (80005d8 <__NVIC_SetPriority+0x50>)
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	f003 030f 	and.w	r3, r3, #15
 80005be:	3b04      	subs	r3, #4
 80005c0:	0112      	lsls	r2, r2, #4
 80005c2:	b2d2      	uxtb	r2, r2
 80005c4:	440b      	add	r3, r1
 80005c6:	761a      	strb	r2, [r3, #24]
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	e000e100 	.word	0xe000e100
 80005d8:	e000ed00 	.word	0xe000ed00

080005dc <VirtualCommInit>:
 * Initialize the USB peripheral and HAL-based USB stack.
 * A transmit task, responsible for pulling data out of the stream buffer and
 * pushing it into the USB peripheral is also created.
**/
void VirtualCommInit( void )
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af02      	add	r7, sp, #8
	MX_USB_DEVICE_Init();
 80005e2:	f007 fc21 	bl	8007e28 <MX_USB_DEVICE_Init>
	txStream = xStreamBufferCreate( txBuffLen, 1);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2101      	movs	r1, #1
 80005ea:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80005ee:	f008 feef 	bl	80093d0 <xStreamBufferGenericCreate>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a17      	ldr	r2, [pc, #92]	; (8000654 <VirtualCommInit+0x78>)
 80005f6:	6013      	str	r3, [r2, #0]
	vcom_rxStream  = xStreamBufferCreate( rxBuffLen, 1);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2101      	movs	r1, #1
 80005fc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000600:	f008 fee6 	bl	80093d0 <xStreamBufferGenericCreate>
 8000604:	4603      	mov	r3, r0
 8000606:	4a14      	ldr	r2, [pc, #80]	; (8000658 <VirtualCommInit+0x7c>)
 8000608:	6013      	str	r3, [r2, #0]
	assert_param( txStream != NULL);
 800060a:	4b12      	ldr	r3, [pc, #72]	; (8000654 <VirtualCommInit+0x78>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d103      	bne.n	800061a <VirtualCommInit+0x3e>
 8000612:	214e      	movs	r1, #78	; 0x4e
 8000614:	4811      	ldr	r0, [pc, #68]	; (800065c <VirtualCommInit+0x80>)
 8000616:	f000 f9fe 	bl	8000a16 <assert_failed>
	assert_param( vcom_rxStream != NULL);
 800061a:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <VirtualCommInit+0x7c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d103      	bne.n	800062a <VirtualCommInit+0x4e>
 8000622:	214f      	movs	r1, #79	; 0x4f
 8000624:	480d      	ldr	r0, [pc, #52]	; (800065c <VirtualCommInit+0x80>)
 8000626:	f000 f9f6 	bl	8000a16 <assert_failed>
	assert_param(xTaskCreate(usbTask, "usbTask", 256, NULL, configMAX_PRIORITIES, &usbTaskHandle) == pdPASS);
 800062a:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <VirtualCommInit+0x84>)
 800062c:	9301      	str	r3, [sp, #4]
 800062e:	2305      	movs	r3, #5
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2300      	movs	r3, #0
 8000634:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000638:	490a      	ldr	r1, [pc, #40]	; (8000664 <VirtualCommInit+0x88>)
 800063a:	480b      	ldr	r0, [pc, #44]	; (8000668 <VirtualCommInit+0x8c>)
 800063c:	f009 fa97 	bl	8009b6e <xTaskCreate>
 8000640:	4603      	mov	r3, r0
 8000642:	2b01      	cmp	r3, #1
 8000644:	d003      	beq.n	800064e <VirtualCommInit+0x72>
 8000646:	2150      	movs	r1, #80	; 0x50
 8000648:	4804      	ldr	r0, [pc, #16]	; (800065c <VirtualCommInit+0x80>)
 800064a:	f000 f9e4 	bl	8000a16 <assert_failed>
}
 800064e:	bf00      	nop
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000920 	.word	0x20000920
 8000658:	20000928 	.word	0x20000928
 800065c:	0800dcf8 	.word	0x0800dcf8
 8000660:	20000924 	.word	0x20000924
 8000664:	0800dd18 	.word	0x0800dd18
 8000668:	08000699 	.word	0x08000699

0800066c <TransmitUsbDataLossy>:
 * @param Buff	pointer to the buffer to be transmitted
 * @param Len	number of bytes to transmit
 * @returns number of bytes placed into the buffer
 */
int32_t TransmitUsbDataLossy(uint8_t const* Buff, uint16_t Len)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	460b      	mov	r3, r1
 8000676:	807b      	strh	r3, [r7, #2]
	int32_t numBytesCopied = xStreamBufferSend(	txStream, Buff, Len, 0);
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <TransmitUsbDataLossy+0x28>)
 800067a:	6818      	ldr	r0, [r3, #0]
 800067c:	887a      	ldrh	r2, [r7, #2]
 800067e:	2300      	movs	r3, #0
 8000680:	6879      	ldr	r1, [r7, #4]
 8000682:	f008 ff47 	bl	8009514 <xStreamBufferSend>
 8000686:	4603      	mov	r3, r0
 8000688:	60fb      	str	r3, [r7, #12]

	return numBytesCopied;
 800068a:	68fb      	ldr	r3, [r7, #12]
}
 800068c:	4618      	mov	r0, r3
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000920 	.word	0x20000920

08000698 <usbTask>:
 * It then then copies up to 2KB of data from the stream buffer to a
 * local buffer, which is passed to the HAL USB stack.
 *
 */
void usbTask( void* NotUsed)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af02      	add	r7, sp, #8
 800069e:	6078      	str	r0, [r7, #4]
	USBD_CDC_HandleTypeDef *hcdc = NULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60fb      	str	r3, [r7, #12]

	while(hcdc == NULL)
 80006a4:	e006      	b.n	80006b4 <usbTask+0x1c>
	{
		hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80006a6:	4b27      	ldr	r3, [pc, #156]	; (8000744 <usbTask+0xac>)
 80006a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80006ac:	60fb      	str	r3, [r7, #12]
		vTaskDelay(10);
 80006ae:	200a      	movs	r0, #10
 80006b0:	f009 fbb2 	bl	8009e18 <vTaskDelay>
	while(hcdc == NULL)
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d0f5      	beq.n	80006a6 <usbTask+0xe>
	}
	if (hcdc->TxState == 0)
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d108      	bne.n	80006d6 <usbTask+0x3e>
	{
		//if there is no TX in progress, immediately send a task notification
		//to kick things off
		xTaskNotify( usbTaskHandle, 1, eSetValueWithOverwrite);
 80006c4:	4b20      	ldr	r3, [pc, #128]	; (8000748 <usbTask+0xb0>)
 80006c6:	6818      	ldr	r0, [r3, #0]
 80006c8:	2300      	movs	r3, #0
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	2303      	movs	r3, #3
 80006ce:	2201      	movs	r2, #1
 80006d0:	2100      	movs	r1, #0
 80006d2:	f00a f9b7 	bl	800aa44 <xTaskGenericNotify>
	}
	ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 80006d6:	f04f 32ff 	mov.w	r2, #4294967295
 80006da:	2101      	movs	r1, #1
 80006dc:	2000      	movs	r0, #0
 80006de:	f00a f8bb 	bl	800a858 <ulTaskGenericNotifyTake>

	//setup our own callback to be called when transmission is complete
	hcdc->TxCallBack = usbTxComplete;
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	4a19      	ldr	r2, [pc, #100]	; (800074c <usbTask+0xb4>)
 80006e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	//ensure the USB interrupt priority is low enough to allow for
	//FreeRTOS API calls within the ISR
	NVIC_SetPriority(OTG_FS_IRQn, 6);
 80006ea:	2106      	movs	r1, #6
 80006ec:	2043      	movs	r0, #67	; 0x43
 80006ee:	f7ff ff4b 	bl	8000588 <__NVIC_SetPriority>

	while(1)
	{
		SEGGER_SYSVIEW_PrintfHost("waiting for txStream");
 80006f2:	4817      	ldr	r0, [pc, #92]	; (8000750 <usbTask+0xb8>)
 80006f4:	f00d f900 	bl	800d8f8 <SEGGER_SYSVIEW_PrintfHost>
		//wait forever for data to become available in the stream buffer
		//txStream.  up to txBuffLen bytes of data will be copied into
		//usbTxBuff when at least 1 byte is available
		uint8_t numBytes = xStreamBufferReceive(	txStream,
 80006f8:	4b16      	ldr	r3, [pc, #88]	; (8000754 <usbTask+0xbc>)
 80006fa:	6818      	ldr	r0, [r3, #0]
 80006fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000700:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000704:	4914      	ldr	r1, [pc, #80]	; (8000758 <usbTask+0xc0>)
 8000706:	f009 f81a 	bl	800973e <xStreamBufferReceive>
 800070a:	4603      	mov	r3, r0
 800070c:	72fb      	strb	r3, [r7, #11]
													usbTxBuff,
													txBuffLen,
													portMAX_DELAY);
		if(numBytes > 0)
 800070e:	7afb      	ldrb	r3, [r7, #11]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d0ee      	beq.n	80006f2 <usbTask+0x5a>
		{
			SEGGER_SYSVIEW_PrintfHost("pulled %d bytes from txStream", numBytes);
 8000714:	7afb      	ldrb	r3, [r7, #11]
 8000716:	4619      	mov	r1, r3
 8000718:	4810      	ldr	r0, [pc, #64]	; (800075c <usbTask+0xc4>)
 800071a:	f00d f8ed 	bl	800d8f8 <SEGGER_SYSVIEW_PrintfHost>
			USBD_CDC_SetTxBuffer(&hUsbDeviceFS, usbTxBuff, numBytes);
 800071e:	7afb      	ldrb	r3, [r7, #11]
 8000720:	461a      	mov	r2, r3
 8000722:	490d      	ldr	r1, [pc, #52]	; (8000758 <usbTask+0xc0>)
 8000724:	4807      	ldr	r0, [pc, #28]	; (8000744 <usbTask+0xac>)
 8000726:	f005 ffd1 	bl	80066cc <USBD_CDC_SetTxBuffer>
			USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800072a:	4806      	ldr	r0, [pc, #24]	; (8000744 <usbTask+0xac>)
 800072c:	f006 f80e 	bl	800674c <USBD_CDC_TransmitPacket>
			//wait forever for a notification, clearing it to 0 when received
			ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 8000730:	f04f 32ff 	mov.w	r2, #4294967295
 8000734:	2101      	movs	r1, #1
 8000736:	2000      	movs	r0, #0
 8000738:	f00a f88e 	bl	800a858 <ulTaskGenericNotifyTake>
			SEGGER_SYSVIEW_PrintfHost("tx complete");
 800073c:	4808      	ldr	r0, [pc, #32]	; (8000760 <usbTask+0xc8>)
 800073e:	f00d f8db 	bl	800d8f8 <SEGGER_SYSVIEW_PrintfHost>
	{
 8000742:	e7d6      	b.n	80006f2 <usbTask+0x5a>
 8000744:	200009c0 	.word	0x200009c0
 8000748:	20000924 	.word	0x20000924
 800074c:	08000765 	.word	0x08000765
 8000750:	0800dd20 	.word	0x0800dd20
 8000754:	20000920 	.word	0x20000920
 8000758:	20000120 	.word	0x20000120
 800075c:	0800dd38 	.word	0x0800dd38
 8000760:	0800dd58 	.word	0x0800dd58

08000764 <usbTxComplete>:
		}
	}
}

void usbTxComplete( void )
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af02      	add	r7, sp, #8
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
	xTaskNotifyFromISR( usbTaskHandle, 1, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <usbTxComplete+0x48>)
 8000770:	6818      	ldr	r0, [r3, #0]
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	9301      	str	r3, [sp, #4]
 8000776:	2300      	movs	r3, #0
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	2303      	movs	r3, #3
 800077c:	2201      	movs	r2, #1
 800077e:	2100      	movs	r1, #0
 8000780:	f00a fa42 	bl	800ac08 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d00a      	beq.n	80007a0 <usbTxComplete+0x3c>
 800078a:	f00c fe6b 	bl	800d464 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <usbTxComplete+0x4c>)
 8000790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	f3bf 8f4f 	dsb	sy
 800079a:	f3bf 8f6f 	isb	sy
}
 800079e:	e001      	b.n	80007a4 <usbTxComplete+0x40>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80007a0:	f00c fe44 	bl	800d42c <SEGGER_SYSVIEW_RecordExitISR>
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000924 	.word	0x20000924
 80007b0:	e000ed04 	.word	0xe000ed04

080007b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ba:	f000 fa89 	bl	8000cd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007be:	f000 f827 	bl	8000810 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  VirtualCommInit();
 80007c2:	f7ff ff0b 	bl	80005dc <VirtualCommInit>
  SEGGER_SYSVIEW_Conf();
 80007c6:	f00d f915 	bl	800d9f4 <SEGGER_SYSVIEW_Conf>
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);	//ensure proper priority grouping for freeRTOS
 80007ca:	2003      	movs	r0, #3
 80007cc:	f000 fb94 	bl	8000ef8 <HAL_NVIC_SetPriorityGrouping>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d0:	f000 f8b2 	bl	8000938 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007d4:	f000 f886 	bl	80008e4 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80007d8:	f007 fb26 	bl	8007e28 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  //setup tasks, making sure they have been properly created before moving on
  assert_param(xTaskCreate(usbPrintOutTask, "usbprint", STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL) == pdPASS);
 80007dc:	2300      	movs	r3, #0
 80007de:	9301      	str	r3, [sp, #4]
 80007e0:	2302      	movs	r3, #2
 80007e2:	9300      	str	r3, [sp, #0]
 80007e4:	2300      	movs	r3, #0
 80007e6:	2280      	movs	r2, #128	; 0x80
 80007e8:	4906      	ldr	r1, [pc, #24]	; (8000804 <main+0x50>)
 80007ea:	4807      	ldr	r0, [pc, #28]	; (8000808 <main+0x54>)
 80007ec:	f009 f9bf 	bl	8009b6e <xTaskCreate>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d003      	beq.n	80007fe <main+0x4a>
 80007f6:	2172      	movs	r1, #114	; 0x72
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <main+0x58>)
 80007fa:	f000 f90c 	bl	8000a16 <assert_failed>

  //start the scheduler - shouldn't return unless there's a problem
  vTaskStartScheduler();
 80007fe:	f009 fb43 	bl	8009e88 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000802:	e7fe      	b.n	8000802 <main+0x4e>
 8000804:	0800dd64 	.word	0x0800dd64
 8000808:	08000989 	.word	0x08000989
 800080c:	0800dd70 	.word	0x0800dd70

08000810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b094      	sub	sp, #80	; 0x50
 8000814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000816:	f107 0320 	add.w	r3, r7, #32
 800081a:	2230      	movs	r2, #48	; 0x30
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f00d fa56 	bl	800dcd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000834:	2300      	movs	r3, #0
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	4b28      	ldr	r3, [pc, #160]	; (80008dc <SystemClock_Config+0xcc>)
 800083a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083c:	4a27      	ldr	r2, [pc, #156]	; (80008dc <SystemClock_Config+0xcc>)
 800083e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000842:	6413      	str	r3, [r2, #64]	; 0x40
 8000844:	4b25      	ldr	r3, [pc, #148]	; (80008dc <SystemClock_Config+0xcc>)
 8000846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000850:	2300      	movs	r3, #0
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	4b22      	ldr	r3, [pc, #136]	; (80008e0 <SystemClock_Config+0xd0>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800085c:	4a20      	ldr	r2, [pc, #128]	; (80008e0 <SystemClock_Config+0xd0>)
 800085e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000862:	6013      	str	r3, [r2, #0]
 8000864:	4b1e      	ldr	r3, [pc, #120]	; (80008e0 <SystemClock_Config+0xd0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000870:	2301      	movs	r3, #1
 8000872:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000874:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087a:	2302      	movs	r3, #2
 800087c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800087e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000882:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000884:	2304      	movs	r3, #4
 8000886:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000888:	2348      	movs	r3, #72	; 0x48
 800088a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800088c:	2302      	movs	r3, #2
 800088e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000890:	2303      	movs	r3, #3
 8000892:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000894:	f107 0320 	add.w	r3, r7, #32
 8000898:	4618      	mov	r0, r3
 800089a:	f002 f943 	bl	8002b24 <HAL_RCC_OscConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008a4:	f000 f8b2 	bl	8000a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a8:	230f      	movs	r3, #15
 80008aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ac:	2302      	movs	r3, #2
 80008ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008be:	f107 030c 	add.w	r3, r7, #12
 80008c2:	2102      	movs	r1, #2
 80008c4:	4618      	mov	r0, r3
 80008c6:	f002 fc55 	bl	8003174 <HAL_RCC_ClockConfig>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008d0:	f000 f89c 	bl	8000a0c <Error_Handler>
  }
}
 80008d4:	bf00      	nop
 80008d6:	3750      	adds	r7, #80	; 0x50
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40007000 	.word	0x40007000

080008e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 80008ea:	4a12      	ldr	r2, [pc, #72]	; (8000934 <MX_USART2_UART_Init+0x50>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 80008f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000902:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_USART2_UART_Init+0x4c>)
 800091c:	f003 fae0 	bl	8003ee0 <HAL_UART_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000926:	f000 f871 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	2000092c 	.word	0x2000092c
 8000934:	40004400 	.word	0x40004400

08000938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <MX_GPIO_Init+0x4c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a0f      	ldr	r2, [pc, #60]	; (8000984 <MX_GPIO_Init+0x4c>)
 8000948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <MX_GPIO_Init+0x4c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_GPIO_Init+0x4c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a08      	ldr	r2, [pc, #32]	; (8000984 <MX_GPIO_Init+0x4c>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_GPIO_Init+0x4c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800

08000988 <usbPrintOutTask>:
/* USER CODE BEGIN 4 */



void usbPrintOutTask( void* NotUsed)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b088      	sub	sp, #32
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	const uint8_t testString[] = "test\n";
 8000990:	4a11      	ldr	r2, [pc, #68]	; (80009d8 <usbPrintOutTask+0x50>)
 8000992:	f107 0318 	add.w	r3, r7, #24
 8000996:	e892 0003 	ldmia.w	r2, {r0, r1}
 800099a:	6018      	str	r0, [r3, #0]
 800099c:	3304      	adds	r3, #4
 800099e:	8019      	strh	r1, [r3, #0]
	const uint8_t messageString[] = "message\n";
 80009a0:	4a0e      	ldr	r2, [pc, #56]	; (80009dc <usbPrintOutTask+0x54>)
 80009a2:	f107 030c 	add.w	r3, r7, #12
 80009a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80009a8:	c303      	stmia	r3!, {r0, r1}
 80009aa:	701a      	strb	r2, [r3, #0]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfHost("add \"test\" to txStream");
 80009ac:	480c      	ldr	r0, [pc, #48]	; (80009e0 <usbPrintOutTask+0x58>)
 80009ae:	f00c ffa3 	bl	800d8f8 <SEGGER_SYSVIEW_PrintfHost>
		TransmitUsbDataLossy(testString, sizeof(testString));
 80009b2:	f107 0318 	add.w	r3, r7, #24
 80009b6:	2106      	movs	r1, #6
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff fe57 	bl	800066c <TransmitUsbDataLossy>
		SEGGER_SYSVIEW_PrintfHost("add \"message\" to txStream");
 80009be:	4809      	ldr	r0, [pc, #36]	; (80009e4 <usbPrintOutTask+0x5c>)
 80009c0:	f00c ff9a 	bl	800d8f8 <SEGGER_SYSVIEW_PrintfHost>
		TransmitUsbDataLossy(messageString, sizeof(messageString));
 80009c4:	f107 030c 	add.w	r3, r7, #12
 80009c8:	2109      	movs	r1, #9
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fe4e 	bl	800066c <TransmitUsbDataLossy>
		vTaskDelay(2);
 80009d0:	2002      	movs	r0, #2
 80009d2:	f009 fa21 	bl	8009e18 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfHost("add \"test\" to txStream");
 80009d6:	e7e9      	b.n	80009ac <usbPrintOutTask+0x24>
 80009d8:	0800ddb8 	.word	0x0800ddb8
 80009dc:	0800ddc0 	.word	0x0800ddc0
 80009e0:	0800dd84 	.word	0x0800dd84
 80009e4:	0800dd9c 	.word	0x0800dd9c

080009e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a04      	ldr	r2, [pc, #16]	; (8000a08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d101      	bne.n	80009fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009fa:	f000 f98b 	bl	8000d14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40001000 	.word	0x40001000

08000a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <Error_Handler+0x8>

08000a16 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000a16:	b480      	push	{r7}
 8000a18:	b083      	sub	sp, #12
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
 8000a1e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	4a0f      	ldr	r2, [pc, #60]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a40:	6453      	str	r3, [r2, #68]	; 0x44
 8000a42:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	4a08      	ldr	r2, [pc, #32]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a6a:	2007      	movs	r0, #7
 8000a6c:	f000 fa44 	bl	8000ef8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40023800 	.word	0x40023800

08000a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	; 0x28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a19      	ldr	r2, [pc, #100]	; (8000b00 <HAL_UART_MspInit+0x84>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d12b      	bne.n	8000af6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <HAL_UART_MspInit+0x88>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	4a17      	ldr	r2, [pc, #92]	; (8000b04 <HAL_UART_MspInit+0x88>)
 8000aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aac:	6413      	str	r3, [r2, #64]	; 0x40
 8000aae:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <HAL_UART_MspInit+0x88>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <HAL_UART_MspInit+0x88>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a10      	ldr	r2, [pc, #64]	; (8000b04 <HAL_UART_MspInit+0x88>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <HAL_UART_MspInit+0x88>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ad6:	230c      	movs	r3, #12
 8000ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ae6:	2307      	movs	r3, #7
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	4805      	ldr	r0, [pc, #20]	; (8000b08 <HAL_UART_MspInit+0x8c>)
 8000af2:	f000 fa65 	bl	8000fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000af6:	bf00      	nop
 8000af8:	3728      	adds	r7, #40	; 0x28
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40004400 	.word	0x40004400
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020000 	.word	0x40020000

08000b0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08e      	sub	sp, #56	; 0x38
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	4b33      	ldr	r3, [pc, #204]	; (8000bf0 <HAL_InitTick+0xe4>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	4a32      	ldr	r2, [pc, #200]	; (8000bf0 <HAL_InitTick+0xe4>)
 8000b26:	f043 0310 	orr.w	r3, r3, #16
 8000b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2c:	4b30      	ldr	r3, [pc, #192]	; (8000bf0 <HAL_InitTick+0xe4>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	f003 0310 	and.w	r3, r3, #16
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b38:	f107 0210 	add.w	r2, r7, #16
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4611      	mov	r1, r2
 8000b42:	4618      	mov	r0, r3
 8000b44:	f002 fdf6 	bl	8003734 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b48:	6a3b      	ldr	r3, [r7, #32]
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d103      	bne.n	8000b5a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b52:	f002 fdc7 	bl	80036e4 <HAL_RCC_GetPCLK1Freq>
 8000b56:	6378      	str	r0, [r7, #52]	; 0x34
 8000b58:	e004      	b.n	8000b64 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b5a:	f002 fdc3 	bl	80036e4 <HAL_RCC_GetPCLK1Freq>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b66:	4a23      	ldr	r2, [pc, #140]	; (8000bf4 <HAL_InitTick+0xe8>)
 8000b68:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6c:	0c9b      	lsrs	r3, r3, #18
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b72:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <HAL_InitTick+0xec>)
 8000b74:	4a21      	ldr	r2, [pc, #132]	; (8000bfc <HAL_InitTick+0xf0>)
 8000b76:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b78:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <HAL_InitTick+0xec>)
 8000b7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b7e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b80:	4a1d      	ldr	r2, [pc, #116]	; (8000bf8 <HAL_InitTick+0xec>)
 8000b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b84:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b86:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <HAL_InitTick+0xec>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <HAL_InitTick+0xec>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b92:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <HAL_InitTick+0xec>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b98:	4817      	ldr	r0, [pc, #92]	; (8000bf8 <HAL_InitTick+0xec>)
 8000b9a:	f002 fdfd 	bl	8003798 <HAL_TIM_Base_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ba4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d11b      	bne.n	8000be4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bac:	4812      	ldr	r0, [pc, #72]	; (8000bf8 <HAL_InitTick+0xec>)
 8000bae:	f002 feed 	bl	800398c <HAL_TIM_Base_Start_IT>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000bb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d111      	bne.n	8000be4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bc0:	2036      	movs	r0, #54	; 0x36
 8000bc2:	f000 f9e5 	bl	8000f90 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b0f      	cmp	r3, #15
 8000bca:	d808      	bhi.n	8000bde <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	2036      	movs	r0, #54	; 0x36
 8000bd2:	f000 f9b1 	bl	8000f38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <HAL_InitTick+0xf4>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6013      	str	r3, [r2, #0]
 8000bdc:	e002      	b.n	8000be4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000be4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3738      	adds	r7, #56	; 0x38
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	431bde83 	.word	0x431bde83
 8000bf8:	20000970 	.word	0x20000970
 8000bfc:	40001000 	.word	0x40001000
 8000c00:	20000004 	.word	0x20000004

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <NMI_Handler+0x4>

08000c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <MemManage_Handler+0x4>

08000c16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <BusFault_Handler+0x4>

08000c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <UsageFault_Handler+0x4>

08000c22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <TIM6_DAC_IRQHandler+0x10>)
 8000c36:	f002 ff6f 	bl	8003b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000970 	.word	0x20000970

08000c44 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c48:	4802      	ldr	r0, [pc, #8]	; (8000c54 <OTG_FS_IRQHandler+0x10>)
 8000c4a:	f000 fe3e 	bl	80018ca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20001e9c 	.word	0x20001e9c

08000c58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <SystemInit+0x20>)
 8000c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c62:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <SystemInit+0x20>)
 8000c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c80:	480d      	ldr	r0, [pc, #52]	; (8000cb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c82:	490e      	ldr	r1, [pc, #56]	; (8000cbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c84:	4a0e      	ldr	r2, [pc, #56]	; (8000cc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c88:	e002      	b.n	8000c90 <LoopCopyDataInit>

08000c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8e:	3304      	adds	r3, #4

08000c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c94:	d3f9      	bcc.n	8000c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c96:	4a0b      	ldr	r2, [pc, #44]	; (8000cc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c98:	4c0b      	ldr	r4, [pc, #44]	; (8000cc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c9c:	e001      	b.n	8000ca2 <LoopFillZerobss>

08000c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca0:	3204      	adds	r2, #4

08000ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca4:	d3fb      	bcc.n	8000c9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ca6:	f7ff ffd7 	bl	8000c58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000caa:	f00c ffcf 	bl	800dc4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cae:	f7ff fd81 	bl	80007b4 <main>
  bx  lr    
 8000cb2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000cb4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cbc:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8000cc0:	0800e098 	.word	0x0800e098
  ldr r2, =_sbss
 8000cc4:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8000cc8:	200169ec 	.word	0x200169ec

08000ccc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ccc:	e7fe      	b.n	8000ccc <ADC_IRQHandler>
	...

08000cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0d      	ldr	r2, [pc, #52]	; (8000d10 <HAL_Init+0x40>)
 8000cda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <HAL_Init+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <HAL_Init+0x40>)
 8000ce6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <HAL_Init+0x40>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a07      	ldr	r2, [pc, #28]	; (8000d10 <HAL_Init+0x40>)
 8000cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf8:	2003      	movs	r0, #3
 8000cfa:	f000 f8fd 	bl	8000ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f7ff ff04 	bl	8000b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d04:	f7ff fe92 	bl	8000a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40023c00 	.word	0x40023c00

08000d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_IncTick+0x20>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_IncTick+0x24>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4413      	add	r3, r2
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <HAL_IncTick+0x24>)
 8000d26:	6013      	str	r3, [r2, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000008 	.word	0x20000008
 8000d38:	200009b8 	.word	0x200009b8

08000d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d40:	4b03      	ldr	r3, [pc, #12]	; (8000d50 <HAL_GetTick+0x14>)
 8000d42:	681b      	ldr	r3, [r3, #0]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	200009b8 	.word	0x200009b8

08000d54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d5c:	f7ff ffee 	bl	8000d3c <HAL_GetTick>
 8000d60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d6c:	d005      	beq.n	8000d7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <HAL_Delay+0x44>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	461a      	mov	r2, r3
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	4413      	add	r3, r2
 8000d78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d7a:	bf00      	nop
 8000d7c:	f7ff ffde 	bl	8000d3c <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d8f7      	bhi.n	8000d7c <HAL_Delay+0x28>
  {
  }
}
 8000d8c:	bf00      	nop
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000008 	.word	0x20000008

08000d9c <__NVIC_SetPriorityGrouping>:
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db8:	4013      	ands	r3, r2
 8000dba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dce:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	60d3      	str	r3, [r2, #12]
}
 8000dd4:	bf00      	nop
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_GetPriorityGrouping>:
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de8:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <__NVIC_GetPriorityGrouping+0x18>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	0a1b      	lsrs	r3, r3, #8
 8000dee:	f003 0307 	and.w	r3, r3, #7
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_EnableIRQ>:
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	db0b      	blt.n	8000e2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	f003 021f 	and.w	r2, r3, #31
 8000e18:	4907      	ldr	r1, [pc, #28]	; (8000e38 <__NVIC_EnableIRQ+0x38>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	095b      	lsrs	r3, r3, #5
 8000e20:	2001      	movs	r0, #1
 8000e22:	fa00 f202 	lsl.w	r2, r0, r2
 8000e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000e100 	.word	0xe000e100

08000e3c <__NVIC_SetPriority>:
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	6039      	str	r1, [r7, #0]
 8000e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	db0a      	blt.n	8000e66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	490c      	ldr	r1, [pc, #48]	; (8000e88 <__NVIC_SetPriority+0x4c>)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	0112      	lsls	r2, r2, #4
 8000e5c:	b2d2      	uxtb	r2, r2
 8000e5e:	440b      	add	r3, r1
 8000e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e64:	e00a      	b.n	8000e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4908      	ldr	r1, [pc, #32]	; (8000e8c <__NVIC_SetPriority+0x50>)
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	f003 030f 	and.w	r3, r3, #15
 8000e72:	3b04      	subs	r3, #4
 8000e74:	0112      	lsls	r2, r2, #4
 8000e76:	b2d2      	uxtb	r2, r2
 8000e78:	440b      	add	r3, r1
 8000e7a:	761a      	strb	r2, [r3, #24]
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000e100 	.word	0xe000e100
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b089      	sub	sp, #36	; 0x24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f1c3 0307 	rsb	r3, r3, #7
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	bf28      	it	cs
 8000eae:	2304      	movcs	r3, #4
 8000eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	2b06      	cmp	r3, #6
 8000eb8:	d902      	bls.n	8000ec0 <NVIC_EncodePriority+0x30>
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3b03      	subs	r3, #3
 8000ebe:	e000      	b.n	8000ec2 <NVIC_EncodePriority+0x32>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43da      	mvns	r2, r3
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee2:	43d9      	mvns	r1, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	4313      	orrs	r3, r2
         );
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3724      	adds	r7, #36	; 0x24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
	...

08000ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b07      	cmp	r3, #7
 8000f04:	d00f      	beq.n	8000f26 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b06      	cmp	r3, #6
 8000f0a:	d00c      	beq.n	8000f26 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b05      	cmp	r3, #5
 8000f10:	d009      	beq.n	8000f26 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b04      	cmp	r3, #4
 8000f16:	d006      	beq.n	8000f26 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b03      	cmp	r3, #3
 8000f1c:	d003      	beq.n	8000f26 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000f1e:	2190      	movs	r1, #144	; 0x90
 8000f20:	4804      	ldr	r0, [pc, #16]	; (8000f34 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000f22:	f7ff fd78 	bl	8000a16 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff ff38 	bl	8000d9c <__NVIC_SetPriorityGrouping>
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	0800ddcc 	.word	0x0800ddcc

08000f38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
 8000f44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b0f      	cmp	r3, #15
 8000f4e:	d903      	bls.n	8000f58 <HAL_NVIC_SetPriority+0x20>
 8000f50:	21a8      	movs	r1, #168	; 0xa8
 8000f52:	480e      	ldr	r0, [pc, #56]	; (8000f8c <HAL_NVIC_SetPriority+0x54>)
 8000f54:	f7ff fd5f 	bl	8000a16 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	2b0f      	cmp	r3, #15
 8000f5c:	d903      	bls.n	8000f66 <HAL_NVIC_SetPriority+0x2e>
 8000f5e:	21a9      	movs	r1, #169	; 0xa9
 8000f60:	480a      	ldr	r0, [pc, #40]	; (8000f8c <HAL_NVIC_SetPriority+0x54>)
 8000f62:	f7ff fd58 	bl	8000a16 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f66:	f7ff ff3d 	bl	8000de4 <__NVIC_GetPriorityGrouping>
 8000f6a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	68b9      	ldr	r1, [r7, #8]
 8000f70:	6978      	ldr	r0, [r7, #20]
 8000f72:	f7ff ff8d 	bl	8000e90 <NVIC_EncodePriority>
 8000f76:	4602      	mov	r2, r0
 8000f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff ff5c 	bl	8000e3c <__NVIC_SetPriority>
}
 8000f84:	bf00      	nop
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	0800ddcc 	.word	0x0800ddcc

08000f90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	da03      	bge.n	8000faa <HAL_NVIC_EnableIRQ+0x1a>
 8000fa2:	21bc      	movs	r1, #188	; 0xbc
 8000fa4:	4805      	ldr	r0, [pc, #20]	; (8000fbc <HAL_NVIC_EnableIRQ+0x2c>)
 8000fa6:	f7ff fd36 	bl	8000a16 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ff26 	bl	8000e00 <__NVIC_EnableIRQ>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	0800ddcc 	.word	0x0800ddcc

08000fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a3d      	ldr	r2, [pc, #244]	; (80010d0 <HAL_GPIO_Init+0x110>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d02b      	beq.n	8001036 <HAL_GPIO_Init+0x76>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a3c      	ldr	r2, [pc, #240]	; (80010d4 <HAL_GPIO_Init+0x114>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d027      	beq.n	8001036 <HAL_GPIO_Init+0x76>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a3b      	ldr	r2, [pc, #236]	; (80010d8 <HAL_GPIO_Init+0x118>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d023      	beq.n	8001036 <HAL_GPIO_Init+0x76>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a3a      	ldr	r2, [pc, #232]	; (80010dc <HAL_GPIO_Init+0x11c>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d01f      	beq.n	8001036 <HAL_GPIO_Init+0x76>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a39      	ldr	r2, [pc, #228]	; (80010e0 <HAL_GPIO_Init+0x120>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d01b      	beq.n	8001036 <HAL_GPIO_Init+0x76>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a38      	ldr	r2, [pc, #224]	; (80010e4 <HAL_GPIO_Init+0x124>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d017      	beq.n	8001036 <HAL_GPIO_Init+0x76>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a37      	ldr	r2, [pc, #220]	; (80010e8 <HAL_GPIO_Init+0x128>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d013      	beq.n	8001036 <HAL_GPIO_Init+0x76>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a36      	ldr	r2, [pc, #216]	; (80010ec <HAL_GPIO_Init+0x12c>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d00f      	beq.n	8001036 <HAL_GPIO_Init+0x76>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a35      	ldr	r2, [pc, #212]	; (80010f0 <HAL_GPIO_Init+0x130>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d00b      	beq.n	8001036 <HAL_GPIO_Init+0x76>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a34      	ldr	r2, [pc, #208]	; (80010f4 <HAL_GPIO_Init+0x134>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d007      	beq.n	8001036 <HAL_GPIO_Init+0x76>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a33      	ldr	r2, [pc, #204]	; (80010f8 <HAL_GPIO_Init+0x138>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_Init+0x76>
 800102e:	21ac      	movs	r1, #172	; 0xac
 8001030:	4832      	ldr	r0, [pc, #200]	; (80010fc <HAL_GPIO_Init+0x13c>)
 8001032:	f7ff fcf0 	bl	8000a16 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	b29b      	uxth	r3, r3
 800103c:	2b00      	cmp	r3, #0
 800103e:	d005      	beq.n	800104c <HAL_GPIO_Init+0x8c>
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	0c1b      	lsrs	r3, r3, #16
 8001046:	041b      	lsls	r3, r3, #16
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x94>
 800104c:	21ad      	movs	r1, #173	; 0xad
 800104e:	482b      	ldr	r0, [pc, #172]	; (80010fc <HAL_GPIO_Init+0x13c>)
 8001050:	f7ff fce1 	bl	8000a16 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d035      	beq.n	80010c8 <HAL_GPIO_Init+0x108>
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d031      	beq.n	80010c8 <HAL_GPIO_Init+0x108>
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	2b11      	cmp	r3, #17
 800106a:	d02d      	beq.n	80010c8 <HAL_GPIO_Init+0x108>
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2b02      	cmp	r3, #2
 8001072:	d029      	beq.n	80010c8 <HAL_GPIO_Init+0x108>
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	2b12      	cmp	r3, #18
 800107a:	d025      	beq.n	80010c8 <HAL_GPIO_Init+0x108>
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001084:	d020      	beq.n	80010c8 <HAL_GPIO_Init+0x108>
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800108e:	d01b      	beq.n	80010c8 <HAL_GPIO_Init+0x108>
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8001098:	d016      	beq.n	80010c8 <HAL_GPIO_Init+0x108>
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80010a2:	d011      	beq.n	80010c8 <HAL_GPIO_Init+0x108>
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80010ac:	d00c      	beq.n	80010c8 <HAL_GPIO_Init+0x108>
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80010b6:	d007      	beq.n	80010c8 <HAL_GPIO_Init+0x108>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b03      	cmp	r3, #3
 80010be:	d003      	beq.n	80010c8 <HAL_GPIO_Init+0x108>
 80010c0:	21ae      	movs	r1, #174	; 0xae
 80010c2:	480e      	ldr	r0, [pc, #56]	; (80010fc <HAL_GPIO_Init+0x13c>)
 80010c4:	f7ff fca7 	bl	8000a16 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010c8:	2300      	movs	r3, #0
 80010ca:	61fb      	str	r3, [r7, #28]
 80010cc:	e274      	b.n	80015b8 <HAL_GPIO_Init+0x5f8>
 80010ce:	bf00      	nop
 80010d0:	40020000 	.word	0x40020000
 80010d4:	40020400 	.word	0x40020400
 80010d8:	40020800 	.word	0x40020800
 80010dc:	40020c00 	.word	0x40020c00
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40021400 	.word	0x40021400
 80010e8:	40021800 	.word	0x40021800
 80010ec:	40021c00 	.word	0x40021c00
 80010f0:	40022000 	.word	0x40022000
 80010f4:	40022400 	.word	0x40022400
 80010f8:	40022800 	.word	0x40022800
 80010fc:	0800de08 	.word	0x0800de08
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001100:	2201      	movs	r2, #1
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	429a      	cmp	r2, r3
 800111a:	f040 824a 	bne.w	80015b2 <HAL_GPIO_Init+0x5f2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 0303 	and.w	r3, r3, #3
 8001126:	2b01      	cmp	r3, #1
 8001128:	d005      	beq.n	8001136 <HAL_GPIO_Init+0x176>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001132:	2b02      	cmp	r3, #2
 8001134:	d144      	bne.n	80011c0 <HAL_GPIO_Init+0x200>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d00f      	beq.n	800115e <HAL_GPIO_Init+0x19e>
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d00b      	beq.n	800115e <HAL_GPIO_Init+0x19e>
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	2b02      	cmp	r3, #2
 800114c:	d007      	beq.n	800115e <HAL_GPIO_Init+0x19e>
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	2b03      	cmp	r3, #3
 8001154:	d003      	beq.n	800115e <HAL_GPIO_Init+0x19e>
 8001156:	21c0      	movs	r1, #192	; 0xc0
 8001158:	4831      	ldr	r0, [pc, #196]	; (8001220 <HAL_GPIO_Init+0x260>)
 800115a:	f7ff fc5c 	bl	8000a16 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	2203      	movs	r2, #3
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	68da      	ldr	r2, [r3, #12]
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001194:	2201      	movs	r2, #1
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	091b      	lsrs	r3, r3, #4
 80011aa:	f003 0201 	and.w	r2, r3, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	2b03      	cmp	r3, #3
 80011ca:	d02b      	beq.n	8001224 <HAL_GPIO_Init+0x264>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d00b      	beq.n	80011ec <HAL_GPIO_Init+0x22c>
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d007      	beq.n	80011ec <HAL_GPIO_Init+0x22c>
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x22c>
 80011e4:	21d1      	movs	r1, #209	; 0xd1
 80011e6:	480e      	ldr	r0, [pc, #56]	; (8001220 <HAL_GPIO_Init+0x260>)
 80011e8:	f7ff fc15 	bl	8000a16 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	2203      	movs	r2, #3
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	e002      	b.n	8001224 <HAL_GPIO_Init+0x264>
 800121e:	bf00      	nop
 8001220:	0800de08 	.word	0x0800de08
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	2b02      	cmp	r3, #2
 800122e:	f040 80df 	bne.w	80013f0 <HAL_GPIO_Init+0x430>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	2b00      	cmp	r3, #0
 8001238:	f000 80b6 	beq.w	80013a8 <HAL_GPIO_Init+0x3e8>
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	2b09      	cmp	r3, #9
 8001242:	f000 80b1 	beq.w	80013a8 <HAL_GPIO_Init+0x3e8>
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	2b00      	cmp	r3, #0
 800124c:	f000 80ac 	beq.w	80013a8 <HAL_GPIO_Init+0x3e8>
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	2b00      	cmp	r3, #0
 8001256:	f000 80a7 	beq.w	80013a8 <HAL_GPIO_Init+0x3e8>
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 80a2 	beq.w	80013a8 <HAL_GPIO_Init+0x3e8>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 809d 	beq.w	80013a8 <HAL_GPIO_Init+0x3e8>
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	2b01      	cmp	r3, #1
 8001274:	f000 8098 	beq.w	80013a8 <HAL_GPIO_Init+0x3e8>
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	2b01      	cmp	r3, #1
 800127e:	f000 8093 	beq.w	80013a8 <HAL_GPIO_Init+0x3e8>
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	691b      	ldr	r3, [r3, #16]
 8001286:	2b02      	cmp	r3, #2
 8001288:	f000 808e 	beq.w	80013a8 <HAL_GPIO_Init+0x3e8>
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	2b02      	cmp	r3, #2
 8001292:	f000 8089 	beq.w	80013a8 <HAL_GPIO_Init+0x3e8>
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	2b02      	cmp	r3, #2
 800129c:	f000 8084 	beq.w	80013a8 <HAL_GPIO_Init+0x3e8>
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	2b03      	cmp	r3, #3
 80012a6:	d07f      	beq.n	80013a8 <HAL_GPIO_Init+0x3e8>
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	691b      	ldr	r3, [r3, #16]
 80012ac:	2b04      	cmp	r3, #4
 80012ae:	d07b      	beq.n	80013a8 <HAL_GPIO_Init+0x3e8>
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	2b04      	cmp	r3, #4
 80012b6:	d077      	beq.n	80013a8 <HAL_GPIO_Init+0x3e8>
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	2b04      	cmp	r3, #4
 80012be:	d073      	beq.n	80013a8 <HAL_GPIO_Init+0x3e8>
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	2b05      	cmp	r3, #5
 80012c6:	d06f      	beq.n	80013a8 <HAL_GPIO_Init+0x3e8>
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	691b      	ldr	r3, [r3, #16]
 80012cc:	2b05      	cmp	r3, #5
 80012ce:	d06b      	beq.n	80013a8 <HAL_GPIO_Init+0x3e8>
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	691b      	ldr	r3, [r3, #16]
 80012d4:	2b09      	cmp	r3, #9
 80012d6:	d067      	beq.n	80013a8 <HAL_GPIO_Init+0x3e8>
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	691b      	ldr	r3, [r3, #16]
 80012dc:	2b06      	cmp	r3, #6
 80012de:	d063      	beq.n	80013a8 <HAL_GPIO_Init+0x3e8>
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	691b      	ldr	r3, [r3, #16]
 80012e4:	2b09      	cmp	r3, #9
 80012e6:	d05f      	beq.n	80013a8 <HAL_GPIO_Init+0x3e8>
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	2b07      	cmp	r3, #7
 80012ee:	d05b      	beq.n	80013a8 <HAL_GPIO_Init+0x3e8>
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	2b07      	cmp	r3, #7
 80012f6:	d057      	beq.n	80013a8 <HAL_GPIO_Init+0x3e8>
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	2b07      	cmp	r3, #7
 80012fe:	d053      	beq.n	80013a8 <HAL_GPIO_Init+0x3e8>
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	2b08      	cmp	r3, #8
 8001306:	d04f      	beq.n	80013a8 <HAL_GPIO_Init+0x3e8>
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	691b      	ldr	r3, [r3, #16]
 800130c:	2b08      	cmp	r3, #8
 800130e:	d04b      	beq.n	80013a8 <HAL_GPIO_Init+0x3e8>
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	2b08      	cmp	r3, #8
 8001316:	d047      	beq.n	80013a8 <HAL_GPIO_Init+0x3e8>
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	2b09      	cmp	r3, #9
 800131e:	d043      	beq.n	80013a8 <HAL_GPIO_Init+0x3e8>
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	691b      	ldr	r3, [r3, #16]
 8001324:	2b09      	cmp	r3, #9
 8001326:	d03f      	beq.n	80013a8 <HAL_GPIO_Init+0x3e8>
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	2b0a      	cmp	r3, #10
 800132e:	d03b      	beq.n	80013a8 <HAL_GPIO_Init+0x3e8>
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	2b0a      	cmp	r3, #10
 8001336:	d037      	beq.n	80013a8 <HAL_GPIO_Init+0x3e8>
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	691b      	ldr	r3, [r3, #16]
 800133c:	2b0b      	cmp	r3, #11
 800133e:	d033      	beq.n	80013a8 <HAL_GPIO_Init+0x3e8>
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	2b0c      	cmp	r3, #12
 8001346:	d02f      	beq.n	80013a8 <HAL_GPIO_Init+0x3e8>
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	691b      	ldr	r3, [r3, #16]
 800134c:	2b0c      	cmp	r3, #12
 800134e:	d02b      	beq.n	80013a8 <HAL_GPIO_Init+0x3e8>
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	691b      	ldr	r3, [r3, #16]
 8001354:	2b0d      	cmp	r3, #13
 8001356:	d027      	beq.n	80013a8 <HAL_GPIO_Init+0x3e8>
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	2b0f      	cmp	r3, #15
 800135e:	d023      	beq.n	80013a8 <HAL_GPIO_Init+0x3e8>
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	2b05      	cmp	r3, #5
 8001366:	d01f      	beq.n	80013a8 <HAL_GPIO_Init+0x3e8>
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	2b05      	cmp	r3, #5
 800136e:	d01b      	beq.n	80013a8 <HAL_GPIO_Init+0x3e8>
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	2b05      	cmp	r3, #5
 8001376:	d017      	beq.n	80013a8 <HAL_GPIO_Init+0x3e8>
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	2b08      	cmp	r3, #8
 800137e:	d013      	beq.n	80013a8 <HAL_GPIO_Init+0x3e8>
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	2b08      	cmp	r3, #8
 8001386:	d00f      	beq.n	80013a8 <HAL_GPIO_Init+0x3e8>
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	2b0c      	cmp	r3, #12
 800138e:	d00b      	beq.n	80013a8 <HAL_GPIO_Init+0x3e8>
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	2b06      	cmp	r3, #6
 8001396:	d007      	beq.n	80013a8 <HAL_GPIO_Init+0x3e8>
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	2b0e      	cmp	r3, #14
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0x3e8>
 80013a0:	21de      	movs	r1, #222	; 0xde
 80013a2:	488a      	ldr	r0, [pc, #552]	; (80015cc <HAL_GPIO_Init+0x60c>)
 80013a4:	f7ff fb37 	bl	8000a16 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	08da      	lsrs	r2, r3, #3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3208      	adds	r2, #8
 80013b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	220f      	movs	r2, #15
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	691a      	ldr	r2, [r3, #16]
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	08da      	lsrs	r2, r3, #3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3208      	adds	r2, #8
 80013ea:	69b9      	ldr	r1, [r7, #24]
 80013ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	2203      	movs	r2, #3
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 0203 	and.w	r2, r3, #3
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800142c:	2b00      	cmp	r3, #0
 800142e:	f000 80c0 	beq.w	80015b2 <HAL_GPIO_Init+0x5f2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b66      	ldr	r3, [pc, #408]	; (80015d0 <HAL_GPIO_Init+0x610>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	4a65      	ldr	r2, [pc, #404]	; (80015d0 <HAL_GPIO_Init+0x610>)
 800143c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001440:	6453      	str	r3, [r2, #68]	; 0x44
 8001442:	4b63      	ldr	r3, [pc, #396]	; (80015d0 <HAL_GPIO_Init+0x610>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800144e:	4a61      	ldr	r2, [pc, #388]	; (80015d4 <HAL_GPIO_Init+0x614>)
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	089b      	lsrs	r3, r3, #2
 8001454:	3302      	adds	r3, #2
 8001456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	220f      	movs	r2, #15
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a58      	ldr	r2, [pc, #352]	; (80015d8 <HAL_GPIO_Init+0x618>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d037      	beq.n	80014ea <HAL_GPIO_Init+0x52a>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a57      	ldr	r2, [pc, #348]	; (80015dc <HAL_GPIO_Init+0x61c>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d031      	beq.n	80014e6 <HAL_GPIO_Init+0x526>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a56      	ldr	r2, [pc, #344]	; (80015e0 <HAL_GPIO_Init+0x620>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d02b      	beq.n	80014e2 <HAL_GPIO_Init+0x522>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a55      	ldr	r2, [pc, #340]	; (80015e4 <HAL_GPIO_Init+0x624>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d025      	beq.n	80014de <HAL_GPIO_Init+0x51e>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a54      	ldr	r2, [pc, #336]	; (80015e8 <HAL_GPIO_Init+0x628>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d01f      	beq.n	80014da <HAL_GPIO_Init+0x51a>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a53      	ldr	r2, [pc, #332]	; (80015ec <HAL_GPIO_Init+0x62c>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d019      	beq.n	80014d6 <HAL_GPIO_Init+0x516>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a52      	ldr	r2, [pc, #328]	; (80015f0 <HAL_GPIO_Init+0x630>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d013      	beq.n	80014d2 <HAL_GPIO_Init+0x512>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a51      	ldr	r2, [pc, #324]	; (80015f4 <HAL_GPIO_Init+0x634>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d00d      	beq.n	80014ce <HAL_GPIO_Init+0x50e>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a50      	ldr	r2, [pc, #320]	; (80015f8 <HAL_GPIO_Init+0x638>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d007      	beq.n	80014ca <HAL_GPIO_Init+0x50a>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a4f      	ldr	r2, [pc, #316]	; (80015fc <HAL_GPIO_Init+0x63c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d101      	bne.n	80014c6 <HAL_GPIO_Init+0x506>
 80014c2:	2309      	movs	r3, #9
 80014c4:	e012      	b.n	80014ec <HAL_GPIO_Init+0x52c>
 80014c6:	230a      	movs	r3, #10
 80014c8:	e010      	b.n	80014ec <HAL_GPIO_Init+0x52c>
 80014ca:	2308      	movs	r3, #8
 80014cc:	e00e      	b.n	80014ec <HAL_GPIO_Init+0x52c>
 80014ce:	2307      	movs	r3, #7
 80014d0:	e00c      	b.n	80014ec <HAL_GPIO_Init+0x52c>
 80014d2:	2306      	movs	r3, #6
 80014d4:	e00a      	b.n	80014ec <HAL_GPIO_Init+0x52c>
 80014d6:	2305      	movs	r3, #5
 80014d8:	e008      	b.n	80014ec <HAL_GPIO_Init+0x52c>
 80014da:	2304      	movs	r3, #4
 80014dc:	e006      	b.n	80014ec <HAL_GPIO_Init+0x52c>
 80014de:	2303      	movs	r3, #3
 80014e0:	e004      	b.n	80014ec <HAL_GPIO_Init+0x52c>
 80014e2:	2302      	movs	r3, #2
 80014e4:	e002      	b.n	80014ec <HAL_GPIO_Init+0x52c>
 80014e6:	2301      	movs	r3, #1
 80014e8:	e000      	b.n	80014ec <HAL_GPIO_Init+0x52c>
 80014ea:	2300      	movs	r3, #0
 80014ec:	69fa      	ldr	r2, [r7, #28]
 80014ee:	f002 0203 	and.w	r2, r2, #3
 80014f2:	0092      	lsls	r2, r2, #2
 80014f4:	4093      	lsls	r3, r2
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014fc:	4935      	ldr	r1, [pc, #212]	; (80015d4 <HAL_GPIO_Init+0x614>)
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	089b      	lsrs	r3, r3, #2
 8001502:	3302      	adds	r3, #2
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800150a:	4b3d      	ldr	r3, [pc, #244]	; (8001600 <HAL_GPIO_Init+0x640>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	43db      	mvns	r3, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4013      	ands	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_GPIO_Init+0x56e>
        {
          temp |= iocurrent;
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	4313      	orrs	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800152e:	4a34      	ldr	r2, [pc, #208]	; (8001600 <HAL_GPIO_Init+0x640>)
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001534:	4b32      	ldr	r3, [pc, #200]	; (8001600 <HAL_GPIO_Init+0x640>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	43db      	mvns	r3, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d003      	beq.n	8001558 <HAL_GPIO_Init+0x598>
        {
          temp |= iocurrent;
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001558:	4a29      	ldr	r2, [pc, #164]	; (8001600 <HAL_GPIO_Init+0x640>)
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800155e:	4b28      	ldr	r3, [pc, #160]	; (8001600 <HAL_GPIO_Init+0x640>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	43db      	mvns	r3, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4013      	ands	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_Init+0x5c2>
        {
          temp |= iocurrent;
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001582:	4a1f      	ldr	r2, [pc, #124]	; (8001600 <HAL_GPIO_Init+0x640>)
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001588:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <HAL_GPIO_Init+0x640>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	43db      	mvns	r3, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4013      	ands	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <HAL_GPIO_Init+0x5ec>
        {
          temp |= iocurrent;
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015ac:	4a14      	ldr	r2, [pc, #80]	; (8001600 <HAL_GPIO_Init+0x640>)
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3301      	adds	r3, #1
 80015b6:	61fb      	str	r3, [r7, #28]
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	2b0f      	cmp	r3, #15
 80015bc:	f67f ada0 	bls.w	8001100 <HAL_GPIO_Init+0x140>
      }
    }
  }
}
 80015c0:	bf00      	nop
 80015c2:	bf00      	nop
 80015c4:	3720      	adds	r7, #32
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	0800de08 	.word	0x0800de08
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40013800 	.word	0x40013800
 80015d8:	40020000 	.word	0x40020000
 80015dc:	40020400 	.word	0x40020400
 80015e0:	40020800 	.word	0x40020800
 80015e4:	40020c00 	.word	0x40020c00
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40021400 	.word	0x40021400
 80015f0:	40021800 	.word	0x40021800
 80015f4:	40021c00 	.word	0x40021c00
 80015f8:	40022000 	.word	0x40022000
 80015fc:	40022400 	.word	0x40022400
 8001600:	40013c00 	.word	0x40013c00

08001604 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001606:	b08f      	sub	sp, #60	; 0x3c
 8001608:	af0a      	add	r7, sp, #40	; 0x28
 800160a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e11d      	b.n	8001852 <HAL_PCD_Init+0x24e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800161e:	d008      	beq.n	8001632 <HAL_PCD_Init+0x2e>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a8d      	ldr	r2, [pc, #564]	; (800185c <HAL_PCD_Init+0x258>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d003      	beq.n	8001632 <HAL_PCD_Init+0x2e>
 800162a:	2187      	movs	r1, #135	; 0x87
 800162c:	488c      	ldr	r0, [pc, #560]	; (8001860 <HAL_PCD_Init+0x25c>)
 800162e:	f7ff f9f2 	bl	8000a16 <assert_failed>

  USBx = hpcd->Instance;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b00      	cmp	r3, #0
 8001642:	d106      	bne.n	8001652 <HAL_PCD_Init+0x4e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f006 fdcb 	bl	80081e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2203      	movs	r2, #3
 8001656:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800165e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001662:	2b00      	cmp	r3, #0
 8001664:	d102      	bne.n	800166c <HAL_PCD_Init+0x68>
  {
    hpcd->Init.dma_enable = 0U;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f003 f8e2 	bl	800483a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	603b      	str	r3, [r7, #0]
 800167c:	687e      	ldr	r6, [r7, #4]
 800167e:	466d      	mov	r5, sp
 8001680:	f106 0410 	add.w	r4, r6, #16
 8001684:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001686:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001688:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800168a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800168c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001690:	e885 0003 	stmia.w	r5, {r0, r1}
 8001694:	1d33      	adds	r3, r6, #4
 8001696:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001698:	6838      	ldr	r0, [r7, #0]
 800169a:	f002 ffb9 	bl	8004610 <USB_CoreInit>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d005      	beq.n	80016b0 <HAL_PCD_Init+0xac>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2202      	movs	r2, #2
 80016a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e0d0      	b.n	8001852 <HAL_PCD_Init+0x24e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2100      	movs	r1, #0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f003 f8d0 	bl	800485c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016bc:	2300      	movs	r3, #0
 80016be:	73fb      	strb	r3, [r7, #15]
 80016c0:	e04a      	b.n	8001758 <HAL_PCD_Init+0x154>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80016c2:	7bfa      	ldrb	r2, [r7, #15]
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	4413      	add	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	440b      	add	r3, r1
 80016d0:	333d      	adds	r3, #61	; 0x3d
 80016d2:	2201      	movs	r2, #1
 80016d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80016d6:	7bfa      	ldrb	r2, [r7, #15]
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	4413      	add	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	440b      	add	r3, r1
 80016e4:	333c      	adds	r3, #60	; 0x3c
 80016e6:	7bfa      	ldrb	r2, [r7, #15]
 80016e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80016ea:	7bfa      	ldrb	r2, [r7, #15]
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	b298      	uxth	r0, r3
 80016f0:	6879      	ldr	r1, [r7, #4]
 80016f2:	4613      	mov	r3, r2
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	4413      	add	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	440b      	add	r3, r1
 80016fc:	3344      	adds	r3, #68	; 0x44
 80016fe:	4602      	mov	r2, r0
 8001700:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001702:	7bfa      	ldrb	r2, [r7, #15]
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	4613      	mov	r3, r2
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	4413      	add	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	440b      	add	r3, r1
 8001710:	3340      	adds	r3, #64	; 0x40
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001716:	7bfa      	ldrb	r2, [r7, #15]
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	4613      	mov	r3, r2
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	4413      	add	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	440b      	add	r3, r1
 8001724:	3348      	adds	r3, #72	; 0x48
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800172a:	7bfa      	ldrb	r2, [r7, #15]
 800172c:	6879      	ldr	r1, [r7, #4]
 800172e:	4613      	mov	r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	4413      	add	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	440b      	add	r3, r1
 8001738:	334c      	adds	r3, #76	; 0x4c
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800173e:	7bfa      	ldrb	r2, [r7, #15]
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	4613      	mov	r3, r2
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	4413      	add	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	440b      	add	r3, r1
 800174c:	3354      	adds	r3, #84	; 0x54
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	3301      	adds	r3, #1
 8001756:	73fb      	strb	r3, [r7, #15]
 8001758:	7bfa      	ldrb	r2, [r7, #15]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	429a      	cmp	r2, r3
 8001760:	d3af      	bcc.n	80016c2 <HAL_PCD_Init+0xbe>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001762:	2300      	movs	r3, #0
 8001764:	73fb      	strb	r3, [r7, #15]
 8001766:	e044      	b.n	80017f2 <HAL_PCD_Init+0x1ee>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001768:	7bfa      	ldrb	r2, [r7, #15]
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	4613      	mov	r3, r2
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	4413      	add	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	440b      	add	r3, r1
 8001776:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800177e:	7bfa      	ldrb	r2, [r7, #15]
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	4613      	mov	r3, r2
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	4413      	add	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	440b      	add	r3, r1
 800178c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001790:	7bfa      	ldrb	r2, [r7, #15]
 8001792:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001794:	7bfa      	ldrb	r2, [r7, #15]
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	4613      	mov	r3, r2
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	4413      	add	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	440b      	add	r3, r1
 80017a2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80017a6:	2200      	movs	r2, #0
 80017a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80017aa:	7bfa      	ldrb	r2, [r7, #15]
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	4613      	mov	r3, r2
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	4413      	add	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	440b      	add	r3, r1
 80017b8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80017c0:	7bfa      	ldrb	r2, [r7, #15]
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	4613      	mov	r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	4413      	add	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80017d6:	7bfa      	ldrb	r2, [r7, #15]
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	4613      	mov	r3, r2
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	4413      	add	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	440b      	add	r3, r1
 80017e4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	3301      	adds	r3, #1
 80017f0:	73fb      	strb	r3, [r7, #15]
 80017f2:	7bfa      	ldrb	r2, [r7, #15]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d3b5      	bcc.n	8001768 <HAL_PCD_Init+0x164>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	603b      	str	r3, [r7, #0]
 8001802:	687e      	ldr	r6, [r7, #4]
 8001804:	466d      	mov	r5, sp
 8001806:	f106 0410 	add.w	r4, r6, #16
 800180a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800180c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800180e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001810:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001812:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001816:	e885 0003 	stmia.w	r5, {r0, r1}
 800181a:	1d33      	adds	r3, r6, #4
 800181c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800181e:	6838      	ldr	r0, [r7, #0]
 8001820:	f003 f868 	bl	80048f4 <USB_DevInit>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d005      	beq.n	8001836 <HAL_PCD_Init+0x232>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2202      	movs	r2, #2
 800182e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e00d      	b.n	8001852 <HAL_PCD_Init+0x24e>
  }

  hpcd->USB_Address = 0U;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f004 f9b7 	bl	8005bbe <USB_DevDisconnect>

  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800185a:	bf00      	nop
 800185c:	40040000 	.word	0x40040000
 8001860:	0800de44 	.word	0x0800de44

08001864 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001878:	2b01      	cmp	r3, #1
 800187a:	d101      	bne.n	8001880 <HAL_PCD_Start+0x1c>
 800187c:	2302      	movs	r3, #2
 800187e:	e020      	b.n	80018c2 <HAL_PCD_Start+0x5e>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188c:	2b01      	cmp	r3, #1
 800188e:	d109      	bne.n	80018a4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001894:	2b01      	cmp	r3, #1
 8001896:	d005      	beq.n	80018a4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800189c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f002 ffb5 	bl	8004818 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f004 f962 	bl	8005b7c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80018ca:	b590      	push	{r4, r7, lr}
 80018cc:	b08d      	sub	sp, #52	; 0x34
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018d8:	6a3b      	ldr	r3, [r7, #32]
 80018da:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f004 fa20 	bl	8005d26 <USB_GetMode>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f040 848a 	bne.w	8002202 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f004 f984 	bl	8005c00 <USB_ReadInterrupts>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 8480 	beq.w	8002200 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	0a1b      	lsrs	r3, r3, #8
 800190a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f004 f971 	bl	8005c00 <USB_ReadInterrupts>
 800191e:	4603      	mov	r3, r0
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b02      	cmp	r3, #2
 8001926:	d107      	bne.n	8001938 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	695a      	ldr	r2, [r3, #20]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f002 0202 	and.w	r2, r2, #2
 8001936:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f004 f95f 	bl	8005c00 <USB_ReadInterrupts>
 8001942:	4603      	mov	r3, r0
 8001944:	f003 0310 	and.w	r3, r3, #16
 8001948:	2b10      	cmp	r3, #16
 800194a:	d161      	bne.n	8001a10 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	699a      	ldr	r2, [r3, #24]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f022 0210 	bic.w	r2, r2, #16
 800195a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800195c:	6a3b      	ldr	r3, [r7, #32]
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	f003 020f 	and.w	r2, r3, #15
 8001968:	4613      	mov	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	4413      	add	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	4413      	add	r3, r2
 8001978:	3304      	adds	r3, #4
 800197a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	0c5b      	lsrs	r3, r3, #17
 8001980:	f003 030f 	and.w	r3, r3, #15
 8001984:	2b02      	cmp	r3, #2
 8001986:	d124      	bne.n	80019d2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800198e:	4013      	ands	r3, r2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d035      	beq.n	8001a00 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	091b      	lsrs	r3, r3, #4
 800199c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800199e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	461a      	mov	r2, r3
 80019a6:	6a38      	ldr	r0, [r7, #32]
 80019a8:	f003 ff96 	bl	80058d8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	691a      	ldr	r2, [r3, #16]
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	091b      	lsrs	r3, r3, #4
 80019b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019b8:	441a      	add	r2, r3
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	6a1a      	ldr	r2, [r3, #32]
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	091b      	lsrs	r3, r3, #4
 80019c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019ca:	441a      	add	r2, r3
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	621a      	str	r2, [r3, #32]
 80019d0:	e016      	b.n	8001a00 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	0c5b      	lsrs	r3, r3, #17
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	2b06      	cmp	r3, #6
 80019dc:	d110      	bne.n	8001a00 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80019e4:	2208      	movs	r2, #8
 80019e6:	4619      	mov	r1, r3
 80019e8:	6a38      	ldr	r0, [r7, #32]
 80019ea:	f003 ff75 	bl	80058d8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	6a1a      	ldr	r2, [r3, #32]
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	091b      	lsrs	r3, r3, #4
 80019f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019fa:	441a      	add	r2, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	699a      	ldr	r2, [r3, #24]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0210 	orr.w	r2, r2, #16
 8001a0e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f004 f8f3 	bl	8005c00 <USB_ReadInterrupts>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a20:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001a24:	f040 80a7 	bne.w	8001b76 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f004 f8f8 	bl	8005c26 <USB_ReadDevAllOutEpInterrupt>
 8001a36:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001a38:	e099      	b.n	8001b6e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f000 808e 	beq.w	8001b62 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f004 f91c 	bl	8005c8e <USB_ReadDevOutEPInterrupt>
 8001a56:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d00c      	beq.n	8001a7c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	015a      	lsls	r2, r3, #5
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	4413      	add	r3, r2
 8001a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a6e:	461a      	mov	r2, r3
 8001a70:	2301      	movs	r3, #1
 8001a72:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001a74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 fec2 	bl	8002800 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00c      	beq.n	8001aa0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	015a      	lsls	r2, r3, #5
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a92:	461a      	mov	r2, r3
 8001a94:	2308      	movs	r3, #8
 8001a96:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001a98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 ff98 	bl	80029d0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	f003 0310 	and.w	r3, r3, #16
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d008      	beq.n	8001abc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	015a      	lsls	r2, r3, #5
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	2310      	movs	r3, #16
 8001aba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d030      	beq.n	8001b28 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001ac6:	6a3b      	ldr	r3, [r7, #32]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ace:	2b80      	cmp	r3, #128	; 0x80
 8001ad0:	d109      	bne.n	8001ae6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	69fa      	ldr	r2, [r7, #28]
 8001adc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ae0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ae4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae8:	4613      	mov	r3, r2
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	4413      	add	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	4413      	add	r3, r2
 8001af8:	3304      	adds	r3, #4
 8001afa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	78db      	ldrb	r3, [r3, #3]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d108      	bne.n	8001b16 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	2200      	movs	r2, #0
 8001b08:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	4619      	mov	r1, r3
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f006 fc6f 	bl	80083f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	015a      	lsls	r2, r3, #5
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b22:	461a      	mov	r2, r3
 8001b24:	2302      	movs	r3, #2
 8001b26:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	f003 0320 	and.w	r3, r3, #32
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d008      	beq.n	8001b44 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	015a      	lsls	r2, r3, #5
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	4413      	add	r3, r2
 8001b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b3e:	461a      	mov	r2, r3
 8001b40:	2320      	movs	r3, #32
 8001b42:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d009      	beq.n	8001b62 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	015a      	lsls	r2, r3, #5
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	4413      	add	r3, r2
 8001b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b60:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	3301      	adds	r3, #1
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b6a:	085b      	lsrs	r3, r3, #1
 8001b6c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f47f af62 	bne.w	8001a3a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f004 f840 	bl	8005c00 <USB_ReadInterrupts>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b86:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001b8a:	f040 80db 	bne.w	8001d44 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f004 f861 	bl	8005c5a <USB_ReadDevAllInEpInterrupt>
 8001b98:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001b9e:	e0cd      	b.n	8001d3c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 80c2 	beq.w	8001d30 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	4611      	mov	r1, r2
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f004 f887 	bl	8005cca <USB_ReadDevInEPInterrupt>
 8001bbc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d057      	beq.n	8001c78 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	2201      	movs	r2, #1
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69f9      	ldr	r1, [r7, #28]
 8001be4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001be8:	4013      	ands	r3, r2
 8001bea:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	015a      	lsls	r2, r3, #5
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d132      	bne.n	8001c6c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	4413      	add	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	440b      	add	r3, r1
 8001c14:	334c      	adds	r3, #76	; 0x4c
 8001c16:	6819      	ldr	r1, [r3, #0]
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	4413      	add	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4403      	add	r3, r0
 8001c26:	3348      	adds	r3, #72	; 0x48
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4419      	add	r1, r3
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c30:	4613      	mov	r3, r2
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	4413      	add	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4403      	add	r3, r0
 8001c3a:	334c      	adds	r3, #76	; 0x4c
 8001c3c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d113      	bne.n	8001c6c <HAL_PCD_IRQHandler+0x3a2>
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c48:	4613      	mov	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	3354      	adds	r3, #84	; 0x54
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d108      	bne.n	8001c6c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6818      	ldr	r0, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001c64:	461a      	mov	r2, r3
 8001c66:	2101      	movs	r1, #1
 8001c68:	f004 f88e 	bl	8005d88 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	4619      	mov	r1, r3
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f006 fb39 	bl	80082ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d008      	beq.n	8001c94 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	015a      	lsls	r2, r3, #5
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	4413      	add	r3, r2
 8001c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c8e:	461a      	mov	r2, r3
 8001c90:	2308      	movs	r3, #8
 8001c92:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	f003 0310 	and.w	r3, r3, #16
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d008      	beq.n	8001cb0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	015a      	lsls	r2, r3, #5
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001caa:	461a      	mov	r2, r3
 8001cac:	2310      	movs	r3, #16
 8001cae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d008      	beq.n	8001ccc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	015a      	lsls	r2, r3, #5
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	2340      	movs	r3, #64	; 0x40
 8001cca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d023      	beq.n	8001d1e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001cd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cd8:	6a38      	ldr	r0, [r7, #32]
 8001cda:	f002 ff6f 	bl	8004bbc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	3338      	adds	r3, #56	; 0x38
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	3304      	adds	r3, #4
 8001cf0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	78db      	ldrb	r3, [r3, #3]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d108      	bne.n	8001d0c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	4619      	mov	r1, r3
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f006 fb86 	bl	8008418 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	015a      	lsls	r2, r3, #5
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	4413      	add	r3, r2
 8001d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d18:	461a      	mov	r2, r3
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001d28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 fcdb 	bl	80026e6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	3301      	adds	r3, #1
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d38:	085b      	lsrs	r3, r3, #1
 8001d3a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f47f af2e 	bne.w	8001ba0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f003 ff59 	bl	8005c00 <USB_ReadInterrupts>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001d54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d58:	d122      	bne.n	8001da0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	69fa      	ldr	r2, [r7, #28]
 8001d64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d68:	f023 0301 	bic.w	r3, r3, #1
 8001d6c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d108      	bne.n	8001d8a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001d80:	2100      	movs	r1, #0
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 fec2 	bl	8002b0c <HAL_PCDEx_LPM_Callback>
 8001d88:	e002      	b.n	8001d90 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f006 fb24 	bl	80083d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	695a      	ldr	r2, [r3, #20]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001d9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f003 ff2b 	bl	8005c00 <USB_ReadInterrupts>
 8001daa:	4603      	mov	r3, r0
 8001dac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001db0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001db4:	d112      	bne.n	8001ddc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d102      	bne.n	8001dcc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f006 fae0 	bl	800838c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	695a      	ldr	r2, [r3, #20]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001dda:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f003 ff0d 	bl	8005c00 <USB_ReadInterrupts>
 8001de6:	4603      	mov	r3, r0
 8001de8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001df0:	f040 80b7 	bne.w	8001f62 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	69fa      	ldr	r2, [r7, #28]
 8001dfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e02:	f023 0301 	bic.w	r3, r3, #1
 8001e06:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2110      	movs	r1, #16
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f002 fed4 	bl	8004bbc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e14:	2300      	movs	r3, #0
 8001e16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e18:	e046      	b.n	8001ea8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e1c:	015a      	lsls	r2, r3, #5
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	4413      	add	r3, r2
 8001e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e26:	461a      	mov	r2, r3
 8001e28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001e2c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e30:	015a      	lsls	r2, r3, #5
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	4413      	add	r3, r2
 8001e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e3e:	0151      	lsls	r1, r2, #5
 8001e40:	69fa      	ldr	r2, [r7, #28]
 8001e42:	440a      	add	r2, r1
 8001e44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001e48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001e4c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e50:	015a      	lsls	r2, r3, #5
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	4413      	add	r3, r2
 8001e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001e60:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e64:	015a      	lsls	r2, r3, #5
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	4413      	add	r3, r2
 8001e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e72:	0151      	lsls	r1, r2, #5
 8001e74:	69fa      	ldr	r2, [r7, #28]
 8001e76:	440a      	add	r2, r1
 8001e78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001e7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001e80:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e84:	015a      	lsls	r2, r3, #5
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	4413      	add	r3, r2
 8001e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e92:	0151      	lsls	r1, r2, #5
 8001e94:	69fa      	ldr	r2, [r7, #28]
 8001e96:	440a      	add	r2, r1
 8001e98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001e9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ea0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d3b3      	bcc.n	8001e1a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	69fa      	ldr	r2, [r7, #28]
 8001ebc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ec0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001ec4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d016      	beq.n	8001efc <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ed8:	69fa      	ldr	r2, [r7, #28]
 8001eda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ede:	f043 030b 	orr.w	r3, r3, #11
 8001ee2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	69fa      	ldr	r2, [r7, #28]
 8001ef0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ef4:	f043 030b 	orr.w	r3, r3, #11
 8001ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8001efa:	e015      	b.n	8001f28 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	69fa      	ldr	r2, [r7, #28]
 8001f06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f0e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001f12:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	69fa      	ldr	r2, [r7, #28]
 8001f1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f22:	f043 030b 	orr.w	r3, r3, #11
 8001f26:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	69fa      	ldr	r2, [r7, #28]
 8001f32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f36:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001f3a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6818      	ldr	r0, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	f003 ff1b 	bl	8005d88 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	695a      	ldr	r2, [r3, #20]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001f60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f003 fe4a 	bl	8005c00 <USB_ReadInterrupts>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f76:	d124      	bne.n	8001fc2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f003 fee0 	bl	8005d42 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f002 fe95 	bl	8004cb6 <USB_GetDevSpeed>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	461a      	mov	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681c      	ldr	r4, [r3, #0]
 8001f98:	f001 fb98 	bl	80036cc <HAL_RCC_GetHCLKFreq>
 8001f9c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	f002 fb94 	bl	80046d4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f006 f9c4 	bl	800833a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	695a      	ldr	r2, [r3, #20]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001fc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f003 fe1a 	bl	8005c00 <USB_ReadInterrupts>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d10a      	bne.n	8001fec <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f006 f9a1 	bl	800831e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	695a      	ldr	r2, [r3, #20]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f002 0208 	and.w	r2, r2, #8
 8001fea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f003 fe05 	bl	8005c00 <USB_ReadInterrupts>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffc:	2b80      	cmp	r3, #128	; 0x80
 8001ffe:	d122      	bne.n	8002046 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002000:	6a3b      	ldr	r3, [r7, #32]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002008:	6a3b      	ldr	r3, [r7, #32]
 800200a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800200c:	2301      	movs	r3, #1
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
 8002010:	e014      	b.n	800203c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002016:	4613      	mov	r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	4413      	add	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	440b      	add	r3, r1
 8002020:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d105      	bne.n	8002036 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	b2db      	uxtb	r3, r3
 800202e:	4619      	mov	r1, r3
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 fb27 	bl	8002684 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	3301      	adds	r3, #1
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002042:	429a      	cmp	r2, r3
 8002044:	d3e5      	bcc.n	8002012 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f003 fdd8 	bl	8005c00 <USB_ReadInterrupts>
 8002050:	4603      	mov	r3, r0
 8002052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002056:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800205a:	d13b      	bne.n	80020d4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800205c:	2301      	movs	r3, #1
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
 8002060:	e02b      	b.n	80020ba <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	015a      	lsls	r2, r3, #5
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	4413      	add	r3, r2
 800206a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002076:	4613      	mov	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	4413      	add	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	440b      	add	r3, r1
 8002080:	3340      	adds	r3, #64	; 0x40
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d115      	bne.n	80020b4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002088:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800208a:	2b00      	cmp	r3, #0
 800208c:	da12      	bge.n	80020b4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002092:	4613      	mov	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4413      	add	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	440b      	add	r3, r1
 800209c:	333f      	adds	r3, #63	; 0x3f
 800209e:	2201      	movs	r2, #1
 80020a0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	4619      	mov	r1, r3
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 fae8 	bl	8002684 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	3301      	adds	r3, #1
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d3ce      	bcc.n	8002062 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	695a      	ldr	r2, [r3, #20]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80020d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f003 fd91 	bl	8005c00 <USB_ReadInterrupts>
 80020de:	4603      	mov	r3, r0
 80020e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020e8:	d155      	bne.n	8002196 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020ea:	2301      	movs	r3, #1
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
 80020ee:	e045      	b.n	800217c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	015a      	lsls	r2, r3, #5
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	4413      	add	r3, r2
 80020f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002104:	4613      	mov	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4413      	add	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d12e      	bne.n	8002176 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002118:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800211a:	2b00      	cmp	r3, #0
 800211c:	da2b      	bge.n	8002176 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800212a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800212e:	429a      	cmp	r2, r3
 8002130:	d121      	bne.n	8002176 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002136:	4613      	mov	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	4413      	add	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	440b      	add	r3, r1
 8002140:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002144:	2201      	movs	r2, #1
 8002146:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002148:	6a3b      	ldr	r3, [r7, #32]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002150:	6a3b      	ldr	r3, [r7, #32]
 8002152:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002154:	6a3b      	ldr	r3, [r7, #32]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10a      	bne.n	8002176 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	69fa      	ldr	r2, [r7, #28]
 800216a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800216e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002172:	6053      	str	r3, [r2, #4]
            break;
 8002174:	e007      	b.n	8002186 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	3301      	adds	r3, #1
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002182:	429a      	cmp	r2, r3
 8002184:	d3b4      	bcc.n	80020f0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	695a      	ldr	r2, [r3, #20]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002194:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f003 fd30 	bl	8005c00 <USB_ReadInterrupts>
 80021a0:	4603      	mov	r3, r0
 80021a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80021a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021aa:	d10a      	bne.n	80021c2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f006 f945 	bl	800843c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695a      	ldr	r2, [r3, #20]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80021c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f003 fd1a 	bl	8005c00 <USB_ReadInterrupts>
 80021cc:	4603      	mov	r3, r0
 80021ce:	f003 0304 	and.w	r3, r3, #4
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d115      	bne.n	8002202 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d002      	beq.n	80021ee <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f006 f935 	bl	8008458 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6859      	ldr	r1, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	e000      	b.n	8002202 <HAL_PCD_IRQHandler+0x938>
      return;
 8002200:	bf00      	nop
    }
  }
}
 8002202:	3734      	adds	r7, #52	; 0x34
 8002204:	46bd      	mov	sp, r7
 8002206:	bd90      	pop	{r4, r7, pc}

08002208 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800221a:	2b01      	cmp	r3, #1
 800221c:	d101      	bne.n	8002222 <HAL_PCD_SetAddress+0x1a>
 800221e:	2302      	movs	r3, #2
 8002220:	e013      	b.n	800224a <HAL_PCD_SetAddress+0x42>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	78fa      	ldrb	r2, [r7, #3]
 800222e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	78fa      	ldrb	r2, [r7, #3]
 8002238:	4611      	mov	r1, r2
 800223a:	4618      	mov	r0, r3
 800223c:	f003 fc78 	bl	8005b30 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b084      	sub	sp, #16
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	4608      	mov	r0, r1
 800225c:	4611      	mov	r1, r2
 800225e:	461a      	mov	r2, r3
 8002260:	4603      	mov	r3, r0
 8002262:	70fb      	strb	r3, [r7, #3]
 8002264:	460b      	mov	r3, r1
 8002266:	803b      	strh	r3, [r7, #0]
 8002268:	4613      	mov	r3, r2
 800226a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800226c:	2300      	movs	r3, #0
 800226e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002270:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002274:	2b00      	cmp	r3, #0
 8002276:	da0f      	bge.n	8002298 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002278:	78fb      	ldrb	r3, [r7, #3]
 800227a:	f003 020f 	and.w	r2, r3, #15
 800227e:	4613      	mov	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	4413      	add	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	3338      	adds	r3, #56	; 0x38
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	4413      	add	r3, r2
 800228c:	3304      	adds	r3, #4
 800228e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2201      	movs	r2, #1
 8002294:	705a      	strb	r2, [r3, #1]
 8002296:	e00f      	b.n	80022b8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	f003 020f 	and.w	r2, r3, #15
 800229e:	4613      	mov	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	4413      	add	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	4413      	add	r3, r2
 80022ae:	3304      	adds	r3, #4
 80022b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80022b8:	78fb      	ldrb	r3, [r7, #3]
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80022c4:	883a      	ldrh	r2, [r7, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	78ba      	ldrb	r2, [r7, #2]
 80022ce:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	785b      	ldrb	r3, [r3, #1]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d004      	beq.n	80022e2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	b29a      	uxth	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80022e2:	78bb      	ldrb	r3, [r7, #2]
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d102      	bne.n	80022ee <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <HAL_PCD_EP_Open+0xaa>
 80022f8:	2302      	movs	r3, #2
 80022fa:	e00e      	b.n	800231a <HAL_PCD_EP_Open+0xc8>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68f9      	ldr	r1, [r7, #12]
 800230a:	4618      	mov	r0, r3
 800230c:	f002 fcf8 	bl	8004d00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002318:	7afb      	ldrb	r3, [r7, #11]
}
 800231a:	4618      	mov	r0, r3
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b084      	sub	sp, #16
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	460b      	mov	r3, r1
 800232c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800232e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002332:	2b00      	cmp	r3, #0
 8002334:	da0f      	bge.n	8002356 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002336:	78fb      	ldrb	r3, [r7, #3]
 8002338:	f003 020f 	and.w	r2, r3, #15
 800233c:	4613      	mov	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	4413      	add	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	3338      	adds	r3, #56	; 0x38
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	4413      	add	r3, r2
 800234a:	3304      	adds	r3, #4
 800234c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2201      	movs	r2, #1
 8002352:	705a      	strb	r2, [r3, #1]
 8002354:	e00f      	b.n	8002376 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002356:	78fb      	ldrb	r3, [r7, #3]
 8002358:	f003 020f 	and.w	r2, r3, #15
 800235c:	4613      	mov	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	4413      	add	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	4413      	add	r3, r2
 800236c:	3304      	adds	r3, #4
 800236e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002376:	78fb      	ldrb	r3, [r7, #3]
 8002378:	f003 030f 	and.w	r3, r3, #15
 800237c:	b2da      	uxtb	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002388:	2b01      	cmp	r3, #1
 800238a:	d101      	bne.n	8002390 <HAL_PCD_EP_Close+0x6e>
 800238c:	2302      	movs	r3, #2
 800238e:	e00e      	b.n	80023ae <HAL_PCD_EP_Close+0x8c>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68f9      	ldr	r1, [r7, #12]
 800239e:	4618      	mov	r0, r3
 80023a0:	f002 fd36 	bl	8004e10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b086      	sub	sp, #24
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	60f8      	str	r0, [r7, #12]
 80023be:	607a      	str	r2, [r7, #4]
 80023c0:	603b      	str	r3, [r7, #0]
 80023c2:	460b      	mov	r3, r1
 80023c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023c6:	7afb      	ldrb	r3, [r7, #11]
 80023c8:	f003 020f 	and.w	r2, r3, #15
 80023cc:	4613      	mov	r3, r2
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	4413      	add	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	4413      	add	r3, r2
 80023dc:	3304      	adds	r3, #4
 80023de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	2200      	movs	r2, #0
 80023f0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	2200      	movs	r2, #0
 80023f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023f8:	7afb      	ldrb	r3, [r7, #11]
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d102      	bne.n	8002412 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002412:	7afb      	ldrb	r3, [r7, #11]
 8002414:	f003 030f 	and.w	r3, r3, #15
 8002418:	2b00      	cmp	r3, #0
 800241a:	d109      	bne.n	8002430 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6818      	ldr	r0, [r3, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	b2db      	uxtb	r3, r3
 8002426:	461a      	mov	r2, r3
 8002428:	6979      	ldr	r1, [r7, #20]
 800242a:	f003 f815 	bl	8005458 <USB_EP0StartXfer>
 800242e:	e008      	b.n	8002442 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6818      	ldr	r0, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	b2db      	uxtb	r3, r3
 800243a:	461a      	mov	r2, r3
 800243c:	6979      	ldr	r1, [r7, #20]
 800243e:	f002 fdc3 	bl	8004fc8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002458:	78fb      	ldrb	r3, [r7, #3]
 800245a:	f003 020f 	and.w	r2, r3, #15
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	4413      	add	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800246e:	681b      	ldr	r3, [r3, #0]
}
 8002470:	4618      	mov	r0, r3
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	607a      	str	r2, [r7, #4]
 8002486:	603b      	str	r3, [r7, #0]
 8002488:	460b      	mov	r3, r1
 800248a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800248c:	7afb      	ldrb	r3, [r7, #11]
 800248e:	f003 020f 	and.w	r2, r3, #15
 8002492:	4613      	mov	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	3338      	adds	r3, #56	; 0x38
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	4413      	add	r3, r2
 80024a0:	3304      	adds	r3, #4
 80024a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	2200      	movs	r2, #0
 80024b4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	2201      	movs	r2, #1
 80024ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024bc:	7afb      	ldrb	r3, [r7, #11]
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d102      	bne.n	80024d6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024d6:	7afb      	ldrb	r3, [r7, #11]
 80024d8:	f003 030f 	and.w	r3, r3, #15
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d109      	bne.n	80024f4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	461a      	mov	r2, r3
 80024ec:	6979      	ldr	r1, [r7, #20]
 80024ee:	f002 ffb3 	bl	8005458 <USB_EP0StartXfer>
 80024f2:	e008      	b.n	8002506 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	461a      	mov	r2, r3
 8002500:	6979      	ldr	r1, [r7, #20]
 8002502:	f002 fd61 	bl	8004fc8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800251c:	78fb      	ldrb	r3, [r7, #3]
 800251e:	f003 020f 	and.w	r2, r3, #15
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	429a      	cmp	r2, r3
 8002528:	d901      	bls.n	800252e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e050      	b.n	80025d0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800252e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002532:	2b00      	cmp	r3, #0
 8002534:	da0f      	bge.n	8002556 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002536:	78fb      	ldrb	r3, [r7, #3]
 8002538:	f003 020f 	and.w	r2, r3, #15
 800253c:	4613      	mov	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	4413      	add	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	3338      	adds	r3, #56	; 0x38
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	4413      	add	r3, r2
 800254a:	3304      	adds	r3, #4
 800254c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2201      	movs	r2, #1
 8002552:	705a      	strb	r2, [r3, #1]
 8002554:	e00d      	b.n	8002572 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002556:	78fa      	ldrb	r2, [r7, #3]
 8002558:	4613      	mov	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	4413      	add	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	4413      	add	r3, r2
 8002568:	3304      	adds	r3, #4
 800256a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2201      	movs	r2, #1
 8002576:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002578:	78fb      	ldrb	r3, [r7, #3]
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	b2da      	uxtb	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800258a:	2b01      	cmp	r3, #1
 800258c:	d101      	bne.n	8002592 <HAL_PCD_EP_SetStall+0x82>
 800258e:	2302      	movs	r3, #2
 8002590:	e01e      	b.n	80025d0 <HAL_PCD_EP_SetStall+0xc0>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68f9      	ldr	r1, [r7, #12]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f003 f9f1 	bl	8005988 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025a6:	78fb      	ldrb	r3, [r7, #3]
 80025a8:	f003 030f 	and.w	r3, r3, #15
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10a      	bne.n	80025c6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	b2d9      	uxtb	r1, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025c0:	461a      	mov	r2, r3
 80025c2:	f003 fbe1 	bl	8005d88 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80025e4:	78fb      	ldrb	r3, [r7, #3]
 80025e6:	f003 020f 	and.w	r2, r3, #15
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d901      	bls.n	80025f6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e042      	b.n	800267c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	da0f      	bge.n	800261e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025fe:	78fb      	ldrb	r3, [r7, #3]
 8002600:	f003 020f 	and.w	r2, r3, #15
 8002604:	4613      	mov	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4413      	add	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	3338      	adds	r3, #56	; 0x38
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	4413      	add	r3, r2
 8002612:	3304      	adds	r3, #4
 8002614:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2201      	movs	r2, #1
 800261a:	705a      	strb	r2, [r3, #1]
 800261c:	e00f      	b.n	800263e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800261e:	78fb      	ldrb	r3, [r7, #3]
 8002620:	f003 020f 	and.w	r2, r3, #15
 8002624:	4613      	mov	r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	4413      	add	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	4413      	add	r3, r2
 8002634:	3304      	adds	r3, #4
 8002636:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002644:	78fb      	ldrb	r3, [r7, #3]
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	b2da      	uxtb	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002656:	2b01      	cmp	r3, #1
 8002658:	d101      	bne.n	800265e <HAL_PCD_EP_ClrStall+0x86>
 800265a:	2302      	movs	r3, #2
 800265c:	e00e      	b.n	800267c <HAL_PCD_EP_ClrStall+0xa4>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68f9      	ldr	r1, [r7, #12]
 800266c:	4618      	mov	r0, r3
 800266e:	f003 f9f9 	bl	8005a64 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002690:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002694:	2b00      	cmp	r3, #0
 8002696:	da0c      	bge.n	80026b2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002698:	78fb      	ldrb	r3, [r7, #3]
 800269a:	f003 020f 	and.w	r2, r3, #15
 800269e:	4613      	mov	r3, r2
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	4413      	add	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	3338      	adds	r3, #56	; 0x38
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	4413      	add	r3, r2
 80026ac:	3304      	adds	r3, #4
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	e00c      	b.n	80026cc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026b2:	78fb      	ldrb	r3, [r7, #3]
 80026b4:	f003 020f 	and.w	r2, r3, #15
 80026b8:	4613      	mov	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	4413      	add	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	4413      	add	r3, r2
 80026c8:	3304      	adds	r3, #4
 80026ca:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68f9      	ldr	r1, [r7, #12]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f003 f818 	bl	8005708 <USB_EPStopXfer>
 80026d8:	4603      	mov	r3, r0
 80026da:	72fb      	strb	r3, [r7, #11]

  return ret;
 80026dc:	7afb      	ldrb	r3, [r7, #11]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b08a      	sub	sp, #40	; 0x28
 80026ea:	af02      	add	r7, sp, #8
 80026ec:	6078      	str	r0, [r7, #4]
 80026ee:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	4613      	mov	r3, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	4413      	add	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	3338      	adds	r3, #56	; 0x38
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	4413      	add	r3, r2
 800270a:	3304      	adds	r3, #4
 800270c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6a1a      	ldr	r2, [r3, #32]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	429a      	cmp	r2, r3
 8002718:	d901      	bls.n	800271e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e06c      	b.n	80027f8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	699a      	ldr	r2, [r3, #24]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	69fa      	ldr	r2, [r7, #28]
 8002730:	429a      	cmp	r2, r3
 8002732:	d902      	bls.n	800273a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	3303      	adds	r3, #3
 800273e:	089b      	lsrs	r3, r3, #2
 8002740:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002742:	e02b      	b.n	800279c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	699a      	ldr	r2, [r3, #24]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	69fa      	ldr	r2, [r7, #28]
 8002756:	429a      	cmp	r2, r3
 8002758:	d902      	bls.n	8002760 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	3303      	adds	r3, #3
 8002764:	089b      	lsrs	r3, r3, #2
 8002766:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6919      	ldr	r1, [r3, #16]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	b2da      	uxtb	r2, r3
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002778:	b2db      	uxtb	r3, r3
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	4603      	mov	r3, r0
 800277e:	6978      	ldr	r0, [r7, #20]
 8002780:	f003 f86c 	bl	800585c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	441a      	add	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6a1a      	ldr	r2, [r3, #32]
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	441a      	add	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	015a      	lsls	r2, r3, #5
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	4413      	add	r3, r2
 80027a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d809      	bhi.n	80027c6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6a1a      	ldr	r2, [r3, #32]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d203      	bcs.n	80027c6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1be      	bne.n	8002744 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	699a      	ldr	r2, [r3, #24]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d811      	bhi.n	80027f6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	2201      	movs	r2, #1
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	43db      	mvns	r3, r3
 80027ec:	6939      	ldr	r1, [r7, #16]
 80027ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027f2:	4013      	ands	r3, r2
 80027f4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3720      	adds	r7, #32
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	333c      	adds	r3, #60	; 0x3c
 8002818:	3304      	adds	r3, #4
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	015a      	lsls	r2, r3, #5
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	4413      	add	r3, r2
 8002826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d17b      	bne.n	800292e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	2b00      	cmp	r3, #0
 800283e:	d015      	beq.n	800286c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	4a61      	ldr	r2, [pc, #388]	; (80029c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002844:	4293      	cmp	r3, r2
 8002846:	f240 80b9 	bls.w	80029bc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 80b3 	beq.w	80029bc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	015a      	lsls	r2, r3, #5
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	4413      	add	r3, r2
 800285e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002862:	461a      	mov	r2, r3
 8002864:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002868:	6093      	str	r3, [r2, #8]
 800286a:	e0a7      	b.n	80029bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	f003 0320 	and.w	r3, r3, #32
 8002872:	2b00      	cmp	r3, #0
 8002874:	d009      	beq.n	800288a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	015a      	lsls	r2, r3, #5
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	4413      	add	r3, r2
 800287e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002882:	461a      	mov	r2, r3
 8002884:	2320      	movs	r3, #32
 8002886:	6093      	str	r3, [r2, #8]
 8002888:	e098      	b.n	80029bc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002890:	2b00      	cmp	r3, #0
 8002892:	f040 8093 	bne.w	80029bc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	4a4b      	ldr	r2, [pc, #300]	; (80029c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d90f      	bls.n	80028be <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00a      	beq.n	80028be <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	015a      	lsls	r2, r3, #5
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	4413      	add	r3, r2
 80028b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028b4:	461a      	mov	r2, r3
 80028b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028ba:	6093      	str	r3, [r2, #8]
 80028bc:	e07e      	b.n	80029bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	4613      	mov	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4413      	add	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	4413      	add	r3, r2
 80028d0:	3304      	adds	r3, #4
 80028d2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	69da      	ldr	r2, [r3, #28]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	0159      	lsls	r1, r3, #5
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	440b      	add	r3, r1
 80028e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ea:	1ad2      	subs	r2, r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d114      	bne.n	8002920 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d109      	bne.n	8002912 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6818      	ldr	r0, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002908:	461a      	mov	r2, r3
 800290a:	2101      	movs	r1, #1
 800290c:	f003 fa3c 	bl	8005d88 <USB_EP0_OutStart>
 8002910:	e006      	b.n	8002920 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	691a      	ldr	r2, [r3, #16]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	441a      	add	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	b2db      	uxtb	r3, r3
 8002924:	4619      	mov	r1, r3
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f005 fcc4 	bl	80082b4 <HAL_PCD_DataOutStageCallback>
 800292c:	e046      	b.n	80029bc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	4a26      	ldr	r2, [pc, #152]	; (80029cc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d124      	bne.n	8002980 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00a      	beq.n	8002956 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	015a      	lsls	r2, r3, #5
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	4413      	add	r3, r2
 8002948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800294c:	461a      	mov	r2, r3
 800294e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002952:	6093      	str	r3, [r2, #8]
 8002954:	e032      	b.n	80029bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	f003 0320 	and.w	r3, r3, #32
 800295c:	2b00      	cmp	r3, #0
 800295e:	d008      	beq.n	8002972 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	015a      	lsls	r2, r3, #5
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	4413      	add	r3, r2
 8002968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800296c:	461a      	mov	r2, r3
 800296e:	2320      	movs	r3, #32
 8002970:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	b2db      	uxtb	r3, r3
 8002976:	4619      	mov	r1, r3
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f005 fc9b 	bl	80082b4 <HAL_PCD_DataOutStageCallback>
 800297e:	e01d      	b.n	80029bc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d114      	bne.n	80029b0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	4613      	mov	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	4413      	add	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	440b      	add	r3, r1
 8002994:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d108      	bne.n	80029b0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6818      	ldr	r0, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80029a8:	461a      	mov	r2, r3
 80029aa:	2100      	movs	r1, #0
 80029ac:	f003 f9ec 	bl	8005d88 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	4619      	mov	r1, r3
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f005 fc7c 	bl	80082b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3720      	adds	r7, #32
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	4f54300a 	.word	0x4f54300a
 80029cc:	4f54310a 	.word	0x4f54310a

080029d0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	333c      	adds	r3, #60	; 0x3c
 80029e8:	3304      	adds	r3, #4
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	015a      	lsls	r2, r3, #5
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	4413      	add	r3, r2
 80029f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	4a15      	ldr	r2, [pc, #84]	; (8002a58 <PCD_EP_OutSetupPacket_int+0x88>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d90e      	bls.n	8002a24 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d009      	beq.n	8002a24 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	015a      	lsls	r2, r3, #5
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a22:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f005 fc33 	bl	8008290 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4a0a      	ldr	r2, [pc, #40]	; (8002a58 <PCD_EP_OutSetupPacket_int+0x88>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d90c      	bls.n	8002a4c <PCD_EP_OutSetupPacket_int+0x7c>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d108      	bne.n	8002a4c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6818      	ldr	r0, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a44:	461a      	mov	r2, r3
 8002a46:	2101      	movs	r1, #1
 8002a48:	f003 f99e 	bl	8005d88 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	4f54300a 	.word	0x4f54300a

08002a5c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	70fb      	strb	r3, [r7, #3]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002a74:	78fb      	ldrb	r3, [r7, #3]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d107      	bne.n	8002a8a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002a7a:	883b      	ldrh	r3, [r7, #0]
 8002a7c:	0419      	lsls	r1, r3, #16
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	629a      	str	r2, [r3, #40]	; 0x28
 8002a88:	e028      	b.n	8002adc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a90:	0c1b      	lsrs	r3, r3, #16
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	4413      	add	r3, r2
 8002a96:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a98:	2300      	movs	r3, #0
 8002a9a:	73fb      	strb	r3, [r7, #15]
 8002a9c:	e00d      	b.n	8002aba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
 8002aa4:	3340      	adds	r3, #64	; 0x40
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	0c1b      	lsrs	r3, r3, #16
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	73fb      	strb	r3, [r7, #15]
 8002aba:	7bfa      	ldrb	r2, [r7, #15]
 8002abc:	78fb      	ldrb	r3, [r7, #3]
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d3ec      	bcc.n	8002a9e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002ac4:	883b      	ldrh	r3, [r7, #0]
 8002ac6:	0418      	lsls	r0, r3, #16
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6819      	ldr	r1, [r3, #0]
 8002acc:	78fb      	ldrb	r3, [r7, #3]
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	4302      	orrs	r2, r0
 8002ad4:	3340      	adds	r3, #64	; 0x40
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
 8002af2:	460b      	mov	r3, r1
 8002af4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	887a      	ldrh	r2, [r7, #2]
 8002afc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e314      	b.n	8003160 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2b0f      	cmp	r3, #15
 8002b3c:	d903      	bls.n	8002b46 <HAL_RCC_OscConfig+0x22>
 8002b3e:	21e6      	movs	r1, #230	; 0xe6
 8002b40:	4897      	ldr	r0, [pc, #604]	; (8002da0 <HAL_RCC_OscConfig+0x27c>)
 8002b42:	f7fd ff68 	bl	8000a16 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 8088 	beq.w	8002c64 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00d      	beq.n	8002b78 <HAL_RCC_OscConfig+0x54>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b64:	d008      	beq.n	8002b78 <HAL_RCC_OscConfig+0x54>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b6e:	d003      	beq.n	8002b78 <HAL_RCC_OscConfig+0x54>
 8002b70:	21eb      	movs	r1, #235	; 0xeb
 8002b72:	488b      	ldr	r0, [pc, #556]	; (8002da0 <HAL_RCC_OscConfig+0x27c>)
 8002b74:	f7fd ff4f 	bl	8000a16 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b78:	4b8a      	ldr	r3, [pc, #552]	; (8002da4 <HAL_RCC_OscConfig+0x280>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 030c 	and.w	r3, r3, #12
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	d00c      	beq.n	8002b9e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b84:	4b87      	ldr	r3, [pc, #540]	; (8002da4 <HAL_RCC_OscConfig+0x280>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b8c:	2b08      	cmp	r3, #8
 8002b8e:	d112      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b90:	4b84      	ldr	r3, [pc, #528]	; (8002da4 <HAL_RCC_OscConfig+0x280>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b9c:	d10b      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b9e:	4b81      	ldr	r3, [pc, #516]	; (8002da4 <HAL_RCC_OscConfig+0x280>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d05b      	beq.n	8002c62 <HAL_RCC_OscConfig+0x13e>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d157      	bne.n	8002c62 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e2d4      	b.n	8003160 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bbe:	d106      	bne.n	8002bce <HAL_RCC_OscConfig+0xaa>
 8002bc0:	4b78      	ldr	r3, [pc, #480]	; (8002da4 <HAL_RCC_OscConfig+0x280>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a77      	ldr	r2, [pc, #476]	; (8002da4 <HAL_RCC_OscConfig+0x280>)
 8002bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bca:	6013      	str	r3, [r2, #0]
 8002bcc:	e01d      	b.n	8002c0a <HAL_RCC_OscConfig+0xe6>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bd6:	d10c      	bne.n	8002bf2 <HAL_RCC_OscConfig+0xce>
 8002bd8:	4b72      	ldr	r3, [pc, #456]	; (8002da4 <HAL_RCC_OscConfig+0x280>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a71      	ldr	r2, [pc, #452]	; (8002da4 <HAL_RCC_OscConfig+0x280>)
 8002bde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002be2:	6013      	str	r3, [r2, #0]
 8002be4:	4b6f      	ldr	r3, [pc, #444]	; (8002da4 <HAL_RCC_OscConfig+0x280>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a6e      	ldr	r2, [pc, #440]	; (8002da4 <HAL_RCC_OscConfig+0x280>)
 8002bea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bee:	6013      	str	r3, [r2, #0]
 8002bf0:	e00b      	b.n	8002c0a <HAL_RCC_OscConfig+0xe6>
 8002bf2:	4b6c      	ldr	r3, [pc, #432]	; (8002da4 <HAL_RCC_OscConfig+0x280>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a6b      	ldr	r2, [pc, #428]	; (8002da4 <HAL_RCC_OscConfig+0x280>)
 8002bf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	4b69      	ldr	r3, [pc, #420]	; (8002da4 <HAL_RCC_OscConfig+0x280>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a68      	ldr	r2, [pc, #416]	; (8002da4 <HAL_RCC_OscConfig+0x280>)
 8002c04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c08:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d013      	beq.n	8002c3a <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c12:	f7fe f893 	bl	8000d3c <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c1a:	f7fe f88f 	bl	8000d3c <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b64      	cmp	r3, #100	; 0x64
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e299      	b.n	8003160 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2c:	4b5d      	ldr	r3, [pc, #372]	; (8002da4 <HAL_RCC_OscConfig+0x280>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0f0      	beq.n	8002c1a <HAL_RCC_OscConfig+0xf6>
 8002c38:	e014      	b.n	8002c64 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3a:	f7fe f87f 	bl	8000d3c <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c42:	f7fe f87b 	bl	8000d3c <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b64      	cmp	r3, #100	; 0x64
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e285      	b.n	8003160 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c54:	4b53      	ldr	r3, [pc, #332]	; (8002da4 <HAL_RCC_OscConfig+0x280>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1f0      	bne.n	8002c42 <HAL_RCC_OscConfig+0x11e>
 8002c60:	e000      	b.n	8002c64 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c62:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d079      	beq.n	8002d64 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <HAL_RCC_OscConfig+0x166>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d004      	beq.n	8002c8a <HAL_RCC_OscConfig+0x166>
 8002c80:	f240 111d 	movw	r1, #285	; 0x11d
 8002c84:	4846      	ldr	r0, [pc, #280]	; (8002da0 <HAL_RCC_OscConfig+0x27c>)
 8002c86:	f7fd fec6 	bl	8000a16 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	2b1f      	cmp	r3, #31
 8002c90:	d904      	bls.n	8002c9c <HAL_RCC_OscConfig+0x178>
 8002c92:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8002c96:	4842      	ldr	r0, [pc, #264]	; (8002da0 <HAL_RCC_OscConfig+0x27c>)
 8002c98:	f7fd febd 	bl	8000a16 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c9c:	4b41      	ldr	r3, [pc, #260]	; (8002da4 <HAL_RCC_OscConfig+0x280>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 030c 	and.w	r3, r3, #12
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00b      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ca8:	4b3e      	ldr	r3, [pc, #248]	; (8002da4 <HAL_RCC_OscConfig+0x280>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d11c      	bne.n	8002cee <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cb4:	4b3b      	ldr	r3, [pc, #236]	; (8002da4 <HAL_RCC_OscConfig+0x280>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d116      	bne.n	8002cee <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc0:	4b38      	ldr	r3, [pc, #224]	; (8002da4 <HAL_RCC_OscConfig+0x280>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d005      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x1b4>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d001      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e243      	b.n	8003160 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd8:	4b32      	ldr	r3, [pc, #200]	; (8002da4 <HAL_RCC_OscConfig+0x280>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	492f      	ldr	r1, [pc, #188]	; (8002da4 <HAL_RCC_OscConfig+0x280>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cec:	e03a      	b.n	8002d64 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d020      	beq.n	8002d38 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cf6:	4b2c      	ldr	r3, [pc, #176]	; (8002da8 <HAL_RCC_OscConfig+0x284>)
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfc:	f7fe f81e 	bl	8000d3c <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d04:	f7fe f81a 	bl	8000d3c <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e224      	b.n	8003160 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d16:	4b23      	ldr	r3, [pc, #140]	; (8002da4 <HAL_RCC_OscConfig+0x280>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0f0      	beq.n	8002d04 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d22:	4b20      	ldr	r3, [pc, #128]	; (8002da4 <HAL_RCC_OscConfig+0x280>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	491c      	ldr	r1, [pc, #112]	; (8002da4 <HAL_RCC_OscConfig+0x280>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]
 8002d36:	e015      	b.n	8002d64 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d38:	4b1b      	ldr	r3, [pc, #108]	; (8002da8 <HAL_RCC_OscConfig+0x284>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3e:	f7fd fffd 	bl	8000d3c <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d46:	f7fd fff9 	bl	8000d3c <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e203      	b.n	8003160 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d58:	4b12      	ldr	r3, [pc, #72]	; (8002da4 <HAL_RCC_OscConfig+0x280>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1f0      	bne.n	8002d46 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d045      	beq.n	8002dfc <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d008      	beq.n	8002d8a <HAL_RCC_OscConfig+0x266>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d004      	beq.n	8002d8a <HAL_RCC_OscConfig+0x266>
 8002d80:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002d84:	4806      	ldr	r0, [pc, #24]	; (8002da0 <HAL_RCC_OscConfig+0x27c>)
 8002d86:	f7fd fe46 	bl	8000a16 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d01e      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d92:	4b06      	ldr	r3, [pc, #24]	; (8002dac <HAL_RCC_OscConfig+0x288>)
 8002d94:	2201      	movs	r2, #1
 8002d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d98:	f7fd ffd0 	bl	8000d3c <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d9e:	e010      	b.n	8002dc2 <HAL_RCC_OscConfig+0x29e>
 8002da0:	0800de7c 	.word	0x0800de7c
 8002da4:	40023800 	.word	0x40023800
 8002da8:	42470000 	.word	0x42470000
 8002dac:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002db0:	f7fd ffc4 	bl	8000d3c <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e1ce      	b.n	8003160 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc2:	4b5e      	ldr	r3, [pc, #376]	; (8002f3c <HAL_RCC_OscConfig+0x418>)
 8002dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0x28c>
 8002dce:	e015      	b.n	8002dfc <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dd0:	4b5b      	ldr	r3, [pc, #364]	; (8002f40 <HAL_RCC_OscConfig+0x41c>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd6:	f7fd ffb1 	bl	8000d3c <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dde:	f7fd ffad 	bl	8000d3c <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e1b7      	b.n	8003160 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df0:	4b52      	ldr	r3, [pc, #328]	; (8002f3c <HAL_RCC_OscConfig+0x418>)
 8002df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1f0      	bne.n	8002dde <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 80b0 	beq.w	8002f6a <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00c      	beq.n	8002e30 <HAL_RCC_OscConfig+0x30c>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d008      	beq.n	8002e30 <HAL_RCC_OscConfig+0x30c>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	2b05      	cmp	r3, #5
 8002e24:	d004      	beq.n	8002e30 <HAL_RCC_OscConfig+0x30c>
 8002e26:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8002e2a:	4846      	ldr	r0, [pc, #280]	; (8002f44 <HAL_RCC_OscConfig+0x420>)
 8002e2c:	f7fd fdf3 	bl	8000a16 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e30:	4b42      	ldr	r3, [pc, #264]	; (8002f3c <HAL_RCC_OscConfig+0x418>)
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10f      	bne.n	8002e5c <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	60bb      	str	r3, [r7, #8]
 8002e40:	4b3e      	ldr	r3, [pc, #248]	; (8002f3c <HAL_RCC_OscConfig+0x418>)
 8002e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e44:	4a3d      	ldr	r2, [pc, #244]	; (8002f3c <HAL_RCC_OscConfig+0x418>)
 8002e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e4a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e4c:	4b3b      	ldr	r3, [pc, #236]	; (8002f3c <HAL_RCC_OscConfig+0x418>)
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e54:	60bb      	str	r3, [r7, #8]
 8002e56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5c:	4b3a      	ldr	r3, [pc, #232]	; (8002f48 <HAL_RCC_OscConfig+0x424>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d118      	bne.n	8002e9a <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e68:	4b37      	ldr	r3, [pc, #220]	; (8002f48 <HAL_RCC_OscConfig+0x424>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a36      	ldr	r2, [pc, #216]	; (8002f48 <HAL_RCC_OscConfig+0x424>)
 8002e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e74:	f7fd ff62 	bl	8000d3c <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e7c:	f7fd ff5e 	bl	8000d3c <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e168      	b.n	8003160 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e8e:	4b2e      	ldr	r3, [pc, #184]	; (8002f48 <HAL_RCC_OscConfig+0x424>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0f0      	beq.n	8002e7c <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d106      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x38c>
 8002ea2:	4b26      	ldr	r3, [pc, #152]	; (8002f3c <HAL_RCC_OscConfig+0x418>)
 8002ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea6:	4a25      	ldr	r2, [pc, #148]	; (8002f3c <HAL_RCC_OscConfig+0x418>)
 8002ea8:	f043 0301 	orr.w	r3, r3, #1
 8002eac:	6713      	str	r3, [r2, #112]	; 0x70
 8002eae:	e01c      	b.n	8002eea <HAL_RCC_OscConfig+0x3c6>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	2b05      	cmp	r3, #5
 8002eb6:	d10c      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x3ae>
 8002eb8:	4b20      	ldr	r3, [pc, #128]	; (8002f3c <HAL_RCC_OscConfig+0x418>)
 8002eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebc:	4a1f      	ldr	r2, [pc, #124]	; (8002f3c <HAL_RCC_OscConfig+0x418>)
 8002ebe:	f043 0304 	orr.w	r3, r3, #4
 8002ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec4:	4b1d      	ldr	r3, [pc, #116]	; (8002f3c <HAL_RCC_OscConfig+0x418>)
 8002ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec8:	4a1c      	ldr	r2, [pc, #112]	; (8002f3c <HAL_RCC_OscConfig+0x418>)
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed0:	e00b      	b.n	8002eea <HAL_RCC_OscConfig+0x3c6>
 8002ed2:	4b1a      	ldr	r3, [pc, #104]	; (8002f3c <HAL_RCC_OscConfig+0x418>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed6:	4a19      	ldr	r2, [pc, #100]	; (8002f3c <HAL_RCC_OscConfig+0x418>)
 8002ed8:	f023 0301 	bic.w	r3, r3, #1
 8002edc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ede:	4b17      	ldr	r3, [pc, #92]	; (8002f3c <HAL_RCC_OscConfig+0x418>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee2:	4a16      	ldr	r2, [pc, #88]	; (8002f3c <HAL_RCC_OscConfig+0x418>)
 8002ee4:	f023 0304 	bic.w	r3, r3, #4
 8002ee8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d015      	beq.n	8002f1e <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef2:	f7fd ff23 	bl	8000d3c <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef8:	e00a      	b.n	8002f10 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002efa:	f7fd ff1f 	bl	8000d3c <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e127      	b.n	8003160 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f10:	4b0a      	ldr	r3, [pc, #40]	; (8002f3c <HAL_RCC_OscConfig+0x418>)
 8002f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0ee      	beq.n	8002efa <HAL_RCC_OscConfig+0x3d6>
 8002f1c:	e01c      	b.n	8002f58 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f1e:	f7fd ff0d 	bl	8000d3c <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f24:	e012      	b.n	8002f4c <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f26:	f7fd ff09 	bl	8000d3c <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d909      	bls.n	8002f4c <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e111      	b.n	8003160 <HAL_RCC_OscConfig+0x63c>
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	42470e80 	.word	0x42470e80
 8002f44:	0800de7c 	.word	0x0800de7c
 8002f48:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f4c:	4b86      	ldr	r3, [pc, #536]	; (8003168 <HAL_RCC_OscConfig+0x644>)
 8002f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1e6      	bne.n	8002f26 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f58:	7dfb      	ldrb	r3, [r7, #23]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d105      	bne.n	8002f6a <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f5e:	4b82      	ldr	r3, [pc, #520]	; (8003168 <HAL_RCC_OscConfig+0x644>)
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	4a81      	ldr	r2, [pc, #516]	; (8003168 <HAL_RCC_OscConfig+0x644>)
 8002f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00c      	beq.n	8002f8c <HAL_RCC_OscConfig+0x468>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d008      	beq.n	8002f8c <HAL_RCC_OscConfig+0x468>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d004      	beq.n	8002f8c <HAL_RCC_OscConfig+0x468>
 8002f82:	f240 11cd 	movw	r1, #461	; 0x1cd
 8002f86:	4879      	ldr	r0, [pc, #484]	; (800316c <HAL_RCC_OscConfig+0x648>)
 8002f88:	f7fd fd45 	bl	8000a16 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 80e4 	beq.w	800315e <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f96:	4b74      	ldr	r3, [pc, #464]	; (8003168 <HAL_RCC_OscConfig+0x644>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 030c 	and.w	r3, r3, #12
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	f000 80a5 	beq.w	80030ee <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	f040 8089 	bne.w	80030c0 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d009      	beq.n	8002fca <HAL_RCC_OscConfig+0x4a6>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fbe:	d004      	beq.n	8002fca <HAL_RCC_OscConfig+0x4a6>
 8002fc0:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8002fc4:	4869      	ldr	r0, [pc, #420]	; (800316c <HAL_RCC_OscConfig+0x648>)
 8002fc6:	f7fd fd26 	bl	8000a16 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	2b3f      	cmp	r3, #63	; 0x3f
 8002fd0:	d904      	bls.n	8002fdc <HAL_RCC_OscConfig+0x4b8>
 8002fd2:	f240 11d7 	movw	r1, #471	; 0x1d7
 8002fd6:	4865      	ldr	r0, [pc, #404]	; (800316c <HAL_RCC_OscConfig+0x648>)
 8002fd8:	f7fd fd1d 	bl	8000a16 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	2b31      	cmp	r3, #49	; 0x31
 8002fe2:	d904      	bls.n	8002fee <HAL_RCC_OscConfig+0x4ca>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8002fec:	d904      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x4d4>
 8002fee:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8002ff2:	485e      	ldr	r0, [pc, #376]	; (800316c <HAL_RCC_OscConfig+0x648>)
 8002ff4:	f7fd fd0f 	bl	8000a16 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d010      	beq.n	8003022 <HAL_RCC_OscConfig+0x4fe>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003004:	2b04      	cmp	r3, #4
 8003006:	d00c      	beq.n	8003022 <HAL_RCC_OscConfig+0x4fe>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300c:	2b06      	cmp	r3, #6
 800300e:	d008      	beq.n	8003022 <HAL_RCC_OscConfig+0x4fe>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003014:	2b08      	cmp	r3, #8
 8003016:	d004      	beq.n	8003022 <HAL_RCC_OscConfig+0x4fe>
 8003018:	f240 11d9 	movw	r1, #473	; 0x1d9
 800301c:	4853      	ldr	r0, [pc, #332]	; (800316c <HAL_RCC_OscConfig+0x648>)
 800301e:	f7fd fcfa 	bl	8000a16 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003026:	2b01      	cmp	r3, #1
 8003028:	d903      	bls.n	8003032 <HAL_RCC_OscConfig+0x50e>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302e:	2b0f      	cmp	r3, #15
 8003030:	d904      	bls.n	800303c <HAL_RCC_OscConfig+0x518>
 8003032:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8003036:	484d      	ldr	r0, [pc, #308]	; (800316c <HAL_RCC_OscConfig+0x648>)
 8003038:	f7fd fced 	bl	8000a16 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800303c:	4b4c      	ldr	r3, [pc, #304]	; (8003170 <HAL_RCC_OscConfig+0x64c>)
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003042:	f7fd fe7b 	bl	8000d3c <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003048:	e008      	b.n	800305c <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800304a:	f7fd fe77 	bl	8000d3c <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e081      	b.n	8003160 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305c:	4b42      	ldr	r3, [pc, #264]	; (8003168 <HAL_RCC_OscConfig+0x644>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1f0      	bne.n	800304a <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	69da      	ldr	r2, [r3, #28]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	431a      	orrs	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	019b      	lsls	r3, r3, #6
 8003078:	431a      	orrs	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307e:	085b      	lsrs	r3, r3, #1
 8003080:	3b01      	subs	r3, #1
 8003082:	041b      	lsls	r3, r3, #16
 8003084:	431a      	orrs	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308a:	061b      	lsls	r3, r3, #24
 800308c:	4936      	ldr	r1, [pc, #216]	; (8003168 <HAL_RCC_OscConfig+0x644>)
 800308e:	4313      	orrs	r3, r2
 8003090:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003092:	4b37      	ldr	r3, [pc, #220]	; (8003170 <HAL_RCC_OscConfig+0x64c>)
 8003094:	2201      	movs	r2, #1
 8003096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003098:	f7fd fe50 	bl	8000d3c <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a0:	f7fd fe4c 	bl	8000d3c <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e056      	b.n	8003160 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b2:	4b2d      	ldr	r3, [pc, #180]	; (8003168 <HAL_RCC_OscConfig+0x644>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0f0      	beq.n	80030a0 <HAL_RCC_OscConfig+0x57c>
 80030be:	e04e      	b.n	800315e <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c0:	4b2b      	ldr	r3, [pc, #172]	; (8003170 <HAL_RCC_OscConfig+0x64c>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c6:	f7fd fe39 	bl	8000d3c <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030cc:	e008      	b.n	80030e0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ce:	f7fd fe35 	bl	8000d3c <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e03f      	b.n	8003160 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e0:	4b21      	ldr	r3, [pc, #132]	; (8003168 <HAL_RCC_OscConfig+0x644>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1f0      	bne.n	80030ce <HAL_RCC_OscConfig+0x5aa>
 80030ec:	e037      	b.n	800315e <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d101      	bne.n	80030fa <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e032      	b.n	8003160 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030fa:	4b1b      	ldr	r3, [pc, #108]	; (8003168 <HAL_RCC_OscConfig+0x644>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d028      	beq.n	800315a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003112:	429a      	cmp	r2, r3
 8003114:	d121      	bne.n	800315a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003120:	429a      	cmp	r2, r3
 8003122:	d11a      	bne.n	800315a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800312a:	4013      	ands	r3, r2
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003130:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003132:	4293      	cmp	r3, r2
 8003134:	d111      	bne.n	800315a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003140:	085b      	lsrs	r3, r3, #1
 8003142:	3b01      	subs	r3, #1
 8003144:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003146:	429a      	cmp	r2, r3
 8003148:	d107      	bne.n	800315a <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003154:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003156:	429a      	cmp	r2, r3
 8003158:	d001      	beq.n	800315e <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e000      	b.n	8003160 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3718      	adds	r7, #24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40023800 	.word	0x40023800
 800316c:	0800de7c 	.word	0x0800de7c
 8003170:	42470060 	.word	0x42470060

08003174 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e18c      	b.n	80034a2 <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <HAL_RCC_ClockConfig+0x24>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b0f      	cmp	r3, #15
 8003196:	d904      	bls.n	80031a2 <HAL_RCC_ClockConfig+0x2e>
 8003198:	f240 215a 	movw	r1, #602	; 0x25a
 800319c:	4887      	ldr	r0, [pc, #540]	; (80033bc <HAL_RCC_ClockConfig+0x248>)
 800319e:	f7fd fc3a 	bl	8000a16 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d031      	beq.n	800320c <HAL_RCC_ClockConfig+0x98>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d02e      	beq.n	800320c <HAL_RCC_ClockConfig+0x98>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d02b      	beq.n	800320c <HAL_RCC_ClockConfig+0x98>
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	2b03      	cmp	r3, #3
 80031b8:	d028      	beq.n	800320c <HAL_RCC_ClockConfig+0x98>
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2b04      	cmp	r3, #4
 80031be:	d025      	beq.n	800320c <HAL_RCC_ClockConfig+0x98>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	2b05      	cmp	r3, #5
 80031c4:	d022      	beq.n	800320c <HAL_RCC_ClockConfig+0x98>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2b06      	cmp	r3, #6
 80031ca:	d01f      	beq.n	800320c <HAL_RCC_ClockConfig+0x98>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	2b07      	cmp	r3, #7
 80031d0:	d01c      	beq.n	800320c <HAL_RCC_ClockConfig+0x98>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d019      	beq.n	800320c <HAL_RCC_ClockConfig+0x98>
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	2b09      	cmp	r3, #9
 80031dc:	d016      	beq.n	800320c <HAL_RCC_ClockConfig+0x98>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2b0a      	cmp	r3, #10
 80031e2:	d013      	beq.n	800320c <HAL_RCC_ClockConfig+0x98>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	2b0b      	cmp	r3, #11
 80031e8:	d010      	beq.n	800320c <HAL_RCC_ClockConfig+0x98>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b0c      	cmp	r3, #12
 80031ee:	d00d      	beq.n	800320c <HAL_RCC_ClockConfig+0x98>
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	2b0d      	cmp	r3, #13
 80031f4:	d00a      	beq.n	800320c <HAL_RCC_ClockConfig+0x98>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2b0e      	cmp	r3, #14
 80031fa:	d007      	beq.n	800320c <HAL_RCC_ClockConfig+0x98>
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	2b0f      	cmp	r3, #15
 8003200:	d004      	beq.n	800320c <HAL_RCC_ClockConfig+0x98>
 8003202:	f240 215b 	movw	r1, #603	; 0x25b
 8003206:	486d      	ldr	r0, [pc, #436]	; (80033bc <HAL_RCC_ClockConfig+0x248>)
 8003208:	f7fd fc05 	bl	8000a16 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800320c:	4b6c      	ldr	r3, [pc, #432]	; (80033c0 <HAL_RCC_ClockConfig+0x24c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 030f 	and.w	r3, r3, #15
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d90c      	bls.n	8003234 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321a:	4b69      	ldr	r3, [pc, #420]	; (80033c0 <HAL_RCC_ClockConfig+0x24c>)
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003222:	4b67      	ldr	r3, [pc, #412]	; (80033c0 <HAL_RCC_ClockConfig+0x24c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d001      	beq.n	8003234 <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e136      	b.n	80034a2 <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d049      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800324c:	4b5d      	ldr	r3, [pc, #372]	; (80033c4 <HAL_RCC_ClockConfig+0x250>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	4a5c      	ldr	r2, [pc, #368]	; (80033c4 <HAL_RCC_ClockConfig+0x250>)
 8003252:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003256:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0308 	and.w	r3, r3, #8
 8003260:	2b00      	cmp	r3, #0
 8003262:	d005      	beq.n	8003270 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003264:	4b57      	ldr	r3, [pc, #348]	; (80033c4 <HAL_RCC_ClockConfig+0x250>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	4a56      	ldr	r2, [pc, #344]	; (80033c4 <HAL_RCC_ClockConfig+0x250>)
 800326a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800326e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d024      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x14e>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	2b80      	cmp	r3, #128	; 0x80
 800327e:	d020      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x14e>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	2b90      	cmp	r3, #144	; 0x90
 8003286:	d01c      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x14e>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	2ba0      	cmp	r3, #160	; 0xa0
 800328e:	d018      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x14e>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2bb0      	cmp	r3, #176	; 0xb0
 8003296:	d014      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x14e>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	2bc0      	cmp	r3, #192	; 0xc0
 800329e:	d010      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x14e>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	2bd0      	cmp	r3, #208	; 0xd0
 80032a6:	d00c      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x14e>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	2be0      	cmp	r3, #224	; 0xe0
 80032ae:	d008      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x14e>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	2bf0      	cmp	r3, #240	; 0xf0
 80032b6:	d004      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x14e>
 80032b8:	f240 217e 	movw	r1, #638	; 0x27e
 80032bc:	483f      	ldr	r0, [pc, #252]	; (80033bc <HAL_RCC_ClockConfig+0x248>)
 80032be:	f7fd fbaa 	bl	8000a16 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c2:	4b40      	ldr	r3, [pc, #256]	; (80033c4 <HAL_RCC_ClockConfig+0x250>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	493d      	ldr	r1, [pc, #244]	; (80033c4 <HAL_RCC_ClockConfig+0x250>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d059      	beq.n	8003394 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d010      	beq.n	800330a <HAL_RCC_ClockConfig+0x196>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d00c      	beq.n	800330a <HAL_RCC_ClockConfig+0x196>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d008      	beq.n	800330a <HAL_RCC_ClockConfig+0x196>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b03      	cmp	r3, #3
 80032fe:	d004      	beq.n	800330a <HAL_RCC_ClockConfig+0x196>
 8003300:	f240 2185 	movw	r1, #645	; 0x285
 8003304:	482d      	ldr	r0, [pc, #180]	; (80033bc <HAL_RCC_ClockConfig+0x248>)
 8003306:	f7fd fb86 	bl	8000a16 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d107      	bne.n	8003322 <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003312:	4b2c      	ldr	r3, [pc, #176]	; (80033c4 <HAL_RCC_ClockConfig+0x250>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d119      	bne.n	8003352 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e0bf      	b.n	80034a2 <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b02      	cmp	r3, #2
 8003328:	d003      	beq.n	8003332 <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800332e:	2b03      	cmp	r3, #3
 8003330:	d107      	bne.n	8003342 <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003332:	4b24      	ldr	r3, [pc, #144]	; (80033c4 <HAL_RCC_ClockConfig+0x250>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d109      	bne.n	8003352 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e0af      	b.n	80034a2 <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003342:	4b20      	ldr	r3, [pc, #128]	; (80033c4 <HAL_RCC_ClockConfig+0x250>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e0a7      	b.n	80034a2 <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003352:	4b1c      	ldr	r3, [pc, #112]	; (80033c4 <HAL_RCC_ClockConfig+0x250>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f023 0203 	bic.w	r2, r3, #3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	4919      	ldr	r1, [pc, #100]	; (80033c4 <HAL_RCC_ClockConfig+0x250>)
 8003360:	4313      	orrs	r3, r2
 8003362:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003364:	f7fd fcea 	bl	8000d3c <HAL_GetTick>
 8003368:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336a:	e00a      	b.n	8003382 <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800336c:	f7fd fce6 	bl	8000d3c <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	f241 3288 	movw	r2, #5000	; 0x1388
 800337a:	4293      	cmp	r3, r2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e08f      	b.n	80034a2 <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003382:	4b10      	ldr	r3, [pc, #64]	; (80033c4 <HAL_RCC_ClockConfig+0x250>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 020c 	and.w	r2, r3, #12
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	429a      	cmp	r2, r3
 8003392:	d1eb      	bne.n	800336c <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003394:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <HAL_RCC_ClockConfig+0x24c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 030f 	and.w	r3, r3, #15
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d212      	bcs.n	80033c8 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a2:	4b07      	ldr	r3, [pc, #28]	; (80033c0 <HAL_RCC_ClockConfig+0x24c>)
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033aa:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <HAL_RCC_ClockConfig+0x24c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 030f 	and.w	r3, r3, #15
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d007      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e072      	b.n	80034a2 <HAL_RCC_ClockConfig+0x32e>
 80033bc:	0800de7c 	.word	0x0800de7c
 80033c0:	40023c00 	.word	0x40023c00
 80033c4:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d025      	beq.n	8003420 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d018      	beq.n	800340e <HAL_RCC_ClockConfig+0x29a>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033e4:	d013      	beq.n	800340e <HAL_RCC_ClockConfig+0x29a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80033ee:	d00e      	beq.n	800340e <HAL_RCC_ClockConfig+0x29a>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80033f8:	d009      	beq.n	800340e <HAL_RCC_ClockConfig+0x29a>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8003402:	d004      	beq.n	800340e <HAL_RCC_ClockConfig+0x29a>
 8003404:	f240 21c3 	movw	r1, #707	; 0x2c3
 8003408:	4828      	ldr	r0, [pc, #160]	; (80034ac <HAL_RCC_ClockConfig+0x338>)
 800340a:	f7fd fb04 	bl	8000a16 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800340e:	4b28      	ldr	r3, [pc, #160]	; (80034b0 <HAL_RCC_ClockConfig+0x33c>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	4925      	ldr	r1, [pc, #148]	; (80034b0 <HAL_RCC_ClockConfig+0x33c>)
 800341c:	4313      	orrs	r3, r2
 800341e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	2b00      	cmp	r3, #0
 800342a:	d026      	beq.n	800347a <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d018      	beq.n	8003466 <HAL_RCC_ClockConfig+0x2f2>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800343c:	d013      	beq.n	8003466 <HAL_RCC_ClockConfig+0x2f2>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003446:	d00e      	beq.n	8003466 <HAL_RCC_ClockConfig+0x2f2>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003450:	d009      	beq.n	8003466 <HAL_RCC_ClockConfig+0x2f2>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800345a:	d004      	beq.n	8003466 <HAL_RCC_ClockConfig+0x2f2>
 800345c:	f240 21ca 	movw	r1, #714	; 0x2ca
 8003460:	4812      	ldr	r0, [pc, #72]	; (80034ac <HAL_RCC_ClockConfig+0x338>)
 8003462:	f7fd fad8 	bl	8000a16 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003466:	4b12      	ldr	r3, [pc, #72]	; (80034b0 <HAL_RCC_ClockConfig+0x33c>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	490e      	ldr	r1, [pc, #56]	; (80034b0 <HAL_RCC_ClockConfig+0x33c>)
 8003476:	4313      	orrs	r3, r2
 8003478:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800347a:	f000 f821 	bl	80034c0 <HAL_RCC_GetSysClockFreq>
 800347e:	4602      	mov	r2, r0
 8003480:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <HAL_RCC_ClockConfig+0x33c>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	091b      	lsrs	r3, r3, #4
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	490a      	ldr	r1, [pc, #40]	; (80034b4 <HAL_RCC_ClockConfig+0x340>)
 800348c:	5ccb      	ldrb	r3, [r1, r3]
 800348e:	fa22 f303 	lsr.w	r3, r2, r3
 8003492:	4a09      	ldr	r2, [pc, #36]	; (80034b8 <HAL_RCC_ClockConfig+0x344>)
 8003494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003496:	4b09      	ldr	r3, [pc, #36]	; (80034bc <HAL_RCC_ClockConfig+0x348>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7fd fb36 	bl	8000b0c <HAL_InitTick>

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	0800de7c 	.word	0x0800de7c
 80034b0:	40023800 	.word	0x40023800
 80034b4:	0800e048 	.word	0x0800e048
 80034b8:	20000000 	.word	0x20000000
 80034bc:	20000004 	.word	0x20000004

080034c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034c4:	b094      	sub	sp, #80	; 0x50
 80034c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	647b      	str	r3, [r7, #68]	; 0x44
 80034cc:	2300      	movs	r3, #0
 80034ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034d0:	2300      	movs	r3, #0
 80034d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034d8:	4b79      	ldr	r3, [pc, #484]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f003 030c 	and.w	r3, r3, #12
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d00d      	beq.n	8003500 <HAL_RCC_GetSysClockFreq+0x40>
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	f200 80e1 	bhi.w	80036ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d002      	beq.n	80034f4 <HAL_RCC_GetSysClockFreq+0x34>
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	d003      	beq.n	80034fa <HAL_RCC_GetSysClockFreq+0x3a>
 80034f2:	e0db      	b.n	80036ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034f4:	4b73      	ldr	r3, [pc, #460]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80034f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80034f8:	e0db      	b.n	80036b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034fa:	4b73      	ldr	r3, [pc, #460]	; (80036c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80034fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034fe:	e0d8      	b.n	80036b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003500:	4b6f      	ldr	r3, [pc, #444]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003508:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800350a:	4b6d      	ldr	r3, [pc, #436]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d063      	beq.n	80035de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003516:	4b6a      	ldr	r3, [pc, #424]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	099b      	lsrs	r3, r3, #6
 800351c:	2200      	movs	r2, #0
 800351e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003520:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003528:	633b      	str	r3, [r7, #48]	; 0x30
 800352a:	2300      	movs	r3, #0
 800352c:	637b      	str	r3, [r7, #52]	; 0x34
 800352e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003532:	4622      	mov	r2, r4
 8003534:	462b      	mov	r3, r5
 8003536:	f04f 0000 	mov.w	r0, #0
 800353a:	f04f 0100 	mov.w	r1, #0
 800353e:	0159      	lsls	r1, r3, #5
 8003540:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003544:	0150      	lsls	r0, r2, #5
 8003546:	4602      	mov	r2, r0
 8003548:	460b      	mov	r3, r1
 800354a:	4621      	mov	r1, r4
 800354c:	1a51      	subs	r1, r2, r1
 800354e:	6139      	str	r1, [r7, #16]
 8003550:	4629      	mov	r1, r5
 8003552:	eb63 0301 	sbc.w	r3, r3, r1
 8003556:	617b      	str	r3, [r7, #20]
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	f04f 0300 	mov.w	r3, #0
 8003560:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003564:	4659      	mov	r1, fp
 8003566:	018b      	lsls	r3, r1, #6
 8003568:	4651      	mov	r1, sl
 800356a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800356e:	4651      	mov	r1, sl
 8003570:	018a      	lsls	r2, r1, #6
 8003572:	4651      	mov	r1, sl
 8003574:	ebb2 0801 	subs.w	r8, r2, r1
 8003578:	4659      	mov	r1, fp
 800357a:	eb63 0901 	sbc.w	r9, r3, r1
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	f04f 0300 	mov.w	r3, #0
 8003586:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800358a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800358e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003592:	4690      	mov	r8, r2
 8003594:	4699      	mov	r9, r3
 8003596:	4623      	mov	r3, r4
 8003598:	eb18 0303 	adds.w	r3, r8, r3
 800359c:	60bb      	str	r3, [r7, #8]
 800359e:	462b      	mov	r3, r5
 80035a0:	eb49 0303 	adc.w	r3, r9, r3
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	f04f 0300 	mov.w	r3, #0
 80035ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035b2:	4629      	mov	r1, r5
 80035b4:	024b      	lsls	r3, r1, #9
 80035b6:	4621      	mov	r1, r4
 80035b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035bc:	4621      	mov	r1, r4
 80035be:	024a      	lsls	r2, r1, #9
 80035c0:	4610      	mov	r0, r2
 80035c2:	4619      	mov	r1, r3
 80035c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035c6:	2200      	movs	r2, #0
 80035c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035d0:	f7fc fe58 	bl	8000284 <__aeabi_uldivmod>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4613      	mov	r3, r2
 80035da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035dc:	e058      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035de:	4b38      	ldr	r3, [pc, #224]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	099b      	lsrs	r3, r3, #6
 80035e4:	2200      	movs	r2, #0
 80035e6:	4618      	mov	r0, r3
 80035e8:	4611      	mov	r1, r2
 80035ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035ee:	623b      	str	r3, [r7, #32]
 80035f0:	2300      	movs	r3, #0
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24
 80035f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035f8:	4642      	mov	r2, r8
 80035fa:	464b      	mov	r3, r9
 80035fc:	f04f 0000 	mov.w	r0, #0
 8003600:	f04f 0100 	mov.w	r1, #0
 8003604:	0159      	lsls	r1, r3, #5
 8003606:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800360a:	0150      	lsls	r0, r2, #5
 800360c:	4602      	mov	r2, r0
 800360e:	460b      	mov	r3, r1
 8003610:	4641      	mov	r1, r8
 8003612:	ebb2 0a01 	subs.w	sl, r2, r1
 8003616:	4649      	mov	r1, r9
 8003618:	eb63 0b01 	sbc.w	fp, r3, r1
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	f04f 0300 	mov.w	r3, #0
 8003624:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003628:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800362c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003630:	ebb2 040a 	subs.w	r4, r2, sl
 8003634:	eb63 050b 	sbc.w	r5, r3, fp
 8003638:	f04f 0200 	mov.w	r2, #0
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	00eb      	lsls	r3, r5, #3
 8003642:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003646:	00e2      	lsls	r2, r4, #3
 8003648:	4614      	mov	r4, r2
 800364a:	461d      	mov	r5, r3
 800364c:	4643      	mov	r3, r8
 800364e:	18e3      	adds	r3, r4, r3
 8003650:	603b      	str	r3, [r7, #0]
 8003652:	464b      	mov	r3, r9
 8003654:	eb45 0303 	adc.w	r3, r5, r3
 8003658:	607b      	str	r3, [r7, #4]
 800365a:	f04f 0200 	mov.w	r2, #0
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003666:	4629      	mov	r1, r5
 8003668:	028b      	lsls	r3, r1, #10
 800366a:	4621      	mov	r1, r4
 800366c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003670:	4621      	mov	r1, r4
 8003672:	028a      	lsls	r2, r1, #10
 8003674:	4610      	mov	r0, r2
 8003676:	4619      	mov	r1, r3
 8003678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800367a:	2200      	movs	r2, #0
 800367c:	61bb      	str	r3, [r7, #24]
 800367e:	61fa      	str	r2, [r7, #28]
 8003680:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003684:	f7fc fdfe 	bl	8000284 <__aeabi_uldivmod>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4613      	mov	r3, r2
 800368e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003690:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	0c1b      	lsrs	r3, r3, #16
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	3301      	adds	r3, #1
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80036a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036aa:	e002      	b.n	80036b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036ac:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80036ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3750      	adds	r7, #80	; 0x50
 80036b8:	46bd      	mov	sp, r7
 80036ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036be:	bf00      	nop
 80036c0:	40023800 	.word	0x40023800
 80036c4:	00f42400 	.word	0x00f42400
 80036c8:	007a1200 	.word	0x007a1200

080036cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036d0:	4b03      	ldr	r3, [pc, #12]	; (80036e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80036d2:	681b      	ldr	r3, [r3, #0]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	20000000 	.word	0x20000000

080036e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036e8:	f7ff fff0 	bl	80036cc <HAL_RCC_GetHCLKFreq>
 80036ec:	4602      	mov	r2, r0
 80036ee:	4b05      	ldr	r3, [pc, #20]	; (8003704 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	0a9b      	lsrs	r3, r3, #10
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	4903      	ldr	r1, [pc, #12]	; (8003708 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036fa:	5ccb      	ldrb	r3, [r1, r3]
 80036fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003700:	4618      	mov	r0, r3
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40023800 	.word	0x40023800
 8003708:	0800e058 	.word	0x0800e058

0800370c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003710:	f7ff ffdc 	bl	80036cc <HAL_RCC_GetHCLKFreq>
 8003714:	4602      	mov	r2, r0
 8003716:	4b05      	ldr	r3, [pc, #20]	; (800372c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	0b5b      	lsrs	r3, r3, #13
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	4903      	ldr	r1, [pc, #12]	; (8003730 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003722:	5ccb      	ldrb	r3, [r1, r3]
 8003724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003728:	4618      	mov	r0, r3
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40023800 	.word	0x40023800
 8003730:	0800e058 	.word	0x0800e058

08003734 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	220f      	movs	r2, #15
 8003742:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003744:	4b12      	ldr	r3, [pc, #72]	; (8003790 <HAL_RCC_GetClockConfig+0x5c>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 0203 	and.w	r2, r3, #3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003750:	4b0f      	ldr	r3, [pc, #60]	; (8003790 <HAL_RCC_GetClockConfig+0x5c>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800375c:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <HAL_RCC_GetClockConfig+0x5c>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003768:	4b09      	ldr	r3, [pc, #36]	; (8003790 <HAL_RCC_GetClockConfig+0x5c>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	08db      	lsrs	r3, r3, #3
 800376e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003776:	4b07      	ldr	r3, [pc, #28]	; (8003794 <HAL_RCC_GetClockConfig+0x60>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 020f 	and.w	r2, r3, #15
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	601a      	str	r2, [r3, #0]
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	40023800 	.word	0x40023800
 8003794:	40023c00 	.word	0x40023c00

08003798 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e0c5      	b.n	8003936 <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a64      	ldr	r2, [pc, #400]	; (8003940 <HAL_TIM_Base_Init+0x1a8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d045      	beq.n	8003840 <HAL_TIM_Base_Init+0xa8>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037bc:	d040      	beq.n	8003840 <HAL_TIM_Base_Init+0xa8>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a60      	ldr	r2, [pc, #384]	; (8003944 <HAL_TIM_Base_Init+0x1ac>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d03b      	beq.n	8003840 <HAL_TIM_Base_Init+0xa8>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a5e      	ldr	r2, [pc, #376]	; (8003948 <HAL_TIM_Base_Init+0x1b0>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d036      	beq.n	8003840 <HAL_TIM_Base_Init+0xa8>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a5d      	ldr	r2, [pc, #372]	; (800394c <HAL_TIM_Base_Init+0x1b4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d031      	beq.n	8003840 <HAL_TIM_Base_Init+0xa8>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a5b      	ldr	r2, [pc, #364]	; (8003950 <HAL_TIM_Base_Init+0x1b8>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d02c      	beq.n	8003840 <HAL_TIM_Base_Init+0xa8>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a5a      	ldr	r2, [pc, #360]	; (8003954 <HAL_TIM_Base_Init+0x1bc>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d027      	beq.n	8003840 <HAL_TIM_Base_Init+0xa8>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a58      	ldr	r2, [pc, #352]	; (8003958 <HAL_TIM_Base_Init+0x1c0>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d022      	beq.n	8003840 <HAL_TIM_Base_Init+0xa8>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a57      	ldr	r2, [pc, #348]	; (800395c <HAL_TIM_Base_Init+0x1c4>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d01d      	beq.n	8003840 <HAL_TIM_Base_Init+0xa8>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a55      	ldr	r2, [pc, #340]	; (8003960 <HAL_TIM_Base_Init+0x1c8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d018      	beq.n	8003840 <HAL_TIM_Base_Init+0xa8>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a54      	ldr	r2, [pc, #336]	; (8003964 <HAL_TIM_Base_Init+0x1cc>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d013      	beq.n	8003840 <HAL_TIM_Base_Init+0xa8>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a52      	ldr	r2, [pc, #328]	; (8003968 <HAL_TIM_Base_Init+0x1d0>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d00e      	beq.n	8003840 <HAL_TIM_Base_Init+0xa8>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a51      	ldr	r2, [pc, #324]	; (800396c <HAL_TIM_Base_Init+0x1d4>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d009      	beq.n	8003840 <HAL_TIM_Base_Init+0xa8>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a4f      	ldr	r2, [pc, #316]	; (8003970 <HAL_TIM_Base_Init+0x1d8>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d004      	beq.n	8003840 <HAL_TIM_Base_Init+0xa8>
 8003836:	f240 1113 	movw	r1, #275	; 0x113
 800383a:	484e      	ldr	r0, [pc, #312]	; (8003974 <HAL_TIM_Base_Init+0x1dc>)
 800383c:	f7fd f8eb 	bl	8000a16 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d014      	beq.n	8003872 <HAL_TIM_Base_Init+0xda>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	2b10      	cmp	r3, #16
 800384e:	d010      	beq.n	8003872 <HAL_TIM_Base_Init+0xda>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2b20      	cmp	r3, #32
 8003856:	d00c      	beq.n	8003872 <HAL_TIM_Base_Init+0xda>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	2b40      	cmp	r3, #64	; 0x40
 800385e:	d008      	beq.n	8003872 <HAL_TIM_Base_Init+0xda>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	2b60      	cmp	r3, #96	; 0x60
 8003866:	d004      	beq.n	8003872 <HAL_TIM_Base_Init+0xda>
 8003868:	f44f 718a 	mov.w	r1, #276	; 0x114
 800386c:	4841      	ldr	r0, [pc, #260]	; (8003974 <HAL_TIM_Base_Init+0x1dc>)
 800386e:	f7fd f8d2 	bl	8000a16 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00e      	beq.n	8003898 <HAL_TIM_Base_Init+0x100>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003882:	d009      	beq.n	8003898 <HAL_TIM_Base_Init+0x100>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800388c:	d004      	beq.n	8003898 <HAL_TIM_Base_Init+0x100>
 800388e:	f240 1115 	movw	r1, #277	; 0x115
 8003892:	4838      	ldr	r0, [pc, #224]	; (8003974 <HAL_TIM_Base_Init+0x1dc>)
 8003894:	f7fd f8bf 	bl	8000a16 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d008      	beq.n	80038b2 <HAL_TIM_Base_Init+0x11a>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	2b80      	cmp	r3, #128	; 0x80
 80038a6:	d004      	beq.n	80038b2 <HAL_TIM_Base_Init+0x11a>
 80038a8:	f44f 718b 	mov.w	r1, #278	; 0x116
 80038ac:	4831      	ldr	r0, [pc, #196]	; (8003974 <HAL_TIM_Base_Init+0x1dc>)
 80038ae:	f7fd f8b2 	bl	8000a16 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d106      	bne.n	80038cc <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f856 	bl	8003978 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3304      	adds	r3, #4
 80038dc:	4619      	mov	r1, r3
 80038de:	4610      	mov	r0, r2
 80038e0:	f000 fa4a 	bl	8003d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	40010000 	.word	0x40010000
 8003944:	40000400 	.word	0x40000400
 8003948:	40000800 	.word	0x40000800
 800394c:	40000c00 	.word	0x40000c00
 8003950:	40001000 	.word	0x40001000
 8003954:	40001400 	.word	0x40001400
 8003958:	40010400 	.word	0x40010400
 800395c:	40014000 	.word	0x40014000
 8003960:	40014400 	.word	0x40014400
 8003964:	40014800 	.word	0x40014800
 8003968:	40001800 	.word	0x40001800
 800396c:	40001c00 	.word	0x40001c00
 8003970:	40002000 	.word	0x40002000
 8003974:	0800deb4 	.word	0x0800deb4

08003978 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a51      	ldr	r2, [pc, #324]	; (8003ae0 <HAL_TIM_Base_Start_IT+0x154>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d045      	beq.n	8003a2a <HAL_TIM_Base_Start_IT+0x9e>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a6:	d040      	beq.n	8003a2a <HAL_TIM_Base_Start_IT+0x9e>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a4d      	ldr	r2, [pc, #308]	; (8003ae4 <HAL_TIM_Base_Start_IT+0x158>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d03b      	beq.n	8003a2a <HAL_TIM_Base_Start_IT+0x9e>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a4c      	ldr	r2, [pc, #304]	; (8003ae8 <HAL_TIM_Base_Start_IT+0x15c>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d036      	beq.n	8003a2a <HAL_TIM_Base_Start_IT+0x9e>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a4a      	ldr	r2, [pc, #296]	; (8003aec <HAL_TIM_Base_Start_IT+0x160>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d031      	beq.n	8003a2a <HAL_TIM_Base_Start_IT+0x9e>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a49      	ldr	r2, [pc, #292]	; (8003af0 <HAL_TIM_Base_Start_IT+0x164>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d02c      	beq.n	8003a2a <HAL_TIM_Base_Start_IT+0x9e>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a47      	ldr	r2, [pc, #284]	; (8003af4 <HAL_TIM_Base_Start_IT+0x168>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d027      	beq.n	8003a2a <HAL_TIM_Base_Start_IT+0x9e>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a46      	ldr	r2, [pc, #280]	; (8003af8 <HAL_TIM_Base_Start_IT+0x16c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d022      	beq.n	8003a2a <HAL_TIM_Base_Start_IT+0x9e>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a44      	ldr	r2, [pc, #272]	; (8003afc <HAL_TIM_Base_Start_IT+0x170>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d01d      	beq.n	8003a2a <HAL_TIM_Base_Start_IT+0x9e>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a43      	ldr	r2, [pc, #268]	; (8003b00 <HAL_TIM_Base_Start_IT+0x174>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d018      	beq.n	8003a2a <HAL_TIM_Base_Start_IT+0x9e>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a41      	ldr	r2, [pc, #260]	; (8003b04 <HAL_TIM_Base_Start_IT+0x178>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d013      	beq.n	8003a2a <HAL_TIM_Base_Start_IT+0x9e>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a40      	ldr	r2, [pc, #256]	; (8003b08 <HAL_TIM_Base_Start_IT+0x17c>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d00e      	beq.n	8003a2a <HAL_TIM_Base_Start_IT+0x9e>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a3e      	ldr	r2, [pc, #248]	; (8003b0c <HAL_TIM_Base_Start_IT+0x180>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d009      	beq.n	8003a2a <HAL_TIM_Base_Start_IT+0x9e>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a3d      	ldr	r2, [pc, #244]	; (8003b10 <HAL_TIM_Base_Start_IT+0x184>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d004      	beq.n	8003a2a <HAL_TIM_Base_Start_IT+0x9e>
 8003a20:	f240 11cf 	movw	r1, #463	; 0x1cf
 8003a24:	483b      	ldr	r0, [pc, #236]	; (8003b14 <HAL_TIM_Base_Start_IT+0x188>)
 8003a26:	f7fc fff6 	bl	8000a16 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d001      	beq.n	8003a3a <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e04e      	b.n	8003ad8 <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68da      	ldr	r2, [r3, #12]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f042 0201 	orr.w	r2, r2, #1
 8003a50:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a22      	ldr	r2, [pc, #136]	; (8003ae0 <HAL_TIM_Base_Start_IT+0x154>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d022      	beq.n	8003aa2 <HAL_TIM_Base_Start_IT+0x116>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a64:	d01d      	beq.n	8003aa2 <HAL_TIM_Base_Start_IT+0x116>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a1e      	ldr	r2, [pc, #120]	; (8003ae4 <HAL_TIM_Base_Start_IT+0x158>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d018      	beq.n	8003aa2 <HAL_TIM_Base_Start_IT+0x116>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a1c      	ldr	r2, [pc, #112]	; (8003ae8 <HAL_TIM_Base_Start_IT+0x15c>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d013      	beq.n	8003aa2 <HAL_TIM_Base_Start_IT+0x116>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a1b      	ldr	r2, [pc, #108]	; (8003aec <HAL_TIM_Base_Start_IT+0x160>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d00e      	beq.n	8003aa2 <HAL_TIM_Base_Start_IT+0x116>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a1b      	ldr	r2, [pc, #108]	; (8003af8 <HAL_TIM_Base_Start_IT+0x16c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d009      	beq.n	8003aa2 <HAL_TIM_Base_Start_IT+0x116>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a1a      	ldr	r2, [pc, #104]	; (8003afc <HAL_TIM_Base_Start_IT+0x170>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d004      	beq.n	8003aa2 <HAL_TIM_Base_Start_IT+0x116>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a1a      	ldr	r2, [pc, #104]	; (8003b08 <HAL_TIM_Base_Start_IT+0x17c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d111      	bne.n	8003ac6 <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 0307 	and.w	r3, r3, #7
 8003aac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2b06      	cmp	r3, #6
 8003ab2:	d010      	beq.n	8003ad6 <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 0201 	orr.w	r2, r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac4:	e007      	b.n	8003ad6 <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f042 0201 	orr.w	r2, r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40010000 	.word	0x40010000
 8003ae4:	40000400 	.word	0x40000400
 8003ae8:	40000800 	.word	0x40000800
 8003aec:	40000c00 	.word	0x40000c00
 8003af0:	40001000 	.word	0x40001000
 8003af4:	40001400 	.word	0x40001400
 8003af8:	40010400 	.word	0x40010400
 8003afc:	40014000 	.word	0x40014000
 8003b00:	40014400 	.word	0x40014400
 8003b04:	40014800 	.word	0x40014800
 8003b08:	40001800 	.word	0x40001800
 8003b0c:	40001c00 	.word	0x40001c00
 8003b10:	40002000 	.word	0x40002000
 8003b14:	0800deb4 	.word	0x0800deb4

08003b18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d122      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d11b      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f06f 0202 	mvn.w	r2, #2
 8003b44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f8ee 	bl	8003d3c <HAL_TIM_IC_CaptureCallback>
 8003b60:	e005      	b.n	8003b6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f8e0 	bl	8003d28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f8f1 	bl	8003d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f003 0304 	and.w	r3, r3, #4
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d122      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b04      	cmp	r3, #4
 8003b8e:	d11b      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f06f 0204 	mvn.w	r2, #4
 8003b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f8c4 	bl	8003d3c <HAL_TIM_IC_CaptureCallback>
 8003bb4:	e005      	b.n	8003bc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f8b6 	bl	8003d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f8c7 	bl	8003d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b08      	cmp	r3, #8
 8003bd4:	d122      	bne.n	8003c1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f003 0308 	and.w	r3, r3, #8
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d11b      	bne.n	8003c1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f06f 0208 	mvn.w	r2, #8
 8003bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2204      	movs	r2, #4
 8003bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f89a 	bl	8003d3c <HAL_TIM_IC_CaptureCallback>
 8003c08:	e005      	b.n	8003c16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f88c 	bl	8003d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f89d 	bl	8003d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	f003 0310 	and.w	r3, r3, #16
 8003c26:	2b10      	cmp	r3, #16
 8003c28:	d122      	bne.n	8003c70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f003 0310 	and.w	r3, r3, #16
 8003c34:	2b10      	cmp	r3, #16
 8003c36:	d11b      	bne.n	8003c70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f06f 0210 	mvn.w	r2, #16
 8003c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2208      	movs	r2, #8
 8003c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f870 	bl	8003d3c <HAL_TIM_IC_CaptureCallback>
 8003c5c:	e005      	b.n	8003c6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f862 	bl	8003d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f873 	bl	8003d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d10e      	bne.n	8003c9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d107      	bne.n	8003c9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f06f 0201 	mvn.w	r2, #1
 8003c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7fc fea6 	bl	80009e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca6:	2b80      	cmp	r3, #128	; 0x80
 8003ca8:	d10e      	bne.n	8003cc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb4:	2b80      	cmp	r3, #128	; 0x80
 8003cb6:	d107      	bne.n	8003cc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f902 	bl	8003ecc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd2:	2b40      	cmp	r3, #64	; 0x40
 8003cd4:	d10e      	bne.n	8003cf4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce0:	2b40      	cmp	r3, #64	; 0x40
 8003ce2:	d107      	bne.n	8003cf4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f838 	bl	8003d64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	f003 0320 	and.w	r3, r3, #32
 8003cfe:	2b20      	cmp	r3, #32
 8003d00:	d10e      	bne.n	8003d20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f003 0320 	and.w	r3, r3, #32
 8003d0c:	2b20      	cmp	r3, #32
 8003d0e:	d107      	bne.n	8003d20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f06f 0220 	mvn.w	r2, #32
 8003d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f8cc 	bl	8003eb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d20:	bf00      	nop
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a40      	ldr	r2, [pc, #256]	; (8003e8c <TIM_Base_SetConfig+0x114>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d013      	beq.n	8003db8 <TIM_Base_SetConfig+0x40>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d96:	d00f      	beq.n	8003db8 <TIM_Base_SetConfig+0x40>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a3d      	ldr	r2, [pc, #244]	; (8003e90 <TIM_Base_SetConfig+0x118>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d00b      	beq.n	8003db8 <TIM_Base_SetConfig+0x40>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a3c      	ldr	r2, [pc, #240]	; (8003e94 <TIM_Base_SetConfig+0x11c>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d007      	beq.n	8003db8 <TIM_Base_SetConfig+0x40>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a3b      	ldr	r2, [pc, #236]	; (8003e98 <TIM_Base_SetConfig+0x120>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d003      	beq.n	8003db8 <TIM_Base_SetConfig+0x40>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a3a      	ldr	r2, [pc, #232]	; (8003e9c <TIM_Base_SetConfig+0x124>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d108      	bne.n	8003dca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a2f      	ldr	r2, [pc, #188]	; (8003e8c <TIM_Base_SetConfig+0x114>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d02b      	beq.n	8003e2a <TIM_Base_SetConfig+0xb2>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd8:	d027      	beq.n	8003e2a <TIM_Base_SetConfig+0xb2>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a2c      	ldr	r2, [pc, #176]	; (8003e90 <TIM_Base_SetConfig+0x118>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d023      	beq.n	8003e2a <TIM_Base_SetConfig+0xb2>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a2b      	ldr	r2, [pc, #172]	; (8003e94 <TIM_Base_SetConfig+0x11c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d01f      	beq.n	8003e2a <TIM_Base_SetConfig+0xb2>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a2a      	ldr	r2, [pc, #168]	; (8003e98 <TIM_Base_SetConfig+0x120>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d01b      	beq.n	8003e2a <TIM_Base_SetConfig+0xb2>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a29      	ldr	r2, [pc, #164]	; (8003e9c <TIM_Base_SetConfig+0x124>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d017      	beq.n	8003e2a <TIM_Base_SetConfig+0xb2>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a28      	ldr	r2, [pc, #160]	; (8003ea0 <TIM_Base_SetConfig+0x128>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d013      	beq.n	8003e2a <TIM_Base_SetConfig+0xb2>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a27      	ldr	r2, [pc, #156]	; (8003ea4 <TIM_Base_SetConfig+0x12c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d00f      	beq.n	8003e2a <TIM_Base_SetConfig+0xb2>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a26      	ldr	r2, [pc, #152]	; (8003ea8 <TIM_Base_SetConfig+0x130>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d00b      	beq.n	8003e2a <TIM_Base_SetConfig+0xb2>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a25      	ldr	r2, [pc, #148]	; (8003eac <TIM_Base_SetConfig+0x134>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d007      	beq.n	8003e2a <TIM_Base_SetConfig+0xb2>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a24      	ldr	r2, [pc, #144]	; (8003eb0 <TIM_Base_SetConfig+0x138>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d003      	beq.n	8003e2a <TIM_Base_SetConfig+0xb2>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a23      	ldr	r2, [pc, #140]	; (8003eb4 <TIM_Base_SetConfig+0x13c>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d108      	bne.n	8003e3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a0a      	ldr	r2, [pc, #40]	; (8003e8c <TIM_Base_SetConfig+0x114>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d003      	beq.n	8003e70 <TIM_Base_SetConfig+0xf8>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a0c      	ldr	r2, [pc, #48]	; (8003e9c <TIM_Base_SetConfig+0x124>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d103      	bne.n	8003e78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	691a      	ldr	r2, [r3, #16]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	615a      	str	r2, [r3, #20]
}
 8003e7e:	bf00      	nop
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	40010000 	.word	0x40010000
 8003e90:	40000400 	.word	0x40000400
 8003e94:	40000800 	.word	0x40000800
 8003e98:	40000c00 	.word	0x40000c00
 8003e9c:	40010400 	.word	0x40010400
 8003ea0:	40014000 	.word	0x40014000
 8003ea4:	40014400 	.word	0x40014400
 8003ea8:	40014800 	.word	0x40014800
 8003eac:	40001800 	.word	0x40001800
 8003eb0:	40001c00 	.word	0x40001c00
 8003eb4:	40002000 	.word	0x40002000

08003eb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e0be      	b.n	8004070 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d031      	beq.n	8003f5e <HAL_UART_Init+0x7e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a5e      	ldr	r2, [pc, #376]	; (8004078 <HAL_UART_Init+0x198>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d013      	beq.n	8003f2c <HAL_UART_Init+0x4c>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a5c      	ldr	r2, [pc, #368]	; (800407c <HAL_UART_Init+0x19c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d00e      	beq.n	8003f2c <HAL_UART_Init+0x4c>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a5b      	ldr	r2, [pc, #364]	; (8004080 <HAL_UART_Init+0x1a0>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d009      	beq.n	8003f2c <HAL_UART_Init+0x4c>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a59      	ldr	r2, [pc, #356]	; (8004084 <HAL_UART_Init+0x1a4>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d004      	beq.n	8003f2c <HAL_UART_Init+0x4c>
 8003f22:	f240 1173 	movw	r1, #371	; 0x173
 8003f26:	4858      	ldr	r0, [pc, #352]	; (8004088 <HAL_UART_Init+0x1a8>)
 8003f28:	f7fc fd75 	bl	8000a16 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d041      	beq.n	8003fb8 <HAL_UART_Init+0xd8>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f3c:	d03c      	beq.n	8003fb8 <HAL_UART_Init+0xd8>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f46:	d037      	beq.n	8003fb8 <HAL_UART_Init+0xd8>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f50:	d032      	beq.n	8003fb8 <HAL_UART_Init+0xd8>
 8003f52:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8003f56:	484c      	ldr	r0, [pc, #304]	; (8004088 <HAL_UART_Init+0x1a8>)
 8003f58:	f7fc fd5d 	bl	8000a16 <assert_failed>
 8003f5c:	e02c      	b.n	8003fb8 <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a45      	ldr	r2, [pc, #276]	; (8004078 <HAL_UART_Init+0x198>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d027      	beq.n	8003fb8 <HAL_UART_Init+0xd8>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a43      	ldr	r2, [pc, #268]	; (800407c <HAL_UART_Init+0x19c>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d022      	beq.n	8003fb8 <HAL_UART_Init+0xd8>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a42      	ldr	r2, [pc, #264]	; (8004080 <HAL_UART_Init+0x1a0>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d01d      	beq.n	8003fb8 <HAL_UART_Init+0xd8>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a42      	ldr	r2, [pc, #264]	; (800408c <HAL_UART_Init+0x1ac>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d018      	beq.n	8003fb8 <HAL_UART_Init+0xd8>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a41      	ldr	r2, [pc, #260]	; (8004090 <HAL_UART_Init+0x1b0>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d013      	beq.n	8003fb8 <HAL_UART_Init+0xd8>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a3b      	ldr	r2, [pc, #236]	; (8004084 <HAL_UART_Init+0x1a4>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d00e      	beq.n	8003fb8 <HAL_UART_Init+0xd8>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a3d      	ldr	r2, [pc, #244]	; (8004094 <HAL_UART_Init+0x1b4>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d009      	beq.n	8003fb8 <HAL_UART_Init+0xd8>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a3b      	ldr	r2, [pc, #236]	; (8004098 <HAL_UART_Init+0x1b8>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d004      	beq.n	8003fb8 <HAL_UART_Init+0xd8>
 8003fae:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8003fb2:	4835      	ldr	r0, [pc, #212]	; (8004088 <HAL_UART_Init+0x1a8>)
 8003fb4:	f7fc fd2f 	bl	8000a16 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d009      	beq.n	8003fd4 <HAL_UART_Init+0xf4>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc8:	d004      	beq.n	8003fd4 <HAL_UART_Init+0xf4>
 8003fca:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8003fce:	482e      	ldr	r0, [pc, #184]	; (8004088 <HAL_UART_Init+0x1a8>)
 8003fd0:	f7fc fd21 	bl	8000a16 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	69db      	ldr	r3, [r3, #28]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d009      	beq.n	8003ff0 <HAL_UART_Init+0x110>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fe4:	d004      	beq.n	8003ff0 <HAL_UART_Init+0x110>
 8003fe6:	f240 117b 	movw	r1, #379	; 0x17b
 8003fea:	4827      	ldr	r0, [pc, #156]	; (8004088 <HAL_UART_Init+0x1a8>)
 8003fec:	f7fc fd13 	bl	8000a16 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d106      	bne.n	800400a <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7fc fd39 	bl	8000a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2224      	movs	r2, #36	; 0x24
 800400e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68da      	ldr	r2, [r3, #12]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004020:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f83a 	bl	800409c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	691a      	ldr	r2, [r3, #16]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004036:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695a      	ldr	r2, [r3, #20]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004046:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004056:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2220      	movs	r2, #32
 8004062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2220      	movs	r2, #32
 800406a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	40011000 	.word	0x40011000
 800407c:	40004400 	.word	0x40004400
 8004080:	40004800 	.word	0x40004800
 8004084:	40011400 	.word	0x40011400
 8004088:	0800deec 	.word	0x0800deec
 800408c:	40004c00 	.word	0x40004c00
 8004090:	40005000 	.word	0x40005000
 8004094:	40007800 	.word	0x40007800
 8004098:	40007c00 	.word	0x40007c00

0800409c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800409c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040a0:	b0c0      	sub	sp, #256	; 0x100
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80040a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	4bcf      	ldr	r3, [pc, #828]	; (80043ec <UART_SetConfig+0x350>)
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d904      	bls.n	80040be <UART_SetConfig+0x22>
 80040b4:	f640 6161 	movw	r1, #3681	; 0xe61
 80040b8:	48cd      	ldr	r0, [pc, #820]	; (80043f0 <UART_SetConfig+0x354>)
 80040ba:	f7fc fcac 	bl	8000a16 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80040be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00a      	beq.n	80040de <UART_SetConfig+0x42>
 80040c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040d2:	d004      	beq.n	80040de <UART_SetConfig+0x42>
 80040d4:	f640 6162 	movw	r1, #3682	; 0xe62
 80040d8:	48c5      	ldr	r0, [pc, #788]	; (80043f0 <UART_SetConfig+0x354>)
 80040da:	f7fc fc9c 	bl	8000a16 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80040de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d010      	beq.n	800410a <UART_SetConfig+0x6e>
 80040e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040f2:	d00a      	beq.n	800410a <UART_SetConfig+0x6e>
 80040f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80040fe:	d004      	beq.n	800410a <UART_SetConfig+0x6e>
 8004100:	f640 6163 	movw	r1, #3683	; 0xe63
 8004104:	48ba      	ldr	r0, [pc, #744]	; (80043f0 <UART_SetConfig+0x354>)
 8004106:	f7fc fc86 	bl	8000a16 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800410a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800410e:	695a      	ldr	r2, [r3, #20]
 8004110:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8004114:	4013      	ands	r3, r2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d104      	bne.n	8004124 <UART_SetConfig+0x88>
 800411a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d104      	bne.n	800412e <UART_SetConfig+0x92>
 8004124:	f640 6164 	movw	r1, #3684	; 0xe64
 8004128:	48b1      	ldr	r0, [pc, #708]	; (80043f0 <UART_SetConfig+0x354>)
 800412a:	f7fc fc74 	bl	8000a16 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800412e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800413a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800413e:	68d9      	ldr	r1, [r3, #12]
 8004140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	ea40 0301 	orr.w	r3, r0, r1
 800414a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800414c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004150:	689a      	ldr	r2, [r3, #8]
 8004152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	431a      	orrs	r2, r3
 800415a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	431a      	orrs	r2, r3
 8004162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	4313      	orrs	r3, r2
 800416a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800416e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800417a:	f021 010c 	bic.w	r1, r1, #12
 800417e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004188:	430b      	orrs	r3, r1
 800418a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800418c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800419c:	6999      	ldr	r1, [r3, #24]
 800419e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	ea40 0301 	orr.w	r3, r0, r1
 80041a8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	4b90      	ldr	r3, [pc, #576]	; (80043f4 <UART_SetConfig+0x358>)
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d005      	beq.n	80041c2 <UART_SetConfig+0x126>
 80041b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	4b8e      	ldr	r3, [pc, #568]	; (80043f8 <UART_SetConfig+0x35c>)
 80041be:	429a      	cmp	r2, r3
 80041c0:	d104      	bne.n	80041cc <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041c2:	f7ff faa3 	bl	800370c <HAL_RCC_GetPCLK2Freq>
 80041c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80041ca:	e003      	b.n	80041d4 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041cc:	f7ff fa8a 	bl	80036e4 <HAL_RCC_GetPCLK1Freq>
 80041d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d8:	69db      	ldr	r3, [r3, #28]
 80041da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041de:	f040 810f 	bne.w	8004400 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041e6:	2200      	movs	r2, #0
 80041e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80041ec:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80041f0:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80041f4:	4622      	mov	r2, r4
 80041f6:	462b      	mov	r3, r5
 80041f8:	1891      	adds	r1, r2, r2
 80041fa:	65b9      	str	r1, [r7, #88]	; 0x58
 80041fc:	415b      	adcs	r3, r3
 80041fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004200:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004204:	4621      	mov	r1, r4
 8004206:	eb12 0801 	adds.w	r8, r2, r1
 800420a:	4629      	mov	r1, r5
 800420c:	eb43 0901 	adc.w	r9, r3, r1
 8004210:	f04f 0200 	mov.w	r2, #0
 8004214:	f04f 0300 	mov.w	r3, #0
 8004218:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800421c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004220:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004224:	4690      	mov	r8, r2
 8004226:	4699      	mov	r9, r3
 8004228:	4623      	mov	r3, r4
 800422a:	eb18 0303 	adds.w	r3, r8, r3
 800422e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004232:	462b      	mov	r3, r5
 8004234:	eb49 0303 	adc.w	r3, r9, r3
 8004238:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800423c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004248:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800424c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004250:	460b      	mov	r3, r1
 8004252:	18db      	adds	r3, r3, r3
 8004254:	653b      	str	r3, [r7, #80]	; 0x50
 8004256:	4613      	mov	r3, r2
 8004258:	eb42 0303 	adc.w	r3, r2, r3
 800425c:	657b      	str	r3, [r7, #84]	; 0x54
 800425e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004262:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004266:	f7fc f80d 	bl	8000284 <__aeabi_uldivmod>
 800426a:	4602      	mov	r2, r0
 800426c:	460b      	mov	r3, r1
 800426e:	4b63      	ldr	r3, [pc, #396]	; (80043fc <UART_SetConfig+0x360>)
 8004270:	fba3 2302 	umull	r2, r3, r3, r2
 8004274:	095b      	lsrs	r3, r3, #5
 8004276:	011c      	lsls	r4, r3, #4
 8004278:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800427c:	2200      	movs	r2, #0
 800427e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004282:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004286:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800428a:	4642      	mov	r2, r8
 800428c:	464b      	mov	r3, r9
 800428e:	1891      	adds	r1, r2, r2
 8004290:	64b9      	str	r1, [r7, #72]	; 0x48
 8004292:	415b      	adcs	r3, r3
 8004294:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004296:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800429a:	4641      	mov	r1, r8
 800429c:	eb12 0a01 	adds.w	sl, r2, r1
 80042a0:	4649      	mov	r1, r9
 80042a2:	eb43 0b01 	adc.w	fp, r3, r1
 80042a6:	f04f 0200 	mov.w	r2, #0
 80042aa:	f04f 0300 	mov.w	r3, #0
 80042ae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042b2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042ba:	4692      	mov	sl, r2
 80042bc:	469b      	mov	fp, r3
 80042be:	4643      	mov	r3, r8
 80042c0:	eb1a 0303 	adds.w	r3, sl, r3
 80042c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042c8:	464b      	mov	r3, r9
 80042ca:	eb4b 0303 	adc.w	r3, fp, r3
 80042ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80042d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042de:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80042e2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80042e6:	460b      	mov	r3, r1
 80042e8:	18db      	adds	r3, r3, r3
 80042ea:	643b      	str	r3, [r7, #64]	; 0x40
 80042ec:	4613      	mov	r3, r2
 80042ee:	eb42 0303 	adc.w	r3, r2, r3
 80042f2:	647b      	str	r3, [r7, #68]	; 0x44
 80042f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80042f8:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80042fc:	f7fb ffc2 	bl	8000284 <__aeabi_uldivmod>
 8004300:	4602      	mov	r2, r0
 8004302:	460b      	mov	r3, r1
 8004304:	4611      	mov	r1, r2
 8004306:	4b3d      	ldr	r3, [pc, #244]	; (80043fc <UART_SetConfig+0x360>)
 8004308:	fba3 2301 	umull	r2, r3, r3, r1
 800430c:	095b      	lsrs	r3, r3, #5
 800430e:	2264      	movs	r2, #100	; 0x64
 8004310:	fb02 f303 	mul.w	r3, r2, r3
 8004314:	1acb      	subs	r3, r1, r3
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800431c:	4b37      	ldr	r3, [pc, #220]	; (80043fc <UART_SetConfig+0x360>)
 800431e:	fba3 2302 	umull	r2, r3, r3, r2
 8004322:	095b      	lsrs	r3, r3, #5
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800432a:	441c      	add	r4, r3
 800432c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004330:	2200      	movs	r2, #0
 8004332:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004336:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800433a:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800433e:	4642      	mov	r2, r8
 8004340:	464b      	mov	r3, r9
 8004342:	1891      	adds	r1, r2, r2
 8004344:	63b9      	str	r1, [r7, #56]	; 0x38
 8004346:	415b      	adcs	r3, r3
 8004348:	63fb      	str	r3, [r7, #60]	; 0x3c
 800434a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800434e:	4641      	mov	r1, r8
 8004350:	1851      	adds	r1, r2, r1
 8004352:	6339      	str	r1, [r7, #48]	; 0x30
 8004354:	4649      	mov	r1, r9
 8004356:	414b      	adcs	r3, r1
 8004358:	637b      	str	r3, [r7, #52]	; 0x34
 800435a:	f04f 0200 	mov.w	r2, #0
 800435e:	f04f 0300 	mov.w	r3, #0
 8004362:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004366:	4659      	mov	r1, fp
 8004368:	00cb      	lsls	r3, r1, #3
 800436a:	4651      	mov	r1, sl
 800436c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004370:	4651      	mov	r1, sl
 8004372:	00ca      	lsls	r2, r1, #3
 8004374:	4610      	mov	r0, r2
 8004376:	4619      	mov	r1, r3
 8004378:	4603      	mov	r3, r0
 800437a:	4642      	mov	r2, r8
 800437c:	189b      	adds	r3, r3, r2
 800437e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004382:	464b      	mov	r3, r9
 8004384:	460a      	mov	r2, r1
 8004386:	eb42 0303 	adc.w	r3, r2, r3
 800438a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800438e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800439a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800439e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80043a2:	460b      	mov	r3, r1
 80043a4:	18db      	adds	r3, r3, r3
 80043a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80043a8:	4613      	mov	r3, r2
 80043aa:	eb42 0303 	adc.w	r3, r2, r3
 80043ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043b4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80043b8:	f7fb ff64 	bl	8000284 <__aeabi_uldivmod>
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	4b0e      	ldr	r3, [pc, #56]	; (80043fc <UART_SetConfig+0x360>)
 80043c2:	fba3 1302 	umull	r1, r3, r3, r2
 80043c6:	095b      	lsrs	r3, r3, #5
 80043c8:	2164      	movs	r1, #100	; 0x64
 80043ca:	fb01 f303 	mul.w	r3, r1, r3
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	3332      	adds	r3, #50	; 0x32
 80043d4:	4a09      	ldr	r2, [pc, #36]	; (80043fc <UART_SetConfig+0x360>)
 80043d6:	fba2 2303 	umull	r2, r3, r2, r3
 80043da:	095b      	lsrs	r3, r3, #5
 80043dc:	f003 0207 	and.w	r2, r3, #7
 80043e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4422      	add	r2, r4
 80043e8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043ea:	e108      	b.n	80045fe <UART_SetConfig+0x562>
 80043ec:	00a037a0 	.word	0x00a037a0
 80043f0:	0800deec 	.word	0x0800deec
 80043f4:	40011000 	.word	0x40011000
 80043f8:	40011400 	.word	0x40011400
 80043fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004400:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004404:	2200      	movs	r2, #0
 8004406:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800440a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800440e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004412:	4642      	mov	r2, r8
 8004414:	464b      	mov	r3, r9
 8004416:	1891      	adds	r1, r2, r2
 8004418:	6239      	str	r1, [r7, #32]
 800441a:	415b      	adcs	r3, r3
 800441c:	627b      	str	r3, [r7, #36]	; 0x24
 800441e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004422:	4641      	mov	r1, r8
 8004424:	1854      	adds	r4, r2, r1
 8004426:	4649      	mov	r1, r9
 8004428:	eb43 0501 	adc.w	r5, r3, r1
 800442c:	f04f 0200 	mov.w	r2, #0
 8004430:	f04f 0300 	mov.w	r3, #0
 8004434:	00eb      	lsls	r3, r5, #3
 8004436:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800443a:	00e2      	lsls	r2, r4, #3
 800443c:	4614      	mov	r4, r2
 800443e:	461d      	mov	r5, r3
 8004440:	4643      	mov	r3, r8
 8004442:	18e3      	adds	r3, r4, r3
 8004444:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004448:	464b      	mov	r3, r9
 800444a:	eb45 0303 	adc.w	r3, r5, r3
 800444e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800445e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004462:	f04f 0200 	mov.w	r2, #0
 8004466:	f04f 0300 	mov.w	r3, #0
 800446a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800446e:	4629      	mov	r1, r5
 8004470:	008b      	lsls	r3, r1, #2
 8004472:	4621      	mov	r1, r4
 8004474:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004478:	4621      	mov	r1, r4
 800447a:	008a      	lsls	r2, r1, #2
 800447c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004480:	f7fb ff00 	bl	8000284 <__aeabi_uldivmod>
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4b60      	ldr	r3, [pc, #384]	; (800460c <UART_SetConfig+0x570>)
 800448a:	fba3 2302 	umull	r2, r3, r3, r2
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	011c      	lsls	r4, r3, #4
 8004492:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004496:	2200      	movs	r2, #0
 8004498:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800449c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80044a4:	4642      	mov	r2, r8
 80044a6:	464b      	mov	r3, r9
 80044a8:	1891      	adds	r1, r2, r2
 80044aa:	61b9      	str	r1, [r7, #24]
 80044ac:	415b      	adcs	r3, r3
 80044ae:	61fb      	str	r3, [r7, #28]
 80044b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044b4:	4641      	mov	r1, r8
 80044b6:	1851      	adds	r1, r2, r1
 80044b8:	6139      	str	r1, [r7, #16]
 80044ba:	4649      	mov	r1, r9
 80044bc:	414b      	adcs	r3, r1
 80044be:	617b      	str	r3, [r7, #20]
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	f04f 0300 	mov.w	r3, #0
 80044c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044cc:	4659      	mov	r1, fp
 80044ce:	00cb      	lsls	r3, r1, #3
 80044d0:	4651      	mov	r1, sl
 80044d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044d6:	4651      	mov	r1, sl
 80044d8:	00ca      	lsls	r2, r1, #3
 80044da:	4610      	mov	r0, r2
 80044dc:	4619      	mov	r1, r3
 80044de:	4603      	mov	r3, r0
 80044e0:	4642      	mov	r2, r8
 80044e2:	189b      	adds	r3, r3, r2
 80044e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044e8:	464b      	mov	r3, r9
 80044ea:	460a      	mov	r2, r1
 80044ec:	eb42 0303 	adc.w	r3, r2, r3
 80044f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80044fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004500:	f04f 0200 	mov.w	r2, #0
 8004504:	f04f 0300 	mov.w	r3, #0
 8004508:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800450c:	4649      	mov	r1, r9
 800450e:	008b      	lsls	r3, r1, #2
 8004510:	4641      	mov	r1, r8
 8004512:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004516:	4641      	mov	r1, r8
 8004518:	008a      	lsls	r2, r1, #2
 800451a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800451e:	f7fb feb1 	bl	8000284 <__aeabi_uldivmod>
 8004522:	4602      	mov	r2, r0
 8004524:	460b      	mov	r3, r1
 8004526:	4b39      	ldr	r3, [pc, #228]	; (800460c <UART_SetConfig+0x570>)
 8004528:	fba3 1302 	umull	r1, r3, r3, r2
 800452c:	095b      	lsrs	r3, r3, #5
 800452e:	2164      	movs	r1, #100	; 0x64
 8004530:	fb01 f303 	mul.w	r3, r1, r3
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	011b      	lsls	r3, r3, #4
 8004538:	3332      	adds	r3, #50	; 0x32
 800453a:	4a34      	ldr	r2, [pc, #208]	; (800460c <UART_SetConfig+0x570>)
 800453c:	fba2 2303 	umull	r2, r3, r2, r3
 8004540:	095b      	lsrs	r3, r3, #5
 8004542:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004546:	441c      	add	r4, r3
 8004548:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800454c:	2200      	movs	r2, #0
 800454e:	673b      	str	r3, [r7, #112]	; 0x70
 8004550:	677a      	str	r2, [r7, #116]	; 0x74
 8004552:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004556:	4642      	mov	r2, r8
 8004558:	464b      	mov	r3, r9
 800455a:	1891      	adds	r1, r2, r2
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	415b      	adcs	r3, r3
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004566:	4641      	mov	r1, r8
 8004568:	1851      	adds	r1, r2, r1
 800456a:	6039      	str	r1, [r7, #0]
 800456c:	4649      	mov	r1, r9
 800456e:	414b      	adcs	r3, r1
 8004570:	607b      	str	r3, [r7, #4]
 8004572:	f04f 0200 	mov.w	r2, #0
 8004576:	f04f 0300 	mov.w	r3, #0
 800457a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800457e:	4659      	mov	r1, fp
 8004580:	00cb      	lsls	r3, r1, #3
 8004582:	4651      	mov	r1, sl
 8004584:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004588:	4651      	mov	r1, sl
 800458a:	00ca      	lsls	r2, r1, #3
 800458c:	4610      	mov	r0, r2
 800458e:	4619      	mov	r1, r3
 8004590:	4603      	mov	r3, r0
 8004592:	4642      	mov	r2, r8
 8004594:	189b      	adds	r3, r3, r2
 8004596:	66bb      	str	r3, [r7, #104]	; 0x68
 8004598:	464b      	mov	r3, r9
 800459a:	460a      	mov	r2, r1
 800459c:	eb42 0303 	adc.w	r3, r2, r3
 80045a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	663b      	str	r3, [r7, #96]	; 0x60
 80045ac:	667a      	str	r2, [r7, #100]	; 0x64
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	f04f 0300 	mov.w	r3, #0
 80045b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80045ba:	4649      	mov	r1, r9
 80045bc:	008b      	lsls	r3, r1, #2
 80045be:	4641      	mov	r1, r8
 80045c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045c4:	4641      	mov	r1, r8
 80045c6:	008a      	lsls	r2, r1, #2
 80045c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80045cc:	f7fb fe5a 	bl	8000284 <__aeabi_uldivmod>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	4b0d      	ldr	r3, [pc, #52]	; (800460c <UART_SetConfig+0x570>)
 80045d6:	fba3 1302 	umull	r1, r3, r3, r2
 80045da:	095b      	lsrs	r3, r3, #5
 80045dc:	2164      	movs	r1, #100	; 0x64
 80045de:	fb01 f303 	mul.w	r3, r1, r3
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	3332      	adds	r3, #50	; 0x32
 80045e8:	4a08      	ldr	r2, [pc, #32]	; (800460c <UART_SetConfig+0x570>)
 80045ea:	fba2 2303 	umull	r2, r3, r2, r3
 80045ee:	095b      	lsrs	r3, r3, #5
 80045f0:	f003 020f 	and.w	r2, r3, #15
 80045f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4422      	add	r2, r4
 80045fc:	609a      	str	r2, [r3, #8]
}
 80045fe:	bf00      	nop
 8004600:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004604:	46bd      	mov	sp, r7
 8004606:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800460a:	bf00      	nop
 800460c:	51eb851f 	.word	0x51eb851f

08004610 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004610:	b084      	sub	sp, #16
 8004612:	b580      	push	{r7, lr}
 8004614:	b084      	sub	sp, #16
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	f107 001c 	add.w	r0, r7, #28
 800461e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004624:	2b01      	cmp	r3, #1
 8004626:	d122      	bne.n	800466e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800463c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004652:	2b01      	cmp	r3, #1
 8004654:	d105      	bne.n	8004662 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f001 fbee 	bl	8005e44 <USB_CoreReset>
 8004668:	4603      	mov	r3, r0
 800466a:	73fb      	strb	r3, [r7, #15]
 800466c:	e01a      	b.n	80046a4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f001 fbe2 	bl	8005e44 <USB_CoreReset>
 8004680:	4603      	mov	r3, r0
 8004682:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004686:	2b00      	cmp	r3, #0
 8004688:	d106      	bne.n	8004698 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	639a      	str	r2, [r3, #56]	; 0x38
 8004696:	e005      	b.n	80046a4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80046a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d10b      	bne.n	80046c2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f043 0206 	orr.w	r2, r3, #6
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f043 0220 	orr.w	r2, r3, #32
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80046c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046ce:	b004      	add	sp, #16
 80046d0:	4770      	bx	lr
	...

080046d4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b087      	sub	sp, #28
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	4613      	mov	r3, r2
 80046e0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80046e2:	79fb      	ldrb	r3, [r7, #7]
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d165      	bne.n	80047b4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	4a41      	ldr	r2, [pc, #260]	; (80047f0 <USB_SetTurnaroundTime+0x11c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d906      	bls.n	80046fe <USB_SetTurnaroundTime+0x2a>
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	4a40      	ldr	r2, [pc, #256]	; (80047f4 <USB_SetTurnaroundTime+0x120>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d202      	bcs.n	80046fe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80046f8:	230f      	movs	r3, #15
 80046fa:	617b      	str	r3, [r7, #20]
 80046fc:	e062      	b.n	80047c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	4a3c      	ldr	r2, [pc, #240]	; (80047f4 <USB_SetTurnaroundTime+0x120>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d306      	bcc.n	8004714 <USB_SetTurnaroundTime+0x40>
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	4a3b      	ldr	r2, [pc, #236]	; (80047f8 <USB_SetTurnaroundTime+0x124>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d202      	bcs.n	8004714 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800470e:	230e      	movs	r3, #14
 8004710:	617b      	str	r3, [r7, #20]
 8004712:	e057      	b.n	80047c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	4a38      	ldr	r2, [pc, #224]	; (80047f8 <USB_SetTurnaroundTime+0x124>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d306      	bcc.n	800472a <USB_SetTurnaroundTime+0x56>
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	4a37      	ldr	r2, [pc, #220]	; (80047fc <USB_SetTurnaroundTime+0x128>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d202      	bcs.n	800472a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004724:	230d      	movs	r3, #13
 8004726:	617b      	str	r3, [r7, #20]
 8004728:	e04c      	b.n	80047c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	4a33      	ldr	r2, [pc, #204]	; (80047fc <USB_SetTurnaroundTime+0x128>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d306      	bcc.n	8004740 <USB_SetTurnaroundTime+0x6c>
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	4a32      	ldr	r2, [pc, #200]	; (8004800 <USB_SetTurnaroundTime+0x12c>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d802      	bhi.n	8004740 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800473a:	230c      	movs	r3, #12
 800473c:	617b      	str	r3, [r7, #20]
 800473e:	e041      	b.n	80047c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	4a2f      	ldr	r2, [pc, #188]	; (8004800 <USB_SetTurnaroundTime+0x12c>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d906      	bls.n	8004756 <USB_SetTurnaroundTime+0x82>
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	4a2e      	ldr	r2, [pc, #184]	; (8004804 <USB_SetTurnaroundTime+0x130>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d802      	bhi.n	8004756 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004750:	230b      	movs	r3, #11
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	e036      	b.n	80047c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	4a2a      	ldr	r2, [pc, #168]	; (8004804 <USB_SetTurnaroundTime+0x130>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d906      	bls.n	800476c <USB_SetTurnaroundTime+0x98>
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	4a29      	ldr	r2, [pc, #164]	; (8004808 <USB_SetTurnaroundTime+0x134>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d802      	bhi.n	800476c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004766:	230a      	movs	r3, #10
 8004768:	617b      	str	r3, [r7, #20]
 800476a:	e02b      	b.n	80047c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	4a26      	ldr	r2, [pc, #152]	; (8004808 <USB_SetTurnaroundTime+0x134>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d906      	bls.n	8004782 <USB_SetTurnaroundTime+0xae>
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	4a25      	ldr	r2, [pc, #148]	; (800480c <USB_SetTurnaroundTime+0x138>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d202      	bcs.n	8004782 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800477c:	2309      	movs	r3, #9
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	e020      	b.n	80047c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	4a21      	ldr	r2, [pc, #132]	; (800480c <USB_SetTurnaroundTime+0x138>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d306      	bcc.n	8004798 <USB_SetTurnaroundTime+0xc4>
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	4a20      	ldr	r2, [pc, #128]	; (8004810 <USB_SetTurnaroundTime+0x13c>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d802      	bhi.n	8004798 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004792:	2308      	movs	r3, #8
 8004794:	617b      	str	r3, [r7, #20]
 8004796:	e015      	b.n	80047c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	4a1d      	ldr	r2, [pc, #116]	; (8004810 <USB_SetTurnaroundTime+0x13c>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d906      	bls.n	80047ae <USB_SetTurnaroundTime+0xda>
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	4a1c      	ldr	r2, [pc, #112]	; (8004814 <USB_SetTurnaroundTime+0x140>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d202      	bcs.n	80047ae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80047a8:	2307      	movs	r3, #7
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	e00a      	b.n	80047c4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80047ae:	2306      	movs	r3, #6
 80047b0:	617b      	str	r3, [r7, #20]
 80047b2:	e007      	b.n	80047c4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80047b4:	79fb      	ldrb	r3, [r7, #7]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d102      	bne.n	80047c0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80047ba:	2309      	movs	r3, #9
 80047bc:	617b      	str	r3, [r7, #20]
 80047be:	e001      	b.n	80047c4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80047c0:	2309      	movs	r3, #9
 80047c2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	68da      	ldr	r2, [r3, #12]
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	029b      	lsls	r3, r3, #10
 80047d8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80047dc:	431a      	orrs	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	371c      	adds	r7, #28
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	00d8acbf 	.word	0x00d8acbf
 80047f4:	00e4e1c0 	.word	0x00e4e1c0
 80047f8:	00f42400 	.word	0x00f42400
 80047fc:	01067380 	.word	0x01067380
 8004800:	011a499f 	.word	0x011a499f
 8004804:	01312cff 	.word	0x01312cff
 8004808:	014ca43f 	.word	0x014ca43f
 800480c:	016e3600 	.word	0x016e3600
 8004810:	01a6ab1f 	.word	0x01a6ab1f
 8004814:	01e84800 	.word	0x01e84800

08004818 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f043 0201 	orr.w	r2, r3, #1
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f023 0201 	bic.w	r2, r3, #1
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	460b      	mov	r3, r1
 8004866:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004868:	2300      	movs	r3, #0
 800486a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004878:	78fb      	ldrb	r3, [r7, #3]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d115      	bne.n	80048aa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800488a:	2001      	movs	r0, #1
 800488c:	f7fc fa62 	bl	8000d54 <HAL_Delay>
      ms++;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	3301      	adds	r3, #1
 8004894:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f001 fa45 	bl	8005d26 <USB_GetMode>
 800489c:	4603      	mov	r3, r0
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d01e      	beq.n	80048e0 <USB_SetCurrentMode+0x84>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2b31      	cmp	r3, #49	; 0x31
 80048a6:	d9f0      	bls.n	800488a <USB_SetCurrentMode+0x2e>
 80048a8:	e01a      	b.n	80048e0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80048aa:	78fb      	ldrb	r3, [r7, #3]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d115      	bne.n	80048dc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048bc:	2001      	movs	r0, #1
 80048be:	f7fc fa49 	bl	8000d54 <HAL_Delay>
      ms++;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	3301      	adds	r3, #1
 80048c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f001 fa2c 	bl	8005d26 <USB_GetMode>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d005      	beq.n	80048e0 <USB_SetCurrentMode+0x84>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b31      	cmp	r3, #49	; 0x31
 80048d8:	d9f0      	bls.n	80048bc <USB_SetCurrentMode+0x60>
 80048da:	e001      	b.n	80048e0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e005      	b.n	80048ec <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2b32      	cmp	r3, #50	; 0x32
 80048e4:	d101      	bne.n	80048ea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e000      	b.n	80048ec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048f4:	b084      	sub	sp, #16
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b086      	sub	sp, #24
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
 80048fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004902:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004906:	2300      	movs	r3, #0
 8004908:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800490e:	2300      	movs	r3, #0
 8004910:	613b      	str	r3, [r7, #16]
 8004912:	e009      	b.n	8004928 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	3340      	adds	r3, #64	; 0x40
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	4413      	add	r3, r2
 800491e:	2200      	movs	r2, #0
 8004920:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	3301      	adds	r3, #1
 8004926:	613b      	str	r3, [r7, #16]
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	2b0e      	cmp	r3, #14
 800492c:	d9f2      	bls.n	8004914 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800492e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004930:	2b00      	cmp	r3, #0
 8004932:	d11c      	bne.n	800496e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004942:	f043 0302 	orr.w	r3, r3, #2
 8004946:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004958:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004964:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	639a      	str	r2, [r3, #56]	; 0x38
 800496c:	e00b      	b.n	8004986 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004972:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800498c:	461a      	mov	r2, r3
 800498e:	2300      	movs	r3, #0
 8004990:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004998:	4619      	mov	r1, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a0:	461a      	mov	r2, r3
 80049a2:	680b      	ldr	r3, [r1, #0]
 80049a4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d10c      	bne.n	80049c6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80049ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d104      	bne.n	80049bc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80049b2:	2100      	movs	r1, #0
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f965 	bl	8004c84 <USB_SetDevSpeed>
 80049ba:	e008      	b.n	80049ce <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80049bc:	2101      	movs	r1, #1
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f960 	bl	8004c84 <USB_SetDevSpeed>
 80049c4:	e003      	b.n	80049ce <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80049c6:	2103      	movs	r1, #3
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 f95b 	bl	8004c84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80049ce:	2110      	movs	r1, #16
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 f8f3 	bl	8004bbc <USB_FlushTxFifo>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 f91f 	bl	8004c24 <USB_FlushRxFifo>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f6:	461a      	mov	r2, r3
 80049f8:	2300      	movs	r3, #0
 80049fa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a02:	461a      	mov	r2, r3
 8004a04:	2300      	movs	r3, #0
 8004a06:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a0e:	461a      	mov	r2, r3
 8004a10:	2300      	movs	r3, #0
 8004a12:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a14:	2300      	movs	r3, #0
 8004a16:	613b      	str	r3, [r7, #16]
 8004a18:	e043      	b.n	8004aa2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	015a      	lsls	r2, r3, #5
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4413      	add	r3, r2
 8004a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a30:	d118      	bne.n	8004a64 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10a      	bne.n	8004a4e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	015a      	lsls	r2, r3, #5
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a44:	461a      	mov	r2, r3
 8004a46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a4a:	6013      	str	r3, [r2, #0]
 8004a4c:	e013      	b.n	8004a76 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a60:	6013      	str	r3, [r2, #0]
 8004a62:	e008      	b.n	8004a76 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a70:	461a      	mov	r2, r3
 8004a72:	2300      	movs	r3, #0
 8004a74:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	015a      	lsls	r2, r3, #5
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a82:	461a      	mov	r2, r3
 8004a84:	2300      	movs	r3, #0
 8004a86:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a94:	461a      	mov	r2, r3
 8004a96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	613b      	str	r3, [r7, #16]
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d3b7      	bcc.n	8004a1a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004aaa:	2300      	movs	r3, #0
 8004aac:	613b      	str	r3, [r7, #16]
 8004aae:	e043      	b.n	8004b38 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	015a      	lsls	r2, r3, #5
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ac2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ac6:	d118      	bne.n	8004afa <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10a      	bne.n	8004ae4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	015a      	lsls	r2, r3, #5
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ada:	461a      	mov	r2, r3
 8004adc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ae0:	6013      	str	r3, [r2, #0]
 8004ae2:	e013      	b.n	8004b0c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af0:	461a      	mov	r2, r3
 8004af2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004af6:	6013      	str	r3, [r2, #0]
 8004af8:	e008      	b.n	8004b0c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	015a      	lsls	r2, r3, #5
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	4413      	add	r3, r2
 8004b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b06:	461a      	mov	r2, r3
 8004b08:	2300      	movs	r3, #0
 8004b0a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b18:	461a      	mov	r2, r3
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	015a      	lsls	r2, r3, #5
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b30:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	3301      	adds	r3, #1
 8004b36:	613b      	str	r3, [r7, #16]
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d3b7      	bcc.n	8004ab0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b52:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004b60:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d105      	bne.n	8004b74 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	f043 0210 	orr.w	r2, r3, #16
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	699a      	ldr	r2, [r3, #24]
 8004b78:	4b0f      	ldr	r3, [pc, #60]	; (8004bb8 <USB_DevInit+0x2c4>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d005      	beq.n	8004b92 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	f043 0208 	orr.w	r2, r3, #8
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d107      	bne.n	8004ba8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ba0:	f043 0304 	orr.w	r3, r3, #4
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ba8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3718      	adds	r7, #24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bb4:	b004      	add	sp, #16
 8004bb6:	4770      	bx	lr
 8004bb8:	803c3800 	.word	0x803c3800

08004bbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4a13      	ldr	r2, [pc, #76]	; (8004c20 <USB_FlushTxFifo+0x64>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d901      	bls.n	8004bdc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e01b      	b.n	8004c14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	daf2      	bge.n	8004bca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	019b      	lsls	r3, r3, #6
 8004bec:	f043 0220 	orr.w	r2, r3, #32
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	4a08      	ldr	r2, [pc, #32]	; (8004c20 <USB_FlushTxFifo+0x64>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d901      	bls.n	8004c06 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e006      	b.n	8004c14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	f003 0320 	and.w	r3, r3, #32
 8004c0e:	2b20      	cmp	r3, #32
 8004c10:	d0f0      	beq.n	8004bf4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3714      	adds	r7, #20
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	00030d40 	.word	0x00030d40

08004c24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	3301      	adds	r3, #1
 8004c34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	4a11      	ldr	r2, [pc, #68]	; (8004c80 <USB_FlushRxFifo+0x5c>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d901      	bls.n	8004c42 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e018      	b.n	8004c74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	daf2      	bge.n	8004c30 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2210      	movs	r2, #16
 8004c52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	3301      	adds	r3, #1
 8004c58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	4a08      	ldr	r2, [pc, #32]	; (8004c80 <USB_FlushRxFifo+0x5c>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d901      	bls.n	8004c66 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e006      	b.n	8004c74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	f003 0310 	and.w	r3, r3, #16
 8004c6e:	2b10      	cmp	r3, #16
 8004c70:	d0f0      	beq.n	8004c54 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3714      	adds	r7, #20
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr
 8004c80:	00030d40 	.word	0x00030d40

08004c84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	78fb      	ldrb	r3, [r7, #3]
 8004c9e:	68f9      	ldr	r1, [r7, #12]
 8004ca0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b087      	sub	sp, #28
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f003 0306 	and.w	r3, r3, #6
 8004cce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d102      	bne.n	8004cdc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	75fb      	strb	r3, [r7, #23]
 8004cda:	e00a      	b.n	8004cf2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d002      	beq.n	8004ce8 <USB_GetDevSpeed+0x32>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2b06      	cmp	r3, #6
 8004ce6:	d102      	bne.n	8004cee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004ce8:	2302      	movs	r3, #2
 8004cea:	75fb      	strb	r3, [r7, #23]
 8004cec:	e001      	b.n	8004cf2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004cee:	230f      	movs	r3, #15
 8004cf0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	371c      	adds	r7, #28
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	785b      	ldrb	r3, [r3, #1]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d13a      	bne.n	8004d92 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d22:	69da      	ldr	r2, [r3, #28]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	f003 030f 	and.w	r3, r3, #15
 8004d2c:	2101      	movs	r1, #1
 8004d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	68f9      	ldr	r1, [r7, #12]
 8004d36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d155      	bne.n	8004e00 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	015a      	lsls	r2, r3, #5
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	791b      	ldrb	r3, [r3, #4]
 8004d6e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d70:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	059b      	lsls	r3, r3, #22
 8004d76:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	0151      	lsls	r1, r2, #5
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	440a      	add	r2, r1
 8004d82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d8e:	6013      	str	r3, [r2, #0]
 8004d90:	e036      	b.n	8004e00 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d98:	69da      	ldr	r2, [r3, #28]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	f003 030f 	and.w	r3, r3, #15
 8004da2:	2101      	movs	r1, #1
 8004da4:	fa01 f303 	lsl.w	r3, r1, r3
 8004da8:	041b      	lsls	r3, r3, #16
 8004daa:	68f9      	ldr	r1, [r7, #12]
 8004dac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004db0:	4313      	orrs	r3, r2
 8004db2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d11a      	bne.n	8004e00 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	791b      	ldrb	r3, [r3, #4]
 8004de4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004de6:	430b      	orrs	r3, r1
 8004de8:	4313      	orrs	r3, r2
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	0151      	lsls	r1, r2, #5
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	440a      	add	r2, r1
 8004df2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dfe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
	...

08004e10 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	785b      	ldrb	r3, [r3, #1]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d161      	bne.n	8004ef0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	015a      	lsls	r2, r3, #5
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e42:	d11f      	bne.n	8004e84 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	0151      	lsls	r1, r2, #5
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	440a      	add	r2, r1
 8004e5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e62:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	015a      	lsls	r2, r3, #5
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68ba      	ldr	r2, [r7, #8]
 8004e74:	0151      	lsls	r1, r2, #5
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	440a      	add	r2, r1
 8004e7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	f003 030f 	and.w	r3, r3, #15
 8004e94:	2101      	movs	r1, #1
 8004e96:	fa01 f303 	lsl.w	r3, r1, r3
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	43db      	mvns	r3, r3
 8004e9e:	68f9      	ldr	r1, [r7, #12]
 8004ea0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eae:	69da      	ldr	r2, [r3, #28]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	f003 030f 	and.w	r3, r3, #15
 8004eb8:	2101      	movs	r1, #1
 8004eba:	fa01 f303 	lsl.w	r3, r1, r3
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	43db      	mvns	r3, r3
 8004ec2:	68f9      	ldr	r1, [r7, #12]
 8004ec4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ec8:	4013      	ands	r3, r2
 8004eca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	015a      	lsls	r2, r3, #5
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	0159      	lsls	r1, r3, #5
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	440b      	add	r3, r1
 8004ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	4b35      	ldr	r3, [pc, #212]	; (8004fc0 <USB_DeactivateEndpoint+0x1b0>)
 8004eea:	4013      	ands	r3, r2
 8004eec:	600b      	str	r3, [r1, #0]
 8004eee:	e060      	b.n	8004fb2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f06:	d11f      	bne.n	8004f48 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	0151      	lsls	r1, r2, #5
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	440a      	add	r2, r1
 8004f1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f26:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	015a      	lsls	r2, r3, #5
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	0151      	lsls	r1, r2, #5
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	440a      	add	r2, r1
 8004f3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	f003 030f 	and.w	r3, r3, #15
 8004f58:	2101      	movs	r1, #1
 8004f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f5e:	041b      	lsls	r3, r3, #16
 8004f60:	43db      	mvns	r3, r3
 8004f62:	68f9      	ldr	r1, [r7, #12]
 8004f64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f68:	4013      	ands	r3, r2
 8004f6a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f72:	69da      	ldr	r2, [r3, #28]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	f003 030f 	and.w	r3, r3, #15
 8004f7c:	2101      	movs	r1, #1
 8004f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f82:	041b      	lsls	r3, r3, #16
 8004f84:	43db      	mvns	r3, r3
 8004f86:	68f9      	ldr	r1, [r7, #12]
 8004f88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	0159      	lsls	r1, r3, #5
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	440b      	add	r3, r1
 8004fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004faa:	4619      	mov	r1, r3
 8004fac:	4b05      	ldr	r3, [pc, #20]	; (8004fc4 <USB_DeactivateEndpoint+0x1b4>)
 8004fae:	4013      	ands	r3, r2
 8004fb0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	ec337800 	.word	0xec337800
 8004fc4:	eff37800 	.word	0xeff37800

08004fc8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b08a      	sub	sp, #40	; 0x28
 8004fcc:	af02      	add	r7, sp, #8
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	785b      	ldrb	r3, [r3, #1]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	f040 815c 	bne.w	80052a2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d132      	bne.n	8005058 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	015a      	lsls	r2, r3, #5
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	0151      	lsls	r1, r2, #5
 8005004:	69fa      	ldr	r2, [r7, #28]
 8005006:	440a      	add	r2, r1
 8005008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800500c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005010:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005014:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	4413      	add	r3, r2
 800501e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	0151      	lsls	r1, r2, #5
 8005028:	69fa      	ldr	r2, [r7, #28]
 800502a:	440a      	add	r2, r1
 800502c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005030:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005034:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	015a      	lsls	r2, r3, #5
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	4413      	add	r3, r2
 800503e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	0151      	lsls	r1, r2, #5
 8005048:	69fa      	ldr	r2, [r7, #28]
 800504a:	440a      	add	r2, r1
 800504c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005050:	0cdb      	lsrs	r3, r3, #19
 8005052:	04db      	lsls	r3, r3, #19
 8005054:	6113      	str	r3, [r2, #16]
 8005056:	e074      	b.n	8005142 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	0151      	lsls	r1, r2, #5
 800506a:	69fa      	ldr	r2, [r7, #28]
 800506c:	440a      	add	r2, r1
 800506e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005072:	0cdb      	lsrs	r3, r3, #19
 8005074:	04db      	lsls	r3, r3, #19
 8005076:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	4413      	add	r3, r2
 8005080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	0151      	lsls	r1, r2, #5
 800508a:	69fa      	ldr	r2, [r7, #28]
 800508c:	440a      	add	r2, r1
 800508e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005092:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005096:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800509a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	6999      	ldr	r1, [r3, #24]
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	440b      	add	r3, r1
 80050b4:	1e59      	subs	r1, r3, #1
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80050be:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80050c0:	4b9d      	ldr	r3, [pc, #628]	; (8005338 <USB_EPStartXfer+0x370>)
 80050c2:	400b      	ands	r3, r1
 80050c4:	69b9      	ldr	r1, [r7, #24]
 80050c6:	0148      	lsls	r0, r1, #5
 80050c8:	69f9      	ldr	r1, [r7, #28]
 80050ca:	4401      	add	r1, r0
 80050cc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80050d0:	4313      	orrs	r3, r2
 80050d2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e0:	691a      	ldr	r2, [r3, #16]
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050ea:	69b9      	ldr	r1, [r7, #24]
 80050ec:	0148      	lsls	r0, r1, #5
 80050ee:	69f9      	ldr	r1, [r7, #28]
 80050f0:	4401      	add	r1, r0
 80050f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80050f6:	4313      	orrs	r3, r2
 80050f8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	791b      	ldrb	r3, [r3, #4]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d11f      	bne.n	8005142 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	015a      	lsls	r2, r3, #5
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	4413      	add	r3, r2
 800510a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	0151      	lsls	r1, r2, #5
 8005114:	69fa      	ldr	r2, [r7, #28]
 8005116:	440a      	add	r2, r1
 8005118:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800511c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005120:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	4413      	add	r3, r2
 800512a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	0151      	lsls	r1, r2, #5
 8005134:	69fa      	ldr	r2, [r7, #28]
 8005136:	440a      	add	r2, r1
 8005138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800513c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005140:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005142:	79fb      	ldrb	r3, [r7, #7]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d14b      	bne.n	80051e0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d009      	beq.n	8005164 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515c:	461a      	mov	r2, r3
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	791b      	ldrb	r3, [r3, #4]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d128      	bne.n	80051be <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005178:	2b00      	cmp	r3, #0
 800517a:	d110      	bne.n	800519e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	4413      	add	r3, r2
 8005184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	0151      	lsls	r1, r2, #5
 800518e:	69fa      	ldr	r2, [r7, #28]
 8005190:	440a      	add	r2, r1
 8005192:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005196:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800519a:	6013      	str	r3, [r2, #0]
 800519c:	e00f      	b.n	80051be <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	0151      	lsls	r1, r2, #5
 80051b0:	69fa      	ldr	r2, [r7, #28]
 80051b2:	440a      	add	r2, r1
 80051b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051bc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	0151      	lsls	r1, r2, #5
 80051d0:	69fa      	ldr	r2, [r7, #28]
 80051d2:	440a      	add	r2, r1
 80051d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051dc:	6013      	str	r3, [r2, #0]
 80051de:	e133      	b.n	8005448 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	69ba      	ldr	r2, [r7, #24]
 80051f0:	0151      	lsls	r1, r2, #5
 80051f2:	69fa      	ldr	r2, [r7, #28]
 80051f4:	440a      	add	r2, r1
 80051f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051fe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	791b      	ldrb	r3, [r3, #4]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d015      	beq.n	8005234 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 811b 	beq.w	8005448 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	f003 030f 	and.w	r3, r3, #15
 8005222:	2101      	movs	r1, #1
 8005224:	fa01 f303 	lsl.w	r3, r1, r3
 8005228:	69f9      	ldr	r1, [r7, #28]
 800522a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800522e:	4313      	orrs	r3, r2
 8005230:	634b      	str	r3, [r1, #52]	; 0x34
 8005232:	e109      	b.n	8005448 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005240:	2b00      	cmp	r3, #0
 8005242:	d110      	bne.n	8005266 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	4413      	add	r3, r2
 800524c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	0151      	lsls	r1, r2, #5
 8005256:	69fa      	ldr	r2, [r7, #28]
 8005258:	440a      	add	r2, r1
 800525a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800525e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005262:	6013      	str	r3, [r2, #0]
 8005264:	e00f      	b.n	8005286 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	4413      	add	r3, r2
 800526e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	0151      	lsls	r1, r2, #5
 8005278:	69fa      	ldr	r2, [r7, #28]
 800527a:	440a      	add	r2, r1
 800527c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005284:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	6919      	ldr	r1, [r3, #16]
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	781a      	ldrb	r2, [r3, #0]
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	b298      	uxth	r0, r3
 8005294:	79fb      	ldrb	r3, [r7, #7]
 8005296:	9300      	str	r3, [sp, #0]
 8005298:	4603      	mov	r3, r0
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f000 fade 	bl	800585c <USB_WritePacket>
 80052a0:	e0d2      	b.n	8005448 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	015a      	lsls	r2, r3, #5
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	4413      	add	r3, r2
 80052aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	0151      	lsls	r1, r2, #5
 80052b4:	69fa      	ldr	r2, [r7, #28]
 80052b6:	440a      	add	r2, r1
 80052b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052bc:	0cdb      	lsrs	r3, r3, #19
 80052be:	04db      	lsls	r3, r3, #19
 80052c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	015a      	lsls	r2, r3, #5
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	69ba      	ldr	r2, [r7, #24]
 80052d2:	0151      	lsls	r1, r2, #5
 80052d4:	69fa      	ldr	r2, [r7, #28]
 80052d6:	440a      	add	r2, r1
 80052d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052e4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d126      	bne.n	800533c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fa:	691a      	ldr	r2, [r3, #16]
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005304:	69b9      	ldr	r1, [r7, #24]
 8005306:	0148      	lsls	r0, r1, #5
 8005308:	69f9      	ldr	r1, [r7, #28]
 800530a:	4401      	add	r1, r0
 800530c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005310:	4313      	orrs	r3, r2
 8005312:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	4413      	add	r3, r2
 800531c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	69ba      	ldr	r2, [r7, #24]
 8005324:	0151      	lsls	r1, r2, #5
 8005326:	69fa      	ldr	r2, [r7, #28]
 8005328:	440a      	add	r2, r1
 800532a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800532e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005332:	6113      	str	r3, [r2, #16]
 8005334:	e03a      	b.n	80053ac <USB_EPStartXfer+0x3e4>
 8005336:	bf00      	nop
 8005338:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	699a      	ldr	r2, [r3, #24]
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	4413      	add	r3, r2
 8005346:	1e5a      	subs	r2, r3, #1
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005350:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	8afa      	ldrh	r2, [r7, #22]
 8005358:	fb03 f202 	mul.w	r2, r3, r2
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	015a      	lsls	r2, r3, #5
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	4413      	add	r3, r2
 8005368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800536c:	691a      	ldr	r2, [r3, #16]
 800536e:	8afb      	ldrh	r3, [r7, #22]
 8005370:	04d9      	lsls	r1, r3, #19
 8005372:	4b38      	ldr	r3, [pc, #224]	; (8005454 <USB_EPStartXfer+0x48c>)
 8005374:	400b      	ands	r3, r1
 8005376:	69b9      	ldr	r1, [r7, #24]
 8005378:	0148      	lsls	r0, r1, #5
 800537a:	69f9      	ldr	r1, [r7, #28]
 800537c:	4401      	add	r1, r0
 800537e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005382:	4313      	orrs	r3, r2
 8005384:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	015a      	lsls	r2, r3, #5
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	4413      	add	r3, r2
 800538e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005392:	691a      	ldr	r2, [r3, #16]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	69db      	ldr	r3, [r3, #28]
 8005398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800539c:	69b9      	ldr	r1, [r7, #24]
 800539e:	0148      	lsls	r0, r1, #5
 80053a0:	69f9      	ldr	r1, [r7, #28]
 80053a2:	4401      	add	r1, r0
 80053a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053a8:	4313      	orrs	r3, r2
 80053aa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80053ac:	79fb      	ldrb	r3, [r7, #7]
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d10d      	bne.n	80053ce <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d009      	beq.n	80053ce <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	6919      	ldr	r1, [r3, #16]
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	015a      	lsls	r2, r3, #5
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ca:	460a      	mov	r2, r1
 80053cc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	791b      	ldrb	r3, [r3, #4]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d128      	bne.n	8005428 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d110      	bne.n	8005408 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	015a      	lsls	r2, r3, #5
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	0151      	lsls	r1, r2, #5
 80053f8:	69fa      	ldr	r2, [r7, #28]
 80053fa:	440a      	add	r2, r1
 80053fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005400:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005404:	6013      	str	r3, [r2, #0]
 8005406:	e00f      	b.n	8005428 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	4413      	add	r3, r2
 8005410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	69ba      	ldr	r2, [r7, #24]
 8005418:	0151      	lsls	r1, r2, #5
 800541a:	69fa      	ldr	r2, [r7, #28]
 800541c:	440a      	add	r2, r1
 800541e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005426:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	4413      	add	r3, r2
 8005430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	69ba      	ldr	r2, [r7, #24]
 8005438:	0151      	lsls	r1, r2, #5
 800543a:	69fa      	ldr	r2, [r7, #28]
 800543c:	440a      	add	r2, r1
 800543e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005442:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005446:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3720      	adds	r7, #32
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	1ff80000 	.word	0x1ff80000

08005458 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005458:	b480      	push	{r7}
 800545a:	b087      	sub	sp, #28
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	4613      	mov	r3, r2
 8005464:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	785b      	ldrb	r3, [r3, #1]
 8005474:	2b01      	cmp	r3, #1
 8005476:	f040 80ce 	bne.w	8005616 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d132      	bne.n	80054e8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	015a      	lsls	r2, r3, #5
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	4413      	add	r3, r2
 800548a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	0151      	lsls	r1, r2, #5
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	440a      	add	r2, r1
 8005498:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800549c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	015a      	lsls	r2, r3, #5
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	4413      	add	r3, r2
 80054ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	0151      	lsls	r1, r2, #5
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	440a      	add	r2, r1
 80054bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	0151      	lsls	r1, r2, #5
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	440a      	add	r2, r1
 80054dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054e0:	0cdb      	lsrs	r3, r3, #19
 80054e2:	04db      	lsls	r3, r3, #19
 80054e4:	6113      	str	r3, [r2, #16]
 80054e6:	e04e      	b.n	8005586 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	015a      	lsls	r2, r3, #5
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	0151      	lsls	r1, r2, #5
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	440a      	add	r2, r1
 80054fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005502:	0cdb      	lsrs	r3, r3, #19
 8005504:	04db      	lsls	r3, r3, #19
 8005506:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	015a      	lsls	r2, r3, #5
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	4413      	add	r3, r2
 8005510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	0151      	lsls	r1, r2, #5
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	440a      	add	r2, r1
 800551e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005522:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005526:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800552a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	699a      	ldr	r2, [r3, #24]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	429a      	cmp	r2, r3
 8005536:	d903      	bls.n	8005540 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	68da      	ldr	r2, [r3, #12]
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	015a      	lsls	r2, r3, #5
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	4413      	add	r3, r2
 8005548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	0151      	lsls	r1, r2, #5
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	440a      	add	r2, r1
 8005556:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800555a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800555e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	015a      	lsls	r2, r3, #5
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	4413      	add	r3, r2
 8005568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800556c:	691a      	ldr	r2, [r3, #16]
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005576:	6939      	ldr	r1, [r7, #16]
 8005578:	0148      	lsls	r0, r1, #5
 800557a:	6979      	ldr	r1, [r7, #20]
 800557c:	4401      	add	r1, r0
 800557e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005582:	4313      	orrs	r3, r2
 8005584:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005586:	79fb      	ldrb	r3, [r7, #7]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d11e      	bne.n	80055ca <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	695b      	ldr	r3, [r3, #20]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d009      	beq.n	80055a8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	4413      	add	r3, r2
 800559c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a0:	461a      	mov	r2, r3
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	015a      	lsls	r2, r3, #5
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	0151      	lsls	r1, r2, #5
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	440a      	add	r2, r1
 80055be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055c6:	6013      	str	r3, [r2, #0]
 80055c8:	e097      	b.n	80056fa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	0151      	lsls	r1, r2, #5
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	440a      	add	r2, r1
 80055e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055e8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f000 8083 	beq.w	80056fa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	f003 030f 	and.w	r3, r3, #15
 8005604:	2101      	movs	r1, #1
 8005606:	fa01 f303 	lsl.w	r3, r1, r3
 800560a:	6979      	ldr	r1, [r7, #20]
 800560c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005610:	4313      	orrs	r3, r2
 8005612:	634b      	str	r3, [r1, #52]	; 0x34
 8005614:	e071      	b.n	80056fa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	015a      	lsls	r2, r3, #5
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	4413      	add	r3, r2
 800561e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	0151      	lsls	r1, r2, #5
 8005628:	697a      	ldr	r2, [r7, #20]
 800562a:	440a      	add	r2, r1
 800562c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005630:	0cdb      	lsrs	r3, r3, #19
 8005632:	04db      	lsls	r3, r3, #19
 8005634:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	015a      	lsls	r2, r3, #5
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	4413      	add	r3, r2
 800563e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	0151      	lsls	r1, r2, #5
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	440a      	add	r2, r1
 800564c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005650:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005654:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005658:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d003      	beq.n	800566a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	68da      	ldr	r2, [r3, #12]
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	68da      	ldr	r2, [r3, #12]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	015a      	lsls	r2, r3, #5
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	4413      	add	r3, r2
 800567a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	0151      	lsls	r1, r2, #5
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	440a      	add	r2, r1
 8005688:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800568c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005690:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	015a      	lsls	r2, r3, #5
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	4413      	add	r3, r2
 800569a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800569e:	691a      	ldr	r2, [r3, #16]
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	69db      	ldr	r3, [r3, #28]
 80056a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056a8:	6939      	ldr	r1, [r7, #16]
 80056aa:	0148      	lsls	r0, r1, #5
 80056ac:	6979      	ldr	r1, [r7, #20]
 80056ae:	4401      	add	r1, r0
 80056b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056b4:	4313      	orrs	r3, r2
 80056b6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80056b8:	79fb      	ldrb	r3, [r7, #7]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d10d      	bne.n	80056da <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d009      	beq.n	80056da <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	6919      	ldr	r1, [r3, #16]
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d6:	460a      	mov	r2, r1
 80056d8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	015a      	lsls	r2, r3, #5
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	4413      	add	r3, r2
 80056e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	0151      	lsls	r1, r2, #5
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	440a      	add	r2, r1
 80056f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	371c      	adds	r7, #28
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005712:	2300      	movs	r3, #0
 8005714:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005716:	2300      	movs	r3, #0
 8005718:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	785b      	ldrb	r3, [r3, #1]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d14a      	bne.n	80057bc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	4413      	add	r3, r2
 8005730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800573a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800573e:	f040 8086 	bne.w	800584e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	4413      	add	r3, r2
 800574c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	7812      	ldrb	r2, [r2, #0]
 8005756:	0151      	lsls	r1, r2, #5
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	440a      	add	r2, r1
 800575c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005760:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005764:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	4413      	add	r3, r2
 8005770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	683a      	ldr	r2, [r7, #0]
 8005778:	7812      	ldrb	r2, [r2, #0]
 800577a:	0151      	lsls	r1, r2, #5
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	440a      	add	r2, r1
 8005780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005784:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005788:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	3301      	adds	r3, #1
 800578e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f242 7210 	movw	r2, #10000	; 0x2710
 8005796:	4293      	cmp	r3, r2
 8005798:	d902      	bls.n	80057a0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	75fb      	strb	r3, [r7, #23]
          break;
 800579e:	e056      	b.n	800584e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057b8:	d0e7      	beq.n	800578a <USB_EPStopXfer+0x82>
 80057ba:	e048      	b.n	800584e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	015a      	lsls	r2, r3, #5
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	4413      	add	r3, r2
 80057c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057d4:	d13b      	bne.n	800584e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	683a      	ldr	r2, [r7, #0]
 80057e8:	7812      	ldrb	r2, [r2, #0]
 80057ea:	0151      	lsls	r1, r2, #5
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	440a      	add	r2, r1
 80057f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80057f8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	4413      	add	r3, r2
 8005804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	683a      	ldr	r2, [r7, #0]
 800580c:	7812      	ldrb	r2, [r2, #0]
 800580e:	0151      	lsls	r1, r2, #5
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	440a      	add	r2, r1
 8005814:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005818:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800581c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	3301      	adds	r3, #1
 8005822:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f242 7210 	movw	r2, #10000	; 0x2710
 800582a:	4293      	cmp	r3, r2
 800582c:	d902      	bls.n	8005834 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	75fb      	strb	r3, [r7, #23]
          break;
 8005832:	e00c      	b.n	800584e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	015a      	lsls	r2, r3, #5
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	4413      	add	r3, r2
 800583e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005848:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800584c:	d0e7      	beq.n	800581e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800584e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005850:	4618      	mov	r0, r3
 8005852:	371c      	adds	r7, #28
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800585c:	b480      	push	{r7}
 800585e:	b089      	sub	sp, #36	; 0x24
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	4611      	mov	r1, r2
 8005868:	461a      	mov	r2, r3
 800586a:	460b      	mov	r3, r1
 800586c:	71fb      	strb	r3, [r7, #7]
 800586e:	4613      	mov	r3, r2
 8005870:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800587a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800587e:	2b00      	cmp	r3, #0
 8005880:	d123      	bne.n	80058ca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005882:	88bb      	ldrh	r3, [r7, #4]
 8005884:	3303      	adds	r3, #3
 8005886:	089b      	lsrs	r3, r3, #2
 8005888:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800588a:	2300      	movs	r3, #0
 800588c:	61bb      	str	r3, [r7, #24]
 800588e:	e018      	b.n	80058c2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005890:	79fb      	ldrb	r3, [r7, #7]
 8005892:	031a      	lsls	r2, r3, #12
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	4413      	add	r3, r2
 8005898:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800589c:	461a      	mov	r2, r3
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	3301      	adds	r3, #1
 80058a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	3301      	adds	r3, #1
 80058ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	3301      	adds	r3, #1
 80058b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	3301      	adds	r3, #1
 80058ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	3301      	adds	r3, #1
 80058c0:	61bb      	str	r3, [r7, #24]
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d3e2      	bcc.n	8005890 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3724      	adds	r7, #36	; 0x24
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80058d8:	b480      	push	{r7}
 80058da:	b08b      	sub	sp, #44	; 0x2c
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	4613      	mov	r3, r2
 80058e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80058ee:	88fb      	ldrh	r3, [r7, #6]
 80058f0:	089b      	lsrs	r3, r3, #2
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80058f6:	88fb      	ldrh	r3, [r7, #6]
 80058f8:	f003 0303 	and.w	r3, r3, #3
 80058fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80058fe:	2300      	movs	r3, #0
 8005900:	623b      	str	r3, [r7, #32]
 8005902:	e014      	b.n	800592e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005912:	3301      	adds	r3, #1
 8005914:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005918:	3301      	adds	r3, #1
 800591a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	3301      	adds	r3, #1
 8005920:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	3301      	adds	r3, #1
 8005926:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005928:	6a3b      	ldr	r3, [r7, #32]
 800592a:	3301      	adds	r3, #1
 800592c:	623b      	str	r3, [r7, #32]
 800592e:	6a3a      	ldr	r2, [r7, #32]
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	429a      	cmp	r2, r3
 8005934:	d3e6      	bcc.n	8005904 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005936:	8bfb      	ldrh	r3, [r7, #30]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d01e      	beq.n	800597a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800593c:	2300      	movs	r3, #0
 800593e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005946:	461a      	mov	r2, r3
 8005948:	f107 0310 	add.w	r3, r7, #16
 800594c:	6812      	ldr	r2, [r2, #0]
 800594e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	6a3b      	ldr	r3, [r7, #32]
 8005954:	b2db      	uxtb	r3, r3
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	fa22 f303 	lsr.w	r3, r2, r3
 800595c:	b2da      	uxtb	r2, r3
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005960:	701a      	strb	r2, [r3, #0]
      i++;
 8005962:	6a3b      	ldr	r3, [r7, #32]
 8005964:	3301      	adds	r3, #1
 8005966:	623b      	str	r3, [r7, #32]
      pDest++;
 8005968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596a:	3301      	adds	r3, #1
 800596c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800596e:	8bfb      	ldrh	r3, [r7, #30]
 8005970:	3b01      	subs	r3, #1
 8005972:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005974:	8bfb      	ldrh	r3, [r7, #30]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1ea      	bne.n	8005950 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800597c:	4618      	mov	r0, r3
 800597e:	372c      	adds	r7, #44	; 0x2c
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	785b      	ldrb	r3, [r3, #1]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d12c      	bne.n	80059fe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	015a      	lsls	r2, r3, #5
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4413      	add	r3, r2
 80059ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	db12      	blt.n	80059dc <USB_EPSetStall+0x54>
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00f      	beq.n	80059dc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	0151      	lsls	r1, r2, #5
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	440a      	add	r2, r1
 80059d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80059da:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	0151      	lsls	r1, r2, #5
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	440a      	add	r2, r1
 80059f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059fa:	6013      	str	r3, [r2, #0]
 80059fc:	e02b      	b.n	8005a56 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	db12      	blt.n	8005a36 <USB_EPSetStall+0xae>
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00f      	beq.n	8005a36 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	015a      	lsls	r2, r3, #5
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	0151      	lsls	r1, r2, #5
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	440a      	add	r2, r1
 8005a2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a34:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68ba      	ldr	r2, [r7, #8]
 8005a46:	0151      	lsls	r1, r2, #5
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	440a      	add	r2, r1
 8005a4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a54:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3714      	adds	r7, #20
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	785b      	ldrb	r3, [r3, #1]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d128      	bne.n	8005ad2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	015a      	lsls	r2, r3, #5
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	4413      	add	r3, r2
 8005a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	0151      	lsls	r1, r2, #5
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	440a      	add	r2, r1
 8005a96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a9e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	791b      	ldrb	r3, [r3, #4]
 8005aa4:	2b03      	cmp	r3, #3
 8005aa6:	d003      	beq.n	8005ab0 <USB_EPClearStall+0x4c>
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	791b      	ldrb	r3, [r3, #4]
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d138      	bne.n	8005b22 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	0151      	lsls	r1, r2, #5
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	440a      	add	r2, r1
 8005ac6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ace:	6013      	str	r3, [r2, #0]
 8005ad0:	e027      	b.n	8005b22 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	0151      	lsls	r1, r2, #5
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	440a      	add	r2, r1
 8005ae8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005af0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	791b      	ldrb	r3, [r3, #4]
 8005af6:	2b03      	cmp	r3, #3
 8005af8:	d003      	beq.n	8005b02 <USB_EPClearStall+0x9e>
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	791b      	ldrb	r3, [r3, #4]
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d10f      	bne.n	8005b22 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	015a      	lsls	r2, r3, #5
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	4413      	add	r3, r2
 8005b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	0151      	lsls	r1, r2, #5
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	440a      	add	r2, r1
 8005b18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b20:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3714      	adds	r7, #20
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b4e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005b52:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	78fb      	ldrb	r3, [r7, #3]
 8005b5e:	011b      	lsls	r3, r3, #4
 8005b60:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005b64:	68f9      	ldr	r1, [r7, #12]
 8005b66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3714      	adds	r7, #20
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005b96:	f023 0303 	bic.w	r3, r3, #3
 8005b9a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005baa:	f023 0302 	bic.w	r3, r3, #2
 8005bae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3714      	adds	r7, #20
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b085      	sub	sp, #20
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005bd8:	f023 0303 	bic.w	r3, r3, #3
 8005bdc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bec:	f043 0302 	orr.w	r3, r3, #2
 8005bf0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3714      	adds	r7, #20
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	4013      	ands	r3, r2
 8005c16:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005c18:	68fb      	ldr	r3, [r7, #12]
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b085      	sub	sp, #20
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c42:	69db      	ldr	r3, [r3, #28]
 8005c44:	68ba      	ldr	r2, [r7, #8]
 8005c46:	4013      	ands	r3, r2
 8005c48:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	0c1b      	lsrs	r3, r3, #16
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b085      	sub	sp, #20
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c76:	69db      	ldr	r3, [r3, #28]
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	b29b      	uxth	r3, r3
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3714      	adds	r7, #20
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b085      	sub	sp, #20
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
 8005c96:	460b      	mov	r3, r1
 8005c98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005c9e:	78fb      	ldrb	r3, [r7, #3]
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	4013      	ands	r3, r2
 8005cba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005cbc:	68bb      	ldr	r3, [r7, #8]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3714      	adds	r7, #20
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr

08005cca <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005cca:	b480      	push	{r7}
 8005ccc:	b087      	sub	sp, #28
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cec:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005cee:	78fb      	ldrb	r3, [r7, #3]
 8005cf0:	f003 030f 	and.w	r3, r3, #15
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8005cfa:	01db      	lsls	r3, r3, #7
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005d04:	78fb      	ldrb	r3, [r7, #3]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	4013      	ands	r3, r2
 8005d16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005d18:	68bb      	ldr	r3, [r7, #8]
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	371c      	adds	r7, #28
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr

08005d26 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005d26:	b480      	push	{r7}
 8005d28:	b083      	sub	sp, #12
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	f003 0301 	and.w	r3, r3, #1
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b085      	sub	sp, #20
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d5c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005d60:	f023 0307 	bic.w	r3, r3, #7
 8005d64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	460b      	mov	r3, r1
 8005d92:	607a      	str	r2, [r7, #4]
 8005d94:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	333c      	adds	r3, #60	; 0x3c
 8005d9e:	3304      	adds	r3, #4
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	4a26      	ldr	r2, [pc, #152]	; (8005e40 <USB_EP0_OutStart+0xb8>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d90a      	bls.n	8005dc2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005db8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dbc:	d101      	bne.n	8005dc2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	e037      	b.n	8005e32 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc8:	461a      	mov	r2, r3
 8005dca:	2300      	movs	r3, #0
 8005dcc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ddc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005de0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005df0:	f043 0318 	orr.w	r3, r3, #24
 8005df4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e04:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005e08:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005e0a:	7afb      	ldrb	r3, [r7, #11]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d10f      	bne.n	8005e30 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e16:	461a      	mov	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e2a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005e2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	371c      	adds	r7, #28
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	4f54300a 	.word	0x4f54300a

08005e44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	3301      	adds	r3, #1
 8005e54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	4a13      	ldr	r2, [pc, #76]	; (8005ea8 <USB_CoreReset+0x64>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d901      	bls.n	8005e62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e01b      	b.n	8005e9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	daf2      	bge.n	8005e50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	f043 0201 	orr.w	r2, r3, #1
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	4a09      	ldr	r2, [pc, #36]	; (8005ea8 <USB_CoreReset+0x64>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d901      	bls.n	8005e8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e006      	b.n	8005e9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	f003 0301 	and.w	r3, r3, #1
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d0f0      	beq.n	8005e7a <USB_CoreReset+0x36>

  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	00030d40 	.word	0x00030d40

08005eac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005eb8:	f44f 7008 	mov.w	r0, #544	; 0x220
 8005ebc:	f002 fc64 	bl	8008788 <USBD_static_malloc>
 8005ec0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d109      	bne.n	8005edc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	32b0      	adds	r2, #176	; 0xb0
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005ed8:	2302      	movs	r3, #2
 8005eda:	e0d8      	b.n	800608e <USBD_CDC_Init+0x1e2>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005edc:	f44f 7208 	mov.w	r2, #544	; 0x220
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f007 fef4 	bl	800dcd0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	32b0      	adds	r2, #176	; 0xb0
 8005ef2:	68f9      	ldr	r1, [r7, #12]
 8005ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	32b0      	adds	r2, #176	; 0xb0
 8005f02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	7c1b      	ldrb	r3, [r3, #16]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d138      	bne.n	8005f86 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005f14:	4b60      	ldr	r3, [pc, #384]	; (8006098 <USBD_CDC_Init+0x1ec>)
 8005f16:	7819      	ldrb	r1, [r3, #0]
 8005f18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f1c:	2202      	movs	r2, #2
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f002 fb0f 	bl	8008542 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005f24:	4b5c      	ldr	r3, [pc, #368]	; (8006098 <USBD_CDC_Init+0x1ec>)
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	f003 020f 	and.w	r2, r3, #15
 8005f2c:	6879      	ldr	r1, [r7, #4]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	4413      	add	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	440b      	add	r3, r1
 8005f38:	3324      	adds	r3, #36	; 0x24
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005f3e:	4b57      	ldr	r3, [pc, #348]	; (800609c <USBD_CDC_Init+0x1f0>)
 8005f40:	7819      	ldrb	r1, [r3, #0]
 8005f42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f46:	2202      	movs	r2, #2
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f002 fafa 	bl	8008542 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005f4e:	4b53      	ldr	r3, [pc, #332]	; (800609c <USBD_CDC_Init+0x1f0>)
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	f003 020f 	and.w	r2, r3, #15
 8005f56:	6879      	ldr	r1, [r7, #4]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	440b      	add	r3, r1
 8005f62:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005f66:	2201      	movs	r2, #1
 8005f68:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005f6a:	4b4d      	ldr	r3, [pc, #308]	; (80060a0 <USBD_CDC_Init+0x1f4>)
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	f003 020f 	and.w	r2, r3, #15
 8005f72:	6879      	ldr	r1, [r7, #4]
 8005f74:	4613      	mov	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	4413      	add	r3, r2
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	440b      	add	r3, r1
 8005f7e:	3326      	adds	r3, #38	; 0x26
 8005f80:	2210      	movs	r2, #16
 8005f82:	801a      	strh	r2, [r3, #0]
 8005f84:	e035      	b.n	8005ff2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005f86:	4b44      	ldr	r3, [pc, #272]	; (8006098 <USBD_CDC_Init+0x1ec>)
 8005f88:	7819      	ldrb	r1, [r3, #0]
 8005f8a:	2340      	movs	r3, #64	; 0x40
 8005f8c:	2202      	movs	r2, #2
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f002 fad7 	bl	8008542 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005f94:	4b40      	ldr	r3, [pc, #256]	; (8006098 <USBD_CDC_Init+0x1ec>)
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	f003 020f 	and.w	r2, r3, #15
 8005f9c:	6879      	ldr	r1, [r7, #4]
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4413      	add	r3, r2
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	440b      	add	r3, r1
 8005fa8:	3324      	adds	r3, #36	; 0x24
 8005faa:	2201      	movs	r2, #1
 8005fac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005fae:	4b3b      	ldr	r3, [pc, #236]	; (800609c <USBD_CDC_Init+0x1f0>)
 8005fb0:	7819      	ldrb	r1, [r3, #0]
 8005fb2:	2340      	movs	r3, #64	; 0x40
 8005fb4:	2202      	movs	r2, #2
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f002 fac3 	bl	8008542 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005fbc:	4b37      	ldr	r3, [pc, #220]	; (800609c <USBD_CDC_Init+0x1f0>)
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	f003 020f 	and.w	r2, r3, #15
 8005fc4:	6879      	ldr	r1, [r7, #4]
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4413      	add	r3, r2
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	440b      	add	r3, r1
 8005fd0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005fd8:	4b31      	ldr	r3, [pc, #196]	; (80060a0 <USBD_CDC_Init+0x1f4>)
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	f003 020f 	and.w	r2, r3, #15
 8005fe0:	6879      	ldr	r1, [r7, #4]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4413      	add	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	440b      	add	r3, r1
 8005fec:	3326      	adds	r3, #38	; 0x26
 8005fee:	2210      	movs	r2, #16
 8005ff0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005ff2:	4b2b      	ldr	r3, [pc, #172]	; (80060a0 <USBD_CDC_Init+0x1f4>)
 8005ff4:	7819      	ldrb	r1, [r3, #0]
 8005ff6:	2308      	movs	r3, #8
 8005ff8:	2203      	movs	r2, #3
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f002 faa1 	bl	8008542 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006000:	4b27      	ldr	r3, [pc, #156]	; (80060a0 <USBD_CDC_Init+0x1f4>)
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	f003 020f 	and.w	r2, r3, #15
 8006008:	6879      	ldr	r1, [r7, #4]
 800600a:	4613      	mov	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4413      	add	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	440b      	add	r3, r1
 8006014:	3324      	adds	r3, #36	; 0x24
 8006016:	2201      	movs	r2, #1
 8006018:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	33b0      	adds	r3, #176	; 0xb0
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4413      	add	r3, r2
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  hcdc->RxState = 0U;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  hcdc->TxCallBack = NULL;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

  if (hcdc->RxBuffer == NULL)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006054:	2b00      	cmp	r3, #0
 8006056:	d101      	bne.n	800605c <USBD_CDC_Init+0x1b0>
  {
    return (uint8_t)USBD_EMEM;
 8006058:	2302      	movs	r3, #2
 800605a:	e018      	b.n	800608e <USBD_CDC_Init+0x1e2>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	7c1b      	ldrb	r3, [r3, #16]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10a      	bne.n	800607a <USBD_CDC_Init+0x1ce>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006064:	4b0d      	ldr	r3, [pc, #52]	; (800609c <USBD_CDC_Init+0x1f0>)
 8006066:	7819      	ldrb	r1, [r3, #0]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800606e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f002 fb54 	bl	8008720 <USBD_LL_PrepareReceive>
 8006078:	e008      	b.n	800608c <USBD_CDC_Init+0x1e0>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800607a:	4b08      	ldr	r3, [pc, #32]	; (800609c <USBD_CDC_Init+0x1f0>)
 800607c:	7819      	ldrb	r1, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006084:	2340      	movs	r3, #64	; 0x40
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f002 fb4a 	bl	8008720 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	20000093 	.word	0x20000093
 800609c:	20000094 	.word	0x20000094
 80060a0:	20000095 	.word	0x20000095

080060a4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	460b      	mov	r3, r1
 80060ae:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80060b0:	4b3a      	ldr	r3, [pc, #232]	; (800619c <USBD_CDC_DeInit+0xf8>)
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	4619      	mov	r1, r3
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f002 fa69 	bl	800858e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80060bc:	4b37      	ldr	r3, [pc, #220]	; (800619c <USBD_CDC_DeInit+0xf8>)
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	f003 020f 	and.w	r2, r3, #15
 80060c4:	6879      	ldr	r1, [r7, #4]
 80060c6:	4613      	mov	r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	4413      	add	r3, r2
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	440b      	add	r3, r1
 80060d0:	3324      	adds	r3, #36	; 0x24
 80060d2:	2200      	movs	r2, #0
 80060d4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80060d6:	4b32      	ldr	r3, [pc, #200]	; (80061a0 <USBD_CDC_DeInit+0xfc>)
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	4619      	mov	r1, r3
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f002 fa56 	bl	800858e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80060e2:	4b2f      	ldr	r3, [pc, #188]	; (80061a0 <USBD_CDC_DeInit+0xfc>)
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	f003 020f 	and.w	r2, r3, #15
 80060ea:	6879      	ldr	r1, [r7, #4]
 80060ec:	4613      	mov	r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4413      	add	r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	440b      	add	r3, r1
 80060f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80060fa:	2200      	movs	r2, #0
 80060fc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80060fe:	4b29      	ldr	r3, [pc, #164]	; (80061a4 <USBD_CDC_DeInit+0x100>)
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	4619      	mov	r1, r3
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f002 fa42 	bl	800858e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800610a:	4b26      	ldr	r3, [pc, #152]	; (80061a4 <USBD_CDC_DeInit+0x100>)
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	f003 020f 	and.w	r2, r3, #15
 8006112:	6879      	ldr	r1, [r7, #4]
 8006114:	4613      	mov	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4413      	add	r3, r2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	440b      	add	r3, r1
 800611e:	3324      	adds	r3, #36	; 0x24
 8006120:	2200      	movs	r2, #0
 8006122:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006124:	4b1f      	ldr	r3, [pc, #124]	; (80061a4 <USBD_CDC_DeInit+0x100>)
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	f003 020f 	and.w	r2, r3, #15
 800612c:	6879      	ldr	r1, [r7, #4]
 800612e:	4613      	mov	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4413      	add	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	440b      	add	r3, r1
 8006138:	3326      	adds	r3, #38	; 0x26
 800613a:	2200      	movs	r2, #0
 800613c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	32b0      	adds	r2, #176	; 0xb0
 8006148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d01f      	beq.n	8006190 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	33b0      	adds	r3, #176	; 0xb0
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4413      	add	r3, r2
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	32b0      	adds	r2, #176	; 0xb0
 800616e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006172:	4618      	mov	r0, r3
 8006174:	f002 fb16 	bl	80087a4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	32b0      	adds	r2, #176	; 0xb0
 8006182:	2100      	movs	r1, #0
 8006184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3708      	adds	r7, #8
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	20000093 	.word	0x20000093
 80061a0:	20000094 	.word	0x20000094
 80061a4:	20000095 	.word	0x20000095

080061a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b086      	sub	sp, #24
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	32b0      	adds	r2, #176	; 0xb0
 80061bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061c0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80061c2:	2300      	movs	r3, #0
 80061c4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80061c6:	2300      	movs	r3, #0
 80061c8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e0bf      	b.n	8006358 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d050      	beq.n	8006286 <USBD_CDC_Setup+0xde>
 80061e4:	2b20      	cmp	r3, #32
 80061e6:	f040 80af 	bne.w	8006348 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	88db      	ldrh	r3, [r3, #6]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d03a      	beq.n	8006268 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	b25b      	sxtb	r3, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	da1b      	bge.n	8006234 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	33b0      	adds	r3, #176	; 0xb0
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	4413      	add	r3, r2
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006212:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006214:	683a      	ldr	r2, [r7, #0]
 8006216:	88d2      	ldrh	r2, [r2, #6]
 8006218:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	88db      	ldrh	r3, [r3, #6]
 800621e:	2b07      	cmp	r3, #7
 8006220:	bf28      	it	cs
 8006222:	2307      	movcs	r3, #7
 8006224:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	89fa      	ldrh	r2, [r7, #14]
 800622a:	4619      	mov	r1, r3
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f001 fd7b 	bl	8007d28 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006232:	e090      	b.n	8006356 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	785a      	ldrb	r2, [r3, #1]
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	88db      	ldrh	r3, [r3, #6]
 8006242:	2b3f      	cmp	r3, #63	; 0x3f
 8006244:	d803      	bhi.n	800624e <USBD_CDC_Setup+0xa6>
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	88db      	ldrh	r3, [r3, #6]
 800624a:	b2da      	uxtb	r2, r3
 800624c:	e000      	b.n	8006250 <USBD_CDC_Setup+0xa8>
 800624e:	2240      	movs	r2, #64	; 0x40
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006256:	6939      	ldr	r1, [r7, #16]
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800625e:	461a      	mov	r2, r3
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f001 fd8d 	bl	8007d80 <USBD_CtlPrepareRx>
      break;
 8006266:	e076      	b.n	8006356 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	33b0      	adds	r3, #176	; 0xb0
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4413      	add	r3, r2
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	7850      	ldrb	r0, [r2, #1]
 800627e:	2200      	movs	r2, #0
 8006280:	6839      	ldr	r1, [r7, #0]
 8006282:	4798      	blx	r3
      break;
 8006284:	e067      	b.n	8006356 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	785b      	ldrb	r3, [r3, #1]
 800628a:	2b0b      	cmp	r3, #11
 800628c:	d851      	bhi.n	8006332 <USBD_CDC_Setup+0x18a>
 800628e:	a201      	add	r2, pc, #4	; (adr r2, 8006294 <USBD_CDC_Setup+0xec>)
 8006290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006294:	080062c5 	.word	0x080062c5
 8006298:	08006341 	.word	0x08006341
 800629c:	08006333 	.word	0x08006333
 80062a0:	08006333 	.word	0x08006333
 80062a4:	08006333 	.word	0x08006333
 80062a8:	08006333 	.word	0x08006333
 80062ac:	08006333 	.word	0x08006333
 80062b0:	08006333 	.word	0x08006333
 80062b4:	08006333 	.word	0x08006333
 80062b8:	08006333 	.word	0x08006333
 80062bc:	080062ef 	.word	0x080062ef
 80062c0:	08006319 	.word	0x08006319
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b03      	cmp	r3, #3
 80062ce:	d107      	bne.n	80062e0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80062d0:	f107 030a 	add.w	r3, r7, #10
 80062d4:	2202      	movs	r2, #2
 80062d6:	4619      	mov	r1, r3
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f001 fd25 	bl	8007d28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062de:	e032      	b.n	8006346 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80062e0:	6839      	ldr	r1, [r7, #0]
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f001 fcaf 	bl	8007c46 <USBD_CtlError>
            ret = USBD_FAIL;
 80062e8:	2303      	movs	r3, #3
 80062ea:	75fb      	strb	r3, [r7, #23]
          break;
 80062ec:	e02b      	b.n	8006346 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b03      	cmp	r3, #3
 80062f8:	d107      	bne.n	800630a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80062fa:	f107 030d 	add.w	r3, r7, #13
 80062fe:	2201      	movs	r2, #1
 8006300:	4619      	mov	r1, r3
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f001 fd10 	bl	8007d28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006308:	e01d      	b.n	8006346 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800630a:	6839      	ldr	r1, [r7, #0]
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f001 fc9a 	bl	8007c46 <USBD_CtlError>
            ret = USBD_FAIL;
 8006312:	2303      	movs	r3, #3
 8006314:	75fb      	strb	r3, [r7, #23]
          break;
 8006316:	e016      	b.n	8006346 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800631e:	b2db      	uxtb	r3, r3
 8006320:	2b03      	cmp	r3, #3
 8006322:	d00f      	beq.n	8006344 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006324:	6839      	ldr	r1, [r7, #0]
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f001 fc8d 	bl	8007c46 <USBD_CtlError>
            ret = USBD_FAIL;
 800632c:	2303      	movs	r3, #3
 800632e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006330:	e008      	b.n	8006344 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006332:	6839      	ldr	r1, [r7, #0]
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f001 fc86 	bl	8007c46 <USBD_CtlError>
          ret = USBD_FAIL;
 800633a:	2303      	movs	r3, #3
 800633c:	75fb      	strb	r3, [r7, #23]
          break;
 800633e:	e002      	b.n	8006346 <USBD_CDC_Setup+0x19e>
          break;
 8006340:	bf00      	nop
 8006342:	e008      	b.n	8006356 <USBD_CDC_Setup+0x1ae>
          break;
 8006344:	bf00      	nop
      }
      break;
 8006346:	e006      	b.n	8006356 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006348:	6839      	ldr	r1, [r7, #0]
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f001 fc7b 	bl	8007c46 <USBD_CtlError>
      ret = USBD_FAIL;
 8006350:	2303      	movs	r3, #3
 8006352:	75fb      	strb	r3, [r7, #23]
      break;
 8006354:	bf00      	nop
  }

  return (uint8_t)ret;
 8006356:	7dfb      	ldrb	r3, [r7, #23]
}
 8006358:	4618      	mov	r0, r3
 800635a:	3718      	adds	r7, #24
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	460b      	mov	r3, r1
 800636a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006372:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	32b0      	adds	r2, #176	; 0xb0
 800637e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d101      	bne.n	800638a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006386:	2303      	movs	r3, #3
 8006388:	e056      	b.n	8006438 <USBD_CDC_DataIn+0xd8>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	32b0      	adds	r2, #176	; 0xb0
 8006394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006398:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800639a:	78fb      	ldrb	r3, [r7, #3]
 800639c:	f003 020f 	and.w	r2, r3, #15
 80063a0:	6879      	ldr	r1, [r7, #4]
 80063a2:	4613      	mov	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	440b      	add	r3, r1
 80063ac:	3318      	adds	r3, #24
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d02f      	beq.n	8006414 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80063b4:	78fb      	ldrb	r3, [r7, #3]
 80063b6:	f003 020f 	and.w	r2, r3, #15
 80063ba:	6879      	ldr	r1, [r7, #4]
 80063bc:	4613      	mov	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4413      	add	r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	440b      	add	r3, r1
 80063c6:	3318      	adds	r3, #24
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	78fb      	ldrb	r3, [r7, #3]
 80063cc:	f003 010f 	and.w	r1, r3, #15
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	460b      	mov	r3, r1
 80063d4:	00db      	lsls	r3, r3, #3
 80063d6:	440b      	add	r3, r1
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4403      	add	r3, r0
 80063dc:	3348      	adds	r3, #72	; 0x48
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	fbb2 f1f3 	udiv	r1, r2, r3
 80063e4:	fb01 f303 	mul.w	r3, r1, r3
 80063e8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d112      	bne.n	8006414 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80063ee:	78fb      	ldrb	r3, [r7, #3]
 80063f0:	f003 020f 	and.w	r2, r3, #15
 80063f4:	6879      	ldr	r1, [r7, #4]
 80063f6:	4613      	mov	r3, r2
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4413      	add	r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	440b      	add	r3, r1
 8006400:	3318      	adds	r3, #24
 8006402:	2200      	movs	r2, #0
 8006404:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006406:	78f9      	ldrb	r1, [r7, #3]
 8006408:	2300      	movs	r3, #0
 800640a:	2200      	movs	r2, #0
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f002 f966 	bl	80086de <USBD_LL_Transmit>
 8006412:	e010      	b.n	8006436 <USBD_CDC_DataIn+0xd6>
  }
  else
  {
    hcdc->TxState = 0U;
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	2200      	movs	r2, #0
 8006418:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    hcdc->TxState = 0U;
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	2200      	movs	r2, #0
 8006420:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
    if(hcdc->TxCallBack != NULL)
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800642a:	2b00      	cmp	r3, #0
 800642c:	d003      	beq.n	8006436 <USBD_CDC_DataIn+0xd6>
    {
    	hcdc->TxCallBack();
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006434:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	460b      	mov	r3, r1
 800644a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	32b0      	adds	r2, #176	; 0xb0
 8006456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800645a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	32b0      	adds	r2, #176	; 0xb0
 8006466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800646e:	2303      	movs	r3, #3
 8006470:	e01a      	b.n	80064a8 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006472:	78fb      	ldrb	r3, [r7, #3]
 8006474:	4619      	mov	r1, r3
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f002 f973 	bl	8008762 <USBD_LL_GetRxDataSize>
 800647c:	4602      	mov	r2, r0
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	33b0      	adds	r3, #176	; 0xb0
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	4413      	add	r3, r2
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80064a2:	4611      	mov	r1, r2
 80064a4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	32b0      	adds	r2, #176	; 0xb0
 80064c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064c6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d101      	bne.n	80064d2 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e025      	b.n	800651e <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	33b0      	adds	r3, #176	; 0xb0
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4413      	add	r3, r2
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d01a      	beq.n	800651c <USBD_CDC_EP0_RxReady+0x6c>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80064ec:	2bff      	cmp	r3, #255	; 0xff
 80064ee:	d015      	beq.n	800651c <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	33b0      	adds	r3, #176	; 0xb0
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4413      	add	r3, r2
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006508:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006510:	b292      	uxth	r2, r2
 8006512:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	22ff      	movs	r2, #255	; 0xff
 8006518:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
	...

08006528 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b086      	sub	sp, #24
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006530:	2182      	movs	r1, #130	; 0x82
 8006532:	4818      	ldr	r0, [pc, #96]	; (8006594 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006534:	f000 fd4f 	bl	8006fd6 <USBD_GetEpDesc>
 8006538:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800653a:	2101      	movs	r1, #1
 800653c:	4815      	ldr	r0, [pc, #84]	; (8006594 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800653e:	f000 fd4a 	bl	8006fd6 <USBD_GetEpDesc>
 8006542:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006544:	2181      	movs	r1, #129	; 0x81
 8006546:	4813      	ldr	r0, [pc, #76]	; (8006594 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006548:	f000 fd45 	bl	8006fd6 <USBD_GetEpDesc>
 800654c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d002      	beq.n	800655a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	2210      	movs	r2, #16
 8006558:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d006      	beq.n	800656e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	2200      	movs	r2, #0
 8006564:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006568:	711a      	strb	r2, [r3, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d006      	beq.n	8006582 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800657c:	711a      	strb	r2, [r3, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2243      	movs	r2, #67	; 0x43
 8006586:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006588:	4b02      	ldr	r3, [pc, #8]	; (8006594 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800658a:	4618      	mov	r0, r3
 800658c:	3718      	adds	r7, #24
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	20000050 	.word	0x20000050

08006598 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80065a0:	2182      	movs	r1, #130	; 0x82
 80065a2:	4818      	ldr	r0, [pc, #96]	; (8006604 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80065a4:	f000 fd17 	bl	8006fd6 <USBD_GetEpDesc>
 80065a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80065aa:	2101      	movs	r1, #1
 80065ac:	4815      	ldr	r0, [pc, #84]	; (8006604 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80065ae:	f000 fd12 	bl	8006fd6 <USBD_GetEpDesc>
 80065b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80065b4:	2181      	movs	r1, #129	; 0x81
 80065b6:	4813      	ldr	r0, [pc, #76]	; (8006604 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80065b8:	f000 fd0d 	bl	8006fd6 <USBD_GetEpDesc>
 80065bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d002      	beq.n	80065ca <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	2210      	movs	r2, #16
 80065c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d006      	beq.n	80065de <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	2200      	movs	r2, #0
 80065d4:	711a      	strb	r2, [r3, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f042 0202 	orr.w	r2, r2, #2
 80065dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d006      	beq.n	80065f2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2200      	movs	r2, #0
 80065e8:	711a      	strb	r2, [r3, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f042 0202 	orr.w	r2, r2, #2
 80065f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2243      	movs	r2, #67	; 0x43
 80065f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80065f8:	4b02      	ldr	r3, [pc, #8]	; (8006604 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3718      	adds	r7, #24
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	20000050 	.word	0x20000050

08006608 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b086      	sub	sp, #24
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006610:	2182      	movs	r1, #130	; 0x82
 8006612:	4818      	ldr	r0, [pc, #96]	; (8006674 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006614:	f000 fcdf 	bl	8006fd6 <USBD_GetEpDesc>
 8006618:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800661a:	2101      	movs	r1, #1
 800661c:	4815      	ldr	r0, [pc, #84]	; (8006674 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800661e:	f000 fcda 	bl	8006fd6 <USBD_GetEpDesc>
 8006622:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006624:	2181      	movs	r1, #129	; 0x81
 8006626:	4813      	ldr	r0, [pc, #76]	; (8006674 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006628:	f000 fcd5 	bl	8006fd6 <USBD_GetEpDesc>
 800662c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d002      	beq.n	800663a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	2210      	movs	r2, #16
 8006638:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d006      	beq.n	800664e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	2200      	movs	r2, #0
 8006644:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006648:	711a      	strb	r2, [r3, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d006      	beq.n	8006662 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800665c:	711a      	strb	r2, [r3, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2243      	movs	r2, #67	; 0x43
 8006666:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006668:	4b02      	ldr	r3, [pc, #8]	; (8006674 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800666a:	4618      	mov	r0, r3
 800666c:	3718      	adds	r7, #24
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	20000050 	.word	0x20000050

08006678 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	220a      	movs	r2, #10
 8006684:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006686:	4b03      	ldr	r3, [pc, #12]	; (8006694 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006688:	4618      	mov	r0, r3
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr
 8006694:	2000000c 	.word	0x2000000c

08006698 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d101      	bne.n	80066ac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e009      	b.n	80066c0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	33b0      	adds	r3, #176	; 0xb0
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	683a      	ldr	r2, [r7, #0]
 80066bc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b087      	sub	sp, #28
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	32b0      	adds	r2, #176	; 0xb0
 80066e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d101      	bne.n	80066f2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80066ee:	2303      	movs	r3, #3
 80066f0:	e008      	b.n	8006704 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	371c      	adds	r7, #28
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	32b0      	adds	r2, #176	; 0xb0
 8006724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006728:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d101      	bne.n	8006734 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006730:	2303      	movs	r3, #3
 8006732:	e004      	b.n	800673e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3714      	adds	r7, #20
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
	...

0800674c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	32b0      	adds	r2, #176	; 0xb0
 800675e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006762:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006764:	2301      	movs	r3, #1
 8006766:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	32b0      	adds	r2, #176	; 0xb0
 8006772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d101      	bne.n	800677e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800677a:	2303      	movs	r3, #3
 800677c:	e025      	b.n	80067ca <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006784:	2b00      	cmp	r3, #0
 8006786:	d11f      	bne.n	80067c8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	2201      	movs	r2, #1
 800678c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006790:	4b10      	ldr	r3, [pc, #64]	; (80067d4 <USBD_CDC_TransmitPacket+0x88>)
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	f003 020f 	and.w	r2, r3, #15
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	4613      	mov	r3, r2
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	4413      	add	r3, r2
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	4403      	add	r3, r0
 80067aa:	3318      	adds	r3, #24
 80067ac:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80067ae:	4b09      	ldr	r3, [pc, #36]	; (80067d4 <USBD_CDC_TransmitPacket+0x88>)
 80067b0:	7819      	ldrb	r1, [r3, #0]
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f001 ff8d 	bl	80086de <USBD_LL_Transmit>

    ret = USBD_OK;
 80067c4:	2300      	movs	r3, #0
 80067c6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80067c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	20000093 	.word	0x20000093

080067d8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	32b0      	adds	r2, #176	; 0xb0
 80067ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ee:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	32b0      	adds	r2, #176	; 0xb0
 80067fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d101      	bne.n	8006806 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006802:	2303      	movs	r3, #3
 8006804:	e018      	b.n	8006838 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	7c1b      	ldrb	r3, [r3, #16]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10a      	bne.n	8006824 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800680e:	4b0c      	ldr	r3, [pc, #48]	; (8006840 <USBD_CDC_ReceivePacket+0x68>)
 8006810:	7819      	ldrb	r1, [r3, #0]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006818:	f44f 7300 	mov.w	r3, #512	; 0x200
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f001 ff7f 	bl	8008720 <USBD_LL_PrepareReceive>
 8006822:	e008      	b.n	8006836 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006824:	4b06      	ldr	r3, [pc, #24]	; (8006840 <USBD_CDC_ReceivePacket+0x68>)
 8006826:	7819      	ldrb	r1, [r3, #0]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800682e:	2340      	movs	r3, #64	; 0x40
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f001 ff75 	bl	8008720 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	20000094 	.word	0x20000094

08006844 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	4613      	mov	r3, r2
 8006850:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d101      	bne.n	800685c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006858:	2303      	movs	r3, #3
 800685a:	e01f      	b.n	800689c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	68ba      	ldr	r2, [r7, #8]
 800687e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	79fa      	ldrb	r2, [r7, #7]
 800688e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f001 fdef 	bl	8008474 <USBD_LL_Init>
 8006896:	4603      	mov	r3, r0
 8006898:	75fb      	strb	r3, [r7, #23]

  return ret;
 800689a:	7dfb      	ldrb	r3, [r7, #23]
}
 800689c:	4618      	mov	r0, r3
 800689e:	3718      	adds	r7, #24
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80068ae:	2300      	movs	r3, #0
 80068b0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d101      	bne.n	80068bc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e025      	b.n	8006908 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	683a      	ldr	r2, [r7, #0]
 80068c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	32ae      	adds	r2, #174	; 0xae
 80068ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00f      	beq.n	80068f8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	32ae      	adds	r2, #174	; 0xae
 80068e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e8:	f107 020e 	add.w	r2, r7, #14
 80068ec:	4610      	mov	r0, r2
 80068ee:	4798      	blx	r3
 80068f0:	4602      	mov	r2, r0
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80068fe:	1c5a      	adds	r2, r3, #1
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3710      	adds	r7, #16
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f001 fdf7 	bl	800850c <USBD_LL_Start>
 800691e:	4603      	mov	r3, r0
}
 8006920:	4618      	mov	r0, r3
 8006922:	3708      	adds	r7, #8
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006930:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006932:	4618      	mov	r0, r3
 8006934:	370c      	adds	r7, #12
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr

0800693e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b084      	sub	sp, #16
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
 8006946:	460b      	mov	r3, r1
 8006948:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800694a:	2300      	movs	r3, #0
 800694c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006954:	2b00      	cmp	r3, #0
 8006956:	d009      	beq.n	800696c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	78fa      	ldrb	r2, [r7, #3]
 8006962:	4611      	mov	r1, r2
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	4798      	blx	r3
 8006968:	4603      	mov	r3, r0
 800696a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800696c:	7bfb      	ldrb	r3, [r7, #15]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3710      	adds	r7, #16
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b084      	sub	sp, #16
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
 800697e:	460b      	mov	r3, r1
 8006980:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006982:	2300      	movs	r3, #0
 8006984:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	78fa      	ldrb	r2, [r7, #3]
 8006990:	4611      	mov	r1, r2
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	4798      	blx	r3
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d001      	beq.n	80069a0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800699c:	2303      	movs	r3, #3
 800699e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80069a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b084      	sub	sp, #16
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
 80069b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80069ba:	6839      	ldr	r1, [r7, #0]
 80069bc:	4618      	mov	r0, r3
 80069be:	f001 f908 	bl	8007bd2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2201      	movs	r2, #1
 80069c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80069d0:	461a      	mov	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80069de:	f003 031f 	and.w	r3, r3, #31
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d01a      	beq.n	8006a1c <USBD_LL_SetupStage+0x72>
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d822      	bhi.n	8006a30 <USBD_LL_SetupStage+0x86>
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d002      	beq.n	80069f4 <USBD_LL_SetupStage+0x4a>
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d00a      	beq.n	8006a08 <USBD_LL_SetupStage+0x5e>
 80069f2:	e01d      	b.n	8006a30 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80069fa:	4619      	mov	r1, r3
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 fb5f 	bl	80070c0 <USBD_StdDevReq>
 8006a02:	4603      	mov	r3, r0
 8006a04:	73fb      	strb	r3, [r7, #15]
      break;
 8006a06:	e020      	b.n	8006a4a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a0e:	4619      	mov	r1, r3
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 fbc7 	bl	80071a4 <USBD_StdItfReq>
 8006a16:	4603      	mov	r3, r0
 8006a18:	73fb      	strb	r3, [r7, #15]
      break;
 8006a1a:	e016      	b.n	8006a4a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a22:	4619      	mov	r1, r3
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fc29 	bl	800727c <USBD_StdEPReq>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	73fb      	strb	r3, [r7, #15]
      break;
 8006a2e:	e00c      	b.n	8006a4a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006a36:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f001 fdc4 	bl	80085cc <USBD_LL_StallEP>
 8006a44:	4603      	mov	r3, r0
 8006a46:	73fb      	strb	r3, [r7, #15]
      break;
 8006a48:	bf00      	nop
  }

  return ret;
 8006a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	607a      	str	r2, [r7, #4]
 8006a60:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a62:	2300      	movs	r3, #0
 8006a64:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006a66:	7afb      	ldrb	r3, [r7, #11]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d16e      	bne.n	8006b4a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006a72:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a7a:	2b03      	cmp	r3, #3
 8006a7c:	f040 8098 	bne.w	8006bb0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	689a      	ldr	r2, [r3, #8]
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d913      	bls.n	8006ab4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	689a      	ldr	r2, [r3, #8]
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	1ad2      	subs	r2, r2, r3
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	68da      	ldr	r2, [r3, #12]
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	bf28      	it	cs
 8006aa6:	4613      	movcs	r3, r2
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	6879      	ldr	r1, [r7, #4]
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f001 f984 	bl	8007dba <USBD_CtlContinueRx>
 8006ab2:	e07d      	b.n	8006bb0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006aba:	f003 031f 	and.w	r3, r3, #31
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d014      	beq.n	8006aec <USBD_LL_DataOutStage+0x98>
 8006ac2:	2b02      	cmp	r3, #2
 8006ac4:	d81d      	bhi.n	8006b02 <USBD_LL_DataOutStage+0xae>
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d002      	beq.n	8006ad0 <USBD_LL_DataOutStage+0x7c>
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d003      	beq.n	8006ad6 <USBD_LL_DataOutStage+0x82>
 8006ace:	e018      	b.n	8006b02 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	75bb      	strb	r3, [r7, #22]
            break;
 8006ad4:	e018      	b.n	8006b08 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	4619      	mov	r1, r3
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f000 fa5e 	bl	8006fa2 <USBD_CoreFindIF>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	75bb      	strb	r3, [r7, #22]
            break;
 8006aea:	e00d      	b.n	8006b08 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	4619      	mov	r1, r3
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f000 fa60 	bl	8006fbc <USBD_CoreFindEP>
 8006afc:	4603      	mov	r3, r0
 8006afe:	75bb      	strb	r3, [r7, #22]
            break;
 8006b00:	e002      	b.n	8006b08 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006b02:	2300      	movs	r3, #0
 8006b04:	75bb      	strb	r3, [r7, #22]
            break;
 8006b06:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006b08:	7dbb      	ldrb	r3, [r7, #22]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d119      	bne.n	8006b42 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	2b03      	cmp	r3, #3
 8006b18:	d113      	bne.n	8006b42 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006b1a:	7dba      	ldrb	r2, [r7, #22]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	32ae      	adds	r2, #174	; 0xae
 8006b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00b      	beq.n	8006b42 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006b2a:	7dba      	ldrb	r2, [r7, #22]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006b32:	7dba      	ldrb	r2, [r7, #22]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	32ae      	adds	r2, #174	; 0xae
 8006b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f001 f94a 	bl	8007ddc <USBD_CtlSendStatus>
 8006b48:	e032      	b.n	8006bb0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006b4a:	7afb      	ldrb	r3, [r7, #11]
 8006b4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	4619      	mov	r1, r3
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f000 fa31 	bl	8006fbc <USBD_CoreFindEP>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b5e:	7dbb      	ldrb	r3, [r7, #22]
 8006b60:	2bff      	cmp	r3, #255	; 0xff
 8006b62:	d025      	beq.n	8006bb0 <USBD_LL_DataOutStage+0x15c>
 8006b64:	7dbb      	ldrb	r3, [r7, #22]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d122      	bne.n	8006bb0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b03      	cmp	r3, #3
 8006b74:	d117      	bne.n	8006ba6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006b76:	7dba      	ldrb	r2, [r7, #22]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	32ae      	adds	r2, #174	; 0xae
 8006b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00f      	beq.n	8006ba6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006b86:	7dba      	ldrb	r2, [r7, #22]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006b8e:	7dba      	ldrb	r2, [r7, #22]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	32ae      	adds	r2, #174	; 0xae
 8006b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	7afa      	ldrb	r2, [r7, #11]
 8006b9c:	4611      	mov	r1, r2
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	4798      	blx	r3
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006ba6:	7dfb      	ldrb	r3, [r7, #23]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d001      	beq.n	8006bb0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006bac:	7dfb      	ldrb	r3, [r7, #23]
 8006bae:	e000      	b.n	8006bb2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3718      	adds	r7, #24
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b086      	sub	sp, #24
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	60f8      	str	r0, [r7, #12]
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	607a      	str	r2, [r7, #4]
 8006bc6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006bc8:	7afb      	ldrb	r3, [r7, #11]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d16f      	bne.n	8006cae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	3314      	adds	r3, #20
 8006bd2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d15a      	bne.n	8006c94 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	689a      	ldr	r2, [r3, #8]
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d914      	bls.n	8006c14 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	689a      	ldr	r2, [r3, #8]
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	1ad2      	subs	r2, r2, r3
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	6879      	ldr	r1, [r7, #4]
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f001 f8ac 	bl	8007d5e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c06:	2300      	movs	r3, #0
 8006c08:	2200      	movs	r2, #0
 8006c0a:	2100      	movs	r1, #0
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f001 fd87 	bl	8008720 <USBD_LL_PrepareReceive>
 8006c12:	e03f      	b.n	8006c94 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	68da      	ldr	r2, [r3, #12]
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d11c      	bne.n	8006c5a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	685a      	ldr	r2, [r3, #4]
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d316      	bcc.n	8006c5a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	685a      	ldr	r2, [r3, #4]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d20f      	bcs.n	8006c5a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f001 f88d 	bl	8007d5e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	2200      	movs	r2, #0
 8006c50:	2100      	movs	r1, #0
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f001 fd64 	bl	8008720 <USBD_LL_PrepareReceive>
 8006c58:	e01c      	b.n	8006c94 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b03      	cmp	r3, #3
 8006c64:	d10f      	bne.n	8006c86 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d009      	beq.n	8006c86 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c86:	2180      	movs	r1, #128	; 0x80
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f001 fc9f 	bl	80085cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f001 f8b7 	bl	8007e02 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d03a      	beq.n	8006d14 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f7ff fe42 	bl	8006928 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006cac:	e032      	b.n	8006d14 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006cae:	7afb      	ldrb	r3, [r7, #11]
 8006cb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f000 f97f 	bl	8006fbc <USBD_CoreFindEP>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006cc2:	7dfb      	ldrb	r3, [r7, #23]
 8006cc4:	2bff      	cmp	r3, #255	; 0xff
 8006cc6:	d025      	beq.n	8006d14 <USBD_LL_DataInStage+0x15a>
 8006cc8:	7dfb      	ldrb	r3, [r7, #23]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d122      	bne.n	8006d14 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b03      	cmp	r3, #3
 8006cd8:	d11c      	bne.n	8006d14 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006cda:	7dfa      	ldrb	r2, [r7, #23]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	32ae      	adds	r2, #174	; 0xae
 8006ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d014      	beq.n	8006d14 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006cea:	7dfa      	ldrb	r2, [r7, #23]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006cf2:	7dfa      	ldrb	r2, [r7, #23]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	32ae      	adds	r2, #174	; 0xae
 8006cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	7afa      	ldrb	r2, [r7, #11]
 8006d00:	4611      	mov	r1, r2
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	4798      	blx	r3
 8006d06:	4603      	mov	r3, r0
 8006d08:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006d0a:	7dbb      	ldrb	r3, [r7, #22]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d001      	beq.n	8006d14 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006d10:	7dbb      	ldrb	r3, [r7, #22]
 8006d12:	e000      	b.n	8006d16 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3718      	adds	r7, #24
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b084      	sub	sp, #16
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d26:	2300      	movs	r3, #0
 8006d28:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d014      	beq.n	8006d84 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00e      	beq.n	8006d84 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	6852      	ldr	r2, [r2, #4]
 8006d72:	b2d2      	uxtb	r2, r2
 8006d74:	4611      	mov	r1, r2
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	4798      	blx	r3
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d001      	beq.n	8006d84 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006d80:	2303      	movs	r3, #3
 8006d82:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d84:	2340      	movs	r3, #64	; 0x40
 8006d86:	2200      	movs	r2, #0
 8006d88:	2100      	movs	r1, #0
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f001 fbd9 	bl	8008542 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2240      	movs	r2, #64	; 0x40
 8006d9c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006da0:	2340      	movs	r3, #64	; 0x40
 8006da2:	2200      	movs	r2, #0
 8006da4:	2180      	movs	r1, #128	; 0x80
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f001 fbcb 	bl	8008542 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2240      	movs	r2, #64	; 0x40
 8006db6:	621a      	str	r2, [r3, #32]

  return ret;
 8006db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b083      	sub	sp, #12
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
 8006dca:	460b      	mov	r3, r1
 8006dcc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	78fa      	ldrb	r2, [r7, #3]
 8006dd2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	370c      	adds	r7, #12
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr

08006de2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006de2:	b480      	push	{r7}
 8006de4:	b083      	sub	sp, #12
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006df0:	b2da      	uxtb	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2204      	movs	r2, #4
 8006dfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b083      	sub	sp, #12
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	2b04      	cmp	r3, #4
 8006e20:	d106      	bne.n	8006e30 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006e28:	b2da      	uxtb	r2, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	370c      	adds	r7, #12
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr

08006e3e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b082      	sub	sp, #8
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	2b03      	cmp	r3, #3
 8006e50:	d110      	bne.n	8006e74 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d00b      	beq.n	8006e74 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e62:	69db      	ldr	r3, [r3, #28]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d005      	beq.n	8006e74 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e6e:	69db      	ldr	r3, [r3, #28]
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b082      	sub	sp, #8
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
 8006e86:	460b      	mov	r3, r1
 8006e88:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	32ae      	adds	r2, #174	; 0xae
 8006e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d101      	bne.n	8006ea0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e01c      	b.n	8006eda <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	2b03      	cmp	r3, #3
 8006eaa:	d115      	bne.n	8006ed8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	32ae      	adds	r2, #174	; 0xae
 8006eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eba:	6a1b      	ldr	r3, [r3, #32]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00b      	beq.n	8006ed8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	32ae      	adds	r2, #174	; 0xae
 8006eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ece:	6a1b      	ldr	r3, [r3, #32]
 8006ed0:	78fa      	ldrb	r2, [r7, #3]
 8006ed2:	4611      	mov	r1, r2
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3708      	adds	r7, #8
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b082      	sub	sp, #8
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	460b      	mov	r3, r1
 8006eec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	32ae      	adds	r2, #174	; 0xae
 8006ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d101      	bne.n	8006f04 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e01c      	b.n	8006f3e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b03      	cmp	r3, #3
 8006f0e:	d115      	bne.n	8006f3c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	32ae      	adds	r2, #174	; 0xae
 8006f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00b      	beq.n	8006f3c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	32ae      	adds	r2, #174	; 0xae
 8006f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f34:	78fa      	ldrb	r2, [r7, #3]
 8006f36:	4611      	mov	r1, r2
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3708      	adds	r7, #8
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006f46:	b480      	push	{r7}
 8006f48:	b083      	sub	sp, #12
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006f64:	2300      	movs	r3, #0
 8006f66:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00e      	beq.n	8006f98 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	6852      	ldr	r2, [r2, #4]
 8006f86:	b2d2      	uxtb	r2, r2
 8006f88:	4611      	mov	r1, r2
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	4798      	blx	r3
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d001      	beq.n	8006f98 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006f94:	2303      	movs	r3, #3
 8006f96:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b083      	sub	sp, #12
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
 8006faa:	460b      	mov	r3, r1
 8006fac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006fae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006fc8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	370c      	adds	r7, #12
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr

08006fd6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b086      	sub	sp, #24
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
 8006fde:	460b      	mov	r3, r1
 8006fe0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006fea:	2300      	movs	r3, #0
 8006fec:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	885b      	ldrh	r3, [r3, #2]
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d920      	bls.n	8007040 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	b29b      	uxth	r3, r3
 8007004:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007006:	e013      	b.n	8007030 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007008:	f107 030a 	add.w	r3, r7, #10
 800700c:	4619      	mov	r1, r3
 800700e:	6978      	ldr	r0, [r7, #20]
 8007010:	f000 f81b 	bl	800704a <USBD_GetNextDesc>
 8007014:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	785b      	ldrb	r3, [r3, #1]
 800701a:	2b05      	cmp	r3, #5
 800701c:	d108      	bne.n	8007030 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	789b      	ldrb	r3, [r3, #2]
 8007026:	78fa      	ldrb	r2, [r7, #3]
 8007028:	429a      	cmp	r2, r3
 800702a:	d008      	beq.n	800703e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800702c:	2300      	movs	r3, #0
 800702e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	885b      	ldrh	r3, [r3, #2]
 8007034:	b29a      	uxth	r2, r3
 8007036:	897b      	ldrh	r3, [r7, #10]
 8007038:	429a      	cmp	r2, r3
 800703a:	d8e5      	bhi.n	8007008 <USBD_GetEpDesc+0x32>
 800703c:	e000      	b.n	8007040 <USBD_GetEpDesc+0x6a>
          break;
 800703e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007040:	693b      	ldr	r3, [r7, #16]
}
 8007042:	4618      	mov	r0, r3
 8007044:	3718      	adds	r7, #24
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800704a:	b480      	push	{r7}
 800704c:	b085      	sub	sp, #20
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
 8007052:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	881a      	ldrh	r2, [r3, #0]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	b29b      	uxth	r3, r3
 8007062:	4413      	add	r3, r2
 8007064:	b29a      	uxth	r2, r3
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	461a      	mov	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4413      	add	r3, r2
 8007074:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007076:	68fb      	ldr	r3, [r7, #12]
}
 8007078:	4618      	mov	r0, r3
 800707a:	3714      	adds	r7, #20
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007084:	b480      	push	{r7}
 8007086:	b087      	sub	sp, #28
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	3301      	adds	r3, #1
 800709a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80070a2:	8a3b      	ldrh	r3, [r7, #16]
 80070a4:	021b      	lsls	r3, r3, #8
 80070a6:	b21a      	sxth	r2, r3
 80070a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	b21b      	sxth	r3, r3
 80070b0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80070b2:	89fb      	ldrh	r3, [r7, #14]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	371c      	adds	r7, #28
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070ca:	2300      	movs	r3, #0
 80070cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070d6:	2b40      	cmp	r3, #64	; 0x40
 80070d8:	d005      	beq.n	80070e6 <USBD_StdDevReq+0x26>
 80070da:	2b40      	cmp	r3, #64	; 0x40
 80070dc:	d857      	bhi.n	800718e <USBD_StdDevReq+0xce>
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00f      	beq.n	8007102 <USBD_StdDevReq+0x42>
 80070e2:	2b20      	cmp	r3, #32
 80070e4:	d153      	bne.n	800718e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	32ae      	adds	r2, #174	; 0xae
 80070f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	6839      	ldr	r1, [r7, #0]
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	4798      	blx	r3
 80070fc:	4603      	mov	r3, r0
 80070fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007100:	e04a      	b.n	8007198 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	785b      	ldrb	r3, [r3, #1]
 8007106:	2b09      	cmp	r3, #9
 8007108:	d83b      	bhi.n	8007182 <USBD_StdDevReq+0xc2>
 800710a:	a201      	add	r2, pc, #4	; (adr r2, 8007110 <USBD_StdDevReq+0x50>)
 800710c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007110:	08007165 	.word	0x08007165
 8007114:	08007179 	.word	0x08007179
 8007118:	08007183 	.word	0x08007183
 800711c:	0800716f 	.word	0x0800716f
 8007120:	08007183 	.word	0x08007183
 8007124:	08007143 	.word	0x08007143
 8007128:	08007139 	.word	0x08007139
 800712c:	08007183 	.word	0x08007183
 8007130:	0800715b 	.word	0x0800715b
 8007134:	0800714d 	.word	0x0800714d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007138:	6839      	ldr	r1, [r7, #0]
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fa3c 	bl	80075b8 <USBD_GetDescriptor>
          break;
 8007140:	e024      	b.n	800718c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007142:	6839      	ldr	r1, [r7, #0]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 fba1 	bl	800788c <USBD_SetAddress>
          break;
 800714a:	e01f      	b.n	800718c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800714c:	6839      	ldr	r1, [r7, #0]
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 fbe0 	bl	8007914 <USBD_SetConfig>
 8007154:	4603      	mov	r3, r0
 8007156:	73fb      	strb	r3, [r7, #15]
          break;
 8007158:	e018      	b.n	800718c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800715a:	6839      	ldr	r1, [r7, #0]
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 fc83 	bl	8007a68 <USBD_GetConfig>
          break;
 8007162:	e013      	b.n	800718c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007164:	6839      	ldr	r1, [r7, #0]
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 fcb4 	bl	8007ad4 <USBD_GetStatus>
          break;
 800716c:	e00e      	b.n	800718c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800716e:	6839      	ldr	r1, [r7, #0]
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 fce3 	bl	8007b3c <USBD_SetFeature>
          break;
 8007176:	e009      	b.n	800718c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007178:	6839      	ldr	r1, [r7, #0]
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 fd07 	bl	8007b8e <USBD_ClrFeature>
          break;
 8007180:	e004      	b.n	800718c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007182:	6839      	ldr	r1, [r7, #0]
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 fd5e 	bl	8007c46 <USBD_CtlError>
          break;
 800718a:	bf00      	nop
      }
      break;
 800718c:	e004      	b.n	8007198 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800718e:	6839      	ldr	r1, [r7, #0]
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fd58 	bl	8007c46 <USBD_CtlError>
      break;
 8007196:	bf00      	nop
  }

  return ret;
 8007198:	7bfb      	ldrb	r3, [r7, #15]
}
 800719a:	4618      	mov	r0, r3
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop

080071a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071ae:	2300      	movs	r3, #0
 80071b0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071ba:	2b40      	cmp	r3, #64	; 0x40
 80071bc:	d005      	beq.n	80071ca <USBD_StdItfReq+0x26>
 80071be:	2b40      	cmp	r3, #64	; 0x40
 80071c0:	d852      	bhi.n	8007268 <USBD_StdItfReq+0xc4>
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d001      	beq.n	80071ca <USBD_StdItfReq+0x26>
 80071c6:	2b20      	cmp	r3, #32
 80071c8:	d14e      	bne.n	8007268 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	3b01      	subs	r3, #1
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	d840      	bhi.n	800725a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	889b      	ldrh	r3, [r3, #4]
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d836      	bhi.n	8007250 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	889b      	ldrh	r3, [r3, #4]
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	4619      	mov	r1, r3
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f7ff fed9 	bl	8006fa2 <USBD_CoreFindIF>
 80071f0:	4603      	mov	r3, r0
 80071f2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071f4:	7bbb      	ldrb	r3, [r7, #14]
 80071f6:	2bff      	cmp	r3, #255	; 0xff
 80071f8:	d01d      	beq.n	8007236 <USBD_StdItfReq+0x92>
 80071fa:	7bbb      	ldrb	r3, [r7, #14]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d11a      	bne.n	8007236 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007200:	7bba      	ldrb	r2, [r7, #14]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	32ae      	adds	r2, #174	; 0xae
 8007206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00f      	beq.n	8007230 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007210:	7bba      	ldrb	r2, [r7, #14]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007218:	7bba      	ldrb	r2, [r7, #14]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	32ae      	adds	r2, #174	; 0xae
 800721e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	6839      	ldr	r1, [r7, #0]
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	4798      	blx	r3
 800722a:	4603      	mov	r3, r0
 800722c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800722e:	e004      	b.n	800723a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007230:	2303      	movs	r3, #3
 8007232:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007234:	e001      	b.n	800723a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007236:	2303      	movs	r3, #3
 8007238:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	88db      	ldrh	r3, [r3, #6]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d110      	bne.n	8007264 <USBD_StdItfReq+0xc0>
 8007242:	7bfb      	ldrb	r3, [r7, #15]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d10d      	bne.n	8007264 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fdc7 	bl	8007ddc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800724e:	e009      	b.n	8007264 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007250:	6839      	ldr	r1, [r7, #0]
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 fcf7 	bl	8007c46 <USBD_CtlError>
          break;
 8007258:	e004      	b.n	8007264 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800725a:	6839      	ldr	r1, [r7, #0]
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 fcf2 	bl	8007c46 <USBD_CtlError>
          break;
 8007262:	e000      	b.n	8007266 <USBD_StdItfReq+0xc2>
          break;
 8007264:	bf00      	nop
      }
      break;
 8007266:	e004      	b.n	8007272 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007268:	6839      	ldr	r1, [r7, #0]
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fceb 	bl	8007c46 <USBD_CtlError>
      break;
 8007270:	bf00      	nop
  }

  return ret;
 8007272:	7bfb      	ldrb	r3, [r7, #15]
}
 8007274:	4618      	mov	r0, r3
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007286:	2300      	movs	r3, #0
 8007288:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	889b      	ldrh	r3, [r3, #4]
 800728e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007298:	2b40      	cmp	r3, #64	; 0x40
 800729a:	d007      	beq.n	80072ac <USBD_StdEPReq+0x30>
 800729c:	2b40      	cmp	r3, #64	; 0x40
 800729e:	f200 817f 	bhi.w	80075a0 <USBD_StdEPReq+0x324>
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d02a      	beq.n	80072fc <USBD_StdEPReq+0x80>
 80072a6:	2b20      	cmp	r3, #32
 80072a8:	f040 817a 	bne.w	80075a0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80072ac:	7bbb      	ldrb	r3, [r7, #14]
 80072ae:	4619      	mov	r1, r3
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f7ff fe83 	bl	8006fbc <USBD_CoreFindEP>
 80072b6:	4603      	mov	r3, r0
 80072b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072ba:	7b7b      	ldrb	r3, [r7, #13]
 80072bc:	2bff      	cmp	r3, #255	; 0xff
 80072be:	f000 8174 	beq.w	80075aa <USBD_StdEPReq+0x32e>
 80072c2:	7b7b      	ldrb	r3, [r7, #13]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f040 8170 	bne.w	80075aa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80072ca:	7b7a      	ldrb	r2, [r7, #13]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80072d2:	7b7a      	ldrb	r2, [r7, #13]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	32ae      	adds	r2, #174	; 0xae
 80072d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f000 8163 	beq.w	80075aa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80072e4:	7b7a      	ldrb	r2, [r7, #13]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	32ae      	adds	r2, #174	; 0xae
 80072ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	6839      	ldr	r1, [r7, #0]
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	4798      	blx	r3
 80072f6:	4603      	mov	r3, r0
 80072f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80072fa:	e156      	b.n	80075aa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	785b      	ldrb	r3, [r3, #1]
 8007300:	2b03      	cmp	r3, #3
 8007302:	d008      	beq.n	8007316 <USBD_StdEPReq+0x9a>
 8007304:	2b03      	cmp	r3, #3
 8007306:	f300 8145 	bgt.w	8007594 <USBD_StdEPReq+0x318>
 800730a:	2b00      	cmp	r3, #0
 800730c:	f000 809b 	beq.w	8007446 <USBD_StdEPReq+0x1ca>
 8007310:	2b01      	cmp	r3, #1
 8007312:	d03c      	beq.n	800738e <USBD_StdEPReq+0x112>
 8007314:	e13e      	b.n	8007594 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b02      	cmp	r3, #2
 8007320:	d002      	beq.n	8007328 <USBD_StdEPReq+0xac>
 8007322:	2b03      	cmp	r3, #3
 8007324:	d016      	beq.n	8007354 <USBD_StdEPReq+0xd8>
 8007326:	e02c      	b.n	8007382 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007328:	7bbb      	ldrb	r3, [r7, #14]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00d      	beq.n	800734a <USBD_StdEPReq+0xce>
 800732e:	7bbb      	ldrb	r3, [r7, #14]
 8007330:	2b80      	cmp	r3, #128	; 0x80
 8007332:	d00a      	beq.n	800734a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007334:	7bbb      	ldrb	r3, [r7, #14]
 8007336:	4619      	mov	r1, r3
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f001 f947 	bl	80085cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800733e:	2180      	movs	r1, #128	; 0x80
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f001 f943 	bl	80085cc <USBD_LL_StallEP>
 8007346:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007348:	e020      	b.n	800738c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800734a:	6839      	ldr	r1, [r7, #0]
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 fc7a 	bl	8007c46 <USBD_CtlError>
              break;
 8007352:	e01b      	b.n	800738c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	885b      	ldrh	r3, [r3, #2]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d10e      	bne.n	800737a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800735c:	7bbb      	ldrb	r3, [r7, #14]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00b      	beq.n	800737a <USBD_StdEPReq+0xfe>
 8007362:	7bbb      	ldrb	r3, [r7, #14]
 8007364:	2b80      	cmp	r3, #128	; 0x80
 8007366:	d008      	beq.n	800737a <USBD_StdEPReq+0xfe>
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	88db      	ldrh	r3, [r3, #6]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d104      	bne.n	800737a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007370:	7bbb      	ldrb	r3, [r7, #14]
 8007372:	4619      	mov	r1, r3
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f001 f929 	bl	80085cc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fd2e 	bl	8007ddc <USBD_CtlSendStatus>

              break;
 8007380:	e004      	b.n	800738c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007382:	6839      	ldr	r1, [r7, #0]
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fc5e 	bl	8007c46 <USBD_CtlError>
              break;
 800738a:	bf00      	nop
          }
          break;
 800738c:	e107      	b.n	800759e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b02      	cmp	r3, #2
 8007398:	d002      	beq.n	80073a0 <USBD_StdEPReq+0x124>
 800739a:	2b03      	cmp	r3, #3
 800739c:	d016      	beq.n	80073cc <USBD_StdEPReq+0x150>
 800739e:	e04b      	b.n	8007438 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073a0:	7bbb      	ldrb	r3, [r7, #14]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00d      	beq.n	80073c2 <USBD_StdEPReq+0x146>
 80073a6:	7bbb      	ldrb	r3, [r7, #14]
 80073a8:	2b80      	cmp	r3, #128	; 0x80
 80073aa:	d00a      	beq.n	80073c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80073ac:	7bbb      	ldrb	r3, [r7, #14]
 80073ae:	4619      	mov	r1, r3
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f001 f90b 	bl	80085cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80073b6:	2180      	movs	r1, #128	; 0x80
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f001 f907 	bl	80085cc <USBD_LL_StallEP>
 80073be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073c0:	e040      	b.n	8007444 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80073c2:	6839      	ldr	r1, [r7, #0]
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fc3e 	bl	8007c46 <USBD_CtlError>
              break;
 80073ca:	e03b      	b.n	8007444 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	885b      	ldrh	r3, [r3, #2]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d136      	bne.n	8007442 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80073d4:	7bbb      	ldrb	r3, [r7, #14]
 80073d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d004      	beq.n	80073e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80073de:	7bbb      	ldrb	r3, [r7, #14]
 80073e0:	4619      	mov	r1, r3
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f001 f911 	bl	800860a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 fcf7 	bl	8007ddc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80073ee:	7bbb      	ldrb	r3, [r7, #14]
 80073f0:	4619      	mov	r1, r3
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f7ff fde2 	bl	8006fbc <USBD_CoreFindEP>
 80073f8:	4603      	mov	r3, r0
 80073fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80073fc:	7b7b      	ldrb	r3, [r7, #13]
 80073fe:	2bff      	cmp	r3, #255	; 0xff
 8007400:	d01f      	beq.n	8007442 <USBD_StdEPReq+0x1c6>
 8007402:	7b7b      	ldrb	r3, [r7, #13]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d11c      	bne.n	8007442 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007408:	7b7a      	ldrb	r2, [r7, #13]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007410:	7b7a      	ldrb	r2, [r7, #13]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	32ae      	adds	r2, #174	; 0xae
 8007416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d010      	beq.n	8007442 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007420:	7b7a      	ldrb	r2, [r7, #13]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	32ae      	adds	r2, #174	; 0xae
 8007426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	6839      	ldr	r1, [r7, #0]
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	4798      	blx	r3
 8007432:	4603      	mov	r3, r0
 8007434:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007436:	e004      	b.n	8007442 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007438:	6839      	ldr	r1, [r7, #0]
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 fc03 	bl	8007c46 <USBD_CtlError>
              break;
 8007440:	e000      	b.n	8007444 <USBD_StdEPReq+0x1c8>
              break;
 8007442:	bf00      	nop
          }
          break;
 8007444:	e0ab      	b.n	800759e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b02      	cmp	r3, #2
 8007450:	d002      	beq.n	8007458 <USBD_StdEPReq+0x1dc>
 8007452:	2b03      	cmp	r3, #3
 8007454:	d032      	beq.n	80074bc <USBD_StdEPReq+0x240>
 8007456:	e097      	b.n	8007588 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007458:	7bbb      	ldrb	r3, [r7, #14]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d007      	beq.n	800746e <USBD_StdEPReq+0x1f2>
 800745e:	7bbb      	ldrb	r3, [r7, #14]
 8007460:	2b80      	cmp	r3, #128	; 0x80
 8007462:	d004      	beq.n	800746e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007464:	6839      	ldr	r1, [r7, #0]
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fbed 	bl	8007c46 <USBD_CtlError>
                break;
 800746c:	e091      	b.n	8007592 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800746e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007472:	2b00      	cmp	r3, #0
 8007474:	da0b      	bge.n	800748e <USBD_StdEPReq+0x212>
 8007476:	7bbb      	ldrb	r3, [r7, #14]
 8007478:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800747c:	4613      	mov	r3, r2
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	4413      	add	r3, r2
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	3310      	adds	r3, #16
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	4413      	add	r3, r2
 800748a:	3304      	adds	r3, #4
 800748c:	e00b      	b.n	80074a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800748e:	7bbb      	ldrb	r3, [r7, #14]
 8007490:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007494:	4613      	mov	r3, r2
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	4413      	add	r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	4413      	add	r3, r2
 80074a4:	3304      	adds	r3, #4
 80074a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	2200      	movs	r2, #0
 80074ac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	2202      	movs	r2, #2
 80074b2:	4619      	mov	r1, r3
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 fc37 	bl	8007d28 <USBD_CtlSendData>
              break;
 80074ba:	e06a      	b.n	8007592 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80074bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	da11      	bge.n	80074e8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80074c4:	7bbb      	ldrb	r3, [r7, #14]
 80074c6:	f003 020f 	and.w	r2, r3, #15
 80074ca:	6879      	ldr	r1, [r7, #4]
 80074cc:	4613      	mov	r3, r2
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	4413      	add	r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	440b      	add	r3, r1
 80074d6:	3324      	adds	r3, #36	; 0x24
 80074d8:	881b      	ldrh	r3, [r3, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d117      	bne.n	800750e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80074de:	6839      	ldr	r1, [r7, #0]
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 fbb0 	bl	8007c46 <USBD_CtlError>
                  break;
 80074e6:	e054      	b.n	8007592 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80074e8:	7bbb      	ldrb	r3, [r7, #14]
 80074ea:	f003 020f 	and.w	r2, r3, #15
 80074ee:	6879      	ldr	r1, [r7, #4]
 80074f0:	4613      	mov	r3, r2
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	4413      	add	r3, r2
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	440b      	add	r3, r1
 80074fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80074fe:	881b      	ldrh	r3, [r3, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d104      	bne.n	800750e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007504:	6839      	ldr	r1, [r7, #0]
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 fb9d 	bl	8007c46 <USBD_CtlError>
                  break;
 800750c:	e041      	b.n	8007592 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800750e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007512:	2b00      	cmp	r3, #0
 8007514:	da0b      	bge.n	800752e <USBD_StdEPReq+0x2b2>
 8007516:	7bbb      	ldrb	r3, [r7, #14]
 8007518:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800751c:	4613      	mov	r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4413      	add	r3, r2
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	3310      	adds	r3, #16
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	4413      	add	r3, r2
 800752a:	3304      	adds	r3, #4
 800752c:	e00b      	b.n	8007546 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800752e:	7bbb      	ldrb	r3, [r7, #14]
 8007530:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007534:	4613      	mov	r3, r2
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	4413      	add	r3, r2
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	4413      	add	r3, r2
 8007544:	3304      	adds	r3, #4
 8007546:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007548:	7bbb      	ldrb	r3, [r7, #14]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d002      	beq.n	8007554 <USBD_StdEPReq+0x2d8>
 800754e:	7bbb      	ldrb	r3, [r7, #14]
 8007550:	2b80      	cmp	r3, #128	; 0x80
 8007552:	d103      	bne.n	800755c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	2200      	movs	r2, #0
 8007558:	601a      	str	r2, [r3, #0]
 800755a:	e00e      	b.n	800757a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800755c:	7bbb      	ldrb	r3, [r7, #14]
 800755e:	4619      	mov	r1, r3
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f001 f871 	bl	8008648 <USBD_LL_IsStallEP>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d003      	beq.n	8007574 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	2201      	movs	r2, #1
 8007570:	601a      	str	r2, [r3, #0]
 8007572:	e002      	b.n	800757a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	2200      	movs	r2, #0
 8007578:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	2202      	movs	r2, #2
 800757e:	4619      	mov	r1, r3
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 fbd1 	bl	8007d28 <USBD_CtlSendData>
              break;
 8007586:	e004      	b.n	8007592 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007588:	6839      	ldr	r1, [r7, #0]
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 fb5b 	bl	8007c46 <USBD_CtlError>
              break;
 8007590:	bf00      	nop
          }
          break;
 8007592:	e004      	b.n	800759e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007594:	6839      	ldr	r1, [r7, #0]
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 fb55 	bl	8007c46 <USBD_CtlError>
          break;
 800759c:	bf00      	nop
      }
      break;
 800759e:	e005      	b.n	80075ac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80075a0:	6839      	ldr	r1, [r7, #0]
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fb4f 	bl	8007c46 <USBD_CtlError>
      break;
 80075a8:	e000      	b.n	80075ac <USBD_StdEPReq+0x330>
      break;
 80075aa:	bf00      	nop
  }

  return ret;
 80075ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
	...

080075b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075c2:	2300      	movs	r3, #0
 80075c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80075c6:	2300      	movs	r3, #0
 80075c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80075ca:	2300      	movs	r3, #0
 80075cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	885b      	ldrh	r3, [r3, #2]
 80075d2:	0a1b      	lsrs	r3, r3, #8
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	3b01      	subs	r3, #1
 80075d8:	2b06      	cmp	r3, #6
 80075da:	f200 8128 	bhi.w	800782e <USBD_GetDescriptor+0x276>
 80075de:	a201      	add	r2, pc, #4	; (adr r2, 80075e4 <USBD_GetDescriptor+0x2c>)
 80075e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e4:	08007601 	.word	0x08007601
 80075e8:	08007619 	.word	0x08007619
 80075ec:	08007659 	.word	0x08007659
 80075f0:	0800782f 	.word	0x0800782f
 80075f4:	0800782f 	.word	0x0800782f
 80075f8:	080077cf 	.word	0x080077cf
 80075fc:	080077fb 	.word	0x080077fb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	7c12      	ldrb	r2, [r2, #16]
 800760c:	f107 0108 	add.w	r1, r7, #8
 8007610:	4610      	mov	r0, r2
 8007612:	4798      	blx	r3
 8007614:	60f8      	str	r0, [r7, #12]
      break;
 8007616:	e112      	b.n	800783e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	7c1b      	ldrb	r3, [r3, #16]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10d      	bne.n	800763c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007628:	f107 0208 	add.w	r2, r7, #8
 800762c:	4610      	mov	r0, r2
 800762e:	4798      	blx	r3
 8007630:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	3301      	adds	r3, #1
 8007636:	2202      	movs	r2, #2
 8007638:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800763a:	e100      	b.n	800783e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007644:	f107 0208 	add.w	r2, r7, #8
 8007648:	4610      	mov	r0, r2
 800764a:	4798      	blx	r3
 800764c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	3301      	adds	r3, #1
 8007652:	2202      	movs	r2, #2
 8007654:	701a      	strb	r2, [r3, #0]
      break;
 8007656:	e0f2      	b.n	800783e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	885b      	ldrh	r3, [r3, #2]
 800765c:	b2db      	uxtb	r3, r3
 800765e:	2b05      	cmp	r3, #5
 8007660:	f200 80ac 	bhi.w	80077bc <USBD_GetDescriptor+0x204>
 8007664:	a201      	add	r2, pc, #4	; (adr r2, 800766c <USBD_GetDescriptor+0xb4>)
 8007666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766a:	bf00      	nop
 800766c:	08007685 	.word	0x08007685
 8007670:	080076b9 	.word	0x080076b9
 8007674:	080076ed 	.word	0x080076ed
 8007678:	08007721 	.word	0x08007721
 800767c:	08007755 	.word	0x08007755
 8007680:	08007789 	.word	0x08007789
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00b      	beq.n	80076a8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	7c12      	ldrb	r2, [r2, #16]
 800769c:	f107 0108 	add.w	r1, r7, #8
 80076a0:	4610      	mov	r0, r2
 80076a2:	4798      	blx	r3
 80076a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076a6:	e091      	b.n	80077cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076a8:	6839      	ldr	r1, [r7, #0]
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 facb 	bl	8007c46 <USBD_CtlError>
            err++;
 80076b0:	7afb      	ldrb	r3, [r7, #11]
 80076b2:	3301      	adds	r3, #1
 80076b4:	72fb      	strb	r3, [r7, #11]
          break;
 80076b6:	e089      	b.n	80077cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00b      	beq.n	80076dc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	7c12      	ldrb	r2, [r2, #16]
 80076d0:	f107 0108 	add.w	r1, r7, #8
 80076d4:	4610      	mov	r0, r2
 80076d6:	4798      	blx	r3
 80076d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076da:	e077      	b.n	80077cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076dc:	6839      	ldr	r1, [r7, #0]
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 fab1 	bl	8007c46 <USBD_CtlError>
            err++;
 80076e4:	7afb      	ldrb	r3, [r7, #11]
 80076e6:	3301      	adds	r3, #1
 80076e8:	72fb      	strb	r3, [r7, #11]
          break;
 80076ea:	e06f      	b.n	80077cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d00b      	beq.n	8007710 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	7c12      	ldrb	r2, [r2, #16]
 8007704:	f107 0108 	add.w	r1, r7, #8
 8007708:	4610      	mov	r0, r2
 800770a:	4798      	blx	r3
 800770c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800770e:	e05d      	b.n	80077cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007710:	6839      	ldr	r1, [r7, #0]
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 fa97 	bl	8007c46 <USBD_CtlError>
            err++;
 8007718:	7afb      	ldrb	r3, [r7, #11]
 800771a:	3301      	adds	r3, #1
 800771c:	72fb      	strb	r3, [r7, #11]
          break;
 800771e:	e055      	b.n	80077cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00b      	beq.n	8007744 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	7c12      	ldrb	r2, [r2, #16]
 8007738:	f107 0108 	add.w	r1, r7, #8
 800773c:	4610      	mov	r0, r2
 800773e:	4798      	blx	r3
 8007740:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007742:	e043      	b.n	80077cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007744:	6839      	ldr	r1, [r7, #0]
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fa7d 	bl	8007c46 <USBD_CtlError>
            err++;
 800774c:	7afb      	ldrb	r3, [r7, #11]
 800774e:	3301      	adds	r3, #1
 8007750:	72fb      	strb	r3, [r7, #11]
          break;
 8007752:	e03b      	b.n	80077cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800775a:	695b      	ldr	r3, [r3, #20]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00b      	beq.n	8007778 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007766:	695b      	ldr	r3, [r3, #20]
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	7c12      	ldrb	r2, [r2, #16]
 800776c:	f107 0108 	add.w	r1, r7, #8
 8007770:	4610      	mov	r0, r2
 8007772:	4798      	blx	r3
 8007774:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007776:	e029      	b.n	80077cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007778:	6839      	ldr	r1, [r7, #0]
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fa63 	bl	8007c46 <USBD_CtlError>
            err++;
 8007780:	7afb      	ldrb	r3, [r7, #11]
 8007782:	3301      	adds	r3, #1
 8007784:	72fb      	strb	r3, [r7, #11]
          break;
 8007786:	e021      	b.n	80077cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800778e:	699b      	ldr	r3, [r3, #24]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00b      	beq.n	80077ac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800779a:	699b      	ldr	r3, [r3, #24]
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	7c12      	ldrb	r2, [r2, #16]
 80077a0:	f107 0108 	add.w	r1, r7, #8
 80077a4:	4610      	mov	r0, r2
 80077a6:	4798      	blx	r3
 80077a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077aa:	e00f      	b.n	80077cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077ac:	6839      	ldr	r1, [r7, #0]
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 fa49 	bl	8007c46 <USBD_CtlError>
            err++;
 80077b4:	7afb      	ldrb	r3, [r7, #11]
 80077b6:	3301      	adds	r3, #1
 80077b8:	72fb      	strb	r3, [r7, #11]
          break;
 80077ba:	e007      	b.n	80077cc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80077bc:	6839      	ldr	r1, [r7, #0]
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fa41 	bl	8007c46 <USBD_CtlError>
          err++;
 80077c4:	7afb      	ldrb	r3, [r7, #11]
 80077c6:	3301      	adds	r3, #1
 80077c8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80077ca:	bf00      	nop
      }
      break;
 80077cc:	e037      	b.n	800783e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	7c1b      	ldrb	r3, [r3, #16]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d109      	bne.n	80077ea <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077de:	f107 0208 	add.w	r2, r7, #8
 80077e2:	4610      	mov	r0, r2
 80077e4:	4798      	blx	r3
 80077e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077e8:	e029      	b.n	800783e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80077ea:	6839      	ldr	r1, [r7, #0]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fa2a 	bl	8007c46 <USBD_CtlError>
        err++;
 80077f2:	7afb      	ldrb	r3, [r7, #11]
 80077f4:	3301      	adds	r3, #1
 80077f6:	72fb      	strb	r3, [r7, #11]
      break;
 80077f8:	e021      	b.n	800783e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	7c1b      	ldrb	r3, [r3, #16]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d10d      	bne.n	800781e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780a:	f107 0208 	add.w	r2, r7, #8
 800780e:	4610      	mov	r0, r2
 8007810:	4798      	blx	r3
 8007812:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	3301      	adds	r3, #1
 8007818:	2207      	movs	r2, #7
 800781a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800781c:	e00f      	b.n	800783e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800781e:	6839      	ldr	r1, [r7, #0]
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 fa10 	bl	8007c46 <USBD_CtlError>
        err++;
 8007826:	7afb      	ldrb	r3, [r7, #11]
 8007828:	3301      	adds	r3, #1
 800782a:	72fb      	strb	r3, [r7, #11]
      break;
 800782c:	e007      	b.n	800783e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800782e:	6839      	ldr	r1, [r7, #0]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fa08 	bl	8007c46 <USBD_CtlError>
      err++;
 8007836:	7afb      	ldrb	r3, [r7, #11]
 8007838:	3301      	adds	r3, #1
 800783a:	72fb      	strb	r3, [r7, #11]
      break;
 800783c:	bf00      	nop
  }

  if (err != 0U)
 800783e:	7afb      	ldrb	r3, [r7, #11]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d11e      	bne.n	8007882 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	88db      	ldrh	r3, [r3, #6]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d016      	beq.n	800787a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800784c:	893b      	ldrh	r3, [r7, #8]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00e      	beq.n	8007870 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	88da      	ldrh	r2, [r3, #6]
 8007856:	893b      	ldrh	r3, [r7, #8]
 8007858:	4293      	cmp	r3, r2
 800785a:	bf28      	it	cs
 800785c:	4613      	movcs	r3, r2
 800785e:	b29b      	uxth	r3, r3
 8007860:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007862:	893b      	ldrh	r3, [r7, #8]
 8007864:	461a      	mov	r2, r3
 8007866:	68f9      	ldr	r1, [r7, #12]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 fa5d 	bl	8007d28 <USBD_CtlSendData>
 800786e:	e009      	b.n	8007884 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007870:	6839      	ldr	r1, [r7, #0]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 f9e7 	bl	8007c46 <USBD_CtlError>
 8007878:	e004      	b.n	8007884 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 faae 	bl	8007ddc <USBD_CtlSendStatus>
 8007880:	e000      	b.n	8007884 <USBD_GetDescriptor+0x2cc>
    return;
 8007882:	bf00      	nop
  }
}
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop

0800788c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	889b      	ldrh	r3, [r3, #4]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d131      	bne.n	8007902 <USBD_SetAddress+0x76>
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	88db      	ldrh	r3, [r3, #6]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d12d      	bne.n	8007902 <USBD_SetAddress+0x76>
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	885b      	ldrh	r3, [r3, #2]
 80078aa:	2b7f      	cmp	r3, #127	; 0x7f
 80078ac:	d829      	bhi.n	8007902 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	885b      	ldrh	r3, [r3, #2]
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b03      	cmp	r3, #3
 80078c4:	d104      	bne.n	80078d0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80078c6:	6839      	ldr	r1, [r7, #0]
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 f9bc 	bl	8007c46 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ce:	e01d      	b.n	800790c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	7bfa      	ldrb	r2, [r7, #15]
 80078d4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80078d8:	7bfb      	ldrb	r3, [r7, #15]
 80078da:	4619      	mov	r1, r3
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 fedf 	bl	80086a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 fa7a 	bl	8007ddc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d004      	beq.n	80078f8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2202      	movs	r2, #2
 80078f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078f6:	e009      	b.n	800790c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007900:	e004      	b.n	800790c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007902:	6839      	ldr	r1, [r7, #0]
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 f99e 	bl	8007c46 <USBD_CtlError>
  }
}
 800790a:	bf00      	nop
 800790c:	bf00      	nop
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800791e:	2300      	movs	r3, #0
 8007920:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	885b      	ldrh	r3, [r3, #2]
 8007926:	b2da      	uxtb	r2, r3
 8007928:	4b4e      	ldr	r3, [pc, #312]	; (8007a64 <USBD_SetConfig+0x150>)
 800792a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800792c:	4b4d      	ldr	r3, [pc, #308]	; (8007a64 <USBD_SetConfig+0x150>)
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	2b01      	cmp	r3, #1
 8007932:	d905      	bls.n	8007940 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007934:	6839      	ldr	r1, [r7, #0]
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f985 	bl	8007c46 <USBD_CtlError>
    return USBD_FAIL;
 800793c:	2303      	movs	r3, #3
 800793e:	e08c      	b.n	8007a5a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007946:	b2db      	uxtb	r3, r3
 8007948:	2b02      	cmp	r3, #2
 800794a:	d002      	beq.n	8007952 <USBD_SetConfig+0x3e>
 800794c:	2b03      	cmp	r3, #3
 800794e:	d029      	beq.n	80079a4 <USBD_SetConfig+0x90>
 8007950:	e075      	b.n	8007a3e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007952:	4b44      	ldr	r3, [pc, #272]	; (8007a64 <USBD_SetConfig+0x150>)
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d020      	beq.n	800799c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800795a:	4b42      	ldr	r3, [pc, #264]	; (8007a64 <USBD_SetConfig+0x150>)
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	461a      	mov	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007964:	4b3f      	ldr	r3, [pc, #252]	; (8007a64 <USBD_SetConfig+0x150>)
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	4619      	mov	r1, r3
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f7fe ffe7 	bl	800693e <USBD_SetClassConfig>
 8007970:	4603      	mov	r3, r0
 8007972:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007974:	7bfb      	ldrb	r3, [r7, #15]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d008      	beq.n	800798c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800797a:	6839      	ldr	r1, [r7, #0]
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 f962 	bl	8007c46 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2202      	movs	r2, #2
 8007986:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800798a:	e065      	b.n	8007a58 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 fa25 	bl	8007ddc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2203      	movs	r2, #3
 8007996:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800799a:	e05d      	b.n	8007a58 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fa1d 	bl	8007ddc <USBD_CtlSendStatus>
      break;
 80079a2:	e059      	b.n	8007a58 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80079a4:	4b2f      	ldr	r3, [pc, #188]	; (8007a64 <USBD_SetConfig+0x150>)
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d112      	bne.n	80079d2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2202      	movs	r2, #2
 80079b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80079b4:	4b2b      	ldr	r3, [pc, #172]	; (8007a64 <USBD_SetConfig+0x150>)
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	461a      	mov	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80079be:	4b29      	ldr	r3, [pc, #164]	; (8007a64 <USBD_SetConfig+0x150>)
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	4619      	mov	r1, r3
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f7fe ffd6 	bl	8006976 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fa06 	bl	8007ddc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80079d0:	e042      	b.n	8007a58 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80079d2:	4b24      	ldr	r3, [pc, #144]	; (8007a64 <USBD_SetConfig+0x150>)
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	461a      	mov	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d02a      	beq.n	8007a36 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	4619      	mov	r1, r3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7fe ffc4 	bl	8006976 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80079ee:	4b1d      	ldr	r3, [pc, #116]	; (8007a64 <USBD_SetConfig+0x150>)
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	461a      	mov	r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80079f8:	4b1a      	ldr	r3, [pc, #104]	; (8007a64 <USBD_SetConfig+0x150>)
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	4619      	mov	r1, r3
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f7fe ff9d 	bl	800693e <USBD_SetClassConfig>
 8007a04:	4603      	mov	r3, r0
 8007a06:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007a08:	7bfb      	ldrb	r3, [r7, #15]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00f      	beq.n	8007a2e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007a0e:	6839      	ldr	r1, [r7, #0]
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 f918 	bl	8007c46 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f7fe ffa9 	bl	8006976 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2202      	movs	r2, #2
 8007a28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007a2c:	e014      	b.n	8007a58 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f9d4 	bl	8007ddc <USBD_CtlSendStatus>
      break;
 8007a34:	e010      	b.n	8007a58 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f9d0 	bl	8007ddc <USBD_CtlSendStatus>
      break;
 8007a3c:	e00c      	b.n	8007a58 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007a3e:	6839      	ldr	r1, [r7, #0]
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 f900 	bl	8007c46 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a46:	4b07      	ldr	r3, [pc, #28]	; (8007a64 <USBD_SetConfig+0x150>)
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f7fe ff92 	bl	8006976 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007a52:	2303      	movs	r3, #3
 8007a54:	73fb      	strb	r3, [r7, #15]
      break;
 8007a56:	bf00      	nop
  }

  return ret;
 8007a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	200009bc 	.word	0x200009bc

08007a68 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	88db      	ldrh	r3, [r3, #6]
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d004      	beq.n	8007a84 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a7a:	6839      	ldr	r1, [r7, #0]
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f8e2 	bl	8007c46 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007a82:	e023      	b.n	8007acc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	dc02      	bgt.n	8007a96 <USBD_GetConfig+0x2e>
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	dc03      	bgt.n	8007a9c <USBD_GetConfig+0x34>
 8007a94:	e015      	b.n	8007ac2 <USBD_GetConfig+0x5a>
 8007a96:	2b03      	cmp	r3, #3
 8007a98:	d00b      	beq.n	8007ab2 <USBD_GetConfig+0x4a>
 8007a9a:	e012      	b.n	8007ac2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	3308      	adds	r3, #8
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f93c 	bl	8007d28 <USBD_CtlSendData>
        break;
 8007ab0:	e00c      	b.n	8007acc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	3304      	adds	r3, #4
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	4619      	mov	r1, r3
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 f934 	bl	8007d28 <USBD_CtlSendData>
        break;
 8007ac0:	e004      	b.n	8007acc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007ac2:	6839      	ldr	r1, [r7, #0]
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 f8be 	bl	8007c46 <USBD_CtlError>
        break;
 8007aca:	bf00      	nop
}
 8007acc:	bf00      	nop
 8007ace:	3708      	adds	r7, #8
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d81e      	bhi.n	8007b2a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	88db      	ldrh	r3, [r3, #6]
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d004      	beq.n	8007afe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007af4:	6839      	ldr	r1, [r7, #0]
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f8a5 	bl	8007c46 <USBD_CtlError>
        break;
 8007afc:	e01a      	b.n	8007b34 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2201      	movs	r2, #1
 8007b02:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d005      	beq.n	8007b1a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	f043 0202 	orr.w	r2, r3, #2
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	330c      	adds	r3, #12
 8007b1e:	2202      	movs	r2, #2
 8007b20:	4619      	mov	r1, r3
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f900 	bl	8007d28 <USBD_CtlSendData>
      break;
 8007b28:	e004      	b.n	8007b34 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007b2a:	6839      	ldr	r1, [r7, #0]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f88a 	bl	8007c46 <USBD_CtlError>
      break;
 8007b32:	bf00      	nop
  }
}
 8007b34:	bf00      	nop
 8007b36:	3708      	adds	r7, #8
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	885b      	ldrh	r3, [r3, #2]
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d107      	bne.n	8007b5e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f940 	bl	8007ddc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007b5c:	e013      	b.n	8007b86 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	885b      	ldrh	r3, [r3, #2]
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d10b      	bne.n	8007b7e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	889b      	ldrh	r3, [r3, #4]
 8007b6a:	0a1b      	lsrs	r3, r3, #8
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	b2da      	uxtb	r2, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f930 	bl	8007ddc <USBD_CtlSendStatus>
}
 8007b7c:	e003      	b.n	8007b86 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007b7e:	6839      	ldr	r1, [r7, #0]
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 f860 	bl	8007c46 <USBD_CtlError>
}
 8007b86:	bf00      	nop
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b082      	sub	sp, #8
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	d80b      	bhi.n	8007bbe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	885b      	ldrh	r3, [r3, #2]
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d10c      	bne.n	8007bc8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f910 	bl	8007ddc <USBD_CtlSendStatus>
      }
      break;
 8007bbc:	e004      	b.n	8007bc8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007bbe:	6839      	ldr	r1, [r7, #0]
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 f840 	bl	8007c46 <USBD_CtlError>
      break;
 8007bc6:	e000      	b.n	8007bca <USBD_ClrFeature+0x3c>
      break;
 8007bc8:	bf00      	nop
  }
}
 8007bca:	bf00      	nop
 8007bcc:	3708      	adds	r7, #8
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b084      	sub	sp, #16
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
 8007bda:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	781a      	ldrb	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	3301      	adds	r3, #1
 8007bec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	781a      	ldrb	r2, [r3, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f7ff fa41 	bl	8007084 <SWAPBYTE>
 8007c02:	4603      	mov	r3, r0
 8007c04:	461a      	mov	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	3301      	adds	r3, #1
 8007c14:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f7ff fa34 	bl	8007084 <SWAPBYTE>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	461a      	mov	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	3301      	adds	r3, #1
 8007c28:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f7ff fa27 	bl	8007084 <SWAPBYTE>
 8007c36:	4603      	mov	r3, r0
 8007c38:	461a      	mov	r2, r3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	80da      	strh	r2, [r3, #6]
}
 8007c3e:	bf00      	nop
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b082      	sub	sp, #8
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
 8007c4e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c50:	2180      	movs	r1, #128	; 0x80
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fcba 	bl	80085cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007c58:	2100      	movs	r1, #0
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 fcb6 	bl	80085cc <USBD_LL_StallEP>
}
 8007c60:	bf00      	nop
 8007c62:	3708      	adds	r7, #8
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b086      	sub	sp, #24
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c74:	2300      	movs	r3, #0
 8007c76:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d036      	beq.n	8007cec <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007c82:	6938      	ldr	r0, [r7, #16]
 8007c84:	f000 f836 	bl	8007cf4 <USBD_GetLen>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	005b      	lsls	r3, r3, #1
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007c96:	7dfb      	ldrb	r3, [r7, #23]
 8007c98:	68ba      	ldr	r2, [r7, #8]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	7812      	ldrb	r2, [r2, #0]
 8007ca0:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ca2:	7dfb      	ldrb	r3, [r7, #23]
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007ca8:	7dfb      	ldrb	r3, [r7, #23]
 8007caa:	68ba      	ldr	r2, [r7, #8]
 8007cac:	4413      	add	r3, r2
 8007cae:	2203      	movs	r2, #3
 8007cb0:	701a      	strb	r2, [r3, #0]
  idx++;
 8007cb2:	7dfb      	ldrb	r3, [r7, #23]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007cb8:	e013      	b.n	8007ce2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007cba:	7dfb      	ldrb	r3, [r7, #23]
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	693a      	ldr	r2, [r7, #16]
 8007cc2:	7812      	ldrb	r2, [r2, #0]
 8007cc4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	3301      	adds	r3, #1
 8007cca:	613b      	str	r3, [r7, #16]
    idx++;
 8007ccc:	7dfb      	ldrb	r3, [r7, #23]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007cd2:	7dfb      	ldrb	r3, [r7, #23]
 8007cd4:	68ba      	ldr	r2, [r7, #8]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	2200      	movs	r2, #0
 8007cda:	701a      	strb	r2, [r3, #0]
    idx++;
 8007cdc:	7dfb      	ldrb	r3, [r7, #23]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1e7      	bne.n	8007cba <USBD_GetString+0x52>
 8007cea:	e000      	b.n	8007cee <USBD_GetString+0x86>
    return;
 8007cec:	bf00      	nop
  }
}
 8007cee:	3718      	adds	r7, #24
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007d04:	e005      	b.n	8007d12 <USBD_GetLen+0x1e>
  {
    len++;
 8007d06:	7bfb      	ldrb	r3, [r7, #15]
 8007d08:	3301      	adds	r3, #1
 8007d0a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1f5      	bne.n	8007d06 <USBD_GetLen+0x12>
  }

  return len;
 8007d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3714      	adds	r7, #20
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2202      	movs	r2, #2
 8007d38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	68ba      	ldr	r2, [r7, #8]
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f000 fcc5 	bl	80086de <USBD_LL_Transmit>

  return USBD_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b084      	sub	sp, #16
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	60f8      	str	r0, [r7, #12]
 8007d66:	60b9      	str	r1, [r7, #8]
 8007d68:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	2100      	movs	r1, #0
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f000 fcb4 	bl	80086de <USBD_LL_Transmit>

  return USBD_OK;
 8007d76:	2300      	movs	r3, #0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2203      	movs	r2, #3
 8007d90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	2100      	movs	r1, #0
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f000 fcb8 	bl	8008720 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3710      	adds	r7, #16
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b084      	sub	sp, #16
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	60f8      	str	r0, [r7, #12]
 8007dc2:	60b9      	str	r1, [r7, #8]
 8007dc4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	68ba      	ldr	r2, [r7, #8]
 8007dca:	2100      	movs	r1, #0
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f000 fca7 	bl	8008720 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2204      	movs	r2, #4
 8007de8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007dec:	2300      	movs	r3, #0
 8007dee:	2200      	movs	r2, #0
 8007df0:	2100      	movs	r1, #0
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 fc73 	bl	80086de <USBD_LL_Transmit>

  return USBD_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3708      	adds	r7, #8
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b082      	sub	sp, #8
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2205      	movs	r2, #5
 8007e0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e12:	2300      	movs	r3, #0
 8007e14:	2200      	movs	r2, #0
 8007e16:	2100      	movs	r1, #0
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 fc81 	bl	8008720 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3708      	adds	r7, #8
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	4912      	ldr	r1, [pc, #72]	; (8007e78 <MX_USB_DEVICE_Init+0x50>)
 8007e30:	4812      	ldr	r0, [pc, #72]	; (8007e7c <MX_USB_DEVICE_Init+0x54>)
 8007e32:	f7fe fd07 	bl	8006844 <USBD_Init>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d001      	beq.n	8007e40 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007e3c:	f7f8 fde6 	bl	8000a0c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007e40:	490f      	ldr	r1, [pc, #60]	; (8007e80 <MX_USB_DEVICE_Init+0x58>)
 8007e42:	480e      	ldr	r0, [pc, #56]	; (8007e7c <MX_USB_DEVICE_Init+0x54>)
 8007e44:	f7fe fd2e 	bl	80068a4 <USBD_RegisterClass>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d001      	beq.n	8007e52 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007e4e:	f7f8 fddd 	bl	8000a0c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007e52:	490c      	ldr	r1, [pc, #48]	; (8007e84 <MX_USB_DEVICE_Init+0x5c>)
 8007e54:	4809      	ldr	r0, [pc, #36]	; (8007e7c <MX_USB_DEVICE_Init+0x54>)
 8007e56:	f7fe fc1f 	bl	8006698 <USBD_CDC_RegisterInterface>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d001      	beq.n	8007e64 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007e60:	f7f8 fdd4 	bl	8000a0c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007e64:	4805      	ldr	r0, [pc, #20]	; (8007e7c <MX_USB_DEVICE_Init+0x54>)
 8007e66:	f7fe fd53 	bl	8006910 <USBD_Start>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d001      	beq.n	8007e74 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007e70:	f7f8 fdcc 	bl	8000a0c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007e74:	bf00      	nop
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	200000ac 	.word	0x200000ac
 8007e7c:	200009c0 	.word	0x200009c0
 8007e80:	20000018 	.word	0x20000018
 8007e84:	20000098 	.word	0x20000098

08007e88 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	4905      	ldr	r1, [pc, #20]	; (8007ea4 <CDC_Init_FS+0x1c>)
 8007e90:	4805      	ldr	r0, [pc, #20]	; (8007ea8 <CDC_Init_FS+0x20>)
 8007e92:	f7fe fc1b 	bl	80066cc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007e96:	4905      	ldr	r1, [pc, #20]	; (8007eac <CDC_Init_FS+0x24>)
 8007e98:	4803      	ldr	r0, [pc, #12]	; (8007ea8 <CDC_Init_FS+0x20>)
 8007e9a:	f7fe fc39 	bl	8006710 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007e9e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	2000149c 	.word	0x2000149c
 8007ea8:	200009c0 	.word	0x200009c0
 8007eac:	20000c9c 	.word	0x20000c9c

08007eb0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007eb4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	6039      	str	r1, [r7, #0]
 8007eca:	71fb      	strb	r3, [r7, #7]
 8007ecc:	4613      	mov	r3, r2
 8007ece:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007ed0:	79fb      	ldrb	r3, [r7, #7]
 8007ed2:	2b23      	cmp	r3, #35	; 0x23
 8007ed4:	d84a      	bhi.n	8007f6c <CDC_Control_FS+0xac>
 8007ed6:	a201      	add	r2, pc, #4	; (adr r2, 8007edc <CDC_Control_FS+0x1c>)
 8007ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007edc:	08007f6d 	.word	0x08007f6d
 8007ee0:	08007f6d 	.word	0x08007f6d
 8007ee4:	08007f6d 	.word	0x08007f6d
 8007ee8:	08007f6d 	.word	0x08007f6d
 8007eec:	08007f6d 	.word	0x08007f6d
 8007ef0:	08007f6d 	.word	0x08007f6d
 8007ef4:	08007f6d 	.word	0x08007f6d
 8007ef8:	08007f6d 	.word	0x08007f6d
 8007efc:	08007f6d 	.word	0x08007f6d
 8007f00:	08007f6d 	.word	0x08007f6d
 8007f04:	08007f6d 	.word	0x08007f6d
 8007f08:	08007f6d 	.word	0x08007f6d
 8007f0c:	08007f6d 	.word	0x08007f6d
 8007f10:	08007f6d 	.word	0x08007f6d
 8007f14:	08007f6d 	.word	0x08007f6d
 8007f18:	08007f6d 	.word	0x08007f6d
 8007f1c:	08007f6d 	.word	0x08007f6d
 8007f20:	08007f6d 	.word	0x08007f6d
 8007f24:	08007f6d 	.word	0x08007f6d
 8007f28:	08007f6d 	.word	0x08007f6d
 8007f2c:	08007f6d 	.word	0x08007f6d
 8007f30:	08007f6d 	.word	0x08007f6d
 8007f34:	08007f6d 	.word	0x08007f6d
 8007f38:	08007f6d 	.word	0x08007f6d
 8007f3c:	08007f6d 	.word	0x08007f6d
 8007f40:	08007f6d 	.word	0x08007f6d
 8007f44:	08007f6d 	.word	0x08007f6d
 8007f48:	08007f6d 	.word	0x08007f6d
 8007f4c:	08007f6d 	.word	0x08007f6d
 8007f50:	08007f6d 	.word	0x08007f6d
 8007f54:	08007f6d 	.word	0x08007f6d
 8007f58:	08007f6d 	.word	0x08007f6d
 8007f5c:	08007f6d 	.word	0x08007f6d
 8007f60:	08007f6d 	.word	0x08007f6d
 8007f64:	08007f6d 	.word	0x08007f6d
 8007f68:	08007f6d 	.word	0x08007f6d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007f6c:	bf00      	nop
  }

  return (USBD_OK);
 8007f6e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007f86:	6879      	ldr	r1, [r7, #4]
 8007f88:	4805      	ldr	r0, [pc, #20]	; (8007fa0 <CDC_Receive_FS+0x24>)
 8007f8a:	f7fe fbc1 	bl	8006710 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007f8e:	4804      	ldr	r0, [pc, #16]	; (8007fa0 <CDC_Receive_FS+0x24>)
 8007f90:	f7fe fc22 	bl	80067d8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007f94:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3708      	adds	r7, #8
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	200009c0 	.word	0x200009c0

08007fa4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b087      	sub	sp, #28
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	4613      	mov	r3, r2
 8007fb0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007fb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	371c      	adds	r7, #28
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr
	...

08007fc8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	4603      	mov	r3, r0
 8007fd0:	6039      	str	r1, [r7, #0]
 8007fd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	2212      	movs	r2, #18
 8007fd8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007fda:	4b03      	ldr	r3, [pc, #12]	; (8007fe8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr
 8007fe8:	200000c8 	.word	0x200000c8

08007fec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	6039      	str	r1, [r7, #0]
 8007ff6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	2204      	movs	r2, #4
 8007ffc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007ffe:	4b03      	ldr	r3, [pc, #12]	; (800800c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008000:	4618      	mov	r0, r3
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr
 800800c:	200000dc 	.word	0x200000dc

08008010 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	4603      	mov	r3, r0
 8008018:	6039      	str	r1, [r7, #0]
 800801a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800801c:	79fb      	ldrb	r3, [r7, #7]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d105      	bne.n	800802e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008022:	683a      	ldr	r2, [r7, #0]
 8008024:	4907      	ldr	r1, [pc, #28]	; (8008044 <USBD_FS_ProductStrDescriptor+0x34>)
 8008026:	4808      	ldr	r0, [pc, #32]	; (8008048 <USBD_FS_ProductStrDescriptor+0x38>)
 8008028:	f7ff fe1e 	bl	8007c68 <USBD_GetString>
 800802c:	e004      	b.n	8008038 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800802e:	683a      	ldr	r2, [r7, #0]
 8008030:	4904      	ldr	r1, [pc, #16]	; (8008044 <USBD_FS_ProductStrDescriptor+0x34>)
 8008032:	4805      	ldr	r0, [pc, #20]	; (8008048 <USBD_FS_ProductStrDescriptor+0x38>)
 8008034:	f7ff fe18 	bl	8007c68 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008038:	4b02      	ldr	r3, [pc, #8]	; (8008044 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800803a:	4618      	mov	r0, r3
 800803c:	3708      	adds	r7, #8
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	20001c9c 	.word	0x20001c9c
 8008048:	0800df28 	.word	0x0800df28

0800804c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	4603      	mov	r3, r0
 8008054:	6039      	str	r1, [r7, #0]
 8008056:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008058:	683a      	ldr	r2, [r7, #0]
 800805a:	4904      	ldr	r1, [pc, #16]	; (800806c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800805c:	4804      	ldr	r0, [pc, #16]	; (8008070 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800805e:	f7ff fe03 	bl	8007c68 <USBD_GetString>
  return USBD_StrDesc;
 8008062:	4b02      	ldr	r3, [pc, #8]	; (800806c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008064:	4618      	mov	r0, r3
 8008066:	3708      	adds	r7, #8
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	20001c9c 	.word	0x20001c9c
 8008070:	0800df40 	.word	0x0800df40

08008074 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	4603      	mov	r3, r0
 800807c:	6039      	str	r1, [r7, #0]
 800807e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	221a      	movs	r2, #26
 8008084:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008086:	f000 f843 	bl	8008110 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800808a:	4b02      	ldr	r3, [pc, #8]	; (8008094 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800808c:	4618      	mov	r0, r3
 800808e:	3708      	adds	r7, #8
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	200000e0 	.word	0x200000e0

08008098 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	4603      	mov	r3, r0
 80080a0:	6039      	str	r1, [r7, #0]
 80080a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80080a4:	79fb      	ldrb	r3, [r7, #7]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d105      	bne.n	80080b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80080aa:	683a      	ldr	r2, [r7, #0]
 80080ac:	4907      	ldr	r1, [pc, #28]	; (80080cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80080ae:	4808      	ldr	r0, [pc, #32]	; (80080d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80080b0:	f7ff fdda 	bl	8007c68 <USBD_GetString>
 80080b4:	e004      	b.n	80080c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80080b6:	683a      	ldr	r2, [r7, #0]
 80080b8:	4904      	ldr	r1, [pc, #16]	; (80080cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80080ba:	4805      	ldr	r0, [pc, #20]	; (80080d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80080bc:	f7ff fdd4 	bl	8007c68 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080c0:	4b02      	ldr	r3, [pc, #8]	; (80080cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3708      	adds	r7, #8
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	20001c9c 	.word	0x20001c9c
 80080d0:	0800df54 	.word	0x0800df54

080080d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	4603      	mov	r3, r0
 80080dc:	6039      	str	r1, [r7, #0]
 80080de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80080e0:	79fb      	ldrb	r3, [r7, #7]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d105      	bne.n	80080f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80080e6:	683a      	ldr	r2, [r7, #0]
 80080e8:	4907      	ldr	r1, [pc, #28]	; (8008108 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80080ea:	4808      	ldr	r0, [pc, #32]	; (800810c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80080ec:	f7ff fdbc 	bl	8007c68 <USBD_GetString>
 80080f0:	e004      	b.n	80080fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80080f2:	683a      	ldr	r2, [r7, #0]
 80080f4:	4904      	ldr	r1, [pc, #16]	; (8008108 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80080f6:	4805      	ldr	r0, [pc, #20]	; (800810c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80080f8:	f7ff fdb6 	bl	8007c68 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080fc:	4b02      	ldr	r3, [pc, #8]	; (8008108 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3708      	adds	r7, #8
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	20001c9c 	.word	0x20001c9c
 800810c:	0800df60 	.word	0x0800df60

08008110 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008116:	4b0f      	ldr	r3, [pc, #60]	; (8008154 <Get_SerialNum+0x44>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800811c:	4b0e      	ldr	r3, [pc, #56]	; (8008158 <Get_SerialNum+0x48>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008122:	4b0e      	ldr	r3, [pc, #56]	; (800815c <Get_SerialNum+0x4c>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008128:	68fa      	ldr	r2, [r7, #12]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4413      	add	r3, r2
 800812e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d009      	beq.n	800814a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008136:	2208      	movs	r2, #8
 8008138:	4909      	ldr	r1, [pc, #36]	; (8008160 <Get_SerialNum+0x50>)
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	f000 f814 	bl	8008168 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008140:	2204      	movs	r2, #4
 8008142:	4908      	ldr	r1, [pc, #32]	; (8008164 <Get_SerialNum+0x54>)
 8008144:	68b8      	ldr	r0, [r7, #8]
 8008146:	f000 f80f 	bl	8008168 <IntToUnicode>
  }
}
 800814a:	bf00      	nop
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	1fff7a10 	.word	0x1fff7a10
 8008158:	1fff7a14 	.word	0x1fff7a14
 800815c:	1fff7a18 	.word	0x1fff7a18
 8008160:	200000e2 	.word	0x200000e2
 8008164:	200000f2 	.word	0x200000f2

08008168 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008168:	b480      	push	{r7}
 800816a:	b087      	sub	sp, #28
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	4613      	mov	r3, r2
 8008174:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008176:	2300      	movs	r3, #0
 8008178:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800817a:	2300      	movs	r3, #0
 800817c:	75fb      	strb	r3, [r7, #23]
 800817e:	e027      	b.n	80081d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	0f1b      	lsrs	r3, r3, #28
 8008184:	2b09      	cmp	r3, #9
 8008186:	d80b      	bhi.n	80081a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	0f1b      	lsrs	r3, r3, #28
 800818c:	b2da      	uxtb	r2, r3
 800818e:	7dfb      	ldrb	r3, [r7, #23]
 8008190:	005b      	lsls	r3, r3, #1
 8008192:	4619      	mov	r1, r3
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	440b      	add	r3, r1
 8008198:	3230      	adds	r2, #48	; 0x30
 800819a:	b2d2      	uxtb	r2, r2
 800819c:	701a      	strb	r2, [r3, #0]
 800819e:	e00a      	b.n	80081b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	0f1b      	lsrs	r3, r3, #28
 80081a4:	b2da      	uxtb	r2, r3
 80081a6:	7dfb      	ldrb	r3, [r7, #23]
 80081a8:	005b      	lsls	r3, r3, #1
 80081aa:	4619      	mov	r1, r3
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	440b      	add	r3, r1
 80081b0:	3237      	adds	r2, #55	; 0x37
 80081b2:	b2d2      	uxtb	r2, r2
 80081b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	011b      	lsls	r3, r3, #4
 80081ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80081bc:	7dfb      	ldrb	r3, [r7, #23]
 80081be:	005b      	lsls	r3, r3, #1
 80081c0:	3301      	adds	r3, #1
 80081c2:	68ba      	ldr	r2, [r7, #8]
 80081c4:	4413      	add	r3, r2
 80081c6:	2200      	movs	r2, #0
 80081c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80081ca:	7dfb      	ldrb	r3, [r7, #23]
 80081cc:	3301      	adds	r3, #1
 80081ce:	75fb      	strb	r3, [r7, #23]
 80081d0:	7dfa      	ldrb	r2, [r7, #23]
 80081d2:	79fb      	ldrb	r3, [r7, #7]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d3d3      	bcc.n	8008180 <IntToUnicode+0x18>
  }
}
 80081d8:	bf00      	nop
 80081da:	bf00      	nop
 80081dc:	371c      	adds	r7, #28
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr
	...

080081e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b08a      	sub	sp, #40	; 0x28
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081f0:	f107 0314 	add.w	r3, r7, #20
 80081f4:	2200      	movs	r2, #0
 80081f6:	601a      	str	r2, [r3, #0]
 80081f8:	605a      	str	r2, [r3, #4]
 80081fa:	609a      	str	r2, [r3, #8]
 80081fc:	60da      	str	r2, [r3, #12]
 80081fe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008208:	d13a      	bne.n	8008280 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800820a:	2300      	movs	r3, #0
 800820c:	613b      	str	r3, [r7, #16]
 800820e:	4b1e      	ldr	r3, [pc, #120]	; (8008288 <HAL_PCD_MspInit+0xa0>)
 8008210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008212:	4a1d      	ldr	r2, [pc, #116]	; (8008288 <HAL_PCD_MspInit+0xa0>)
 8008214:	f043 0301 	orr.w	r3, r3, #1
 8008218:	6313      	str	r3, [r2, #48]	; 0x30
 800821a:	4b1b      	ldr	r3, [pc, #108]	; (8008288 <HAL_PCD_MspInit+0xa0>)
 800821c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800821e:	f003 0301 	and.w	r3, r3, #1
 8008222:	613b      	str	r3, [r7, #16]
 8008224:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008226:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800822a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800822c:	2302      	movs	r3, #2
 800822e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008230:	2300      	movs	r3, #0
 8008232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008234:	2303      	movs	r3, #3
 8008236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008238:	230a      	movs	r3, #10
 800823a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800823c:	f107 0314 	add.w	r3, r7, #20
 8008240:	4619      	mov	r1, r3
 8008242:	4812      	ldr	r0, [pc, #72]	; (800828c <HAL_PCD_MspInit+0xa4>)
 8008244:	f7f8 febc 	bl	8000fc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008248:	4b0f      	ldr	r3, [pc, #60]	; (8008288 <HAL_PCD_MspInit+0xa0>)
 800824a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800824c:	4a0e      	ldr	r2, [pc, #56]	; (8008288 <HAL_PCD_MspInit+0xa0>)
 800824e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008252:	6353      	str	r3, [r2, #52]	; 0x34
 8008254:	2300      	movs	r3, #0
 8008256:	60fb      	str	r3, [r7, #12]
 8008258:	4b0b      	ldr	r3, [pc, #44]	; (8008288 <HAL_PCD_MspInit+0xa0>)
 800825a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800825c:	4a0a      	ldr	r2, [pc, #40]	; (8008288 <HAL_PCD_MspInit+0xa0>)
 800825e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008262:	6453      	str	r3, [r2, #68]	; 0x44
 8008264:	4b08      	ldr	r3, [pc, #32]	; (8008288 <HAL_PCD_MspInit+0xa0>)
 8008266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008268:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800826c:	60fb      	str	r3, [r7, #12]
 800826e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008270:	2200      	movs	r2, #0
 8008272:	2100      	movs	r1, #0
 8008274:	2043      	movs	r0, #67	; 0x43
 8008276:	f7f8 fe5f 	bl	8000f38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800827a:	2043      	movs	r0, #67	; 0x43
 800827c:	f7f8 fe88 	bl	8000f90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008280:	bf00      	nop
 8008282:	3728      	adds	r7, #40	; 0x28
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}
 8008288:	40023800 	.word	0x40023800
 800828c:	40020000 	.word	0x40020000

08008290 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80082a4:	4619      	mov	r1, r3
 80082a6:	4610      	mov	r0, r2
 80082a8:	f7fe fb7f 	bl	80069aa <USBD_LL_SetupStage>
}
 80082ac:	bf00      	nop
 80082ae:	3708      	adds	r7, #8
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	460b      	mov	r3, r1
 80082be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80082c6:	78fa      	ldrb	r2, [r7, #3]
 80082c8:	6879      	ldr	r1, [r7, #4]
 80082ca:	4613      	mov	r3, r2
 80082cc:	00db      	lsls	r3, r3, #3
 80082ce:	4413      	add	r3, r2
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	440b      	add	r3, r1
 80082d4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	78fb      	ldrb	r3, [r7, #3]
 80082dc:	4619      	mov	r1, r3
 80082de:	f7fe fbb9 	bl	8006a54 <USBD_LL_DataOutStage>
}
 80082e2:	bf00      	nop
 80082e4:	3708      	adds	r7, #8
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b082      	sub	sp, #8
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
 80082f2:	460b      	mov	r3, r1
 80082f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80082fc:	78fa      	ldrb	r2, [r7, #3]
 80082fe:	6879      	ldr	r1, [r7, #4]
 8008300:	4613      	mov	r3, r2
 8008302:	00db      	lsls	r3, r3, #3
 8008304:	4413      	add	r3, r2
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	440b      	add	r3, r1
 800830a:	334c      	adds	r3, #76	; 0x4c
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	78fb      	ldrb	r3, [r7, #3]
 8008310:	4619      	mov	r1, r3
 8008312:	f7fe fc52 	bl	8006bba <USBD_LL_DataInStage>
}
 8008316:	bf00      	nop
 8008318:	3708      	adds	r7, #8
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800831e:	b580      	push	{r7, lr}
 8008320:	b082      	sub	sp, #8
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800832c:	4618      	mov	r0, r3
 800832e:	f7fe fd86 	bl	8006e3e <USBD_LL_SOF>
}
 8008332:	bf00      	nop
 8008334:	3708      	adds	r7, #8
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800833a:	b580      	push	{r7, lr}
 800833c:	b084      	sub	sp, #16
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008342:	2301      	movs	r3, #1
 8008344:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d102      	bne.n	8008354 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800834e:	2300      	movs	r3, #0
 8008350:	73fb      	strb	r3, [r7, #15]
 8008352:	e008      	b.n	8008366 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	2b02      	cmp	r3, #2
 800835a:	d102      	bne.n	8008362 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800835c:	2301      	movs	r3, #1
 800835e:	73fb      	strb	r3, [r7, #15]
 8008360:	e001      	b.n	8008366 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008362:	f7f8 fb53 	bl	8000a0c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800836c:	7bfa      	ldrb	r2, [r7, #15]
 800836e:	4611      	mov	r1, r2
 8008370:	4618      	mov	r0, r3
 8008372:	f7fe fd26 	bl	8006dc2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800837c:	4618      	mov	r0, r3
 800837e:	f7fe fcce 	bl	8006d1e <USBD_LL_Reset>
}
 8008382:	bf00      	nop
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
	...

0800838c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b082      	sub	sp, #8
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800839a:	4618      	mov	r0, r3
 800839c:	f7fe fd21 	bl	8006de2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	6812      	ldr	r2, [r2, #0]
 80083ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80083b2:	f043 0301 	orr.w	r3, r3, #1
 80083b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6a1b      	ldr	r3, [r3, #32]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d005      	beq.n	80083cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80083c0:	4b04      	ldr	r3, [pc, #16]	; (80083d4 <HAL_PCD_SuspendCallback+0x48>)
 80083c2:	691b      	ldr	r3, [r3, #16]
 80083c4:	4a03      	ldr	r2, [pc, #12]	; (80083d4 <HAL_PCD_SuspendCallback+0x48>)
 80083c6:	f043 0306 	orr.w	r3, r3, #6
 80083ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80083cc:	bf00      	nop
 80083ce:	3708      	adds	r7, #8
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	e000ed00 	.word	0xe000ed00

080083d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7fe fd11 	bl	8006e0e <USBD_LL_Resume>
}
 80083ec:	bf00      	nop
 80083ee:	3708      	adds	r7, #8
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	460b      	mov	r3, r1
 80083fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008406:	78fa      	ldrb	r2, [r7, #3]
 8008408:	4611      	mov	r1, r2
 800840a:	4618      	mov	r0, r3
 800840c:	f7fe fd69 	bl	8006ee2 <USBD_LL_IsoOUTIncomplete>
}
 8008410:	bf00      	nop
 8008412:	3708      	adds	r7, #8
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	460b      	mov	r3, r1
 8008422:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800842a:	78fa      	ldrb	r2, [r7, #3]
 800842c:	4611      	mov	r1, r2
 800842e:	4618      	mov	r0, r3
 8008430:	f7fe fd25 	bl	8006e7e <USBD_LL_IsoINIncomplete>
}
 8008434:	bf00      	nop
 8008436:	3708      	adds	r7, #8
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800844a:	4618      	mov	r0, r3
 800844c:	f7fe fd7b 	bl	8006f46 <USBD_LL_DevConnected>
}
 8008450:	bf00      	nop
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008466:	4618      	mov	r0, r3
 8008468:	f7fe fd78 	bl	8006f5c <USBD_LL_DevDisconnected>
}
 800846c:	bf00      	nop
 800846e:	3708      	adds	r7, #8
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d13c      	bne.n	80084fe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008484:	4a20      	ldr	r2, [pc, #128]	; (8008508 <USBD_LL_Init+0x94>)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	4a1e      	ldr	r2, [pc, #120]	; (8008508 <USBD_LL_Init+0x94>)
 8008490:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008494:	4b1c      	ldr	r3, [pc, #112]	; (8008508 <USBD_LL_Init+0x94>)
 8008496:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800849a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800849c:	4b1a      	ldr	r3, [pc, #104]	; (8008508 <USBD_LL_Init+0x94>)
 800849e:	2204      	movs	r2, #4
 80084a0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80084a2:	4b19      	ldr	r3, [pc, #100]	; (8008508 <USBD_LL_Init+0x94>)
 80084a4:	2202      	movs	r2, #2
 80084a6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80084a8:	4b17      	ldr	r3, [pc, #92]	; (8008508 <USBD_LL_Init+0x94>)
 80084aa:	2200      	movs	r2, #0
 80084ac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80084ae:	4b16      	ldr	r3, [pc, #88]	; (8008508 <USBD_LL_Init+0x94>)
 80084b0:	2202      	movs	r2, #2
 80084b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80084b4:	4b14      	ldr	r3, [pc, #80]	; (8008508 <USBD_LL_Init+0x94>)
 80084b6:	2200      	movs	r2, #0
 80084b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80084ba:	4b13      	ldr	r3, [pc, #76]	; (8008508 <USBD_LL_Init+0x94>)
 80084bc:	2200      	movs	r2, #0
 80084be:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80084c0:	4b11      	ldr	r3, [pc, #68]	; (8008508 <USBD_LL_Init+0x94>)
 80084c2:	2200      	movs	r2, #0
 80084c4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80084c6:	4b10      	ldr	r3, [pc, #64]	; (8008508 <USBD_LL_Init+0x94>)
 80084c8:	2200      	movs	r2, #0
 80084ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80084cc:	4b0e      	ldr	r3, [pc, #56]	; (8008508 <USBD_LL_Init+0x94>)
 80084ce:	2200      	movs	r2, #0
 80084d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80084d2:	480d      	ldr	r0, [pc, #52]	; (8008508 <USBD_LL_Init+0x94>)
 80084d4:	f7f9 f896 	bl	8001604 <HAL_PCD_Init>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d001      	beq.n	80084e2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80084de:	f7f8 fa95 	bl	8000a0c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80084e2:	2180      	movs	r1, #128	; 0x80
 80084e4:	4808      	ldr	r0, [pc, #32]	; (8008508 <USBD_LL_Init+0x94>)
 80084e6:	f7fa fb00 	bl	8002aea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80084ea:	2240      	movs	r2, #64	; 0x40
 80084ec:	2100      	movs	r1, #0
 80084ee:	4806      	ldr	r0, [pc, #24]	; (8008508 <USBD_LL_Init+0x94>)
 80084f0:	f7fa fab4 	bl	8002a5c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80084f4:	2280      	movs	r2, #128	; 0x80
 80084f6:	2101      	movs	r1, #1
 80084f8:	4803      	ldr	r0, [pc, #12]	; (8008508 <USBD_LL_Init+0x94>)
 80084fa:	f7fa faaf 	bl	8002a5c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80084fe:	2300      	movs	r3, #0
}
 8008500:	4618      	mov	r0, r3
 8008502:	3708      	adds	r7, #8
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	20001e9c 	.word	0x20001e9c

0800850c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008514:	2300      	movs	r3, #0
 8008516:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008518:	2300      	movs	r3, #0
 800851a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008522:	4618      	mov	r0, r3
 8008524:	f7f9 f99e 	bl	8001864 <HAL_PCD_Start>
 8008528:	4603      	mov	r3, r0
 800852a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800852c:	7bfb      	ldrb	r3, [r7, #15]
 800852e:	4618      	mov	r0, r3
 8008530:	f000 f942 	bl	80087b8 <USBD_Get_USB_Status>
 8008534:	4603      	mov	r3, r0
 8008536:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008538:	7bbb      	ldrb	r3, [r7, #14]
}
 800853a:	4618      	mov	r0, r3
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b084      	sub	sp, #16
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
 800854a:	4608      	mov	r0, r1
 800854c:	4611      	mov	r1, r2
 800854e:	461a      	mov	r2, r3
 8008550:	4603      	mov	r3, r0
 8008552:	70fb      	strb	r3, [r7, #3]
 8008554:	460b      	mov	r3, r1
 8008556:	70bb      	strb	r3, [r7, #2]
 8008558:	4613      	mov	r3, r2
 800855a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800855c:	2300      	movs	r3, #0
 800855e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008560:	2300      	movs	r3, #0
 8008562:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800856a:	78bb      	ldrb	r3, [r7, #2]
 800856c:	883a      	ldrh	r2, [r7, #0]
 800856e:	78f9      	ldrb	r1, [r7, #3]
 8008570:	f7f9 fe6f 	bl	8002252 <HAL_PCD_EP_Open>
 8008574:	4603      	mov	r3, r0
 8008576:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008578:	7bfb      	ldrb	r3, [r7, #15]
 800857a:	4618      	mov	r0, r3
 800857c:	f000 f91c 	bl	80087b8 <USBD_Get_USB_Status>
 8008580:	4603      	mov	r3, r0
 8008582:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008584:	7bbb      	ldrb	r3, [r7, #14]
}
 8008586:	4618      	mov	r0, r3
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800858e:	b580      	push	{r7, lr}
 8008590:	b084      	sub	sp, #16
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
 8008596:	460b      	mov	r3, r1
 8008598:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800859a:	2300      	movs	r3, #0
 800859c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800859e:	2300      	movs	r3, #0
 80085a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80085a8:	78fa      	ldrb	r2, [r7, #3]
 80085aa:	4611      	mov	r1, r2
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7f9 feb8 	bl	8002322 <HAL_PCD_EP_Close>
 80085b2:	4603      	mov	r3, r0
 80085b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085b6:	7bfb      	ldrb	r3, [r7, #15]
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 f8fd 	bl	80087b8 <USBD_Get_USB_Status>
 80085be:	4603      	mov	r3, r0
 80085c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	460b      	mov	r3, r1
 80085d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085d8:	2300      	movs	r3, #0
 80085da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085dc:	2300      	movs	r3, #0
 80085de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80085e6:	78fa      	ldrb	r2, [r7, #3]
 80085e8:	4611      	mov	r1, r2
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7f9 ff90 	bl	8002510 <HAL_PCD_EP_SetStall>
 80085f0:	4603      	mov	r3, r0
 80085f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085f4:	7bfb      	ldrb	r3, [r7, #15]
 80085f6:	4618      	mov	r0, r3
 80085f8:	f000 f8de 	bl	80087b8 <USBD_Get_USB_Status>
 80085fc:	4603      	mov	r3, r0
 80085fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008600:	7bbb      	ldrb	r3, [r7, #14]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b084      	sub	sp, #16
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
 8008612:	460b      	mov	r3, r1
 8008614:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008616:	2300      	movs	r3, #0
 8008618:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800861a:	2300      	movs	r3, #0
 800861c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008624:	78fa      	ldrb	r2, [r7, #3]
 8008626:	4611      	mov	r1, r2
 8008628:	4618      	mov	r0, r3
 800862a:	f7f9 ffd5 	bl	80025d8 <HAL_PCD_EP_ClrStall>
 800862e:	4603      	mov	r3, r0
 8008630:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008632:	7bfb      	ldrb	r3, [r7, #15]
 8008634:	4618      	mov	r0, r3
 8008636:	f000 f8bf 	bl	80087b8 <USBD_Get_USB_Status>
 800863a:	4603      	mov	r3, r0
 800863c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800863e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008640:	4618      	mov	r0, r3
 8008642:	3710      	adds	r7, #16
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008648:	b480      	push	{r7}
 800864a:	b085      	sub	sp, #20
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	460b      	mov	r3, r1
 8008652:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800865a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800865c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008660:	2b00      	cmp	r3, #0
 8008662:	da0b      	bge.n	800867c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008664:	78fb      	ldrb	r3, [r7, #3]
 8008666:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800866a:	68f9      	ldr	r1, [r7, #12]
 800866c:	4613      	mov	r3, r2
 800866e:	00db      	lsls	r3, r3, #3
 8008670:	4413      	add	r3, r2
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	440b      	add	r3, r1
 8008676:	333e      	adds	r3, #62	; 0x3e
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	e00b      	b.n	8008694 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800867c:	78fb      	ldrb	r3, [r7, #3]
 800867e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008682:	68f9      	ldr	r1, [r7, #12]
 8008684:	4613      	mov	r3, r2
 8008686:	00db      	lsls	r3, r3, #3
 8008688:	4413      	add	r3, r2
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	440b      	add	r3, r1
 800868e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008692:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008694:	4618      	mov	r0, r3
 8008696:	3714      	adds	r7, #20
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	460b      	mov	r3, r1
 80086aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086ac:	2300      	movs	r3, #0
 80086ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086b0:	2300      	movs	r3, #0
 80086b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80086ba:	78fa      	ldrb	r2, [r7, #3]
 80086bc:	4611      	mov	r1, r2
 80086be:	4618      	mov	r0, r3
 80086c0:	f7f9 fda2 	bl	8002208 <HAL_PCD_SetAddress>
 80086c4:	4603      	mov	r3, r0
 80086c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086c8:	7bfb      	ldrb	r3, [r7, #15]
 80086ca:	4618      	mov	r0, r3
 80086cc:	f000 f874 	bl	80087b8 <USBD_Get_USB_Status>
 80086d0:	4603      	mov	r3, r0
 80086d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b086      	sub	sp, #24
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	60f8      	str	r0, [r7, #12]
 80086e6:	607a      	str	r2, [r7, #4]
 80086e8:	603b      	str	r3, [r7, #0]
 80086ea:	460b      	mov	r3, r1
 80086ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086ee:	2300      	movs	r3, #0
 80086f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086f2:	2300      	movs	r3, #0
 80086f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80086fc:	7af9      	ldrb	r1, [r7, #11]
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	f7f9 febb 	bl	800247c <HAL_PCD_EP_Transmit>
 8008706:	4603      	mov	r3, r0
 8008708:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800870a:	7dfb      	ldrb	r3, [r7, #23]
 800870c:	4618      	mov	r0, r3
 800870e:	f000 f853 	bl	80087b8 <USBD_Get_USB_Status>
 8008712:	4603      	mov	r3, r0
 8008714:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008716:	7dbb      	ldrb	r3, [r7, #22]
}
 8008718:	4618      	mov	r0, r3
 800871a:	3718      	adds	r7, #24
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b086      	sub	sp, #24
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	607a      	str	r2, [r7, #4]
 800872a:	603b      	str	r3, [r7, #0]
 800872c:	460b      	mov	r3, r1
 800872e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008730:	2300      	movs	r3, #0
 8008732:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008734:	2300      	movs	r3, #0
 8008736:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800873e:	7af9      	ldrb	r1, [r7, #11]
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	f7f9 fe37 	bl	80023b6 <HAL_PCD_EP_Receive>
 8008748:	4603      	mov	r3, r0
 800874a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800874c:	7dfb      	ldrb	r3, [r7, #23]
 800874e:	4618      	mov	r0, r3
 8008750:	f000 f832 	bl	80087b8 <USBD_Get_USB_Status>
 8008754:	4603      	mov	r3, r0
 8008756:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008758:	7dbb      	ldrb	r3, [r7, #22]
}
 800875a:	4618      	mov	r0, r3
 800875c:	3718      	adds	r7, #24
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b082      	sub	sp, #8
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
 800876a:	460b      	mov	r3, r1
 800876c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008774:	78fa      	ldrb	r2, [r7, #3]
 8008776:	4611      	mov	r1, r2
 8008778:	4618      	mov	r0, r3
 800877a:	f7f9 fe67 	bl	800244c <HAL_PCD_EP_GetRxCount>
 800877e:	4603      	mov	r3, r0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3708      	adds	r7, #8
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008790:	4b03      	ldr	r3, [pc, #12]	; (80087a0 <USBD_static_malloc+0x18>)
}
 8008792:	4618      	mov	r0, r3
 8008794:	370c      	adds	r7, #12
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop
 80087a0:	200023a8 	.word	0x200023a8

080087a4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]

}
 80087ac:	bf00      	nop
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b085      	sub	sp, #20
 80087bc:	af00      	add	r7, sp, #0
 80087be:	4603      	mov	r3, r0
 80087c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087c2:	2300      	movs	r3, #0
 80087c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80087c6:	79fb      	ldrb	r3, [r7, #7]
 80087c8:	2b03      	cmp	r3, #3
 80087ca:	d817      	bhi.n	80087fc <USBD_Get_USB_Status+0x44>
 80087cc:	a201      	add	r2, pc, #4	; (adr r2, 80087d4 <USBD_Get_USB_Status+0x1c>)
 80087ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d2:	bf00      	nop
 80087d4:	080087e5 	.word	0x080087e5
 80087d8:	080087eb 	.word	0x080087eb
 80087dc:	080087f1 	.word	0x080087f1
 80087e0:	080087f7 	.word	0x080087f7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80087e4:	2300      	movs	r3, #0
 80087e6:	73fb      	strb	r3, [r7, #15]
    break;
 80087e8:	e00b      	b.n	8008802 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80087ea:	2303      	movs	r3, #3
 80087ec:	73fb      	strb	r3, [r7, #15]
    break;
 80087ee:	e008      	b.n	8008802 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80087f0:	2301      	movs	r3, #1
 80087f2:	73fb      	strb	r3, [r7, #15]
    break;
 80087f4:	e005      	b.n	8008802 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80087f6:	2303      	movs	r3, #3
 80087f8:	73fb      	strb	r3, [r7, #15]
    break;
 80087fa:	e002      	b.n	8008802 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80087fc:	2303      	movs	r3, #3
 80087fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008800:	bf00      	nop
  }
  return usb_status;
 8008802:	7bfb      	ldrb	r3, [r7, #15]
}
 8008804:	4618      	mov	r0, r3
 8008806:	3714      	adds	r7, #20
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f103 0208 	add.w	r2, r3, #8
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f04f 32ff 	mov.w	r2, #4294967295
 8008828:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f103 0208 	add.w	r2, r3, #8
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f103 0208 	add.w	r2, r3, #8
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008844:	bf00      	nop
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800885e:	bf00      	nop
 8008860:	370c      	adds	r7, #12
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr

0800886a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800886a:	b480      	push	{r7}
 800886c:	b085      	sub	sp, #20
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
 8008872:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	68fa      	ldr	r2, [r7, #12]
 800887e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	689a      	ldr	r2, [r3, #8]
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	683a      	ldr	r2, [r7, #0]
 800888e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	683a      	ldr	r2, [r7, #0]
 8008894:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	1c5a      	adds	r2, r3, #1
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	601a      	str	r2, [r3, #0]
}
 80088a6:	bf00      	nop
 80088a8:	3714      	adds	r7, #20
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr

080088b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80088b2:	b480      	push	{r7}
 80088b4:	b085      	sub	sp, #20
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
 80088ba:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088c8:	d103      	bne.n	80088d2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	691b      	ldr	r3, [r3, #16]
 80088ce:	60fb      	str	r3, [r7, #12]
 80088d0:	e00c      	b.n	80088ec <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	3308      	adds	r3, #8
 80088d6:	60fb      	str	r3, [r7, #12]
 80088d8:	e002      	b.n	80088e0 <vListInsert+0x2e>
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	60fb      	str	r3, [r7, #12]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	68ba      	ldr	r2, [r7, #8]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d2f6      	bcs.n	80088da <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	685a      	ldr	r2, [r3, #4]
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	683a      	ldr	r2, [r7, #0]
 80088fa:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	683a      	ldr	r2, [r7, #0]
 8008906:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	1c5a      	adds	r2, r3, #1
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	601a      	str	r2, [r3, #0]
}
 8008918:	bf00      	nop
 800891a:	3714      	adds	r7, #20
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008924:	b480      	push	{r7}
 8008926:	b085      	sub	sp, #20
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	6892      	ldr	r2, [r2, #8]
 800893a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	6852      	ldr	r2, [r2, #4]
 8008944:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	429a      	cmp	r2, r3
 800894e:	d103      	bne.n	8008958 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	689a      	ldr	r2, [r3, #8]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	1e5a      	subs	r2, r3, #1
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
}
 800896c:	4618      	mov	r0, r3
 800896e:	3714      	adds	r7, #20
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d10a      	bne.n	80089a2 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800898c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008990:	f383 8811 	msr	BASEPRI, r3
 8008994:	f3bf 8f6f 	isb	sy
 8008998:	f3bf 8f4f 	dsb	sy
 800899c:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800899e:	bf00      	nop
 80089a0:	e7fe      	b.n	80089a0 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80089a2:	f002 ff39 	bl	800b818 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ae:	68f9      	ldr	r1, [r7, #12]
 80089b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80089b2:	fb01 f303 	mul.w	r3, r1, r3
 80089b6:	441a      	add	r2, r3
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2200      	movs	r2, #0
 80089c0:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d2:	3b01      	subs	r3, #1
 80089d4:	68f9      	ldr	r1, [r7, #12]
 80089d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80089d8:	fb01 f303 	mul.w	r3, r1, r3
 80089dc:	441a      	add	r2, r3
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	22ff      	movs	r2, #255	; 0xff
 80089e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	22ff      	movs	r2, #255	; 0xff
 80089ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d109      	bne.n	8008a0c <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d00f      	beq.n	8008a20 <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	3310      	adds	r3, #16
 8008a04:	4618      	mov	r0, r3
 8008a06:	f001 fcb9 	bl	800a37c <xTaskRemoveFromEventList>
 8008a0a:	e009      	b.n	8008a20 <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	3310      	adds	r3, #16
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7ff fefd 	bl	8008810 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	3324      	adds	r3, #36	; 0x24
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7ff fef8 	bl	8008810 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8008a20:	f002 ff2a 	bl	800b878 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8008a24:	2301      	movs	r3, #1
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3710      	adds	r7, #16
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b08c      	sub	sp, #48	; 0x30
 8008a32:	af02      	add	r7, sp, #8
 8008a34:	60f8      	str	r0, [r7, #12]
 8008a36:	60b9      	str	r1, [r7, #8]
 8008a38:	4613      	mov	r3, r2
 8008a3a:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d10a      	bne.n	8008a58 <xQueueGenericCreate+0x2a>
        __asm volatile
 8008a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a46:	f383 8811 	msr	BASEPRI, r3
 8008a4a:	f3bf 8f6f 	isb	sy
 8008a4e:	f3bf 8f4f 	dsb	sy
 8008a52:	61bb      	str	r3, [r7, #24]
    }
 8008a54:	bf00      	nop
 8008a56:	e7fe      	b.n	8008a56 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	68ba      	ldr	r2, [r7, #8]
 8008a5c:	fb02 f303 	mul.w	r3, r2, r3
 8008a60:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d006      	beq.n	8008a76 <xQueueGenericCreate+0x48>
 8008a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a70:	68fa      	ldr	r2, [r7, #12]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d101      	bne.n	8008a7a <xQueueGenericCreate+0x4c>
 8008a76:	2301      	movs	r3, #1
 8008a78:	e000      	b.n	8008a7c <xQueueGenericCreate+0x4e>
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d10a      	bne.n	8008a96 <xQueueGenericCreate+0x68>
        __asm volatile
 8008a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a84:	f383 8811 	msr	BASEPRI, r3
 8008a88:	f3bf 8f6f 	isb	sy
 8008a8c:	f3bf 8f4f 	dsb	sy
 8008a90:	617b      	str	r3, [r7, #20]
    }
 8008a92:	bf00      	nop
 8008a94:	e7fe      	b.n	8008a94 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8008a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a98:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8008a9c:	d90a      	bls.n	8008ab4 <xQueueGenericCreate+0x86>
        __asm volatile
 8008a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa2:	f383 8811 	msr	BASEPRI, r3
 8008aa6:	f3bf 8f6f 	isb	sy
 8008aaa:	f3bf 8f4f 	dsb	sy
 8008aae:	613b      	str	r3, [r7, #16]
    }
 8008ab0:	bf00      	nop
 8008ab2:	e7fe      	b.n	8008ab2 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab6:	3350      	adds	r3, #80	; 0x50
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f002 ffd7 	bl	800ba6c <pvPortMalloc>
 8008abe:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8008ac0:	6a3b      	ldr	r3, [r7, #32]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d00d      	beq.n	8008ae2 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008ac6:	6a3b      	ldr	r3, [r7, #32]
 8008ac8:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	3350      	adds	r3, #80	; 0x50
 8008ace:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008ad0:	79fa      	ldrb	r2, [r7, #7]
 8008ad2:	6a3b      	ldr	r3, [r7, #32]
 8008ad4:	9300      	str	r3, [sp, #0]
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	69fa      	ldr	r2, [r7, #28]
 8008ada:	68b9      	ldr	r1, [r7, #8]
 8008adc:	68f8      	ldr	r0, [r7, #12]
 8008ade:	f000 f805 	bl	8008aec <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8008ae2:	6a3b      	ldr	r3, [r7, #32]
    }
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3728      	adds	r7, #40	; 0x28
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	60b9      	str	r1, [r7, #8]
 8008af6:	607a      	str	r2, [r7, #4]
 8008af8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d103      	bne.n	8008b08 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	69ba      	ldr	r2, [r7, #24]
 8008b04:	601a      	str	r2, [r3, #0]
 8008b06:	e002      	b.n	8008b0e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008b08:	69bb      	ldr	r3, [r7, #24]
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	68ba      	ldr	r2, [r7, #8]
 8008b18:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008b1a:	2101      	movs	r1, #1
 8008b1c:	69b8      	ldr	r0, [r7, #24]
 8008b1e:	f7ff ff2b 	bl	8008978 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	78fa      	ldrb	r2, [r7, #3]
 8008b26:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8008b2a:	78fb      	ldrb	r3, [r7, #3]
 8008b2c:	68ba      	ldr	r2, [r7, #8]
 8008b2e:	68f9      	ldr	r1, [r7, #12]
 8008b30:	2073      	movs	r0, #115	; 0x73
 8008b32:	f003 ffbb 	bl	800caac <SEGGER_SYSVIEW_RecordU32x3>
}
 8008b36:	bf00      	nop
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
	...

08008b40 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b090      	sub	sp, #64	; 0x40
 8008b44:	af02      	add	r7, sp, #8
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	607a      	str	r2, [r7, #4]
 8008b4c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8008b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d10a      	bne.n	8008b72 <xQueueGenericSend+0x32>
        __asm volatile
 8008b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b60:	f383 8811 	msr	BASEPRI, r3
 8008b64:	f3bf 8f6f 	isb	sy
 8008b68:	f3bf 8f4f 	dsb	sy
 8008b6c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8008b6e:	bf00      	nop
 8008b70:	e7fe      	b.n	8008b70 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d103      	bne.n	8008b80 <xQueueGenericSend+0x40>
 8008b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d101      	bne.n	8008b84 <xQueueGenericSend+0x44>
 8008b80:	2301      	movs	r3, #1
 8008b82:	e000      	b.n	8008b86 <xQueueGenericSend+0x46>
 8008b84:	2300      	movs	r3, #0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d10a      	bne.n	8008ba0 <xQueueGenericSend+0x60>
        __asm volatile
 8008b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b8e:	f383 8811 	msr	BASEPRI, r3
 8008b92:	f3bf 8f6f 	isb	sy
 8008b96:	f3bf 8f4f 	dsb	sy
 8008b9a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8008b9c:	bf00      	nop
 8008b9e:	e7fe      	b.n	8008b9e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	d103      	bne.n	8008bae <xQueueGenericSend+0x6e>
 8008ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d101      	bne.n	8008bb2 <xQueueGenericSend+0x72>
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e000      	b.n	8008bb4 <xQueueGenericSend+0x74>
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d10a      	bne.n	8008bce <xQueueGenericSend+0x8e>
        __asm volatile
 8008bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bbc:	f383 8811 	msr	BASEPRI, r3
 8008bc0:	f3bf 8f6f 	isb	sy
 8008bc4:	f3bf 8f4f 	dsb	sy
 8008bc8:	623b      	str	r3, [r7, #32]
    }
 8008bca:	bf00      	nop
 8008bcc:	e7fe      	b.n	8008bcc <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008bce:	f001 fda5 	bl	800a71c <xTaskGetSchedulerState>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d102      	bne.n	8008bde <xQueueGenericSend+0x9e>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d101      	bne.n	8008be2 <xQueueGenericSend+0xa2>
 8008bde:	2301      	movs	r3, #1
 8008be0:	e000      	b.n	8008be4 <xQueueGenericSend+0xa4>
 8008be2:	2300      	movs	r3, #0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d10a      	bne.n	8008bfe <xQueueGenericSend+0xbe>
        __asm volatile
 8008be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bec:	f383 8811 	msr	BASEPRI, r3
 8008bf0:	f3bf 8f6f 	isb	sy
 8008bf4:	f3bf 8f4f 	dsb	sy
 8008bf8:	61fb      	str	r3, [r7, #28]
    }
 8008bfa:	bf00      	nop
 8008bfc:	e7fe      	b.n	8008bfc <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8008bfe:	f002 fe0b 	bl	800b818 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d302      	bcc.n	8008c14 <xQueueGenericSend+0xd4>
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	d11f      	bne.n	8008c54 <xQueueGenericSend+0x114>
            {
                traceQUEUE_SEND( pxQueue );
 8008c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c16:	4618      	mov	r0, r3
 8008c18:	f004 fd82 	bl	800d720 <SEGGER_SYSVIEW_ShrinkId>
 8008c1c:	68ba      	ldr	r2, [r7, #8]
 8008c1e:	6879      	ldr	r1, [r7, #4]
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	9300      	str	r3, [sp, #0]
 8008c24:	460b      	mov	r3, r1
 8008c26:	4601      	mov	r1, r0
 8008c28:	205a      	movs	r0, #90	; 0x5a
 8008c2a:	f003 ffb5 	bl	800cb98 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c2e:	683a      	ldr	r2, [r7, #0]
 8008c30:	68b9      	ldr	r1, [r7, #8]
 8008c32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c34:	f000 fa56 	bl	80090e4 <prvCopyDataToQueue>
 8008c38:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d004      	beq.n	8008c4c <xQueueGenericSend+0x10c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c44:	3324      	adds	r3, #36	; 0x24
 8008c46:	4618      	mov	r0, r3
 8008c48:	f001 fb98 	bl	800a37c <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8008c4c:	f002 fe14 	bl	800b878 <vPortExitCritical>
                return pdPASS;
 8008c50:	2301      	movs	r3, #1
 8008c52:	e07d      	b.n	8008d50 <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d110      	bne.n	8008c7c <xQueueGenericSend+0x13c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8008c5a:	f002 fe0d 	bl	800b878 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8008c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c60:	4618      	mov	r0, r3
 8008c62:	f004 fd5d 	bl	800d720 <SEGGER_SYSVIEW_ShrinkId>
 8008c66:	68ba      	ldr	r2, [r7, #8]
 8008c68:	6879      	ldr	r1, [r7, #4]
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	9300      	str	r3, [sp, #0]
 8008c6e:	460b      	mov	r3, r1
 8008c70:	4601      	mov	r1, r0
 8008c72:	205a      	movs	r0, #90	; 0x5a
 8008c74:	f003 ff90 	bl	800cb98 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	e069      	b.n	8008d50 <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 8008c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d106      	bne.n	8008c90 <xQueueGenericSend+0x150>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8008c82:	f107 0314 	add.w	r3, r7, #20
 8008c86:	4618      	mov	r0, r3
 8008c88:	f001 fc04 	bl	800a494 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8008c90:	f002 fdf2 	bl	800b878 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8008c94:	f001 f95a 	bl	8009f4c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8008c98:	f002 fdbe 	bl	800b818 <vPortEnterCritical>
 8008c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ca2:	b25b      	sxtb	r3, r3
 8008ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ca8:	d103      	bne.n	8008cb2 <xQueueGenericSend+0x172>
 8008caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cac:	2200      	movs	r2, #0
 8008cae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cb8:	b25b      	sxtb	r3, r3
 8008cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cbe:	d103      	bne.n	8008cc8 <xQueueGenericSend+0x188>
 8008cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008cc8:	f002 fdd6 	bl	800b878 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ccc:	1d3a      	adds	r2, r7, #4
 8008cce:	f107 0314 	add.w	r3, r7, #20
 8008cd2:	4611      	mov	r1, r2
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f001 fbf3 	bl	800a4c0 <xTaskCheckForTimeOut>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d124      	bne.n	8008d2a <xQueueGenericSend+0x1ea>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008ce0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ce2:	f000 faf7 	bl	80092d4 <prvIsQueueFull>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d018      	beq.n	8008d1e <xQueueGenericSend+0x1de>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cee:	3310      	adds	r3, #16
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	4611      	mov	r1, r2
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f001 faef 	bl	800a2d8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8008cfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008cfc:	f000 fa82 	bl	8009204 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8008d00:	f001 f932 	bl	8009f68 <xTaskResumeAll>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	f47f af79 	bne.w	8008bfe <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8008d0c:	4b12      	ldr	r3, [pc, #72]	; (8008d58 <xQueueGenericSend+0x218>)
 8008d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d12:	601a      	str	r2, [r3, #0]
 8008d14:	f3bf 8f4f 	dsb	sy
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	e76f      	b.n	8008bfe <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8008d1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d20:	f000 fa70 	bl	8009204 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8008d24:	f001 f920 	bl	8009f68 <xTaskResumeAll>
 8008d28:	e769      	b.n	8008bfe <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8008d2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d2c:	f000 fa6a 	bl	8009204 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8008d30:	f001 f91a 	bl	8009f68 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8008d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d36:	4618      	mov	r0, r3
 8008d38:	f004 fcf2 	bl	800d720 <SEGGER_SYSVIEW_ShrinkId>
 8008d3c:	68ba      	ldr	r2, [r7, #8]
 8008d3e:	6879      	ldr	r1, [r7, #4]
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	9300      	str	r3, [sp, #0]
 8008d44:	460b      	mov	r3, r1
 8008d46:	4601      	mov	r1, r0
 8008d48:	205a      	movs	r0, #90	; 0x5a
 8008d4a:	f003 ff25 	bl	800cb98 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8008d4e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3738      	adds	r7, #56	; 0x38
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	e000ed04 	.word	0xe000ed04

08008d5c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b090      	sub	sp, #64	; 0x40
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	607a      	str	r2, [r7, #4]
 8008d68:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8008d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d10a      	bne.n	8008d8a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8008d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d78:	f383 8811 	msr	BASEPRI, r3
 8008d7c:	f3bf 8f6f 	isb	sy
 8008d80:	f3bf 8f4f 	dsb	sy
 8008d84:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8008d86:	bf00      	nop
 8008d88:	e7fe      	b.n	8008d88 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d103      	bne.n	8008d98 <xQueueGenericSendFromISR+0x3c>
 8008d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d101      	bne.n	8008d9c <xQueueGenericSendFromISR+0x40>
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e000      	b.n	8008d9e <xQueueGenericSendFromISR+0x42>
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d10a      	bne.n	8008db8 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8008da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da6:	f383 8811 	msr	BASEPRI, r3
 8008daa:	f3bf 8f6f 	isb	sy
 8008dae:	f3bf 8f4f 	dsb	sy
 8008db2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8008db4:	bf00      	nop
 8008db6:	e7fe      	b.n	8008db6 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	2b02      	cmp	r3, #2
 8008dbc:	d103      	bne.n	8008dc6 <xQueueGenericSendFromISR+0x6a>
 8008dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d101      	bne.n	8008dca <xQueueGenericSendFromISR+0x6e>
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e000      	b.n	8008dcc <xQueueGenericSendFromISR+0x70>
 8008dca:	2300      	movs	r3, #0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d10a      	bne.n	8008de6 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8008dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd4:	f383 8811 	msr	BASEPRI, r3
 8008dd8:	f3bf 8f6f 	isb	sy
 8008ddc:	f3bf 8f4f 	dsb	sy
 8008de0:	623b      	str	r3, [r7, #32]
    }
 8008de2:	bf00      	nop
 8008de4:	e7fe      	b.n	8008de4 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008de6:	f002 fe01 	bl	800b9ec <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8008dea:	f3ef 8211 	mrs	r2, BASEPRI
 8008dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df2:	f383 8811 	msr	BASEPRI, r3
 8008df6:	f3bf 8f6f 	isb	sy
 8008dfa:	f3bf 8f4f 	dsb	sy
 8008dfe:	61fa      	str	r2, [r7, #28]
 8008e00:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8008e02:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008e04:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d302      	bcc.n	8008e18 <xQueueGenericSendFromISR+0xbc>
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	2b02      	cmp	r3, #2
 8008e16:	d148      	bne.n	8008eaa <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8008e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e26:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8008e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f004 fc78 	bl	800d720 <SEGGER_SYSVIEW_ShrinkId>
 8008e30:	4601      	mov	r1, r0
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	461a      	mov	r2, r3
 8008e36:	2060      	movs	r0, #96	; 0x60
 8008e38:	f003 fdde 	bl	800c9f8 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e3c:	683a      	ldr	r2, [r7, #0]
 8008e3e:	68b9      	ldr	r1, [r7, #8]
 8008e40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008e42:	f000 f94f 	bl	80090e4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8008e46:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e4e:	d112      	bne.n	8008e76 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d025      	beq.n	8008ea4 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e5a:	3324      	adds	r3, #36	; 0x24
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f001 fa8d 	bl	800a37c <xTaskRemoveFromEventList>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d01d      	beq.n	8008ea4 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d01a      	beq.n	8008ea4 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2201      	movs	r2, #1
 8008e72:	601a      	str	r2, [r3, #0]
 8008e74:	e016      	b.n	8008ea4 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8008e76:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008e7a:	2b7f      	cmp	r3, #127	; 0x7f
 8008e7c:	d10a      	bne.n	8008e94 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8008e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e82:	f383 8811 	msr	BASEPRI, r3
 8008e86:	f3bf 8f6f 	isb	sy
 8008e8a:	f3bf 8f4f 	dsb	sy
 8008e8e:	617b      	str	r3, [r7, #20]
    }
 8008e90:	bf00      	nop
 8008e92:	e7fe      	b.n	8008e92 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008e94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008e98:	3301      	adds	r3, #1
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	b25a      	sxtb	r2, r3
 8008e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8008ea8:	e00b      	b.n	8008ec2 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8008eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eac:	4618      	mov	r0, r3
 8008eae:	f004 fc37 	bl	800d720 <SEGGER_SYSVIEW_ShrinkId>
 8008eb2:	4601      	mov	r1, r0
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	2060      	movs	r0, #96	; 0x60
 8008eba:	f003 fd9d 	bl	800c9f8 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ec4:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8008ecc:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8008ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3740      	adds	r7, #64	; 0x40
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8008ed8:	b590      	push	{r4, r7, lr}
 8008eda:	b08f      	sub	sp, #60	; 0x3c
 8008edc:	af02      	add	r7, sp, #8
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	60b9      	str	r1, [r7, #8]
 8008ee2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8008eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d10a      	bne.n	8008f08 <xQueueReceive+0x30>
        __asm volatile
 8008ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef6:	f383 8811 	msr	BASEPRI, r3
 8008efa:	f3bf 8f6f 	isb	sy
 8008efe:	f3bf 8f4f 	dsb	sy
 8008f02:	623b      	str	r3, [r7, #32]
    }
 8008f04:	bf00      	nop
 8008f06:	e7fe      	b.n	8008f06 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d103      	bne.n	8008f16 <xQueueReceive+0x3e>
 8008f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d101      	bne.n	8008f1a <xQueueReceive+0x42>
 8008f16:	2301      	movs	r3, #1
 8008f18:	e000      	b.n	8008f1c <xQueueReceive+0x44>
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d10a      	bne.n	8008f36 <xQueueReceive+0x5e>
        __asm volatile
 8008f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f24:	f383 8811 	msr	BASEPRI, r3
 8008f28:	f3bf 8f6f 	isb	sy
 8008f2c:	f3bf 8f4f 	dsb	sy
 8008f30:	61fb      	str	r3, [r7, #28]
    }
 8008f32:	bf00      	nop
 8008f34:	e7fe      	b.n	8008f34 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f36:	f001 fbf1 	bl	800a71c <xTaskGetSchedulerState>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d102      	bne.n	8008f46 <xQueueReceive+0x6e>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d101      	bne.n	8008f4a <xQueueReceive+0x72>
 8008f46:	2301      	movs	r3, #1
 8008f48:	e000      	b.n	8008f4c <xQueueReceive+0x74>
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d10a      	bne.n	8008f66 <xQueueReceive+0x8e>
        __asm volatile
 8008f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f54:	f383 8811 	msr	BASEPRI, r3
 8008f58:	f3bf 8f6f 	isb	sy
 8008f5c:	f3bf 8f4f 	dsb	sy
 8008f60:	61bb      	str	r3, [r7, #24]
    }
 8008f62:	bf00      	nop
 8008f64:	e7fe      	b.n	8008f64 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8008f66:	f002 fc57 	bl	800b818 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f6e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d024      	beq.n	8008fc0 <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008f76:	68b9      	ldr	r1, [r7, #8]
 8008f78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f7a:	f000 f91d 	bl	80091b8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8008f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f80:	4618      	mov	r0, r3
 8008f82:	f004 fbcd 	bl	800d720 <SEGGER_SYSVIEW_ShrinkId>
 8008f86:	4604      	mov	r4, r0
 8008f88:	2000      	movs	r0, #0
 8008f8a:	f004 fbc9 	bl	800d720 <SEGGER_SYSVIEW_ShrinkId>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2101      	movs	r1, #1
 8008f94:	9100      	str	r1, [sp, #0]
 8008f96:	4621      	mov	r1, r4
 8008f98:	205c      	movs	r0, #92	; 0x5c
 8008f9a:	f003 fdfd 	bl	800cb98 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa0:	1e5a      	subs	r2, r3, #1
 8008fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa8:	691b      	ldr	r3, [r3, #16]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d004      	beq.n	8008fb8 <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb0:	3310      	adds	r3, #16
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f001 f9e2 	bl	800a37c <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8008fb8:	f002 fc5e 	bl	800b878 <vPortExitCritical>
                return pdPASS;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e08a      	b.n	80090d6 <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d113      	bne.n	8008fee <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8008fc6:	f002 fc57 	bl	800b878 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8008fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f004 fba7 	bl	800d720 <SEGGER_SYSVIEW_ShrinkId>
 8008fd2:	4604      	mov	r4, r0
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	f004 fba3 	bl	800d720 <SEGGER_SYSVIEW_ShrinkId>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2101      	movs	r1, #1
 8008fe0:	9100      	str	r1, [sp, #0]
 8008fe2:	4621      	mov	r1, r4
 8008fe4:	205c      	movs	r0, #92	; 0x5c
 8008fe6:	f003 fdd7 	bl	800cb98 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8008fea:	2300      	movs	r3, #0
 8008fec:	e073      	b.n	80090d6 <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 8008fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d106      	bne.n	8009002 <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8008ff4:	f107 0310 	add.w	r3, r7, #16
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f001 fa4b 	bl	800a494 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8008ffe:	2301      	movs	r3, #1
 8009000:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8009002:	f002 fc39 	bl	800b878 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8009006:	f000 ffa1 	bl	8009f4c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800900a:	f002 fc05 	bl	800b818 <vPortEnterCritical>
 800900e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009010:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009014:	b25b      	sxtb	r3, r3
 8009016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800901a:	d103      	bne.n	8009024 <xQueueReceive+0x14c>
 800901c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901e:	2200      	movs	r2, #0
 8009020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009026:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800902a:	b25b      	sxtb	r3, r3
 800902c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009030:	d103      	bne.n	800903a <xQueueReceive+0x162>
 8009032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009034:	2200      	movs	r2, #0
 8009036:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800903a:	f002 fc1d 	bl	800b878 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800903e:	1d3a      	adds	r2, r7, #4
 8009040:	f107 0310 	add.w	r3, r7, #16
 8009044:	4611      	mov	r1, r2
 8009046:	4618      	mov	r0, r3
 8009048:	f001 fa3a 	bl	800a4c0 <xTaskCheckForTimeOut>
 800904c:	4603      	mov	r3, r0
 800904e:	2b00      	cmp	r3, #0
 8009050:	d124      	bne.n	800909c <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009054:	f000 f928 	bl	80092a8 <prvIsQueueEmpty>
 8009058:	4603      	mov	r3, r0
 800905a:	2b00      	cmp	r3, #0
 800905c:	d018      	beq.n	8009090 <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800905e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009060:	3324      	adds	r3, #36	; 0x24
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	4611      	mov	r1, r2
 8009066:	4618      	mov	r0, r3
 8009068:	f001 f936 	bl	800a2d8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800906c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800906e:	f000 f8c9 	bl	8009204 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8009072:	f000 ff79 	bl	8009f68 <xTaskResumeAll>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	f47f af74 	bne.w	8008f66 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800907e:	4b18      	ldr	r3, [pc, #96]	; (80090e0 <xQueueReceive+0x208>)
 8009080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009084:	601a      	str	r2, [r3, #0]
 8009086:	f3bf 8f4f 	dsb	sy
 800908a:	f3bf 8f6f 	isb	sy
 800908e:	e76a      	b.n	8008f66 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8009090:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009092:	f000 f8b7 	bl	8009204 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009096:	f000 ff67 	bl	8009f68 <xTaskResumeAll>
 800909a:	e764      	b.n	8008f66 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800909c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800909e:	f000 f8b1 	bl	8009204 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80090a2:	f000 ff61 	bl	8009f68 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80090a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090a8:	f000 f8fe 	bl	80092a8 <prvIsQueueEmpty>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	f43f af59 	beq.w	8008f66 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80090b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b6:	4618      	mov	r0, r3
 80090b8:	f004 fb32 	bl	800d720 <SEGGER_SYSVIEW_ShrinkId>
 80090bc:	4604      	mov	r4, r0
 80090be:	2000      	movs	r0, #0
 80090c0:	f004 fb2e 	bl	800d720 <SEGGER_SYSVIEW_ShrinkId>
 80090c4:	4602      	mov	r2, r0
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2101      	movs	r1, #1
 80090ca:	9100      	str	r1, [sp, #0]
 80090cc:	4621      	mov	r1, r4
 80090ce:	205c      	movs	r0, #92	; 0x5c
 80090d0:	f003 fd62 	bl	800cb98 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80090d4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3734      	adds	r7, #52	; 0x34
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd90      	pop	{r4, r7, pc}
 80090de:	bf00      	nop
 80090e0:	e000ed04 	.word	0xe000ed04

080090e4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b086      	sub	sp, #24
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	60b9      	str	r1, [r7, #8]
 80090ee:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80090f0:	2300      	movs	r3, #0
 80090f2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d10d      	bne.n	800911e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d14d      	bne.n	80091a6 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	4618      	mov	r0, r3
 8009110:	f001 fb22 	bl	800a758 <xTaskPriorityDisinherit>
 8009114:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2200      	movs	r2, #0
 800911a:	609a      	str	r2, [r3, #8]
 800911c:	e043      	b.n	80091a6 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d119      	bne.n	8009158 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6858      	ldr	r0, [r3, #4]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912c:	461a      	mov	r2, r3
 800912e:	68b9      	ldr	r1, [r7, #8]
 8009130:	f004 fdc0 	bl	800dcb4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	685a      	ldr	r2, [r3, #4]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800913c:	441a      	add	r2, r3
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	685a      	ldr	r2, [r3, #4]
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	429a      	cmp	r2, r3
 800914c:	d32b      	bcc.n	80091a6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	605a      	str	r2, [r3, #4]
 8009156:	e026      	b.n	80091a6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	68d8      	ldr	r0, [r3, #12]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009160:	461a      	mov	r2, r3
 8009162:	68b9      	ldr	r1, [r7, #8]
 8009164:	f004 fda6 	bl	800dcb4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	68da      	ldr	r2, [r3, #12]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009170:	425b      	negs	r3, r3
 8009172:	441a      	add	r2, r3
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	68da      	ldr	r2, [r3, #12]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	429a      	cmp	r2, r3
 8009182:	d207      	bcs.n	8009194 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	689a      	ldr	r2, [r3, #8]
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800918c:	425b      	negs	r3, r3
 800918e:	441a      	add	r2, r3
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2b02      	cmp	r3, #2
 8009198:	d105      	bne.n	80091a6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d002      	beq.n	80091a6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	3b01      	subs	r3, #1
 80091a4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	1c5a      	adds	r2, r3, #1
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80091ae:	697b      	ldr	r3, [r7, #20]
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3718      	adds	r7, #24
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d018      	beq.n	80091fc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	68da      	ldr	r2, [r3, #12]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d2:	441a      	add	r2, r3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	68da      	ldr	r2, [r3, #12]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d303      	bcc.n	80091ec <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	68d9      	ldr	r1, [r3, #12]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f4:	461a      	mov	r2, r3
 80091f6:	6838      	ldr	r0, [r7, #0]
 80091f8:	f004 fd5c 	bl	800dcb4 <memcpy>
    }
}
 80091fc:	bf00      	nop
 80091fe:	3708      	adds	r7, #8
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800920c:	f002 fb04 	bl	800b818 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009216:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8009218:	e011      	b.n	800923e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800921e:	2b00      	cmp	r3, #0
 8009220:	d012      	beq.n	8009248 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	3324      	adds	r3, #36	; 0x24
 8009226:	4618      	mov	r0, r3
 8009228:	f001 f8a8 	bl	800a37c <xTaskRemoveFromEventList>
 800922c:	4603      	mov	r3, r0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d001      	beq.n	8009236 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8009232:	f001 f9ab 	bl	800a58c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8009236:	7bfb      	ldrb	r3, [r7, #15]
 8009238:	3b01      	subs	r3, #1
 800923a:	b2db      	uxtb	r3, r3
 800923c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800923e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009242:	2b00      	cmp	r3, #0
 8009244:	dce9      	bgt.n	800921a <prvUnlockQueue+0x16>
 8009246:	e000      	b.n	800924a <prvUnlockQueue+0x46>
                        break;
 8009248:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	22ff      	movs	r2, #255	; 0xff
 800924e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8009252:	f002 fb11 	bl	800b878 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8009256:	f002 fadf 	bl	800b818 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009260:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8009262:	e011      	b.n	8009288 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d012      	beq.n	8009292 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	3310      	adds	r3, #16
 8009270:	4618      	mov	r0, r3
 8009272:	f001 f883 	bl	800a37c <xTaskRemoveFromEventList>
 8009276:	4603      	mov	r3, r0
 8009278:	2b00      	cmp	r3, #0
 800927a:	d001      	beq.n	8009280 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800927c:	f001 f986 	bl	800a58c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8009280:	7bbb      	ldrb	r3, [r7, #14]
 8009282:	3b01      	subs	r3, #1
 8009284:	b2db      	uxtb	r3, r3
 8009286:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8009288:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800928c:	2b00      	cmp	r3, #0
 800928e:	dce9      	bgt.n	8009264 <prvUnlockQueue+0x60>
 8009290:	e000      	b.n	8009294 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8009292:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	22ff      	movs	r2, #255	; 0xff
 8009298:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800929c:	f002 faec 	bl	800b878 <vPortExitCritical>
}
 80092a0:	bf00      	nop
 80092a2:	3710      	adds	r7, #16
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80092b0:	f002 fab2 	bl	800b818 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d102      	bne.n	80092c2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80092bc:	2301      	movs	r3, #1
 80092be:	60fb      	str	r3, [r7, #12]
 80092c0:	e001      	b.n	80092c6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80092c2:	2300      	movs	r3, #0
 80092c4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80092c6:	f002 fad7 	bl	800b878 <vPortExitCritical>

    return xReturn;
 80092ca:	68fb      	ldr	r3, [r7, #12]
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3710      	adds	r7, #16
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80092dc:	f002 fa9c 	bl	800b818 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d102      	bne.n	80092f2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80092ec:	2301      	movs	r3, #1
 80092ee:	60fb      	str	r3, [r7, #12]
 80092f0:	e001      	b.n	80092f6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80092f2:	2300      	movs	r3, #0
 80092f4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80092f6:	f002 fabf 	bl	800b878 <vPortExitCritical>

    return xReturn;
 80092fa:	68fb      	ldr	r3, [r7, #12]
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3710      	adds	r7, #16
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800930e:	2300      	movs	r3, #0
 8009310:	60fb      	str	r3, [r7, #12]
 8009312:	e01e      	b.n	8009352 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009314:	4a13      	ldr	r2, [pc, #76]	; (8009364 <vQueueAddToRegistry+0x60>)
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d115      	bne.n	800934c <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009320:	4910      	ldr	r1, [pc, #64]	; (8009364 <vQueueAddToRegistry+0x60>)
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	683a      	ldr	r2, [r7, #0]
 8009326:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800932a:	4a0e      	ldr	r2, [pc, #56]	; (8009364 <vQueueAddToRegistry+0x60>)
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	00db      	lsls	r3, r3, #3
 8009330:	4413      	add	r3, r2
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	4618      	mov	r0, r3
 800933a:	f004 f9f1 	bl	800d720 <SEGGER_SYSVIEW_ShrinkId>
 800933e:	4601      	mov	r1, r0
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	461a      	mov	r2, r3
 8009344:	2071      	movs	r0, #113	; 0x71
 8009346:	f003 fb57 	bl	800c9f8 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800934a:	e006      	b.n	800935a <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	3301      	adds	r3, #1
 8009350:	60fb      	str	r3, [r7, #12]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2b07      	cmp	r3, #7
 8009356:	d9dd      	bls.n	8009314 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8009358:	bf00      	nop
 800935a:	bf00      	nop
 800935c:	3710      	adds	r7, #16
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	200025cc 	.word	0x200025cc

08009368 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8009368:	b580      	push	{r7, lr}
 800936a:	b086      	sub	sp, #24
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8009378:	f002 fa4e 	bl	800b818 <vPortEnterCritical>
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009382:	b25b      	sxtb	r3, r3
 8009384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009388:	d103      	bne.n	8009392 <vQueueWaitForMessageRestricted+0x2a>
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	2200      	movs	r2, #0
 800938e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009398:	b25b      	sxtb	r3, r3
 800939a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800939e:	d103      	bne.n	80093a8 <vQueueWaitForMessageRestricted+0x40>
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093a8:	f002 fa66 	bl	800b878 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d106      	bne.n	80093c2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	3324      	adds	r3, #36	; 0x24
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	68b9      	ldr	r1, [r7, #8]
 80093bc:	4618      	mov	r0, r3
 80093be:	f000 ffaf 	bl	800a320 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80093c2:	6978      	ldr	r0, [r7, #20]
 80093c4:	f7ff ff1e 	bl	8009204 <prvUnlockQueue>
    }
 80093c8:	bf00      	nop
 80093ca:	3718      	adds	r7, #24
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <xStreamBufferGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes,
                                                     size_t xTriggerLevelBytes,
                                                     BaseType_t xIsMessageBuffer )
    {
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b08c      	sub	sp, #48	; 0x30
 80093d4:	af02      	add	r7, sp, #8
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	60b9      	str	r1, [r7, #8]
 80093da:	607a      	str	r2, [r7, #4]

        /* In case the stream buffer is going to be used as a message buffer
         * (that is, it will hold discrete messages with a little meta data that
         * says how big the next message is) check the buffer will be large enough
         * to hold at least one message. */
        if( xIsMessageBuffer == pdTRUE )
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d110      	bne.n	8009404 <xStreamBufferGenericCreate+0x34>
        {
            /* Is a message buffer but not statically allocated. */
            ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 80093e2:	2301      	movs	r3, #1
 80093e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2b04      	cmp	r3, #4
 80093ec:	d81b      	bhi.n	8009426 <xStreamBufferGenericCreate+0x56>
        __asm volatile
 80093ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f2:	f383 8811 	msr	BASEPRI, r3
 80093f6:	f3bf 8f6f 	isb	sy
 80093fa:	f3bf 8f4f 	dsb	sy
 80093fe:	61fb      	str	r3, [r7, #28]
    }
 8009400:	bf00      	nop
 8009402:	e7fe      	b.n	8009402 <xStreamBufferGenericCreate+0x32>
        }
        else
        {
            /* Not a message buffer and not statically allocated. */
            ucFlags = 0;
 8009404:	2300      	movs	r3, #0
 8009406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            configASSERT( xBufferSizeBytes > 0 );
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d10a      	bne.n	8009426 <xStreamBufferGenericCreate+0x56>
        __asm volatile
 8009410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009414:	f383 8811 	msr	BASEPRI, r3
 8009418:	f3bf 8f6f 	isb	sy
 800941c:	f3bf 8f4f 	dsb	sy
 8009420:	61bb      	str	r3, [r7, #24]
    }
 8009422:	bf00      	nop
 8009424:	e7fe      	b.n	8009424 <xStreamBufferGenericCreate+0x54>
        }

        configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8009426:	68ba      	ldr	r2, [r7, #8]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	429a      	cmp	r2, r3
 800942c:	d90a      	bls.n	8009444 <xStreamBufferGenericCreate+0x74>
        __asm volatile
 800942e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009432:	f383 8811 	msr	BASEPRI, r3
 8009436:	f3bf 8f6f 	isb	sy
 800943a:	f3bf 8f4f 	dsb	sy
 800943e:	617b      	str	r3, [r7, #20]
    }
 8009440:	bf00      	nop
 8009442:	e7fe      	b.n	8009442 <xStreamBufferGenericCreate+0x72>

        /* A trigger level of 0 would cause a waiting task to unblock even when
         * the buffer was empty. */
        if( xTriggerLevelBytes == ( size_t ) 0 )
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d101      	bne.n	800944e <xStreamBufferGenericCreate+0x7e>
        {
            xTriggerLevelBytes = ( size_t ) 1;
 800944a:	2301      	movs	r3, #1
 800944c:	60bb      	str	r3, [r7, #8]
         * and the buffer follows immediately after.  The requested size is
         * incremented so the free space is returned as the user would expect -
         * this is a quirk of the implementation that means otherwise the free
         * space would be reported as one byte smaller than would be logically
         * expected. */
        if( xBufferSizeBytes < ( xBufferSizeBytes + 1 + sizeof( StreamBuffer_t ) ) )
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f113 0f26 	cmn.w	r3, #38	; 0x26
 8009454:	d809      	bhi.n	800946a <xStreamBufferGenericCreate+0x9a>
        {
            xBufferSizeBytes++;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	3301      	adds	r3, #1
 800945a:	60fb      	str	r3, [r7, #12]
            pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	3324      	adds	r3, #36	; 0x24
 8009460:	4618      	mov	r0, r3
 8009462:	f002 fb03 	bl	800ba6c <pvPortMalloc>
 8009466:	6278      	str	r0, [r7, #36]	; 0x24
 8009468:	e001      	b.n	800946e <xStreamBufferGenericCreate+0x9e>
        }
        else
        {
            pucAllocatedMemory = NULL;
 800946a:	2300      	movs	r3, #0
 800946c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        

        if( pucAllocatedMemory != NULL )
 800946e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009470:	2b00      	cmp	r3, #0
 8009472:	d011      	beq.n	8009498 <xStreamBufferGenericCreate+0xc8>
        {
            prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory,       /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8009474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009476:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800947a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800947e:	9300      	str	r3, [sp, #0]
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	68fa      	ldr	r2, [r7, #12]
 8009484:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009486:	f000 fb3f 	bl	8009b08 <prvInitialiseNewStreamBuffer>
                                          pucAllocatedMemory + sizeof( StreamBuffer_t ), /* Storage area follows. */ /*lint !e9016 Indexing past structure valid for uint8_t pointer, also storage area has no alignment requirement. */
                                          xBufferSizeBytes,
                                          xTriggerLevelBytes,
                                          ucFlags );

            traceSTREAM_BUFFER_CREATE( ( ( StreamBuffer_t * ) pucAllocatedMemory ), xIsMessageBuffer );
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800948e:	4619      	mov	r1, r3
 8009490:	2089      	movs	r0, #137	; 0x89
 8009492:	f003 fab1 	bl	800c9f8 <SEGGER_SYSVIEW_RecordU32x2>
 8009496:	e005      	b.n	80094a4 <xStreamBufferGenericCreate+0xd4>
        }
        else
        {
            traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	4619      	mov	r1, r3
 800949e:	2089      	movs	r0, #137	; 0x89
 80094a0:	f003 faaa 	bl	800c9f8 <SEGGER_SYSVIEW_RecordU32x2>
        }

        return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 80094a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80094a6:	4618      	mov	r0, r3
 80094a8:	3728      	adds	r7, #40	; 0x28
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <xStreamBufferSpacesAvailable>:
    return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 80094ae:	b480      	push	{r7}
 80094b0:	b087      	sub	sp, #28
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
    const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	613b      	str	r3, [r7, #16]
    size_t xSpace;

    configASSERT( pxStreamBuffer );
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d10a      	bne.n	80094d6 <xStreamBufferSpacesAvailable+0x28>
        __asm volatile
 80094c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c4:	f383 8811 	msr	BASEPRI, r3
 80094c8:	f3bf 8f6f 	isb	sy
 80094cc:	f3bf 8f4f 	dsb	sy
 80094d0:	60fb      	str	r3, [r7, #12]
    }
 80094d2:	bf00      	nop
 80094d4:	e7fe      	b.n	80094d4 <xStreamBufferSpacesAvailable+0x26>

    xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	689a      	ldr	r2, [r3, #8]
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4413      	add	r3, r2
 80094e0:	617b      	str	r3, [r7, #20]
    xSpace -= pxStreamBuffer->xHead;
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	697a      	ldr	r2, [r7, #20]
 80094e8:	1ad3      	subs	r3, r2, r3
 80094ea:	617b      	str	r3, [r7, #20]
    xSpace -= ( size_t ) 1;
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	3b01      	subs	r3, #1
 80094f0:	617b      	str	r3, [r7, #20]

    if( xSpace >= pxStreamBuffer->xLength )
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	697a      	ldr	r2, [r7, #20]
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d304      	bcc.n	8009506 <xStreamBufferSpacesAvailable+0x58>
    {
        xSpace -= pxStreamBuffer->xLength;
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	697a      	ldr	r2, [r7, #20]
 8009502:	1ad3      	subs	r3, r2, r3
 8009504:	617b      	str	r3, [r7, #20]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xSpace;
 8009506:	697b      	ldr	r3, [r7, #20]
}
 8009508:	4618      	mov	r0, r3
 800950a:	371c      	adds	r7, #28
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b092      	sub	sp, #72	; 0x48
 8009518:	af02      	add	r7, sp, #8
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	607a      	str	r2, [r7, #4]
 8009520:	603b      	str	r3, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	637b      	str	r3, [r7, #52]	; 0x34
    size_t xReturn, xSpace = 0;
 8009526:	2300      	movs	r3, #0
 8009528:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t xRequiredSpace = xDataLengthBytes;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	63bb      	str	r3, [r7, #56]	; 0x38
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
 800952e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	3b01      	subs	r3, #1
 8009534:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pvTxData );
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d10a      	bne.n	8009552 <xStreamBufferSend+0x3e>
        __asm volatile
 800953c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009540:	f383 8811 	msr	BASEPRI, r3
 8009544:	f3bf 8f6f 	isb	sy
 8009548:	f3bf 8f4f 	dsb	sy
 800954c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800954e:	bf00      	nop
 8009550:	e7fe      	b.n	8009550 <xStreamBufferSend+0x3c>
    configASSERT( pxStreamBuffer );
 8009552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009554:	2b00      	cmp	r3, #0
 8009556:	d10a      	bne.n	800956e <xStreamBufferSend+0x5a>
        __asm volatile
 8009558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955c:	f383 8811 	msr	BASEPRI, r3
 8009560:	f3bf 8f6f 	isb	sy
 8009564:	f3bf 8f4f 	dsb	sy
 8009568:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800956a:	bf00      	nop
 800956c:	e7fe      	b.n	800956c <xStreamBufferSend+0x58>

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800956e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009570:	7f1b      	ldrb	r3, [r3, #28]
 8009572:	f003 0301 	and.w	r3, r3, #1
 8009576:	2b00      	cmp	r3, #0
 8009578:	d018      	beq.n	80095ac <xStreamBufferSend+0x98>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800957a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800957c:	3304      	adds	r3, #4
 800957e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );
 8009580:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	429a      	cmp	r2, r3
 8009586:	d80a      	bhi.n	800959e <xStreamBufferSend+0x8a>
        __asm volatile
 8009588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958c:	f383 8811 	msr	BASEPRI, r3
 8009590:	f3bf 8f6f 	isb	sy
 8009594:	f3bf 8f4f 	dsb	sy
 8009598:	623b      	str	r3, [r7, #32]
    }
 800959a:	bf00      	nop
 800959c:	e7fe      	b.n	800959c <xStreamBufferSend+0x88>

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
 800959e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d908      	bls.n	80095b8 <xStreamBufferSend+0xa4>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
 80095a6:	2300      	movs	r3, #0
 80095a8:	603b      	str	r3, [r7, #0]
 80095aa:	e005      	b.n	80095b8 <xStreamBufferSend+0xa4>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
 80095ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d901      	bls.n	80095b8 <xStreamBufferSend+0xa4>
        {
            xRequiredSpace = xMaxReportedSpace;
 80095b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b6:	63bb      	str	r3, [r7, #56]	; 0x38
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d041      	beq.n	8009642 <xStreamBufferSend+0x12e>
    {
        vTaskSetTimeOutState( &xTimeOut );
 80095be:	f107 0314 	add.w	r3, r7, #20
 80095c2:	4618      	mov	r0, r3
 80095c4:	f000 ff40 	bl	800a448 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
 80095c8:	f002 f926 	bl	800b818 <vPortEnterCritical>
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 80095cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80095ce:	f7ff ff6e 	bl	80094ae <xStreamBufferSpacesAvailable>
 80095d2:	63f8      	str	r0, [r7, #60]	; 0x3c

                if( xSpace < xRequiredSpace )
 80095d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80095d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d8:	429a      	cmp	r2, r3
 80095da:	d218      	bcs.n	800960e <xStreamBufferSend+0xfa>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
 80095dc:	2100      	movs	r1, #0
 80095de:	2000      	movs	r0, #0
 80095e0:	f001 fc28 	bl	800ae34 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 80095e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095e6:	695b      	ldr	r3, [r3, #20]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d00a      	beq.n	8009602 <xStreamBufferSend+0xee>
        __asm volatile
 80095ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f0:	f383 8811 	msr	BASEPRI, r3
 80095f4:	f3bf 8f6f 	isb	sy
 80095f8:	f3bf 8f4f 	dsb	sy
 80095fc:	61fb      	str	r3, [r7, #28]
    }
 80095fe:	bf00      	nop
 8009600:	e7fe      	b.n	8009600 <xStreamBufferSend+0xec>
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8009602:	f001 f87b 	bl	800a6fc <xTaskGetCurrentTaskHandle>
 8009606:	4602      	mov	r2, r0
 8009608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800960a:	615a      	str	r2, [r3, #20]
 800960c:	e002      	b.n	8009614 <xStreamBufferSend+0x100>
                }
                else
                {
                    taskEXIT_CRITICAL();
 800960e:	f002 f933 	bl	800b878 <vPortExitCritical>
                    break;
 8009612:	e016      	b.n	8009642 <xStreamBufferSend+0x12e>
                }
            }
            taskEXIT_CRITICAL();
 8009614:	f002 f930 	bl	800b878 <vPortExitCritical>

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	9300      	str	r3, [sp, #0]
 800961c:	2300      	movs	r3, #0
 800961e:	2200      	movs	r2, #0
 8009620:	2100      	movs	r1, #0
 8009622:	2000      	movs	r0, #0
 8009624:	f001 f986 	bl	800a934 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
 8009628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800962a:	2200      	movs	r2, #0
 800962c:	615a      	str	r2, [r3, #20]
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 800962e:	463a      	mov	r2, r7
 8009630:	f107 0314 	add.w	r3, r7, #20
 8009634:	4611      	mov	r1, r2
 8009636:	4618      	mov	r0, r3
 8009638:	f000 ff42 	bl	800a4c0 <xTaskCheckForTimeOut>
 800963c:	4603      	mov	r3, r0
 800963e:	2b00      	cmp	r3, #0
 8009640:	d0c2      	beq.n	80095c8 <xStreamBufferSend+0xb4>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
 8009642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009644:	2b00      	cmp	r3, #0
 8009646:	d103      	bne.n	8009650 <xStreamBufferSend+0x13c>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8009648:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800964a:	f7ff ff30 	bl	80094ae <xStreamBufferSpacesAvailable>
 800964e:	63f8      	str	r0, [r7, #60]	; 0x3c
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8009650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009652:	9300      	str	r3, [sp, #0]
 8009654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009656:	687a      	ldr	r2, [r7, #4]
 8009658:	68b9      	ldr	r1, [r7, #8]
 800965a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800965c:	f000 f832 	bl	80096c4 <prvWriteMessageToBuffer>
 8009660:	62f8      	str	r0, [r7, #44]	; 0x2c

    if( xReturn > ( size_t ) 0 )
 8009662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009664:	2b00      	cmp	r3, #0
 8009666:	d022      	beq.n	80096ae <xStreamBufferSend+0x19a>
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800966c:	4619      	mov	r1, r3
 800966e:	208c      	movs	r0, #140	; 0x8c
 8009670:	f003 f9c2 	bl	800c9f8 <SEGGER_SYSVIEW_RecordU32x2>

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8009674:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009676:	f000 fa27 	bl	8009ac8 <prvBytesInBuffer>
 800967a:	4602      	mov	r2, r0
 800967c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	429a      	cmp	r2, r3
 8009682:	d31a      	bcc.n	80096ba <xStreamBufferSend+0x1a6>
        {
            sbSEND_COMPLETED( pxStreamBuffer );
 8009684:	f000 fc62 	bl	8009f4c <vTaskSuspendAll>
 8009688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800968a:	691b      	ldr	r3, [r3, #16]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d00b      	beq.n	80096a8 <xStreamBufferSend+0x194>
 8009690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009692:	6918      	ldr	r0, [r3, #16]
 8009694:	2300      	movs	r3, #0
 8009696:	9300      	str	r3, [sp, #0]
 8009698:	2300      	movs	r3, #0
 800969a:	2200      	movs	r2, #0
 800969c:	2100      	movs	r1, #0
 800969e:	f001 f9d1 	bl	800aa44 <xTaskGenericNotify>
 80096a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096a4:	2200      	movs	r2, #0
 80096a6:	611a      	str	r2, [r3, #16]
 80096a8:	f000 fc5e 	bl	8009f68 <xTaskResumeAll>
 80096ac:	e005      	b.n	80096ba <xStreamBufferSend+0x1a6>
        }
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2200      	movs	r2, #0
 80096b2:	4619      	mov	r1, r3
 80096b4:	208c      	movs	r0, #140	; 0x8c
 80096b6:	f003 f99f 	bl	800c9f8 <SEGGER_SYSVIEW_RecordU32x2>
    }

    return xReturn;
 80096ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3740      	adds	r7, #64	; 0x40
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
                                       const void * pvTxData,
                                       size_t xDataLengthBytes,
                                       size_t xSpace,
                                       size_t xRequiredSpace )
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b086      	sub	sp, #24
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	607a      	str	r2, [r7, #4]
 80096d0:	603b      	str	r3, [r7, #0]
    BaseType_t xShouldWrite;
    size_t xReturn;

    if( xSpace == ( size_t ) 0 )
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d102      	bne.n	80096de <prvWriteMessageToBuffer+0x1a>
    {
        /* Doesn't matter if this is a stream buffer or a message buffer, there
         * is no space to write. */
        xShouldWrite = pdFALSE;
 80096d8:	2300      	movs	r3, #0
 80096da:	617b      	str	r3, [r7, #20]
 80096dc:	e01d      	b.n	800971a <prvWriteMessageToBuffer+0x56>
    }
    else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	7f1b      	ldrb	r3, [r3, #28]
 80096e2:	f003 0301 	and.w	r3, r3, #1
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d108      	bne.n	80096fc <prvWriteMessageToBuffer+0x38>
    {
        /* This is a stream buffer, as opposed to a message buffer, so writing a
         * stream of bytes rather than discrete messages.  Write as many bytes as
         * possible. */
        xShouldWrite = pdTRUE;
 80096ea:	2301      	movs	r3, #1
 80096ec:	617b      	str	r3, [r7, #20]
        xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	4293      	cmp	r3, r2
 80096f4:	bf28      	it	cs
 80096f6:	4613      	movcs	r3, r2
 80096f8:	607b      	str	r3, [r7, #4]
 80096fa:	e00e      	b.n	800971a <prvWriteMessageToBuffer+0x56>
    }
    else if( xSpace >= xRequiredSpace )
 80096fc:	683a      	ldr	r2, [r7, #0]
 80096fe:	6a3b      	ldr	r3, [r7, #32]
 8009700:	429a      	cmp	r2, r3
 8009702:	d308      	bcc.n	8009716 <prvWriteMessageToBuffer+0x52>
    {
        /* This is a message buffer, as opposed to a stream buffer, and there
         * is enough space to write both the message length and the message itself
         * into the buffer.  Start by writing the length of the data, the data
         * itself will be written later in this function. */
        xShouldWrite = pdTRUE;
 8009704:	2301      	movs	r3, #1
 8009706:	617b      	str	r3, [r7, #20]
        ( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8009708:	1d3b      	adds	r3, r7, #4
 800970a:	2204      	movs	r2, #4
 800970c:	4619      	mov	r1, r3
 800970e:	68f8      	ldr	r0, [r7, #12]
 8009710:	f000 f8ee 	bl	80098f0 <prvWriteBytesToBuffer>
 8009714:	e001      	b.n	800971a <prvWriteMessageToBuffer+0x56>
    }
    else
    {
        /* There is space available, but not enough space. */
        xShouldWrite = pdFALSE;
 8009716:	2300      	movs	r3, #0
 8009718:	617b      	str	r3, [r7, #20]
    }

    if( xShouldWrite != pdFALSE )
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d007      	beq.n	8009730 <prvWriteMessageToBuffer+0x6c>
    {
        /* Writes the data itself. */
        xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alignment and access. */
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	461a      	mov	r2, r3
 8009724:	68b9      	ldr	r1, [r7, #8]
 8009726:	68f8      	ldr	r0, [r7, #12]
 8009728:	f000 f8e2 	bl	80098f0 <prvWriteBytesToBuffer>
 800972c:	6138      	str	r0, [r7, #16]
 800972e:	e001      	b.n	8009734 <prvWriteMessageToBuffer+0x70>
    }
    else
    {
        xReturn = 0;
 8009730:	2300      	movs	r3, #0
 8009732:	613b      	str	r3, [r7, #16]
    }

    return xReturn;
 8009734:	693b      	ldr	r3, [r7, #16]
}
 8009736:	4618      	mov	r0, r3
 8009738:	3718      	adds	r7, #24
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
 800973e:	b580      	push	{r7, lr}
 8009740:	b08e      	sub	sp, #56	; 0x38
 8009742:	af02      	add	r7, sp, #8
 8009744:	60f8      	str	r0, [r7, #12]
 8009746:	60b9      	str	r1, [r7, #8]
 8009748:	607a      	str	r2, [r7, #4]
 800974a:	603b      	str	r3, [r7, #0]
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	623b      	str	r3, [r7, #32]
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8009750:	2300      	movs	r3, #0
 8009752:	62fb      	str	r3, [r7, #44]	; 0x2c

    configASSERT( pvRxData );
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d10a      	bne.n	8009770 <xStreamBufferReceive+0x32>
        __asm volatile
 800975a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975e:	f383 8811 	msr	BASEPRI, r3
 8009762:	f3bf 8f6f 	isb	sy
 8009766:	f3bf 8f4f 	dsb	sy
 800976a:	61fb      	str	r3, [r7, #28]
    }
 800976c:	bf00      	nop
 800976e:	e7fe      	b.n	800976e <xStreamBufferReceive+0x30>
    configASSERT( pxStreamBuffer );
 8009770:	6a3b      	ldr	r3, [r7, #32]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d10a      	bne.n	800978c <xStreamBufferReceive+0x4e>
        __asm volatile
 8009776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977a:	f383 8811 	msr	BASEPRI, r3
 800977e:	f3bf 8f6f 	isb	sy
 8009782:	f3bf 8f4f 	dsb	sy
 8009786:	61bb      	str	r3, [r7, #24]
    }
 8009788:	bf00      	nop
 800978a:	e7fe      	b.n	800978a <xStreamBufferReceive+0x4c>
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800978c:	6a3b      	ldr	r3, [r7, #32]
 800978e:	7f1b      	ldrb	r3, [r3, #28]
 8009790:	f003 0301 	and.w	r3, r3, #1
 8009794:	2b00      	cmp	r3, #0
 8009796:	d002      	beq.n	800979e <xStreamBufferReceive+0x60>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8009798:	2304      	movs	r3, #4
 800979a:	627b      	str	r3, [r7, #36]	; 0x24
 800979c:	e001      	b.n	80097a2 <xStreamBufferReceive+0x64>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
 800979e:	2300      	movs	r3, #0
 80097a0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if( xTicksToWait != ( TickType_t ) 0 )
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d037      	beq.n	8009818 <xStreamBufferReceive+0xda>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
 80097a8:	f002 f836 	bl	800b818 <vPortEnterCritical>
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80097ac:	6a38      	ldr	r0, [r7, #32]
 80097ae:	f000 f98b 	bl	8009ac8 <prvBytesInBuffer>
 80097b2:	62b8      	str	r0, [r7, #40]	; 0x28
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
 80097b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d817      	bhi.n	80097ec <xStreamBufferReceive+0xae>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
 80097bc:	2100      	movs	r1, #0
 80097be:	2000      	movs	r0, #0
 80097c0:	f001 fb38 	bl	800ae34 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 80097c4:	6a3b      	ldr	r3, [r7, #32]
 80097c6:	691b      	ldr	r3, [r3, #16]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00a      	beq.n	80097e2 <xStreamBufferReceive+0xa4>
        __asm volatile
 80097cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d0:	f383 8811 	msr	BASEPRI, r3
 80097d4:	f3bf 8f6f 	isb	sy
 80097d8:	f3bf 8f4f 	dsb	sy
 80097dc:	617b      	str	r3, [r7, #20]
    }
 80097de:	bf00      	nop
 80097e0:	e7fe      	b.n	80097e0 <xStreamBufferReceive+0xa2>
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 80097e2:	f000 ff8b 	bl	800a6fc <xTaskGetCurrentTaskHandle>
 80097e6:	4602      	mov	r2, r0
 80097e8:	6a3b      	ldr	r3, [r7, #32]
 80097ea:	611a      	str	r2, [r3, #16]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80097ec:	f002 f844 	bl	800b878 <vPortExitCritical>

        if( xBytesAvailable <= xBytesToStoreMessageLength )
 80097f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d813      	bhi.n	8009820 <xStreamBufferReceive+0xe2>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	9300      	str	r3, [sp, #0]
 80097fc:	2300      	movs	r3, #0
 80097fe:	2200      	movs	r2, #0
 8009800:	2100      	movs	r1, #0
 8009802:	2000      	movs	r0, #0
 8009804:	f001 f896 	bl	800a934 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8009808:	6a3b      	ldr	r3, [r7, #32]
 800980a:	2200      	movs	r2, #0
 800980c:	611a      	str	r2, [r3, #16]

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800980e:	6a38      	ldr	r0, [r7, #32]
 8009810:	f000 f95a 	bl	8009ac8 <prvBytesInBuffer>
 8009814:	62b8      	str	r0, [r7, #40]	; 0x28
 8009816:	e003      	b.n	8009820 <xStreamBufferReceive+0xe2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8009818:	6a38      	ldr	r0, [r7, #32]
 800981a:	f000 f955 	bl	8009ac8 <prvBytesInBuffer>
 800981e:	62b8      	str	r0, [r7, #40]	; 0x28
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
 8009820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009824:	429a      	cmp	r2, r3
 8009826:	d926      	bls.n	8009876 <xStreamBufferReceive+0x138>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8009828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982a:	9300      	str	r3, [sp, #0]
 800982c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	68b9      	ldr	r1, [r7, #8]
 8009832:	6a38      	ldr	r0, [r7, #32]
 8009834:	f000 f82a 	bl	800988c <prvReadMessageFromBuffer>
 8009838:	62f8      	str	r0, [r7, #44]	; 0x2c

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
 800983a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800983c:	2b00      	cmp	r3, #0
 800983e:	d020      	beq.n	8009882 <xStreamBufferReceive+0x144>
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009844:	4619      	mov	r1, r3
 8009846:	208e      	movs	r0, #142	; 0x8e
 8009848:	f003 f8d6 	bl	800c9f8 <SEGGER_SYSVIEW_RecordU32x2>
            sbRECEIVE_COMPLETED( pxStreamBuffer );
 800984c:	f000 fb7e 	bl	8009f4c <vTaskSuspendAll>
 8009850:	6a3b      	ldr	r3, [r7, #32]
 8009852:	695b      	ldr	r3, [r3, #20]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00b      	beq.n	8009870 <xStreamBufferReceive+0x132>
 8009858:	6a3b      	ldr	r3, [r7, #32]
 800985a:	6958      	ldr	r0, [r3, #20]
 800985c:	2300      	movs	r3, #0
 800985e:	9300      	str	r3, [sp, #0]
 8009860:	2300      	movs	r3, #0
 8009862:	2200      	movs	r2, #0
 8009864:	2100      	movs	r1, #0
 8009866:	f001 f8ed 	bl	800aa44 <xTaskGenericNotify>
 800986a:	6a3b      	ldr	r3, [r7, #32]
 800986c:	2200      	movs	r2, #0
 800986e:	615a      	str	r2, [r3, #20]
 8009870:	f000 fb7a 	bl	8009f68 <xTaskResumeAll>
 8009874:	e005      	b.n	8009882 <xStreamBufferReceive+0x144>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2200      	movs	r2, #0
 800987a:	4619      	mov	r1, r3
 800987c:	208e      	movs	r0, #142	; 0x8e
 800987e:	f003 f8bb 	bl	800c9f8 <SEGGER_SYSVIEW_RecordU32x2>
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
 8009882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009884:	4618      	mov	r0, r3
 8009886:	3730      	adds	r7, #48	; 0x30
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t * pxStreamBuffer,
                                        void * pvRxData,
                                        size_t xBufferLengthBytes,
                                        size_t xBytesAvailable,
                                        size_t xBytesToStoreMessageLength )
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b088      	sub	sp, #32
 8009890:	af00      	add	r7, sp, #0
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	60b9      	str	r1, [r7, #8]
 8009896:	607a      	str	r2, [r7, #4]
 8009898:	603b      	str	r3, [r7, #0]
    size_t xOriginalTail, xReceivedLength, xNextMessageLength;
    configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
 800989a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989c:	2b00      	cmp	r3, #0
 800989e:	d019      	beq.n	80098d4 <prvReadMessageFromBuffer+0x48>
    {
        /* A discrete message is being received.  First receive the length
         * of the message.  A copy of the tail is stored so the buffer can be
         * returned to its prior state if the length of the message is too
         * large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	61bb      	str	r3, [r7, #24]
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 80098a6:	f107 0110 	add.w	r1, r7, #16
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098ae:	68f8      	ldr	r0, [r7, #12]
 80098b0:	f000 f890 	bl	80099d4 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	61fb      	str	r3, [r7, #28]

        /* Reduce the number of bytes available by the number of bytes just
         * read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
 80098b8:	683a      	ldr	r2, [r7, #0]
 80098ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098bc:	1ad3      	subs	r3, r2, r3
 80098be:	603b      	str	r3, [r7, #0]

        /* Check there is enough space in the buffer provided by the
         * user. */
        if( xNextMessageLength > xBufferLengthBytes )
 80098c0:	69fa      	ldr	r2, [r7, #28]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d907      	bls.n	80098d8 <prvReadMessageFromBuffer+0x4c>
        {
            /* The user has provided insufficient space to read the message
             * so return the buffer to its previous state (so the length of
             * the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	69ba      	ldr	r2, [r7, #24]
 80098cc:	601a      	str	r2, [r3, #0]
            xNextMessageLength = 0;
 80098ce:	2300      	movs	r3, #0
 80098d0:	61fb      	str	r3, [r7, #28]
 80098d2:	e001      	b.n	80098d8 <prvReadMessageFromBuffer+0x4c>
    }
    else
    {
        /* A stream of bytes is being received (as opposed to a discrete
         * message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	61fb      	str	r3, [r7, #28]
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	69fa      	ldr	r2, [r7, #28]
 80098dc:	68b9      	ldr	r1, [r7, #8]
 80098de:	68f8      	ldr	r0, [r7, #12]
 80098e0:	f000 f878 	bl	80099d4 <prvReadBytesFromBuffer>
 80098e4:	6178      	str	r0, [r7, #20]

    return xReceivedLength;
 80098e6:	697b      	ldr	r3, [r7, #20]
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3720      	adds	r7, #32
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer,
                                     const uint8_t * pucData,
                                     size_t xCount )
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b08a      	sub	sp, #40	; 0x28
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	607a      	str	r2, [r7, #4]
    size_t xNextHead, xFirstLength;

    configASSERT( xCount > ( size_t ) 0 );
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d10a      	bne.n	8009918 <prvWriteBytesToBuffer+0x28>
        __asm volatile
 8009902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009906:	f383 8811 	msr	BASEPRI, r3
 800990a:	f3bf 8f6f 	isb	sy
 800990e:	f3bf 8f4f 	dsb	sy
 8009912:	61fb      	str	r3, [r7, #28]
    }
 8009914:	bf00      	nop
 8009916:	e7fe      	b.n	8009916 <prvWriteBytesToBuffer+0x26>

    xNextHead = pxStreamBuffer->xHead;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Calculate the number of bytes that can be added in the first write -
     * which may be less than the total number of bytes that need to be added if
     * the buffer will wrap back to the beginning. */
    xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	689a      	ldr	r2, [r3, #8]
 8009922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009924:	1ad3      	subs	r3, r2, r3
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	4293      	cmp	r3, r2
 800992a:	bf28      	it	cs
 800992c:	4613      	movcs	r3, r2
 800992e:	623b      	str	r3, [r7, #32]

    /* Write as many bytes as can be written in the first write. */
    configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8009930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009932:	6a3b      	ldr	r3, [r7, #32]
 8009934:	441a      	add	r2, r3
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	429a      	cmp	r2, r3
 800993c:	d90a      	bls.n	8009954 <prvWriteBytesToBuffer+0x64>
        __asm volatile
 800993e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009942:	f383 8811 	msr	BASEPRI, r3
 8009946:	f3bf 8f6f 	isb	sy
 800994a:	f3bf 8f4f 	dsb	sy
 800994e:	61bb      	str	r3, [r7, #24]
    }
 8009950:	bf00      	nop
 8009952:	e7fe      	b.n	8009952 <prvWriteBytesToBuffer+0x62>
    ( void ) memcpy( ( void * ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	699a      	ldr	r2, [r3, #24]
 8009958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995a:	4413      	add	r3, r2
 800995c:	6a3a      	ldr	r2, [r7, #32]
 800995e:	68b9      	ldr	r1, [r7, #8]
 8009960:	4618      	mov	r0, r3
 8009962:	f004 f9a7 	bl	800dcb4 <memcpy>

    /* If the number of bytes written was less than the number that could be
     * written in the first write... */
    if( xCount > xFirstLength )
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	6a3b      	ldr	r3, [r7, #32]
 800996a:	429a      	cmp	r2, r3
 800996c:	d91c      	bls.n	80099a8 <prvWriteBytesToBuffer+0xb8>
    {
        /* ...then write the remaining bytes to the start of the buffer. */
        configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	6a3b      	ldr	r3, [r7, #32]
 8009972:	1ad2      	subs	r2, r2, r3
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	429a      	cmp	r2, r3
 800997a:	d90a      	bls.n	8009992 <prvWriteBytesToBuffer+0xa2>
        __asm volatile
 800997c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009980:	f383 8811 	msr	BASEPRI, r3
 8009984:	f3bf 8f6f 	isb	sy
 8009988:	f3bf 8f4f 	dsb	sy
 800998c:	617b      	str	r3, [r7, #20]
    }
 800998e:	bf00      	nop
 8009990:	e7fe      	b.n	8009990 <prvWriteBytesToBuffer+0xa0>
        ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	6998      	ldr	r0, [r3, #24]
 8009996:	68ba      	ldr	r2, [r7, #8]
 8009998:	6a3b      	ldr	r3, [r7, #32]
 800999a:	18d1      	adds	r1, r2, r3
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	6a3b      	ldr	r3, [r7, #32]
 80099a0:	1ad3      	subs	r3, r2, r3
 80099a2:	461a      	mov	r2, r3
 80099a4:	f004 f986 	bl	800dcb4 <memcpy>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xNextHead += xCount;
 80099a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	4413      	add	r3, r2
 80099ae:	627b      	str	r3, [r7, #36]	; 0x24

    if( xNextHead >= pxStreamBuffer->xLength )
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d304      	bcc.n	80099c4 <prvWriteBytesToBuffer+0xd4>
    {
        xNextHead -= pxStreamBuffer->xLength;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099c0:	1ad3      	subs	r3, r2, r3
 80099c2:	627b      	str	r3, [r7, #36]	; 0x24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxStreamBuffer->xHead = xNextHead;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099c8:	605a      	str	r2, [r3, #4]

    return xCount;
 80099ca:	687b      	ldr	r3, [r7, #4]
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3728      	adds	r7, #40	; 0x28
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <prvReadBytesFromBuffer>:

static size_t prvReadBytesFromBuffer( StreamBuffer_t * pxStreamBuffer,
                                      uint8_t * pucData,
                                      size_t xMaxCount,
                                      size_t xBytesAvailable )
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b08a      	sub	sp, #40	; 0x28
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	607a      	str	r2, [r7, #4]
 80099e0:	603b      	str	r3, [r7, #0]
    size_t xCount, xFirstLength, xNextTail;

    /* Use the minimum of the wanted bytes and the available bytes. */
    xCount = configMIN( xBytesAvailable, xMaxCount );
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	4293      	cmp	r3, r2
 80099e8:	bf28      	it	cs
 80099ea:	4613      	movcs	r3, r2
 80099ec:	623b      	str	r3, [r7, #32]

    if( xCount > ( size_t ) 0 )
 80099ee:	6a3b      	ldr	r3, [r7, #32]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d064      	beq.n	8009abe <prvReadBytesFromBuffer+0xea>
    {
        xNextTail = pxStreamBuffer->xTail;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* Calculate the number of bytes that can be read - which may be
         * less than the number wanted if the data wraps around to the start of
         * the buffer. */
        xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	689a      	ldr	r2, [r3, #8]
 80099fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a00:	1ad3      	subs	r3, r2, r3
 8009a02:	6a3a      	ldr	r2, [r7, #32]
 8009a04:	4293      	cmp	r3, r2
 8009a06:	bf28      	it	cs
 8009a08:	4613      	movcs	r3, r2
 8009a0a:	61fb      	str	r3, [r7, #28]

        /* Obtain the number of bytes it is possible to obtain in the first
         * read.  Asserts check bounds of read and write. */
        configASSERT( xFirstLength <= xMaxCount );
 8009a0c:	69fa      	ldr	r2, [r7, #28]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d90a      	bls.n	8009a2a <prvReadBytesFromBuffer+0x56>
        __asm volatile
 8009a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a18:	f383 8811 	msr	BASEPRI, r3
 8009a1c:	f3bf 8f6f 	isb	sy
 8009a20:	f3bf 8f4f 	dsb	sy
 8009a24:	61bb      	str	r3, [r7, #24]
    }
 8009a26:	bf00      	nop
 8009a28:	e7fe      	b.n	8009a28 <prvReadBytesFromBuffer+0x54>
        configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8009a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a2c:	69fb      	ldr	r3, [r7, #28]
 8009a2e:	441a      	add	r2, r3
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d90a      	bls.n	8009a4e <prvReadBytesFromBuffer+0x7a>
        __asm volatile
 8009a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3c:	f383 8811 	msr	BASEPRI, r3
 8009a40:	f3bf 8f6f 	isb	sy
 8009a44:	f3bf 8f4f 	dsb	sy
 8009a48:	617b      	str	r3, [r7, #20]
    }
 8009a4a:	bf00      	nop
 8009a4c:	e7fe      	b.n	8009a4c <prvReadBytesFromBuffer+0x78>
        ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	699a      	ldr	r2, [r3, #24]
 8009a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a54:	4413      	add	r3, r2
 8009a56:	69fa      	ldr	r2, [r7, #28]
 8009a58:	4619      	mov	r1, r3
 8009a5a:	68b8      	ldr	r0, [r7, #8]
 8009a5c:	f004 f92a 	bl	800dcb4 <memcpy>

        /* If the total number of wanted bytes is greater than the number
         * that could be read in the first read... */
        if( xCount > xFirstLength )
 8009a60:	6a3a      	ldr	r2, [r7, #32]
 8009a62:	69fb      	ldr	r3, [r7, #28]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d919      	bls.n	8009a9c <prvReadBytesFromBuffer+0xc8>
        {
            /*...then read the remaining bytes from the start of the buffer. */
            configASSERT( xCount <= xMaxCount );
 8009a68:	6a3a      	ldr	r2, [r7, #32]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d90a      	bls.n	8009a86 <prvReadBytesFromBuffer+0xb2>
        __asm volatile
 8009a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a74:	f383 8811 	msr	BASEPRI, r3
 8009a78:	f3bf 8f6f 	isb	sy
 8009a7c:	f3bf 8f4f 	dsb	sy
 8009a80:	613b      	str	r3, [r7, #16]
    }
 8009a82:	bf00      	nop
 8009a84:	e7fe      	b.n	8009a84 <prvReadBytesFromBuffer+0xb0>
            ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8009a86:	68ba      	ldr	r2, [r7, #8]
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	18d0      	adds	r0, r2, r3
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	6999      	ldr	r1, [r3, #24]
 8009a90:	6a3a      	ldr	r2, [r7, #32]
 8009a92:	69fb      	ldr	r3, [r7, #28]
 8009a94:	1ad3      	subs	r3, r2, r3
 8009a96:	461a      	mov	r2, r3
 8009a98:	f004 f90c 	bl	800dcb4 <memcpy>
            mtCOVERAGE_TEST_MARKER();
        }

        /* Move the tail pointer to effectively remove the data read from
         * the buffer. */
        xNextTail += xCount;
 8009a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a9e:	6a3b      	ldr	r3, [r7, #32]
 8009aa0:	4413      	add	r3, r2
 8009aa2:	627b      	str	r3, [r7, #36]	; 0x24

        if( xNextTail >= pxStreamBuffer->xLength )
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d304      	bcc.n	8009ab8 <prvReadBytesFromBuffer+0xe4>
        {
            xNextTail -= pxStreamBuffer->xLength;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ab4:	1ad3      	subs	r3, r2, r3
 8009ab6:	627b      	str	r3, [r7, #36]	; 0x24
        }

        pxStreamBuffer->xTail = xNextTail;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009abc:	601a      	str	r2, [r3, #0]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
 8009abe:	6a3b      	ldr	r3, [r7, #32]
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3728      	adds	r7, #40	; 0x28
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
    size_t xCount;

    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	689a      	ldr	r2, [r3, #8]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	4413      	add	r3, r2
 8009ada:	60fb      	str	r3, [r7, #12]
    xCount -= pxStreamBuffer->xTail;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	68fa      	ldr	r2, [r7, #12]
 8009ae2:	1ad3      	subs	r3, r2, r3
 8009ae4:	60fb      	str	r3, [r7, #12]

    if( xCount >= pxStreamBuffer->xLength )
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	689b      	ldr	r3, [r3, #8]
 8009aea:	68fa      	ldr	r2, [r7, #12]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d304      	bcc.n	8009afa <prvBytesInBuffer+0x32>
    {
        xCount -= pxStreamBuffer->xLength;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	68fa      	ldr	r2, [r7, #12]
 8009af6:	1ad3      	subs	r3, r2, r3
 8009af8:	60fb      	str	r3, [r7, #12]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
 8009afa:	68fb      	ldr	r3, [r7, #12]
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3714      	adds	r7, #20
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
                                          uint8_t * const pucBuffer,
                                          size_t xBufferSizeBytes,
                                          size_t xTriggerLevelBytes,
                                          uint8_t ucFlags )
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b086      	sub	sp, #24
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	607a      	str	r2, [r7, #4]
 8009b14:	603b      	str	r3, [r7, #0]
    #if ( configASSERT_DEFINED == 1 )
        {
            /* The value written just has to be identifiable when looking at the
             * memory.  Don't use 0xA5 as that is the stack fill value and could
             * result in confusion as to what is actually being observed. */
            const BaseType_t xWriteValue = 0x55;
 8009b16:	2355      	movs	r3, #85	; 0x55
 8009b18:	617b      	str	r3, [r7, #20]
            configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	6979      	ldr	r1, [r7, #20]
 8009b1e:	68b8      	ldr	r0, [r7, #8]
 8009b20:	f004 f8d6 	bl	800dcd0 <memset>
 8009b24:	4602      	mov	r2, r0
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d00a      	beq.n	8009b42 <prvInitialiseNewStreamBuffer+0x3a>
        __asm volatile
 8009b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b30:	f383 8811 	msr	BASEPRI, r3
 8009b34:	f3bf 8f6f 	isb	sy
 8009b38:	f3bf 8f4f 	dsb	sy
 8009b3c:	613b      	str	r3, [r7, #16]
    }
 8009b3e:	bf00      	nop
 8009b40:	e7fe      	b.n	8009b40 <prvInitialiseNewStreamBuffer+0x38>
        } /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8009b42:	2224      	movs	r2, #36	; 0x24
 8009b44:	2100      	movs	r1, #0
 8009b46:	68f8      	ldr	r0, [r7, #12]
 8009b48:	f004 f8c2 	bl	800dcd0 <memset>
    pxStreamBuffer->pucBuffer = pucBuffer;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	68ba      	ldr	r2, [r7, #8]
 8009b50:	619a      	str	r2, [r3, #24]
    pxStreamBuffer->xLength = xBufferSizeBytes;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	609a      	str	r2, [r3, #8]
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	683a      	ldr	r2, [r7, #0]
 8009b5c:	60da      	str	r2, [r3, #12]
    pxStreamBuffer->ucFlags = ucFlags;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009b64:	771a      	strb	r2, [r3, #28]
}
 8009b66:	bf00      	nop
 8009b68:	3718      	adds	r7, #24
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b08c      	sub	sp, #48	; 0x30
 8009b72:	af04      	add	r7, sp, #16
 8009b74:	60f8      	str	r0, [r7, #12]
 8009b76:	60b9      	str	r1, [r7, #8]
 8009b78:	603b      	str	r3, [r7, #0]
 8009b7a:	4613      	mov	r3, r2
 8009b7c:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009b7e:	88fb      	ldrh	r3, [r7, #6]
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	4618      	mov	r0, r3
 8009b84:	f001 ff72 	bl	800ba6c <pvPortMalloc>
 8009b88:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00e      	beq.n	8009bae <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009b90:	2058      	movs	r0, #88	; 0x58
 8009b92:	f001 ff6b 	bl	800ba6c <pvPortMalloc>
 8009b96:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d003      	beq.n	8009ba6 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8009b9e:	69fb      	ldr	r3, [r7, #28]
 8009ba0:	697a      	ldr	r2, [r7, #20]
 8009ba2:	631a      	str	r2, [r3, #48]	; 0x30
 8009ba4:	e005      	b.n	8009bb2 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8009ba6:	6978      	ldr	r0, [r7, #20]
 8009ba8:	f002 f840 	bl	800bc2c <vPortFree>
 8009bac:	e001      	b.n	8009bb2 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d013      	beq.n	8009be0 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009bb8:	88fa      	ldrh	r2, [r7, #6]
 8009bba:	2300      	movs	r3, #0
 8009bbc:	9303      	str	r3, [sp, #12]
 8009bbe:	69fb      	ldr	r3, [r7, #28]
 8009bc0:	9302      	str	r3, [sp, #8]
 8009bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc4:	9301      	str	r3, [sp, #4]
 8009bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc8:	9300      	str	r3, [sp, #0]
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	68b9      	ldr	r1, [r7, #8]
 8009bce:	68f8      	ldr	r0, [r7, #12]
 8009bd0:	f000 f80e 	bl	8009bf0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8009bd4:	69f8      	ldr	r0, [r7, #28]
 8009bd6:	f000 f8a1 	bl	8009d1c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	61bb      	str	r3, [r7, #24]
 8009bde:	e002      	b.n	8009be6 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009be0:	f04f 33ff 	mov.w	r3, #4294967295
 8009be4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8009be6:	69bb      	ldr	r3, [r7, #24]
    }
 8009be8:	4618      	mov	r0, r3
 8009bea:	3720      	adds	r7, #32
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b088      	sub	sp, #32
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	60b9      	str	r1, [r7, #8]
 8009bfa:	607a      	str	r2, [r7, #4]
 8009bfc:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c00:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	461a      	mov	r2, r3
 8009c08:	21a5      	movs	r1, #165	; 0xa5
 8009c0a:	f004 f861 	bl	800dcd0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009c18:	3b01      	subs	r3, #1
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	4413      	add	r3, r2
 8009c1e:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009c20:	69bb      	ldr	r3, [r7, #24]
 8009c22:	f023 0307 	bic.w	r3, r3, #7
 8009c26:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009c28:	69bb      	ldr	r3, [r7, #24]
 8009c2a:	f003 0307 	and.w	r3, r3, #7
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d00a      	beq.n	8009c48 <prvInitialiseNewTask+0x58>
        __asm volatile
 8009c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c36:	f383 8811 	msr	BASEPRI, r3
 8009c3a:	f3bf 8f6f 	isb	sy
 8009c3e:	f3bf 8f4f 	dsb	sy
 8009c42:	617b      	str	r3, [r7, #20]
    }
 8009c44:	bf00      	nop
 8009c46:	e7fe      	b.n	8009c46 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d01f      	beq.n	8009c8e <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009c4e:	2300      	movs	r3, #0
 8009c50:	61fb      	str	r3, [r7, #28]
 8009c52:	e012      	b.n	8009c7a <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009c54:	68ba      	ldr	r2, [r7, #8]
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	4413      	add	r3, r2
 8009c5a:	7819      	ldrb	r1, [r3, #0]
 8009c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c5e:	69fb      	ldr	r3, [r7, #28]
 8009c60:	4413      	add	r3, r2
 8009c62:	3334      	adds	r3, #52	; 0x34
 8009c64:	460a      	mov	r2, r1
 8009c66:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8009c68:	68ba      	ldr	r2, [r7, #8]
 8009c6a:	69fb      	ldr	r3, [r7, #28]
 8009c6c:	4413      	add	r3, r2
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d006      	beq.n	8009c82 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009c74:	69fb      	ldr	r3, [r7, #28]
 8009c76:	3301      	adds	r3, #1
 8009c78:	61fb      	str	r3, [r7, #28]
 8009c7a:	69fb      	ldr	r3, [r7, #28]
 8009c7c:	2b09      	cmp	r3, #9
 8009c7e:	d9e9      	bls.n	8009c54 <prvInitialiseNewTask+0x64>
 8009c80:	e000      	b.n	8009c84 <prvInitialiseNewTask+0x94>
            {
                break;
 8009c82:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c86:	2200      	movs	r2, #0
 8009c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009c8c:	e003      	b.n	8009c96 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c90:	2200      	movs	r2, #0
 8009c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c98:	2b04      	cmp	r3, #4
 8009c9a:	d901      	bls.n	8009ca0 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009c9c:	2304      	movs	r3, #4
 8009c9e:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8009ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ca4:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8009ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009caa:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8009cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cae:	2200      	movs	r2, #0
 8009cb0:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb4:	3304      	adds	r3, #4
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7fe fdca 	bl	8008850 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cbe:	3318      	adds	r3, #24
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f7fe fdc5 	bl	8008850 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cca:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cce:	f1c3 0205 	rsb	r2, r3, #5
 8009cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cda:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8009cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cde:	3350      	adds	r3, #80	; 0x50
 8009ce0:	2204      	movs	r2, #4
 8009ce2:	2100      	movs	r1, #0
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f003 fff3 	bl	800dcd0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8009cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cec:	3354      	adds	r3, #84	; 0x54
 8009cee:	2201      	movs	r2, #1
 8009cf0:	2100      	movs	r1, #0
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f003 ffec 	bl	800dcd0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009cf8:	683a      	ldr	r2, [r7, #0]
 8009cfa:	68f9      	ldr	r1, [r7, #12]
 8009cfc:	69b8      	ldr	r0, [r7, #24]
 8009cfe:	f001 fc5d 	bl	800b5bc <pxPortInitialiseStack>
 8009d02:	4602      	mov	r2, r0
 8009d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d06:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8009d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d002      	beq.n	8009d14 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d12:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009d14:	bf00      	nop
 8009d16:	3720      	adds	r7, #32
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8009d1c:	b5b0      	push	{r4, r5, r7, lr}
 8009d1e:	b084      	sub	sp, #16
 8009d20:	af02      	add	r7, sp, #8
 8009d22:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8009d24:	f001 fd78 	bl	800b818 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8009d28:	4b35      	ldr	r3, [pc, #212]	; (8009e00 <prvAddNewTaskToReadyList+0xe4>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	4a34      	ldr	r2, [pc, #208]	; (8009e00 <prvAddNewTaskToReadyList+0xe4>)
 8009d30:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8009d32:	4b34      	ldr	r3, [pc, #208]	; (8009e04 <prvAddNewTaskToReadyList+0xe8>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d109      	bne.n	8009d4e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8009d3a:	4a32      	ldr	r2, [pc, #200]	; (8009e04 <prvAddNewTaskToReadyList+0xe8>)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009d40:	4b2f      	ldr	r3, [pc, #188]	; (8009e00 <prvAddNewTaskToReadyList+0xe4>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d110      	bne.n	8009d6a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8009d48:	f000 fc3e 	bl	800a5c8 <prvInitialiseTaskLists>
 8009d4c:	e00d      	b.n	8009d6a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8009d4e:	4b2e      	ldr	r3, [pc, #184]	; (8009e08 <prvAddNewTaskToReadyList+0xec>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d109      	bne.n	8009d6a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009d56:	4b2b      	ldr	r3, [pc, #172]	; (8009e04 <prvAddNewTaskToReadyList+0xe8>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d802      	bhi.n	8009d6a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8009d64:	4a27      	ldr	r2, [pc, #156]	; (8009e04 <prvAddNewTaskToReadyList+0xe8>)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8009d6a:	4b28      	ldr	r3, [pc, #160]	; (8009e0c <prvAddNewTaskToReadyList+0xf0>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	3301      	adds	r3, #1
 8009d70:	4a26      	ldr	r2, [pc, #152]	; (8009e0c <prvAddNewTaskToReadyList+0xf0>)
 8009d72:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009d74:	4b25      	ldr	r3, [pc, #148]	; (8009e0c <prvAddNewTaskToReadyList+0xf0>)
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d016      	beq.n	8009db0 <prvAddNewTaskToReadyList+0x94>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	4618      	mov	r0, r3
 8009d86:	f003 fba5 	bl	800d4d4 <SEGGER_SYSVIEW_OnTaskCreate>
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d9a:	461d      	mov	r5, r3
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	461c      	mov	r4, r3
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009da6:	1ae3      	subs	r3, r4, r3
 8009da8:	9300      	str	r3, [sp, #0]
 8009daa:	462b      	mov	r3, r5
 8009dac:	f003 fec4 	bl	800db38 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	4618      	mov	r0, r3
 8009db4:	f003 fc12 	bl	800d5dc <SEGGER_SYSVIEW_OnTaskStartReady>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	409a      	lsls	r2, r3
 8009dc0:	4b13      	ldr	r3, [pc, #76]	; (8009e10 <prvAddNewTaskToReadyList+0xf4>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	4a12      	ldr	r2, [pc, #72]	; (8009e10 <prvAddNewTaskToReadyList+0xf4>)
 8009dc8:	6013      	str	r3, [r2, #0]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dce:	4613      	mov	r3, r2
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	4413      	add	r3, r2
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	4a0f      	ldr	r2, [pc, #60]	; (8009e14 <prvAddNewTaskToReadyList+0xf8>)
 8009dd8:	441a      	add	r2, r3
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	3304      	adds	r3, #4
 8009dde:	4619      	mov	r1, r3
 8009de0:	4610      	mov	r0, r2
 8009de2:	f7fe fd42 	bl	800886a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8009de6:	f001 fd47 	bl	800b878 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8009dea:	4b07      	ldr	r3, [pc, #28]	; (8009e08 <prvAddNewTaskToReadyList+0xec>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d001      	beq.n	8009df6 <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009df2:	4b04      	ldr	r3, [pc, #16]	; (8009e04 <prvAddNewTaskToReadyList+0xe8>)
 8009df4:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009df6:	bf00      	nop
 8009df8:	3708      	adds	r7, #8
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bdb0      	pop	{r4, r5, r7, pc}
 8009dfe:	bf00      	nop
 8009e00:	200026e4 	.word	0x200026e4
 8009e04:	2000260c 	.word	0x2000260c
 8009e08:	200026f0 	.word	0x200026f0
 8009e0c:	20002700 	.word	0x20002700
 8009e10:	200026ec 	.word	0x200026ec
 8009e14:	20002610 	.word	0x20002610

08009e18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8009e20:	2300      	movs	r3, #0
 8009e22:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d01b      	beq.n	8009e62 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8009e2a:	4b15      	ldr	r3, [pc, #84]	; (8009e80 <vTaskDelay+0x68>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d00a      	beq.n	8009e48 <vTaskDelay+0x30>
        __asm volatile
 8009e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e36:	f383 8811 	msr	BASEPRI, r3
 8009e3a:	f3bf 8f6f 	isb	sy
 8009e3e:	f3bf 8f4f 	dsb	sy
 8009e42:	60bb      	str	r3, [r7, #8]
    }
 8009e44:	bf00      	nop
 8009e46:	e7fe      	b.n	8009e46 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8009e48:	f000 f880 	bl	8009f4c <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8009e4c:	6879      	ldr	r1, [r7, #4]
 8009e4e:	2023      	movs	r0, #35	; 0x23
 8009e50:	f002 fd96 	bl	800c980 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009e54:	2100      	movs	r1, #0
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f001 f826 	bl	800aea8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8009e5c:	f000 f884 	bl	8009f68 <xTaskResumeAll>
 8009e60:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d107      	bne.n	8009e78 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8009e68:	4b06      	ldr	r3, [pc, #24]	; (8009e84 <vTaskDelay+0x6c>)
 8009e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e6e:	601a      	str	r2, [r3, #0]
 8009e70:	f3bf 8f4f 	dsb	sy
 8009e74:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8009e78:	bf00      	nop
 8009e7a:	3710      	adds	r7, #16
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}
 8009e80:	2000270c 	.word	0x2000270c
 8009e84:	e000ed04 	.word	0xe000ed04

08009e88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b086      	sub	sp, #24
 8009e8c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8009e8e:	4b27      	ldr	r3, [pc, #156]	; (8009f2c <vTaskStartScheduler+0xa4>)
 8009e90:	9301      	str	r3, [sp, #4]
 8009e92:	2300      	movs	r3, #0
 8009e94:	9300      	str	r3, [sp, #0]
 8009e96:	2300      	movs	r3, #0
 8009e98:	2282      	movs	r2, #130	; 0x82
 8009e9a:	4925      	ldr	r1, [pc, #148]	; (8009f30 <vTaskStartScheduler+0xa8>)
 8009e9c:	4825      	ldr	r0, [pc, #148]	; (8009f34 <vTaskStartScheduler+0xac>)
 8009e9e:	f7ff fe66 	bl	8009b6e <xTaskCreate>
 8009ea2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d102      	bne.n	8009eb0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8009eaa:	f001 f875 	bl	800af98 <xTimerCreateTimerTask>
 8009eae:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d124      	bne.n	8009f00 <vTaskStartScheduler+0x78>
        __asm volatile
 8009eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eba:	f383 8811 	msr	BASEPRI, r3
 8009ebe:	f3bf 8f6f 	isb	sy
 8009ec2:	f3bf 8f4f 	dsb	sy
 8009ec6:	60bb      	str	r3, [r7, #8]
    }
 8009ec8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8009eca:	4b1b      	ldr	r3, [pc, #108]	; (8009f38 <vTaskStartScheduler+0xb0>)
 8009ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ed0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8009ed2:	4b1a      	ldr	r3, [pc, #104]	; (8009f3c <vTaskStartScheduler+0xb4>)
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009ed8:	4b19      	ldr	r3, [pc, #100]	; (8009f40 <vTaskStartScheduler+0xb8>)
 8009eda:	2200      	movs	r2, #0
 8009edc:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8009ede:	4b19      	ldr	r3, [pc, #100]	; (8009f44 <vTaskStartScheduler+0xbc>)
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	4b12      	ldr	r3, [pc, #72]	; (8009f2c <vTaskStartScheduler+0xa4>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d102      	bne.n	8009ef0 <vTaskStartScheduler+0x68>
 8009eea:	f003 fad7 	bl	800d49c <SEGGER_SYSVIEW_OnIdle>
 8009eee:	e004      	b.n	8009efa <vTaskStartScheduler+0x72>
 8009ef0:	4b14      	ldr	r3, [pc, #80]	; (8009f44 <vTaskStartScheduler+0xbc>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f003 fb2f 	bl	800d558 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8009efa:	f001 fbeb 	bl	800b6d4 <xPortStartScheduler>
 8009efe:	e00e      	b.n	8009f1e <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f06:	d10a      	bne.n	8009f1e <vTaskStartScheduler+0x96>
        __asm volatile
 8009f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f0c:	f383 8811 	msr	BASEPRI, r3
 8009f10:	f3bf 8f6f 	isb	sy
 8009f14:	f3bf 8f4f 	dsb	sy
 8009f18:	607b      	str	r3, [r7, #4]
    }
 8009f1a:	bf00      	nop
 8009f1c:	e7fe      	b.n	8009f1c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8009f1e:	4b0a      	ldr	r3, [pc, #40]	; (8009f48 <vTaskStartScheduler+0xc0>)
 8009f20:	681b      	ldr	r3, [r3, #0]
}
 8009f22:	bf00      	nop
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	20002708 	.word	0x20002708
 8009f30:	0800df70 	.word	0x0800df70
 8009f34:	0800a5a5 	.word	0x0800a5a5
 8009f38:	20002704 	.word	0x20002704
 8009f3c:	200026f0 	.word	0x200026f0
 8009f40:	200026e8 	.word	0x200026e8
 8009f44:	2000260c 	.word	0x2000260c
 8009f48:	200000fc 	.word	0x200000fc

08009f4c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8009f50:	4b04      	ldr	r3, [pc, #16]	; (8009f64 <vTaskSuspendAll+0x18>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	3301      	adds	r3, #1
 8009f56:	4a03      	ldr	r2, [pc, #12]	; (8009f64 <vTaskSuspendAll+0x18>)
 8009f58:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8009f5a:	bf00      	nop
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr
 8009f64:	2000270c 	.word	0x2000270c

08009f68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8009f72:	2300      	movs	r3, #0
 8009f74:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8009f76:	4b3d      	ldr	r3, [pc, #244]	; (800a06c <xTaskResumeAll+0x104>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d10a      	bne.n	8009f94 <xTaskResumeAll+0x2c>
        __asm volatile
 8009f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f82:	f383 8811 	msr	BASEPRI, r3
 8009f86:	f3bf 8f6f 	isb	sy
 8009f8a:	f3bf 8f4f 	dsb	sy
 8009f8e:	603b      	str	r3, [r7, #0]
    }
 8009f90:	bf00      	nop
 8009f92:	e7fe      	b.n	8009f92 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8009f94:	f001 fc40 	bl	800b818 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8009f98:	4b34      	ldr	r3, [pc, #208]	; (800a06c <xTaskResumeAll+0x104>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	3b01      	subs	r3, #1
 8009f9e:	4a33      	ldr	r2, [pc, #204]	; (800a06c <xTaskResumeAll+0x104>)
 8009fa0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fa2:	4b32      	ldr	r3, [pc, #200]	; (800a06c <xTaskResumeAll+0x104>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d159      	bne.n	800a05e <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009faa:	4b31      	ldr	r3, [pc, #196]	; (800a070 <xTaskResumeAll+0x108>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d055      	beq.n	800a05e <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009fb2:	e032      	b.n	800a01a <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fb4:	4b2f      	ldr	r3, [pc, #188]	; (800a074 <xTaskResumeAll+0x10c>)
 8009fb6:	68db      	ldr	r3, [r3, #12]
 8009fb8:	68db      	ldr	r3, [r3, #12]
 8009fba:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	3318      	adds	r3, #24
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f7fe fcaf 	bl	8008924 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	3304      	adds	r3, #4
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7fe fcaa 	bl	8008924 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f003 fb02 	bl	800d5dc <SEGGER_SYSVIEW_OnTaskStartReady>
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fdc:	2201      	movs	r2, #1
 8009fde:	409a      	lsls	r2, r3
 8009fe0:	4b25      	ldr	r3, [pc, #148]	; (800a078 <xTaskResumeAll+0x110>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	4a24      	ldr	r2, [pc, #144]	; (800a078 <xTaskResumeAll+0x110>)
 8009fe8:	6013      	str	r3, [r2, #0]
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fee:	4613      	mov	r3, r2
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	4413      	add	r3, r2
 8009ff4:	009b      	lsls	r3, r3, #2
 8009ff6:	4a21      	ldr	r2, [pc, #132]	; (800a07c <xTaskResumeAll+0x114>)
 8009ff8:	441a      	add	r2, r3
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	3304      	adds	r3, #4
 8009ffe:	4619      	mov	r1, r3
 800a000:	4610      	mov	r0, r2
 800a002:	f7fe fc32 	bl	800886a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a00a:	4b1d      	ldr	r3, [pc, #116]	; (800a080 <xTaskResumeAll+0x118>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a010:	429a      	cmp	r2, r3
 800a012:	d302      	bcc.n	800a01a <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 800a014:	4b1b      	ldr	r3, [pc, #108]	; (800a084 <xTaskResumeAll+0x11c>)
 800a016:	2201      	movs	r2, #1
 800a018:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a01a:	4b16      	ldr	r3, [pc, #88]	; (800a074 <xTaskResumeAll+0x10c>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d1c8      	bne.n	8009fb4 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d001      	beq.n	800a02c <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800a028:	f000 fb4c 	bl	800a6c4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a02c:	4b16      	ldr	r3, [pc, #88]	; (800a088 <xTaskResumeAll+0x120>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d010      	beq.n	800a05a <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800a038:	f000 f84a 	bl	800a0d0 <xTaskIncrementTick>
 800a03c:	4603      	mov	r3, r0
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d002      	beq.n	800a048 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800a042:	4b10      	ldr	r3, [pc, #64]	; (800a084 <xTaskResumeAll+0x11c>)
 800a044:	2201      	movs	r2, #1
 800a046:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	3b01      	subs	r3, #1
 800a04c:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d1f1      	bne.n	800a038 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800a054:	4b0c      	ldr	r3, [pc, #48]	; (800a088 <xTaskResumeAll+0x120>)
 800a056:	2200      	movs	r2, #0
 800a058:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800a05a:	4b0a      	ldr	r3, [pc, #40]	; (800a084 <xTaskResumeAll+0x11c>)
 800a05c:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800a05e:	f001 fc0b 	bl	800b878 <vPortExitCritical>

    return xAlreadyYielded;
 800a062:	687b      	ldr	r3, [r7, #4]
}
 800a064:	4618      	mov	r0, r3
 800a066:	3710      	adds	r7, #16
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	2000270c 	.word	0x2000270c
 800a070:	200026e4 	.word	0x200026e4
 800a074:	200026a4 	.word	0x200026a4
 800a078:	200026ec 	.word	0x200026ec
 800a07c:	20002610 	.word	0x20002610
 800a080:	2000260c 	.word	0x2000260c
 800a084:	200026f8 	.word	0x200026f8
 800a088:	200026f4 	.word	0x200026f4

0800a08c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800a092:	4b05      	ldr	r3, [pc, #20]	; (800a0a8 <xTaskGetTickCount+0x1c>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800a098:	687b      	ldr	r3, [r7, #4]
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	370c      	adds	r7, #12
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr
 800a0a6:	bf00      	nop
 800a0a8:	200026e8 	.word	0x200026e8

0800a0ac <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a0b2:	f001 fc9b 	bl	800b9ec <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800a0ba:	4b04      	ldr	r3, [pc, #16]	; (800a0cc <xTaskGetTickCountFromISR+0x20>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800a0c0:	683b      	ldr	r3, [r7, #0]
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3708      	adds	r7, #8
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	bf00      	nop
 800a0cc:	200026e8 	.word	0x200026e8

0800a0d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b086      	sub	sp, #24
 800a0d4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0da:	4b41      	ldr	r3, [pc, #260]	; (800a1e0 <xTaskIncrementTick+0x110>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d173      	bne.n	800a1ca <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a0e2:	4b40      	ldr	r3, [pc, #256]	; (800a1e4 <xTaskIncrementTick+0x114>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	3301      	adds	r3, #1
 800a0e8:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800a0ea:	4a3e      	ldr	r2, [pc, #248]	; (800a1e4 <xTaskIncrementTick+0x114>)
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d120      	bne.n	800a138 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 800a0f6:	4b3c      	ldr	r3, [pc, #240]	; (800a1e8 <xTaskIncrementTick+0x118>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d00a      	beq.n	800a116 <xTaskIncrementTick+0x46>
        __asm volatile
 800a100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a104:	f383 8811 	msr	BASEPRI, r3
 800a108:	f3bf 8f6f 	isb	sy
 800a10c:	f3bf 8f4f 	dsb	sy
 800a110:	603b      	str	r3, [r7, #0]
    }
 800a112:	bf00      	nop
 800a114:	e7fe      	b.n	800a114 <xTaskIncrementTick+0x44>
 800a116:	4b34      	ldr	r3, [pc, #208]	; (800a1e8 <xTaskIncrementTick+0x118>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	60fb      	str	r3, [r7, #12]
 800a11c:	4b33      	ldr	r3, [pc, #204]	; (800a1ec <xTaskIncrementTick+0x11c>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a31      	ldr	r2, [pc, #196]	; (800a1e8 <xTaskIncrementTick+0x118>)
 800a122:	6013      	str	r3, [r2, #0]
 800a124:	4a31      	ldr	r2, [pc, #196]	; (800a1ec <xTaskIncrementTick+0x11c>)
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	6013      	str	r3, [r2, #0]
 800a12a:	4b31      	ldr	r3, [pc, #196]	; (800a1f0 <xTaskIncrementTick+0x120>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	3301      	adds	r3, #1
 800a130:	4a2f      	ldr	r2, [pc, #188]	; (800a1f0 <xTaskIncrementTick+0x120>)
 800a132:	6013      	str	r3, [r2, #0]
 800a134:	f000 fac6 	bl	800a6c4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800a138:	4b2e      	ldr	r3, [pc, #184]	; (800a1f4 <xTaskIncrementTick+0x124>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	693a      	ldr	r2, [r7, #16]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d348      	bcc.n	800a1d4 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a142:	4b29      	ldr	r3, [pc, #164]	; (800a1e8 <xTaskIncrementTick+0x118>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d104      	bne.n	800a156 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a14c:	4b29      	ldr	r3, [pc, #164]	; (800a1f4 <xTaskIncrementTick+0x124>)
 800a14e:	f04f 32ff 	mov.w	r2, #4294967295
 800a152:	601a      	str	r2, [r3, #0]
                    break;
 800a154:	e03e      	b.n	800a1d4 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a156:	4b24      	ldr	r3, [pc, #144]	; (800a1e8 <xTaskIncrementTick+0x118>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	68db      	ldr	r3, [r3, #12]
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800a166:	693a      	ldr	r2, [r7, #16]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	429a      	cmp	r2, r3
 800a16c:	d203      	bcs.n	800a176 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800a16e:	4a21      	ldr	r2, [pc, #132]	; (800a1f4 <xTaskIncrementTick+0x124>)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a174:	e02e      	b.n	800a1d4 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	3304      	adds	r3, #4
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7fe fbd2 	bl	8008924 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a184:	2b00      	cmp	r3, #0
 800a186:	d004      	beq.n	800a192 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	3318      	adds	r3, #24
 800a18c:	4618      	mov	r0, r3
 800a18e:	f7fe fbc9 	bl	8008924 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	4618      	mov	r0, r3
 800a196:	f003 fa21 	bl	800d5dc <SEGGER_SYSVIEW_OnTaskStartReady>
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a19e:	2201      	movs	r2, #1
 800a1a0:	409a      	lsls	r2, r3
 800a1a2:	4b15      	ldr	r3, [pc, #84]	; (800a1f8 <xTaskIncrementTick+0x128>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	4a13      	ldr	r2, [pc, #76]	; (800a1f8 <xTaskIncrementTick+0x128>)
 800a1aa:	6013      	str	r3, [r2, #0]
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1b0:	4613      	mov	r3, r2
 800a1b2:	009b      	lsls	r3, r3, #2
 800a1b4:	4413      	add	r3, r2
 800a1b6:	009b      	lsls	r3, r3, #2
 800a1b8:	4a10      	ldr	r2, [pc, #64]	; (800a1fc <xTaskIncrementTick+0x12c>)
 800a1ba:	441a      	add	r2, r3
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	3304      	adds	r3, #4
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	4610      	mov	r0, r2
 800a1c4:	f7fe fb51 	bl	800886a <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1c8:	e7bb      	b.n	800a142 <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800a1ca:	4b0d      	ldr	r3, [pc, #52]	; (800a200 <xTaskIncrementTick+0x130>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	4a0b      	ldr	r2, [pc, #44]	; (800a200 <xTaskIncrementTick+0x130>)
 800a1d2:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800a1d4:	697b      	ldr	r3, [r7, #20]
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3718      	adds	r7, #24
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
 800a1de:	bf00      	nop
 800a1e0:	2000270c 	.word	0x2000270c
 800a1e4:	200026e8 	.word	0x200026e8
 800a1e8:	2000269c 	.word	0x2000269c
 800a1ec:	200026a0 	.word	0x200026a0
 800a1f0:	200026fc 	.word	0x200026fc
 800a1f4:	20002704 	.word	0x20002704
 800a1f8:	200026ec 	.word	0x200026ec
 800a1fc:	20002610 	.word	0x20002610
 800a200:	200026f4 	.word	0x200026f4

0800a204 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b086      	sub	sp, #24
 800a208:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a20a:	4b2d      	ldr	r3, [pc, #180]	; (800a2c0 <vTaskSwitchContext+0xbc>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d003      	beq.n	800a21a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800a212:	4b2c      	ldr	r3, [pc, #176]	; (800a2c4 <vTaskSwitchContext+0xc0>)
 800a214:	2201      	movs	r2, #1
 800a216:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800a218:	e04d      	b.n	800a2b6 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800a21a:	4b2a      	ldr	r3, [pc, #168]	; (800a2c4 <vTaskSwitchContext+0xc0>)
 800a21c:	2200      	movs	r2, #0
 800a21e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a220:	4b29      	ldr	r3, [pc, #164]	; (800a2c8 <vTaskSwitchContext+0xc4>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	fab3 f383 	clz	r3, r3
 800a22c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800a22e:	7afb      	ldrb	r3, [r7, #11]
 800a230:	f1c3 031f 	rsb	r3, r3, #31
 800a234:	617b      	str	r3, [r7, #20]
 800a236:	4925      	ldr	r1, [pc, #148]	; (800a2cc <vTaskSwitchContext+0xc8>)
 800a238:	697a      	ldr	r2, [r7, #20]
 800a23a:	4613      	mov	r3, r2
 800a23c:	009b      	lsls	r3, r3, #2
 800a23e:	4413      	add	r3, r2
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	440b      	add	r3, r1
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d10a      	bne.n	800a260 <vTaskSwitchContext+0x5c>
        __asm volatile
 800a24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24e:	f383 8811 	msr	BASEPRI, r3
 800a252:	f3bf 8f6f 	isb	sy
 800a256:	f3bf 8f4f 	dsb	sy
 800a25a:	607b      	str	r3, [r7, #4]
    }
 800a25c:	bf00      	nop
 800a25e:	e7fe      	b.n	800a25e <vTaskSwitchContext+0x5a>
 800a260:	697a      	ldr	r2, [r7, #20]
 800a262:	4613      	mov	r3, r2
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	4413      	add	r3, r2
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	4a18      	ldr	r2, [pc, #96]	; (800a2cc <vTaskSwitchContext+0xc8>)
 800a26c:	4413      	add	r3, r2
 800a26e:	613b      	str	r3, [r7, #16]
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	685a      	ldr	r2, [r3, #4]
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	605a      	str	r2, [r3, #4]
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	685a      	ldr	r2, [r3, #4]
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	3308      	adds	r3, #8
 800a282:	429a      	cmp	r2, r3
 800a284:	d104      	bne.n	800a290 <vTaskSwitchContext+0x8c>
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	685a      	ldr	r2, [r3, #4]
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	605a      	str	r2, [r3, #4]
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	68db      	ldr	r3, [r3, #12]
 800a296:	4a0e      	ldr	r2, [pc, #56]	; (800a2d0 <vTaskSwitchContext+0xcc>)
 800a298:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800a29a:	4b0d      	ldr	r3, [pc, #52]	; (800a2d0 <vTaskSwitchContext+0xcc>)
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	4b0d      	ldr	r3, [pc, #52]	; (800a2d4 <vTaskSwitchContext+0xd0>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	d102      	bne.n	800a2ac <vTaskSwitchContext+0xa8>
 800a2a6:	f003 f8f9 	bl	800d49c <SEGGER_SYSVIEW_OnIdle>
}
 800a2aa:	e004      	b.n	800a2b6 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 800a2ac:	4b08      	ldr	r3, [pc, #32]	; (800a2d0 <vTaskSwitchContext+0xcc>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f003 f951 	bl	800d558 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800a2b6:	bf00      	nop
 800a2b8:	3718      	adds	r7, #24
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	2000270c 	.word	0x2000270c
 800a2c4:	200026f8 	.word	0x200026f8
 800a2c8:	200026ec 	.word	0x200026ec
 800a2cc:	20002610 	.word	0x20002610
 800a2d0:	2000260c 	.word	0x2000260c
 800a2d4:	20002708 	.word	0x20002708

0800a2d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d10a      	bne.n	800a2fe <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800a2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ec:	f383 8811 	msr	BASEPRI, r3
 800a2f0:	f3bf 8f6f 	isb	sy
 800a2f4:	f3bf 8f4f 	dsb	sy
 800a2f8:	60fb      	str	r3, [r7, #12]
    }
 800a2fa:	bf00      	nop
 800a2fc:	e7fe      	b.n	800a2fc <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a2fe:	4b07      	ldr	r3, [pc, #28]	; (800a31c <vTaskPlaceOnEventList+0x44>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	3318      	adds	r3, #24
 800a304:	4619      	mov	r1, r3
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f7fe fad3 	bl	80088b2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a30c:	2101      	movs	r1, #1
 800a30e:	6838      	ldr	r0, [r7, #0]
 800a310:	f000 fdca 	bl	800aea8 <prvAddCurrentTaskToDelayedList>
}
 800a314:	bf00      	nop
 800a316:	3710      	adds	r7, #16
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}
 800a31c:	2000260c 	.word	0x2000260c

0800a320 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800a320:	b580      	push	{r7, lr}
 800a322:	b086      	sub	sp, #24
 800a324:	af00      	add	r7, sp, #0
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	60b9      	str	r1, [r7, #8]
 800a32a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d10a      	bne.n	800a348 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800a332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a336:	f383 8811 	msr	BASEPRI, r3
 800a33a:	f3bf 8f6f 	isb	sy
 800a33e:	f3bf 8f4f 	dsb	sy
 800a342:	617b      	str	r3, [r7, #20]
    }
 800a344:	bf00      	nop
 800a346:	e7fe      	b.n	800a346 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a348:	4b0b      	ldr	r3, [pc, #44]	; (800a378 <vTaskPlaceOnEventListRestricted+0x58>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	3318      	adds	r3, #24
 800a34e:	4619      	mov	r1, r3
 800a350:	68f8      	ldr	r0, [r7, #12]
 800a352:	f7fe fa8a 	bl	800886a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d002      	beq.n	800a362 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 800a35c:	f04f 33ff 	mov.w	r3, #4294967295
 800a360:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800a362:	2024      	movs	r0, #36	; 0x24
 800a364:	f002 faee 	bl	800c944 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a368:	6879      	ldr	r1, [r7, #4]
 800a36a:	68b8      	ldr	r0, [r7, #8]
 800a36c:	f000 fd9c 	bl	800aea8 <prvAddCurrentTaskToDelayedList>
    }
 800a370:	bf00      	nop
 800a372:	3718      	adds	r7, #24
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}
 800a378:	2000260c 	.word	0x2000260c

0800a37c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b086      	sub	sp, #24
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	68db      	ldr	r3, [r3, #12]
 800a38a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d10a      	bne.n	800a3a8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800a392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a396:	f383 8811 	msr	BASEPRI, r3
 800a39a:	f3bf 8f6f 	isb	sy
 800a39e:	f3bf 8f4f 	dsb	sy
 800a3a2:	60fb      	str	r3, [r7, #12]
    }
 800a3a4:	bf00      	nop
 800a3a6:	e7fe      	b.n	800a3a6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	3318      	adds	r3, #24
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f7fe fab9 	bl	8008924 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3b2:	4b1f      	ldr	r3, [pc, #124]	; (800a430 <xTaskRemoveFromEventList+0xb4>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d120      	bne.n	800a3fc <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	3304      	adds	r3, #4
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7fe fab0 	bl	8008924 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f003 f908 	bl	800d5dc <SEGGER_SYSVIEW_OnTaskStartReady>
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	409a      	lsls	r2, r3
 800a3d4:	4b17      	ldr	r3, [pc, #92]	; (800a434 <xTaskRemoveFromEventList+0xb8>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	4a16      	ldr	r2, [pc, #88]	; (800a434 <xTaskRemoveFromEventList+0xb8>)
 800a3dc:	6013      	str	r3, [r2, #0]
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3e2:	4613      	mov	r3, r2
 800a3e4:	009b      	lsls	r3, r3, #2
 800a3e6:	4413      	add	r3, r2
 800a3e8:	009b      	lsls	r3, r3, #2
 800a3ea:	4a13      	ldr	r2, [pc, #76]	; (800a438 <xTaskRemoveFromEventList+0xbc>)
 800a3ec:	441a      	add	r2, r3
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	3304      	adds	r3, #4
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	4610      	mov	r0, r2
 800a3f6:	f7fe fa38 	bl	800886a <vListInsertEnd>
 800a3fa:	e005      	b.n	800a408 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	3318      	adds	r3, #24
 800a400:	4619      	mov	r1, r3
 800a402:	480e      	ldr	r0, [pc, #56]	; (800a43c <xTaskRemoveFromEventList+0xc0>)
 800a404:	f7fe fa31 	bl	800886a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a40c:	4b0c      	ldr	r3, [pc, #48]	; (800a440 <xTaskRemoveFromEventList+0xc4>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a412:	429a      	cmp	r2, r3
 800a414:	d905      	bls.n	800a422 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800a416:	2301      	movs	r3, #1
 800a418:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800a41a:	4b0a      	ldr	r3, [pc, #40]	; (800a444 <xTaskRemoveFromEventList+0xc8>)
 800a41c:	2201      	movs	r2, #1
 800a41e:	601a      	str	r2, [r3, #0]
 800a420:	e001      	b.n	800a426 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 800a422:	2300      	movs	r3, #0
 800a424:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800a426:	697b      	ldr	r3, [r7, #20]
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3718      	adds	r7, #24
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	2000270c 	.word	0x2000270c
 800a434:	200026ec 	.word	0x200026ec
 800a438:	20002610 	.word	0x20002610
 800a43c:	200026a4 	.word	0x200026a4
 800a440:	2000260c 	.word	0x2000260c
 800a444:	200026f8 	.word	0x200026f8

0800a448 <vTaskSetTimeOutState>:
    }
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
    configASSERT( pxTimeOut );
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d10a      	bne.n	800a46c <vTaskSetTimeOutState+0x24>
        __asm volatile
 800a456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a45a:	f383 8811 	msr	BASEPRI, r3
 800a45e:	f3bf 8f6f 	isb	sy
 800a462:	f3bf 8f4f 	dsb	sy
 800a466:	60fb      	str	r3, [r7, #12]
    }
 800a468:	bf00      	nop
 800a46a:	e7fe      	b.n	800a46a <vTaskSetTimeOutState+0x22>
    taskENTER_CRITICAL();
 800a46c:	f001 f9d4 	bl	800b818 <vPortEnterCritical>
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a470:	4b06      	ldr	r3, [pc, #24]	; (800a48c <vTaskSetTimeOutState+0x44>)
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	601a      	str	r2, [r3, #0]
        pxTimeOut->xTimeOnEntering = xTickCount;
 800a478:	4b05      	ldr	r3, [pc, #20]	; (800a490 <vTaskSetTimeOutState+0x48>)
 800a47a:	681a      	ldr	r2, [r3, #0]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	605a      	str	r2, [r3, #4]
    }
    taskEXIT_CRITICAL();
 800a480:	f001 f9fa 	bl	800b878 <vPortExitCritical>
}
 800a484:	bf00      	nop
 800a486:	3710      	adds	r7, #16
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	200026fc 	.word	0x200026fc
 800a490:	200026e8 	.word	0x200026e8

0800a494 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a494:	b480      	push	{r7}
 800a496:	b083      	sub	sp, #12
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a49c:	4b06      	ldr	r3, [pc, #24]	; (800a4b8 <vTaskInternalSetTimeOutState+0x24>)
 800a49e:	681a      	ldr	r2, [r3, #0]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800a4a4:	4b05      	ldr	r3, [pc, #20]	; (800a4bc <vTaskInternalSetTimeOutState+0x28>)
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	605a      	str	r2, [r3, #4]
}
 800a4ac:	bf00      	nop
 800a4ae:	370c      	adds	r7, #12
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr
 800a4b8:	200026fc 	.word	0x200026fc
 800a4bc:	200026e8 	.word	0x200026e8

0800a4c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b088      	sub	sp, #32
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d10a      	bne.n	800a4e6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800a4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d4:	f383 8811 	msr	BASEPRI, r3
 800a4d8:	f3bf 8f6f 	isb	sy
 800a4dc:	f3bf 8f4f 	dsb	sy
 800a4e0:	613b      	str	r3, [r7, #16]
    }
 800a4e2:	bf00      	nop
 800a4e4:	e7fe      	b.n	800a4e4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d10a      	bne.n	800a502 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800a4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f0:	f383 8811 	msr	BASEPRI, r3
 800a4f4:	f3bf 8f6f 	isb	sy
 800a4f8:	f3bf 8f4f 	dsb	sy
 800a4fc:	60fb      	str	r3, [r7, #12]
    }
 800a4fe:	bf00      	nop
 800a500:	e7fe      	b.n	800a500 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800a502:	f001 f989 	bl	800b818 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800a506:	4b1f      	ldr	r3, [pc, #124]	; (800a584 <xTaskCheckForTimeOut+0xc4>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	69ba      	ldr	r2, [r7, #24]
 800a512:	1ad3      	subs	r3, r2, r3
 800a514:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a51e:	d102      	bne.n	800a526 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800a520:	2300      	movs	r3, #0
 800a522:	61fb      	str	r3, [r7, #28]
 800a524:	e026      	b.n	800a574 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681a      	ldr	r2, [r3, #0]
 800a52a:	4b17      	ldr	r3, [pc, #92]	; (800a588 <xTaskCheckForTimeOut+0xc8>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	429a      	cmp	r2, r3
 800a530:	d00a      	beq.n	800a548 <xTaskCheckForTimeOut+0x88>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	69ba      	ldr	r2, [r7, #24]
 800a538:	429a      	cmp	r2, r3
 800a53a:	d305      	bcc.n	800a548 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800a53c:	2301      	movs	r3, #1
 800a53e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	2200      	movs	r2, #0
 800a544:	601a      	str	r2, [r3, #0]
 800a546:	e015      	b.n	800a574 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	697a      	ldr	r2, [r7, #20]
 800a54e:	429a      	cmp	r2, r3
 800a550:	d20b      	bcs.n	800a56a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	681a      	ldr	r2, [r3, #0]
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	1ad2      	subs	r2, r2, r3
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f7ff ff98 	bl	800a494 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800a564:	2300      	movs	r3, #0
 800a566:	61fb      	str	r3, [r7, #28]
 800a568:	e004      	b.n	800a574 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	2200      	movs	r2, #0
 800a56e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800a570:	2301      	movs	r3, #1
 800a572:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800a574:	f001 f980 	bl	800b878 <vPortExitCritical>

    return xReturn;
 800a578:	69fb      	ldr	r3, [r7, #28]
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3720      	adds	r7, #32
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
 800a582:	bf00      	nop
 800a584:	200026e8 	.word	0x200026e8
 800a588:	200026fc 	.word	0x200026fc

0800a58c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a58c:	b480      	push	{r7}
 800a58e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800a590:	4b03      	ldr	r3, [pc, #12]	; (800a5a0 <vTaskMissedYield+0x14>)
 800a592:	2201      	movs	r2, #1
 800a594:	601a      	str	r2, [r3, #0]
}
 800a596:	bf00      	nop
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr
 800a5a0:	200026f8 	.word	0x200026f8

0800a5a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800a5ac:	f000 f84c 	bl	800a648 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 800a5b0:	4b04      	ldr	r3, [pc, #16]	; (800a5c4 <prvIdleTask+0x20>)
 800a5b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5b6:	601a      	str	r2, [r3, #0]
 800a5b8:	f3bf 8f4f 	dsb	sy
 800a5bc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800a5c0:	e7f4      	b.n	800a5ac <prvIdleTask+0x8>
 800a5c2:	bf00      	nop
 800a5c4:	e000ed04 	.word	0xe000ed04

0800a5c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	607b      	str	r3, [r7, #4]
 800a5d2:	e00c      	b.n	800a5ee <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	4613      	mov	r3, r2
 800a5d8:	009b      	lsls	r3, r3, #2
 800a5da:	4413      	add	r3, r2
 800a5dc:	009b      	lsls	r3, r3, #2
 800a5de:	4a12      	ldr	r2, [pc, #72]	; (800a628 <prvInitialiseTaskLists+0x60>)
 800a5e0:	4413      	add	r3, r2
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f7fe f914 	bl	8008810 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	607b      	str	r3, [r7, #4]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2b04      	cmp	r3, #4
 800a5f2:	d9ef      	bls.n	800a5d4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800a5f4:	480d      	ldr	r0, [pc, #52]	; (800a62c <prvInitialiseTaskLists+0x64>)
 800a5f6:	f7fe f90b 	bl	8008810 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800a5fa:	480d      	ldr	r0, [pc, #52]	; (800a630 <prvInitialiseTaskLists+0x68>)
 800a5fc:	f7fe f908 	bl	8008810 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800a600:	480c      	ldr	r0, [pc, #48]	; (800a634 <prvInitialiseTaskLists+0x6c>)
 800a602:	f7fe f905 	bl	8008810 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800a606:	480c      	ldr	r0, [pc, #48]	; (800a638 <prvInitialiseTaskLists+0x70>)
 800a608:	f7fe f902 	bl	8008810 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800a60c:	480b      	ldr	r0, [pc, #44]	; (800a63c <prvInitialiseTaskLists+0x74>)
 800a60e:	f7fe f8ff 	bl	8008810 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800a612:	4b0b      	ldr	r3, [pc, #44]	; (800a640 <prvInitialiseTaskLists+0x78>)
 800a614:	4a05      	ldr	r2, [pc, #20]	; (800a62c <prvInitialiseTaskLists+0x64>)
 800a616:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a618:	4b0a      	ldr	r3, [pc, #40]	; (800a644 <prvInitialiseTaskLists+0x7c>)
 800a61a:	4a05      	ldr	r2, [pc, #20]	; (800a630 <prvInitialiseTaskLists+0x68>)
 800a61c:	601a      	str	r2, [r3, #0]
}
 800a61e:	bf00      	nop
 800a620:	3708      	adds	r7, #8
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
 800a626:	bf00      	nop
 800a628:	20002610 	.word	0x20002610
 800a62c:	20002674 	.word	0x20002674
 800a630:	20002688 	.word	0x20002688
 800a634:	200026a4 	.word	0x200026a4
 800a638:	200026b8 	.word	0x200026b8
 800a63c:	200026d0 	.word	0x200026d0
 800a640:	2000269c 	.word	0x2000269c
 800a644:	200026a0 	.word	0x200026a0

0800a648 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a64e:	e019      	b.n	800a684 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800a650:	f001 f8e2 	bl	800b818 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a654:	4b10      	ldr	r3, [pc, #64]	; (800a698 <prvCheckTasksWaitingTermination+0x50>)
 800a656:	68db      	ldr	r3, [r3, #12]
 800a658:	68db      	ldr	r3, [r3, #12]
 800a65a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	3304      	adds	r3, #4
 800a660:	4618      	mov	r0, r3
 800a662:	f7fe f95f 	bl	8008924 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800a666:	4b0d      	ldr	r3, [pc, #52]	; (800a69c <prvCheckTasksWaitingTermination+0x54>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	3b01      	subs	r3, #1
 800a66c:	4a0b      	ldr	r2, [pc, #44]	; (800a69c <prvCheckTasksWaitingTermination+0x54>)
 800a66e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800a670:	4b0b      	ldr	r3, [pc, #44]	; (800a6a0 <prvCheckTasksWaitingTermination+0x58>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	3b01      	subs	r3, #1
 800a676:	4a0a      	ldr	r2, [pc, #40]	; (800a6a0 <prvCheckTasksWaitingTermination+0x58>)
 800a678:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800a67a:	f001 f8fd 	bl	800b878 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 f810 	bl	800a6a4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a684:	4b06      	ldr	r3, [pc, #24]	; (800a6a0 <prvCheckTasksWaitingTermination+0x58>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d1e1      	bne.n	800a650 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800a68c:	bf00      	nop
 800a68e:	bf00      	nop
 800a690:	3708      	adds	r7, #8
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	200026b8 	.word	0x200026b8
 800a69c:	200026e4 	.word	0x200026e4
 800a6a0:	200026cc 	.word	0x200026cc

0800a6a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f001 fabb 	bl	800bc2c <vPortFree>
                vPortFree( pxTCB );
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f001 fab8 	bl	800bc2c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800a6bc:	bf00      	nop
 800a6be:	3708      	adds	r7, #8
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a6c8:	4b0a      	ldr	r3, [pc, #40]	; (800a6f4 <prvResetNextTaskUnblockTime+0x30>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d104      	bne.n	800a6dc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800a6d2:	4b09      	ldr	r3, [pc, #36]	; (800a6f8 <prvResetNextTaskUnblockTime+0x34>)
 800a6d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a6d8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800a6da:	e005      	b.n	800a6e8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a6dc:	4b05      	ldr	r3, [pc, #20]	; (800a6f4 <prvResetNextTaskUnblockTime+0x30>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	68db      	ldr	r3, [r3, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4a04      	ldr	r2, [pc, #16]	; (800a6f8 <prvResetNextTaskUnblockTime+0x34>)
 800a6e6:	6013      	str	r3, [r2, #0]
}
 800a6e8:	bf00      	nop
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f0:	4770      	bx	lr
 800a6f2:	bf00      	nop
 800a6f4:	2000269c 	.word	0x2000269c
 800a6f8:	20002704 	.word	0x20002704

0800a6fc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 800a6fc:	b480      	push	{r7}
 800a6fe:	b083      	sub	sp, #12
 800a700:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 800a702:	4b05      	ldr	r3, [pc, #20]	; (800a718 <xTaskGetCurrentTaskHandle+0x1c>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	607b      	str	r3, [r7, #4]

        return xReturn;
 800a708:	687b      	ldr	r3, [r7, #4]
    }
 800a70a:	4618      	mov	r0, r3
 800a70c:	370c      	adds	r7, #12
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr
 800a716:	bf00      	nop
 800a718:	2000260c 	.word	0x2000260c

0800a71c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800a722:	4b0b      	ldr	r3, [pc, #44]	; (800a750 <xTaskGetSchedulerState+0x34>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d102      	bne.n	800a730 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800a72a:	2301      	movs	r3, #1
 800a72c:	607b      	str	r3, [r7, #4]
 800a72e:	e008      	b.n	800a742 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a730:	4b08      	ldr	r3, [pc, #32]	; (800a754 <xTaskGetSchedulerState+0x38>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d102      	bne.n	800a73e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800a738:	2302      	movs	r3, #2
 800a73a:	607b      	str	r3, [r7, #4]
 800a73c:	e001      	b.n	800a742 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800a73e:	2300      	movs	r3, #0
 800a740:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800a742:	687b      	ldr	r3, [r7, #4]
    }
 800a744:	4618      	mov	r0, r3
 800a746:	370c      	adds	r7, #12
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr
 800a750:	200026f0 	.word	0x200026f0
 800a754:	2000270c 	.word	0x2000270c

0800a758 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800a758:	b580      	push	{r7, lr}
 800a75a:	b086      	sub	sp, #24
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800a764:	2300      	movs	r3, #0
 800a766:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d068      	beq.n	800a840 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800a76e:	4b37      	ldr	r3, [pc, #220]	; (800a84c <xTaskPriorityDisinherit+0xf4>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	693a      	ldr	r2, [r7, #16]
 800a774:	429a      	cmp	r2, r3
 800a776:	d00a      	beq.n	800a78e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 800a778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a77c:	f383 8811 	msr	BASEPRI, r3
 800a780:	f3bf 8f6f 	isb	sy
 800a784:	f3bf 8f4f 	dsb	sy
 800a788:	60fb      	str	r3, [r7, #12]
    }
 800a78a:	bf00      	nop
 800a78c:	e7fe      	b.n	800a78c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a792:	2b00      	cmp	r3, #0
 800a794:	d10a      	bne.n	800a7ac <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800a796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79a:	f383 8811 	msr	BASEPRI, r3
 800a79e:	f3bf 8f6f 	isb	sy
 800a7a2:	f3bf 8f4f 	dsb	sy
 800a7a6:	60bb      	str	r3, [r7, #8]
    }
 800a7a8:	bf00      	nop
 800a7aa:	e7fe      	b.n	800a7aa <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7b0:	1e5a      	subs	r2, r3, #1
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d03e      	beq.n	800a840 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d13a      	bne.n	800a840 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	3304      	adds	r3, #4
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7fe f8a8 	bl	8008924 <uxListRemove>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d10a      	bne.n	800a7f0 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7de:	2201      	movs	r2, #1
 800a7e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a7e4:	43da      	mvns	r2, r3
 800a7e6:	4b1a      	ldr	r3, [pc, #104]	; (800a850 <xTaskPriorityDisinherit+0xf8>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4013      	ands	r3, r2
 800a7ec:	4a18      	ldr	r2, [pc, #96]	; (800a850 <xTaskPriorityDisinherit+0xf8>)
 800a7ee:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	4619      	mov	r1, r3
 800a7f4:	204a      	movs	r0, #74	; 0x4a
 800a7f6:	f002 f8c3 	bl	800c980 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a806:	f1c3 0205 	rsb	r2, r3, #5
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a812:	2201      	movs	r2, #1
 800a814:	409a      	lsls	r2, r3
 800a816:	4b0e      	ldr	r3, [pc, #56]	; (800a850 <xTaskPriorityDisinherit+0xf8>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4313      	orrs	r3, r2
 800a81c:	4a0c      	ldr	r2, [pc, #48]	; (800a850 <xTaskPriorityDisinherit+0xf8>)
 800a81e:	6013      	str	r3, [r2, #0]
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a824:	4613      	mov	r3, r2
 800a826:	009b      	lsls	r3, r3, #2
 800a828:	4413      	add	r3, r2
 800a82a:	009b      	lsls	r3, r3, #2
 800a82c:	4a09      	ldr	r2, [pc, #36]	; (800a854 <xTaskPriorityDisinherit+0xfc>)
 800a82e:	441a      	add	r2, r3
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	3304      	adds	r3, #4
 800a834:	4619      	mov	r1, r3
 800a836:	4610      	mov	r0, r2
 800a838:	f7fe f817 	bl	800886a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800a83c:	2301      	movs	r3, #1
 800a83e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800a840:	697b      	ldr	r3, [r7, #20]
    }
 800a842:	4618      	mov	r0, r3
 800a844:	3718      	adds	r7, #24
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}
 800a84a:	bf00      	nop
 800a84c:	2000260c 	.word	0x2000260c
 800a850:	200026ec 	.word	0x200026ec
 800a854:	20002610 	.word	0x20002610

0800a858 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 800a858:	b580      	push	{r7, lr}
 800a85a:	b086      	sub	sp, #24
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	60b9      	str	r1, [r7, #8]
 800a862:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d00a      	beq.n	800a880 <ulTaskGenericNotifyTake+0x28>
        __asm volatile
 800a86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86e:	f383 8811 	msr	BASEPRI, r3
 800a872:	f3bf 8f6f 	isb	sy
 800a876:	f3bf 8f4f 	dsb	sy
 800a87a:	613b      	str	r3, [r7, #16]
    }
 800a87c:	bf00      	nop
 800a87e:	e7fe      	b.n	800a87e <ulTaskGenericNotifyTake+0x26>

        taskENTER_CRITICAL();
 800a880:	f000 ffca 	bl	800b818 <vPortEnterCritical>
        {
            /* Only block if the notification count is not already non-zero. */
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 800a884:	4b29      	ldr	r3, [pc, #164]	; (800a92c <ulTaskGenericNotifyTake+0xd4>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	68fa      	ldr	r2, [r7, #12]
 800a88a:	3214      	adds	r2, #20
 800a88c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d115      	bne.n	800a8c0 <ulTaskGenericNotifyTake+0x68>
            {
                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800a894:	4b25      	ldr	r3, [pc, #148]	; (800a92c <ulTaskGenericNotifyTake+0xd4>)
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	4413      	add	r3, r2
 800a89c:	3354      	adds	r3, #84	; 0x54
 800a89e:	2201      	movs	r2, #1
 800a8a0:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d00b      	beq.n	800a8c0 <ulTaskGenericNotifyTake+0x68>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a8a8:	2101      	movs	r1, #1
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 fafc 	bl	800aea8 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800a8b0:	4b1f      	ldr	r3, [pc, #124]	; (800a930 <ulTaskGenericNotifyTake+0xd8>)
 800a8b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8b6:	601a      	str	r2, [r3, #0]
 800a8b8:	f3bf 8f4f 	dsb	sy
 800a8bc:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800a8c0:	f000 ffda 	bl	800b878 <vPortExitCritical>

        taskENTER_CRITICAL();
 800a8c4:	f000 ffa8 	bl	800b818 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE(  );
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	2042      	movs	r0, #66	; 0x42
 800a8d0:	f002 f892 	bl	800c9f8 <SEGGER_SYSVIEW_RecordU32x2>
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800a8d4:	4b15      	ldr	r3, [pc, #84]	; (800a92c <ulTaskGenericNotifyTake+0xd4>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	68fa      	ldr	r2, [r7, #12]
 800a8da:	3214      	adds	r2, #20
 800a8dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8e0:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0UL )
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d012      	beq.n	800a90e <ulTaskGenericNotifyTake+0xb6>
            {
                if( xClearCountOnExit != pdFALSE )
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d007      	beq.n	800a8fe <ulTaskGenericNotifyTake+0xa6>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 800a8ee:	4b0f      	ldr	r3, [pc, #60]	; (800a92c <ulTaskGenericNotifyTake+0xd4>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	68fa      	ldr	r2, [r7, #12]
 800a8f4:	3214      	adds	r2, #20
 800a8f6:	2100      	movs	r1, #0
 800a8f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a8fc:	e007      	b.n	800a90e <ulTaskGenericNotifyTake+0xb6>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 800a8fe:	4b0b      	ldr	r3, [pc, #44]	; (800a92c <ulTaskGenericNotifyTake+0xd4>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	697a      	ldr	r2, [r7, #20]
 800a904:	1e51      	subs	r1, r2, #1
 800a906:	68fa      	ldr	r2, [r7, #12]
 800a908:	3214      	adds	r2, #20
 800a90a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800a90e:	4b07      	ldr	r3, [pc, #28]	; (800a92c <ulTaskGenericNotifyTake+0xd4>)
 800a910:	681a      	ldr	r2, [r3, #0]
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	4413      	add	r3, r2
 800a916:	3354      	adds	r3, #84	; 0x54
 800a918:	2200      	movs	r2, #0
 800a91a:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800a91c:	f000 ffac 	bl	800b878 <vPortExitCritical>

        return ulReturn;
 800a920:	697b      	ldr	r3, [r7, #20]
    }
 800a922:	4618      	mov	r0, r3
 800a924:	3718      	adds	r7, #24
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
 800a92a:	bf00      	nop
 800a92c:	2000260c 	.word	0x2000260c
 800a930:	e000ed04 	.word	0xe000ed04

0800a934 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 800a934:	b580      	push	{r7, lr}
 800a936:	b088      	sub	sp, #32
 800a938:	af02      	add	r7, sp, #8
 800a93a:	60f8      	str	r0, [r7, #12]
 800a93c:	60b9      	str	r1, [r7, #8]
 800a93e:	607a      	str	r2, [r7, #4]
 800a940:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d00a      	beq.n	800a95e <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 800a948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a94c:	f383 8811 	msr	BASEPRI, r3
 800a950:	f3bf 8f6f 	isb	sy
 800a954:	f3bf 8f4f 	dsb	sy
 800a958:	613b      	str	r3, [r7, #16]
    }
 800a95a:	bf00      	nop
 800a95c:	e7fe      	b.n	800a95c <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800a95e:	f000 ff5b 	bl	800b818 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800a962:	4b36      	ldr	r3, [pc, #216]	; (800aa3c <xTaskGenericNotifyWait+0x108>)
 800a964:	681a      	ldr	r2, [r3, #0]
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	4413      	add	r3, r2
 800a96a:	3354      	adds	r3, #84	; 0x54
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	b2db      	uxtb	r3, r3
 800a970:	2b02      	cmp	r3, #2
 800a972:	d022      	beq.n	800a9ba <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 800a974:	4b31      	ldr	r3, [pc, #196]	; (800aa3c <xTaskGenericNotifyWait+0x108>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	68fa      	ldr	r2, [r7, #12]
 800a97a:	3214      	adds	r2, #20
 800a97c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a980:	68ba      	ldr	r2, [r7, #8]
 800a982:	43d2      	mvns	r2, r2
 800a984:	4011      	ands	r1, r2
 800a986:	68fa      	ldr	r2, [r7, #12]
 800a988:	3214      	adds	r2, #20
 800a98a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800a98e:	4b2b      	ldr	r3, [pc, #172]	; (800aa3c <xTaskGenericNotifyWait+0x108>)
 800a990:	681a      	ldr	r2, [r3, #0]
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	4413      	add	r3, r2
 800a996:	3354      	adds	r3, #84	; 0x54
 800a998:	2201      	movs	r2, #1
 800a99a:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800a99c:	6a3b      	ldr	r3, [r7, #32]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d00b      	beq.n	800a9ba <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a9a2:	2101      	movs	r1, #1
 800a9a4:	6a38      	ldr	r0, [r7, #32]
 800a9a6:	f000 fa7f 	bl	800aea8 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800a9aa:	4b25      	ldr	r3, [pc, #148]	; (800aa40 <xTaskGenericNotifyWait+0x10c>)
 800a9ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9b0:	601a      	str	r2, [r3, #0]
 800a9b2:	f3bf 8f4f 	dsb	sy
 800a9b6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800a9ba:	f000 ff5d 	bl	800b878 <vPortExitCritical>

        taskENTER_CRITICAL();
 800a9be:	f000 ff2b 	bl	800b818 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 800a9c2:	683a      	ldr	r2, [r7, #0]
 800a9c4:	6a3b      	ldr	r3, [r7, #32]
 800a9c6:	9300      	str	r3, [sp, #0]
 800a9c8:	4613      	mov	r3, r2
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	68b9      	ldr	r1, [r7, #8]
 800a9ce:	2040      	movs	r0, #64	; 0x40
 800a9d0:	f002 f8e2 	bl	800cb98 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d007      	beq.n	800a9ea <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800a9da:	4b18      	ldr	r3, [pc, #96]	; (800aa3c <xTaskGenericNotifyWait+0x108>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	68fa      	ldr	r2, [r7, #12]
 800a9e0:	3214      	adds	r2, #20
 800a9e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800a9ea:	4b14      	ldr	r3, [pc, #80]	; (800aa3c <xTaskGenericNotifyWait+0x108>)
 800a9ec:	681a      	ldr	r2, [r3, #0]
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	3354      	adds	r3, #84	; 0x54
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	2b02      	cmp	r3, #2
 800a9fa:	d002      	beq.n	800aa02 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	617b      	str	r3, [r7, #20]
 800aa00:	e00e      	b.n	800aa20 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 800aa02:	4b0e      	ldr	r3, [pc, #56]	; (800aa3c <xTaskGenericNotifyWait+0x108>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	68fa      	ldr	r2, [r7, #12]
 800aa08:	3214      	adds	r2, #20
 800aa0a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	43d2      	mvns	r2, r2
 800aa12:	4011      	ands	r1, r2
 800aa14:	68fa      	ldr	r2, [r7, #12]
 800aa16:	3214      	adds	r2, #20
 800aa18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800aa20:	4b06      	ldr	r3, [pc, #24]	; (800aa3c <xTaskGenericNotifyWait+0x108>)
 800aa22:	681a      	ldr	r2, [r3, #0]
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	4413      	add	r3, r2
 800aa28:	3354      	adds	r3, #84	; 0x54
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800aa2e:	f000 ff23 	bl	800b878 <vPortExitCritical>

        return xReturn;
 800aa32:	697b      	ldr	r3, [r7, #20]
    }
 800aa34:	4618      	mov	r0, r3
 800aa36:	3718      	adds	r7, #24
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}
 800aa3c:	2000260c 	.word	0x2000260c
 800aa40:	e000ed04 	.word	0xe000ed04

0800aa44 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b08e      	sub	sp, #56	; 0x38
 800aa48:	af02      	add	r7, sp, #8
 800aa4a:	60f8      	str	r0, [r7, #12]
 800aa4c:	60b9      	str	r1, [r7, #8]
 800aa4e:	607a      	str	r2, [r7, #4]
 800aa50:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800aa52:	2301      	movs	r3, #1
 800aa54:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d00a      	beq.n	800aa72 <xTaskGenericNotify+0x2e>
        __asm volatile
 800aa5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa60:	f383 8811 	msr	BASEPRI, r3
 800aa64:	f3bf 8f6f 	isb	sy
 800aa68:	f3bf 8f4f 	dsb	sy
 800aa6c:	623b      	str	r3, [r7, #32]
    }
 800aa6e:	bf00      	nop
 800aa70:	e7fe      	b.n	800aa70 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d10a      	bne.n	800aa8e <xTaskGenericNotify+0x4a>
        __asm volatile
 800aa78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7c:	f383 8811 	msr	BASEPRI, r3
 800aa80:	f3bf 8f6f 	isb	sy
 800aa84:	f3bf 8f4f 	dsb	sy
 800aa88:	61fb      	str	r3, [r7, #28]
    }
 800aa8a:	bf00      	nop
 800aa8c:	e7fe      	b.n	800aa8c <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 800aa92:	f000 fec1 	bl	800b818 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800aa96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d006      	beq.n	800aaaa <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800aa9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa9e:	68ba      	ldr	r2, [r7, #8]
 800aaa0:	3214      	adds	r2, #20
 800aaa2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aaa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800aaaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	4413      	add	r3, r2
 800aab0:	3354      	adds	r3, #84	; 0x54
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800aab8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	4413      	add	r3, r2
 800aabe:	3354      	adds	r3, #84	; 0x54
 800aac0:	2202      	movs	r2, #2
 800aac2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800aac4:	78fb      	ldrb	r3, [r7, #3]
 800aac6:	2b04      	cmp	r3, #4
 800aac8:	d83b      	bhi.n	800ab42 <xTaskGenericNotify+0xfe>
 800aaca:	a201      	add	r2, pc, #4	; (adr r2, 800aad0 <xTaskGenericNotify+0x8c>)
 800aacc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aad0:	0800ab61 	.word	0x0800ab61
 800aad4:	0800aae5 	.word	0x0800aae5
 800aad8:	0800ab01 	.word	0x0800ab01
 800aadc:	0800ab19 	.word	0x0800ab19
 800aae0:	0800ab27 	.word	0x0800ab27
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800aae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae6:	68ba      	ldr	r2, [r7, #8]
 800aae8:	3214      	adds	r2, #20
 800aaea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	ea42 0103 	orr.w	r1, r2, r3
 800aaf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf6:	68ba      	ldr	r2, [r7, #8]
 800aaf8:	3214      	adds	r2, #20
 800aafa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800aafe:	e032      	b.n	800ab66 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800ab00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab02:	68ba      	ldr	r2, [r7, #8]
 800ab04:	3214      	adds	r2, #20
 800ab06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab0a:	1c59      	adds	r1, r3, #1
 800ab0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab0e:	68ba      	ldr	r2, [r7, #8]
 800ab10:	3214      	adds	r2, #20
 800ab12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800ab16:	e026      	b.n	800ab66 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800ab18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1a:	68ba      	ldr	r2, [r7, #8]
 800ab1c:	3214      	adds	r2, #20
 800ab1e:	6879      	ldr	r1, [r7, #4]
 800ab20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800ab24:	e01f      	b.n	800ab66 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ab26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab2a:	2b02      	cmp	r3, #2
 800ab2c:	d006      	beq.n	800ab3c <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800ab2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab30:	68ba      	ldr	r2, [r7, #8]
 800ab32:	3214      	adds	r2, #20
 800ab34:	6879      	ldr	r1, [r7, #4]
 800ab36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800ab3a:	e014      	b.n	800ab66 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 800ab40:	e011      	b.n	800ab66 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800ab42:	4b2d      	ldr	r3, [pc, #180]	; (800abf8 <xTaskGenericNotify+0x1b4>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d00c      	beq.n	800ab64 <xTaskGenericNotify+0x120>
        __asm volatile
 800ab4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab4e:	f383 8811 	msr	BASEPRI, r3
 800ab52:	f3bf 8f6f 	isb	sy
 800ab56:	f3bf 8f4f 	dsb	sy
 800ab5a:	61bb      	str	r3, [r7, #24]
    }
 800ab5c:	bf00      	nop
 800ab5e:	e7fe      	b.n	800ab5e <xTaskGenericNotify+0x11a>
                    break;
 800ab60:	bf00      	nop
 800ab62:	e000      	b.n	800ab66 <xTaskGenericNotify+0x122>

                    break;
 800ab64:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 800ab66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f002 fdd9 	bl	800d720 <SEGGER_SYSVIEW_ShrinkId>
 800ab6e:	4601      	mov	r1, r0
 800ab70:	78fa      	ldrb	r2, [r7, #3]
 800ab72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab74:	9300      	str	r3, [sp, #0]
 800ab76:	4613      	mov	r3, r2
 800ab78:	687a      	ldr	r2, [r7, #4]
 800ab7a:	203e      	movs	r0, #62	; 0x3e
 800ab7c:	f002 f80c 	bl	800cb98 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ab80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab84:	2b01      	cmp	r3, #1
 800ab86:	d130      	bne.n	800abea <xTaskGenericNotify+0x1a6>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab8a:	3304      	adds	r3, #4
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f7fd fec9 	bl	8008924 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 800ab92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab94:	4618      	mov	r0, r3
 800ab96:	f002 fd21 	bl	800d5dc <SEGGER_SYSVIEW_OnTaskStartReady>
 800ab9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab9e:	2201      	movs	r2, #1
 800aba0:	409a      	lsls	r2, r3
 800aba2:	4b16      	ldr	r3, [pc, #88]	; (800abfc <xTaskGenericNotify+0x1b8>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	4313      	orrs	r3, r2
 800aba8:	4a14      	ldr	r2, [pc, #80]	; (800abfc <xTaskGenericNotify+0x1b8>)
 800abaa:	6013      	str	r3, [r2, #0]
 800abac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abb0:	4613      	mov	r3, r2
 800abb2:	009b      	lsls	r3, r3, #2
 800abb4:	4413      	add	r3, r2
 800abb6:	009b      	lsls	r3, r3, #2
 800abb8:	4a11      	ldr	r2, [pc, #68]	; (800ac00 <xTaskGenericNotify+0x1bc>)
 800abba:	441a      	add	r2, r3
 800abbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abbe:	3304      	adds	r3, #4
 800abc0:	4619      	mov	r1, r3
 800abc2:	4610      	mov	r0, r2
 800abc4:	f7fd fe51 	bl	800886a <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800abc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d00a      	beq.n	800abe6 <xTaskGenericNotify+0x1a2>
        __asm volatile
 800abd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd4:	f383 8811 	msr	BASEPRI, r3
 800abd8:	f3bf 8f6f 	isb	sy
 800abdc:	f3bf 8f4f 	dsb	sy
 800abe0:	617b      	str	r3, [r7, #20]
    }
 800abe2:	bf00      	nop
 800abe4:	e7fe      	b.n	800abe4 <xTaskGenericNotify+0x1a0>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800abe6:	4b07      	ldr	r3, [pc, #28]	; (800ac04 <xTaskGenericNotify+0x1c0>)
 800abe8:	681b      	ldr	r3, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800abea:	f000 fe45 	bl	800b878 <vPortExitCritical>

        return xReturn;
 800abee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800abf0:	4618      	mov	r0, r3
 800abf2:	3730      	adds	r7, #48	; 0x30
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}
 800abf8:	200026e8 	.word	0x200026e8
 800abfc:	200026ec 	.word	0x200026ec
 800ac00:	20002610 	.word	0x20002610
 800ac04:	2000260c 	.word	0x2000260c

0800ac08 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b092      	sub	sp, #72	; 0x48
 800ac0c:	af02      	add	r7, sp, #8
 800ac0e:	60f8      	str	r0, [r7, #12]
 800ac10:	60b9      	str	r1, [r7, #8]
 800ac12:	607a      	str	r2, [r7, #4]
 800ac14:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800ac16:	2301      	movs	r3, #1
 800ac18:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d10a      	bne.n	800ac36 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 800ac20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac24:	f383 8811 	msr	BASEPRI, r3
 800ac28:	f3bf 8f6f 	isb	sy
 800ac2c:	f3bf 8f4f 	dsb	sy
 800ac30:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 800ac32:	bf00      	nop
 800ac34:	e7fe      	b.n	800ac34 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d00a      	beq.n	800ac52 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 800ac3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac40:	f383 8811 	msr	BASEPRI, r3
 800ac44:	f3bf 8f6f 	isb	sy
 800ac48:	f3bf 8f4f 	dsb	sy
 800ac4c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800ac4e:	bf00      	nop
 800ac50:	e7fe      	b.n	800ac50 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ac52:	f000 fecb 	bl	800b9ec <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 800ac5a:	f3ef 8211 	mrs	r2, BASEPRI
 800ac5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac62:	f383 8811 	msr	BASEPRI, r3
 800ac66:	f3bf 8f6f 	isb	sy
 800ac6a:	f3bf 8f4f 	dsb	sy
 800ac6e:	627a      	str	r2, [r7, #36]	; 0x24
 800ac70:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 800ac72:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ac74:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 800ac76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d006      	beq.n	800ac8a <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800ac7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac7e:	68ba      	ldr	r2, [r7, #8]
 800ac80:	3214      	adds	r2, #20
 800ac82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ac86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac88:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800ac8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	4413      	add	r3, r2
 800ac90:	3354      	adds	r3, #84	; 0x54
 800ac92:	781b      	ldrb	r3, [r3, #0]
 800ac94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800ac98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	4413      	add	r3, r2
 800ac9e:	3354      	adds	r3, #84	; 0x54
 800aca0:	2202      	movs	r2, #2
 800aca2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800aca4:	78fb      	ldrb	r3, [r7, #3]
 800aca6:	2b04      	cmp	r3, #4
 800aca8:	d83b      	bhi.n	800ad22 <xTaskGenericNotifyFromISR+0x11a>
 800acaa:	a201      	add	r2, pc, #4	; (adr r2, 800acb0 <xTaskGenericNotifyFromISR+0xa8>)
 800acac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acb0:	0800ad41 	.word	0x0800ad41
 800acb4:	0800acc5 	.word	0x0800acc5
 800acb8:	0800ace1 	.word	0x0800ace1
 800acbc:	0800acf9 	.word	0x0800acf9
 800acc0:	0800ad07 	.word	0x0800ad07
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800acc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc6:	68ba      	ldr	r2, [r7, #8]
 800acc8:	3214      	adds	r2, #20
 800acca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	ea42 0103 	orr.w	r1, r2, r3
 800acd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acd6:	68ba      	ldr	r2, [r7, #8]
 800acd8:	3214      	adds	r2, #20
 800acda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800acde:	e032      	b.n	800ad46 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800ace0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace2:	68ba      	ldr	r2, [r7, #8]
 800ace4:	3214      	adds	r2, #20
 800ace6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acea:	1c59      	adds	r1, r3, #1
 800acec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acee:	68ba      	ldr	r2, [r7, #8]
 800acf0:	3214      	adds	r2, #20
 800acf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800acf6:	e026      	b.n	800ad46 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800acf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acfa:	68ba      	ldr	r2, [r7, #8]
 800acfc:	3214      	adds	r2, #20
 800acfe:	6879      	ldr	r1, [r7, #4]
 800ad00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800ad04:	e01f      	b.n	800ad46 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ad06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ad0a:	2b02      	cmp	r3, #2
 800ad0c:	d006      	beq.n	800ad1c <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800ad0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad10:	68ba      	ldr	r2, [r7, #8]
 800ad12:	3214      	adds	r2, #20
 800ad14:	6879      	ldr	r1, [r7, #4]
 800ad16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800ad1a:	e014      	b.n	800ad46 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 800ad20:	e011      	b.n	800ad46 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800ad22:	4b3d      	ldr	r3, [pc, #244]	; (800ae18 <xTaskGenericNotifyFromISR+0x210>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d00c      	beq.n	800ad44 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 800ad2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad2e:	f383 8811 	msr	BASEPRI, r3
 800ad32:	f3bf 8f6f 	isb	sy
 800ad36:	f3bf 8f4f 	dsb	sy
 800ad3a:	61fb      	str	r3, [r7, #28]
    }
 800ad3c:	bf00      	nop
 800ad3e:	e7fe      	b.n	800ad3e <xTaskGenericNotifyFromISR+0x136>
                    break;
 800ad40:	bf00      	nop
 800ad42:	e000      	b.n	800ad46 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 800ad44:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 800ad46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f002 fce9 	bl	800d720 <SEGGER_SYSVIEW_ShrinkId>
 800ad4e:	78f9      	ldrb	r1, [r7, #3]
 800ad50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ad54:	9201      	str	r2, [sp, #4]
 800ad56:	9300      	str	r3, [sp, #0]
 800ad58:	460b      	mov	r3, r1
 800ad5a:	687a      	ldr	r2, [r7, #4]
 800ad5c:	4601      	mov	r1, r0
 800ad5e:	203f      	movs	r0, #63	; 0x3f
 800ad60:	f001 ffac 	bl	800ccbc <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ad64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	d149      	bne.n	800ae00 <xTaskGenericNotifyFromISR+0x1f8>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ad6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d00a      	beq.n	800ad8a <xTaskGenericNotifyFromISR+0x182>
        __asm volatile
 800ad74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad78:	f383 8811 	msr	BASEPRI, r3
 800ad7c:	f3bf 8f6f 	isb	sy
 800ad80:	f3bf 8f4f 	dsb	sy
 800ad84:	61bb      	str	r3, [r7, #24]
    }
 800ad86:	bf00      	nop
 800ad88:	e7fe      	b.n	800ad88 <xTaskGenericNotifyFromISR+0x180>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad8a:	4b24      	ldr	r3, [pc, #144]	; (800ae1c <xTaskGenericNotifyFromISR+0x214>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d120      	bne.n	800add4 <xTaskGenericNotifyFromISR+0x1cc>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad94:	3304      	adds	r3, #4
 800ad96:	4618      	mov	r0, r3
 800ad98:	f7fd fdc4 	bl	8008924 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800ad9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f002 fc1c 	bl	800d5dc <SEGGER_SYSVIEW_OnTaskStartReady>
 800ada4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ada6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ada8:	2201      	movs	r2, #1
 800adaa:	409a      	lsls	r2, r3
 800adac:	4b1c      	ldr	r3, [pc, #112]	; (800ae20 <xTaskGenericNotifyFromISR+0x218>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4313      	orrs	r3, r2
 800adb2:	4a1b      	ldr	r2, [pc, #108]	; (800ae20 <xTaskGenericNotifyFromISR+0x218>)
 800adb4:	6013      	str	r3, [r2, #0]
 800adb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adba:	4613      	mov	r3, r2
 800adbc:	009b      	lsls	r3, r3, #2
 800adbe:	4413      	add	r3, r2
 800adc0:	009b      	lsls	r3, r3, #2
 800adc2:	4a18      	ldr	r2, [pc, #96]	; (800ae24 <xTaskGenericNotifyFromISR+0x21c>)
 800adc4:	441a      	add	r2, r3
 800adc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc8:	3304      	adds	r3, #4
 800adca:	4619      	mov	r1, r3
 800adcc:	4610      	mov	r0, r2
 800adce:	f7fd fd4c 	bl	800886a <vListInsertEnd>
 800add2:	e005      	b.n	800ade0 <xTaskGenericNotifyFromISR+0x1d8>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800add4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add6:	3318      	adds	r3, #24
 800add8:	4619      	mov	r1, r3
 800adda:	4813      	ldr	r0, [pc, #76]	; (800ae28 <xTaskGenericNotifyFromISR+0x220>)
 800addc:	f7fd fd45 	bl	800886a <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ade0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ade4:	4b11      	ldr	r3, [pc, #68]	; (800ae2c <xTaskGenericNotifyFromISR+0x224>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adea:	429a      	cmp	r2, r3
 800adec:	d908      	bls.n	800ae00 <xTaskGenericNotifyFromISR+0x1f8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800adee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d002      	beq.n	800adfa <xTaskGenericNotifyFromISR+0x1f2>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800adf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adf6:	2201      	movs	r2, #1
 800adf8:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800adfa:	4b0d      	ldr	r3, [pc, #52]	; (800ae30 <xTaskGenericNotifyFromISR+0x228>)
 800adfc:	2201      	movs	r2, #1
 800adfe:	601a      	str	r2, [r3, #0]
 800ae00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae02:	617b      	str	r3, [r7, #20]
        __asm volatile
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	f383 8811 	msr	BASEPRI, r3
    }
 800ae0a:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800ae0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3740      	adds	r7, #64	; 0x40
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	200026e8 	.word	0x200026e8
 800ae1c:	2000270c 	.word	0x2000270c
 800ae20:	200026ec 	.word	0x200026ec
 800ae24:	20002610 	.word	0x20002610
 800ae28:	200026a4 	.word	0x200026a4
 800ae2c:	2000260c 	.word	0x2000260c
 800ae30:	200026f8 	.word	0x200026f8

0800ae34 <xTaskGenericNotifyStateClear>:

#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    BaseType_t xTaskGenericNotifyStateClear( TaskHandle_t xTask,
                                             UBaseType_t uxIndexToClear )
    {
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b086      	sub	sp, #24
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        BaseType_t xReturn;

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d00a      	beq.n	800ae5a <xTaskGenericNotifyStateClear+0x26>
        __asm volatile
 800ae44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae48:	f383 8811 	msr	BASEPRI, r3
 800ae4c:	f3bf 8f6f 	isb	sy
 800ae50:	f3bf 8f4f 	dsb	sy
 800ae54:	60fb      	str	r3, [r7, #12]
    }
 800ae56:	bf00      	nop
 800ae58:	e7fe      	b.n	800ae58 <xTaskGenericNotifyStateClear+0x24>

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d102      	bne.n	800ae66 <xTaskGenericNotifyStateClear+0x32>
 800ae60:	4b10      	ldr	r3, [pc, #64]	; (800aea4 <xTaskGenericNotifyStateClear+0x70>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	e000      	b.n	800ae68 <xTaskGenericNotifyStateClear+0x34>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	613b      	str	r3, [r7, #16]

        taskENTER_CRITICAL();
 800ae6a:	f000 fcd5 	bl	800b818 <vPortEnterCritical>
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
 800ae6e:	693a      	ldr	r2, [r7, #16]
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	4413      	add	r3, r2
 800ae74:	3354      	adds	r3, #84	; 0x54
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	b2db      	uxtb	r3, r3
 800ae7a:	2b02      	cmp	r3, #2
 800ae7c:	d108      	bne.n	800ae90 <xTaskGenericNotifyStateClear+0x5c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
 800ae7e:	693a      	ldr	r2, [r7, #16]
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	4413      	add	r3, r2
 800ae84:	3354      	adds	r3, #84	; 0x54
 800ae86:	2200      	movs	r2, #0
 800ae88:	701a      	strb	r2, [r3, #0]
                xReturn = pdPASS;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	617b      	str	r3, [r7, #20]
 800ae8e:	e001      	b.n	800ae94 <xTaskGenericNotifyStateClear+0x60>
            }
            else
            {
                xReturn = pdFAIL;
 800ae90:	2300      	movs	r3, #0
 800ae92:	617b      	str	r3, [r7, #20]
            }
        }
        taskEXIT_CRITICAL();
 800ae94:	f000 fcf0 	bl	800b878 <vPortExitCritical>

        return xReturn;
 800ae98:	697b      	ldr	r3, [r7, #20]
    }
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3718      	adds	r7, #24
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	2000260c 	.word	0x2000260c

0800aea8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800aeb2:	4b32      	ldr	r3, [pc, #200]	; (800af7c <prvAddCurrentTaskToDelayedList+0xd4>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aeb8:	4b31      	ldr	r3, [pc, #196]	; (800af80 <prvAddCurrentTaskToDelayedList+0xd8>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	3304      	adds	r3, #4
 800aebe:	4618      	mov	r0, r3
 800aec0:	f7fd fd30 	bl	8008924 <uxListRemove>
 800aec4:	4603      	mov	r3, r0
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d10b      	bne.n	800aee2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800aeca:	4b2d      	ldr	r3, [pc, #180]	; (800af80 <prvAddCurrentTaskToDelayedList+0xd8>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aed0:	2201      	movs	r2, #1
 800aed2:	fa02 f303 	lsl.w	r3, r2, r3
 800aed6:	43da      	mvns	r2, r3
 800aed8:	4b2a      	ldr	r3, [pc, #168]	; (800af84 <prvAddCurrentTaskToDelayedList+0xdc>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	4013      	ands	r3, r2
 800aede:	4a29      	ldr	r2, [pc, #164]	; (800af84 <prvAddCurrentTaskToDelayedList+0xdc>)
 800aee0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aee8:	d110      	bne.n	800af0c <prvAddCurrentTaskToDelayedList+0x64>
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d00d      	beq.n	800af0c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800aef0:	4b23      	ldr	r3, [pc, #140]	; (800af80 <prvAddCurrentTaskToDelayedList+0xd8>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	211b      	movs	r1, #27
 800aef6:	4618      	mov	r0, r3
 800aef8:	f002 fbb2 	bl	800d660 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aefc:	4b20      	ldr	r3, [pc, #128]	; (800af80 <prvAddCurrentTaskToDelayedList+0xd8>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	3304      	adds	r3, #4
 800af02:	4619      	mov	r1, r3
 800af04:	4820      	ldr	r0, [pc, #128]	; (800af88 <prvAddCurrentTaskToDelayedList+0xe0>)
 800af06:	f7fd fcb0 	bl	800886a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800af0a:	e032      	b.n	800af72 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800af0c:	68fa      	ldr	r2, [r7, #12]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	4413      	add	r3, r2
 800af12:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800af14:	4b1a      	ldr	r3, [pc, #104]	; (800af80 <prvAddCurrentTaskToDelayedList+0xd8>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	68ba      	ldr	r2, [r7, #8]
 800af1a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800af1c:	68ba      	ldr	r2, [r7, #8]
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	429a      	cmp	r2, r3
 800af22:	d20f      	bcs.n	800af44 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800af24:	4b16      	ldr	r3, [pc, #88]	; (800af80 <prvAddCurrentTaskToDelayedList+0xd8>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	2104      	movs	r1, #4
 800af2a:	4618      	mov	r0, r3
 800af2c:	f002 fb98 	bl	800d660 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af30:	4b16      	ldr	r3, [pc, #88]	; (800af8c <prvAddCurrentTaskToDelayedList+0xe4>)
 800af32:	681a      	ldr	r2, [r3, #0]
 800af34:	4b12      	ldr	r3, [pc, #72]	; (800af80 <prvAddCurrentTaskToDelayedList+0xd8>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	3304      	adds	r3, #4
 800af3a:	4619      	mov	r1, r3
 800af3c:	4610      	mov	r0, r2
 800af3e:	f7fd fcb8 	bl	80088b2 <vListInsert>
}
 800af42:	e016      	b.n	800af72 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 800af44:	4b0e      	ldr	r3, [pc, #56]	; (800af80 <prvAddCurrentTaskToDelayedList+0xd8>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	2104      	movs	r1, #4
 800af4a:	4618      	mov	r0, r3
 800af4c:	f002 fb88 	bl	800d660 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af50:	4b0f      	ldr	r3, [pc, #60]	; (800af90 <prvAddCurrentTaskToDelayedList+0xe8>)
 800af52:	681a      	ldr	r2, [r3, #0]
 800af54:	4b0a      	ldr	r3, [pc, #40]	; (800af80 <prvAddCurrentTaskToDelayedList+0xd8>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	3304      	adds	r3, #4
 800af5a:	4619      	mov	r1, r3
 800af5c:	4610      	mov	r0, r2
 800af5e:	f7fd fca8 	bl	80088b2 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800af62:	4b0c      	ldr	r3, [pc, #48]	; (800af94 <prvAddCurrentTaskToDelayedList+0xec>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	68ba      	ldr	r2, [r7, #8]
 800af68:	429a      	cmp	r2, r3
 800af6a:	d202      	bcs.n	800af72 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 800af6c:	4a09      	ldr	r2, [pc, #36]	; (800af94 <prvAddCurrentTaskToDelayedList+0xec>)
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	6013      	str	r3, [r2, #0]
}
 800af72:	bf00      	nop
 800af74:	3710      	adds	r7, #16
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop
 800af7c:	200026e8 	.word	0x200026e8
 800af80:	2000260c 	.word	0x2000260c
 800af84:	200026ec 	.word	0x200026ec
 800af88:	200026d0 	.word	0x200026d0
 800af8c:	200026a0 	.word	0x200026a0
 800af90:	2000269c 	.word	0x2000269c
 800af94:	20002704 	.word	0x20002704

0800af98 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800af9e:	2300      	movs	r3, #0
 800afa0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800afa2:	f000 fad5 	bl	800b550 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800afa6:	4b11      	ldr	r3, [pc, #68]	; (800afec <xTimerCreateTimerTask+0x54>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d00b      	beq.n	800afc6 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800afae:	4b10      	ldr	r3, [pc, #64]	; (800aff0 <xTimerCreateTimerTask+0x58>)
 800afb0:	9301      	str	r3, [sp, #4]
 800afb2:	2302      	movs	r3, #2
 800afb4:	9300      	str	r3, [sp, #0]
 800afb6:	2300      	movs	r3, #0
 800afb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 800afbc:	490d      	ldr	r1, [pc, #52]	; (800aff4 <xTimerCreateTimerTask+0x5c>)
 800afbe:	480e      	ldr	r0, [pc, #56]	; (800aff8 <xTimerCreateTimerTask+0x60>)
 800afc0:	f7fe fdd5 	bl	8009b6e <xTaskCreate>
 800afc4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d10a      	bne.n	800afe2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800afcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd0:	f383 8811 	msr	BASEPRI, r3
 800afd4:	f3bf 8f6f 	isb	sy
 800afd8:	f3bf 8f4f 	dsb	sy
 800afdc:	603b      	str	r3, [r7, #0]
    }
 800afde:	bf00      	nop
 800afe0:	e7fe      	b.n	800afe0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800afe2:	687b      	ldr	r3, [r7, #4]
    }
 800afe4:	4618      	mov	r0, r3
 800afe6:	3708      	adds	r7, #8
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}
 800afec:	20002740 	.word	0x20002740
 800aff0:	20002744 	.word	0x20002744
 800aff4:	0800df78 	.word	0x0800df78
 800aff8:	0800b131 	.word	0x0800b131

0800affc <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800affc:	b580      	push	{r7, lr}
 800affe:	b08a      	sub	sp, #40	; 0x28
 800b000:	af00      	add	r7, sp, #0
 800b002:	60f8      	str	r0, [r7, #12]
 800b004:	60b9      	str	r1, [r7, #8]
 800b006:	607a      	str	r2, [r7, #4]
 800b008:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800b00a:	2300      	movs	r3, #0
 800b00c:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d10a      	bne.n	800b02a <xTimerGenericCommand+0x2e>
        __asm volatile
 800b014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b018:	f383 8811 	msr	BASEPRI, r3
 800b01c:	f3bf 8f6f 	isb	sy
 800b020:	f3bf 8f4f 	dsb	sy
 800b024:	623b      	str	r3, [r7, #32]
    }
 800b026:	bf00      	nop
 800b028:	e7fe      	b.n	800b028 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800b02a:	4b1a      	ldr	r3, [pc, #104]	; (800b094 <xTimerGenericCommand+0x98>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d02a      	beq.n	800b088 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	2b05      	cmp	r3, #5
 800b042:	dc18      	bgt.n	800b076 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b044:	f7ff fb6a 	bl	800a71c <xTaskGetSchedulerState>
 800b048:	4603      	mov	r3, r0
 800b04a:	2b02      	cmp	r3, #2
 800b04c:	d109      	bne.n	800b062 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b04e:	4b11      	ldr	r3, [pc, #68]	; (800b094 <xTimerGenericCommand+0x98>)
 800b050:	6818      	ldr	r0, [r3, #0]
 800b052:	f107 0114 	add.w	r1, r7, #20
 800b056:	2300      	movs	r3, #0
 800b058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b05a:	f7fd fd71 	bl	8008b40 <xQueueGenericSend>
 800b05e:	6278      	str	r0, [r7, #36]	; 0x24
 800b060:	e012      	b.n	800b088 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b062:	4b0c      	ldr	r3, [pc, #48]	; (800b094 <xTimerGenericCommand+0x98>)
 800b064:	6818      	ldr	r0, [r3, #0]
 800b066:	f107 0114 	add.w	r1, r7, #20
 800b06a:	2300      	movs	r3, #0
 800b06c:	2200      	movs	r2, #0
 800b06e:	f7fd fd67 	bl	8008b40 <xQueueGenericSend>
 800b072:	6278      	str	r0, [r7, #36]	; 0x24
 800b074:	e008      	b.n	800b088 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b076:	4b07      	ldr	r3, [pc, #28]	; (800b094 <xTimerGenericCommand+0x98>)
 800b078:	6818      	ldr	r0, [r3, #0]
 800b07a:	f107 0114 	add.w	r1, r7, #20
 800b07e:	2300      	movs	r3, #0
 800b080:	683a      	ldr	r2, [r7, #0]
 800b082:	f7fd fe6b 	bl	8008d5c <xQueueGenericSendFromISR>
 800b086:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800b088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800b08a:	4618      	mov	r0, r3
 800b08c:	3728      	adds	r7, #40	; 0x28
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
 800b092:	bf00      	nop
 800b094:	20002740 	.word	0x20002740

0800b098 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800b098:	b580      	push	{r7, lr}
 800b09a:	b088      	sub	sp, #32
 800b09c:	af02      	add	r7, sp, #8
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0a2:	4b22      	ldr	r3, [pc, #136]	; (800b12c <prvProcessExpiredTimer+0x94>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	68db      	ldr	r3, [r3, #12]
 800b0a8:	68db      	ldr	r3, [r3, #12]
 800b0aa:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	3304      	adds	r3, #4
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f7fd fc37 	bl	8008924 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0bc:	f003 0304 	and.w	r3, r3, #4
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d022      	beq.n	800b10a <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	699a      	ldr	r2, [r3, #24]
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	18d1      	adds	r1, r2, r3
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	683a      	ldr	r2, [r7, #0]
 800b0d0:	6978      	ldr	r0, [r7, #20]
 800b0d2:	f000 f8d1 	bl	800b278 <prvInsertTimerInActiveList>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d01f      	beq.n	800b11c <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b0dc:	2300      	movs	r3, #0
 800b0de:	9300      	str	r3, [sp, #0]
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	687a      	ldr	r2, [r7, #4]
 800b0e4:	2100      	movs	r1, #0
 800b0e6:	6978      	ldr	r0, [r7, #20]
 800b0e8:	f7ff ff88 	bl	800affc <xTimerGenericCommand>
 800b0ec:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d113      	bne.n	800b11c <prvProcessExpiredTimer+0x84>
        __asm volatile
 800b0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f8:	f383 8811 	msr	BASEPRI, r3
 800b0fc:	f3bf 8f6f 	isb	sy
 800b100:	f3bf 8f4f 	dsb	sy
 800b104:	60fb      	str	r3, [r7, #12]
    }
 800b106:	bf00      	nop
 800b108:	e7fe      	b.n	800b108 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b110:	f023 0301 	bic.w	r3, r3, #1
 800b114:	b2da      	uxtb	r2, r3
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	6a1b      	ldr	r3, [r3, #32]
 800b120:	6978      	ldr	r0, [r7, #20]
 800b122:	4798      	blx	r3
    }
 800b124:	bf00      	nop
 800b126:	3718      	adds	r7, #24
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}
 800b12c:	20002738 	.word	0x20002738

0800b130 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800b130:	b580      	push	{r7, lr}
 800b132:	b084      	sub	sp, #16
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b138:	f107 0308 	add.w	r3, r7, #8
 800b13c:	4618      	mov	r0, r3
 800b13e:	f000 f857 	bl	800b1f0 <prvGetNextExpireTime>
 800b142:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	4619      	mov	r1, r3
 800b148:	68f8      	ldr	r0, [r7, #12]
 800b14a:	f000 f803 	bl	800b154 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800b14e:	f000 f8d5 	bl	800b2fc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b152:	e7f1      	b.n	800b138 <prvTimerTask+0x8>

0800b154 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800b154:	b580      	push	{r7, lr}
 800b156:	b084      	sub	sp, #16
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800b15e:	f7fe fef5 	bl	8009f4c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b162:	f107 0308 	add.w	r3, r7, #8
 800b166:	4618      	mov	r0, r3
 800b168:	f000 f866 	bl	800b238 <prvSampleTimeNow>
 800b16c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d130      	bne.n	800b1d6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d10a      	bne.n	800b190 <prvProcessTimerOrBlockTask+0x3c>
 800b17a:	687a      	ldr	r2, [r7, #4]
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	429a      	cmp	r2, r3
 800b180:	d806      	bhi.n	800b190 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800b182:	f7fe fef1 	bl	8009f68 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b186:	68f9      	ldr	r1, [r7, #12]
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f7ff ff85 	bl	800b098 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800b18e:	e024      	b.n	800b1da <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d008      	beq.n	800b1a8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b196:	4b13      	ldr	r3, [pc, #76]	; (800b1e4 <prvProcessTimerOrBlockTask+0x90>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d101      	bne.n	800b1a4 <prvProcessTimerOrBlockTask+0x50>
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	e000      	b.n	800b1a6 <prvProcessTimerOrBlockTask+0x52>
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b1a8:	4b0f      	ldr	r3, [pc, #60]	; (800b1e8 <prvProcessTimerOrBlockTask+0x94>)
 800b1aa:	6818      	ldr	r0, [r3, #0]
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	1ad3      	subs	r3, r2, r3
 800b1b2:	683a      	ldr	r2, [r7, #0]
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	f7fe f8d7 	bl	8009368 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800b1ba:	f7fe fed5 	bl	8009f68 <xTaskResumeAll>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d10a      	bne.n	800b1da <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800b1c4:	4b09      	ldr	r3, [pc, #36]	; (800b1ec <prvProcessTimerOrBlockTask+0x98>)
 800b1c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1ca:	601a      	str	r2, [r3, #0]
 800b1cc:	f3bf 8f4f 	dsb	sy
 800b1d0:	f3bf 8f6f 	isb	sy
    }
 800b1d4:	e001      	b.n	800b1da <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800b1d6:	f7fe fec7 	bl	8009f68 <xTaskResumeAll>
    }
 800b1da:	bf00      	nop
 800b1dc:	3710      	adds	r7, #16
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	2000273c 	.word	0x2000273c
 800b1e8:	20002740 	.word	0x20002740
 800b1ec:	e000ed04 	.word	0xe000ed04

0800b1f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800b1f0:	b480      	push	{r7}
 800b1f2:	b085      	sub	sp, #20
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b1f8:	4b0e      	ldr	r3, [pc, #56]	; (800b234 <prvGetNextExpireTime+0x44>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d101      	bne.n	800b206 <prvGetNextExpireTime+0x16>
 800b202:	2201      	movs	r2, #1
 800b204:	e000      	b.n	800b208 <prvGetNextExpireTime+0x18>
 800b206:	2200      	movs	r2, #0
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d105      	bne.n	800b220 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b214:	4b07      	ldr	r3, [pc, #28]	; (800b234 <prvGetNextExpireTime+0x44>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	68db      	ldr	r3, [r3, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	60fb      	str	r3, [r7, #12]
 800b21e:	e001      	b.n	800b224 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800b220:	2300      	movs	r3, #0
 800b222:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800b224:	68fb      	ldr	r3, [r7, #12]
    }
 800b226:	4618      	mov	r0, r3
 800b228:	3714      	adds	r7, #20
 800b22a:	46bd      	mov	sp, r7
 800b22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b230:	4770      	bx	lr
 800b232:	bf00      	nop
 800b234:	20002738 	.word	0x20002738

0800b238 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800b238:	b580      	push	{r7, lr}
 800b23a:	b084      	sub	sp, #16
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800b240:	f7fe ff24 	bl	800a08c <xTaskGetTickCount>
 800b244:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800b246:	4b0b      	ldr	r3, [pc, #44]	; (800b274 <prvSampleTimeNow+0x3c>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	68fa      	ldr	r2, [r7, #12]
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d205      	bcs.n	800b25c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800b250:	f000 f91a 	bl	800b488 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2201      	movs	r2, #1
 800b258:	601a      	str	r2, [r3, #0]
 800b25a:	e002      	b.n	800b262 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2200      	movs	r2, #0
 800b260:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800b262:	4a04      	ldr	r2, [pc, #16]	; (800b274 <prvSampleTimeNow+0x3c>)
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800b268:	68fb      	ldr	r3, [r7, #12]
    }
 800b26a:	4618      	mov	r0, r3
 800b26c:	3710      	adds	r7, #16
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
 800b272:	bf00      	nop
 800b274:	20002748 	.word	0x20002748

0800b278 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800b278:	b580      	push	{r7, lr}
 800b27a:	b086      	sub	sp, #24
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	60f8      	str	r0, [r7, #12]
 800b280:	60b9      	str	r1, [r7, #8]
 800b282:	607a      	str	r2, [r7, #4]
 800b284:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800b286:	2300      	movs	r3, #0
 800b288:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	68ba      	ldr	r2, [r7, #8]
 800b28e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	68fa      	ldr	r2, [r7, #12]
 800b294:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800b296:	68ba      	ldr	r2, [r7, #8]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d812      	bhi.n	800b2c4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b29e:	687a      	ldr	r2, [r7, #4]
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	1ad2      	subs	r2, r2, r3
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	699b      	ldr	r3, [r3, #24]
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d302      	bcc.n	800b2b2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	617b      	str	r3, [r7, #20]
 800b2b0:	e01b      	b.n	800b2ea <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b2b2:	4b10      	ldr	r3, [pc, #64]	; (800b2f4 <prvInsertTimerInActiveList+0x7c>)
 800b2b4:	681a      	ldr	r2, [r3, #0]
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	3304      	adds	r3, #4
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	4610      	mov	r0, r2
 800b2be:	f7fd faf8 	bl	80088b2 <vListInsert>
 800b2c2:	e012      	b.n	800b2ea <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b2c4:	687a      	ldr	r2, [r7, #4]
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d206      	bcs.n	800b2da <prvInsertTimerInActiveList+0x62>
 800b2cc:	68ba      	ldr	r2, [r7, #8]
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d302      	bcc.n	800b2da <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	617b      	str	r3, [r7, #20]
 800b2d8:	e007      	b.n	800b2ea <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b2da:	4b07      	ldr	r3, [pc, #28]	; (800b2f8 <prvInsertTimerInActiveList+0x80>)
 800b2dc:	681a      	ldr	r2, [r3, #0]
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	3304      	adds	r3, #4
 800b2e2:	4619      	mov	r1, r3
 800b2e4:	4610      	mov	r0, r2
 800b2e6:	f7fd fae4 	bl	80088b2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800b2ea:	697b      	ldr	r3, [r7, #20]
    }
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3718      	adds	r7, #24
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}
 800b2f4:	2000273c 	.word	0x2000273c
 800b2f8:	20002738 	.word	0x20002738

0800b2fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b08c      	sub	sp, #48	; 0x30
 800b300:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b302:	e0ae      	b.n	800b462 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	2b00      	cmp	r3, #0
 800b308:	f2c0 80aa 	blt.w	800b460 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b312:	695b      	ldr	r3, [r3, #20]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d004      	beq.n	800b322 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b31a:	3304      	adds	r3, #4
 800b31c:	4618      	mov	r0, r3
 800b31e:	f7fd fb01 	bl	8008924 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b322:	1d3b      	adds	r3, r7, #4
 800b324:	4618      	mov	r0, r3
 800b326:	f7ff ff87 	bl	800b238 <prvSampleTimeNow>
 800b32a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	2b09      	cmp	r3, #9
 800b330:	f200 8097 	bhi.w	800b462 <prvProcessReceivedCommands+0x166>
 800b334:	a201      	add	r2, pc, #4	; (adr r2, 800b33c <prvProcessReceivedCommands+0x40>)
 800b336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b33a:	bf00      	nop
 800b33c:	0800b365 	.word	0x0800b365
 800b340:	0800b365 	.word	0x0800b365
 800b344:	0800b365 	.word	0x0800b365
 800b348:	0800b3d9 	.word	0x0800b3d9
 800b34c:	0800b3ed 	.word	0x0800b3ed
 800b350:	0800b437 	.word	0x0800b437
 800b354:	0800b365 	.word	0x0800b365
 800b358:	0800b365 	.word	0x0800b365
 800b35c:	0800b3d9 	.word	0x0800b3d9
 800b360:	0800b3ed 	.word	0x0800b3ed
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b366:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b36a:	f043 0301 	orr.w	r3, r3, #1
 800b36e:	b2da      	uxtb	r2, r3
 800b370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b372:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b376:	68fa      	ldr	r2, [r7, #12]
 800b378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b37a:	699b      	ldr	r3, [r3, #24]
 800b37c:	18d1      	adds	r1, r2, r3
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	6a3a      	ldr	r2, [r7, #32]
 800b382:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b384:	f7ff ff78 	bl	800b278 <prvInsertTimerInActiveList>
 800b388:	4603      	mov	r3, r0
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d069      	beq.n	800b462 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b390:	6a1b      	ldr	r3, [r3, #32]
 800b392:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b394:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b398:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b39c:	f003 0304 	and.w	r3, r3, #4
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d05e      	beq.n	800b462 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b3a4:	68fa      	ldr	r2, [r7, #12]
 800b3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a8:	699b      	ldr	r3, [r3, #24]
 800b3aa:	441a      	add	r2, r3
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	9300      	str	r3, [sp, #0]
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	2100      	movs	r1, #0
 800b3b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b3b6:	f7ff fe21 	bl	800affc <xTimerGenericCommand>
 800b3ba:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 800b3bc:	69fb      	ldr	r3, [r7, #28]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d14f      	bne.n	800b462 <prvProcessReceivedCommands+0x166>
        __asm volatile
 800b3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c6:	f383 8811 	msr	BASEPRI, r3
 800b3ca:	f3bf 8f6f 	isb	sy
 800b3ce:	f3bf 8f4f 	dsb	sy
 800b3d2:	61bb      	str	r3, [r7, #24]
    }
 800b3d4:	bf00      	nop
 800b3d6:	e7fe      	b.n	800b3d6 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b3de:	f023 0301 	bic.w	r3, r3, #1
 800b3e2:	b2da      	uxtb	r2, r3
 800b3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800b3ea:	e03a      	b.n	800b462 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b3f2:	f043 0301 	orr.w	r3, r3, #1
 800b3f6:	b2da      	uxtb	r2, r3
 800b3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b3fe:	68fa      	ldr	r2, [r7, #12]
 800b400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b402:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b406:	699b      	ldr	r3, [r3, #24]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d10a      	bne.n	800b422 <prvProcessReceivedCommands+0x126>
        __asm volatile
 800b40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b410:	f383 8811 	msr	BASEPRI, r3
 800b414:	f3bf 8f6f 	isb	sy
 800b418:	f3bf 8f4f 	dsb	sy
 800b41c:	617b      	str	r3, [r7, #20]
    }
 800b41e:	bf00      	nop
 800b420:	e7fe      	b.n	800b420 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b424:	699a      	ldr	r2, [r3, #24]
 800b426:	6a3b      	ldr	r3, [r7, #32]
 800b428:	18d1      	adds	r1, r2, r3
 800b42a:	6a3b      	ldr	r3, [r7, #32]
 800b42c:	6a3a      	ldr	r2, [r7, #32]
 800b42e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b430:	f7ff ff22 	bl	800b278 <prvInsertTimerInActiveList>
                        break;
 800b434:	e015      	b.n	800b462 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b438:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b43c:	f003 0302 	and.w	r3, r3, #2
 800b440:	2b00      	cmp	r3, #0
 800b442:	d103      	bne.n	800b44c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 800b444:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b446:	f000 fbf1 	bl	800bc2c <vPortFree>
 800b44a:	e00a      	b.n	800b462 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b44e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b452:	f023 0301 	bic.w	r3, r3, #1
 800b456:	b2da      	uxtb	r2, r3
 800b458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800b45e:	e000      	b.n	800b462 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800b460:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b462:	4b08      	ldr	r3, [pc, #32]	; (800b484 <prvProcessReceivedCommands+0x188>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f107 0108 	add.w	r1, r7, #8
 800b46a:	2200      	movs	r2, #0
 800b46c:	4618      	mov	r0, r3
 800b46e:	f7fd fd33 	bl	8008ed8 <xQueueReceive>
 800b472:	4603      	mov	r3, r0
 800b474:	2b00      	cmp	r3, #0
 800b476:	f47f af45 	bne.w	800b304 <prvProcessReceivedCommands+0x8>
        }
    }
 800b47a:	bf00      	nop
 800b47c:	bf00      	nop
 800b47e:	3728      	adds	r7, #40	; 0x28
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}
 800b484:	20002740 	.word	0x20002740

0800b488 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800b488:	b580      	push	{r7, lr}
 800b48a:	b088      	sub	sp, #32
 800b48c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b48e:	e048      	b.n	800b522 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b490:	4b2d      	ldr	r3, [pc, #180]	; (800b548 <prvSwitchTimerLists+0xc0>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	68db      	ldr	r3, [r3, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b49a:	4b2b      	ldr	r3, [pc, #172]	; (800b548 <prvSwitchTimerLists+0xc0>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	68db      	ldr	r3, [r3, #12]
 800b4a0:	68db      	ldr	r3, [r3, #12]
 800b4a2:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	3304      	adds	r3, #4
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f7fd fa3b 	bl	8008924 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	6a1b      	ldr	r3, [r3, #32]
 800b4b2:	68f8      	ldr	r0, [r7, #12]
 800b4b4:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b4bc:	f003 0304 	and.w	r3, r3, #4
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d02e      	beq.n	800b522 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	699b      	ldr	r3, [r3, #24]
 800b4c8:	693a      	ldr	r2, [r7, #16]
 800b4ca:	4413      	add	r3, r2
 800b4cc:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800b4ce:	68ba      	ldr	r2, [r7, #8]
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	d90e      	bls.n	800b4f4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	68ba      	ldr	r2, [r7, #8]
 800b4da:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	68fa      	ldr	r2, [r7, #12]
 800b4e0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b4e2:	4b19      	ldr	r3, [pc, #100]	; (800b548 <prvSwitchTimerLists+0xc0>)
 800b4e4:	681a      	ldr	r2, [r3, #0]
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	3304      	adds	r3, #4
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	4610      	mov	r0, r2
 800b4ee:	f7fd f9e0 	bl	80088b2 <vListInsert>
 800b4f2:	e016      	b.n	800b522 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	9300      	str	r3, [sp, #0]
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	693a      	ldr	r2, [r7, #16]
 800b4fc:	2100      	movs	r1, #0
 800b4fe:	68f8      	ldr	r0, [r7, #12]
 800b500:	f7ff fd7c 	bl	800affc <xTimerGenericCommand>
 800b504:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d10a      	bne.n	800b522 <prvSwitchTimerLists+0x9a>
        __asm volatile
 800b50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b510:	f383 8811 	msr	BASEPRI, r3
 800b514:	f3bf 8f6f 	isb	sy
 800b518:	f3bf 8f4f 	dsb	sy
 800b51c:	603b      	str	r3, [r7, #0]
    }
 800b51e:	bf00      	nop
 800b520:	e7fe      	b.n	800b520 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b522:	4b09      	ldr	r3, [pc, #36]	; (800b548 <prvSwitchTimerLists+0xc0>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d1b1      	bne.n	800b490 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800b52c:	4b06      	ldr	r3, [pc, #24]	; (800b548 <prvSwitchTimerLists+0xc0>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800b532:	4b06      	ldr	r3, [pc, #24]	; (800b54c <prvSwitchTimerLists+0xc4>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	4a04      	ldr	r2, [pc, #16]	; (800b548 <prvSwitchTimerLists+0xc0>)
 800b538:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800b53a:	4a04      	ldr	r2, [pc, #16]	; (800b54c <prvSwitchTimerLists+0xc4>)
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	6013      	str	r3, [r2, #0]
    }
 800b540:	bf00      	nop
 800b542:	3718      	adds	r7, #24
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}
 800b548:	20002738 	.word	0x20002738
 800b54c:	2000273c 	.word	0x2000273c

0800b550 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800b550:	b580      	push	{r7, lr}
 800b552:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800b554:	f000 f960 	bl	800b818 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800b558:	4b12      	ldr	r3, [pc, #72]	; (800b5a4 <prvCheckForValidListAndQueue+0x54>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d11d      	bne.n	800b59c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800b560:	4811      	ldr	r0, [pc, #68]	; (800b5a8 <prvCheckForValidListAndQueue+0x58>)
 800b562:	f7fd f955 	bl	8008810 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800b566:	4811      	ldr	r0, [pc, #68]	; (800b5ac <prvCheckForValidListAndQueue+0x5c>)
 800b568:	f7fd f952 	bl	8008810 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800b56c:	4b10      	ldr	r3, [pc, #64]	; (800b5b0 <prvCheckForValidListAndQueue+0x60>)
 800b56e:	4a0e      	ldr	r2, [pc, #56]	; (800b5a8 <prvCheckForValidListAndQueue+0x58>)
 800b570:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800b572:	4b10      	ldr	r3, [pc, #64]	; (800b5b4 <prvCheckForValidListAndQueue+0x64>)
 800b574:	4a0d      	ldr	r2, [pc, #52]	; (800b5ac <prvCheckForValidListAndQueue+0x5c>)
 800b576:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800b578:	2200      	movs	r2, #0
 800b57a:	210c      	movs	r1, #12
 800b57c:	200a      	movs	r0, #10
 800b57e:	f7fd fa56 	bl	8008a2e <xQueueGenericCreate>
 800b582:	4603      	mov	r3, r0
 800b584:	4a07      	ldr	r2, [pc, #28]	; (800b5a4 <prvCheckForValidListAndQueue+0x54>)
 800b586:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800b588:	4b06      	ldr	r3, [pc, #24]	; (800b5a4 <prvCheckForValidListAndQueue+0x54>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d005      	beq.n	800b59c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b590:	4b04      	ldr	r3, [pc, #16]	; (800b5a4 <prvCheckForValidListAndQueue+0x54>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4908      	ldr	r1, [pc, #32]	; (800b5b8 <prvCheckForValidListAndQueue+0x68>)
 800b596:	4618      	mov	r0, r3
 800b598:	f7fd feb4 	bl	8009304 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800b59c:	f000 f96c 	bl	800b878 <vPortExitCritical>
    }
 800b5a0:	bf00      	nop
 800b5a2:	bd80      	pop	{r7, pc}
 800b5a4:	20002740 	.word	0x20002740
 800b5a8:	20002710 	.word	0x20002710
 800b5ac:	20002724 	.word	0x20002724
 800b5b0:	20002738 	.word	0x20002738
 800b5b4:	2000273c 	.word	0x2000273c
 800b5b8:	0800df80 	.word	0x0800df80

0800b5bc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b085      	sub	sp, #20
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	60f8      	str	r0, [r7, #12]
 800b5c4:	60b9      	str	r1, [r7, #8]
 800b5c6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	3b04      	subs	r3, #4
 800b5cc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b5d4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	3b04      	subs	r3, #4
 800b5da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	f023 0201 	bic.w	r2, r3, #1
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	3b04      	subs	r3, #4
 800b5ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800b5ec:	4a0c      	ldr	r2, [pc, #48]	; (800b620 <pxPortInitialiseStack+0x64>)
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	3b14      	subs	r3, #20
 800b5f6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800b5f8:	687a      	ldr	r2, [r7, #4]
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	3b04      	subs	r3, #4
 800b602:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	f06f 0202 	mvn.w	r2, #2
 800b60a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	3b20      	subs	r3, #32
 800b610:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800b612:	68fb      	ldr	r3, [r7, #12]
}
 800b614:	4618      	mov	r0, r3
 800b616:	3714      	adds	r7, #20
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr
 800b620:	0800b625 	.word	0x0800b625

0800b624 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b624:	b480      	push	{r7}
 800b626:	b085      	sub	sp, #20
 800b628:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800b62a:	2300      	movs	r3, #0
 800b62c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800b62e:	4b12      	ldr	r3, [pc, #72]	; (800b678 <prvTaskExitError+0x54>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b636:	d00a      	beq.n	800b64e <prvTaskExitError+0x2a>
        __asm volatile
 800b638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b63c:	f383 8811 	msr	BASEPRI, r3
 800b640:	f3bf 8f6f 	isb	sy
 800b644:	f3bf 8f4f 	dsb	sy
 800b648:	60fb      	str	r3, [r7, #12]
    }
 800b64a:	bf00      	nop
 800b64c:	e7fe      	b.n	800b64c <prvTaskExitError+0x28>
        __asm volatile
 800b64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b652:	f383 8811 	msr	BASEPRI, r3
 800b656:	f3bf 8f6f 	isb	sy
 800b65a:	f3bf 8f4f 	dsb	sy
 800b65e:	60bb      	str	r3, [r7, #8]
    }
 800b660:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800b662:	bf00      	nop
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d0fc      	beq.n	800b664 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800b66a:	bf00      	nop
 800b66c:	bf00      	nop
 800b66e:	3714      	adds	r7, #20
 800b670:	46bd      	mov	sp, r7
 800b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b676:	4770      	bx	lr
 800b678:	20000100 	.word	0x20000100
 800b67c:	00000000 	.word	0x00000000

0800b680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800b680:	4b07      	ldr	r3, [pc, #28]	; (800b6a0 <pxCurrentTCBConst2>)
 800b682:	6819      	ldr	r1, [r3, #0]
 800b684:	6808      	ldr	r0, [r1, #0]
 800b686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b68a:	f380 8809 	msr	PSP, r0
 800b68e:	f3bf 8f6f 	isb	sy
 800b692:	f04f 0000 	mov.w	r0, #0
 800b696:	f380 8811 	msr	BASEPRI, r0
 800b69a:	4770      	bx	lr
 800b69c:	f3af 8000 	nop.w

0800b6a0 <pxCurrentTCBConst2>:
 800b6a0:	2000260c 	.word	0x2000260c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 800b6a4:	bf00      	nop
 800b6a6:	bf00      	nop

0800b6a8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800b6a8:	4808      	ldr	r0, [pc, #32]	; (800b6cc <prvPortStartFirstTask+0x24>)
 800b6aa:	6800      	ldr	r0, [r0, #0]
 800b6ac:	6800      	ldr	r0, [r0, #0]
 800b6ae:	f380 8808 	msr	MSP, r0
 800b6b2:	f04f 0000 	mov.w	r0, #0
 800b6b6:	f380 8814 	msr	CONTROL, r0
 800b6ba:	b662      	cpsie	i
 800b6bc:	b661      	cpsie	f
 800b6be:	f3bf 8f4f 	dsb	sy
 800b6c2:	f3bf 8f6f 	isb	sy
 800b6c6:	df00      	svc	0
 800b6c8:	bf00      	nop
 800b6ca:	0000      	.short	0x0000
 800b6cc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 800b6d0:	bf00      	nop
 800b6d2:	bf00      	nop

0800b6d4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b086      	sub	sp, #24
 800b6d8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b6da:	4b46      	ldr	r3, [pc, #280]	; (800b7f4 <xPortStartScheduler+0x120>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	4a46      	ldr	r2, [pc, #280]	; (800b7f8 <xPortStartScheduler+0x124>)
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d10a      	bne.n	800b6fa <xPortStartScheduler+0x26>
        __asm volatile
 800b6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e8:	f383 8811 	msr	BASEPRI, r3
 800b6ec:	f3bf 8f6f 	isb	sy
 800b6f0:	f3bf 8f4f 	dsb	sy
 800b6f4:	613b      	str	r3, [r7, #16]
    }
 800b6f6:	bf00      	nop
 800b6f8:	e7fe      	b.n	800b6f8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b6fa:	4b3e      	ldr	r3, [pc, #248]	; (800b7f4 <xPortStartScheduler+0x120>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	4a3f      	ldr	r2, [pc, #252]	; (800b7fc <xPortStartScheduler+0x128>)
 800b700:	4293      	cmp	r3, r2
 800b702:	d10a      	bne.n	800b71a <xPortStartScheduler+0x46>
        __asm volatile
 800b704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b708:	f383 8811 	msr	BASEPRI, r3
 800b70c:	f3bf 8f6f 	isb	sy
 800b710:	f3bf 8f4f 	dsb	sy
 800b714:	60fb      	str	r3, [r7, #12]
    }
 800b716:	bf00      	nop
 800b718:	e7fe      	b.n	800b718 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b71a:	4b39      	ldr	r3, [pc, #228]	; (800b800 <xPortStartScheduler+0x12c>)
 800b71c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	781b      	ldrb	r3, [r3, #0]
 800b722:	b2db      	uxtb	r3, r3
 800b724:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	22ff      	movs	r2, #255	; 0xff
 800b72a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	781b      	ldrb	r3, [r3, #0]
 800b730:	b2db      	uxtb	r3, r3
 800b732:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b734:	78fb      	ldrb	r3, [r7, #3]
 800b736:	b2db      	uxtb	r3, r3
 800b738:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b73c:	b2da      	uxtb	r2, r3
 800b73e:	4b31      	ldr	r3, [pc, #196]	; (800b804 <xPortStartScheduler+0x130>)
 800b740:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b742:	4b31      	ldr	r3, [pc, #196]	; (800b808 <xPortStartScheduler+0x134>)
 800b744:	2207      	movs	r2, #7
 800b746:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b748:	e009      	b.n	800b75e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800b74a:	4b2f      	ldr	r3, [pc, #188]	; (800b808 <xPortStartScheduler+0x134>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	3b01      	subs	r3, #1
 800b750:	4a2d      	ldr	r2, [pc, #180]	; (800b808 <xPortStartScheduler+0x134>)
 800b752:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b754:	78fb      	ldrb	r3, [r7, #3]
 800b756:	b2db      	uxtb	r3, r3
 800b758:	005b      	lsls	r3, r3, #1
 800b75a:	b2db      	uxtb	r3, r3
 800b75c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b75e:	78fb      	ldrb	r3, [r7, #3]
 800b760:	b2db      	uxtb	r3, r3
 800b762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b766:	2b80      	cmp	r3, #128	; 0x80
 800b768:	d0ef      	beq.n	800b74a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b76a:	4b27      	ldr	r3, [pc, #156]	; (800b808 <xPortStartScheduler+0x134>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f1c3 0307 	rsb	r3, r3, #7
 800b772:	2b04      	cmp	r3, #4
 800b774:	d00a      	beq.n	800b78c <xPortStartScheduler+0xb8>
        __asm volatile
 800b776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b77a:	f383 8811 	msr	BASEPRI, r3
 800b77e:	f3bf 8f6f 	isb	sy
 800b782:	f3bf 8f4f 	dsb	sy
 800b786:	60bb      	str	r3, [r7, #8]
    }
 800b788:	bf00      	nop
 800b78a:	e7fe      	b.n	800b78a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b78c:	4b1e      	ldr	r3, [pc, #120]	; (800b808 <xPortStartScheduler+0x134>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	021b      	lsls	r3, r3, #8
 800b792:	4a1d      	ldr	r2, [pc, #116]	; (800b808 <xPortStartScheduler+0x134>)
 800b794:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b796:	4b1c      	ldr	r3, [pc, #112]	; (800b808 <xPortStartScheduler+0x134>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b79e:	4a1a      	ldr	r2, [pc, #104]	; (800b808 <xPortStartScheduler+0x134>)
 800b7a0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	b2da      	uxtb	r2, r3
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800b7aa:	4b18      	ldr	r3, [pc, #96]	; (800b80c <xPortStartScheduler+0x138>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	4a17      	ldr	r2, [pc, #92]	; (800b80c <xPortStartScheduler+0x138>)
 800b7b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b7b4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800b7b6:	4b15      	ldr	r3, [pc, #84]	; (800b80c <xPortStartScheduler+0x138>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	4a14      	ldr	r2, [pc, #80]	; (800b80c <xPortStartScheduler+0x138>)
 800b7bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b7c0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800b7c2:	f000 f8e3 	bl	800b98c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800b7c6:	4b12      	ldr	r3, [pc, #72]	; (800b810 <xPortStartScheduler+0x13c>)
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800b7cc:	f000 f902 	bl	800b9d4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b7d0:	4b10      	ldr	r3, [pc, #64]	; (800b814 <xPortStartScheduler+0x140>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	4a0f      	ldr	r2, [pc, #60]	; (800b814 <xPortStartScheduler+0x140>)
 800b7d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b7da:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800b7dc:	f7ff ff64 	bl	800b6a8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800b7e0:	f7fe fd10 	bl	800a204 <vTaskSwitchContext>
    prvTaskExitError();
 800b7e4:	f7ff ff1e 	bl	800b624 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800b7e8:	2300      	movs	r3, #0
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3718      	adds	r7, #24
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}
 800b7f2:	bf00      	nop
 800b7f4:	e000ed00 	.word	0xe000ed00
 800b7f8:	410fc271 	.word	0x410fc271
 800b7fc:	410fc270 	.word	0x410fc270
 800b800:	e000e400 	.word	0xe000e400
 800b804:	2000274c 	.word	0x2000274c
 800b808:	20002750 	.word	0x20002750
 800b80c:	e000ed20 	.word	0xe000ed20
 800b810:	20000100 	.word	0x20000100
 800b814:	e000ef34 	.word	0xe000ef34

0800b818 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b818:	b480      	push	{r7}
 800b81a:	b083      	sub	sp, #12
 800b81c:	af00      	add	r7, sp, #0
        __asm volatile
 800b81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b822:	f383 8811 	msr	BASEPRI, r3
 800b826:	f3bf 8f6f 	isb	sy
 800b82a:	f3bf 8f4f 	dsb	sy
 800b82e:	607b      	str	r3, [r7, #4]
    }
 800b830:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800b832:	4b0f      	ldr	r3, [pc, #60]	; (800b870 <vPortEnterCritical+0x58>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	3301      	adds	r3, #1
 800b838:	4a0d      	ldr	r2, [pc, #52]	; (800b870 <vPortEnterCritical+0x58>)
 800b83a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800b83c:	4b0c      	ldr	r3, [pc, #48]	; (800b870 <vPortEnterCritical+0x58>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	2b01      	cmp	r3, #1
 800b842:	d10f      	bne.n	800b864 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b844:	4b0b      	ldr	r3, [pc, #44]	; (800b874 <vPortEnterCritical+0x5c>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	b2db      	uxtb	r3, r3
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d00a      	beq.n	800b864 <vPortEnterCritical+0x4c>
        __asm volatile
 800b84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b852:	f383 8811 	msr	BASEPRI, r3
 800b856:	f3bf 8f6f 	isb	sy
 800b85a:	f3bf 8f4f 	dsb	sy
 800b85e:	603b      	str	r3, [r7, #0]
    }
 800b860:	bf00      	nop
 800b862:	e7fe      	b.n	800b862 <vPortEnterCritical+0x4a>
    }
}
 800b864:	bf00      	nop
 800b866:	370c      	adds	r7, #12
 800b868:	46bd      	mov	sp, r7
 800b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86e:	4770      	bx	lr
 800b870:	20000100 	.word	0x20000100
 800b874:	e000ed04 	.word	0xe000ed04

0800b878 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b878:	b480      	push	{r7}
 800b87a:	b083      	sub	sp, #12
 800b87c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800b87e:	4b12      	ldr	r3, [pc, #72]	; (800b8c8 <vPortExitCritical+0x50>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d10a      	bne.n	800b89c <vPortExitCritical+0x24>
        __asm volatile
 800b886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b88a:	f383 8811 	msr	BASEPRI, r3
 800b88e:	f3bf 8f6f 	isb	sy
 800b892:	f3bf 8f4f 	dsb	sy
 800b896:	607b      	str	r3, [r7, #4]
    }
 800b898:	bf00      	nop
 800b89a:	e7fe      	b.n	800b89a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800b89c:	4b0a      	ldr	r3, [pc, #40]	; (800b8c8 <vPortExitCritical+0x50>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	3b01      	subs	r3, #1
 800b8a2:	4a09      	ldr	r2, [pc, #36]	; (800b8c8 <vPortExitCritical+0x50>)
 800b8a4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800b8a6:	4b08      	ldr	r3, [pc, #32]	; (800b8c8 <vPortExitCritical+0x50>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d105      	bne.n	800b8ba <vPortExitCritical+0x42>
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	603b      	str	r3, [r7, #0]
        __asm volatile
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	f383 8811 	msr	BASEPRI, r3
    }
 800b8b8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800b8ba:	bf00      	nop
 800b8bc:	370c      	adds	r7, #12
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr
 800b8c6:	bf00      	nop
 800b8c8:	20000100 	.word	0x20000100
 800b8cc:	00000000 	.word	0x00000000

0800b8d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800b8d0:	f3ef 8009 	mrs	r0, PSP
 800b8d4:	f3bf 8f6f 	isb	sy
 800b8d8:	4b15      	ldr	r3, [pc, #84]	; (800b930 <pxCurrentTCBConst>)
 800b8da:	681a      	ldr	r2, [r3, #0]
 800b8dc:	f01e 0f10 	tst.w	lr, #16
 800b8e0:	bf08      	it	eq
 800b8e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b8e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8ea:	6010      	str	r0, [r2, #0]
 800b8ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b8f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b8f4:	f380 8811 	msr	BASEPRI, r0
 800b8f8:	f3bf 8f4f 	dsb	sy
 800b8fc:	f3bf 8f6f 	isb	sy
 800b900:	f7fe fc80 	bl	800a204 <vTaskSwitchContext>
 800b904:	f04f 0000 	mov.w	r0, #0
 800b908:	f380 8811 	msr	BASEPRI, r0
 800b90c:	bc09      	pop	{r0, r3}
 800b90e:	6819      	ldr	r1, [r3, #0]
 800b910:	6808      	ldr	r0, [r1, #0]
 800b912:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b916:	f01e 0f10 	tst.w	lr, #16
 800b91a:	bf08      	it	eq
 800b91c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b920:	f380 8809 	msr	PSP, r0
 800b924:	f3bf 8f6f 	isb	sy
 800b928:	4770      	bx	lr
 800b92a:	bf00      	nop
 800b92c:	f3af 8000 	nop.w

0800b930 <pxCurrentTCBConst>:
 800b930:	2000260c 	.word	0x2000260c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800b934:	bf00      	nop
 800b936:	bf00      	nop

0800b938 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b082      	sub	sp, #8
 800b93c:	af00      	add	r7, sp, #0
        __asm volatile
 800b93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b942:	f383 8811 	msr	BASEPRI, r3
 800b946:	f3bf 8f6f 	isb	sy
 800b94a:	f3bf 8f4f 	dsb	sy
 800b94e:	607b      	str	r3, [r7, #4]
    }
 800b950:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 800b952:	f001 fd29 	bl	800d3a8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800b956:	f7fe fbbb 	bl	800a0d0 <xTaskIncrementTick>
 800b95a:	4603      	mov	r3, r0
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d006      	beq.n	800b96e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 800b960:	f001 fd80 	bl	800d464 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b964:	4b08      	ldr	r3, [pc, #32]	; (800b988 <SysTick_Handler+0x50>)
 800b966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b96a:	601a      	str	r2, [r3, #0]
 800b96c:	e001      	b.n	800b972 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800b96e:	f001 fd5d 	bl	800d42c <SEGGER_SYSVIEW_RecordExitISR>
 800b972:	2300      	movs	r3, #0
 800b974:	603b      	str	r3, [r7, #0]
        __asm volatile
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	f383 8811 	msr	BASEPRI, r3
    }
 800b97c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800b97e:	bf00      	nop
 800b980:	3708      	adds	r7, #8
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
 800b986:	bf00      	nop
 800b988:	e000ed04 	.word	0xe000ed04

0800b98c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800b98c:	b480      	push	{r7}
 800b98e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b990:	4b0b      	ldr	r3, [pc, #44]	; (800b9c0 <vPortSetupTimerInterrupt+0x34>)
 800b992:	2200      	movs	r2, #0
 800b994:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b996:	4b0b      	ldr	r3, [pc, #44]	; (800b9c4 <vPortSetupTimerInterrupt+0x38>)
 800b998:	2200      	movs	r2, #0
 800b99a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b99c:	4b0a      	ldr	r3, [pc, #40]	; (800b9c8 <vPortSetupTimerInterrupt+0x3c>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4a0a      	ldr	r2, [pc, #40]	; (800b9cc <vPortSetupTimerInterrupt+0x40>)
 800b9a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b9a6:	099b      	lsrs	r3, r3, #6
 800b9a8:	4a09      	ldr	r2, [pc, #36]	; (800b9d0 <vPortSetupTimerInterrupt+0x44>)
 800b9aa:	3b01      	subs	r3, #1
 800b9ac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b9ae:	4b04      	ldr	r3, [pc, #16]	; (800b9c0 <vPortSetupTimerInterrupt+0x34>)
 800b9b0:	2207      	movs	r2, #7
 800b9b2:	601a      	str	r2, [r3, #0]
}
 800b9b4:	bf00      	nop
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9bc:	4770      	bx	lr
 800b9be:	bf00      	nop
 800b9c0:	e000e010 	.word	0xe000e010
 800b9c4:	e000e018 	.word	0xe000e018
 800b9c8:	20000000 	.word	0x20000000
 800b9cc:	10624dd3 	.word	0x10624dd3
 800b9d0:	e000e014 	.word	0xe000e014

0800b9d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800b9d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b9e4 <vPortEnableVFP+0x10>
 800b9d8:	6801      	ldr	r1, [r0, #0]
 800b9da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b9de:	6001      	str	r1, [r0, #0]
 800b9e0:	4770      	bx	lr
 800b9e2:	0000      	.short	0x0000
 800b9e4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800b9e8:	bf00      	nop
 800b9ea:	bf00      	nop

0800b9ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800b9ec:	b480      	push	{r7}
 800b9ee:	b085      	sub	sp, #20
 800b9f0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800b9f2:	f3ef 8305 	mrs	r3, IPSR
 800b9f6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2b0f      	cmp	r3, #15
 800b9fc:	d914      	bls.n	800ba28 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b9fe:	4a17      	ldr	r2, [pc, #92]	; (800ba5c <vPortValidateInterruptPriority+0x70>)
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	4413      	add	r3, r2
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ba08:	4b15      	ldr	r3, [pc, #84]	; (800ba60 <vPortValidateInterruptPriority+0x74>)
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	7afa      	ldrb	r2, [r7, #11]
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d20a      	bcs.n	800ba28 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 800ba12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba16:	f383 8811 	msr	BASEPRI, r3
 800ba1a:	f3bf 8f6f 	isb	sy
 800ba1e:	f3bf 8f4f 	dsb	sy
 800ba22:	607b      	str	r3, [r7, #4]
    }
 800ba24:	bf00      	nop
 800ba26:	e7fe      	b.n	800ba26 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ba28:	4b0e      	ldr	r3, [pc, #56]	; (800ba64 <vPortValidateInterruptPriority+0x78>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ba30:	4b0d      	ldr	r3, [pc, #52]	; (800ba68 <vPortValidateInterruptPriority+0x7c>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d90a      	bls.n	800ba4e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 800ba38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba3c:	f383 8811 	msr	BASEPRI, r3
 800ba40:	f3bf 8f6f 	isb	sy
 800ba44:	f3bf 8f4f 	dsb	sy
 800ba48:	603b      	str	r3, [r7, #0]
    }
 800ba4a:	bf00      	nop
 800ba4c:	e7fe      	b.n	800ba4c <vPortValidateInterruptPriority+0x60>
    }
 800ba4e:	bf00      	nop
 800ba50:	3714      	adds	r7, #20
 800ba52:	46bd      	mov	sp, r7
 800ba54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba58:	4770      	bx	lr
 800ba5a:	bf00      	nop
 800ba5c:	e000e3f0 	.word	0xe000e3f0
 800ba60:	2000274c 	.word	0x2000274c
 800ba64:	e000ed0c 	.word	0xe000ed0c
 800ba68:	20002750 	.word	0x20002750

0800ba6c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b08a      	sub	sp, #40	; 0x28
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 800ba74:	2300      	movs	r3, #0
 800ba76:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800ba78:	f7fe fa68 	bl	8009f4c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800ba7c:	4b65      	ldr	r3, [pc, #404]	; (800bc14 <pvPortMalloc+0x1a8>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d101      	bne.n	800ba88 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800ba84:	f000 f934 	bl	800bcf0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ba88:	4b63      	ldr	r3, [pc, #396]	; (800bc18 <pvPortMalloc+0x1ac>)
 800ba8a:	681a      	ldr	r2, [r3, #0]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	4013      	ands	r3, r2
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	f040 80a7 	bne.w	800bbe4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d02d      	beq.n	800baf8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800ba9c:	2208      	movs	r2, #8
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800baa2:	687a      	ldr	r2, [r7, #4]
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d227      	bcs.n	800baf8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 800baa8:	2208      	movs	r2, #8
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	4413      	add	r3, r2
 800baae:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f003 0307 	and.w	r3, r3, #7
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d021      	beq.n	800bafe <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f023 0307 	bic.w	r3, r3, #7
 800bac0:	3308      	adds	r3, #8
 800bac2:	687a      	ldr	r2, [r7, #4]
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d214      	bcs.n	800baf2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f023 0307 	bic.w	r3, r3, #7
 800bace:	3308      	adds	r3, #8
 800bad0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f003 0307 	and.w	r3, r3, #7
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d010      	beq.n	800bafe <pvPortMalloc+0x92>
        __asm volatile
 800badc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae0:	f383 8811 	msr	BASEPRI, r3
 800bae4:	f3bf 8f6f 	isb	sy
 800bae8:	f3bf 8f4f 	dsb	sy
 800baec:	617b      	str	r3, [r7, #20]
    }
 800baee:	bf00      	nop
 800baf0:	e7fe      	b.n	800baf0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 800baf2:	2300      	movs	r3, #0
 800baf4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800baf6:	e002      	b.n	800bafe <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800baf8:	2300      	movs	r3, #0
 800bafa:	607b      	str	r3, [r7, #4]
 800bafc:	e000      	b.n	800bb00 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bafe:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d06e      	beq.n	800bbe4 <pvPortMalloc+0x178>
 800bb06:	4b45      	ldr	r3, [pc, #276]	; (800bc1c <pvPortMalloc+0x1b0>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	687a      	ldr	r2, [r7, #4]
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	d869      	bhi.n	800bbe4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800bb10:	4b43      	ldr	r3, [pc, #268]	; (800bc20 <pvPortMalloc+0x1b4>)
 800bb12:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800bb14:	4b42      	ldr	r3, [pc, #264]	; (800bc20 <pvPortMalloc+0x1b4>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bb1a:	e004      	b.n	800bb26 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800bb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800bb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bb26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb28:	685b      	ldr	r3, [r3, #4]
 800bb2a:	687a      	ldr	r2, [r7, #4]
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d903      	bls.n	800bb38 <pvPortMalloc+0xcc>
 800bb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d1f1      	bne.n	800bb1c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800bb38:	4b36      	ldr	r3, [pc, #216]	; (800bc14 <pvPortMalloc+0x1a8>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d050      	beq.n	800bbe4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bb42:	6a3b      	ldr	r3, [r7, #32]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	2208      	movs	r2, #8
 800bb48:	4413      	add	r3, r2
 800bb4a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb4e:	681a      	ldr	r2, [r3, #0]
 800bb50:	6a3b      	ldr	r3, [r7, #32]
 800bb52:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb56:	685a      	ldr	r2, [r3, #4]
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	1ad2      	subs	r2, r2, r3
 800bb5c:	2308      	movs	r3, #8
 800bb5e:	005b      	lsls	r3, r3, #1
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d91f      	bls.n	800bba4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bb64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	4413      	add	r3, r2
 800bb6a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb6c:	69bb      	ldr	r3, [r7, #24]
 800bb6e:	f003 0307 	and.w	r3, r3, #7
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d00a      	beq.n	800bb8c <pvPortMalloc+0x120>
        __asm volatile
 800bb76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb7a:	f383 8811 	msr	BASEPRI, r3
 800bb7e:	f3bf 8f6f 	isb	sy
 800bb82:	f3bf 8f4f 	dsb	sy
 800bb86:	613b      	str	r3, [r7, #16]
    }
 800bb88:	bf00      	nop
 800bb8a:	e7fe      	b.n	800bb8a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8e:	685a      	ldr	r2, [r3, #4]
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	1ad2      	subs	r2, r2, r3
 800bb94:	69bb      	ldr	r3, [r7, #24]
 800bb96:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800bb98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9a:	687a      	ldr	r2, [r7, #4]
 800bb9c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bb9e:	69b8      	ldr	r0, [r7, #24]
 800bba0:	f000 f908 	bl	800bdb4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bba4:	4b1d      	ldr	r3, [pc, #116]	; (800bc1c <pvPortMalloc+0x1b0>)
 800bba6:	681a      	ldr	r2, [r3, #0]
 800bba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbaa:	685b      	ldr	r3, [r3, #4]
 800bbac:	1ad3      	subs	r3, r2, r3
 800bbae:	4a1b      	ldr	r2, [pc, #108]	; (800bc1c <pvPortMalloc+0x1b0>)
 800bbb0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bbb2:	4b1a      	ldr	r3, [pc, #104]	; (800bc1c <pvPortMalloc+0x1b0>)
 800bbb4:	681a      	ldr	r2, [r3, #0]
 800bbb6:	4b1b      	ldr	r3, [pc, #108]	; (800bc24 <pvPortMalloc+0x1b8>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d203      	bcs.n	800bbc6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bbbe:	4b17      	ldr	r3, [pc, #92]	; (800bc1c <pvPortMalloc+0x1b0>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	4a18      	ldr	r2, [pc, #96]	; (800bc24 <pvPortMalloc+0x1b8>)
 800bbc4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bbc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc8:	685a      	ldr	r2, [r3, #4]
 800bbca:	4b13      	ldr	r3, [pc, #76]	; (800bc18 <pvPortMalloc+0x1ac>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	431a      	orrs	r2, r3
 800bbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800bbd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800bbda:	4b13      	ldr	r3, [pc, #76]	; (800bc28 <pvPortMalloc+0x1bc>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	3301      	adds	r3, #1
 800bbe0:	4a11      	ldr	r2, [pc, #68]	; (800bc28 <pvPortMalloc+0x1bc>)
 800bbe2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800bbe4:	f7fe f9c0 	bl	8009f68 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bbe8:	69fb      	ldr	r3, [r7, #28]
 800bbea:	f003 0307 	and.w	r3, r3, #7
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d00a      	beq.n	800bc08 <pvPortMalloc+0x19c>
        __asm volatile
 800bbf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf6:	f383 8811 	msr	BASEPRI, r3
 800bbfa:	f3bf 8f6f 	isb	sy
 800bbfe:	f3bf 8f4f 	dsb	sy
 800bc02:	60fb      	str	r3, [r7, #12]
    }
 800bc04:	bf00      	nop
 800bc06:	e7fe      	b.n	800bc06 <pvPortMalloc+0x19a>
    return pvReturn;
 800bc08:	69fb      	ldr	r3, [r7, #28]
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3728      	adds	r7, #40	; 0x28
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
 800bc12:	bf00      	nop
 800bc14:	2001535c 	.word	0x2001535c
 800bc18:	20015370 	.word	0x20015370
 800bc1c:	20015360 	.word	0x20015360
 800bc20:	20015354 	.word	0x20015354
 800bc24:	20015364 	.word	0x20015364
 800bc28:	20015368 	.word	0x20015368

0800bc2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b086      	sub	sp, #24
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d04d      	beq.n	800bcda <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800bc3e:	2308      	movs	r3, #8
 800bc40:	425b      	negs	r3, r3
 800bc42:	697a      	ldr	r2, [r7, #20]
 800bc44:	4413      	add	r3, r2
 800bc46:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	685a      	ldr	r2, [r3, #4]
 800bc50:	4b24      	ldr	r3, [pc, #144]	; (800bce4 <vPortFree+0xb8>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	4013      	ands	r3, r2
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d10a      	bne.n	800bc70 <vPortFree+0x44>
        __asm volatile
 800bc5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc5e:	f383 8811 	msr	BASEPRI, r3
 800bc62:	f3bf 8f6f 	isb	sy
 800bc66:	f3bf 8f4f 	dsb	sy
 800bc6a:	60fb      	str	r3, [r7, #12]
    }
 800bc6c:	bf00      	nop
 800bc6e:	e7fe      	b.n	800bc6e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d00a      	beq.n	800bc8e <vPortFree+0x62>
        __asm volatile
 800bc78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc7c:	f383 8811 	msr	BASEPRI, r3
 800bc80:	f3bf 8f6f 	isb	sy
 800bc84:	f3bf 8f4f 	dsb	sy
 800bc88:	60bb      	str	r3, [r7, #8]
    }
 800bc8a:	bf00      	nop
 800bc8c:	e7fe      	b.n	800bc8c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bc8e:	693b      	ldr	r3, [r7, #16]
 800bc90:	685a      	ldr	r2, [r3, #4]
 800bc92:	4b14      	ldr	r3, [pc, #80]	; (800bce4 <vPortFree+0xb8>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	4013      	ands	r3, r2
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d01e      	beq.n	800bcda <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d11a      	bne.n	800bcda <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	685a      	ldr	r2, [r3, #4]
 800bca8:	4b0e      	ldr	r3, [pc, #56]	; (800bce4 <vPortFree+0xb8>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	43db      	mvns	r3, r3
 800bcae:	401a      	ands	r2, r3
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800bcb4:	f7fe f94a 	bl	8009f4c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	685a      	ldr	r2, [r3, #4]
 800bcbc:	4b0a      	ldr	r3, [pc, #40]	; (800bce8 <vPortFree+0xbc>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	4413      	add	r3, r2
 800bcc2:	4a09      	ldr	r2, [pc, #36]	; (800bce8 <vPortFree+0xbc>)
 800bcc4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bcc6:	6938      	ldr	r0, [r7, #16]
 800bcc8:	f000 f874 	bl	800bdb4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800bccc:	4b07      	ldr	r3, [pc, #28]	; (800bcec <vPortFree+0xc0>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	3301      	adds	r3, #1
 800bcd2:	4a06      	ldr	r2, [pc, #24]	; (800bcec <vPortFree+0xc0>)
 800bcd4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800bcd6:	f7fe f947 	bl	8009f68 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800bcda:	bf00      	nop
 800bcdc:	3718      	adds	r7, #24
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}
 800bce2:	bf00      	nop
 800bce4:	20015370 	.word	0x20015370
 800bce8:	20015360 	.word	0x20015360
 800bcec:	2001536c 	.word	0x2001536c

0800bcf0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b085      	sub	sp, #20
 800bcf4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bcf6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800bcfa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800bcfc:	4b27      	ldr	r3, [pc, #156]	; (800bd9c <prvHeapInit+0xac>)
 800bcfe:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	f003 0307 	and.w	r3, r3, #7
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d00c      	beq.n	800bd24 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	3307      	adds	r3, #7
 800bd0e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f023 0307 	bic.w	r3, r3, #7
 800bd16:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bd18:	68ba      	ldr	r2, [r7, #8]
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	1ad3      	subs	r3, r2, r3
 800bd1e:	4a1f      	ldr	r2, [pc, #124]	; (800bd9c <prvHeapInit+0xac>)
 800bd20:	4413      	add	r3, r2
 800bd22:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bd28:	4a1d      	ldr	r2, [pc, #116]	; (800bda0 <prvHeapInit+0xb0>)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800bd2e:	4b1c      	ldr	r3, [pc, #112]	; (800bda0 <prvHeapInit+0xb0>)
 800bd30:	2200      	movs	r2, #0
 800bd32:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	68ba      	ldr	r2, [r7, #8]
 800bd38:	4413      	add	r3, r2
 800bd3a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800bd3c:	2208      	movs	r2, #8
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	1a9b      	subs	r3, r3, r2
 800bd42:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	f023 0307 	bic.w	r3, r3, #7
 800bd4a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	4a15      	ldr	r2, [pc, #84]	; (800bda4 <prvHeapInit+0xb4>)
 800bd50:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800bd52:	4b14      	ldr	r3, [pc, #80]	; (800bda4 <prvHeapInit+0xb4>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	2200      	movs	r2, #0
 800bd58:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800bd5a:	4b12      	ldr	r3, [pc, #72]	; (800bda4 <prvHeapInit+0xb4>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	68fa      	ldr	r2, [r7, #12]
 800bd6a:	1ad2      	subs	r2, r2, r3
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bd70:	4b0c      	ldr	r3, [pc, #48]	; (800bda4 <prvHeapInit+0xb4>)
 800bd72:	681a      	ldr	r2, [r3, #0]
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	4a0a      	ldr	r2, [pc, #40]	; (800bda8 <prvHeapInit+0xb8>)
 800bd7e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	4a09      	ldr	r2, [pc, #36]	; (800bdac <prvHeapInit+0xbc>)
 800bd86:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bd88:	4b09      	ldr	r3, [pc, #36]	; (800bdb0 <prvHeapInit+0xc0>)
 800bd8a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bd8e:	601a      	str	r2, [r3, #0]
}
 800bd90:	bf00      	nop
 800bd92:	3714      	adds	r7, #20
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr
 800bd9c:	20002754 	.word	0x20002754
 800bda0:	20015354 	.word	0x20015354
 800bda4:	2001535c 	.word	0x2001535c
 800bda8:	20015364 	.word	0x20015364
 800bdac:	20015360 	.word	0x20015360
 800bdb0:	20015370 	.word	0x20015370

0800bdb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b085      	sub	sp, #20
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bdbc:	4b28      	ldr	r3, [pc, #160]	; (800be60 <prvInsertBlockIntoFreeList+0xac>)
 800bdbe:	60fb      	str	r3, [r7, #12]
 800bdc0:	e002      	b.n	800bdc8 <prvInsertBlockIntoFreeList+0x14>
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	60fb      	str	r3, [r7, #12]
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	687a      	ldr	r2, [r7, #4]
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d8f7      	bhi.n	800bdc2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	685b      	ldr	r3, [r3, #4]
 800bdda:	68ba      	ldr	r2, [r7, #8]
 800bddc:	4413      	add	r3, r2
 800bdde:	687a      	ldr	r2, [r7, #4]
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d108      	bne.n	800bdf6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	685a      	ldr	r2, [r3, #4]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	685b      	ldr	r3, [r3, #4]
 800bdec:	441a      	add	r2, r3
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	68ba      	ldr	r2, [r7, #8]
 800be00:	441a      	add	r2, r3
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	429a      	cmp	r2, r3
 800be08:	d118      	bne.n	800be3c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	681a      	ldr	r2, [r3, #0]
 800be0e:	4b15      	ldr	r3, [pc, #84]	; (800be64 <prvInsertBlockIntoFreeList+0xb0>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	429a      	cmp	r2, r3
 800be14:	d00d      	beq.n	800be32 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	685a      	ldr	r2, [r3, #4]
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	441a      	add	r2, r3
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	681a      	ldr	r2, [r3, #0]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	601a      	str	r2, [r3, #0]
 800be30:	e008      	b.n	800be44 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800be32:	4b0c      	ldr	r3, [pc, #48]	; (800be64 <prvInsertBlockIntoFreeList+0xb0>)
 800be34:	681a      	ldr	r2, [r3, #0]
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	601a      	str	r2, [r3, #0]
 800be3a:	e003      	b.n	800be44 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681a      	ldr	r2, [r3, #0]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800be44:	68fa      	ldr	r2, [r7, #12]
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	429a      	cmp	r2, r3
 800be4a:	d002      	beq.n	800be52 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	687a      	ldr	r2, [r7, #4]
 800be50:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800be52:	bf00      	nop
 800be54:	3714      	adds	r7, #20
 800be56:	46bd      	mov	sp, r7
 800be58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5c:	4770      	bx	lr
 800be5e:	bf00      	nop
 800be60:	20015354 	.word	0x20015354
 800be64:	2001535c 	.word	0x2001535c

0800be68 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800be68:	b580      	push	{r7, lr}
 800be6a:	b082      	sub	sp, #8
 800be6c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800be6e:	4b26      	ldr	r3, [pc, #152]	; (800bf08 <_DoInit+0xa0>)
 800be70:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800be72:	22a8      	movs	r2, #168	; 0xa8
 800be74:	2100      	movs	r1, #0
 800be76:	6838      	ldr	r0, [r7, #0]
 800be78:	f001 ff2a 	bl	800dcd0 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	2203      	movs	r2, #3
 800be80:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	2203      	movs	r2, #3
 800be86:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	4a20      	ldr	r2, [pc, #128]	; (800bf0c <_DoInit+0xa4>)
 800be8c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	4a1f      	ldr	r2, [pc, #124]	; (800bf10 <_DoInit+0xa8>)
 800be92:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800be9a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	2200      	movs	r2, #0
 800bea0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	2200      	movs	r2, #0
 800bea6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	2200      	movs	r2, #0
 800beac:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	4a16      	ldr	r2, [pc, #88]	; (800bf0c <_DoInit+0xa4>)
 800beb2:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	4a17      	ldr	r2, [pc, #92]	; (800bf14 <_DoInit+0xac>)
 800beb8:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	2210      	movs	r2, #16
 800bebe:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	2200      	movs	r2, #0
 800bec4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	2200      	movs	r2, #0
 800beca:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	2200      	movs	r2, #0
 800bed0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800bed2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800bed6:	2300      	movs	r3, #0
 800bed8:	607b      	str	r3, [r7, #4]
 800beda:	e00c      	b.n	800bef6 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f1c3 030f 	rsb	r3, r3, #15
 800bee2:	4a0d      	ldr	r2, [pc, #52]	; (800bf18 <_DoInit+0xb0>)
 800bee4:	5cd1      	ldrb	r1, [r2, r3]
 800bee6:	683a      	ldr	r2, [r7, #0]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	4413      	add	r3, r2
 800beec:	460a      	mov	r2, r1
 800beee:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	3301      	adds	r3, #1
 800bef4:	607b      	str	r3, [r7, #4]
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2b0f      	cmp	r3, #15
 800befa:	d9ef      	bls.n	800bedc <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800befc:	f3bf 8f5f 	dmb	sy
}
 800bf00:	bf00      	nop
 800bf02:	3708      	adds	r7, #8
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}
 800bf08:	20015374 	.word	0x20015374
 800bf0c:	0800df88 	.word	0x0800df88
 800bf10:	2001541c 	.word	0x2001541c
 800bf14:	2001581c 	.word	0x2001581c
 800bf18:	0800e060 	.word	0x0800e060

0800bf1c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b08c      	sub	sp, #48	; 0x30
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	60f8      	str	r0, [r7, #12]
 800bf24:	60b9      	str	r1, [r7, #8]
 800bf26:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800bf28:	4b3e      	ldr	r3, [pc, #248]	; (800c024 <SEGGER_RTT_ReadNoLock+0x108>)
 800bf2a:	623b      	str	r3, [r7, #32]
 800bf2c:	6a3b      	ldr	r3, [r7, #32]
 800bf2e:	781b      	ldrb	r3, [r3, #0]
 800bf30:	b2db      	uxtb	r3, r3
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d101      	bne.n	800bf3a <SEGGER_RTT_ReadNoLock+0x1e>
 800bf36:	f7ff ff97 	bl	800be68 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800bf3a:	68fa      	ldr	r2, [r7, #12]
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	005b      	lsls	r3, r3, #1
 800bf40:	4413      	add	r3, r2
 800bf42:	00db      	lsls	r3, r3, #3
 800bf44:	3360      	adds	r3, #96	; 0x60
 800bf46:	4a37      	ldr	r2, [pc, #220]	; (800c024 <SEGGER_RTT_ReadNoLock+0x108>)
 800bf48:	4413      	add	r3, r2
 800bf4a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800bf50:	69fb      	ldr	r3, [r7, #28]
 800bf52:	691b      	ldr	r3, [r3, #16]
 800bf54:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800bf56:	69fb      	ldr	r3, [r7, #28]
 800bf58:	68db      	ldr	r3, [r3, #12]
 800bf5a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800bf60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf62:	69bb      	ldr	r3, [r7, #24]
 800bf64:	429a      	cmp	r2, r3
 800bf66:	d92b      	bls.n	800bfc0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800bf68:	69fb      	ldr	r3, [r7, #28]
 800bf6a:	689a      	ldr	r2, [r3, #8]
 800bf6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf6e:	1ad3      	subs	r3, r2, r3
 800bf70:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800bf72:	697a      	ldr	r2, [r7, #20]
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	4293      	cmp	r3, r2
 800bf78:	bf28      	it	cs
 800bf7a:	4613      	movcs	r3, r2
 800bf7c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800bf7e:	69fb      	ldr	r3, [r7, #28]
 800bf80:	685a      	ldr	r2, [r3, #4]
 800bf82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf84:	4413      	add	r3, r2
 800bf86:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800bf88:	697a      	ldr	r2, [r7, #20]
 800bf8a:	6939      	ldr	r1, [r7, #16]
 800bf8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf8e:	f001 fe91 	bl	800dcb4 <memcpy>
    NumBytesRead += NumBytesRem;
 800bf92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	4413      	add	r3, r2
 800bf98:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800bf9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	4413      	add	r3, r2
 800bfa0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	697b      	ldr	r3, [r7, #20]
 800bfa6:	1ad3      	subs	r3, r2, r3
 800bfa8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800bfaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	4413      	add	r3, r2
 800bfb0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800bfb2:	69fb      	ldr	r3, [r7, #28]
 800bfb4:	689b      	ldr	r3, [r3, #8]
 800bfb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	d101      	bne.n	800bfc0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800bfc0:	69ba      	ldr	r2, [r7, #24]
 800bfc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc4:	1ad3      	subs	r3, r2, r3
 800bfc6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800bfc8:	697a      	ldr	r2, [r7, #20]
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	4293      	cmp	r3, r2
 800bfce:	bf28      	it	cs
 800bfd0:	4613      	movcs	r3, r2
 800bfd2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d019      	beq.n	800c00e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800bfda:	69fb      	ldr	r3, [r7, #28]
 800bfdc:	685a      	ldr	r2, [r3, #4]
 800bfde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe0:	4413      	add	r3, r2
 800bfe2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800bfe4:	697a      	ldr	r2, [r7, #20]
 800bfe6:	6939      	ldr	r1, [r7, #16]
 800bfe8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bfea:	f001 fe63 	bl	800dcb4 <memcpy>
    NumBytesRead += NumBytesRem;
 800bfee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	4413      	add	r3, r2
 800bff4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800bff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	4413      	add	r3, r2
 800bffc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800bffe:	687a      	ldr	r2, [r7, #4]
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	1ad3      	subs	r3, r2, r3
 800c004:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800c006:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	4413      	add	r3, r2
 800c00c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800c00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c010:	2b00      	cmp	r3, #0
 800c012:	d002      	beq.n	800c01a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800c014:	69fb      	ldr	r3, [r7, #28]
 800c016:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c018:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800c01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	3730      	adds	r7, #48	; 0x30
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}
 800c024:	20015374 	.word	0x20015374

0800c028 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800c028:	b580      	push	{r7, lr}
 800c02a:	b088      	sub	sp, #32
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	60f8      	str	r0, [r7, #12]
 800c030:	60b9      	str	r1, [r7, #8]
 800c032:	607a      	str	r2, [r7, #4]
 800c034:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800c036:	4b3d      	ldr	r3, [pc, #244]	; (800c12c <SEGGER_RTT_AllocUpBuffer+0x104>)
 800c038:	61bb      	str	r3, [r7, #24]
 800c03a:	69bb      	ldr	r3, [r7, #24]
 800c03c:	781b      	ldrb	r3, [r3, #0]
 800c03e:	b2db      	uxtb	r3, r3
 800c040:	2b00      	cmp	r3, #0
 800c042:	d101      	bne.n	800c048 <SEGGER_RTT_AllocUpBuffer+0x20>
 800c044:	f7ff ff10 	bl	800be68 <_DoInit>
  SEGGER_RTT_LOCK();
 800c048:	f3ef 8311 	mrs	r3, BASEPRI
 800c04c:	f04f 0120 	mov.w	r1, #32
 800c050:	f381 8811 	msr	BASEPRI, r1
 800c054:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800c056:	4b35      	ldr	r3, [pc, #212]	; (800c12c <SEGGER_RTT_AllocUpBuffer+0x104>)
 800c058:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800c05a:	2300      	movs	r3, #0
 800c05c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800c05e:	6939      	ldr	r1, [r7, #16]
 800c060:	69fb      	ldr	r3, [r7, #28]
 800c062:	1c5a      	adds	r2, r3, #1
 800c064:	4613      	mov	r3, r2
 800c066:	005b      	lsls	r3, r3, #1
 800c068:	4413      	add	r3, r2
 800c06a:	00db      	lsls	r3, r3, #3
 800c06c:	440b      	add	r3, r1
 800c06e:	3304      	adds	r3, #4
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d008      	beq.n	800c088 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800c076:	69fb      	ldr	r3, [r7, #28]
 800c078:	3301      	adds	r3, #1
 800c07a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	691b      	ldr	r3, [r3, #16]
 800c080:	69fa      	ldr	r2, [r7, #28]
 800c082:	429a      	cmp	r2, r3
 800c084:	dbeb      	blt.n	800c05e <SEGGER_RTT_AllocUpBuffer+0x36>
 800c086:	e000      	b.n	800c08a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800c088:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	691b      	ldr	r3, [r3, #16]
 800c08e:	69fa      	ldr	r2, [r7, #28]
 800c090:	429a      	cmp	r2, r3
 800c092:	da3f      	bge.n	800c114 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800c094:	6939      	ldr	r1, [r7, #16]
 800c096:	69fb      	ldr	r3, [r7, #28]
 800c098:	1c5a      	adds	r2, r3, #1
 800c09a:	4613      	mov	r3, r2
 800c09c:	005b      	lsls	r3, r3, #1
 800c09e:	4413      	add	r3, r2
 800c0a0:	00db      	lsls	r3, r3, #3
 800c0a2:	440b      	add	r3, r1
 800c0a4:	68fa      	ldr	r2, [r7, #12]
 800c0a6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800c0a8:	6939      	ldr	r1, [r7, #16]
 800c0aa:	69fb      	ldr	r3, [r7, #28]
 800c0ac:	1c5a      	adds	r2, r3, #1
 800c0ae:	4613      	mov	r3, r2
 800c0b0:	005b      	lsls	r3, r3, #1
 800c0b2:	4413      	add	r3, r2
 800c0b4:	00db      	lsls	r3, r3, #3
 800c0b6:	440b      	add	r3, r1
 800c0b8:	3304      	adds	r3, #4
 800c0ba:	68ba      	ldr	r2, [r7, #8]
 800c0bc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800c0be:	6939      	ldr	r1, [r7, #16]
 800c0c0:	69fa      	ldr	r2, [r7, #28]
 800c0c2:	4613      	mov	r3, r2
 800c0c4:	005b      	lsls	r3, r3, #1
 800c0c6:	4413      	add	r3, r2
 800c0c8:	00db      	lsls	r3, r3, #3
 800c0ca:	440b      	add	r3, r1
 800c0cc:	3320      	adds	r3, #32
 800c0ce:	687a      	ldr	r2, [r7, #4]
 800c0d0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800c0d2:	6939      	ldr	r1, [r7, #16]
 800c0d4:	69fa      	ldr	r2, [r7, #28]
 800c0d6:	4613      	mov	r3, r2
 800c0d8:	005b      	lsls	r3, r3, #1
 800c0da:	4413      	add	r3, r2
 800c0dc:	00db      	lsls	r3, r3, #3
 800c0de:	440b      	add	r3, r1
 800c0e0:	3328      	adds	r3, #40	; 0x28
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800c0e6:	6939      	ldr	r1, [r7, #16]
 800c0e8:	69fa      	ldr	r2, [r7, #28]
 800c0ea:	4613      	mov	r3, r2
 800c0ec:	005b      	lsls	r3, r3, #1
 800c0ee:	4413      	add	r3, r2
 800c0f0:	00db      	lsls	r3, r3, #3
 800c0f2:	440b      	add	r3, r1
 800c0f4:	3324      	adds	r3, #36	; 0x24
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800c0fa:	6939      	ldr	r1, [r7, #16]
 800c0fc:	69fa      	ldr	r2, [r7, #28]
 800c0fe:	4613      	mov	r3, r2
 800c100:	005b      	lsls	r3, r3, #1
 800c102:	4413      	add	r3, r2
 800c104:	00db      	lsls	r3, r3, #3
 800c106:	440b      	add	r3, r1
 800c108:	332c      	adds	r3, #44	; 0x2c
 800c10a:	683a      	ldr	r2, [r7, #0]
 800c10c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800c10e:	f3bf 8f5f 	dmb	sy
 800c112:	e002      	b.n	800c11a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800c114:	f04f 33ff 	mov.w	r3, #4294967295
 800c118:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800c120:	69fb      	ldr	r3, [r7, #28]
}
 800c122:	4618      	mov	r0, r3
 800c124:	3720      	adds	r7, #32
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
 800c12a:	bf00      	nop
 800c12c:	20015374 	.word	0x20015374

0800c130 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800c130:	b580      	push	{r7, lr}
 800c132:	b08a      	sub	sp, #40	; 0x28
 800c134:	af00      	add	r7, sp, #0
 800c136:	60f8      	str	r0, [r7, #12]
 800c138:	60b9      	str	r1, [r7, #8]
 800c13a:	607a      	str	r2, [r7, #4]
 800c13c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800c13e:	4b21      	ldr	r3, [pc, #132]	; (800c1c4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800c140:	623b      	str	r3, [r7, #32]
 800c142:	6a3b      	ldr	r3, [r7, #32]
 800c144:	781b      	ldrb	r3, [r3, #0]
 800c146:	b2db      	uxtb	r3, r3
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d101      	bne.n	800c150 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800c14c:	f7ff fe8c 	bl	800be68 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800c150:	4b1c      	ldr	r3, [pc, #112]	; (800c1c4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800c152:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2b02      	cmp	r3, #2
 800c158:	d82c      	bhi.n	800c1b4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800c15a:	f3ef 8311 	mrs	r3, BASEPRI
 800c15e:	f04f 0120 	mov.w	r1, #32
 800c162:	f381 8811 	msr	BASEPRI, r1
 800c166:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800c168:	68fa      	ldr	r2, [r7, #12]
 800c16a:	4613      	mov	r3, r2
 800c16c:	005b      	lsls	r3, r3, #1
 800c16e:	4413      	add	r3, r2
 800c170:	00db      	lsls	r3, r3, #3
 800c172:	3360      	adds	r3, #96	; 0x60
 800c174:	69fa      	ldr	r2, [r7, #28]
 800c176:	4413      	add	r3, r2
 800c178:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d00e      	beq.n	800c19e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	68ba      	ldr	r2, [r7, #8]
 800c184:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	687a      	ldr	r2, [r7, #4]
 800c18a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	683a      	ldr	r2, [r7, #0]
 800c190:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	2200      	movs	r2, #0
 800c196:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800c198:	697b      	ldr	r3, [r7, #20]
 800c19a:	2200      	movs	r2, #0
 800c19c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1a2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800c1a4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800c1a8:	69bb      	ldr	r3, [r7, #24]
 800c1aa:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	627b      	str	r3, [r7, #36]	; 0x24
 800c1b2:	e002      	b.n	800c1ba <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800c1b4:	f04f 33ff 	mov.w	r3, #4294967295
 800c1b8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800c1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3728      	adds	r7, #40	; 0x28
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}
 800c1c4:	20015374 	.word	0x20015374

0800c1c8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800c1c8:	b480      	push	{r7}
 800c1ca:	b087      	sub	sp, #28
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	60f8      	str	r0, [r7, #12]
 800c1d0:	60b9      	str	r1, [r7, #8]
 800c1d2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d00f      	beq.n	800c1fe <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800c1de:	e002      	b.n	800c1e6 <_EncodeStr+0x1e>
      Len++;
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	3301      	adds	r3, #1
 800c1e4:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800c1e6:	68ba      	ldr	r2, [r7, #8]
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	4413      	add	r3, r2
 800c1ec:	781b      	ldrb	r3, [r3, #0]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d1f6      	bne.n	800c1e0 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800c1f2:	693a      	ldr	r2, [r7, #16]
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	429a      	cmp	r2, r3
 800c1f8:	d901      	bls.n	800c1fe <_EncodeStr+0x36>
      Len = Limit;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	2bfe      	cmp	r3, #254	; 0xfe
 800c202:	d806      	bhi.n	800c212 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	1c5a      	adds	r2, r3, #1
 800c208:	60fa      	str	r2, [r7, #12]
 800c20a:	693a      	ldr	r2, [r7, #16]
 800c20c:	b2d2      	uxtb	r2, r2
 800c20e:	701a      	strb	r2, [r3, #0]
 800c210:	e011      	b.n	800c236 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	1c5a      	adds	r2, r3, #1
 800c216:	60fa      	str	r2, [r7, #12]
 800c218:	22ff      	movs	r2, #255	; 0xff
 800c21a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	1c5a      	adds	r2, r3, #1
 800c220:	60fa      	str	r2, [r7, #12]
 800c222:	693a      	ldr	r2, [r7, #16]
 800c224:	b2d2      	uxtb	r2, r2
 800c226:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	0a19      	lsrs	r1, r3, #8
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	1c5a      	adds	r2, r3, #1
 800c230:	60fa      	str	r2, [r7, #12]
 800c232:	b2ca      	uxtb	r2, r1
 800c234:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800c236:	2300      	movs	r3, #0
 800c238:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800c23a:	e00a      	b.n	800c252 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800c23c:	68ba      	ldr	r2, [r7, #8]
 800c23e:	1c53      	adds	r3, r2, #1
 800c240:	60bb      	str	r3, [r7, #8]
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	1c59      	adds	r1, r3, #1
 800c246:	60f9      	str	r1, [r7, #12]
 800c248:	7812      	ldrb	r2, [r2, #0]
 800c24a:	701a      	strb	r2, [r3, #0]
    n++;
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	3301      	adds	r3, #1
 800c250:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800c252:	697a      	ldr	r2, [r7, #20]
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	429a      	cmp	r2, r3
 800c258:	d3f0      	bcc.n	800c23c <_EncodeStr+0x74>
  }
  return pPayload;
 800c25a:	68fb      	ldr	r3, [r7, #12]
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	371c      	adds	r7, #28
 800c260:	46bd      	mov	sp, r7
 800c262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c266:	4770      	bx	lr

0800c268 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800c268:	b480      	push	{r7}
 800c26a:	b083      	sub	sp, #12
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	3307      	adds	r3, #7
}
 800c274:	4618      	mov	r0, r3
 800c276:	370c      	adds	r7, #12
 800c278:	46bd      	mov	sp, r7
 800c27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27e:	4770      	bx	lr

0800c280 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800c280:	b580      	push	{r7, lr}
 800c282:	b082      	sub	sp, #8
 800c284:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800c286:	4b35      	ldr	r3, [pc, #212]	; (800c35c <_HandleIncomingPacket+0xdc>)
 800c288:	7e1b      	ldrb	r3, [r3, #24]
 800c28a:	4618      	mov	r0, r3
 800c28c:	1cfb      	adds	r3, r7, #3
 800c28e:	2201      	movs	r2, #1
 800c290:	4619      	mov	r1, r3
 800c292:	f7ff fe43 	bl	800bf1c <SEGGER_RTT_ReadNoLock>
 800c296:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d052      	beq.n	800c344 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 800c29e:	78fb      	ldrb	r3, [r7, #3]
 800c2a0:	2b80      	cmp	r3, #128	; 0x80
 800c2a2:	d031      	beq.n	800c308 <_HandleIncomingPacket+0x88>
 800c2a4:	2b80      	cmp	r3, #128	; 0x80
 800c2a6:	dc40      	bgt.n	800c32a <_HandleIncomingPacket+0xaa>
 800c2a8:	2b07      	cmp	r3, #7
 800c2aa:	dc15      	bgt.n	800c2d8 <_HandleIncomingPacket+0x58>
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	dd3c      	ble.n	800c32a <_HandleIncomingPacket+0xaa>
 800c2b0:	3b01      	subs	r3, #1
 800c2b2:	2b06      	cmp	r3, #6
 800c2b4:	d839      	bhi.n	800c32a <_HandleIncomingPacket+0xaa>
 800c2b6:	a201      	add	r2, pc, #4	; (adr r2, 800c2bc <_HandleIncomingPacket+0x3c>)
 800c2b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2bc:	0800c2df 	.word	0x0800c2df
 800c2c0:	0800c2e5 	.word	0x0800c2e5
 800c2c4:	0800c2eb 	.word	0x0800c2eb
 800c2c8:	0800c2f1 	.word	0x0800c2f1
 800c2cc:	0800c2f7 	.word	0x0800c2f7
 800c2d0:	0800c2fd 	.word	0x0800c2fd
 800c2d4:	0800c303 	.word	0x0800c303
 800c2d8:	2b7f      	cmp	r3, #127	; 0x7f
 800c2da:	d035      	beq.n	800c348 <_HandleIncomingPacket+0xc8>
 800c2dc:	e025      	b.n	800c32a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800c2de:	f000 fd9b 	bl	800ce18 <SEGGER_SYSVIEW_Start>
      break;
 800c2e2:	e036      	b.n	800c352 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800c2e4:	f000 fe52 	bl	800cf8c <SEGGER_SYSVIEW_Stop>
      break;
 800c2e8:	e033      	b.n	800c352 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800c2ea:	f001 f82b 	bl	800d344 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800c2ee:	e030      	b.n	800c352 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800c2f0:	f000 fff0 	bl	800d2d4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800c2f4:	e02d      	b.n	800c352 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800c2f6:	f000 fe6f 	bl	800cfd8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800c2fa:	e02a      	b.n	800c352 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800c2fc:	f001 fabe 	bl	800d87c <SEGGER_SYSVIEW_SendNumModules>
      break;
 800c300:	e027      	b.n	800c352 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800c302:	f001 fa9d 	bl	800d840 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800c306:	e024      	b.n	800c352 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800c308:	4b14      	ldr	r3, [pc, #80]	; (800c35c <_HandleIncomingPacket+0xdc>)
 800c30a:	7e1b      	ldrb	r3, [r3, #24]
 800c30c:	4618      	mov	r0, r3
 800c30e:	1cfb      	adds	r3, r7, #3
 800c310:	2201      	movs	r2, #1
 800c312:	4619      	mov	r1, r3
 800c314:	f7ff fe02 	bl	800bf1c <SEGGER_RTT_ReadNoLock>
 800c318:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d015      	beq.n	800c34c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800c320:	78fb      	ldrb	r3, [r7, #3]
 800c322:	4618      	mov	r0, r3
 800c324:	f001 fa0c 	bl	800d740 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800c328:	e010      	b.n	800c34c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800c32a:	78fb      	ldrb	r3, [r7, #3]
 800c32c:	b25b      	sxtb	r3, r3
 800c32e:	2b00      	cmp	r3, #0
 800c330:	da0e      	bge.n	800c350 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800c332:	4b0a      	ldr	r3, [pc, #40]	; (800c35c <_HandleIncomingPacket+0xdc>)
 800c334:	7e1b      	ldrb	r3, [r3, #24]
 800c336:	4618      	mov	r0, r3
 800c338:	1cfb      	adds	r3, r7, #3
 800c33a:	2201      	movs	r2, #1
 800c33c:	4619      	mov	r1, r3
 800c33e:	f7ff fded 	bl	800bf1c <SEGGER_RTT_ReadNoLock>
      }
      break;
 800c342:	e005      	b.n	800c350 <_HandleIncomingPacket+0xd0>
    }
  }
 800c344:	bf00      	nop
 800c346:	e004      	b.n	800c352 <_HandleIncomingPacket+0xd2>
      break;
 800c348:	bf00      	nop
 800c34a:	e002      	b.n	800c352 <_HandleIncomingPacket+0xd2>
      break;
 800c34c:	bf00      	nop
 800c34e:	e000      	b.n	800c352 <_HandleIncomingPacket+0xd2>
      break;
 800c350:	bf00      	nop
}
 800c352:	bf00      	nop
 800c354:	3708      	adds	r7, #8
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	bf00      	nop
 800c35c:	20016834 	.word	0x20016834

0800c360 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800c360:	b580      	push	{r7, lr}
 800c362:	b08c      	sub	sp, #48	; 0x30
 800c364:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800c366:	2301      	movs	r3, #1
 800c368:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800c36a:	1d3b      	adds	r3, r7, #4
 800c36c:	3301      	adds	r3, #1
 800c36e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800c370:	69fb      	ldr	r3, [r7, #28]
 800c372:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c374:	4b31      	ldr	r3, [pc, #196]	; (800c43c <_TrySendOverflowPacket+0xdc>)
 800c376:	695b      	ldr	r3, [r3, #20]
 800c378:	62bb      	str	r3, [r7, #40]	; 0x28
 800c37a:	e00b      	b.n	800c394 <_TrySendOverflowPacket+0x34>
 800c37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c37e:	b2da      	uxtb	r2, r3
 800c380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c382:	1c59      	adds	r1, r3, #1
 800c384:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c386:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c38a:	b2d2      	uxtb	r2, r2
 800c38c:	701a      	strb	r2, [r3, #0]
 800c38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c390:	09db      	lsrs	r3, r3, #7
 800c392:	62bb      	str	r3, [r7, #40]	; 0x28
 800c394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c396:	2b7f      	cmp	r3, #127	; 0x7f
 800c398:	d8f0      	bhi.n	800c37c <_TrySendOverflowPacket+0x1c>
 800c39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c39c:	1c5a      	adds	r2, r3, #1
 800c39e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c3a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3a2:	b2d2      	uxtb	r2, r2
 800c3a4:	701a      	strb	r2, [r3, #0]
 800c3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800c3aa:	4b25      	ldr	r3, [pc, #148]	; (800c440 <_TrySendOverflowPacket+0xe0>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800c3b0:	4b22      	ldr	r3, [pc, #136]	; (800c43c <_TrySendOverflowPacket+0xdc>)
 800c3b2:	68db      	ldr	r3, [r3, #12]
 800c3b4:	69ba      	ldr	r2, [r7, #24]
 800c3b6:	1ad3      	subs	r3, r2, r3
 800c3b8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800c3ba:	69fb      	ldr	r3, [r7, #28]
 800c3bc:	627b      	str	r3, [r7, #36]	; 0x24
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	623b      	str	r3, [r7, #32]
 800c3c2:	e00b      	b.n	800c3dc <_TrySendOverflowPacket+0x7c>
 800c3c4:	6a3b      	ldr	r3, [r7, #32]
 800c3c6:	b2da      	uxtb	r2, r3
 800c3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ca:	1c59      	adds	r1, r3, #1
 800c3cc:	6279      	str	r1, [r7, #36]	; 0x24
 800c3ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c3d2:	b2d2      	uxtb	r2, r2
 800c3d4:	701a      	strb	r2, [r3, #0]
 800c3d6:	6a3b      	ldr	r3, [r7, #32]
 800c3d8:	09db      	lsrs	r3, r3, #7
 800c3da:	623b      	str	r3, [r7, #32]
 800c3dc:	6a3b      	ldr	r3, [r7, #32]
 800c3de:	2b7f      	cmp	r3, #127	; 0x7f
 800c3e0:	d8f0      	bhi.n	800c3c4 <_TrySendOverflowPacket+0x64>
 800c3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e4:	1c5a      	adds	r2, r3, #1
 800c3e6:	627a      	str	r2, [r7, #36]	; 0x24
 800c3e8:	6a3a      	ldr	r2, [r7, #32]
 800c3ea:	b2d2      	uxtb	r2, r2
 800c3ec:	701a      	strb	r2, [r3, #0]
 800c3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800c3f2:	4b12      	ldr	r3, [pc, #72]	; (800c43c <_TrySendOverflowPacket+0xdc>)
 800c3f4:	785b      	ldrb	r3, [r3, #1]
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	1d3b      	adds	r3, r7, #4
 800c3fa:	69fa      	ldr	r2, [r7, #28]
 800c3fc:	1ad3      	subs	r3, r2, r3
 800c3fe:	461a      	mov	r2, r3
 800c400:	1d3b      	adds	r3, r7, #4
 800c402:	4619      	mov	r1, r3
 800c404:	f7f3 fef4 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800c408:	4603      	mov	r3, r0
 800c40a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d009      	beq.n	800c426 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800c412:	4a0a      	ldr	r2, [pc, #40]	; (800c43c <_TrySendOverflowPacket+0xdc>)
 800c414:	69bb      	ldr	r3, [r7, #24]
 800c416:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800c418:	4b08      	ldr	r3, [pc, #32]	; (800c43c <_TrySendOverflowPacket+0xdc>)
 800c41a:	781b      	ldrb	r3, [r3, #0]
 800c41c:	3b01      	subs	r3, #1
 800c41e:	b2da      	uxtb	r2, r3
 800c420:	4b06      	ldr	r3, [pc, #24]	; (800c43c <_TrySendOverflowPacket+0xdc>)
 800c422:	701a      	strb	r2, [r3, #0]
 800c424:	e004      	b.n	800c430 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800c426:	4b05      	ldr	r3, [pc, #20]	; (800c43c <_TrySendOverflowPacket+0xdc>)
 800c428:	695b      	ldr	r3, [r3, #20]
 800c42a:	3301      	adds	r3, #1
 800c42c:	4a03      	ldr	r2, [pc, #12]	; (800c43c <_TrySendOverflowPacket+0xdc>)
 800c42e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800c430:	693b      	ldr	r3, [r7, #16]
}
 800c432:	4618      	mov	r0, r3
 800c434:	3730      	adds	r7, #48	; 0x30
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}
 800c43a:	bf00      	nop
 800c43c:	20016834 	.word	0x20016834
 800c440:	e0001004 	.word	0xe0001004

0800c444 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800c444:	b580      	push	{r7, lr}
 800c446:	b08a      	sub	sp, #40	; 0x28
 800c448:	af00      	add	r7, sp, #0
 800c44a:	60f8      	str	r0, [r7, #12]
 800c44c:	60b9      	str	r1, [r7, #8]
 800c44e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800c450:	4b98      	ldr	r3, [pc, #608]	; (800c6b4 <_SendPacket+0x270>)
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	2b01      	cmp	r3, #1
 800c456:	d010      	beq.n	800c47a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800c458:	4b96      	ldr	r3, [pc, #600]	; (800c6b4 <_SendPacket+0x270>)
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	f000 812d 	beq.w	800c6bc <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800c462:	4b94      	ldr	r3, [pc, #592]	; (800c6b4 <_SendPacket+0x270>)
 800c464:	781b      	ldrb	r3, [r3, #0]
 800c466:	2b02      	cmp	r3, #2
 800c468:	d109      	bne.n	800c47e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800c46a:	f7ff ff79 	bl	800c360 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800c46e:	4b91      	ldr	r3, [pc, #580]	; (800c6b4 <_SendPacket+0x270>)
 800c470:	781b      	ldrb	r3, [r3, #0]
 800c472:	2b01      	cmp	r3, #1
 800c474:	f040 8124 	bne.w	800c6c0 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 800c478:	e001      	b.n	800c47e <_SendPacket+0x3a>
    goto Send;
 800c47a:	bf00      	nop
 800c47c:	e000      	b.n	800c480 <_SendPacket+0x3c>
Send:
 800c47e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2b1f      	cmp	r3, #31
 800c484:	d809      	bhi.n	800c49a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800c486:	4b8b      	ldr	r3, [pc, #556]	; (800c6b4 <_SendPacket+0x270>)
 800c488:	69da      	ldr	r2, [r3, #28]
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	fa22 f303 	lsr.w	r3, r2, r3
 800c490:	f003 0301 	and.w	r3, r3, #1
 800c494:	2b00      	cmp	r3, #0
 800c496:	f040 8115 	bne.w	800c6c4 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2b17      	cmp	r3, #23
 800c49e:	d807      	bhi.n	800c4b0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	3b01      	subs	r3, #1
 800c4a4:	60fb      	str	r3, [r7, #12]
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	b2da      	uxtb	r2, r3
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	701a      	strb	r2, [r3, #0]
 800c4ae:	e0c4      	b.n	800c63a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800c4b0:	68ba      	ldr	r2, [r7, #8]
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	1ad3      	subs	r3, r2, r3
 800c4b6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 800c4b8:	69fb      	ldr	r3, [r7, #28]
 800c4ba:	2b7f      	cmp	r3, #127	; 0x7f
 800c4bc:	d912      	bls.n	800c4e4 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800c4be:	69fb      	ldr	r3, [r7, #28]
 800c4c0:	09da      	lsrs	r2, r3, #7
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	3b01      	subs	r3, #1
 800c4c6:	60fb      	str	r3, [r7, #12]
 800c4c8:	b2d2      	uxtb	r2, r2
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800c4ce:	69fb      	ldr	r3, [r7, #28]
 800c4d0:	b2db      	uxtb	r3, r3
 800c4d2:	68fa      	ldr	r2, [r7, #12]
 800c4d4:	3a01      	subs	r2, #1
 800c4d6:	60fa      	str	r2, [r7, #12]
 800c4d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c4dc:	b2da      	uxtb	r2, r3
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	701a      	strb	r2, [r3, #0]
 800c4e2:	e006      	b.n	800c4f2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	3b01      	subs	r3, #1
 800c4e8:	60fb      	str	r3, [r7, #12]
 800c4ea:	69fb      	ldr	r3, [r7, #28]
 800c4ec:	b2da      	uxtb	r2, r3
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2b7e      	cmp	r3, #126	; 0x7e
 800c4f6:	d807      	bhi.n	800c508 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	3b01      	subs	r3, #1
 800c4fc:	60fb      	str	r3, [r7, #12]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	b2da      	uxtb	r2, r3
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	701a      	strb	r2, [r3, #0]
 800c506:	e098      	b.n	800c63a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c50e:	d212      	bcs.n	800c536 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	09da      	lsrs	r2, r3, #7
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	3b01      	subs	r3, #1
 800c518:	60fb      	str	r3, [r7, #12]
 800c51a:	b2d2      	uxtb	r2, r2
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	b2db      	uxtb	r3, r3
 800c524:	68fa      	ldr	r2, [r7, #12]
 800c526:	3a01      	subs	r2, #1
 800c528:	60fa      	str	r2, [r7, #12]
 800c52a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c52e:	b2da      	uxtb	r2, r3
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	701a      	strb	r2, [r3, #0]
 800c534:	e081      	b.n	800c63a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c53c:	d21d      	bcs.n	800c57a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	0b9a      	lsrs	r2, r3, #14
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	3b01      	subs	r3, #1
 800c546:	60fb      	str	r3, [r7, #12]
 800c548:	b2d2      	uxtb	r2, r2
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	09db      	lsrs	r3, r3, #7
 800c552:	b2db      	uxtb	r3, r3
 800c554:	68fa      	ldr	r2, [r7, #12]
 800c556:	3a01      	subs	r2, #1
 800c558:	60fa      	str	r2, [r7, #12]
 800c55a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c55e:	b2da      	uxtb	r2, r3
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	b2db      	uxtb	r3, r3
 800c568:	68fa      	ldr	r2, [r7, #12]
 800c56a:	3a01      	subs	r2, #1
 800c56c:	60fa      	str	r2, [r7, #12]
 800c56e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c572:	b2da      	uxtb	r2, r3
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	701a      	strb	r2, [r3, #0]
 800c578:	e05f      	b.n	800c63a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c580:	d228      	bcs.n	800c5d4 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	0d5a      	lsrs	r2, r3, #21
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	3b01      	subs	r3, #1
 800c58a:	60fb      	str	r3, [r7, #12]
 800c58c:	b2d2      	uxtb	r2, r2
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	0b9b      	lsrs	r3, r3, #14
 800c596:	b2db      	uxtb	r3, r3
 800c598:	68fa      	ldr	r2, [r7, #12]
 800c59a:	3a01      	subs	r2, #1
 800c59c:	60fa      	str	r2, [r7, #12]
 800c59e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c5a2:	b2da      	uxtb	r2, r3
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	09db      	lsrs	r3, r3, #7
 800c5ac:	b2db      	uxtb	r3, r3
 800c5ae:	68fa      	ldr	r2, [r7, #12]
 800c5b0:	3a01      	subs	r2, #1
 800c5b2:	60fa      	str	r2, [r7, #12]
 800c5b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c5b8:	b2da      	uxtb	r2, r3
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	b2db      	uxtb	r3, r3
 800c5c2:	68fa      	ldr	r2, [r7, #12]
 800c5c4:	3a01      	subs	r2, #1
 800c5c6:	60fa      	str	r2, [r7, #12]
 800c5c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c5cc:	b2da      	uxtb	r2, r3
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	701a      	strb	r2, [r3, #0]
 800c5d2:	e032      	b.n	800c63a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	0f1a      	lsrs	r2, r3, #28
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	3b01      	subs	r3, #1
 800c5dc:	60fb      	str	r3, [r7, #12]
 800c5de:	b2d2      	uxtb	r2, r2
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	0d5b      	lsrs	r3, r3, #21
 800c5e8:	b2db      	uxtb	r3, r3
 800c5ea:	68fa      	ldr	r2, [r7, #12]
 800c5ec:	3a01      	subs	r2, #1
 800c5ee:	60fa      	str	r2, [r7, #12]
 800c5f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c5f4:	b2da      	uxtb	r2, r3
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	0b9b      	lsrs	r3, r3, #14
 800c5fe:	b2db      	uxtb	r3, r3
 800c600:	68fa      	ldr	r2, [r7, #12]
 800c602:	3a01      	subs	r2, #1
 800c604:	60fa      	str	r2, [r7, #12]
 800c606:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c60a:	b2da      	uxtb	r2, r3
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	09db      	lsrs	r3, r3, #7
 800c614:	b2db      	uxtb	r3, r3
 800c616:	68fa      	ldr	r2, [r7, #12]
 800c618:	3a01      	subs	r2, #1
 800c61a:	60fa      	str	r2, [r7, #12]
 800c61c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c620:	b2da      	uxtb	r2, r3
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	b2db      	uxtb	r3, r3
 800c62a:	68fa      	ldr	r2, [r7, #12]
 800c62c:	3a01      	subs	r2, #1
 800c62e:	60fa      	str	r2, [r7, #12]
 800c630:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c634:	b2da      	uxtb	r2, r3
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800c63a:	4b1f      	ldr	r3, [pc, #124]	; (800c6b8 <_SendPacket+0x274>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800c640:	4b1c      	ldr	r3, [pc, #112]	; (800c6b4 <_SendPacket+0x270>)
 800c642:	68db      	ldr	r3, [r3, #12]
 800c644:	69ba      	ldr	r2, [r7, #24]
 800c646:	1ad3      	subs	r3, r2, r3
 800c648:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	627b      	str	r3, [r7, #36]	; 0x24
 800c64e:	697b      	ldr	r3, [r7, #20]
 800c650:	623b      	str	r3, [r7, #32]
 800c652:	e00b      	b.n	800c66c <_SendPacket+0x228>
 800c654:	6a3b      	ldr	r3, [r7, #32]
 800c656:	b2da      	uxtb	r2, r3
 800c658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c65a:	1c59      	adds	r1, r3, #1
 800c65c:	6279      	str	r1, [r7, #36]	; 0x24
 800c65e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c662:	b2d2      	uxtb	r2, r2
 800c664:	701a      	strb	r2, [r3, #0]
 800c666:	6a3b      	ldr	r3, [r7, #32]
 800c668:	09db      	lsrs	r3, r3, #7
 800c66a:	623b      	str	r3, [r7, #32]
 800c66c:	6a3b      	ldr	r3, [r7, #32]
 800c66e:	2b7f      	cmp	r3, #127	; 0x7f
 800c670:	d8f0      	bhi.n	800c654 <_SendPacket+0x210>
 800c672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c674:	1c5a      	adds	r2, r3, #1
 800c676:	627a      	str	r2, [r7, #36]	; 0x24
 800c678:	6a3a      	ldr	r2, [r7, #32]
 800c67a:	b2d2      	uxtb	r2, r2
 800c67c:	701a      	strb	r2, [r3, #0]
 800c67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c680:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800c682:	4b0c      	ldr	r3, [pc, #48]	; (800c6b4 <_SendPacket+0x270>)
 800c684:	785b      	ldrb	r3, [r3, #1]
 800c686:	4618      	mov	r0, r3
 800c688:	68ba      	ldr	r2, [r7, #8]
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	1ad3      	subs	r3, r2, r3
 800c68e:	461a      	mov	r2, r3
 800c690:	68f9      	ldr	r1, [r7, #12]
 800c692:	f7f3 fdad 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800c696:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d003      	beq.n	800c6a6 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800c69e:	4a05      	ldr	r2, [pc, #20]	; (800c6b4 <_SendPacket+0x270>)
 800c6a0:	69bb      	ldr	r3, [r7, #24]
 800c6a2:	60d3      	str	r3, [r2, #12]
 800c6a4:	e00f      	b.n	800c6c6 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800c6a6:	4b03      	ldr	r3, [pc, #12]	; (800c6b4 <_SendPacket+0x270>)
 800c6a8:	781b      	ldrb	r3, [r3, #0]
 800c6aa:	3301      	adds	r3, #1
 800c6ac:	b2da      	uxtb	r2, r3
 800c6ae:	4b01      	ldr	r3, [pc, #4]	; (800c6b4 <_SendPacket+0x270>)
 800c6b0:	701a      	strb	r2, [r3, #0]
 800c6b2:	e008      	b.n	800c6c6 <_SendPacket+0x282>
 800c6b4:	20016834 	.word	0x20016834
 800c6b8:	e0001004 	.word	0xe0001004
    goto SendDone;
 800c6bc:	bf00      	nop
 800c6be:	e002      	b.n	800c6c6 <_SendPacket+0x282>
      goto SendDone;
 800c6c0:	bf00      	nop
 800c6c2:	e000      	b.n	800c6c6 <_SendPacket+0x282>
      goto SendDone;
 800c6c4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800c6c6:	4b14      	ldr	r3, [pc, #80]	; (800c718 <_SendPacket+0x2d4>)
 800c6c8:	7e1b      	ldrb	r3, [r3, #24]
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	4a13      	ldr	r2, [pc, #76]	; (800c71c <_SendPacket+0x2d8>)
 800c6ce:	460b      	mov	r3, r1
 800c6d0:	005b      	lsls	r3, r3, #1
 800c6d2:	440b      	add	r3, r1
 800c6d4:	00db      	lsls	r3, r3, #3
 800c6d6:	4413      	add	r3, r2
 800c6d8:	336c      	adds	r3, #108	; 0x6c
 800c6da:	681a      	ldr	r2, [r3, #0]
 800c6dc:	4b0e      	ldr	r3, [pc, #56]	; (800c718 <_SendPacket+0x2d4>)
 800c6de:	7e1b      	ldrb	r3, [r3, #24]
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	490e      	ldr	r1, [pc, #56]	; (800c71c <_SendPacket+0x2d8>)
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	005b      	lsls	r3, r3, #1
 800c6e8:	4403      	add	r3, r0
 800c6ea:	00db      	lsls	r3, r3, #3
 800c6ec:	440b      	add	r3, r1
 800c6ee:	3370      	adds	r3, #112	; 0x70
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	429a      	cmp	r2, r3
 800c6f4:	d00b      	beq.n	800c70e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800c6f6:	4b08      	ldr	r3, [pc, #32]	; (800c718 <_SendPacket+0x2d4>)
 800c6f8:	789b      	ldrb	r3, [r3, #2]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d107      	bne.n	800c70e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800c6fe:	4b06      	ldr	r3, [pc, #24]	; (800c718 <_SendPacket+0x2d4>)
 800c700:	2201      	movs	r2, #1
 800c702:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800c704:	f7ff fdbc 	bl	800c280 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800c708:	4b03      	ldr	r3, [pc, #12]	; (800c718 <_SendPacket+0x2d4>)
 800c70a:	2200      	movs	r2, #0
 800c70c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800c70e:	bf00      	nop
 800c710:	3728      	adds	r7, #40	; 0x28
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
 800c716:	bf00      	nop
 800c718:	20016834 	.word	0x20016834
 800c71c:	20015374 	.word	0x20015374

0800c720 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 800c720:	b580      	push	{r7, lr}
 800c722:	b0a2      	sub	sp, #136	; 0x88
 800c724:	af00      	add	r7, sp, #0
 800c726:	60f8      	str	r0, [r7, #12]
 800c728:	60b9      	str	r1, [r7, #8]
 800c72a:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 800c730:	2300      	movs	r3, #0
 800c732:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 800c736:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c738:	1c5a      	adds	r2, r3, #1
 800c73a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c73c:	781b      	ldrb	r3, [r3, #0]
 800c73e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 800c742:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c746:	2b00      	cmp	r3, #0
 800c748:	d01d      	beq.n	800c786 <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 800c74a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c74e:	2b25      	cmp	r3, #37	; 0x25
 800c750:	d1f1      	bne.n	800c736 <_VPrintHost+0x16>
      c = *p;
 800c752:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c754:	781b      	ldrb	r3, [r3, #0]
 800c756:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	1d19      	adds	r1, r3, #4
 800c760:	687a      	ldr	r2, [r7, #4]
 800c762:	6011      	str	r1, [r2, #0]
 800c764:	6819      	ldr	r1, [r3, #0]
 800c766:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c76a:	1c5a      	adds	r2, r3, #1
 800c76c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c770:	460a      	mov	r2, r1
 800c772:	009b      	lsls	r3, r3, #2
 800c774:	3388      	adds	r3, #136	; 0x88
 800c776:	443b      	add	r3, r7
 800c778:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 800c77c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c780:	2b10      	cmp	r3, #16
 800c782:	d002      	beq.n	800c78a <_VPrintHost+0x6a>
    c = *p++;
 800c784:	e7d7      	b.n	800c736 <_VPrintHost+0x16>
      break;
 800c786:	bf00      	nop
 800c788:	e000      	b.n	800c78c <_VPrintHost+0x6c>
        break;
 800c78a:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 800c78c:	f3ef 8311 	mrs	r3, BASEPRI
 800c790:	f04f 0120 	mov.w	r1, #32
 800c794:	f381 8811 	msr	BASEPRI, r1
 800c798:	65bb      	str	r3, [r7, #88]	; 0x58
 800c79a:	483f      	ldr	r0, [pc, #252]	; (800c898 <_VPrintHost+0x178>)
 800c79c:	f7ff fd64 	bl	800c268 <_PreparePacket>
 800c7a0:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c7a2:	2280      	movs	r2, #128	; 0x80
 800c7a4:	68f9      	ldr	r1, [r7, #12]
 800c7a6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c7a8:	f7ff fd0e 	bl	800c1c8 <_EncodeStr>
 800c7ac:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 800c7ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c7b0:	677b      	str	r3, [r7, #116]	; 0x74
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	673b      	str	r3, [r7, #112]	; 0x70
 800c7b6:	e00b      	b.n	800c7d0 <_VPrintHost+0xb0>
 800c7b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c7ba:	b2da      	uxtb	r2, r3
 800c7bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c7be:	1c59      	adds	r1, r3, #1
 800c7c0:	6779      	str	r1, [r7, #116]	; 0x74
 800c7c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c7c6:	b2d2      	uxtb	r2, r2
 800c7c8:	701a      	strb	r2, [r3, #0]
 800c7ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c7cc:	09db      	lsrs	r3, r3, #7
 800c7ce:	673b      	str	r3, [r7, #112]	; 0x70
 800c7d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c7d2:	2b7f      	cmp	r3, #127	; 0x7f
 800c7d4:	d8f0      	bhi.n	800c7b8 <_VPrintHost+0x98>
 800c7d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c7d8:	1c5a      	adds	r2, r3, #1
 800c7da:	677a      	str	r2, [r7, #116]	; 0x74
 800c7dc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c7de:	b2d2      	uxtb	r2, r2
 800c7e0:	701a      	strb	r2, [r3, #0]
 800c7e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c7e4:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 800c7e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c7e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c7ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c7ee:	66bb      	str	r3, [r7, #104]	; 0x68
 800c7f0:	e00b      	b.n	800c80a <_VPrintHost+0xea>
 800c7f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c7f4:	b2da      	uxtb	r2, r3
 800c7f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c7f8:	1c59      	adds	r1, r3, #1
 800c7fa:	66f9      	str	r1, [r7, #108]	; 0x6c
 800c7fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c800:	b2d2      	uxtb	r2, r2
 800c802:	701a      	strb	r2, [r3, #0]
 800c804:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c806:	09db      	lsrs	r3, r3, #7
 800c808:	66bb      	str	r3, [r7, #104]	; 0x68
 800c80a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c80c:	2b7f      	cmp	r3, #127	; 0x7f
 800c80e:	d8f0      	bhi.n	800c7f2 <_VPrintHost+0xd2>
 800c810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c812:	1c5a      	adds	r2, r3, #1
 800c814:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c816:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c818:	b2d2      	uxtb	r2, r2
 800c81a:	701a      	strb	r2, [r3, #0]
 800c81c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c81e:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 800c820:	f107 0314 	add.w	r3, r7, #20
 800c824:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 800c828:	e022      	b.n	800c870 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 800c82a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c82c:	667b      	str	r3, [r7, #100]	; 0x64
 800c82e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	663b      	str	r3, [r7, #96]	; 0x60
 800c836:	e00b      	b.n	800c850 <_VPrintHost+0x130>
 800c838:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c83a:	b2da      	uxtb	r2, r3
 800c83c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c83e:	1c59      	adds	r1, r3, #1
 800c840:	6679      	str	r1, [r7, #100]	; 0x64
 800c842:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c846:	b2d2      	uxtb	r2, r2
 800c848:	701a      	strb	r2, [r3, #0]
 800c84a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c84c:	09db      	lsrs	r3, r3, #7
 800c84e:	663b      	str	r3, [r7, #96]	; 0x60
 800c850:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c852:	2b7f      	cmp	r3, #127	; 0x7f
 800c854:	d8f0      	bhi.n	800c838 <_VPrintHost+0x118>
 800c856:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c858:	1c5a      	adds	r2, r3, #1
 800c85a:	667a      	str	r2, [r7, #100]	; 0x64
 800c85c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c85e:	b2d2      	uxtb	r2, r2
 800c860:	701a      	strb	r2, [r3, #0]
 800c862:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c864:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 800c866:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c86a:	3304      	adds	r3, #4
 800c86c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 800c870:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c874:	1e5a      	subs	r2, r3, #1
 800c876:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d1d5      	bne.n	800c82a <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800c87e:	221a      	movs	r2, #26
 800c880:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c882:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c884:	f7ff fdde 	bl	800c444 <_SendPacket>
    RECORD_END();
 800c888:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c88a:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 800c88e:	2300      	movs	r3, #0
}
 800c890:	4618      	mov	r0, r3
 800c892:	3788      	adds	r7, #136	; 0x88
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}
 800c898:	20016864 	.word	0x20016864

0800c89c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b086      	sub	sp, #24
 800c8a0:	af02      	add	r7, sp, #8
 800c8a2:	60f8      	str	r0, [r7, #12]
 800c8a4:	60b9      	str	r1, [r7, #8]
 800c8a6:	607a      	str	r2, [r7, #4]
 800c8a8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c8b0:	4917      	ldr	r1, [pc, #92]	; (800c910 <SEGGER_SYSVIEW_Init+0x74>)
 800c8b2:	4818      	ldr	r0, [pc, #96]	; (800c914 <SEGGER_SYSVIEW_Init+0x78>)
 800c8b4:	f7ff fbb8 	bl	800c028 <SEGGER_RTT_AllocUpBuffer>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	b2da      	uxtb	r2, r3
 800c8bc:	4b16      	ldr	r3, [pc, #88]	; (800c918 <SEGGER_SYSVIEW_Init+0x7c>)
 800c8be:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800c8c0:	4b15      	ldr	r3, [pc, #84]	; (800c918 <SEGGER_SYSVIEW_Init+0x7c>)
 800c8c2:	785a      	ldrb	r2, [r3, #1]
 800c8c4:	4b14      	ldr	r3, [pc, #80]	; (800c918 <SEGGER_SYSVIEW_Init+0x7c>)
 800c8c6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800c8c8:	4b13      	ldr	r3, [pc, #76]	; (800c918 <SEGGER_SYSVIEW_Init+0x7c>)
 800c8ca:	7e1b      	ldrb	r3, [r3, #24]
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	9300      	str	r3, [sp, #0]
 800c8d2:	2308      	movs	r3, #8
 800c8d4:	4a11      	ldr	r2, [pc, #68]	; (800c91c <SEGGER_SYSVIEW_Init+0x80>)
 800c8d6:	490f      	ldr	r1, [pc, #60]	; (800c914 <SEGGER_SYSVIEW_Init+0x78>)
 800c8d8:	f7ff fc2a 	bl	800c130 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800c8dc:	4b0e      	ldr	r3, [pc, #56]	; (800c918 <SEGGER_SYSVIEW_Init+0x7c>)
 800c8de:	2200      	movs	r2, #0
 800c8e0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800c8e2:	4b0f      	ldr	r3, [pc, #60]	; (800c920 <SEGGER_SYSVIEW_Init+0x84>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	4a0c      	ldr	r2, [pc, #48]	; (800c918 <SEGGER_SYSVIEW_Init+0x7c>)
 800c8e8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800c8ea:	4a0b      	ldr	r2, [pc, #44]	; (800c918 <SEGGER_SYSVIEW_Init+0x7c>)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800c8f0:	4a09      	ldr	r2, [pc, #36]	; (800c918 <SEGGER_SYSVIEW_Init+0x7c>)
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800c8f6:	4a08      	ldr	r2, [pc, #32]	; (800c918 <SEGGER_SYSVIEW_Init+0x7c>)
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800c8fc:	4a06      	ldr	r2, [pc, #24]	; (800c918 <SEGGER_SYSVIEW_Init+0x7c>)
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800c902:	4b05      	ldr	r3, [pc, #20]	; (800c918 <SEGGER_SYSVIEW_Init+0x7c>)
 800c904:	2200      	movs	r2, #0
 800c906:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800c908:	bf00      	nop
 800c90a:	3710      	adds	r7, #16
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}
 800c910:	2001582c 	.word	0x2001582c
 800c914:	0800df94 	.word	0x0800df94
 800c918:	20016834 	.word	0x20016834
 800c91c:	2001682c 	.word	0x2001682c
 800c920:	e0001004 	.word	0xe0001004

0800c924 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800c924:	b480      	push	{r7}
 800c926:	b083      	sub	sp, #12
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800c92c:	4a04      	ldr	r2, [pc, #16]	; (800c940 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6113      	str	r3, [r2, #16]
}
 800c932:	bf00      	nop
 800c934:	370c      	adds	r7, #12
 800c936:	46bd      	mov	sp, r7
 800c938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93c:	4770      	bx	lr
 800c93e:	bf00      	nop
 800c940:	20016834 	.word	0x20016834

0800c944 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800c944:	b580      	push	{r7, lr}
 800c946:	b084      	sub	sp, #16
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c94c:	f3ef 8311 	mrs	r3, BASEPRI
 800c950:	f04f 0120 	mov.w	r1, #32
 800c954:	f381 8811 	msr	BASEPRI, r1
 800c958:	60fb      	str	r3, [r7, #12]
 800c95a:	4808      	ldr	r0, [pc, #32]	; (800c97c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800c95c:	f7ff fc84 	bl	800c268 <_PreparePacket>
 800c960:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800c962:	687a      	ldr	r2, [r7, #4]
 800c964:	68b9      	ldr	r1, [r7, #8]
 800c966:	68b8      	ldr	r0, [r7, #8]
 800c968:	f7ff fd6c 	bl	800c444 <_SendPacket>
  RECORD_END();
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	f383 8811 	msr	BASEPRI, r3
}
 800c972:	bf00      	nop
 800c974:	3710      	adds	r7, #16
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	bf00      	nop
 800c97c:	20016864 	.word	0x20016864

0800c980 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800c980:	b580      	push	{r7, lr}
 800c982:	b088      	sub	sp, #32
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c98a:	f3ef 8311 	mrs	r3, BASEPRI
 800c98e:	f04f 0120 	mov.w	r1, #32
 800c992:	f381 8811 	msr	BASEPRI, r1
 800c996:	617b      	str	r3, [r7, #20]
 800c998:	4816      	ldr	r0, [pc, #88]	; (800c9f4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800c99a:	f7ff fc65 	bl	800c268 <_PreparePacket>
 800c99e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	61fb      	str	r3, [r7, #28]
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	61bb      	str	r3, [r7, #24]
 800c9ac:	e00b      	b.n	800c9c6 <SEGGER_SYSVIEW_RecordU32+0x46>
 800c9ae:	69bb      	ldr	r3, [r7, #24]
 800c9b0:	b2da      	uxtb	r2, r3
 800c9b2:	69fb      	ldr	r3, [r7, #28]
 800c9b4:	1c59      	adds	r1, r3, #1
 800c9b6:	61f9      	str	r1, [r7, #28]
 800c9b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c9bc:	b2d2      	uxtb	r2, r2
 800c9be:	701a      	strb	r2, [r3, #0]
 800c9c0:	69bb      	ldr	r3, [r7, #24]
 800c9c2:	09db      	lsrs	r3, r3, #7
 800c9c4:	61bb      	str	r3, [r7, #24]
 800c9c6:	69bb      	ldr	r3, [r7, #24]
 800c9c8:	2b7f      	cmp	r3, #127	; 0x7f
 800c9ca:	d8f0      	bhi.n	800c9ae <SEGGER_SYSVIEW_RecordU32+0x2e>
 800c9cc:	69fb      	ldr	r3, [r7, #28]
 800c9ce:	1c5a      	adds	r2, r3, #1
 800c9d0:	61fa      	str	r2, [r7, #28]
 800c9d2:	69ba      	ldr	r2, [r7, #24]
 800c9d4:	b2d2      	uxtb	r2, r2
 800c9d6:	701a      	strb	r2, [r3, #0]
 800c9d8:	69fb      	ldr	r3, [r7, #28]
 800c9da:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c9dc:	687a      	ldr	r2, [r7, #4]
 800c9de:	68f9      	ldr	r1, [r7, #12]
 800c9e0:	6938      	ldr	r0, [r7, #16]
 800c9e2:	f7ff fd2f 	bl	800c444 <_SendPacket>
  RECORD_END();
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	f383 8811 	msr	BASEPRI, r3
}
 800c9ec:	bf00      	nop
 800c9ee:	3720      	adds	r7, #32
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}
 800c9f4:	20016864 	.word	0x20016864

0800c9f8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b08c      	sub	sp, #48	; 0x30
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	60f8      	str	r0, [r7, #12]
 800ca00:	60b9      	str	r1, [r7, #8]
 800ca02:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800ca04:	f3ef 8311 	mrs	r3, BASEPRI
 800ca08:	f04f 0120 	mov.w	r1, #32
 800ca0c:	f381 8811 	msr	BASEPRI, r1
 800ca10:	61fb      	str	r3, [r7, #28]
 800ca12:	4825      	ldr	r0, [pc, #148]	; (800caa8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800ca14:	f7ff fc28 	bl	800c268 <_PreparePacket>
 800ca18:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800ca1a:	69bb      	ldr	r3, [r7, #24]
 800ca1c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800ca1e:	697b      	ldr	r3, [r7, #20]
 800ca20:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca26:	e00b      	b.n	800ca40 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800ca28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca2a:	b2da      	uxtb	r2, r3
 800ca2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca2e:	1c59      	adds	r1, r3, #1
 800ca30:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ca32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ca36:	b2d2      	uxtb	r2, r2
 800ca38:	701a      	strb	r2, [r3, #0]
 800ca3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca3c:	09db      	lsrs	r3, r3, #7
 800ca3e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca42:	2b7f      	cmp	r3, #127	; 0x7f
 800ca44:	d8f0      	bhi.n	800ca28 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800ca46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca48:	1c5a      	adds	r2, r3, #1
 800ca4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ca4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca4e:	b2d2      	uxtb	r2, r2
 800ca50:	701a      	strb	r2, [r3, #0]
 800ca52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca54:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800ca56:	697b      	ldr	r3, [r7, #20]
 800ca58:	627b      	str	r3, [r7, #36]	; 0x24
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	623b      	str	r3, [r7, #32]
 800ca5e:	e00b      	b.n	800ca78 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800ca60:	6a3b      	ldr	r3, [r7, #32]
 800ca62:	b2da      	uxtb	r2, r3
 800ca64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca66:	1c59      	adds	r1, r3, #1
 800ca68:	6279      	str	r1, [r7, #36]	; 0x24
 800ca6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ca6e:	b2d2      	uxtb	r2, r2
 800ca70:	701a      	strb	r2, [r3, #0]
 800ca72:	6a3b      	ldr	r3, [r7, #32]
 800ca74:	09db      	lsrs	r3, r3, #7
 800ca76:	623b      	str	r3, [r7, #32]
 800ca78:	6a3b      	ldr	r3, [r7, #32]
 800ca7a:	2b7f      	cmp	r3, #127	; 0x7f
 800ca7c:	d8f0      	bhi.n	800ca60 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800ca7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca80:	1c5a      	adds	r2, r3, #1
 800ca82:	627a      	str	r2, [r7, #36]	; 0x24
 800ca84:	6a3a      	ldr	r2, [r7, #32]
 800ca86:	b2d2      	uxtb	r2, r2
 800ca88:	701a      	strb	r2, [r3, #0]
 800ca8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800ca8e:	68fa      	ldr	r2, [r7, #12]
 800ca90:	6979      	ldr	r1, [r7, #20]
 800ca92:	69b8      	ldr	r0, [r7, #24]
 800ca94:	f7ff fcd6 	bl	800c444 <_SendPacket>
  RECORD_END();
 800ca98:	69fb      	ldr	r3, [r7, #28]
 800ca9a:	f383 8811 	msr	BASEPRI, r3
}
 800ca9e:	bf00      	nop
 800caa0:	3730      	adds	r7, #48	; 0x30
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}
 800caa6:	bf00      	nop
 800caa8:	20016864 	.word	0x20016864

0800caac <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800caac:	b580      	push	{r7, lr}
 800caae:	b08e      	sub	sp, #56	; 0x38
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	60f8      	str	r0, [r7, #12]
 800cab4:	60b9      	str	r1, [r7, #8]
 800cab6:	607a      	str	r2, [r7, #4]
 800cab8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800caba:	f3ef 8311 	mrs	r3, BASEPRI
 800cabe:	f04f 0120 	mov.w	r1, #32
 800cac2:	f381 8811 	msr	BASEPRI, r1
 800cac6:	61fb      	str	r3, [r7, #28]
 800cac8:	4832      	ldr	r0, [pc, #200]	; (800cb94 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800caca:	f7ff fbcd 	bl	800c268 <_PreparePacket>
 800cace:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800cad0:	69bb      	ldr	r3, [r7, #24]
 800cad2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	637b      	str	r3, [r7, #52]	; 0x34
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	633b      	str	r3, [r7, #48]	; 0x30
 800cadc:	e00b      	b.n	800caf6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800cade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae0:	b2da      	uxtb	r2, r3
 800cae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cae4:	1c59      	adds	r1, r3, #1
 800cae6:	6379      	str	r1, [r7, #52]	; 0x34
 800cae8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800caec:	b2d2      	uxtb	r2, r2
 800caee:	701a      	strb	r2, [r3, #0]
 800caf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf2:	09db      	lsrs	r3, r3, #7
 800caf4:	633b      	str	r3, [r7, #48]	; 0x30
 800caf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf8:	2b7f      	cmp	r3, #127	; 0x7f
 800cafa:	d8f0      	bhi.n	800cade <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800cafc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cafe:	1c5a      	adds	r2, r3, #1
 800cb00:	637a      	str	r2, [r7, #52]	; 0x34
 800cb02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb04:	b2d2      	uxtb	r2, r2
 800cb06:	701a      	strb	r2, [r3, #0]
 800cb08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb0a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb14:	e00b      	b.n	800cb2e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800cb16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb18:	b2da      	uxtb	r2, r3
 800cb1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb1c:	1c59      	adds	r1, r3, #1
 800cb1e:	62f9      	str	r1, [r7, #44]	; 0x2c
 800cb20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cb24:	b2d2      	uxtb	r2, r2
 800cb26:	701a      	strb	r2, [r3, #0]
 800cb28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb2a:	09db      	lsrs	r3, r3, #7
 800cb2c:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb30:	2b7f      	cmp	r3, #127	; 0x7f
 800cb32:	d8f0      	bhi.n	800cb16 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800cb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb36:	1c5a      	adds	r2, r3, #1
 800cb38:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cb3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb3c:	b2d2      	uxtb	r2, r2
 800cb3e:	701a      	strb	r2, [r3, #0]
 800cb40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb42:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	627b      	str	r3, [r7, #36]	; 0x24
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	623b      	str	r3, [r7, #32]
 800cb4c:	e00b      	b.n	800cb66 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800cb4e:	6a3b      	ldr	r3, [r7, #32]
 800cb50:	b2da      	uxtb	r2, r3
 800cb52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb54:	1c59      	adds	r1, r3, #1
 800cb56:	6279      	str	r1, [r7, #36]	; 0x24
 800cb58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cb5c:	b2d2      	uxtb	r2, r2
 800cb5e:	701a      	strb	r2, [r3, #0]
 800cb60:	6a3b      	ldr	r3, [r7, #32]
 800cb62:	09db      	lsrs	r3, r3, #7
 800cb64:	623b      	str	r3, [r7, #32]
 800cb66:	6a3b      	ldr	r3, [r7, #32]
 800cb68:	2b7f      	cmp	r3, #127	; 0x7f
 800cb6a:	d8f0      	bhi.n	800cb4e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800cb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb6e:	1c5a      	adds	r2, r3, #1
 800cb70:	627a      	str	r2, [r7, #36]	; 0x24
 800cb72:	6a3a      	ldr	r2, [r7, #32]
 800cb74:	b2d2      	uxtb	r2, r2
 800cb76:	701a      	strb	r2, [r3, #0]
 800cb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800cb7c:	68fa      	ldr	r2, [r7, #12]
 800cb7e:	6979      	ldr	r1, [r7, #20]
 800cb80:	69b8      	ldr	r0, [r7, #24]
 800cb82:	f7ff fc5f 	bl	800c444 <_SendPacket>
  RECORD_END();
 800cb86:	69fb      	ldr	r3, [r7, #28]
 800cb88:	f383 8811 	msr	BASEPRI, r3
}
 800cb8c:	bf00      	nop
 800cb8e:	3738      	adds	r7, #56	; 0x38
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}
 800cb94:	20016864 	.word	0x20016864

0800cb98 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b090      	sub	sp, #64	; 0x40
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	60f8      	str	r0, [r7, #12]
 800cba0:	60b9      	str	r1, [r7, #8]
 800cba2:	607a      	str	r2, [r7, #4]
 800cba4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800cba6:	f3ef 8311 	mrs	r3, BASEPRI
 800cbaa:	f04f 0120 	mov.w	r1, #32
 800cbae:	f381 8811 	msr	BASEPRI, r1
 800cbb2:	61fb      	str	r3, [r7, #28]
 800cbb4:	4840      	ldr	r0, [pc, #256]	; (800ccb8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800cbb6:	f7ff fb57 	bl	800c268 <_PreparePacket>
 800cbba:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800cbbc:	69bb      	ldr	r3, [r7, #24]
 800cbbe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800cbc0:	697b      	ldr	r3, [r7, #20]
 800cbc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	63bb      	str	r3, [r7, #56]	; 0x38
 800cbc8:	e00b      	b.n	800cbe2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800cbca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbcc:	b2da      	uxtb	r2, r3
 800cbce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbd0:	1c59      	adds	r1, r3, #1
 800cbd2:	63f9      	str	r1, [r7, #60]	; 0x3c
 800cbd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cbd8:	b2d2      	uxtb	r2, r2
 800cbda:	701a      	strb	r2, [r3, #0]
 800cbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbde:	09db      	lsrs	r3, r3, #7
 800cbe0:	63bb      	str	r3, [r7, #56]	; 0x38
 800cbe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe4:	2b7f      	cmp	r3, #127	; 0x7f
 800cbe6:	d8f0      	bhi.n	800cbca <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800cbe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbea:	1c5a      	adds	r2, r3, #1
 800cbec:	63fa      	str	r2, [r7, #60]	; 0x3c
 800cbee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cbf0:	b2d2      	uxtb	r2, r2
 800cbf2:	701a      	strb	r2, [r3, #0]
 800cbf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbf6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	637b      	str	r3, [r7, #52]	; 0x34
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	633b      	str	r3, [r7, #48]	; 0x30
 800cc00:	e00b      	b.n	800cc1a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800cc02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc04:	b2da      	uxtb	r2, r3
 800cc06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc08:	1c59      	adds	r1, r3, #1
 800cc0a:	6379      	str	r1, [r7, #52]	; 0x34
 800cc0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cc10:	b2d2      	uxtb	r2, r2
 800cc12:	701a      	strb	r2, [r3, #0]
 800cc14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc16:	09db      	lsrs	r3, r3, #7
 800cc18:	633b      	str	r3, [r7, #48]	; 0x30
 800cc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc1c:	2b7f      	cmp	r3, #127	; 0x7f
 800cc1e:	d8f0      	bhi.n	800cc02 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800cc20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc22:	1c5a      	adds	r2, r3, #1
 800cc24:	637a      	str	r2, [r7, #52]	; 0x34
 800cc26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc28:	b2d2      	uxtb	r2, r2
 800cc2a:	701a      	strb	r2, [r3, #0]
 800cc2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc2e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800cc30:	697b      	ldr	r3, [r7, #20]
 800cc32:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc38:	e00b      	b.n	800cc52 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800cc3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc3c:	b2da      	uxtb	r2, r3
 800cc3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc40:	1c59      	adds	r1, r3, #1
 800cc42:	62f9      	str	r1, [r7, #44]	; 0x2c
 800cc44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cc48:	b2d2      	uxtb	r2, r2
 800cc4a:	701a      	strb	r2, [r3, #0]
 800cc4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc4e:	09db      	lsrs	r3, r3, #7
 800cc50:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc54:	2b7f      	cmp	r3, #127	; 0x7f
 800cc56:	d8f0      	bhi.n	800cc3a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800cc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc5a:	1c5a      	adds	r2, r3, #1
 800cc5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cc5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc60:	b2d2      	uxtb	r2, r2
 800cc62:	701a      	strb	r2, [r3, #0]
 800cc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc66:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800cc68:	697b      	ldr	r3, [r7, #20]
 800cc6a:	627b      	str	r3, [r7, #36]	; 0x24
 800cc6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc6e:	623b      	str	r3, [r7, #32]
 800cc70:	e00b      	b.n	800cc8a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800cc72:	6a3b      	ldr	r3, [r7, #32]
 800cc74:	b2da      	uxtb	r2, r3
 800cc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc78:	1c59      	adds	r1, r3, #1
 800cc7a:	6279      	str	r1, [r7, #36]	; 0x24
 800cc7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cc80:	b2d2      	uxtb	r2, r2
 800cc82:	701a      	strb	r2, [r3, #0]
 800cc84:	6a3b      	ldr	r3, [r7, #32]
 800cc86:	09db      	lsrs	r3, r3, #7
 800cc88:	623b      	str	r3, [r7, #32]
 800cc8a:	6a3b      	ldr	r3, [r7, #32]
 800cc8c:	2b7f      	cmp	r3, #127	; 0x7f
 800cc8e:	d8f0      	bhi.n	800cc72 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800cc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc92:	1c5a      	adds	r2, r3, #1
 800cc94:	627a      	str	r2, [r7, #36]	; 0x24
 800cc96:	6a3a      	ldr	r2, [r7, #32]
 800cc98:	b2d2      	uxtb	r2, r2
 800cc9a:	701a      	strb	r2, [r3, #0]
 800cc9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc9e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800cca0:	68fa      	ldr	r2, [r7, #12]
 800cca2:	6979      	ldr	r1, [r7, #20]
 800cca4:	69b8      	ldr	r0, [r7, #24]
 800cca6:	f7ff fbcd 	bl	800c444 <_SendPacket>
  RECORD_END();
 800ccaa:	69fb      	ldr	r3, [r7, #28]
 800ccac:	f383 8811 	msr	BASEPRI, r3
}
 800ccb0:	bf00      	nop
 800ccb2:	3740      	adds	r7, #64	; 0x40
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}
 800ccb8:	20016864 	.word	0x20016864

0800ccbc <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b092      	sub	sp, #72	; 0x48
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	60f8      	str	r0, [r7, #12]
 800ccc4:	60b9      	str	r1, [r7, #8]
 800ccc6:	607a      	str	r2, [r7, #4]
 800ccc8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 800ccca:	f3ef 8311 	mrs	r3, BASEPRI
 800ccce:	f04f 0120 	mov.w	r1, #32
 800ccd2:	f381 8811 	msr	BASEPRI, r1
 800ccd6:	61fb      	str	r3, [r7, #28]
 800ccd8:	484e      	ldr	r0, [pc, #312]	; (800ce14 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 800ccda:	f7ff fac5 	bl	800c268 <_PreparePacket>
 800ccde:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800cce0:	69bb      	ldr	r3, [r7, #24]
 800cce2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	647b      	str	r3, [r7, #68]	; 0x44
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	643b      	str	r3, [r7, #64]	; 0x40
 800ccec:	e00b      	b.n	800cd06 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 800ccee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccf0:	b2da      	uxtb	r2, r3
 800ccf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccf4:	1c59      	adds	r1, r3, #1
 800ccf6:	6479      	str	r1, [r7, #68]	; 0x44
 800ccf8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ccfc:	b2d2      	uxtb	r2, r2
 800ccfe:	701a      	strb	r2, [r3, #0]
 800cd00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd02:	09db      	lsrs	r3, r3, #7
 800cd04:	643b      	str	r3, [r7, #64]	; 0x40
 800cd06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd08:	2b7f      	cmp	r3, #127	; 0x7f
 800cd0a:	d8f0      	bhi.n	800ccee <SEGGER_SYSVIEW_RecordU32x5+0x32>
 800cd0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd0e:	1c5a      	adds	r2, r3, #1
 800cd10:	647a      	str	r2, [r7, #68]	; 0x44
 800cd12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cd14:	b2d2      	uxtb	r2, r2
 800cd16:	701a      	strb	r2, [r3, #0]
 800cd18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd1a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd24:	e00b      	b.n	800cd3e <SEGGER_SYSVIEW_RecordU32x5+0x82>
 800cd26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd28:	b2da      	uxtb	r2, r3
 800cd2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd2c:	1c59      	adds	r1, r3, #1
 800cd2e:	63f9      	str	r1, [r7, #60]	; 0x3c
 800cd30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cd34:	b2d2      	uxtb	r2, r2
 800cd36:	701a      	strb	r2, [r3, #0]
 800cd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd3a:	09db      	lsrs	r3, r3, #7
 800cd3c:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd40:	2b7f      	cmp	r3, #127	; 0x7f
 800cd42:	d8f0      	bhi.n	800cd26 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 800cd44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd46:	1c5a      	adds	r2, r3, #1
 800cd48:	63fa      	str	r2, [r7, #60]	; 0x3c
 800cd4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd4c:	b2d2      	uxtb	r2, r2
 800cd4e:	701a      	strb	r2, [r3, #0]
 800cd50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd52:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	637b      	str	r3, [r7, #52]	; 0x34
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	633b      	str	r3, [r7, #48]	; 0x30
 800cd5c:	e00b      	b.n	800cd76 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 800cd5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd60:	b2da      	uxtb	r2, r3
 800cd62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd64:	1c59      	adds	r1, r3, #1
 800cd66:	6379      	str	r1, [r7, #52]	; 0x34
 800cd68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cd6c:	b2d2      	uxtb	r2, r2
 800cd6e:	701a      	strb	r2, [r3, #0]
 800cd70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd72:	09db      	lsrs	r3, r3, #7
 800cd74:	633b      	str	r3, [r7, #48]	; 0x30
 800cd76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd78:	2b7f      	cmp	r3, #127	; 0x7f
 800cd7a:	d8f0      	bhi.n	800cd5e <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 800cd7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd7e:	1c5a      	adds	r2, r3, #1
 800cd80:	637a      	str	r2, [r7, #52]	; 0x34
 800cd82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd84:	b2d2      	uxtb	r2, r2
 800cd86:	701a      	strb	r2, [r3, #0]
 800cd88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd8a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd92:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd94:	e00b      	b.n	800cdae <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 800cd96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd98:	b2da      	uxtb	r2, r3
 800cd9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd9c:	1c59      	adds	r1, r3, #1
 800cd9e:	62f9      	str	r1, [r7, #44]	; 0x2c
 800cda0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cda4:	b2d2      	uxtb	r2, r2
 800cda6:	701a      	strb	r2, [r3, #0]
 800cda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdaa:	09db      	lsrs	r3, r3, #7
 800cdac:	62bb      	str	r3, [r7, #40]	; 0x28
 800cdae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb0:	2b7f      	cmp	r3, #127	; 0x7f
 800cdb2:	d8f0      	bhi.n	800cd96 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 800cdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb6:	1c5a      	adds	r2, r3, #1
 800cdb8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cdba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdbc:	b2d2      	uxtb	r2, r2
 800cdbe:	701a      	strb	r2, [r3, #0]
 800cdc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	627b      	str	r3, [r7, #36]	; 0x24
 800cdc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdca:	623b      	str	r3, [r7, #32]
 800cdcc:	e00b      	b.n	800cde6 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 800cdce:	6a3b      	ldr	r3, [r7, #32]
 800cdd0:	b2da      	uxtb	r2, r3
 800cdd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd4:	1c59      	adds	r1, r3, #1
 800cdd6:	6279      	str	r1, [r7, #36]	; 0x24
 800cdd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cddc:	b2d2      	uxtb	r2, r2
 800cdde:	701a      	strb	r2, [r3, #0]
 800cde0:	6a3b      	ldr	r3, [r7, #32]
 800cde2:	09db      	lsrs	r3, r3, #7
 800cde4:	623b      	str	r3, [r7, #32]
 800cde6:	6a3b      	ldr	r3, [r7, #32]
 800cde8:	2b7f      	cmp	r3, #127	; 0x7f
 800cdea:	d8f0      	bhi.n	800cdce <SEGGER_SYSVIEW_RecordU32x5+0x112>
 800cdec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdee:	1c5a      	adds	r2, r3, #1
 800cdf0:	627a      	str	r2, [r7, #36]	; 0x24
 800cdf2:	6a3a      	ldr	r2, [r7, #32]
 800cdf4:	b2d2      	uxtb	r2, r2
 800cdf6:	701a      	strb	r2, [r3, #0]
 800cdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdfa:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800cdfc:	68fa      	ldr	r2, [r7, #12]
 800cdfe:	6979      	ldr	r1, [r7, #20]
 800ce00:	69b8      	ldr	r0, [r7, #24]
 800ce02:	f7ff fb1f 	bl	800c444 <_SendPacket>
  RECORD_END();
 800ce06:	69fb      	ldr	r3, [r7, #28]
 800ce08:	f383 8811 	msr	BASEPRI, r3
}
 800ce0c:	bf00      	nop
 800ce0e:	3748      	adds	r7, #72	; 0x48
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}
 800ce14:	20016864 	.word	0x20016864

0800ce18 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b08c      	sub	sp, #48	; 0x30
 800ce1c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800ce1e:	4b58      	ldr	r3, [pc, #352]	; (800cf80 <SEGGER_SYSVIEW_Start+0x168>)
 800ce20:	2201      	movs	r2, #1
 800ce22:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800ce24:	f3ef 8311 	mrs	r3, BASEPRI
 800ce28:	f04f 0120 	mov.w	r1, #32
 800ce2c:	f381 8811 	msr	BASEPRI, r1
 800ce30:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800ce32:	4b53      	ldr	r3, [pc, #332]	; (800cf80 <SEGGER_SYSVIEW_Start+0x168>)
 800ce34:	785b      	ldrb	r3, [r3, #1]
 800ce36:	220a      	movs	r2, #10
 800ce38:	4952      	ldr	r1, [pc, #328]	; (800cf84 <SEGGER_SYSVIEW_Start+0x16c>)
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f7f3 f9d8 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800ce46:	200a      	movs	r0, #10
 800ce48:	f7ff fd7c 	bl	800c944 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800ce4c:	f3ef 8311 	mrs	r3, BASEPRI
 800ce50:	f04f 0120 	mov.w	r1, #32
 800ce54:	f381 8811 	msr	BASEPRI, r1
 800ce58:	60bb      	str	r3, [r7, #8]
 800ce5a:	484b      	ldr	r0, [pc, #300]	; (800cf88 <SEGGER_SYSVIEW_Start+0x170>)
 800ce5c:	f7ff fa04 	bl	800c268 <_PreparePacket>
 800ce60:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce6a:	4b45      	ldr	r3, [pc, #276]	; (800cf80 <SEGGER_SYSVIEW_Start+0x168>)
 800ce6c:	685b      	ldr	r3, [r3, #4]
 800ce6e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce70:	e00b      	b.n	800ce8a <SEGGER_SYSVIEW_Start+0x72>
 800ce72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce74:	b2da      	uxtb	r2, r3
 800ce76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce78:	1c59      	adds	r1, r3, #1
 800ce7a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ce7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ce80:	b2d2      	uxtb	r2, r2
 800ce82:	701a      	strb	r2, [r3, #0]
 800ce84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce86:	09db      	lsrs	r3, r3, #7
 800ce88:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce8c:	2b7f      	cmp	r3, #127	; 0x7f
 800ce8e:	d8f0      	bhi.n	800ce72 <SEGGER_SYSVIEW_Start+0x5a>
 800ce90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce92:	1c5a      	adds	r2, r3, #1
 800ce94:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ce96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce98:	b2d2      	uxtb	r2, r2
 800ce9a:	701a      	strb	r2, [r3, #0]
 800ce9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce9e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	627b      	str	r3, [r7, #36]	; 0x24
 800cea4:	4b36      	ldr	r3, [pc, #216]	; (800cf80 <SEGGER_SYSVIEW_Start+0x168>)
 800cea6:	689b      	ldr	r3, [r3, #8]
 800cea8:	623b      	str	r3, [r7, #32]
 800ceaa:	e00b      	b.n	800cec4 <SEGGER_SYSVIEW_Start+0xac>
 800ceac:	6a3b      	ldr	r3, [r7, #32]
 800ceae:	b2da      	uxtb	r2, r3
 800ceb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb2:	1c59      	adds	r1, r3, #1
 800ceb4:	6279      	str	r1, [r7, #36]	; 0x24
 800ceb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ceba:	b2d2      	uxtb	r2, r2
 800cebc:	701a      	strb	r2, [r3, #0]
 800cebe:	6a3b      	ldr	r3, [r7, #32]
 800cec0:	09db      	lsrs	r3, r3, #7
 800cec2:	623b      	str	r3, [r7, #32]
 800cec4:	6a3b      	ldr	r3, [r7, #32]
 800cec6:	2b7f      	cmp	r3, #127	; 0x7f
 800cec8:	d8f0      	bhi.n	800ceac <SEGGER_SYSVIEW_Start+0x94>
 800ceca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cecc:	1c5a      	adds	r2, r3, #1
 800cece:	627a      	str	r2, [r7, #36]	; 0x24
 800ced0:	6a3a      	ldr	r2, [r7, #32]
 800ced2:	b2d2      	uxtb	r2, r2
 800ced4:	701a      	strb	r2, [r3, #0]
 800ced6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	61fb      	str	r3, [r7, #28]
 800cede:	4b28      	ldr	r3, [pc, #160]	; (800cf80 <SEGGER_SYSVIEW_Start+0x168>)
 800cee0:	691b      	ldr	r3, [r3, #16]
 800cee2:	61bb      	str	r3, [r7, #24]
 800cee4:	e00b      	b.n	800cefe <SEGGER_SYSVIEW_Start+0xe6>
 800cee6:	69bb      	ldr	r3, [r7, #24]
 800cee8:	b2da      	uxtb	r2, r3
 800ceea:	69fb      	ldr	r3, [r7, #28]
 800ceec:	1c59      	adds	r1, r3, #1
 800ceee:	61f9      	str	r1, [r7, #28]
 800cef0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cef4:	b2d2      	uxtb	r2, r2
 800cef6:	701a      	strb	r2, [r3, #0]
 800cef8:	69bb      	ldr	r3, [r7, #24]
 800cefa:	09db      	lsrs	r3, r3, #7
 800cefc:	61bb      	str	r3, [r7, #24]
 800cefe:	69bb      	ldr	r3, [r7, #24]
 800cf00:	2b7f      	cmp	r3, #127	; 0x7f
 800cf02:	d8f0      	bhi.n	800cee6 <SEGGER_SYSVIEW_Start+0xce>
 800cf04:	69fb      	ldr	r3, [r7, #28]
 800cf06:	1c5a      	adds	r2, r3, #1
 800cf08:	61fa      	str	r2, [r7, #28]
 800cf0a:	69ba      	ldr	r2, [r7, #24]
 800cf0c:	b2d2      	uxtb	r2, r2
 800cf0e:	701a      	strb	r2, [r3, #0]
 800cf10:	69fb      	ldr	r3, [r7, #28]
 800cf12:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	617b      	str	r3, [r7, #20]
 800cf18:	2300      	movs	r3, #0
 800cf1a:	613b      	str	r3, [r7, #16]
 800cf1c:	e00b      	b.n	800cf36 <SEGGER_SYSVIEW_Start+0x11e>
 800cf1e:	693b      	ldr	r3, [r7, #16]
 800cf20:	b2da      	uxtb	r2, r3
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	1c59      	adds	r1, r3, #1
 800cf26:	6179      	str	r1, [r7, #20]
 800cf28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cf2c:	b2d2      	uxtb	r2, r2
 800cf2e:	701a      	strb	r2, [r3, #0]
 800cf30:	693b      	ldr	r3, [r7, #16]
 800cf32:	09db      	lsrs	r3, r3, #7
 800cf34:	613b      	str	r3, [r7, #16]
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	2b7f      	cmp	r3, #127	; 0x7f
 800cf3a:	d8f0      	bhi.n	800cf1e <SEGGER_SYSVIEW_Start+0x106>
 800cf3c:	697b      	ldr	r3, [r7, #20]
 800cf3e:	1c5a      	adds	r2, r3, #1
 800cf40:	617a      	str	r2, [r7, #20]
 800cf42:	693a      	ldr	r2, [r7, #16]
 800cf44:	b2d2      	uxtb	r2, r2
 800cf46:	701a      	strb	r2, [r3, #0]
 800cf48:	697b      	ldr	r3, [r7, #20]
 800cf4a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800cf4c:	2218      	movs	r2, #24
 800cf4e:	6839      	ldr	r1, [r7, #0]
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f7ff fa77 	bl	800c444 <_SendPacket>
      RECORD_END();
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800cf5c:	4b08      	ldr	r3, [pc, #32]	; (800cf80 <SEGGER_SYSVIEW_Start+0x168>)
 800cf5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d002      	beq.n	800cf6a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800cf64:	4b06      	ldr	r3, [pc, #24]	; (800cf80 <SEGGER_SYSVIEW_Start+0x168>)
 800cf66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf68:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800cf6a:	f000 f9eb 	bl	800d344 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800cf6e:	f000 f9b1 	bl	800d2d4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800cf72:	f000 fc83 	bl	800d87c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800cf76:	bf00      	nop
 800cf78:	3730      	adds	r7, #48	; 0x30
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}
 800cf7e:	bf00      	nop
 800cf80:	20016834 	.word	0x20016834
 800cf84:	0800e074 	.word	0x0800e074
 800cf88:	20016864 	.word	0x20016864

0800cf8c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b082      	sub	sp, #8
 800cf90:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800cf92:	f3ef 8311 	mrs	r3, BASEPRI
 800cf96:	f04f 0120 	mov.w	r1, #32
 800cf9a:	f381 8811 	msr	BASEPRI, r1
 800cf9e:	607b      	str	r3, [r7, #4]
 800cfa0:	480b      	ldr	r0, [pc, #44]	; (800cfd0 <SEGGER_SYSVIEW_Stop+0x44>)
 800cfa2:	f7ff f961 	bl	800c268 <_PreparePacket>
 800cfa6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800cfa8:	4b0a      	ldr	r3, [pc, #40]	; (800cfd4 <SEGGER_SYSVIEW_Stop+0x48>)
 800cfaa:	781b      	ldrb	r3, [r3, #0]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d007      	beq.n	800cfc0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800cfb0:	220b      	movs	r2, #11
 800cfb2:	6839      	ldr	r1, [r7, #0]
 800cfb4:	6838      	ldr	r0, [r7, #0]
 800cfb6:	f7ff fa45 	bl	800c444 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800cfba:	4b06      	ldr	r3, [pc, #24]	; (800cfd4 <SEGGER_SYSVIEW_Stop+0x48>)
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f383 8811 	msr	BASEPRI, r3
}
 800cfc6:	bf00      	nop
 800cfc8:	3708      	adds	r7, #8
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}
 800cfce:	bf00      	nop
 800cfd0:	20016864 	.word	0x20016864
 800cfd4:	20016834 	.word	0x20016834

0800cfd8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b08c      	sub	sp, #48	; 0x30
 800cfdc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800cfde:	f3ef 8311 	mrs	r3, BASEPRI
 800cfe2:	f04f 0120 	mov.w	r1, #32
 800cfe6:	f381 8811 	msr	BASEPRI, r1
 800cfea:	60fb      	str	r3, [r7, #12]
 800cfec:	4845      	ldr	r0, [pc, #276]	; (800d104 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800cfee:	f7ff f93b 	bl	800c268 <_PreparePacket>
 800cff2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cffc:	4b42      	ldr	r3, [pc, #264]	; (800d108 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800cffe:	685b      	ldr	r3, [r3, #4]
 800d000:	62bb      	str	r3, [r7, #40]	; 0x28
 800d002:	e00b      	b.n	800d01c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800d004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d006:	b2da      	uxtb	r2, r3
 800d008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d00a:	1c59      	adds	r1, r3, #1
 800d00c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800d00e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d012:	b2d2      	uxtb	r2, r2
 800d014:	701a      	strb	r2, [r3, #0]
 800d016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d018:	09db      	lsrs	r3, r3, #7
 800d01a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d01e:	2b7f      	cmp	r3, #127	; 0x7f
 800d020:	d8f0      	bhi.n	800d004 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800d022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d024:	1c5a      	adds	r2, r3, #1
 800d026:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d028:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d02a:	b2d2      	uxtb	r2, r2
 800d02c:	701a      	strb	r2, [r3, #0]
 800d02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d030:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	627b      	str	r3, [r7, #36]	; 0x24
 800d036:	4b34      	ldr	r3, [pc, #208]	; (800d108 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d038:	689b      	ldr	r3, [r3, #8]
 800d03a:	623b      	str	r3, [r7, #32]
 800d03c:	e00b      	b.n	800d056 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800d03e:	6a3b      	ldr	r3, [r7, #32]
 800d040:	b2da      	uxtb	r2, r3
 800d042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d044:	1c59      	adds	r1, r3, #1
 800d046:	6279      	str	r1, [r7, #36]	; 0x24
 800d048:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d04c:	b2d2      	uxtb	r2, r2
 800d04e:	701a      	strb	r2, [r3, #0]
 800d050:	6a3b      	ldr	r3, [r7, #32]
 800d052:	09db      	lsrs	r3, r3, #7
 800d054:	623b      	str	r3, [r7, #32]
 800d056:	6a3b      	ldr	r3, [r7, #32]
 800d058:	2b7f      	cmp	r3, #127	; 0x7f
 800d05a:	d8f0      	bhi.n	800d03e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800d05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d05e:	1c5a      	adds	r2, r3, #1
 800d060:	627a      	str	r2, [r7, #36]	; 0x24
 800d062:	6a3a      	ldr	r2, [r7, #32]
 800d064:	b2d2      	uxtb	r2, r2
 800d066:	701a      	strb	r2, [r3, #0]
 800d068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d06a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	61fb      	str	r3, [r7, #28]
 800d070:	4b25      	ldr	r3, [pc, #148]	; (800d108 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d072:	691b      	ldr	r3, [r3, #16]
 800d074:	61bb      	str	r3, [r7, #24]
 800d076:	e00b      	b.n	800d090 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800d078:	69bb      	ldr	r3, [r7, #24]
 800d07a:	b2da      	uxtb	r2, r3
 800d07c:	69fb      	ldr	r3, [r7, #28]
 800d07e:	1c59      	adds	r1, r3, #1
 800d080:	61f9      	str	r1, [r7, #28]
 800d082:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d086:	b2d2      	uxtb	r2, r2
 800d088:	701a      	strb	r2, [r3, #0]
 800d08a:	69bb      	ldr	r3, [r7, #24]
 800d08c:	09db      	lsrs	r3, r3, #7
 800d08e:	61bb      	str	r3, [r7, #24]
 800d090:	69bb      	ldr	r3, [r7, #24]
 800d092:	2b7f      	cmp	r3, #127	; 0x7f
 800d094:	d8f0      	bhi.n	800d078 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800d096:	69fb      	ldr	r3, [r7, #28]
 800d098:	1c5a      	adds	r2, r3, #1
 800d09a:	61fa      	str	r2, [r7, #28]
 800d09c:	69ba      	ldr	r2, [r7, #24]
 800d09e:	b2d2      	uxtb	r2, r2
 800d0a0:	701a      	strb	r2, [r3, #0]
 800d0a2:	69fb      	ldr	r3, [r7, #28]
 800d0a4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	617b      	str	r3, [r7, #20]
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	613b      	str	r3, [r7, #16]
 800d0ae:	e00b      	b.n	800d0c8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	b2da      	uxtb	r2, r3
 800d0b4:	697b      	ldr	r3, [r7, #20]
 800d0b6:	1c59      	adds	r1, r3, #1
 800d0b8:	6179      	str	r1, [r7, #20]
 800d0ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d0be:	b2d2      	uxtb	r2, r2
 800d0c0:	701a      	strb	r2, [r3, #0]
 800d0c2:	693b      	ldr	r3, [r7, #16]
 800d0c4:	09db      	lsrs	r3, r3, #7
 800d0c6:	613b      	str	r3, [r7, #16]
 800d0c8:	693b      	ldr	r3, [r7, #16]
 800d0ca:	2b7f      	cmp	r3, #127	; 0x7f
 800d0cc:	d8f0      	bhi.n	800d0b0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	1c5a      	adds	r2, r3, #1
 800d0d2:	617a      	str	r2, [r7, #20]
 800d0d4:	693a      	ldr	r2, [r7, #16]
 800d0d6:	b2d2      	uxtb	r2, r2
 800d0d8:	701a      	strb	r2, [r3, #0]
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800d0de:	2218      	movs	r2, #24
 800d0e0:	6879      	ldr	r1, [r7, #4]
 800d0e2:	68b8      	ldr	r0, [r7, #8]
 800d0e4:	f7ff f9ae 	bl	800c444 <_SendPacket>
  RECORD_END();
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800d0ee:	4b06      	ldr	r3, [pc, #24]	; (800d108 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d0f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d002      	beq.n	800d0fc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800d0f6:	4b04      	ldr	r3, [pc, #16]	; (800d108 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0fa:	4798      	blx	r3
  }
}
 800d0fc:	bf00      	nop
 800d0fe:	3730      	adds	r7, #48	; 0x30
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}
 800d104:	20016864 	.word	0x20016864
 800d108:	20016834 	.word	0x20016834

0800d10c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b092      	sub	sp, #72	; 0x48
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800d114:	f3ef 8311 	mrs	r3, BASEPRI
 800d118:	f04f 0120 	mov.w	r1, #32
 800d11c:	f381 8811 	msr	BASEPRI, r1
 800d120:	617b      	str	r3, [r7, #20]
 800d122:	486a      	ldr	r0, [pc, #424]	; (800d2cc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800d124:	f7ff f8a0 	bl	800c268 <_PreparePacket>
 800d128:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	647b      	str	r3, [r7, #68]	; 0x44
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681a      	ldr	r2, [r3, #0]
 800d136:	4b66      	ldr	r3, [pc, #408]	; (800d2d0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800d138:	691b      	ldr	r3, [r3, #16]
 800d13a:	1ad3      	subs	r3, r2, r3
 800d13c:	643b      	str	r3, [r7, #64]	; 0x40
 800d13e:	e00b      	b.n	800d158 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800d140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d142:	b2da      	uxtb	r2, r3
 800d144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d146:	1c59      	adds	r1, r3, #1
 800d148:	6479      	str	r1, [r7, #68]	; 0x44
 800d14a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d14e:	b2d2      	uxtb	r2, r2
 800d150:	701a      	strb	r2, [r3, #0]
 800d152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d154:	09db      	lsrs	r3, r3, #7
 800d156:	643b      	str	r3, [r7, #64]	; 0x40
 800d158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d15a:	2b7f      	cmp	r3, #127	; 0x7f
 800d15c:	d8f0      	bhi.n	800d140 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800d15e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d160:	1c5a      	adds	r2, r3, #1
 800d162:	647a      	str	r2, [r7, #68]	; 0x44
 800d164:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d166:	b2d2      	uxtb	r2, r2
 800d168:	701a      	strb	r2, [r3, #0]
 800d16a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d16c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	689b      	ldr	r3, [r3, #8]
 800d176:	63bb      	str	r3, [r7, #56]	; 0x38
 800d178:	e00b      	b.n	800d192 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800d17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d17c:	b2da      	uxtb	r2, r3
 800d17e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d180:	1c59      	adds	r1, r3, #1
 800d182:	63f9      	str	r1, [r7, #60]	; 0x3c
 800d184:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d188:	b2d2      	uxtb	r2, r2
 800d18a:	701a      	strb	r2, [r3, #0]
 800d18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d18e:	09db      	lsrs	r3, r3, #7
 800d190:	63bb      	str	r3, [r7, #56]	; 0x38
 800d192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d194:	2b7f      	cmp	r3, #127	; 0x7f
 800d196:	d8f0      	bhi.n	800d17a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800d198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d19a:	1c5a      	adds	r2, r3, #1
 800d19c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d19e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d1a0:	b2d2      	uxtb	r2, r2
 800d1a2:	701a      	strb	r2, [r3, #0]
 800d1a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1a6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	685b      	ldr	r3, [r3, #4]
 800d1ac:	2220      	movs	r2, #32
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	68f8      	ldr	r0, [r7, #12]
 800d1b2:	f7ff f809 	bl	800c1c8 <_EncodeStr>
 800d1b6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800d1b8:	2209      	movs	r2, #9
 800d1ba:	68f9      	ldr	r1, [r7, #12]
 800d1bc:	6938      	ldr	r0, [r7, #16]
 800d1be:	f7ff f941 	bl	800c444 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800d1c2:	693b      	ldr	r3, [r7, #16]
 800d1c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	637b      	str	r3, [r7, #52]	; 0x34
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681a      	ldr	r2, [r3, #0]
 800d1ce:	4b40      	ldr	r3, [pc, #256]	; (800d2d0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800d1d0:	691b      	ldr	r3, [r3, #16]
 800d1d2:	1ad3      	subs	r3, r2, r3
 800d1d4:	633b      	str	r3, [r7, #48]	; 0x30
 800d1d6:	e00b      	b.n	800d1f0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800d1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1da:	b2da      	uxtb	r2, r3
 800d1dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1de:	1c59      	adds	r1, r3, #1
 800d1e0:	6379      	str	r1, [r7, #52]	; 0x34
 800d1e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d1e6:	b2d2      	uxtb	r2, r2
 800d1e8:	701a      	strb	r2, [r3, #0]
 800d1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ec:	09db      	lsrs	r3, r3, #7
 800d1ee:	633b      	str	r3, [r7, #48]	; 0x30
 800d1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f2:	2b7f      	cmp	r3, #127	; 0x7f
 800d1f4:	d8f0      	bhi.n	800d1d8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800d1f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1f8:	1c5a      	adds	r2, r3, #1
 800d1fa:	637a      	str	r2, [r7, #52]	; 0x34
 800d1fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1fe:	b2d2      	uxtb	r2, r2
 800d200:	701a      	strb	r2, [r3, #0]
 800d202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d204:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	68db      	ldr	r3, [r3, #12]
 800d20e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d210:	e00b      	b.n	800d22a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800d212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d214:	b2da      	uxtb	r2, r3
 800d216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d218:	1c59      	adds	r1, r3, #1
 800d21a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800d21c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d220:	b2d2      	uxtb	r2, r2
 800d222:	701a      	strb	r2, [r3, #0]
 800d224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d226:	09db      	lsrs	r3, r3, #7
 800d228:	62bb      	str	r3, [r7, #40]	; 0x28
 800d22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d22c:	2b7f      	cmp	r3, #127	; 0x7f
 800d22e:	d8f0      	bhi.n	800d212 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800d230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d232:	1c5a      	adds	r2, r3, #1
 800d234:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d238:	b2d2      	uxtb	r2, r2
 800d23a:	701a      	strb	r2, [r3, #0]
 800d23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d23e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	627b      	str	r3, [r7, #36]	; 0x24
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	691b      	ldr	r3, [r3, #16]
 800d248:	623b      	str	r3, [r7, #32]
 800d24a:	e00b      	b.n	800d264 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800d24c:	6a3b      	ldr	r3, [r7, #32]
 800d24e:	b2da      	uxtb	r2, r3
 800d250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d252:	1c59      	adds	r1, r3, #1
 800d254:	6279      	str	r1, [r7, #36]	; 0x24
 800d256:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d25a:	b2d2      	uxtb	r2, r2
 800d25c:	701a      	strb	r2, [r3, #0]
 800d25e:	6a3b      	ldr	r3, [r7, #32]
 800d260:	09db      	lsrs	r3, r3, #7
 800d262:	623b      	str	r3, [r7, #32]
 800d264:	6a3b      	ldr	r3, [r7, #32]
 800d266:	2b7f      	cmp	r3, #127	; 0x7f
 800d268:	d8f0      	bhi.n	800d24c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800d26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d26c:	1c5a      	adds	r2, r3, #1
 800d26e:	627a      	str	r2, [r7, #36]	; 0x24
 800d270:	6a3a      	ldr	r2, [r7, #32]
 800d272:	b2d2      	uxtb	r2, r2
 800d274:	701a      	strb	r2, [r3, #0]
 800d276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d278:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	61fb      	str	r3, [r7, #28]
 800d27e:	2300      	movs	r3, #0
 800d280:	61bb      	str	r3, [r7, #24]
 800d282:	e00b      	b.n	800d29c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800d284:	69bb      	ldr	r3, [r7, #24]
 800d286:	b2da      	uxtb	r2, r3
 800d288:	69fb      	ldr	r3, [r7, #28]
 800d28a:	1c59      	adds	r1, r3, #1
 800d28c:	61f9      	str	r1, [r7, #28]
 800d28e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d292:	b2d2      	uxtb	r2, r2
 800d294:	701a      	strb	r2, [r3, #0]
 800d296:	69bb      	ldr	r3, [r7, #24]
 800d298:	09db      	lsrs	r3, r3, #7
 800d29a:	61bb      	str	r3, [r7, #24]
 800d29c:	69bb      	ldr	r3, [r7, #24]
 800d29e:	2b7f      	cmp	r3, #127	; 0x7f
 800d2a0:	d8f0      	bhi.n	800d284 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800d2a2:	69fb      	ldr	r3, [r7, #28]
 800d2a4:	1c5a      	adds	r2, r3, #1
 800d2a6:	61fa      	str	r2, [r7, #28]
 800d2a8:	69ba      	ldr	r2, [r7, #24]
 800d2aa:	b2d2      	uxtb	r2, r2
 800d2ac:	701a      	strb	r2, [r3, #0]
 800d2ae:	69fb      	ldr	r3, [r7, #28]
 800d2b0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800d2b2:	2215      	movs	r2, #21
 800d2b4:	68f9      	ldr	r1, [r7, #12]
 800d2b6:	6938      	ldr	r0, [r7, #16]
 800d2b8:	f7ff f8c4 	bl	800c444 <_SendPacket>
  RECORD_END();
 800d2bc:	697b      	ldr	r3, [r7, #20]
 800d2be:	f383 8811 	msr	BASEPRI, r3
}
 800d2c2:	bf00      	nop
 800d2c4:	3748      	adds	r7, #72	; 0x48
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}
 800d2ca:	bf00      	nop
 800d2cc:	20016864 	.word	0x20016864
 800d2d0:	20016834 	.word	0x20016834

0800d2d4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800d2d8:	4b07      	ldr	r3, [pc, #28]	; (800d2f8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800d2da:	6a1b      	ldr	r3, [r3, #32]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d008      	beq.n	800d2f2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800d2e0:	4b05      	ldr	r3, [pc, #20]	; (800d2f8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800d2e2:	6a1b      	ldr	r3, [r3, #32]
 800d2e4:	685b      	ldr	r3, [r3, #4]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d003      	beq.n	800d2f2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800d2ea:	4b03      	ldr	r3, [pc, #12]	; (800d2f8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800d2ec:	6a1b      	ldr	r3, [r3, #32]
 800d2ee:	685b      	ldr	r3, [r3, #4]
 800d2f0:	4798      	blx	r3
  }
}
 800d2f2:	bf00      	nop
 800d2f4:	bd80      	pop	{r7, pc}
 800d2f6:	bf00      	nop
 800d2f8:	20016834 	.word	0x20016834

0800d2fc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b086      	sub	sp, #24
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d304:	f3ef 8311 	mrs	r3, BASEPRI
 800d308:	f04f 0120 	mov.w	r1, #32
 800d30c:	f381 8811 	msr	BASEPRI, r1
 800d310:	617b      	str	r3, [r7, #20]
 800d312:	480b      	ldr	r0, [pc, #44]	; (800d340 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800d314:	f7fe ffa8 	bl	800c268 <_PreparePacket>
 800d318:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d31a:	2280      	movs	r2, #128	; 0x80
 800d31c:	6879      	ldr	r1, [r7, #4]
 800d31e:	6938      	ldr	r0, [r7, #16]
 800d320:	f7fe ff52 	bl	800c1c8 <_EncodeStr>
 800d324:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800d326:	220e      	movs	r2, #14
 800d328:	68f9      	ldr	r1, [r7, #12]
 800d32a:	6938      	ldr	r0, [r7, #16]
 800d32c:	f7ff f88a 	bl	800c444 <_SendPacket>
  RECORD_END();
 800d330:	697b      	ldr	r3, [r7, #20]
 800d332:	f383 8811 	msr	BASEPRI, r3
}
 800d336:	bf00      	nop
 800d338:	3718      	adds	r7, #24
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}
 800d33e:	bf00      	nop
 800d340:	20016864 	.word	0x20016864

0800d344 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800d344:	b590      	push	{r4, r7, lr}
 800d346:	b083      	sub	sp, #12
 800d348:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800d34a:	4b15      	ldr	r3, [pc, #84]	; (800d3a0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800d34c:	6a1b      	ldr	r3, [r3, #32]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d01a      	beq.n	800d388 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800d352:	4b13      	ldr	r3, [pc, #76]	; (800d3a0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800d354:	6a1b      	ldr	r3, [r3, #32]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d015      	beq.n	800d388 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800d35c:	4b10      	ldr	r3, [pc, #64]	; (800d3a0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800d35e:	6a1b      	ldr	r3, [r3, #32]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	4798      	blx	r3
 800d364:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800d368:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800d36a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d36e:	f04f 0200 	mov.w	r2, #0
 800d372:	f04f 0300 	mov.w	r3, #0
 800d376:	000a      	movs	r2, r1
 800d378:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800d37a:	4613      	mov	r3, r2
 800d37c:	461a      	mov	r2, r3
 800d37e:	4621      	mov	r1, r4
 800d380:	200d      	movs	r0, #13
 800d382:	f7ff fb39 	bl	800c9f8 <SEGGER_SYSVIEW_RecordU32x2>
 800d386:	e006      	b.n	800d396 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800d388:	4b06      	ldr	r3, [pc, #24]	; (800d3a4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	4619      	mov	r1, r3
 800d38e:	200c      	movs	r0, #12
 800d390:	f7ff faf6 	bl	800c980 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800d394:	bf00      	nop
 800d396:	bf00      	nop
 800d398:	370c      	adds	r7, #12
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd90      	pop	{r4, r7, pc}
 800d39e:	bf00      	nop
 800d3a0:	20016834 	.word	0x20016834
 800d3a4:	e0001004 	.word	0xe0001004

0800d3a8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b086      	sub	sp, #24
 800d3ac:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d3ae:	f3ef 8311 	mrs	r3, BASEPRI
 800d3b2:	f04f 0120 	mov.w	r1, #32
 800d3b6:	f381 8811 	msr	BASEPRI, r1
 800d3ba:	60fb      	str	r3, [r7, #12]
 800d3bc:	4819      	ldr	r0, [pc, #100]	; (800d424 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800d3be:	f7fe ff53 	bl	800c268 <_PreparePacket>
 800d3c2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800d3c8:	4b17      	ldr	r3, [pc, #92]	; (800d428 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3d0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	617b      	str	r3, [r7, #20]
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	613b      	str	r3, [r7, #16]
 800d3da:	e00b      	b.n	800d3f4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	b2da      	uxtb	r2, r3
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	1c59      	adds	r1, r3, #1
 800d3e4:	6179      	str	r1, [r7, #20]
 800d3e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d3ea:	b2d2      	uxtb	r2, r2
 800d3ec:	701a      	strb	r2, [r3, #0]
 800d3ee:	693b      	ldr	r3, [r7, #16]
 800d3f0:	09db      	lsrs	r3, r3, #7
 800d3f2:	613b      	str	r3, [r7, #16]
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	2b7f      	cmp	r3, #127	; 0x7f
 800d3f8:	d8f0      	bhi.n	800d3dc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	1c5a      	adds	r2, r3, #1
 800d3fe:	617a      	str	r2, [r7, #20]
 800d400:	693a      	ldr	r2, [r7, #16]
 800d402:	b2d2      	uxtb	r2, r2
 800d404:	701a      	strb	r2, [r3, #0]
 800d406:	697b      	ldr	r3, [r7, #20]
 800d408:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800d40a:	2202      	movs	r2, #2
 800d40c:	6879      	ldr	r1, [r7, #4]
 800d40e:	68b8      	ldr	r0, [r7, #8]
 800d410:	f7ff f818 	bl	800c444 <_SendPacket>
  RECORD_END();
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	f383 8811 	msr	BASEPRI, r3
}
 800d41a:	bf00      	nop
 800d41c:	3718      	adds	r7, #24
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}
 800d422:	bf00      	nop
 800d424:	20016864 	.word	0x20016864
 800d428:	e000ed04 	.word	0xe000ed04

0800d42c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b082      	sub	sp, #8
 800d430:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d432:	f3ef 8311 	mrs	r3, BASEPRI
 800d436:	f04f 0120 	mov.w	r1, #32
 800d43a:	f381 8811 	msr	BASEPRI, r1
 800d43e:	607b      	str	r3, [r7, #4]
 800d440:	4807      	ldr	r0, [pc, #28]	; (800d460 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800d442:	f7fe ff11 	bl	800c268 <_PreparePacket>
 800d446:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800d448:	2203      	movs	r2, #3
 800d44a:	6839      	ldr	r1, [r7, #0]
 800d44c:	6838      	ldr	r0, [r7, #0]
 800d44e:	f7fe fff9 	bl	800c444 <_SendPacket>
  RECORD_END();
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f383 8811 	msr	BASEPRI, r3
}
 800d458:	bf00      	nop
 800d45a:	3708      	adds	r7, #8
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}
 800d460:	20016864 	.word	0x20016864

0800d464 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800d464:	b580      	push	{r7, lr}
 800d466:	b082      	sub	sp, #8
 800d468:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d46a:	f3ef 8311 	mrs	r3, BASEPRI
 800d46e:	f04f 0120 	mov.w	r1, #32
 800d472:	f381 8811 	msr	BASEPRI, r1
 800d476:	607b      	str	r3, [r7, #4]
 800d478:	4807      	ldr	r0, [pc, #28]	; (800d498 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800d47a:	f7fe fef5 	bl	800c268 <_PreparePacket>
 800d47e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800d480:	2212      	movs	r2, #18
 800d482:	6839      	ldr	r1, [r7, #0]
 800d484:	6838      	ldr	r0, [r7, #0]
 800d486:	f7fe ffdd 	bl	800c444 <_SendPacket>
  RECORD_END();
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f383 8811 	msr	BASEPRI, r3
}
 800d490:	bf00      	nop
 800d492:	3708      	adds	r7, #8
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}
 800d498:	20016864 	.word	0x20016864

0800d49c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b082      	sub	sp, #8
 800d4a0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d4a2:	f3ef 8311 	mrs	r3, BASEPRI
 800d4a6:	f04f 0120 	mov.w	r1, #32
 800d4aa:	f381 8811 	msr	BASEPRI, r1
 800d4ae:	607b      	str	r3, [r7, #4]
 800d4b0:	4807      	ldr	r0, [pc, #28]	; (800d4d0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800d4b2:	f7fe fed9 	bl	800c268 <_PreparePacket>
 800d4b6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800d4b8:	2211      	movs	r2, #17
 800d4ba:	6839      	ldr	r1, [r7, #0]
 800d4bc:	6838      	ldr	r0, [r7, #0]
 800d4be:	f7fe ffc1 	bl	800c444 <_SendPacket>
  RECORD_END();
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f383 8811 	msr	BASEPRI, r3
}
 800d4c8:	bf00      	nop
 800d4ca:	3708      	adds	r7, #8
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}
 800d4d0:	20016864 	.word	0x20016864

0800d4d4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b088      	sub	sp, #32
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d4dc:	f3ef 8311 	mrs	r3, BASEPRI
 800d4e0:	f04f 0120 	mov.w	r1, #32
 800d4e4:	f381 8811 	msr	BASEPRI, r1
 800d4e8:	617b      	str	r3, [r7, #20]
 800d4ea:	4819      	ldr	r0, [pc, #100]	; (800d550 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800d4ec:	f7fe febc 	bl	800c268 <_PreparePacket>
 800d4f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d4f6:	4b17      	ldr	r3, [pc, #92]	; (800d554 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800d4f8:	691b      	ldr	r3, [r3, #16]
 800d4fa:	687a      	ldr	r2, [r7, #4]
 800d4fc:	1ad3      	subs	r3, r2, r3
 800d4fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	61fb      	str	r3, [r7, #28]
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	61bb      	str	r3, [r7, #24]
 800d508:	e00b      	b.n	800d522 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800d50a:	69bb      	ldr	r3, [r7, #24]
 800d50c:	b2da      	uxtb	r2, r3
 800d50e:	69fb      	ldr	r3, [r7, #28]
 800d510:	1c59      	adds	r1, r3, #1
 800d512:	61f9      	str	r1, [r7, #28]
 800d514:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d518:	b2d2      	uxtb	r2, r2
 800d51a:	701a      	strb	r2, [r3, #0]
 800d51c:	69bb      	ldr	r3, [r7, #24]
 800d51e:	09db      	lsrs	r3, r3, #7
 800d520:	61bb      	str	r3, [r7, #24]
 800d522:	69bb      	ldr	r3, [r7, #24]
 800d524:	2b7f      	cmp	r3, #127	; 0x7f
 800d526:	d8f0      	bhi.n	800d50a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800d528:	69fb      	ldr	r3, [r7, #28]
 800d52a:	1c5a      	adds	r2, r3, #1
 800d52c:	61fa      	str	r2, [r7, #28]
 800d52e:	69ba      	ldr	r2, [r7, #24]
 800d530:	b2d2      	uxtb	r2, r2
 800d532:	701a      	strb	r2, [r3, #0]
 800d534:	69fb      	ldr	r3, [r7, #28]
 800d536:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800d538:	2208      	movs	r2, #8
 800d53a:	68f9      	ldr	r1, [r7, #12]
 800d53c:	6938      	ldr	r0, [r7, #16]
 800d53e:	f7fe ff81 	bl	800c444 <_SendPacket>
  RECORD_END();
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	f383 8811 	msr	BASEPRI, r3
}
 800d548:	bf00      	nop
 800d54a:	3720      	adds	r7, #32
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}
 800d550:	20016864 	.word	0x20016864
 800d554:	20016834 	.word	0x20016834

0800d558 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800d558:	b580      	push	{r7, lr}
 800d55a:	b088      	sub	sp, #32
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d560:	f3ef 8311 	mrs	r3, BASEPRI
 800d564:	f04f 0120 	mov.w	r1, #32
 800d568:	f381 8811 	msr	BASEPRI, r1
 800d56c:	617b      	str	r3, [r7, #20]
 800d56e:	4819      	ldr	r0, [pc, #100]	; (800d5d4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800d570:	f7fe fe7a 	bl	800c268 <_PreparePacket>
 800d574:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d576:	693b      	ldr	r3, [r7, #16]
 800d578:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d57a:	4b17      	ldr	r3, [pc, #92]	; (800d5d8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800d57c:	691b      	ldr	r3, [r3, #16]
 800d57e:	687a      	ldr	r2, [r7, #4]
 800d580:	1ad3      	subs	r3, r2, r3
 800d582:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	61fb      	str	r3, [r7, #28]
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	61bb      	str	r3, [r7, #24]
 800d58c:	e00b      	b.n	800d5a6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800d58e:	69bb      	ldr	r3, [r7, #24]
 800d590:	b2da      	uxtb	r2, r3
 800d592:	69fb      	ldr	r3, [r7, #28]
 800d594:	1c59      	adds	r1, r3, #1
 800d596:	61f9      	str	r1, [r7, #28]
 800d598:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d59c:	b2d2      	uxtb	r2, r2
 800d59e:	701a      	strb	r2, [r3, #0]
 800d5a0:	69bb      	ldr	r3, [r7, #24]
 800d5a2:	09db      	lsrs	r3, r3, #7
 800d5a4:	61bb      	str	r3, [r7, #24]
 800d5a6:	69bb      	ldr	r3, [r7, #24]
 800d5a8:	2b7f      	cmp	r3, #127	; 0x7f
 800d5aa:	d8f0      	bhi.n	800d58e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800d5ac:	69fb      	ldr	r3, [r7, #28]
 800d5ae:	1c5a      	adds	r2, r3, #1
 800d5b0:	61fa      	str	r2, [r7, #28]
 800d5b2:	69ba      	ldr	r2, [r7, #24]
 800d5b4:	b2d2      	uxtb	r2, r2
 800d5b6:	701a      	strb	r2, [r3, #0]
 800d5b8:	69fb      	ldr	r3, [r7, #28]
 800d5ba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800d5bc:	2204      	movs	r2, #4
 800d5be:	68f9      	ldr	r1, [r7, #12]
 800d5c0:	6938      	ldr	r0, [r7, #16]
 800d5c2:	f7fe ff3f 	bl	800c444 <_SendPacket>
  RECORD_END();
 800d5c6:	697b      	ldr	r3, [r7, #20]
 800d5c8:	f383 8811 	msr	BASEPRI, r3
}
 800d5cc:	bf00      	nop
 800d5ce:	3720      	adds	r7, #32
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}
 800d5d4:	20016864 	.word	0x20016864
 800d5d8:	20016834 	.word	0x20016834

0800d5dc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b088      	sub	sp, #32
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d5e4:	f3ef 8311 	mrs	r3, BASEPRI
 800d5e8:	f04f 0120 	mov.w	r1, #32
 800d5ec:	f381 8811 	msr	BASEPRI, r1
 800d5f0:	617b      	str	r3, [r7, #20]
 800d5f2:	4819      	ldr	r0, [pc, #100]	; (800d658 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800d5f4:	f7fe fe38 	bl	800c268 <_PreparePacket>
 800d5f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d5fa:	693b      	ldr	r3, [r7, #16]
 800d5fc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d5fe:	4b17      	ldr	r3, [pc, #92]	; (800d65c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800d600:	691b      	ldr	r3, [r3, #16]
 800d602:	687a      	ldr	r2, [r7, #4]
 800d604:	1ad3      	subs	r3, r2, r3
 800d606:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	61fb      	str	r3, [r7, #28]
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	61bb      	str	r3, [r7, #24]
 800d610:	e00b      	b.n	800d62a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800d612:	69bb      	ldr	r3, [r7, #24]
 800d614:	b2da      	uxtb	r2, r3
 800d616:	69fb      	ldr	r3, [r7, #28]
 800d618:	1c59      	adds	r1, r3, #1
 800d61a:	61f9      	str	r1, [r7, #28]
 800d61c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d620:	b2d2      	uxtb	r2, r2
 800d622:	701a      	strb	r2, [r3, #0]
 800d624:	69bb      	ldr	r3, [r7, #24]
 800d626:	09db      	lsrs	r3, r3, #7
 800d628:	61bb      	str	r3, [r7, #24]
 800d62a:	69bb      	ldr	r3, [r7, #24]
 800d62c:	2b7f      	cmp	r3, #127	; 0x7f
 800d62e:	d8f0      	bhi.n	800d612 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800d630:	69fb      	ldr	r3, [r7, #28]
 800d632:	1c5a      	adds	r2, r3, #1
 800d634:	61fa      	str	r2, [r7, #28]
 800d636:	69ba      	ldr	r2, [r7, #24]
 800d638:	b2d2      	uxtb	r2, r2
 800d63a:	701a      	strb	r2, [r3, #0]
 800d63c:	69fb      	ldr	r3, [r7, #28]
 800d63e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800d640:	2206      	movs	r2, #6
 800d642:	68f9      	ldr	r1, [r7, #12]
 800d644:	6938      	ldr	r0, [r7, #16]
 800d646:	f7fe fefd 	bl	800c444 <_SendPacket>
  RECORD_END();
 800d64a:	697b      	ldr	r3, [r7, #20]
 800d64c:	f383 8811 	msr	BASEPRI, r3
}
 800d650:	bf00      	nop
 800d652:	3720      	adds	r7, #32
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}
 800d658:	20016864 	.word	0x20016864
 800d65c:	20016834 	.word	0x20016834

0800d660 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800d660:	b580      	push	{r7, lr}
 800d662:	b08a      	sub	sp, #40	; 0x28
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
 800d668:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800d66a:	f3ef 8311 	mrs	r3, BASEPRI
 800d66e:	f04f 0120 	mov.w	r1, #32
 800d672:	f381 8811 	msr	BASEPRI, r1
 800d676:	617b      	str	r3, [r7, #20]
 800d678:	4827      	ldr	r0, [pc, #156]	; (800d718 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800d67a:	f7fe fdf5 	bl	800c268 <_PreparePacket>
 800d67e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d680:	693b      	ldr	r3, [r7, #16]
 800d682:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d684:	4b25      	ldr	r3, [pc, #148]	; (800d71c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800d686:	691b      	ldr	r3, [r3, #16]
 800d688:	687a      	ldr	r2, [r7, #4]
 800d68a:	1ad3      	subs	r3, r2, r3
 800d68c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	627b      	str	r3, [r7, #36]	; 0x24
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	623b      	str	r3, [r7, #32]
 800d696:	e00b      	b.n	800d6b0 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800d698:	6a3b      	ldr	r3, [r7, #32]
 800d69a:	b2da      	uxtb	r2, r3
 800d69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d69e:	1c59      	adds	r1, r3, #1
 800d6a0:	6279      	str	r1, [r7, #36]	; 0x24
 800d6a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d6a6:	b2d2      	uxtb	r2, r2
 800d6a8:	701a      	strb	r2, [r3, #0]
 800d6aa:	6a3b      	ldr	r3, [r7, #32]
 800d6ac:	09db      	lsrs	r3, r3, #7
 800d6ae:	623b      	str	r3, [r7, #32]
 800d6b0:	6a3b      	ldr	r3, [r7, #32]
 800d6b2:	2b7f      	cmp	r3, #127	; 0x7f
 800d6b4:	d8f0      	bhi.n	800d698 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800d6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6b8:	1c5a      	adds	r2, r3, #1
 800d6ba:	627a      	str	r2, [r7, #36]	; 0x24
 800d6bc:	6a3a      	ldr	r2, [r7, #32]
 800d6be:	b2d2      	uxtb	r2, r2
 800d6c0:	701a      	strb	r2, [r3, #0]
 800d6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	61fb      	str	r3, [r7, #28]
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	61bb      	str	r3, [r7, #24]
 800d6ce:	e00b      	b.n	800d6e8 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800d6d0:	69bb      	ldr	r3, [r7, #24]
 800d6d2:	b2da      	uxtb	r2, r3
 800d6d4:	69fb      	ldr	r3, [r7, #28]
 800d6d6:	1c59      	adds	r1, r3, #1
 800d6d8:	61f9      	str	r1, [r7, #28]
 800d6da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d6de:	b2d2      	uxtb	r2, r2
 800d6e0:	701a      	strb	r2, [r3, #0]
 800d6e2:	69bb      	ldr	r3, [r7, #24]
 800d6e4:	09db      	lsrs	r3, r3, #7
 800d6e6:	61bb      	str	r3, [r7, #24]
 800d6e8:	69bb      	ldr	r3, [r7, #24]
 800d6ea:	2b7f      	cmp	r3, #127	; 0x7f
 800d6ec:	d8f0      	bhi.n	800d6d0 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800d6ee:	69fb      	ldr	r3, [r7, #28]
 800d6f0:	1c5a      	adds	r2, r3, #1
 800d6f2:	61fa      	str	r2, [r7, #28]
 800d6f4:	69ba      	ldr	r2, [r7, #24]
 800d6f6:	b2d2      	uxtb	r2, r2
 800d6f8:	701a      	strb	r2, [r3, #0]
 800d6fa:	69fb      	ldr	r3, [r7, #28]
 800d6fc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800d6fe:	2207      	movs	r2, #7
 800d700:	68f9      	ldr	r1, [r7, #12]
 800d702:	6938      	ldr	r0, [r7, #16]
 800d704:	f7fe fe9e 	bl	800c444 <_SendPacket>
  RECORD_END();
 800d708:	697b      	ldr	r3, [r7, #20]
 800d70a:	f383 8811 	msr	BASEPRI, r3
}
 800d70e:	bf00      	nop
 800d710:	3728      	adds	r7, #40	; 0x28
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}
 800d716:	bf00      	nop
 800d718:	20016864 	.word	0x20016864
 800d71c:	20016834 	.word	0x20016834

0800d720 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800d720:	b480      	push	{r7}
 800d722:	b083      	sub	sp, #12
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800d728:	4b04      	ldr	r3, [pc, #16]	; (800d73c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800d72a:	691b      	ldr	r3, [r3, #16]
 800d72c:	687a      	ldr	r2, [r7, #4]
 800d72e:	1ad3      	subs	r3, r2, r3
}
 800d730:	4618      	mov	r0, r3
 800d732:	370c      	adds	r7, #12
 800d734:	46bd      	mov	sp, r7
 800d736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73a:	4770      	bx	lr
 800d73c:	20016834 	.word	0x20016834

0800d740 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800d740:	b580      	push	{r7, lr}
 800d742:	b08c      	sub	sp, #48	; 0x30
 800d744:	af00      	add	r7, sp, #0
 800d746:	4603      	mov	r3, r0
 800d748:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800d74a:	4b3b      	ldr	r3, [pc, #236]	; (800d838 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d06d      	beq.n	800d82e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800d752:	4b39      	ldr	r3, [pc, #228]	; (800d838 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800d758:	2300      	movs	r3, #0
 800d75a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d75c:	e008      	b.n	800d770 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800d75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d760:	691b      	ldr	r3, [r3, #16]
 800d762:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800d764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d766:	2b00      	cmp	r3, #0
 800d768:	d007      	beq.n	800d77a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800d76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d76c:	3301      	adds	r3, #1
 800d76e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d770:	79fb      	ldrb	r3, [r7, #7]
 800d772:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d774:	429a      	cmp	r2, r3
 800d776:	d3f2      	bcc.n	800d75e <SEGGER_SYSVIEW_SendModule+0x1e>
 800d778:	e000      	b.n	800d77c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800d77a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800d77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d055      	beq.n	800d82e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d782:	f3ef 8311 	mrs	r3, BASEPRI
 800d786:	f04f 0120 	mov.w	r1, #32
 800d78a:	f381 8811 	msr	BASEPRI, r1
 800d78e:	617b      	str	r3, [r7, #20]
 800d790:	482a      	ldr	r0, [pc, #168]	; (800d83c <SEGGER_SYSVIEW_SendModule+0xfc>)
 800d792:	f7fe fd69 	bl	800c268 <_PreparePacket>
 800d796:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800d798:	693b      	ldr	r3, [r7, #16]
 800d79a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	627b      	str	r3, [r7, #36]	; 0x24
 800d7a0:	79fb      	ldrb	r3, [r7, #7]
 800d7a2:	623b      	str	r3, [r7, #32]
 800d7a4:	e00b      	b.n	800d7be <SEGGER_SYSVIEW_SendModule+0x7e>
 800d7a6:	6a3b      	ldr	r3, [r7, #32]
 800d7a8:	b2da      	uxtb	r2, r3
 800d7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ac:	1c59      	adds	r1, r3, #1
 800d7ae:	6279      	str	r1, [r7, #36]	; 0x24
 800d7b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d7b4:	b2d2      	uxtb	r2, r2
 800d7b6:	701a      	strb	r2, [r3, #0]
 800d7b8:	6a3b      	ldr	r3, [r7, #32]
 800d7ba:	09db      	lsrs	r3, r3, #7
 800d7bc:	623b      	str	r3, [r7, #32]
 800d7be:	6a3b      	ldr	r3, [r7, #32]
 800d7c0:	2b7f      	cmp	r3, #127	; 0x7f
 800d7c2:	d8f0      	bhi.n	800d7a6 <SEGGER_SYSVIEW_SendModule+0x66>
 800d7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c6:	1c5a      	adds	r2, r3, #1
 800d7c8:	627a      	str	r2, [r7, #36]	; 0x24
 800d7ca:	6a3a      	ldr	r2, [r7, #32]
 800d7cc:	b2d2      	uxtb	r2, r2
 800d7ce:	701a      	strb	r2, [r3, #0]
 800d7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	61fb      	str	r3, [r7, #28]
 800d7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7da:	689b      	ldr	r3, [r3, #8]
 800d7dc:	61bb      	str	r3, [r7, #24]
 800d7de:	e00b      	b.n	800d7f8 <SEGGER_SYSVIEW_SendModule+0xb8>
 800d7e0:	69bb      	ldr	r3, [r7, #24]
 800d7e2:	b2da      	uxtb	r2, r3
 800d7e4:	69fb      	ldr	r3, [r7, #28]
 800d7e6:	1c59      	adds	r1, r3, #1
 800d7e8:	61f9      	str	r1, [r7, #28]
 800d7ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d7ee:	b2d2      	uxtb	r2, r2
 800d7f0:	701a      	strb	r2, [r3, #0]
 800d7f2:	69bb      	ldr	r3, [r7, #24]
 800d7f4:	09db      	lsrs	r3, r3, #7
 800d7f6:	61bb      	str	r3, [r7, #24]
 800d7f8:	69bb      	ldr	r3, [r7, #24]
 800d7fa:	2b7f      	cmp	r3, #127	; 0x7f
 800d7fc:	d8f0      	bhi.n	800d7e0 <SEGGER_SYSVIEW_SendModule+0xa0>
 800d7fe:	69fb      	ldr	r3, [r7, #28]
 800d800:	1c5a      	adds	r2, r3, #1
 800d802:	61fa      	str	r2, [r7, #28]
 800d804:	69ba      	ldr	r2, [r7, #24]
 800d806:	b2d2      	uxtb	r2, r2
 800d808:	701a      	strb	r2, [r3, #0]
 800d80a:	69fb      	ldr	r3, [r7, #28]
 800d80c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	2280      	movs	r2, #128	; 0x80
 800d814:	4619      	mov	r1, r3
 800d816:	68f8      	ldr	r0, [r7, #12]
 800d818:	f7fe fcd6 	bl	800c1c8 <_EncodeStr>
 800d81c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800d81e:	2216      	movs	r2, #22
 800d820:	68f9      	ldr	r1, [r7, #12]
 800d822:	6938      	ldr	r0, [r7, #16]
 800d824:	f7fe fe0e 	bl	800c444 <_SendPacket>
      RECORD_END();
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800d82e:	bf00      	nop
 800d830:	3730      	adds	r7, #48	; 0x30
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}
 800d836:	bf00      	nop
 800d838:	2001685c 	.word	0x2001685c
 800d83c:	20016864 	.word	0x20016864

0800d840 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800d840:	b580      	push	{r7, lr}
 800d842:	b082      	sub	sp, #8
 800d844:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800d846:	4b0c      	ldr	r3, [pc, #48]	; (800d878 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d00f      	beq.n	800d86e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800d84e:	4b0a      	ldr	r3, [pc, #40]	; (800d878 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	68db      	ldr	r3, [r3, #12]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d002      	beq.n	800d862 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	68db      	ldr	r3, [r3, #12]
 800d860:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	691b      	ldr	r3, [r3, #16]
 800d866:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d1f2      	bne.n	800d854 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800d86e:	bf00      	nop
 800d870:	3708      	adds	r7, #8
 800d872:	46bd      	mov	sp, r7
 800d874:	bd80      	pop	{r7, pc}
 800d876:	bf00      	nop
 800d878:	2001685c 	.word	0x2001685c

0800d87c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b086      	sub	sp, #24
 800d880:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800d882:	f3ef 8311 	mrs	r3, BASEPRI
 800d886:	f04f 0120 	mov.w	r1, #32
 800d88a:	f381 8811 	msr	BASEPRI, r1
 800d88e:	60fb      	str	r3, [r7, #12]
 800d890:	4817      	ldr	r0, [pc, #92]	; (800d8f0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800d892:	f7fe fce9 	bl	800c268 <_PreparePacket>
 800d896:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	617b      	str	r3, [r7, #20]
 800d8a0:	4b14      	ldr	r3, [pc, #80]	; (800d8f4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800d8a2:	781b      	ldrb	r3, [r3, #0]
 800d8a4:	613b      	str	r3, [r7, #16]
 800d8a6:	e00b      	b.n	800d8c0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800d8a8:	693b      	ldr	r3, [r7, #16]
 800d8aa:	b2da      	uxtb	r2, r3
 800d8ac:	697b      	ldr	r3, [r7, #20]
 800d8ae:	1c59      	adds	r1, r3, #1
 800d8b0:	6179      	str	r1, [r7, #20]
 800d8b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d8b6:	b2d2      	uxtb	r2, r2
 800d8b8:	701a      	strb	r2, [r3, #0]
 800d8ba:	693b      	ldr	r3, [r7, #16]
 800d8bc:	09db      	lsrs	r3, r3, #7
 800d8be:	613b      	str	r3, [r7, #16]
 800d8c0:	693b      	ldr	r3, [r7, #16]
 800d8c2:	2b7f      	cmp	r3, #127	; 0x7f
 800d8c4:	d8f0      	bhi.n	800d8a8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800d8c6:	697b      	ldr	r3, [r7, #20]
 800d8c8:	1c5a      	adds	r2, r3, #1
 800d8ca:	617a      	str	r2, [r7, #20]
 800d8cc:	693a      	ldr	r2, [r7, #16]
 800d8ce:	b2d2      	uxtb	r2, r2
 800d8d0:	701a      	strb	r2, [r3, #0]
 800d8d2:	697b      	ldr	r3, [r7, #20]
 800d8d4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800d8d6:	221b      	movs	r2, #27
 800d8d8:	6879      	ldr	r1, [r7, #4]
 800d8da:	68b8      	ldr	r0, [r7, #8]
 800d8dc:	f7fe fdb2 	bl	800c444 <_SendPacket>
  RECORD_END();
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	f383 8811 	msr	BASEPRI, r3
}
 800d8e6:	bf00      	nop
 800d8e8:	3718      	adds	r7, #24
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}
 800d8ee:	bf00      	nop
 800d8f0:	20016864 	.word	0x20016864
 800d8f4:	20016860 	.word	0x20016860

0800d8f8 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 800d8f8:	b40f      	push	{r0, r1, r2, r3}
 800d8fa:	b580      	push	{r7, lr}
 800d8fc:	b082      	sub	sp, #8
 800d8fe:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 800d900:	f107 0314 	add.w	r3, r7, #20
 800d904:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800d906:	1d3b      	adds	r3, r7, #4
 800d908:	461a      	mov	r2, r3
 800d90a:	2100      	movs	r1, #0
 800d90c:	6938      	ldr	r0, [r7, #16]
 800d90e:	f7fe ff07 	bl	800c720 <_VPrintHost>
  va_end(ParamList);
#endif
}
 800d912:	bf00      	nop
 800d914:	3708      	adds	r7, #8
 800d916:	46bd      	mov	sp, r7
 800d918:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d91c:	b004      	add	sp, #16
 800d91e:	4770      	bx	lr

0800d920 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800d920:	b580      	push	{r7, lr}
 800d922:	b08a      	sub	sp, #40	; 0x28
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d928:	f3ef 8311 	mrs	r3, BASEPRI
 800d92c:	f04f 0120 	mov.w	r1, #32
 800d930:	f381 8811 	msr	BASEPRI, r1
 800d934:	617b      	str	r3, [r7, #20]
 800d936:	4827      	ldr	r0, [pc, #156]	; (800d9d4 <SEGGER_SYSVIEW_Warn+0xb4>)
 800d938:	f7fe fc96 	bl	800c268 <_PreparePacket>
 800d93c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d93e:	2280      	movs	r2, #128	; 0x80
 800d940:	6879      	ldr	r1, [r7, #4]
 800d942:	6938      	ldr	r0, [r7, #16]
 800d944:	f7fe fc40 	bl	800c1c8 <_EncodeStr>
 800d948:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	627b      	str	r3, [r7, #36]	; 0x24
 800d94e:	2301      	movs	r3, #1
 800d950:	623b      	str	r3, [r7, #32]
 800d952:	e00b      	b.n	800d96c <SEGGER_SYSVIEW_Warn+0x4c>
 800d954:	6a3b      	ldr	r3, [r7, #32]
 800d956:	b2da      	uxtb	r2, r3
 800d958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d95a:	1c59      	adds	r1, r3, #1
 800d95c:	6279      	str	r1, [r7, #36]	; 0x24
 800d95e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d962:	b2d2      	uxtb	r2, r2
 800d964:	701a      	strb	r2, [r3, #0]
 800d966:	6a3b      	ldr	r3, [r7, #32]
 800d968:	09db      	lsrs	r3, r3, #7
 800d96a:	623b      	str	r3, [r7, #32]
 800d96c:	6a3b      	ldr	r3, [r7, #32]
 800d96e:	2b7f      	cmp	r3, #127	; 0x7f
 800d970:	d8f0      	bhi.n	800d954 <SEGGER_SYSVIEW_Warn+0x34>
 800d972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d974:	1c5a      	adds	r2, r3, #1
 800d976:	627a      	str	r2, [r7, #36]	; 0x24
 800d978:	6a3a      	ldr	r2, [r7, #32]
 800d97a:	b2d2      	uxtb	r2, r2
 800d97c:	701a      	strb	r2, [r3, #0]
 800d97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d980:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	61fb      	str	r3, [r7, #28]
 800d986:	2300      	movs	r3, #0
 800d988:	61bb      	str	r3, [r7, #24]
 800d98a:	e00b      	b.n	800d9a4 <SEGGER_SYSVIEW_Warn+0x84>
 800d98c:	69bb      	ldr	r3, [r7, #24]
 800d98e:	b2da      	uxtb	r2, r3
 800d990:	69fb      	ldr	r3, [r7, #28]
 800d992:	1c59      	adds	r1, r3, #1
 800d994:	61f9      	str	r1, [r7, #28]
 800d996:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d99a:	b2d2      	uxtb	r2, r2
 800d99c:	701a      	strb	r2, [r3, #0]
 800d99e:	69bb      	ldr	r3, [r7, #24]
 800d9a0:	09db      	lsrs	r3, r3, #7
 800d9a2:	61bb      	str	r3, [r7, #24]
 800d9a4:	69bb      	ldr	r3, [r7, #24]
 800d9a6:	2b7f      	cmp	r3, #127	; 0x7f
 800d9a8:	d8f0      	bhi.n	800d98c <SEGGER_SYSVIEW_Warn+0x6c>
 800d9aa:	69fb      	ldr	r3, [r7, #28]
 800d9ac:	1c5a      	adds	r2, r3, #1
 800d9ae:	61fa      	str	r2, [r7, #28]
 800d9b0:	69ba      	ldr	r2, [r7, #24]
 800d9b2:	b2d2      	uxtb	r2, r2
 800d9b4:	701a      	strb	r2, [r3, #0]
 800d9b6:	69fb      	ldr	r3, [r7, #28]
 800d9b8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800d9ba:	221a      	movs	r2, #26
 800d9bc:	68f9      	ldr	r1, [r7, #12]
 800d9be:	6938      	ldr	r0, [r7, #16]
 800d9c0:	f7fe fd40 	bl	800c444 <_SendPacket>
  RECORD_END();
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	f383 8811 	msr	BASEPRI, r3
}
 800d9ca:	bf00      	nop
 800d9cc:	3728      	adds	r7, #40	; 0x28
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}
 800d9d2:	bf00      	nop
 800d9d4:	20016864 	.word	0x20016864

0800d9d8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800d9dc:	4803      	ldr	r0, [pc, #12]	; (800d9ec <_cbSendSystemDesc+0x14>)
 800d9de:	f7ff fc8d 	bl	800d2fc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800d9e2:	4803      	ldr	r0, [pc, #12]	; (800d9f0 <_cbSendSystemDesc+0x18>)
 800d9e4:	f7ff fc8a 	bl	800d2fc <SEGGER_SYSVIEW_SendSysDesc>
}
 800d9e8:	bf00      	nop
 800d9ea:	bd80      	pop	{r7, pc}
 800d9ec:	0800df9c 	.word	0x0800df9c
 800d9f0:	0800dfe0 	.word	0x0800dfe0

0800d9f4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800d9f8:	4b06      	ldr	r3, [pc, #24]	; (800da14 <SEGGER_SYSVIEW_Conf+0x20>)
 800d9fa:	6818      	ldr	r0, [r3, #0]
 800d9fc:	4b05      	ldr	r3, [pc, #20]	; (800da14 <SEGGER_SYSVIEW_Conf+0x20>)
 800d9fe:	6819      	ldr	r1, [r3, #0]
 800da00:	4b05      	ldr	r3, [pc, #20]	; (800da18 <SEGGER_SYSVIEW_Conf+0x24>)
 800da02:	4a06      	ldr	r2, [pc, #24]	; (800da1c <SEGGER_SYSVIEW_Conf+0x28>)
 800da04:	f7fe ff4a 	bl	800c89c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800da08:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800da0c:	f7fe ff8a 	bl	800c924 <SEGGER_SYSVIEW_SetRAMBase>
}
 800da10:	bf00      	nop
 800da12:	bd80      	pop	{r7, pc}
 800da14:	20000000 	.word	0x20000000
 800da18:	0800d9d9 	.word	0x0800d9d9
 800da1c:	0800e080 	.word	0x0800e080

0800da20 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800da20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da22:	b085      	sub	sp, #20
 800da24:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800da26:	2300      	movs	r3, #0
 800da28:	607b      	str	r3, [r7, #4]
 800da2a:	e033      	b.n	800da94 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800da2c:	491e      	ldr	r1, [pc, #120]	; (800daa8 <_cbSendTaskList+0x88>)
 800da2e:	687a      	ldr	r2, [r7, #4]
 800da30:	4613      	mov	r3, r2
 800da32:	009b      	lsls	r3, r3, #2
 800da34:	4413      	add	r3, r2
 800da36:	009b      	lsls	r3, r3, #2
 800da38:	440b      	add	r3, r1
 800da3a:	6818      	ldr	r0, [r3, #0]
 800da3c:	491a      	ldr	r1, [pc, #104]	; (800daa8 <_cbSendTaskList+0x88>)
 800da3e:	687a      	ldr	r2, [r7, #4]
 800da40:	4613      	mov	r3, r2
 800da42:	009b      	lsls	r3, r3, #2
 800da44:	4413      	add	r3, r2
 800da46:	009b      	lsls	r3, r3, #2
 800da48:	440b      	add	r3, r1
 800da4a:	3304      	adds	r3, #4
 800da4c:	6819      	ldr	r1, [r3, #0]
 800da4e:	4c16      	ldr	r4, [pc, #88]	; (800daa8 <_cbSendTaskList+0x88>)
 800da50:	687a      	ldr	r2, [r7, #4]
 800da52:	4613      	mov	r3, r2
 800da54:	009b      	lsls	r3, r3, #2
 800da56:	4413      	add	r3, r2
 800da58:	009b      	lsls	r3, r3, #2
 800da5a:	4423      	add	r3, r4
 800da5c:	3308      	adds	r3, #8
 800da5e:	681c      	ldr	r4, [r3, #0]
 800da60:	4d11      	ldr	r5, [pc, #68]	; (800daa8 <_cbSendTaskList+0x88>)
 800da62:	687a      	ldr	r2, [r7, #4]
 800da64:	4613      	mov	r3, r2
 800da66:	009b      	lsls	r3, r3, #2
 800da68:	4413      	add	r3, r2
 800da6a:	009b      	lsls	r3, r3, #2
 800da6c:	442b      	add	r3, r5
 800da6e:	330c      	adds	r3, #12
 800da70:	681d      	ldr	r5, [r3, #0]
 800da72:	4e0d      	ldr	r6, [pc, #52]	; (800daa8 <_cbSendTaskList+0x88>)
 800da74:	687a      	ldr	r2, [r7, #4]
 800da76:	4613      	mov	r3, r2
 800da78:	009b      	lsls	r3, r3, #2
 800da7a:	4413      	add	r3, r2
 800da7c:	009b      	lsls	r3, r3, #2
 800da7e:	4433      	add	r3, r6
 800da80:	3310      	adds	r3, #16
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	9300      	str	r3, [sp, #0]
 800da86:	462b      	mov	r3, r5
 800da88:	4622      	mov	r2, r4
 800da8a:	f000 f8bd 	bl	800dc08 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	3301      	adds	r3, #1
 800da92:	607b      	str	r3, [r7, #4]
 800da94:	4b05      	ldr	r3, [pc, #20]	; (800daac <_cbSendTaskList+0x8c>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	687a      	ldr	r2, [r7, #4]
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d3c6      	bcc.n	800da2c <_cbSendTaskList+0xc>
  }
}
 800da9e:	bf00      	nop
 800daa0:	bf00      	nop
 800daa2:	370c      	adds	r7, #12
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800daa8:	20016948 	.word	0x20016948
 800daac:	200169e8 	.word	0x200169e8

0800dab0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800dab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dab4:	b082      	sub	sp, #8
 800dab6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800dab8:	f7fc faf8 	bl	800a0ac <xTaskGetTickCountFromISR>
 800dabc:	4603      	mov	r3, r0
 800dabe:	2200      	movs	r2, #0
 800dac0:	469a      	mov	sl, r3
 800dac2:	4693      	mov	fp, r2
 800dac4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800dac8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dacc:	4602      	mov	r2, r0
 800dace:	460b      	mov	r3, r1
 800dad0:	f04f 0a00 	mov.w	sl, #0
 800dad4:	f04f 0b00 	mov.w	fp, #0
 800dad8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800dadc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800dae0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800dae4:	4652      	mov	r2, sl
 800dae6:	465b      	mov	r3, fp
 800dae8:	1a14      	subs	r4, r2, r0
 800daea:	eb63 0501 	sbc.w	r5, r3, r1
 800daee:	f04f 0200 	mov.w	r2, #0
 800daf2:	f04f 0300 	mov.w	r3, #0
 800daf6:	00ab      	lsls	r3, r5, #2
 800daf8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800dafc:	00a2      	lsls	r2, r4, #2
 800dafe:	4614      	mov	r4, r2
 800db00:	461d      	mov	r5, r3
 800db02:	eb14 0800 	adds.w	r8, r4, r0
 800db06:	eb45 0901 	adc.w	r9, r5, r1
 800db0a:	f04f 0200 	mov.w	r2, #0
 800db0e:	f04f 0300 	mov.w	r3, #0
 800db12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800db16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800db1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800db1e:	4690      	mov	r8, r2
 800db20:	4699      	mov	r9, r3
 800db22:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800db26:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800db2a:	4610      	mov	r0, r2
 800db2c:	4619      	mov	r1, r3
 800db2e:	3708      	adds	r7, #8
 800db30:	46bd      	mov	sp, r7
 800db32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800db38 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800db38:	b580      	push	{r7, lr}
 800db3a:	b086      	sub	sp, #24
 800db3c:	af02      	add	r7, sp, #8
 800db3e:	60f8      	str	r0, [r7, #12]
 800db40:	60b9      	str	r1, [r7, #8]
 800db42:	607a      	str	r2, [r7, #4]
 800db44:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800db46:	2205      	movs	r2, #5
 800db48:	492b      	ldr	r1, [pc, #172]	; (800dbf8 <SYSVIEW_AddTask+0xc0>)
 800db4a:	68b8      	ldr	r0, [r7, #8]
 800db4c:	f000 f8a2 	bl	800dc94 <memcmp>
 800db50:	4603      	mov	r3, r0
 800db52:	2b00      	cmp	r3, #0
 800db54:	d04b      	beq.n	800dbee <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800db56:	4b29      	ldr	r3, [pc, #164]	; (800dbfc <SYSVIEW_AddTask+0xc4>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	2b07      	cmp	r3, #7
 800db5c:	d903      	bls.n	800db66 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800db5e:	4828      	ldr	r0, [pc, #160]	; (800dc00 <SYSVIEW_AddTask+0xc8>)
 800db60:	f7ff fede 	bl	800d920 <SEGGER_SYSVIEW_Warn>
    return;
 800db64:	e044      	b.n	800dbf0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800db66:	4b25      	ldr	r3, [pc, #148]	; (800dbfc <SYSVIEW_AddTask+0xc4>)
 800db68:	681a      	ldr	r2, [r3, #0]
 800db6a:	4926      	ldr	r1, [pc, #152]	; (800dc04 <SYSVIEW_AddTask+0xcc>)
 800db6c:	4613      	mov	r3, r2
 800db6e:	009b      	lsls	r3, r3, #2
 800db70:	4413      	add	r3, r2
 800db72:	009b      	lsls	r3, r3, #2
 800db74:	440b      	add	r3, r1
 800db76:	68fa      	ldr	r2, [r7, #12]
 800db78:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800db7a:	4b20      	ldr	r3, [pc, #128]	; (800dbfc <SYSVIEW_AddTask+0xc4>)
 800db7c:	681a      	ldr	r2, [r3, #0]
 800db7e:	4921      	ldr	r1, [pc, #132]	; (800dc04 <SYSVIEW_AddTask+0xcc>)
 800db80:	4613      	mov	r3, r2
 800db82:	009b      	lsls	r3, r3, #2
 800db84:	4413      	add	r3, r2
 800db86:	009b      	lsls	r3, r3, #2
 800db88:	440b      	add	r3, r1
 800db8a:	3304      	adds	r3, #4
 800db8c:	68ba      	ldr	r2, [r7, #8]
 800db8e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800db90:	4b1a      	ldr	r3, [pc, #104]	; (800dbfc <SYSVIEW_AddTask+0xc4>)
 800db92:	681a      	ldr	r2, [r3, #0]
 800db94:	491b      	ldr	r1, [pc, #108]	; (800dc04 <SYSVIEW_AddTask+0xcc>)
 800db96:	4613      	mov	r3, r2
 800db98:	009b      	lsls	r3, r3, #2
 800db9a:	4413      	add	r3, r2
 800db9c:	009b      	lsls	r3, r3, #2
 800db9e:	440b      	add	r3, r1
 800dba0:	3308      	adds	r3, #8
 800dba2:	687a      	ldr	r2, [r7, #4]
 800dba4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800dba6:	4b15      	ldr	r3, [pc, #84]	; (800dbfc <SYSVIEW_AddTask+0xc4>)
 800dba8:	681a      	ldr	r2, [r3, #0]
 800dbaa:	4916      	ldr	r1, [pc, #88]	; (800dc04 <SYSVIEW_AddTask+0xcc>)
 800dbac:	4613      	mov	r3, r2
 800dbae:	009b      	lsls	r3, r3, #2
 800dbb0:	4413      	add	r3, r2
 800dbb2:	009b      	lsls	r3, r3, #2
 800dbb4:	440b      	add	r3, r1
 800dbb6:	330c      	adds	r3, #12
 800dbb8:	683a      	ldr	r2, [r7, #0]
 800dbba:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800dbbc:	4b0f      	ldr	r3, [pc, #60]	; (800dbfc <SYSVIEW_AddTask+0xc4>)
 800dbbe:	681a      	ldr	r2, [r3, #0]
 800dbc0:	4910      	ldr	r1, [pc, #64]	; (800dc04 <SYSVIEW_AddTask+0xcc>)
 800dbc2:	4613      	mov	r3, r2
 800dbc4:	009b      	lsls	r3, r3, #2
 800dbc6:	4413      	add	r3, r2
 800dbc8:	009b      	lsls	r3, r3, #2
 800dbca:	440b      	add	r3, r1
 800dbcc:	3310      	adds	r3, #16
 800dbce:	69ba      	ldr	r2, [r7, #24]
 800dbd0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800dbd2:	4b0a      	ldr	r3, [pc, #40]	; (800dbfc <SYSVIEW_AddTask+0xc4>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	3301      	adds	r3, #1
 800dbd8:	4a08      	ldr	r2, [pc, #32]	; (800dbfc <SYSVIEW_AddTask+0xc4>)
 800dbda:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800dbdc:	69bb      	ldr	r3, [r7, #24]
 800dbde:	9300      	str	r3, [sp, #0]
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	687a      	ldr	r2, [r7, #4]
 800dbe4:	68b9      	ldr	r1, [r7, #8]
 800dbe6:	68f8      	ldr	r0, [r7, #12]
 800dbe8:	f000 f80e 	bl	800dc08 <SYSVIEW_SendTaskInfo>
 800dbec:	e000      	b.n	800dbf0 <SYSVIEW_AddTask+0xb8>
    return;
 800dbee:	bf00      	nop

}
 800dbf0:	3710      	adds	r7, #16
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}
 800dbf6:	bf00      	nop
 800dbf8:	0800dff0 	.word	0x0800dff0
 800dbfc:	200169e8 	.word	0x200169e8
 800dc00:	0800dff8 	.word	0x0800dff8
 800dc04:	20016948 	.word	0x20016948

0800dc08 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b08a      	sub	sp, #40	; 0x28
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	60f8      	str	r0, [r7, #12]
 800dc10:	60b9      	str	r1, [r7, #8]
 800dc12:	607a      	str	r2, [r7, #4]
 800dc14:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800dc16:	f107 0314 	add.w	r3, r7, #20
 800dc1a:	2214      	movs	r2, #20
 800dc1c:	2100      	movs	r1, #0
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f000 f856 	bl	800dcd0 <memset>
  TaskInfo.TaskID     = TaskID;
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800dc28:	68bb      	ldr	r3, [r7, #8]
 800dc2a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800dc34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc36:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800dc38:	f107 0314 	add.w	r3, r7, #20
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f7ff fa65 	bl	800d10c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800dc42:	bf00      	nop
 800dc44:	3728      	adds	r7, #40	; 0x28
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}
	...

0800dc4c <__libc_init_array>:
 800dc4c:	b570      	push	{r4, r5, r6, lr}
 800dc4e:	4d0d      	ldr	r5, [pc, #52]	; (800dc84 <__libc_init_array+0x38>)
 800dc50:	4c0d      	ldr	r4, [pc, #52]	; (800dc88 <__libc_init_array+0x3c>)
 800dc52:	1b64      	subs	r4, r4, r5
 800dc54:	10a4      	asrs	r4, r4, #2
 800dc56:	2600      	movs	r6, #0
 800dc58:	42a6      	cmp	r6, r4
 800dc5a:	d109      	bne.n	800dc70 <__libc_init_array+0x24>
 800dc5c:	4d0b      	ldr	r5, [pc, #44]	; (800dc8c <__libc_init_array+0x40>)
 800dc5e:	4c0c      	ldr	r4, [pc, #48]	; (800dc90 <__libc_init_array+0x44>)
 800dc60:	f000 f83e 	bl	800dce0 <_init>
 800dc64:	1b64      	subs	r4, r4, r5
 800dc66:	10a4      	asrs	r4, r4, #2
 800dc68:	2600      	movs	r6, #0
 800dc6a:	42a6      	cmp	r6, r4
 800dc6c:	d105      	bne.n	800dc7a <__libc_init_array+0x2e>
 800dc6e:	bd70      	pop	{r4, r5, r6, pc}
 800dc70:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc74:	4798      	blx	r3
 800dc76:	3601      	adds	r6, #1
 800dc78:	e7ee      	b.n	800dc58 <__libc_init_array+0xc>
 800dc7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc7e:	4798      	blx	r3
 800dc80:	3601      	adds	r6, #1
 800dc82:	e7f2      	b.n	800dc6a <__libc_init_array+0x1e>
 800dc84:	0800e090 	.word	0x0800e090
 800dc88:	0800e090 	.word	0x0800e090
 800dc8c:	0800e090 	.word	0x0800e090
 800dc90:	0800e094 	.word	0x0800e094

0800dc94 <memcmp>:
 800dc94:	b510      	push	{r4, lr}
 800dc96:	3901      	subs	r1, #1
 800dc98:	4402      	add	r2, r0
 800dc9a:	4290      	cmp	r0, r2
 800dc9c:	d101      	bne.n	800dca2 <memcmp+0xe>
 800dc9e:	2000      	movs	r0, #0
 800dca0:	e005      	b.n	800dcae <memcmp+0x1a>
 800dca2:	7803      	ldrb	r3, [r0, #0]
 800dca4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800dca8:	42a3      	cmp	r3, r4
 800dcaa:	d001      	beq.n	800dcb0 <memcmp+0x1c>
 800dcac:	1b18      	subs	r0, r3, r4
 800dcae:	bd10      	pop	{r4, pc}
 800dcb0:	3001      	adds	r0, #1
 800dcb2:	e7f2      	b.n	800dc9a <memcmp+0x6>

0800dcb4 <memcpy>:
 800dcb4:	440a      	add	r2, r1
 800dcb6:	4291      	cmp	r1, r2
 800dcb8:	f100 33ff 	add.w	r3, r0, #4294967295
 800dcbc:	d100      	bne.n	800dcc0 <memcpy+0xc>
 800dcbe:	4770      	bx	lr
 800dcc0:	b510      	push	{r4, lr}
 800dcc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dcca:	4291      	cmp	r1, r2
 800dccc:	d1f9      	bne.n	800dcc2 <memcpy+0xe>
 800dcce:	bd10      	pop	{r4, pc}

0800dcd0 <memset>:
 800dcd0:	4402      	add	r2, r0
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	4293      	cmp	r3, r2
 800dcd6:	d100      	bne.n	800dcda <memset+0xa>
 800dcd8:	4770      	bx	lr
 800dcda:	f803 1b01 	strb.w	r1, [r3], #1
 800dcde:	e7f9      	b.n	800dcd4 <memset+0x4>

0800dce0 <_init>:
 800dce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dce2:	bf00      	nop
 800dce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dce6:	bc08      	pop	{r3}
 800dce8:	469e      	mov	lr, r3
 800dcea:	4770      	bx	lr

0800dcec <_fini>:
 800dcec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcee:	bf00      	nop
 800dcf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcf2:	bc08      	pop	{r3}
 800dcf4:	469e      	mov	lr, r3
 800dcf6:	4770      	bx	lr
