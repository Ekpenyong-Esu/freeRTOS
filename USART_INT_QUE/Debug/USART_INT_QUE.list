
USART_INT_QUE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cdc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000034c  08008e8c  08008e8c  00018e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091d8  080091d8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080091d8  080091d8  000191d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091e0  080091e0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091e0  080091e0  000191e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091e4  080091e4  000191e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080091e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00014534  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20014544  20014544  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ab96  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a42  00000000  00000000  0003abd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001648  00000000  00000000  0003e618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014b0  00000000  00000000  0003fc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004654  00000000  00000000  00041110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dccd  00000000  00000000  00045764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8c6b  00000000  00000000  00063431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014c09c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d10  00000000  00000000  0014c0ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008e74 	.word	0x08008e74

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08008e74 	.word	0x08008e74

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20012ecc 	.word	0x20012ecc

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b974 	b.w	8000584 <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9d08      	ldr	r5, [sp, #32]
 80002ba:	4604      	mov	r4, r0
 80002bc:	468e      	mov	lr, r1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d14d      	bne.n	800035e <__udivmoddi4+0xaa>
 80002c2:	428a      	cmp	r2, r1
 80002c4:	4694      	mov	ip, r2
 80002c6:	d969      	bls.n	800039c <__udivmoddi4+0xe8>
 80002c8:	fab2 f282 	clz	r2, r2
 80002cc:	b152      	cbz	r2, 80002e4 <__udivmoddi4+0x30>
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	f1c2 0120 	rsb	r1, r2, #32
 80002d6:	fa20 f101 	lsr.w	r1, r0, r1
 80002da:	fa0c fc02 	lsl.w	ip, ip, r2
 80002de:	ea41 0e03 	orr.w	lr, r1, r3
 80002e2:	4094      	lsls	r4, r2
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	0c21      	lsrs	r1, r4, #16
 80002ea:	fbbe f6f8 	udiv	r6, lr, r8
 80002ee:	fa1f f78c 	uxth.w	r7, ip
 80002f2:	fb08 e316 	mls	r3, r8, r6, lr
 80002f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002fa:	fb06 f107 	mul.w	r1, r6, r7
 80002fe:	4299      	cmp	r1, r3
 8000300:	d90a      	bls.n	8000318 <__udivmoddi4+0x64>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 30ff 	add.w	r0, r6, #4294967295
 800030a:	f080 811f 	bcs.w	800054c <__udivmoddi4+0x298>
 800030e:	4299      	cmp	r1, r3
 8000310:	f240 811c 	bls.w	800054c <__udivmoddi4+0x298>
 8000314:	3e02      	subs	r6, #2
 8000316:	4463      	add	r3, ip
 8000318:	1a5b      	subs	r3, r3, r1
 800031a:	b2a4      	uxth	r4, r4
 800031c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000320:	fb08 3310 	mls	r3, r8, r0, r3
 8000324:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000328:	fb00 f707 	mul.w	r7, r0, r7
 800032c:	42a7      	cmp	r7, r4
 800032e:	d90a      	bls.n	8000346 <__udivmoddi4+0x92>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	f080 810a 	bcs.w	8000550 <__udivmoddi4+0x29c>
 800033c:	42a7      	cmp	r7, r4
 800033e:	f240 8107 	bls.w	8000550 <__udivmoddi4+0x29c>
 8000342:	4464      	add	r4, ip
 8000344:	3802      	subs	r0, #2
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	1be4      	subs	r4, r4, r7
 800034c:	2600      	movs	r6, #0
 800034e:	b11d      	cbz	r5, 8000358 <__udivmoddi4+0xa4>
 8000350:	40d4      	lsrs	r4, r2
 8000352:	2300      	movs	r3, #0
 8000354:	e9c5 4300 	strd	r4, r3, [r5]
 8000358:	4631      	mov	r1, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0xc2>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80ef 	beq.w	8000546 <__udivmoddi4+0x292>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x160>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xd4>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80f9 	bhi.w	800057a <__udivmoddi4+0x2c6>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0303 	sbc.w	r3, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	469e      	mov	lr, r3
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e0      	beq.n	8000358 <__udivmoddi4+0xa4>
 8000396:	e9c5 4e00 	strd	r4, lr, [r5]
 800039a:	e7dd      	b.n	8000358 <__udivmoddi4+0xa4>
 800039c:	b902      	cbnz	r2, 80003a0 <__udivmoddi4+0xec>
 800039e:	deff      	udf	#255	; 0xff
 80003a0:	fab2 f282 	clz	r2, r2
 80003a4:	2a00      	cmp	r2, #0
 80003a6:	f040 8092 	bne.w	80004ce <__udivmoddi4+0x21a>
 80003aa:	eba1 010c 	sub.w	r1, r1, ip
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	2601      	movs	r6, #1
 80003b8:	0c20      	lsrs	r0, r4, #16
 80003ba:	fbb1 f3f7 	udiv	r3, r1, r7
 80003be:	fb07 1113 	mls	r1, r7, r3, r1
 80003c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c6:	fb0e f003 	mul.w	r0, lr, r3
 80003ca:	4288      	cmp	r0, r1
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x12c>
 80003ce:	eb1c 0101 	adds.w	r1, ip, r1
 80003d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x12a>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f200 80cb 	bhi.w	8000574 <__udivmoddi4+0x2c0>
 80003de:	4643      	mov	r3, r8
 80003e0:	1a09      	subs	r1, r1, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e8:	fb07 1110 	mls	r1, r7, r0, r1
 80003ec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003f0:	fb0e fe00 	mul.w	lr, lr, r0
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x156>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x154>
 8000402:	45a6      	cmp	lr, r4
 8000404:	f200 80bb 	bhi.w	800057e <__udivmoddi4+0x2ca>
 8000408:	4608      	mov	r0, r1
 800040a:	eba4 040e 	sub.w	r4, r4, lr
 800040e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000412:	e79c      	b.n	800034e <__udivmoddi4+0x9a>
 8000414:	f1c6 0720 	rsb	r7, r6, #32
 8000418:	40b3      	lsls	r3, r6
 800041a:	fa22 fc07 	lsr.w	ip, r2, r7
 800041e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000422:	fa20 f407 	lsr.w	r4, r0, r7
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	431c      	orrs	r4, r3
 800042c:	40f9      	lsrs	r1, r7
 800042e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000432:	fa00 f306 	lsl.w	r3, r0, r6
 8000436:	fbb1 f8f9 	udiv	r8, r1, r9
 800043a:	0c20      	lsrs	r0, r4, #16
 800043c:	fa1f fe8c 	uxth.w	lr, ip
 8000440:	fb09 1118 	mls	r1, r9, r8, r1
 8000444:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000448:	fb08 f00e 	mul.w	r0, r8, lr
 800044c:	4288      	cmp	r0, r1
 800044e:	fa02 f206 	lsl.w	r2, r2, r6
 8000452:	d90b      	bls.n	800046c <__udivmoddi4+0x1b8>
 8000454:	eb1c 0101 	adds.w	r1, ip, r1
 8000458:	f108 3aff 	add.w	sl, r8, #4294967295
 800045c:	f080 8088 	bcs.w	8000570 <__udivmoddi4+0x2bc>
 8000460:	4288      	cmp	r0, r1
 8000462:	f240 8085 	bls.w	8000570 <__udivmoddi4+0x2bc>
 8000466:	f1a8 0802 	sub.w	r8, r8, #2
 800046a:	4461      	add	r1, ip
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f9 	udiv	r0, r1, r9
 8000474:	fb09 1110 	mls	r1, r9, r0, r1
 8000478:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800047c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000480:	458e      	cmp	lr, r1
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x1e2>
 8000484:	eb1c 0101 	adds.w	r1, ip, r1
 8000488:	f100 34ff 	add.w	r4, r0, #4294967295
 800048c:	d26c      	bcs.n	8000568 <__udivmoddi4+0x2b4>
 800048e:	458e      	cmp	lr, r1
 8000490:	d96a      	bls.n	8000568 <__udivmoddi4+0x2b4>
 8000492:	3802      	subs	r0, #2
 8000494:	4461      	add	r1, ip
 8000496:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800049a:	fba0 9402 	umull	r9, r4, r0, r2
 800049e:	eba1 010e 	sub.w	r1, r1, lr
 80004a2:	42a1      	cmp	r1, r4
 80004a4:	46c8      	mov	r8, r9
 80004a6:	46a6      	mov	lr, r4
 80004a8:	d356      	bcc.n	8000558 <__udivmoddi4+0x2a4>
 80004aa:	d053      	beq.n	8000554 <__udivmoddi4+0x2a0>
 80004ac:	b15d      	cbz	r5, 80004c6 <__udivmoddi4+0x212>
 80004ae:	ebb3 0208 	subs.w	r2, r3, r8
 80004b2:	eb61 010e 	sbc.w	r1, r1, lr
 80004b6:	fa01 f707 	lsl.w	r7, r1, r7
 80004ba:	fa22 f306 	lsr.w	r3, r2, r6
 80004be:	40f1      	lsrs	r1, r6
 80004c0:	431f      	orrs	r7, r3
 80004c2:	e9c5 7100 	strd	r7, r1, [r5]
 80004c6:	2600      	movs	r6, #0
 80004c8:	4631      	mov	r1, r6
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	40d8      	lsrs	r0, r3
 80004d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d8:	fa21 f303 	lsr.w	r3, r1, r3
 80004dc:	4091      	lsls	r1, r2
 80004de:	4301      	orrs	r1, r0
 80004e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e4:	fa1f fe8c 	uxth.w	lr, ip
 80004e8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004ec:	fb07 3610 	mls	r6, r7, r0, r3
 80004f0:	0c0b      	lsrs	r3, r1, #16
 80004f2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f6:	fb00 f60e 	mul.w	r6, r0, lr
 80004fa:	429e      	cmp	r6, r3
 80004fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x260>
 8000502:	eb1c 0303 	adds.w	r3, ip, r3
 8000506:	f100 38ff 	add.w	r8, r0, #4294967295
 800050a:	d22f      	bcs.n	800056c <__udivmoddi4+0x2b8>
 800050c:	429e      	cmp	r6, r3
 800050e:	d92d      	bls.n	800056c <__udivmoddi4+0x2b8>
 8000510:	3802      	subs	r0, #2
 8000512:	4463      	add	r3, ip
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	b289      	uxth	r1, r1
 8000518:	fbb3 f6f7 	udiv	r6, r3, r7
 800051c:	fb07 3316 	mls	r3, r7, r6, r3
 8000520:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000524:	fb06 f30e 	mul.w	r3, r6, lr
 8000528:	428b      	cmp	r3, r1
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x28a>
 800052c:	eb1c 0101 	adds.w	r1, ip, r1
 8000530:	f106 38ff 	add.w	r8, r6, #4294967295
 8000534:	d216      	bcs.n	8000564 <__udivmoddi4+0x2b0>
 8000536:	428b      	cmp	r3, r1
 8000538:	d914      	bls.n	8000564 <__udivmoddi4+0x2b0>
 800053a:	3e02      	subs	r6, #2
 800053c:	4461      	add	r1, ip
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000544:	e738      	b.n	80003b8 <__udivmoddi4+0x104>
 8000546:	462e      	mov	r6, r5
 8000548:	4628      	mov	r0, r5
 800054a:	e705      	b.n	8000358 <__udivmoddi4+0xa4>
 800054c:	4606      	mov	r6, r0
 800054e:	e6e3      	b.n	8000318 <__udivmoddi4+0x64>
 8000550:	4618      	mov	r0, r3
 8000552:	e6f8      	b.n	8000346 <__udivmoddi4+0x92>
 8000554:	454b      	cmp	r3, r9
 8000556:	d2a9      	bcs.n	80004ac <__udivmoddi4+0x1f8>
 8000558:	ebb9 0802 	subs.w	r8, r9, r2
 800055c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000560:	3801      	subs	r0, #1
 8000562:	e7a3      	b.n	80004ac <__udivmoddi4+0x1f8>
 8000564:	4646      	mov	r6, r8
 8000566:	e7ea      	b.n	800053e <__udivmoddi4+0x28a>
 8000568:	4620      	mov	r0, r4
 800056a:	e794      	b.n	8000496 <__udivmoddi4+0x1e2>
 800056c:	4640      	mov	r0, r8
 800056e:	e7d1      	b.n	8000514 <__udivmoddi4+0x260>
 8000570:	46d0      	mov	r8, sl
 8000572:	e77b      	b.n	800046c <__udivmoddi4+0x1b8>
 8000574:	3b02      	subs	r3, #2
 8000576:	4461      	add	r1, ip
 8000578:	e732      	b.n	80003e0 <__udivmoddi4+0x12c>
 800057a:	4630      	mov	r0, r6
 800057c:	e709      	b.n	8000392 <__udivmoddi4+0xde>
 800057e:	4464      	add	r4, ip
 8000580:	3802      	subs	r0, #2
 8000582:	e742      	b.n	800040a <__udivmoddi4+0x156>

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <initUart1Pins>:
#include "UartQuickDirtyInit.h"
#include <stm32f4xx_hal.h>
#include <main.h>

void initUart1Pins( void )
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	603b      	str	r3, [r7, #0]
 80005a0:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <initUart1Pins+0x58>)
 80005a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a4:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <initUart1Pins+0x58>)
 80005a6:	f043 0301 	orr.w	r3, r3, #1
 80005aa:	6313      	str	r3, [r2, #48]	; 0x30
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <initUart1Pins+0x58>)
 80005ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b0:	f003 0301 	and.w	r3, r3, #1
 80005b4:	603b      	str	r3, [r7, #0]
 80005b6:	683b      	ldr	r3, [r7, #0]

	//PA9 is USART1_RX PA10 is USART1_TX
	GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80005b8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80005bc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005be:	2302      	movs	r3, #2
 80005c0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005c6:	2303      	movs	r3, #3
 80005c8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80005ca:	2307      	movs	r3, #7
 80005cc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	4619      	mov	r1, r3
 80005d2:	4804      	ldr	r0, [pc, #16]	; (80005e4 <initUart1Pins+0x5c>)
 80005d4:	f001 fbfc 	bl	8001dd0 <HAL_GPIO_Init>
}
 80005d8:	bf00      	nop
 80005da:	3718      	adds	r7, #24
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40020000 	.word	0x40020000

080005e8 <initUart5Pins>:

void initUart5Pins( void )
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <initUart5Pins+0x98>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a1e      	ldr	r2, [pc, #120]	; (8000680 <initUart5Pins+0x98>)
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <initUart5Pins+0x98>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0304 	and.w	r3, r3, #4
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	4b18      	ldr	r3, [pc, #96]	; (8000680 <initUart5Pins+0x98>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a17      	ldr	r2, [pc, #92]	; (8000680 <initUart5Pins+0x98>)
 8000624:	f043 0308 	orr.w	r3, r3, #8
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b15      	ldr	r3, [pc, #84]	; (8000680 <initUart5Pins+0x98>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]


	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063c:	2302      	movs	r3, #2
 800063e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000644:	2303      	movs	r3, #3
 8000646:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000648:	2308      	movs	r3, #8
 800064a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	4619      	mov	r1, r3
 8000652:	480c      	ldr	r0, [pc, #48]	; (8000684 <initUart5Pins+0x9c>)
 8000654:	f001 fbbc 	bl	8001dd0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000658:	2304      	movs	r3, #4
 800065a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065c:	2302      	movs	r3, #2
 800065e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000664:	2303      	movs	r3, #3
 8000666:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000668:	2308      	movs	r3, #8
 800066a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	4619      	mov	r1, r3
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <initUart5Pins+0xa0>)
 8000674:	f001 fbac 	bl	8001dd0 <HAL_GPIO_Init>

}
 8000678:	bf00      	nop
 800067a:	3720      	adds	r7, #32
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40023800 	.word	0x40023800
 8000684:	40020800 	.word	0x40020800
 8000688:	40020c00 	.word	0x40020c00

0800068c <STM_UartInit>:
 * @param Baudrate desired baudrate the UART will be setup to use
 * @param DmaTx pointer to DMA struct to use when transmitting via DMA
 * @param DmaRx pointer to DMA struct to use when receiving via DMA
 */
void STM_UartInit( USART_TypeDef* STM_UART_PERIPH, uint32_t Baudrate, DMA_HandleTypeDef* DmaTx, DMA_HandleTypeDef* DmaRx )
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b098      	sub	sp, #96	; 0x60
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
 8000698:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef retVal;
	UART_HandleTypeDef uartInitStruct;
	assert_param(	STM_UART_PERIPH == USART1 ||
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	4a2e      	ldr	r2, [pc, #184]	; (8000758 <STM_UartInit+0xcc>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d007      	beq.n	80006b2 <STM_UartInit+0x26>
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4a2d      	ldr	r2, [pc, #180]	; (800075c <STM_UartInit+0xd0>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d003      	beq.n	80006b2 <STM_UartInit+0x26>
 80006aa:	2154      	movs	r1, #84	; 0x54
 80006ac:	482c      	ldr	r0, [pc, #176]	; (8000760 <STM_UartInit+0xd4>)
 80006ae:	f000 fd61 	bl	8001174 <assert_failed>
					STM_UART_PERIPH == UART5 );

	if(STM_UART_PERIPH == USART1)
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	4a28      	ldr	r2, [pc, #160]	; (8000758 <STM_UartInit+0xcc>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d110      	bne.n	80006dc <STM_UartInit+0x50>
	{
		initUart1Pins();
 80006ba:	f7ff ff65 	bl	8000588 <initUart1Pins>
		__USART1_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
 80006c2:	4b28      	ldr	r3, [pc, #160]	; (8000764 <STM_UartInit+0xd8>)
 80006c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c6:	4a27      	ldr	r2, [pc, #156]	; (8000764 <STM_UartInit+0xd8>)
 80006c8:	f043 0310 	orr.w	r3, r3, #16
 80006cc:	6453      	str	r3, [r2, #68]	; 0x44
 80006ce:	4b25      	ldr	r3, [pc, #148]	; (8000764 <STM_UartInit+0xd8>)
 80006d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d2:	f003 0310 	and.w	r3, r3, #16
 80006d6:	617b      	str	r3, [r7, #20]
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	e013      	b.n	8000704 <STM_UartInit+0x78>
	}
	else if (STM_UART_PERIPH == UART5)
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	4a1f      	ldr	r2, [pc, #124]	; (800075c <STM_UartInit+0xd0>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d10f      	bne.n	8000704 <STM_UartInit+0x78>
	{
		initUart5Pins();
 80006e4:	f7ff ff80 	bl	80005e8 <initUart5Pins>
		__UART5_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <STM_UartInit+0xd8>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	4a1c      	ldr	r2, [pc, #112]	; (8000764 <STM_UartInit+0xd8>)
 80006f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006f6:	6413      	str	r3, [r2, #64]	; 0x40
 80006f8:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <STM_UartInit+0xd8>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000700:	613b      	str	r3, [r7, #16]
 8000702:	693b      	ldr	r3, [r7, #16]
	}

	uartInitStruct.Instance = STM_UART_PERIPH;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	61bb      	str	r3, [r7, #24]
	uartInitStruct.Init.BaudRate = Baudrate;
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	61fb      	str	r3, [r7, #28]
	uartInitStruct.Init.WordLength = UART_WORDLENGTH_8B;
 800070c:	2300      	movs	r3, #0
 800070e:	623b      	str	r3, [r7, #32]
	uartInitStruct.Init.StopBits = UART_STOPBITS_1;
 8000710:	2300      	movs	r3, #0
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
	uartInitStruct.Init.Parity = UART_PARITY_NONE;
 8000714:	2300      	movs	r3, #0
 8000716:	62bb      	str	r3, [r7, #40]	; 0x28
	uartInitStruct.Init.Mode = UART_MODE_TX_RX;
 8000718:	230c      	movs	r3, #12
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uartInitStruct.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071c:	2300      	movs	r3, #0
 800071e:	633b      	str	r3, [r7, #48]	; 0x30
	uartInitStruct.Init.OverSampling = UART_OVERSAMPLING_8;
 8000720:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000724:	637b      	str	r3, [r7, #52]	; 0x34
	//uartInitStruct.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	uartInitStruct.hdmatx = DmaTx;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	64fb      	str	r3, [r7, #76]	; 0x4c
	uartInitStruct.hdmarx = DmaRx;
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	653b      	str	r3, [r7, #80]	; 0x50
	//uartInitStruct.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;

	retVal = HAL_UART_Init(&uartInitStruct);
 800072e:	f107 0318 	add.w	r3, r7, #24
 8000732:	4618      	mov	r0, r3
 8000734:	f003 f888 	bl	8003848 <HAL_UART_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	assert_param(retVal == HAL_OK);
 800073e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000742:	2b00      	cmp	r3, #0
 8000744:	d003      	beq.n	800074e <STM_UartInit+0xc2>
 8000746:	2170      	movs	r1, #112	; 0x70
 8000748:	4805      	ldr	r0, [pc, #20]	; (8000760 <STM_UartInit+0xd4>)
 800074a:	f000 fd13 	bl	8001174 <assert_failed>

}
 800074e:	bf00      	nop
 8000750:	3760      	adds	r7, #96	; 0x60
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40011000 	.word	0x40011000
 800075c:	40005000 	.word	0x40005000
 8000760:	08008e8c 	.word	0x08008e8c
 8000764:	40023800 	.word	0x40023800

08000768 <SetupUart5ExternalSim>:
 * @param Baudrate desired baudrate for the UART4
 *
 * This is a quick and dirty setup. . .
 */
void SetupUart5ExternalSim( uint32_t BaudRate )
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	//setup DMA
	uart5TxDmaSetup();
 8000770:	f000 f81a 	bl	80007a8 <uart5TxDmaSetup>

	//GPIO pins are setup in BSP/Nucleo_F767ZI_Init
	STM_UartInit(UART5, BaudRate, &hdma_uart5_tx, NULL);
 8000774:	2300      	movs	r3, #0
 8000776:	4a09      	ldr	r2, [pc, #36]	; (800079c <SetupUart5ExternalSim+0x34>)
 8000778:	6879      	ldr	r1, [r7, #4]
 800077a:	4809      	ldr	r0, [pc, #36]	; (80007a0 <SetupUart5ExternalSim+0x38>)
 800077c:	f7ff ff86 	bl	800068c <STM_UartInit>

	//also enable DMA for UART5 Transmits
	UART5->CR3 |= USART_CR3_DMAT;
 8000780:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <SetupUart5ExternalSim+0x38>)
 8000782:	695b      	ldr	r3, [r3, #20]
 8000784:	4a06      	ldr	r2, [pc, #24]	; (80007a0 <SetupUart5ExternalSim+0x38>)
 8000786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800078a:	6153      	str	r3, [r2, #20]
	 *	start the repeating DMA transfer.  Eventually, non-circular
	 *	receivers will loose a character here or there at high baudrates.
	 *	When this happens, SEGGER_SYSVIEW_Print() will stop printing when it hits
	 *	the first NULL character.
	 */
	uart5TxDmaStartRepeat(uart5Msg, sizeof(uart5Msg));
 800078c:	2110      	movs	r1, #16
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <SetupUart5ExternalSim+0x3c>)
 8000790:	f000 f874 	bl	800087c <uart5TxDmaStartRepeat>
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	2000002c 	.word	0x2000002c
 80007a0:	40005000 	.word	0x40005000
 80007a4:	08009180 	.word	0x08009180

080007a8 <uart5TxDmaSetup>:

static void uart5TxDmaSetup( void )
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	4b2d      	ldr	r3, [pc, #180]	; (8000868 <uart5TxDmaSetup+0xc0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a2c      	ldr	r2, [pc, #176]	; (8000868 <uart5TxDmaSetup+0xc0>)
 80007b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b2a      	ldr	r3, [pc, #168]	; (8000868 <uart5TxDmaSetup+0xc0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]

	  /* DMA interrupt init */
	  /* DMA1_Stream7_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2100      	movs	r1, #0
 80007ce:	202f      	movs	r0, #47	; 0x2f
 80007d0:	f000 fee4 	bl	800159c <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80007d4:	202f      	movs	r0, #47	; 0x2f
 80007d6:	f000 ff0d 	bl	80015f4 <HAL_NVIC_EnableIRQ>

	//initialize the DMA peripheral to transfer uart4Msg
	//to UART4 repeatedly
	memset(&hdma_uart5_tx, 0, sizeof(hdma_uart5_tx));
 80007da:	2260      	movs	r2, #96	; 0x60
 80007dc:	2100      	movs	r1, #0
 80007de:	4823      	ldr	r0, [pc, #140]	; (800086c <uart5TxDmaSetup+0xc4>)
 80007e0:	f008 fb40 	bl	8008e64 <memset>
	hdma_uart5_tx.Instance = DMA1_Stream7;
 80007e4:	4b21      	ldr	r3, [pc, #132]	; (800086c <uart5TxDmaSetup+0xc4>)
 80007e6:	4a22      	ldr	r2, [pc, #136]	; (8000870 <uart5TxDmaSetup+0xc8>)
 80007e8:	601a      	str	r2, [r3, #0]
	hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;			//channel 4 is for UART5 Tx
 80007ea:	4b20      	ldr	r3, [pc, #128]	; (800086c <uart5TxDmaSetup+0xc4>)
 80007ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007f0:	605a      	str	r2, [r3, #4]
	hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;	//transfering out of memory and into the peripheral register
 80007f2:	4b1e      	ldr	r3, [pc, #120]	; (800086c <uart5TxDmaSetup+0xc4>)
 80007f4:	2240      	movs	r2, #64	; 0x40
 80007f6:	609a      	str	r2, [r3, #8]
	hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;	//no fifo
 80007f8:	4b1c      	ldr	r3, [pc, #112]	; (800086c <uart5TxDmaSetup+0xc4>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_uart5_tx.Init.MemBurst = DMA_MBURST_SINGLE;		//transfer 1 at a time
 80007fe:	4b1b      	ldr	r3, [pc, #108]	; (800086c <uart5TxDmaSetup+0xc4>)
 8000800:	2200      	movs	r2, #0
 8000802:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000804:	4b19      	ldr	r3, [pc, #100]	; (800086c <uart5TxDmaSetup+0xc4>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
	hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;			//increment 1 byte at a time
 800080a:	4b18      	ldr	r3, [pc, #96]	; (800086c <uart5TxDmaSetup+0xc4>)
 800080c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000810:	611a      	str	r2, [r3, #16]
	hdma_uart5_tx.Init.Mode = DMA_CIRCULAR;				//this will automatically restart the transfer at the beginning after it has finished
 8000812:	4b16      	ldr	r3, [pc, #88]	; (800086c <uart5TxDmaSetup+0xc4>)
 8000814:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000818:	61da      	str	r2, [r3, #28]
	hdma_uart5_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;	//write 1 at a time to the peripheral
 800081a:	4b14      	ldr	r3, [pc, #80]	; (800086c <uart5TxDmaSetup+0xc4>)
 800081c:	2200      	movs	r2, #0
 800081e:	631a      	str	r2, [r3, #48]	; 0x30
	hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;		//always keep the peripheral address the same (the Tx data register is always in the same location)
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <uart5TxDmaSetup+0xc4>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
	hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <uart5TxDmaSetup+0xc4>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
	//we're setting low priority since this is meant to be simulated data - the DMA
	//transfers of the active code should take priority
	hdma_uart5_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <uart5TxDmaSetup+0xc4>)
 800082e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000832:	621a      	str	r2, [r3, #32]
	assert_param(HAL_DMA_Init(&hdma_uart5_tx) == HAL_OK);
 8000834:	480d      	ldr	r0, [pc, #52]	; (800086c <uart5TxDmaSetup+0xc4>)
 8000836:	f000 fef5 	bl	8001624 <HAL_DMA_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d003      	beq.n	8000848 <uart5TxDmaSetup+0xa0>
 8000840:	2165      	movs	r1, #101	; 0x65
 8000842:	480c      	ldr	r0, [pc, #48]	; (8000874 <uart5TxDmaSetup+0xcc>)
 8000844:	f000 fc96 	bl	8001174 <assert_failed>
	DMA1_Stream7->CR &= ~DMA_SxCR_EN;
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <uart5TxDmaSetup+0xc8>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a08      	ldr	r2, [pc, #32]	; (8000870 <uart5TxDmaSetup+0xc8>)
 800084e:	f023 0301 	bic.w	r3, r3, #1
 8000852:	6013      	str	r3, [r2, #0]

	//set the DMA transmit mode flag to enable DMA transfers
	UART5->CR3 |= USART_CR3_DMAT;
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <uart5TxDmaSetup+0xd0>)
 8000856:	695b      	ldr	r3, [r3, #20]
 8000858:	4a07      	ldr	r2, [pc, #28]	; (8000878 <uart5TxDmaSetup+0xd0>)
 800085a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800085e:	6153      	str	r3, [r2, #20]
}
 8000860:	bf00      	nop
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40023800 	.word	0x40023800
 800086c:	2000002c 	.word	0x2000002c
 8000870:	400260b8 	.word	0x400260b8
 8000874:	08008eb0 	.word	0x08008eb0
 8000878:	40005000 	.word	0x40005000

0800087c <uart5TxDmaStartRepeat>:
 * that will automatically repeat after it is finished
 * @param Msg pointer to array to transfer
 * @param Len number of elements in the array
 */
static void uart5TxDmaStartRepeat( const uint8_t* Msg, uint16_t Len )
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	460b      	mov	r3, r1
 8000886:	807b      	strh	r3, [r7, #2]

	//clear the transfer complete flag to make sure our transfer starts
	//UART5->CR |= USART_SR_TC;
	UART5->SR &= ~USART_SR_TC;
 8000888:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <uart5TxDmaStartRepeat+0x3c>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <uart5TxDmaStartRepeat+0x3c>)
 800088e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000892:	6013      	str	r3, [r2, #0]
	assert_param(HAL_DMA_Start(&hdma_uart5_tx, (uint32_t)Msg, (uint32_t)&(UART5->DR), Len) == HAL_OK);
 8000894:	6879      	ldr	r1, [r7, #4]
 8000896:	887b      	ldrh	r3, [r7, #2]
 8000898:	4a08      	ldr	r2, [pc, #32]	; (80008bc <uart5TxDmaStartRepeat+0x40>)
 800089a:	4809      	ldr	r0, [pc, #36]	; (80008c0 <uart5TxDmaStartRepeat+0x44>)
 800089c:	f001 f8dc 	bl	8001a58 <HAL_DMA_Start>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d003      	beq.n	80008ae <uart5TxDmaStartRepeat+0x32>
 80008a6:	2178      	movs	r1, #120	; 0x78
 80008a8:	4806      	ldr	r0, [pc, #24]	; (80008c4 <uart5TxDmaStartRepeat+0x48>)
 80008aa:	f000 fc63 	bl	8001174 <assert_failed>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40005000 	.word	0x40005000
 80008bc:	40005004 	.word	0x40005004
 80008c0:	2000002c 	.word	0x2000002c
 80008c4:	08008eb0 	.word	0x08008eb0

080008c8 <DMA1_Stream7_IRQHandler>:

void DMA1_Stream7_IRQHandler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
	//shouldn't ever get here - interrupts are not enabled
	while(1);
 80008cc:	e7fe      	b.n	80008cc <DMA1_Stream7_IRQHandler+0x4>
	...

080008d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f003 0307 	and.w	r3, r3, #7
 80008de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <__NVIC_SetPriorityGrouping+0x44>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008ec:	4013      	ands	r3, r2
 80008ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000902:	4a04      	ldr	r2, [pc, #16]	; (8000914 <__NVIC_SetPriorityGrouping+0x44>)
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	60d3      	str	r3, [r2, #12]
}
 8000908:	bf00      	nop
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000926:	2b00      	cmp	r3, #0
 8000928:	db0b      	blt.n	8000942 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	f003 021f 	and.w	r2, r3, #31
 8000930:	4907      	ldr	r1, [pc, #28]	; (8000950 <__NVIC_EnableIRQ+0x38>)
 8000932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000936:	095b      	lsrs	r3, r3, #5
 8000938:	2001      	movs	r0, #1
 800093a:	fa00 f202 	lsl.w	r2, r0, r2
 800093e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000e100 	.word	0xe000e100

08000954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	6039      	str	r1, [r7, #0]
 800095e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000964:	2b00      	cmp	r3, #0
 8000966:	db0a      	blt.n	800097e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	b2da      	uxtb	r2, r3
 800096c:	490c      	ldr	r1, [pc, #48]	; (80009a0 <__NVIC_SetPriority+0x4c>)
 800096e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000972:	0112      	lsls	r2, r2, #4
 8000974:	b2d2      	uxtb	r2, r2
 8000976:	440b      	add	r3, r1
 8000978:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800097c:	e00a      	b.n	8000994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	b2da      	uxtb	r2, r3
 8000982:	4908      	ldr	r1, [pc, #32]	; (80009a4 <__NVIC_SetPriority+0x50>)
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	f003 030f 	and.w	r3, r3, #15
 800098a:	3b04      	subs	r3, #4
 800098c:	0112      	lsls	r2, r2, #4
 800098e:	b2d2      	uxtb	r2, r2
 8000990:	440b      	add	r3, r1
 8000992:	761a      	strb	r2, [r3, #24]
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	e000e100 	.word	0xe000e100
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <main>:
static QueueHandle_t uart1_BytesReceived = NULL;

static bool rxInProgress = false;

int main(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af02      	add	r7, sp, #8
	HWInit();
 80009ae:	f000 f8e5 	bl	8000b7c <HWInit>
	SEGGER_SYSVIEW_Conf();
 80009b2:	f008 f8e9 	bl	8008b88 <SEGGER_SYSVIEW_Conf>
	//value for the NVIC. The argument passed to the function is the priority grouping
	//value, which is a number from 0 to 7. The value 0 means that no preemption and sub-priority bits are used,
	//and all interrupts have the same priority level.

	//ensure proper priority grouping for freeRTOS
	NVIC_SetPriorityGrouping(0);  // This means that priority grouping is use all the systems have the same priority
 80009b6:	2000      	movs	r0, #0
 80009b8:	f7ff ff8a 	bl	80008d0 <__NVIC_SetPriorityGrouping>
	//this delay is only present since we're using a simple
	//block-based buffer for receiving data - the transmission
	//needs to start after the receiver is ready for data for the
	//strings to start in the correct position in this simple setup
	TimerHandle_t oneShotHandle =
			xTimerCreate(	"startUart5Traffic",
 80009bc:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <main+0x94>)
 80009be:	9300      	str	r3, [sp, #0]
 80009c0:	2300      	movs	r3, #0
 80009c2:	2200      	movs	r2, #0
 80009c4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009c8:	481d      	ldr	r0, [pc, #116]	; (8000a40 <main+0x98>)
 80009ca:	f005 fc35 	bl	8006238 <xTimerCreate>
 80009ce:	6078      	str	r0, [r7, #4]
					500 /portTICK_PERIOD_MS,
					pdFALSE,
					NULL,
					startUart5Traffic);
	assert_param(oneShotHandle != NULL);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d103      	bne.n	80009de <main+0x36>
 80009d6:	2137      	movs	r1, #55	; 0x37
 80009d8:	481a      	ldr	r0, [pc, #104]	; (8000a44 <main+0x9c>)
 80009da:	f000 fbcb 	bl	8001174 <assert_failed>
	xTimerStart(oneShotHandle, 0);
 80009de:	f004 ffa9 	bl	8005934 <xTaskGetTickCount>
 80009e2:	4602      	mov	r2, r0
 80009e4:	2300      	movs	r3, #0
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	2300      	movs	r3, #0
 80009ea:	2101      	movs	r1, #1
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f005 fc7f 	bl	80062f0 <xTimerGenericCommand>

	//setup tasks, making sure they have been properly created before moving on
	uart1_BytesReceived = xQueueCreate(10, sizeof(char));
 80009f2:	2200      	movs	r2, #0
 80009f4:	2101      	movs	r1, #1
 80009f6:	200a      	movs	r0, #10
 80009f8:	f004 f836 	bl	8004a68 <xQueueGenericCreate>
 80009fc:	4603      	mov	r3, r0
 80009fe:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <main+0xa0>)
 8000a00:	6013      	str	r3, [r2, #0]
	assert_param(uart1_BytesReceived != NULL);
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <main+0xa0>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d103      	bne.n	8000a12 <main+0x6a>
 8000a0a:	213c      	movs	r1, #60	; 0x3c
 8000a0c:	480d      	ldr	r0, [pc, #52]	; (8000a44 <main+0x9c>)
 8000a0e:	f000 fbb1 	bl	8001174 <assert_failed>

	assert_param(xTaskCreate(uartPrintOutTask, "uartPrint", STACK_SIZE, NULL, tskIDLE_PRIORITY + 3, NULL) == pdPASS);
 8000a12:	2300      	movs	r3, #0
 8000a14:	9301      	str	r3, [sp, #4]
 8000a16:	2303      	movs	r3, #3
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	2280      	movs	r2, #128	; 0x80
 8000a1e:	490b      	ldr	r1, [pc, #44]	; (8000a4c <main+0xa4>)
 8000a20:	480b      	ldr	r0, [pc, #44]	; (8000a50 <main+0xa8>)
 8000a22:	f004 fd13 	bl	800544c <xTaskCreate>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d003      	beq.n	8000a34 <main+0x8c>
 8000a2c:	213e      	movs	r1, #62	; 0x3e
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <main+0x9c>)
 8000a30:	f000 fba0 	bl	8001174 <assert_failed>

	//start the scheduler - shouldn't return unless there's a problem
	vTaskStartScheduler();
 8000a34:	f004 fe6e 	bl	8005714 <vTaskStartScheduler>

	//if you've wound up here, there is likely an issue with overrunning the freeRTOS heap
	while(1)
 8000a38:	e7fe      	b.n	8000a38 <main+0x90>
 8000a3a:	bf00      	nop
 8000a3c:	08000a95 	.word	0x08000a95
 8000a40:	08008ec8 	.word	0x08008ec8
 8000a44:	08008edc 	.word	0x08008edc
 8000a48:	2000008c 	.word	0x2000008c
 8000a4c:	08008ef8 	.word	0x08008ef8
 8000a50:	08000aad 	.word	0x08000aad

08000a54 <startReceiveInt>:
/**
 * Start an interrupt driven receive.  This particular ISR is hard-coded
 * to push characters into a queue
 */
void startReceiveInt( void )
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	rxInProgress = true;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <startReceiveInt+0x38>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	701a      	strb	r2, [r3, #0]
	USART1->CR3 |= USART_CR3_EIE;	//enable error interrupts
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <startReceiveInt+0x3c>)
 8000a60:	695b      	ldr	r3, [r3, #20]
 8000a62:	4a0b      	ldr	r2, [pc, #44]	; (8000a90 <startReceiveInt+0x3c>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6153      	str	r3, [r2, #20]
	USART1->CR1 |= (USART_CR1_UE | USART_CR1_RXNEIE);
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <startReceiveInt+0x3c>)
 8000a6c:	68db      	ldr	r3, [r3, #12]
 8000a6e:	4a08      	ldr	r2, [pc, #32]	; (8000a90 <startReceiveInt+0x3c>)
 8000a70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a74:	f043 0320 	orr.w	r3, r3, #32
 8000a78:	60d3      	str	r3, [r2, #12]
	//all 4 bits are for preemption priority -
	NVIC_SetPriority(USART1_IRQn, 6);
 8000a7a:	2106      	movs	r1, #6
 8000a7c:	2025      	movs	r0, #37	; 0x25
 8000a7e:	f7ff ff69 	bl	8000954 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 8000a82:	2025      	movs	r0, #37	; 0x25
 8000a84:	f7ff ff48 	bl	8000918 <__NVIC_EnableIRQ>
}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000090 	.word	0x20000090
 8000a90:	40011000 	.word	0x40011000

08000a94 <startUart5Traffic>:

void startUart5Traffic( TimerHandle_t xTimer )
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	SetupUart5ExternalSim(BAUDRATE);
 8000a9c:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000aa0:	f7ff fe62 	bl	8000768 <SetupUart5ExternalSim>
}
 8000aa4:	bf00      	nop
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <uartPrintOutTask>:

void uartPrintOutTask( void* NotUsed)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	char nextByte;
	STM_UartInit(USART1, BAUDRATE, NULL, NULL);
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000abc:	4809      	ldr	r0, [pc, #36]	; (8000ae4 <uartPrintOutTask+0x38>)
 8000abe:	f7ff fde5 	bl	800068c <STM_UartInit>
	startReceiveInt();
 8000ac2:	f7ff ffc7 	bl	8000a54 <startReceiveInt>

	while(1)
	{
		xQueueReceive(uart1_BytesReceived, &nextByte, portMAX_DELAY);
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <uartPrintOutTask+0x3c>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f107 010f 	add.w	r1, r7, #15
 8000ace:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f004 fa34 	bl	8004f40 <xQueueReceive>
		SEGGER_SYSVIEW_PrintfHost("%c", nextByte);
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
 8000ada:	4619      	mov	r1, r3
 8000adc:	4803      	ldr	r0, [pc, #12]	; (8000aec <uartPrintOutTask+0x40>)
 8000ade:	f007 ffd5 	bl	8008a8c <SEGGER_SYSVIEW_PrintfHost>
		xQueueReceive(uart1_BytesReceived, &nextByte, portMAX_DELAY);
 8000ae2:	e7f0      	b.n	8000ac6 <uartPrintOutTask+0x1a>
 8000ae4:	40011000 	.word	0x40011000
 8000ae8:	2000008c 	.word	0x2000008c
 8000aec:	08008f04 	.word	0x08008f04

08000af0 <USART1_IRQHandler>:
	}
}

void USART1_IRQHandler( void )
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
	SEGGER_SYSVIEW_RecordEnterISR();
 8000afa:	f007 fd1f 	bl	800853c <SEGGER_SYSVIEW_RecordEnterISR>

	//first check for errors
	if(	USART1->SR & (	USART_SR_ORE |
 8000afe:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <USART1_IRQHandler+0x7c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f003 030f 	and.w	r3, r3, #15
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d005      	beq.n	8000b16 <USART1_IRQHandler+0x26>
			USART_SR_NE |
			USART_SR_FE |
			USART_SR_PE ))
	{
		//clear error flags
		USART1->SR &= ~(USART_SR_ORE |  // overun error
 8000b0a:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <USART1_IRQHandler+0x7c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a17      	ldr	r2, [pc, #92]	; (8000b6c <USART1_IRQHandler+0x7c>)
 8000b10:	f023 030f 	bic.w	r3, r3, #15
 8000b14:	6013      	str	r3, [r2, #0]
						USART_SR_NE |
						USART_SR_FE |
						USART_SR_PE);
	}

	if(	USART1->SR & USART_SR_RXNE)
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <USART1_IRQHandler+0x7c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f003 0320 	and.w	r3, r3, #32
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d00e      	beq.n	8000b40 <USART1_IRQHandler+0x50>
	{
		//read the data register unconditionally to clear
		//the receive not empty interrupt if no reception is
		//in progress
		uint8_t tempVal = (uint8_t) USART1->DR;
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <USART1_IRQHandler+0x7c>)
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	70fb      	strb	r3, [r7, #3]

		if(rxInProgress)
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <USART1_IRQHandler+0x80>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d006      	beq.n	8000b40 <USART1_IRQHandler+0x50>
		{
			xQueueSendFromISR(uart1_BytesReceived, &tempVal, &xHigherPriorityTaskWoken);
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <USART1_IRQHandler+0x84>)
 8000b34:	6818      	ldr	r0, [r3, #0]
 8000b36:	1d3a      	adds	r2, r7, #4
 8000b38:	1cf9      	adds	r1, r7, #3
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	f004 f942 	bl	8004dc4 <xQueueGenericSendFromISR>
		}
	}
	SEGGER_SYSVIEW_RecordExitISR();
 8000b40:	f007 fd3e 	bl	80085c0 <SEGGER_SYSVIEW_RecordExitISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d00a      	beq.n	8000b60 <USART1_IRQHandler+0x70>
 8000b4a:	f007 fd55 	bl	80085f8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <USART1_IRQHandler+0x88>)
 8000b50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	f3bf 8f4f 	dsb	sy
 8000b5a:	f3bf 8f6f 	isb	sy
}
 8000b5e:	e001      	b.n	8000b64 <USART1_IRQHandler+0x74>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000b60:	f007 fd2e 	bl	80085c0 <SEGGER_SYSVIEW_RecordExitISR>
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40011000 	.word	0x40011000
 8000b70:	20000090 	.word	0x20000090
 8000b74:	2000008c 	.word	0x2000008c
 8000b78:	e000ed04 	.word	0xe000ed04

08000b7c <HWInit>:
 * Initialize the minimum amount of hardware that will be used in all examples
 * Other initialization might also be necessary (PWM for LED's, USART's, USB, etc)
 * and should be performed after the initial call to HWInit
 */
void HWInit( void )
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	HAL_Init();
 8000b80:	f000 fc10 	bl	80013a4 <HAL_Init>
	SystemClock_Config();
 8000b84:	f000 f806 	bl	8000b94 <SystemClock_Config>
	gpioPinsInit();			//initialize GPIO lines for LED's
 8000b88:	f000 f870 	bl	8000c6c <gpioPinsInit>
	rngInit();
 8000b8c:	f000 fac8 	bl	8001120 <rngInit>
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <SystemClock_Config>:
	return RNG->DR %Max + Min;
}


void SystemClock_Config(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b094      	sub	sp, #80	; 0x50
 8000b98:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9a:	f107 0320 	add.w	r3, r7, #32
 8000b9e:	2230      	movs	r2, #48	; 0x30
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f008 f95e 	bl	8008e64 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba8:	f107 030c 	add.w	r3, r7, #12
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	4b29      	ldr	r3, [pc, #164]	; (8000c64 <SystemClock_Config+0xd0>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc0:	4a28      	ldr	r2, [pc, #160]	; (8000c64 <SystemClock_Config+0xd0>)
 8000bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc8:	4b26      	ldr	r3, [pc, #152]	; (8000c64 <SystemClock_Config+0xd0>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	4b23      	ldr	r3, [pc, #140]	; (8000c68 <SystemClock_Config+0xd4>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000be0:	4a21      	ldr	r2, [pc, #132]	; (8000c68 <SystemClock_Config+0xd4>)
 8000be2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be6:	6013      	str	r3, [r2, #0]
 8000be8:	4b1f      	ldr	r3, [pc, #124]	; (8000c68 <SystemClock_Config+0xd4>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bfc:	2310      	movs	r3, #16
 8000bfe:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c00:	2302      	movs	r3, #2
 8000c02:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c04:	2300      	movs	r3, #0
 8000c06:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000c08:	2308      	movs	r3, #8
 8000c0a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 50;
 8000c0c:	2332      	movs	r3, #50	; 0x32
 8000c0e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c10:	2304      	movs	r3, #4
 8000c12:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c14:	2307      	movs	r3, #7
 8000c16:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c18:	f107 0320 	add.w	r3, r7, #32
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f001 fc2b 	bl	8002478 <HAL_RCC_OscConfig>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <SystemClock_Config+0x98>
	{
		Error_Handler();
 8000c28:	f000 fa9c 	bl	8001164 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c30:	2302      	movs	r3, #2
 8000c32:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000c38:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c3c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000c3e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c42:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c44:	f107 030c 	add.w	r3, r7, #12
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f001 ff3c 	bl	8002ac8 <HAL_RCC_ClockConfig>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <SystemClock_Config+0xc6>
	{
		Error_Handler();
 8000c56:	f000 fa85 	bl	8001164 <Error_Handler>
	}

}
 8000c5a:	bf00      	nop
 8000c5c:	3750      	adds	r7, #80	; 0x50
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40007000 	.word	0x40007000

08000c6c <gpioPinsInit>:
/**
  * Initialize all relevant GPIO lines for LED's used in examples, as well as
  * USB pins
  */
static void gpioPinsInit(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08e      	sub	sp, #56	; 0x38
 8000c70:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	60da      	str	r2, [r3, #12]
 8000c80:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	623b      	str	r3, [r7, #32]
 8000c86:	4bb2      	ldr	r3, [pc, #712]	; (8000f50 <gpioPinsInit+0x2e4>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4ab1      	ldr	r2, [pc, #708]	; (8000f50 <gpioPinsInit+0x2e4>)
 8000c8c:	f043 0304 	orr.w	r3, r3, #4
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4baf      	ldr	r3, [pc, #700]	; (8000f50 <gpioPinsInit+0x2e4>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0304 	and.w	r3, r3, #4
 8000c9a:	623b      	str	r3, [r7, #32]
 8000c9c:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
 8000ca2:	4bab      	ldr	r3, [pc, #684]	; (8000f50 <gpioPinsInit+0x2e4>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4aaa      	ldr	r2, [pc, #680]	; (8000f50 <gpioPinsInit+0x2e4>)
 8000ca8:	f043 0320 	orr.w	r3, r3, #32
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4ba8      	ldr	r3, [pc, #672]	; (8000f50 <gpioPinsInit+0x2e4>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0320 	and.w	r3, r3, #32
 8000cb6:	61fb      	str	r3, [r7, #28]
 8000cb8:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61bb      	str	r3, [r7, #24]
 8000cbe:	4ba4      	ldr	r3, [pc, #656]	; (8000f50 <gpioPinsInit+0x2e4>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4aa3      	ldr	r2, [pc, #652]	; (8000f50 <gpioPinsInit+0x2e4>)
 8000cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4ba1      	ldr	r3, [pc, #644]	; (8000f50 <gpioPinsInit+0x2e4>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cd2:	61bb      	str	r3, [r7, #24]
 8000cd4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	4b9d      	ldr	r3, [pc, #628]	; (8000f50 <gpioPinsInit+0x2e4>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a9c      	ldr	r2, [pc, #624]	; (8000f50 <gpioPinsInit+0x2e4>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b9a      	ldr	r3, [pc, #616]	; (8000f50 <gpioPinsInit+0x2e4>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	4b96      	ldr	r3, [pc, #600]	; (8000f50 <gpioPinsInit+0x2e4>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a95      	ldr	r2, [pc, #596]	; (8000f50 <gpioPinsInit+0x2e4>)
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b93      	ldr	r3, [pc, #588]	; (8000f50 <gpioPinsInit+0x2e4>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	4b8f      	ldr	r3, [pc, #572]	; (8000f50 <gpioPinsInit+0x2e4>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a8e      	ldr	r2, [pc, #568]	; (8000f50 <gpioPinsInit+0x2e4>)
 8000d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b8c      	ldr	r3, [pc, #560]	; (8000f50 <gpioPinsInit+0x2e4>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	4b88      	ldr	r3, [pc, #544]	; (8000f50 <gpioPinsInit+0x2e4>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a87      	ldr	r2, [pc, #540]	; (8000f50 <gpioPinsInit+0x2e4>)
 8000d34:	f043 0310 	orr.w	r3, r3, #16
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b85      	ldr	r3, [pc, #532]	; (8000f50 <gpioPinsInit+0x2e4>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0310 	and.w	r3, r3, #16
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	4b81      	ldr	r3, [pc, #516]	; (8000f50 <gpioPinsInit+0x2e4>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a80      	ldr	r2, [pc, #512]	; (8000f50 <gpioPinsInit+0x2e4>)
 8000d50:	f043 0308 	orr.w	r3, r3, #8
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b7e      	ldr	r3, [pc, #504]	; (8000f50 <gpioPinsInit+0x2e4>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0308 	and.w	r3, r3, #8
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2116      	movs	r1, #22
 8000d66:	487b      	ldr	r0, [pc, #492]	; (8000f54 <gpioPinsInit+0x2e8>)
 8000d68:	f001 fb54 	bl	8002414 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2180      	movs	r1, #128	; 0x80
 8000d70:	4879      	ldr	r0, [pc, #484]	; (8000f58 <gpioPinsInit+0x2ec>)
 8000d72:	f001 fb4f 	bl	8002414 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000d7c:	4877      	ldr	r0, [pc, #476]	; (8000f5c <gpioPinsInit+0x2f0>)
 8000d7e:	f001 fb49 	bl	8002414 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000d88:	4875      	ldr	r0, [pc, #468]	; (8000f60 <gpioPinsInit+0x2f4>)
 8000d8a:	f001 fb43 	bl	8002414 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
	                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
	                           A7_Pin A8_Pin A9_Pin */
	GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000d8e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
			|A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
			|A7_Pin|A8_Pin|A9_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000da0:	230c      	movs	r3, #12
 8000da2:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da8:	4619      	mov	r1, r3
 8000daa:	486e      	ldr	r0, [pc, #440]	; (8000f64 <gpioPinsInit+0x2f8>)
 8000dac:	f001 f810 	bl	8001dd0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
	GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000db0:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000dc2:	2305      	movs	r3, #5
 8000dc4:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4865      	ldr	r0, [pc, #404]	; (8000f64 <gpioPinsInit+0x2f8>)
 8000dce:	f000 ffff 	bl	8001dd0 <HAL_GPIO_Init>

	/*Configure GPIO pin : ENABLE_Pin */
	GPIO_InitStruct.Pin = ENABLE_Pin;
 8000dd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000de4:	230e      	movs	r3, #14
 8000de6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dec:	4619      	mov	r1, r3
 8000dee:	485d      	ldr	r0, [pc, #372]	; (8000f64 <gpioPinsInit+0x2f8>)
 8000df0:	f000 ffee 	bl	8001dd0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SDNWE_Pin */
	GPIO_InitStruct.Pin = SDNWE_Pin;
 8000df4:	2301      	movs	r3, #1
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e00:	2303      	movs	r3, #3
 8000e02:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e04:	230c      	movs	r3, #12
 8000e06:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000e08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4851      	ldr	r0, [pc, #324]	; (8000f54 <gpioPinsInit+0x2e8>)
 8000e10:	f000 ffde 	bl	8001dd0 <HAL_GPIO_Init>

	/*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
	GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000e14:	2316      	movs	r3, #22
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e28:	4619      	mov	r1, r3
 8000e2a:	484a      	ldr	r0, [pc, #296]	; (8000f54 <gpioPinsInit+0x2e8>)
 8000e2c:	f000 ffd0 	bl	8001dd0 <HAL_GPIO_Init>

	/*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
	GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000e30:	f248 0307 	movw	r3, #32775	; 0x8007
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e36:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e3a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e44:	4619      	mov	r1, r3
 8000e46:	4844      	ldr	r0, [pc, #272]	; (8000f58 <gpioPinsInit+0x2ec>)
 8000e48:	f000 ffc2 	bl	8001dd0 <HAL_GPIO_Init>

	/*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
	                           R5_Pin */
	GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000e4c:	f641 0358 	movw	r3, #6232	; 0x1858
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
			|R5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e5e:	230e      	movs	r3, #14
 8000e60:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e66:	4619      	mov	r1, r3
 8000e68:	483b      	ldr	r0, [pc, #236]	; (8000f58 <gpioPinsInit+0x2ec>)
 8000e6a:	f000 ffb1 	bl	8001dd0 <HAL_GPIO_Init>

	/*Configure GPIO pin : ACP_RST_Pin */
	GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000e6e:	2380      	movs	r3, #128	; 0x80
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e72:	2301      	movs	r3, #1
 8000e74:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e82:	4619      	mov	r1, r3
 8000e84:	4834      	ldr	r0, [pc, #208]	; (8000f58 <gpioPinsInit+0x2ec>)
 8000e86:	f000 ffa3 	bl	8001dd0 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OC_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000e8a:	2320      	movs	r3, #32
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e8e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	482d      	ldr	r0, [pc, #180]	; (8000f54 <gpioPinsInit+0x2e8>)
 8000ea0:	f000 ff96 	bl	8001dd0 <HAL_GPIO_Init>

	/*Configure GPIO pins : R3_Pin R6_Pin */
	GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000eb4:	2309      	movs	r3, #9
 8000eb6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	482a      	ldr	r0, [pc, #168]	; (8000f68 <gpioPinsInit+0x2fc>)
 8000ec0:	f000 ff86 	bl	8001dd0 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ec4:	2304      	movs	r3, #4
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4824      	ldr	r0, [pc, #144]	; (8000f68 <gpioPinsInit+0x2fc>)
 8000ed8:	f000 ff7a 	bl	8001dd0 <HAL_GPIO_Init>

	/*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
	                           SDCLK_Pin SDNCAS_Pin */
	GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000edc:	f248 1333 	movw	r3, #33075	; 0x8133
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
			|SDCLK_Pin|SDNCAS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eea:	2303      	movs	r3, #3
 8000eec:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000eee:	230c      	movs	r3, #12
 8000ef0:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4819      	ldr	r0, [pc, #100]	; (8000f60 <gpioPinsInit+0x2f4>)
 8000efa:	f000 ff69 	bl	8001dd0 <HAL_GPIO_Init>

	/*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
	                           D8_Pin D9_Pin D10_Pin D11_Pin
	                           D12_Pin NBL0_Pin NBL1_Pin */
	GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000efe:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
			|D8_Pin|D9_Pin|D10_Pin|D11_Pin
			|D12_Pin|NBL0_Pin|NBL1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f10:	230c      	movs	r3, #12
 8000f12:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4814      	ldr	r0, [pc, #80]	; (8000f6c <gpioPinsInit+0x300>)
 8000f1c:	f000 ff58 	bl	8001dd0 <HAL_GPIO_Init>

	/*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
	GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000f20:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f32:	230e      	movs	r3, #14
 8000f34:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	480a      	ldr	r0, [pc, #40]	; (8000f68 <gpioPinsInit+0x2fc>)
 8000f3e:	f000 ff47 	bl	8001dd0 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
	GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000f42:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f4c:	e010      	b.n	8000f70 <gpioPinsInit+0x304>
 8000f4e:	bf00      	nop
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40020800 	.word	0x40020800
 8000f58:	40020000 	.word	0x40020000
 8000f5c:	40020c00 	.word	0x40020c00
 8000f60:	40021800 	.word	0x40021800
 8000f64:	40021400 	.word	0x40021400
 8000f68:	40020400 	.word	0x40020400
 8000f6c:	40021000 	.word	0x40021000
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	2300      	movs	r3, #0
 8000f76:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000f78:	230c      	movs	r3, #12
 8000f7a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f80:	4619      	mov	r1, r3
 8000f82:	4862      	ldr	r0, [pc, #392]	; (800110c <gpioPinsInit+0x4a0>)
 8000f84:	f000 ff24 	bl	8001dd0 <HAL_GPIO_Init>

	/*Configure GPIO pin : VBUS_HS_Pin */
	GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000f88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000f96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	485b      	ldr	r0, [pc, #364]	; (800110c <gpioPinsInit+0x4a0>)
 8000f9e:	f000 ff17 	bl	8001dd0 <HAL_GPIO_Init>

	/*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
	                           D1_Pin D2_Pin D3_Pin */
	GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000fa2:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
			|D1_Pin|D2_Pin|D3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000fb4:	230c      	movs	r3, #12
 8000fb6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4854      	ldr	r0, [pc, #336]	; (8001110 <gpioPinsInit+0x4a4>)
 8000fc0:	f000 ff06 	bl	8001dd0 <HAL_GPIO_Init>

	/*Configure GPIO pin : TE_Pin */
	GPIO_InitStruct.Pin = TE_Pin;
 8000fc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	484d      	ldr	r0, [pc, #308]	; (8001110 <gpioPinsInit+0x4a4>)
 8000fda:	f000 fef9 	bl	8001dd0 <HAL_GPIO_Init>

	/*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
	GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000fde:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4846      	ldr	r0, [pc, #280]	; (8001110 <gpioPinsInit+0x4a4>)
 8000ff8:	f000 feea 	bl	8001dd0 <HAL_GPIO_Init>

	/*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
	GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000ffc:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800100e:	230e      	movs	r3, #14
 8001010:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001016:	4619      	mov	r1, r3
 8001018:	483e      	ldr	r0, [pc, #248]	; (8001114 <gpioPinsInit+0x4a8>)
 800101a:	f000 fed9 	bl	8001dd0 <HAL_GPIO_Init>

	/*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
	GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800101e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001030:	230e      	movs	r3, #14
 8001032:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001038:	4619      	mov	r1, r3
 800103a:	4837      	ldr	r0, [pc, #220]	; (8001118 <gpioPinsInit+0x4ac>)
 800103c:	f000 fec8 	bl	8001dd0 <HAL_GPIO_Init>

	/*Configure GPIO pin : I2C3_SDA_Pin */
	GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001040:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001046:	2312      	movs	r3, #18
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2300      	movs	r3, #0
 8001050:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001052:	2304      	movs	r3, #4
 8001054:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105a:	4619      	mov	r1, r3
 800105c:	482e      	ldr	r0, [pc, #184]	; (8001118 <gpioPinsInit+0x4ac>)
 800105e:	f000 feb7 	bl	8001dd0 <HAL_GPIO_Init>

	/*Configure GPIO pin : I2C3_SCL_Pin */
	GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001062:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001068:	2312      	movs	r3, #18
 800106a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001074:	2304      	movs	r3, #4
 8001076:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107c:	4619      	mov	r1, r3
 800107e:	4827      	ldr	r0, [pc, #156]	; (800111c <gpioPinsInit+0x4b0>)
 8001080:	f000 fea6 	bl	8001dd0 <HAL_GPIO_Init>

	/*Configure GPIO pins : G7_Pin B2_Pin */
	GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001084:	2348      	movs	r3, #72	; 0x48
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2302      	movs	r3, #2
 800108a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	2300      	movs	r3, #0
 8001092:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001094:	230e      	movs	r3, #14
 8001096:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109c:	4619      	mov	r1, r3
 800109e:	481c      	ldr	r0, [pc, #112]	; (8001110 <gpioPinsInit+0x4a4>)
 80010a0:	f000 fe96 	bl	8001dd0 <HAL_GPIO_Init>

	/*Configure GPIO pins : G3_Pin B4_Pin */
	GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80010a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b2:	2300      	movs	r3, #0
 80010b4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80010b6:	2309      	movs	r3, #9
 80010b8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010be:	4619      	mov	r1, r3
 80010c0:	4814      	ldr	r0, [pc, #80]	; (8001114 <gpioPinsInit+0x4a8>)
 80010c2:	f000 fe85 	bl	8001dd0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin LD4_Pin */
	GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80010c6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010dc:	4619      	mov	r1, r3
 80010de:	480d      	ldr	r0, [pc, #52]	; (8001114 <gpioPinsInit+0x4a8>)
 80010e0:	f000 fe76 	bl	8001dd0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
	GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80010e4:	2360      	movs	r3, #96	; 0x60
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e8:	2302      	movs	r3, #2
 80010ea:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f0:	2303      	movs	r3, #3
 80010f2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010f4:	230c      	movs	r3, #12
 80010f6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fc:	4619      	mov	r1, r3
 80010fe:	4803      	ldr	r0, [pc, #12]	; (800110c <gpioPinsInit+0x4a0>)
 8001100:	f000 fe66 	bl	8001dd0 <HAL_GPIO_Init>

}
 8001104:	bf00      	nop
 8001106:	3738      	adds	r7, #56	; 0x38
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40020400 	.word	0x40020400
 8001110:	40020c00 	.word	0x40020c00
 8001114:	40021800 	.word	0x40021800
 8001118:	40020800 	.word	0x40020800
 800111c:	40020000 	.word	0x40020000

08001120 <rngInit>:

/**
 * Init the random number generator (RNG) peripheral
 */
static void rngInit( void )
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
	//start the peripheral clock
	__HAL_RCC_RNG_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	4b0c      	ldr	r3, [pc, #48]	; (800115c <rngInit+0x3c>)
 800112c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800112e:	4a0b      	ldr	r2, [pc, #44]	; (800115c <rngInit+0x3c>)
 8001130:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001134:	6353      	str	r3, [r2, #52]	; 0x34
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <rngInit+0x3c>)
 8001138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800113a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]

	//enable the random number generator
	RNG->CR |= RNG_CR_RNGEN;
 8001142:	4b07      	ldr	r3, [pc, #28]	; (8001160 <rngInit+0x40>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a06      	ldr	r2, [pc, #24]	; (8001160 <rngInit+0x40>)
 8001148:	f043 0304 	orr.w	r3, r3, #4
 800114c:	6013      	str	r3, [r2, #0]
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	40023800 	.word	0x40023800
 8001160:	50060800 	.word	0x50060800

08001164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
	...

08001174 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  SEGGER_SYSVIEW_PrintfHost("Assertion Failed:file %s \
 800117e:	683a      	ldr	r2, [r7, #0]
 8001180:	6879      	ldr	r1, [r7, #4]
 8001182:	4802      	ldr	r0, [pc, #8]	; (800118c <assert_failed+0x18>)
 8001184:	f007 fc82 	bl	8008a8c <SEGGER_SYSVIEW_PrintfHost>
                            on line %d\r\n", file, line);
  while(1);
 8001188:	e7fe      	b.n	8001188 <assert_failed+0x14>
 800118a:	bf00      	nop
 800118c:	08008f08 	.word	0x08008f08

08001190 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <HAL_MspInit+0x4c>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	4a0f      	ldr	r2, [pc, #60]	; (80011dc <HAL_MspInit+0x4c>)
 80011a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a4:	6453      	str	r3, [r2, #68]	; 0x44
 80011a6:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <HAL_MspInit+0x4c>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <HAL_MspInit+0x4c>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	4a08      	ldr	r2, [pc, #32]	; (80011dc <HAL_MspInit+0x4c>)
 80011bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c0:	6413      	str	r3, [r2, #64]	; 0x40
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <HAL_MspInit+0x4c>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011ce:	2007      	movs	r0, #7
 80011d0:	f000 f9c4 	bl	800155c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40023800 	.word	0x40023800

080011e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08e      	sub	sp, #56	; 0x38
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80011ec:	2300      	movs	r3, #0
 80011ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	4b33      	ldr	r3, [pc, #204]	; (80012c4 <HAL_InitTick+0xe4>)
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	4a32      	ldr	r2, [pc, #200]	; (80012c4 <HAL_InitTick+0xe4>)
 80011fa:	f043 0310 	orr.w	r3, r3, #16
 80011fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001200:	4b30      	ldr	r3, [pc, #192]	; (80012c4 <HAL_InitTick+0xe4>)
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	f003 0310 	and.w	r3, r3, #16
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800120c:	f107 0210 	add.w	r2, r7, #16
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4611      	mov	r1, r2
 8001216:	4618      	mov	r0, r3
 8001218:	f001 ff36 	bl	8003088 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800121c:	6a3b      	ldr	r3, [r7, #32]
 800121e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001222:	2b00      	cmp	r3, #0
 8001224:	d103      	bne.n	800122e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001226:	f001 ff07 	bl	8003038 <HAL_RCC_GetPCLK1Freq>
 800122a:	6378      	str	r0, [r7, #52]	; 0x34
 800122c:	e004      	b.n	8001238 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800122e:	f001 ff03 	bl	8003038 <HAL_RCC_GetPCLK1Freq>
 8001232:	4603      	mov	r3, r0
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800123a:	4a23      	ldr	r2, [pc, #140]	; (80012c8 <HAL_InitTick+0xe8>)
 800123c:	fba2 2303 	umull	r2, r3, r2, r3
 8001240:	0c9b      	lsrs	r3, r3, #18
 8001242:	3b01      	subs	r3, #1
 8001244:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001246:	4b21      	ldr	r3, [pc, #132]	; (80012cc <HAL_InitTick+0xec>)
 8001248:	4a21      	ldr	r2, [pc, #132]	; (80012d0 <HAL_InitTick+0xf0>)
 800124a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800124c:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <HAL_InitTick+0xec>)
 800124e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001252:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001254:	4a1d      	ldr	r2, [pc, #116]	; (80012cc <HAL_InitTick+0xec>)
 8001256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001258:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800125a:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <HAL_InitTick+0xec>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001260:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <HAL_InitTick+0xec>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001266:	4b19      	ldr	r3, [pc, #100]	; (80012cc <HAL_InitTick+0xec>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800126c:	4817      	ldr	r0, [pc, #92]	; (80012cc <HAL_InitTick+0xec>)
 800126e:	f001 ff3d 	bl	80030ec <HAL_TIM_Base_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001278:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800127c:	2b00      	cmp	r3, #0
 800127e:	d11b      	bne.n	80012b8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001280:	4812      	ldr	r0, [pc, #72]	; (80012cc <HAL_InitTick+0xec>)
 8001282:	f002 f82d 	bl	80032e0 <HAL_TIM_Base_Start_IT>
 8001286:	4603      	mov	r3, r0
 8001288:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800128c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001290:	2b00      	cmp	r3, #0
 8001292:	d111      	bne.n	80012b8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001294:	2036      	movs	r0, #54	; 0x36
 8001296:	f000 f9ad 	bl	80015f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b0f      	cmp	r3, #15
 800129e:	d808      	bhi.n	80012b2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80012a0:	2200      	movs	r2, #0
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	2036      	movs	r0, #54	; 0x36
 80012a6:	f000 f979 	bl	800159c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012aa:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <HAL_InitTick+0xf4>)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	e002      	b.n	80012b8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80012b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3738      	adds	r7, #56	; 0x38
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40023800 	.word	0x40023800
 80012c8:	431bde83 	.word	0x431bde83
 80012cc:	200000d8 	.word	0x200000d8
 80012d0:	40001000 	.word	0x40001000
 80012d4:	20000004 	.word	0x20000004

080012d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <NMI_Handler+0x4>

080012de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e2:	e7fe      	b.n	80012e2 <HardFault_Handler+0x4>

080012e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <MemManage_Handler+0x4>

080012ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ee:	e7fe      	b.n	80012ee <BusFault_Handler+0x4>

080012f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <UsageFault_Handler+0x4>

080012f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001308:	4802      	ldr	r0, [pc, #8]	; (8001314 <UART5_IRQHandler+0x10>)
 800130a:	f002 fb85 	bl	8003a18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000094 	.word	0x20000094

08001318 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800131c:	4802      	ldr	r0, [pc, #8]	; (8001328 <TIM6_DAC_IRQHandler+0x10>)
 800131e:	f002 f8a5 	bl	800346c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200000d8 	.word	0x200000d8

0800132c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <SystemInit+0x20>)
 8001332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001336:	4a05      	ldr	r2, [pc, #20]	; (800134c <SystemInit+0x20>)
 8001338:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800133c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001350:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001388 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001354:	480d      	ldr	r0, [pc, #52]	; (800138c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001356:	490e      	ldr	r1, [pc, #56]	; (8001390 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001358:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800135c:	e002      	b.n	8001364 <LoopCopyDataInit>

0800135e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001362:	3304      	adds	r3, #4

08001364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001368:	d3f9      	bcc.n	800135e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136a:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800136c:	4c0b      	ldr	r4, [pc, #44]	; (800139c <LoopFillZerobss+0x26>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001370:	e001      	b.n	8001376 <LoopFillZerobss>

08001372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001374:	3204      	adds	r2, #4

08001376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001378:	d3fb      	bcc.n	8001372 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800137a:	f7ff ffd7 	bl	800132c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800137e:	f007 fd2f 	bl	8008de0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001382:	f7ff fb11 	bl	80009a8 <main>
  bx  lr    
 8001386:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001388:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800138c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001390:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001394:	080091e8 	.word	0x080091e8
  ldr r2, =_sbss
 8001398:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800139c:	20014544 	.word	0x20014544

080013a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013a0:	e7fe      	b.n	80013a0 <ADC_IRQHandler>
	...

080013a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013a8:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <HAL_Init+0x40>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a0d      	ldr	r2, [pc, #52]	; (80013e4 <HAL_Init+0x40>)
 80013ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013b4:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <HAL_Init+0x40>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0a      	ldr	r2, [pc, #40]	; (80013e4 <HAL_Init+0x40>)
 80013ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <HAL_Init+0x40>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a07      	ldr	r2, [pc, #28]	; (80013e4 <HAL_Init+0x40>)
 80013c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013cc:	2003      	movs	r0, #3
 80013ce:	f000 f8c5 	bl	800155c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013d2:	2000      	movs	r0, #0
 80013d4:	f7ff ff04 	bl	80011e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d8:	f7ff feda 	bl	8001190 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40023c00 	.word	0x40023c00

080013e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return uwTick;
 80013ec:	4b03      	ldr	r3, [pc, #12]	; (80013fc <HAL_GetTick+0x14>)
 80013ee:	681b      	ldr	r3, [r3, #0]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	20000120 	.word	0x20000120

08001400 <__NVIC_SetPriorityGrouping>:
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <__NVIC_SetPriorityGrouping+0x44>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001416:	68ba      	ldr	r2, [r7, #8]
 8001418:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800141c:	4013      	ands	r3, r2
 800141e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001428:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800142c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001432:	4a04      	ldr	r2, [pc, #16]	; (8001444 <__NVIC_SetPriorityGrouping+0x44>)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	60d3      	str	r3, [r2, #12]
}
 8001438:	bf00      	nop
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <__NVIC_GetPriorityGrouping>:
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <__NVIC_GetPriorityGrouping+0x18>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	0a1b      	lsrs	r3, r3, #8
 8001452:	f003 0307 	and.w	r3, r3, #7
}
 8001456:	4618      	mov	r0, r3
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <__NVIC_EnableIRQ>:
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	2b00      	cmp	r3, #0
 8001474:	db0b      	blt.n	800148e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	f003 021f 	and.w	r2, r3, #31
 800147c:	4907      	ldr	r1, [pc, #28]	; (800149c <__NVIC_EnableIRQ+0x38>)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	095b      	lsrs	r3, r3, #5
 8001484:	2001      	movs	r0, #1
 8001486:	fa00 f202 	lsl.w	r2, r0, r2
 800148a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000e100 	.word	0xe000e100

080014a0 <__NVIC_SetPriority>:
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	6039      	str	r1, [r7, #0]
 80014aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	db0a      	blt.n	80014ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	490c      	ldr	r1, [pc, #48]	; (80014ec <__NVIC_SetPriority+0x4c>)
 80014ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014be:	0112      	lsls	r2, r2, #4
 80014c0:	b2d2      	uxtb	r2, r2
 80014c2:	440b      	add	r3, r1
 80014c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80014c8:	e00a      	b.n	80014e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4908      	ldr	r1, [pc, #32]	; (80014f0 <__NVIC_SetPriority+0x50>)
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	f003 030f 	and.w	r3, r3, #15
 80014d6:	3b04      	subs	r3, #4
 80014d8:	0112      	lsls	r2, r2, #4
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	440b      	add	r3, r1
 80014de:	761a      	strb	r2, [r3, #24]
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000e100 	.word	0xe000e100
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b089      	sub	sp, #36	; 0x24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	f1c3 0307 	rsb	r3, r3, #7
 800150e:	2b04      	cmp	r3, #4
 8001510:	bf28      	it	cs
 8001512:	2304      	movcs	r3, #4
 8001514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3304      	adds	r3, #4
 800151a:	2b06      	cmp	r3, #6
 800151c:	d902      	bls.n	8001524 <NVIC_EncodePriority+0x30>
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3b03      	subs	r3, #3
 8001522:	e000      	b.n	8001526 <NVIC_EncodePriority+0x32>
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001528:	f04f 32ff 	mov.w	r2, #4294967295
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43da      	mvns	r2, r3
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	401a      	ands	r2, r3
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800153c:	f04f 31ff 	mov.w	r1, #4294967295
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	fa01 f303 	lsl.w	r3, r1, r3
 8001546:	43d9      	mvns	r1, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	4313      	orrs	r3, r2
         );
}
 800154e:	4618      	mov	r0, r3
 8001550:	3724      	adds	r7, #36	; 0x24
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
	...

0800155c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b07      	cmp	r3, #7
 8001568:	d00f      	beq.n	800158a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b06      	cmp	r3, #6
 800156e:	d00c      	beq.n	800158a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b05      	cmp	r3, #5
 8001574:	d009      	beq.n	800158a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b04      	cmp	r3, #4
 800157a:	d006      	beq.n	800158a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b03      	cmp	r3, #3
 8001580:	d003      	beq.n	800158a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001582:	2190      	movs	r1, #144	; 0x90
 8001584:	4804      	ldr	r0, [pc, #16]	; (8001598 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001586:	f7ff fdf5 	bl	8001174 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff ff38 	bl	8001400 <__NVIC_SetPriorityGrouping>
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	08008f4c 	.word	0x08008f4c

0800159c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
 80015a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b0f      	cmp	r3, #15
 80015b2:	d903      	bls.n	80015bc <HAL_NVIC_SetPriority+0x20>
 80015b4:	21a8      	movs	r1, #168	; 0xa8
 80015b6:	480e      	ldr	r0, [pc, #56]	; (80015f0 <HAL_NVIC_SetPriority+0x54>)
 80015b8:	f7ff fddc 	bl	8001174 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	2b0f      	cmp	r3, #15
 80015c0:	d903      	bls.n	80015ca <HAL_NVIC_SetPriority+0x2e>
 80015c2:	21a9      	movs	r1, #169	; 0xa9
 80015c4:	480a      	ldr	r0, [pc, #40]	; (80015f0 <HAL_NVIC_SetPriority+0x54>)
 80015c6:	f7ff fdd5 	bl	8001174 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015ca:	f7ff ff3d 	bl	8001448 <__NVIC_GetPriorityGrouping>
 80015ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	68b9      	ldr	r1, [r7, #8]
 80015d4:	6978      	ldr	r0, [r7, #20]
 80015d6:	f7ff ff8d 	bl	80014f4 <NVIC_EncodePriority>
 80015da:	4602      	mov	r2, r0
 80015dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e0:	4611      	mov	r1, r2
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff ff5c 	bl	80014a0 <__NVIC_SetPriority>
}
 80015e8:	bf00      	nop
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	08008f4c 	.word	0x08008f4c

080015f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	2b00      	cmp	r3, #0
 8001604:	da03      	bge.n	800160e <HAL_NVIC_EnableIRQ+0x1a>
 8001606:	21bc      	movs	r1, #188	; 0xbc
 8001608:	4805      	ldr	r0, [pc, #20]	; (8001620 <HAL_NVIC_EnableIRQ+0x2c>)
 800160a:	f7ff fdb3 	bl	8001174 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ff26 	bl	8001464 <__NVIC_EnableIRQ>
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	08008f4c 	.word	0x08008f4c

08001624 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001630:	f7ff feda 	bl	80013e8 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d101      	bne.n	8001640 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e203      	b.n	8001a48 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a8b      	ldr	r2, [pc, #556]	; (8001874 <HAL_DMA_Init+0x250>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d04e      	beq.n	80016e8 <HAL_DMA_Init+0xc4>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a8a      	ldr	r2, [pc, #552]	; (8001878 <HAL_DMA_Init+0x254>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d049      	beq.n	80016e8 <HAL_DMA_Init+0xc4>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a88      	ldr	r2, [pc, #544]	; (800187c <HAL_DMA_Init+0x258>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d044      	beq.n	80016e8 <HAL_DMA_Init+0xc4>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a87      	ldr	r2, [pc, #540]	; (8001880 <HAL_DMA_Init+0x25c>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d03f      	beq.n	80016e8 <HAL_DMA_Init+0xc4>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a85      	ldr	r2, [pc, #532]	; (8001884 <HAL_DMA_Init+0x260>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d03a      	beq.n	80016e8 <HAL_DMA_Init+0xc4>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a84      	ldr	r2, [pc, #528]	; (8001888 <HAL_DMA_Init+0x264>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d035      	beq.n	80016e8 <HAL_DMA_Init+0xc4>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a82      	ldr	r2, [pc, #520]	; (800188c <HAL_DMA_Init+0x268>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d030      	beq.n	80016e8 <HAL_DMA_Init+0xc4>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a81      	ldr	r2, [pc, #516]	; (8001890 <HAL_DMA_Init+0x26c>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d02b      	beq.n	80016e8 <HAL_DMA_Init+0xc4>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a7f      	ldr	r2, [pc, #508]	; (8001894 <HAL_DMA_Init+0x270>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d026      	beq.n	80016e8 <HAL_DMA_Init+0xc4>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a7e      	ldr	r2, [pc, #504]	; (8001898 <HAL_DMA_Init+0x274>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d021      	beq.n	80016e8 <HAL_DMA_Init+0xc4>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a7c      	ldr	r2, [pc, #496]	; (800189c <HAL_DMA_Init+0x278>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d01c      	beq.n	80016e8 <HAL_DMA_Init+0xc4>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a7b      	ldr	r2, [pc, #492]	; (80018a0 <HAL_DMA_Init+0x27c>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d017      	beq.n	80016e8 <HAL_DMA_Init+0xc4>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a79      	ldr	r2, [pc, #484]	; (80018a4 <HAL_DMA_Init+0x280>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d012      	beq.n	80016e8 <HAL_DMA_Init+0xc4>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a78      	ldr	r2, [pc, #480]	; (80018a8 <HAL_DMA_Init+0x284>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d00d      	beq.n	80016e8 <HAL_DMA_Init+0xc4>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a76      	ldr	r2, [pc, #472]	; (80018ac <HAL_DMA_Init+0x288>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d008      	beq.n	80016e8 <HAL_DMA_Init+0xc4>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a75      	ldr	r2, [pc, #468]	; (80018b0 <HAL_DMA_Init+0x28c>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d003      	beq.n	80016e8 <HAL_DMA_Init+0xc4>
 80016e0:	21b7      	movs	r1, #183	; 0xb7
 80016e2:	4874      	ldr	r0, [pc, #464]	; (80018b4 <HAL_DMA_Init+0x290>)
 80016e4:	f7ff fd46 	bl	8001174 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d026      	beq.n	800173e <HAL_DMA_Init+0x11a>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80016f8:	d021      	beq.n	800173e <HAL_DMA_Init+0x11a>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001702:	d01c      	beq.n	800173e <HAL_DMA_Init+0x11a>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800170c:	d017      	beq.n	800173e <HAL_DMA_Init+0x11a>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001716:	d012      	beq.n	800173e <HAL_DMA_Init+0x11a>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8001720:	d00d      	beq.n	800173e <HAL_DMA_Init+0x11a>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800172a:	d008      	beq.n	800173e <HAL_DMA_Init+0x11a>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8001734:	d003      	beq.n	800173e <HAL_DMA_Init+0x11a>
 8001736:	21b8      	movs	r1, #184	; 0xb8
 8001738:	485e      	ldr	r0, [pc, #376]	; (80018b4 <HAL_DMA_Init+0x290>)
 800173a:	f7ff fd1b 	bl	8001174 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00b      	beq.n	800175e <HAL_DMA_Init+0x13a>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	2b40      	cmp	r3, #64	; 0x40
 800174c:	d007      	beq.n	800175e <HAL_DMA_Init+0x13a>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2b80      	cmp	r3, #128	; 0x80
 8001754:	d003      	beq.n	800175e <HAL_DMA_Init+0x13a>
 8001756:	21b9      	movs	r1, #185	; 0xb9
 8001758:	4856      	ldr	r0, [pc, #344]	; (80018b4 <HAL_DMA_Init+0x290>)
 800175a:	f7ff fd0b 	bl	8001174 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001766:	d007      	beq.n	8001778 <HAL_DMA_Init+0x154>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d003      	beq.n	8001778 <HAL_DMA_Init+0x154>
 8001770:	21ba      	movs	r1, #186	; 0xba
 8001772:	4850      	ldr	r0, [pc, #320]	; (80018b4 <HAL_DMA_Init+0x290>)
 8001774:	f7ff fcfe 	bl	8001174 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001780:	d007      	beq.n	8001792 <HAL_DMA_Init+0x16e>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_DMA_Init+0x16e>
 800178a:	21bb      	movs	r1, #187	; 0xbb
 800178c:	4849      	ldr	r0, [pc, #292]	; (80018b4 <HAL_DMA_Init+0x290>)
 800178e:	f7ff fcf1 	bl	8001174 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d00d      	beq.n	80017b6 <HAL_DMA_Init+0x192>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017a2:	d008      	beq.n	80017b6 <HAL_DMA_Init+0x192>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	695b      	ldr	r3, [r3, #20]
 80017a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017ac:	d003      	beq.n	80017b6 <HAL_DMA_Init+0x192>
 80017ae:	21bc      	movs	r1, #188	; 0xbc
 80017b0:	4840      	ldr	r0, [pc, #256]	; (80018b4 <HAL_DMA_Init+0x290>)
 80017b2:	f7ff fcdf 	bl	8001174 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d00d      	beq.n	80017da <HAL_DMA_Init+0x1b6>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017c6:	d008      	beq.n	80017da <HAL_DMA_Init+0x1b6>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017d0:	d003      	beq.n	80017da <HAL_DMA_Init+0x1b6>
 80017d2:	21bd      	movs	r1, #189	; 0xbd
 80017d4:	4837      	ldr	r0, [pc, #220]	; (80018b4 <HAL_DMA_Init+0x290>)
 80017d6:	f7ff fccd 	bl	8001174 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d00c      	beq.n	80017fc <HAL_DMA_Init+0x1d8>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017ea:	d007      	beq.n	80017fc <HAL_DMA_Init+0x1d8>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69db      	ldr	r3, [r3, #28]
 80017f0:	2b20      	cmp	r3, #32
 80017f2:	d003      	beq.n	80017fc <HAL_DMA_Init+0x1d8>
 80017f4:	21be      	movs	r1, #190	; 0xbe
 80017f6:	482f      	ldr	r0, [pc, #188]	; (80018b4 <HAL_DMA_Init+0x290>)
 80017f8:	f7ff fcbc 	bl	8001174 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d012      	beq.n	800182a <HAL_DMA_Init+0x206>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800180c:	d00d      	beq.n	800182a <HAL_DMA_Init+0x206>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001816:	d008      	beq.n	800182a <HAL_DMA_Init+0x206>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001820:	d003      	beq.n	800182a <HAL_DMA_Init+0x206>
 8001822:	21bf      	movs	r1, #191	; 0xbf
 8001824:	4823      	ldr	r0, [pc, #140]	; (80018b4 <HAL_DMA_Init+0x290>)
 8001826:	f7ff fca5 	bl	8001174 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182e:	2b00      	cmp	r3, #0
 8001830:	d007      	beq.n	8001842 <HAL_DMA_Init+0x21e>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	2b04      	cmp	r3, #4
 8001838:	d003      	beq.n	8001842 <HAL_DMA_Init+0x21e>
 800183a:	21c0      	movs	r1, #192	; 0xc0
 800183c:	481d      	ldr	r0, [pc, #116]	; (80018b4 <HAL_DMA_Init+0x290>)
 800183e:	f7ff fc99 	bl	8001174 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	2b00      	cmp	r3, #0
 8001848:	d064      	beq.n	8001914 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184e:	2b00      	cmp	r3, #0
 8001850:	d032      	beq.n	80018b8 <HAL_DMA_Init+0x294>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001856:	2b01      	cmp	r3, #1
 8001858:	d02e      	beq.n	80018b8 <HAL_DMA_Init+0x294>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185e:	2b02      	cmp	r3, #2
 8001860:	d02a      	beq.n	80018b8 <HAL_DMA_Init+0x294>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001866:	2b03      	cmp	r3, #3
 8001868:	d026      	beq.n	80018b8 <HAL_DMA_Init+0x294>
 800186a:	21c5      	movs	r1, #197	; 0xc5
 800186c:	4811      	ldr	r0, [pc, #68]	; (80018b4 <HAL_DMA_Init+0x290>)
 800186e:	f7ff fc81 	bl	8001174 <assert_failed>
 8001872:	e021      	b.n	80018b8 <HAL_DMA_Init+0x294>
 8001874:	40026010 	.word	0x40026010
 8001878:	40026028 	.word	0x40026028
 800187c:	40026040 	.word	0x40026040
 8001880:	40026058 	.word	0x40026058
 8001884:	40026070 	.word	0x40026070
 8001888:	40026088 	.word	0x40026088
 800188c:	400260a0 	.word	0x400260a0
 8001890:	400260b8 	.word	0x400260b8
 8001894:	40026410 	.word	0x40026410
 8001898:	40026428 	.word	0x40026428
 800189c:	40026440 	.word	0x40026440
 80018a0:	40026458 	.word	0x40026458
 80018a4:	40026470 	.word	0x40026470
 80018a8:	40026488 	.word	0x40026488
 80018ac:	400264a0 	.word	0x400264a0
 80018b0:	400264b8 	.word	0x400264b8
 80018b4:	08008f88 	.word	0x08008f88
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d012      	beq.n	80018e6 <HAL_DMA_Init+0x2c2>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80018c8:	d00d      	beq.n	80018e6 <HAL_DMA_Init+0x2c2>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018d2:	d008      	beq.n	80018e6 <HAL_DMA_Init+0x2c2>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018dc:	d003      	beq.n	80018e6 <HAL_DMA_Init+0x2c2>
 80018de:	21c6      	movs	r1, #198	; 0xc6
 80018e0:	485b      	ldr	r0, [pc, #364]	; (8001a50 <HAL_DMA_Init+0x42c>)
 80018e2:	f7ff fc47 	bl	8001174 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d012      	beq.n	8001914 <HAL_DMA_Init+0x2f0>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018f6:	d00d      	beq.n	8001914 <HAL_DMA_Init+0x2f0>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001900:	d008      	beq.n	8001914 <HAL_DMA_Init+0x2f0>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800190a:	d003      	beq.n	8001914 <HAL_DMA_Init+0x2f0>
 800190c:	21c7      	movs	r1, #199	; 0xc7
 800190e:	4850      	ldr	r0, [pc, #320]	; (8001a50 <HAL_DMA_Init+0x42c>)
 8001910:	f7ff fc30 	bl	8001174 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2202      	movs	r2, #2
 8001918:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 0201 	bic.w	r2, r2, #1
 8001932:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001934:	e00f      	b.n	8001956 <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001936:	f7ff fd57 	bl	80013e8 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b05      	cmp	r3, #5
 8001942:	d908      	bls.n	8001956 <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2220      	movs	r2, #32
 8001948:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2203      	movs	r2, #3
 800194e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e078      	b.n	8001a48 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1e8      	bne.n	8001936 <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	4b39      	ldr	r3, [pc, #228]	; (8001a54 <HAL_DMA_Init+0x430>)
 8001970:	4013      	ands	r3, r2
 8001972:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001982:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800198e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800199a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ac:	2b04      	cmp	r3, #4
 80019ae:	d107      	bne.n	80019c0 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b8:	4313      	orrs	r3, r2
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	4313      	orrs	r3, r2
 80019be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	f023 0307 	bic.w	r3, r3, #7
 80019d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	4313      	orrs	r3, r2
 80019e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	d117      	bne.n	8001a1a <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d00e      	beq.n	8001a1a <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 f96b 	bl	8001cd8 <DMA_CheckFifoParam>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d008      	beq.n	8001a1a <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2240      	movs	r2, #64	; 0x40
 8001a0c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2201      	movs	r2, #1
 8001a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a16:	2301      	movs	r3, #1
 8001a18:	e016      	b.n	8001a48 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f922 	bl	8001c6c <DMA_CalcBaseAndBitshift>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a30:	223f      	movs	r2, #63	; 0x3f
 8001a32:	409a      	lsls	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	08008f88 	.word	0x08008f88
 8001a54:	f010803f 	.word	0xf010803f

08001a58 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
 8001a64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_DMA_Start+0x20>
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a76:	d304      	bcc.n	8001a82 <HAL_DMA_Start+0x2a>
 8001a78:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8001a7c:	481a      	ldr	r0, [pc, #104]	; (8001ae8 <HAL_DMA_Start+0x90>)
 8001a7e:	f7ff fb79 	bl	8001174 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d101      	bne.n	8001a90 <HAL_DMA_Start+0x38>
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	e026      	b.n	8001ade <HAL_DMA_Start+0x86>
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d115      	bne.n	8001ad0 <HAL_DMA_Start+0x78>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	68b9      	ldr	r1, [r7, #8]
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f000 f8a9 	bl	8001c10 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f042 0201 	orr.w	r2, r2, #1
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	e005      	b.n	8001adc <HAL_DMA_Start+0x84>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8001adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	08008f88 	.word	0x08008f88

08001aec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001afa:	f7ff fc75 	bl	80013e8 <HAL_GetTick>
 8001afe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d008      	beq.n	8001b1e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2280      	movs	r2, #128	; 0x80
 8001b10:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e052      	b.n	8001bc4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 0216 	bic.w	r2, r2, #22
 8001b2c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	695a      	ldr	r2, [r3, #20]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b3c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d103      	bne.n	8001b4e <HAL_DMA_Abort+0x62>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d007      	beq.n	8001b5e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0208 	bic.w	r2, r2, #8
 8001b5c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 0201 	bic.w	r2, r2, #1
 8001b6c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b6e:	e013      	b.n	8001b98 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b70:	f7ff fc3a 	bl	80013e8 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b05      	cmp	r3, #5
 8001b7c:	d90c      	bls.n	8001b98 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2220      	movs	r2, #32
 8001b82:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2203      	movs	r2, #3
 8001b88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e015      	b.n	8001bc4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1e4      	bne.n	8001b70 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001baa:	223f      	movs	r2, #63	; 0x3f
 8001bac:	409a      	lsls	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d004      	beq.n	8001bea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2280      	movs	r2, #128	; 0x80
 8001be4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e00c      	b.n	8001c04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2205      	movs	r2, #5
 8001bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0201 	bic.w	r2, r2, #1
 8001c00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
 8001c1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	2b40      	cmp	r3, #64	; 0x40
 8001c3c:	d108      	bne.n	8001c50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001c4e:	e007      	b.n	8001c60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68ba      	ldr	r2, [r7, #8]
 8001c56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	60da      	str	r2, [r3, #12]
}
 8001c60:	bf00      	nop
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	3b10      	subs	r3, #16
 8001c7c:	4a14      	ldr	r2, [pc, #80]	; (8001cd0 <DMA_CalcBaseAndBitshift+0x64>)
 8001c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c82:	091b      	lsrs	r3, r3, #4
 8001c84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c86:	4a13      	ldr	r2, [pc, #76]	; (8001cd4 <DMA_CalcBaseAndBitshift+0x68>)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2b03      	cmp	r3, #3
 8001c98:	d909      	bls.n	8001cae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ca2:	f023 0303 	bic.w	r3, r3, #3
 8001ca6:	1d1a      	adds	r2, r3, #4
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	659a      	str	r2, [r3, #88]	; 0x58
 8001cac:	e007      	b.n	8001cbe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001cb6:	f023 0303 	bic.w	r3, r3, #3
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	aaaaaaab 	.word	0xaaaaaaab
 8001cd4:	080091a8 	.word	0x080091a8

08001cd8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d11f      	bne.n	8001d32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	2b03      	cmp	r3, #3
 8001cf6:	d856      	bhi.n	8001da6 <DMA_CheckFifoParam+0xce>
 8001cf8:	a201      	add	r2, pc, #4	; (adr r2, 8001d00 <DMA_CheckFifoParam+0x28>)
 8001cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cfe:	bf00      	nop
 8001d00:	08001d11 	.word	0x08001d11
 8001d04:	08001d23 	.word	0x08001d23
 8001d08:	08001d11 	.word	0x08001d11
 8001d0c:	08001da7 	.word	0x08001da7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d046      	beq.n	8001daa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d20:	e043      	b.n	8001daa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d2a:	d140      	bne.n	8001dae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d30:	e03d      	b.n	8001dae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d3a:	d121      	bne.n	8001d80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d837      	bhi.n	8001db2 <DMA_CheckFifoParam+0xda>
 8001d42:	a201      	add	r2, pc, #4	; (adr r2, 8001d48 <DMA_CheckFifoParam+0x70>)
 8001d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d48:	08001d59 	.word	0x08001d59
 8001d4c:	08001d5f 	.word	0x08001d5f
 8001d50:	08001d59 	.word	0x08001d59
 8001d54:	08001d71 	.word	0x08001d71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8001d5c:	e030      	b.n	8001dc0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d025      	beq.n	8001db6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d6e:	e022      	b.n	8001db6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d78:	d11f      	bne.n	8001dba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d7e:	e01c      	b.n	8001dba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d903      	bls.n	8001d8e <DMA_CheckFifoParam+0xb6>
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d003      	beq.n	8001d94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d8c:	e018      	b.n	8001dc0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	73fb      	strb	r3, [r7, #15]
      break;
 8001d92:	e015      	b.n	8001dc0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00e      	beq.n	8001dbe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	73fb      	strb	r3, [r7, #15]
      break;
 8001da4:	e00b      	b.n	8001dbe <DMA_CheckFifoParam+0xe6>
      break;
 8001da6:	bf00      	nop
 8001da8:	e00a      	b.n	8001dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8001daa:	bf00      	nop
 8001dac:	e008      	b.n	8001dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8001dae:	bf00      	nop
 8001db0:	e006      	b.n	8001dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8001db2:	bf00      	nop
 8001db4:	e004      	b.n	8001dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8001db6:	bf00      	nop
 8001db8:	e002      	b.n	8001dc0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001dba:	bf00      	nop
 8001dbc:	e000      	b.n	8001dc0 <DMA_CheckFifoParam+0xe8>
      break;
 8001dbe:	bf00      	nop
    }
  } 
  
  return status; 
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop

08001dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b088      	sub	sp, #32
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a3d      	ldr	r2, [pc, #244]	; (8001ee0 <HAL_GPIO_Init+0x110>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d02b      	beq.n	8001e46 <HAL_GPIO_Init+0x76>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a3c      	ldr	r2, [pc, #240]	; (8001ee4 <HAL_GPIO_Init+0x114>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d027      	beq.n	8001e46 <HAL_GPIO_Init+0x76>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a3b      	ldr	r2, [pc, #236]	; (8001ee8 <HAL_GPIO_Init+0x118>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d023      	beq.n	8001e46 <HAL_GPIO_Init+0x76>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a3a      	ldr	r2, [pc, #232]	; (8001eec <HAL_GPIO_Init+0x11c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d01f      	beq.n	8001e46 <HAL_GPIO_Init+0x76>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a39      	ldr	r2, [pc, #228]	; (8001ef0 <HAL_GPIO_Init+0x120>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d01b      	beq.n	8001e46 <HAL_GPIO_Init+0x76>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a38      	ldr	r2, [pc, #224]	; (8001ef4 <HAL_GPIO_Init+0x124>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d017      	beq.n	8001e46 <HAL_GPIO_Init+0x76>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a37      	ldr	r2, [pc, #220]	; (8001ef8 <HAL_GPIO_Init+0x128>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d013      	beq.n	8001e46 <HAL_GPIO_Init+0x76>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a36      	ldr	r2, [pc, #216]	; (8001efc <HAL_GPIO_Init+0x12c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d00f      	beq.n	8001e46 <HAL_GPIO_Init+0x76>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a35      	ldr	r2, [pc, #212]	; (8001f00 <HAL_GPIO_Init+0x130>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d00b      	beq.n	8001e46 <HAL_GPIO_Init+0x76>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a34      	ldr	r2, [pc, #208]	; (8001f04 <HAL_GPIO_Init+0x134>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d007      	beq.n	8001e46 <HAL_GPIO_Init+0x76>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a33      	ldr	r2, [pc, #204]	; (8001f08 <HAL_GPIO_Init+0x138>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_Init+0x76>
 8001e3e:	21ac      	movs	r1, #172	; 0xac
 8001e40:	4832      	ldr	r0, [pc, #200]	; (8001f0c <HAL_GPIO_Init+0x13c>)
 8001e42:	f7ff f997 	bl	8001174 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d005      	beq.n	8001e5c <HAL_GPIO_Init+0x8c>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	0c1b      	lsrs	r3, r3, #16
 8001e56:	041b      	lsls	r3, r3, #16
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_GPIO_Init+0x94>
 8001e5c:	21ad      	movs	r1, #173	; 0xad
 8001e5e:	482b      	ldr	r0, [pc, #172]	; (8001f0c <HAL_GPIO_Init+0x13c>)
 8001e60:	f7ff f988 	bl	8001174 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d035      	beq.n	8001ed8 <HAL_GPIO_Init+0x108>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d031      	beq.n	8001ed8 <HAL_GPIO_Init+0x108>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b11      	cmp	r3, #17
 8001e7a:	d02d      	beq.n	8001ed8 <HAL_GPIO_Init+0x108>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d029      	beq.n	8001ed8 <HAL_GPIO_Init+0x108>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b12      	cmp	r3, #18
 8001e8a:	d025      	beq.n	8001ed8 <HAL_GPIO_Init+0x108>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001e94:	d020      	beq.n	8001ed8 <HAL_GPIO_Init+0x108>
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001e9e:	d01b      	beq.n	8001ed8 <HAL_GPIO_Init+0x108>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8001ea8:	d016      	beq.n	8001ed8 <HAL_GPIO_Init+0x108>
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8001eb2:	d011      	beq.n	8001ed8 <HAL_GPIO_Init+0x108>
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8001ebc:	d00c      	beq.n	8001ed8 <HAL_GPIO_Init+0x108>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8001ec6:	d007      	beq.n	8001ed8 <HAL_GPIO_Init+0x108>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b03      	cmp	r3, #3
 8001ece:	d003      	beq.n	8001ed8 <HAL_GPIO_Init+0x108>
 8001ed0:	21ae      	movs	r1, #174	; 0xae
 8001ed2:	480e      	ldr	r0, [pc, #56]	; (8001f0c <HAL_GPIO_Init+0x13c>)
 8001ed4:	f7ff f94e 	bl	8001174 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61fb      	str	r3, [r7, #28]
 8001edc:	e274      	b.n	80023c8 <HAL_GPIO_Init+0x5f8>
 8001ede:	bf00      	nop
 8001ee0:	40020000 	.word	0x40020000
 8001ee4:	40020400 	.word	0x40020400
 8001ee8:	40020800 	.word	0x40020800
 8001eec:	40020c00 	.word	0x40020c00
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40021400 	.word	0x40021400
 8001ef8:	40021800 	.word	0x40021800
 8001efc:	40021c00 	.word	0x40021c00
 8001f00:	40022000 	.word	0x40022000
 8001f04:	40022400 	.word	0x40022400
 8001f08:	40022800 	.word	0x40022800
 8001f0c:	08008fc0 	.word	0x08008fc0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f10:	2201      	movs	r2, #1
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	4013      	ands	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	f040 824a 	bne.w	80023c2 <HAL_GPIO_Init+0x5f2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d005      	beq.n	8001f46 <HAL_GPIO_Init+0x176>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d144      	bne.n	8001fd0 <HAL_GPIO_Init+0x200>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00f      	beq.n	8001f6e <HAL_GPIO_Init+0x19e>
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d00b      	beq.n	8001f6e <HAL_GPIO_Init+0x19e>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d007      	beq.n	8001f6e <HAL_GPIO_Init+0x19e>
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	2b03      	cmp	r3, #3
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_Init+0x19e>
 8001f66:	21c0      	movs	r1, #192	; 0xc0
 8001f68:	4831      	ldr	r0, [pc, #196]	; (8002030 <HAL_GPIO_Init+0x260>)
 8001f6a:	f7ff f903 	bl	8001174 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	2203      	movs	r2, #3
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	091b      	lsrs	r3, r3, #4
 8001fba:	f003 0201 	and.w	r2, r3, #1
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0303 	and.w	r3, r3, #3
 8001fd8:	2b03      	cmp	r3, #3
 8001fda:	d02b      	beq.n	8002034 <HAL_GPIO_Init+0x264>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00b      	beq.n	8001ffc <HAL_GPIO_Init+0x22c>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d007      	beq.n	8001ffc <HAL_GPIO_Init+0x22c>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d003      	beq.n	8001ffc <HAL_GPIO_Init+0x22c>
 8001ff4:	21d1      	movs	r1, #209	; 0xd1
 8001ff6:	480e      	ldr	r0, [pc, #56]	; (8002030 <HAL_GPIO_Init+0x260>)
 8001ff8:	f7ff f8bc 	bl	8001174 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	2203      	movs	r2, #3
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	60da      	str	r2, [r3, #12]
 800202c:	e002      	b.n	8002034 <HAL_GPIO_Init+0x264>
 800202e:	bf00      	nop
 8002030:	08008fc0 	.word	0x08008fc0
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 0303 	and.w	r3, r3, #3
 800203c:	2b02      	cmp	r3, #2
 800203e:	f040 80df 	bne.w	8002200 <HAL_GPIO_Init+0x430>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 80b6 	beq.w	80021b8 <HAL_GPIO_Init+0x3e8>
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	2b09      	cmp	r3, #9
 8002052:	f000 80b1 	beq.w	80021b8 <HAL_GPIO_Init+0x3e8>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 80ac 	beq.w	80021b8 <HAL_GPIO_Init+0x3e8>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 80a7 	beq.w	80021b8 <HAL_GPIO_Init+0x3e8>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 80a2 	beq.w	80021b8 <HAL_GPIO_Init+0x3e8>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 809d 	beq.w	80021b8 <HAL_GPIO_Init+0x3e8>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	2b01      	cmp	r3, #1
 8002084:	f000 8098 	beq.w	80021b8 <HAL_GPIO_Init+0x3e8>
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	2b01      	cmp	r3, #1
 800208e:	f000 8093 	beq.w	80021b8 <HAL_GPIO_Init+0x3e8>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	2b02      	cmp	r3, #2
 8002098:	f000 808e 	beq.w	80021b8 <HAL_GPIO_Init+0x3e8>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	f000 8089 	beq.w	80021b8 <HAL_GPIO_Init+0x3e8>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	f000 8084 	beq.w	80021b8 <HAL_GPIO_Init+0x3e8>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	2b03      	cmp	r3, #3
 80020b6:	d07f      	beq.n	80021b8 <HAL_GPIO_Init+0x3e8>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	2b04      	cmp	r3, #4
 80020be:	d07b      	beq.n	80021b8 <HAL_GPIO_Init+0x3e8>
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d077      	beq.n	80021b8 <HAL_GPIO_Init+0x3e8>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	d073      	beq.n	80021b8 <HAL_GPIO_Init+0x3e8>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	2b05      	cmp	r3, #5
 80020d6:	d06f      	beq.n	80021b8 <HAL_GPIO_Init+0x3e8>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	2b05      	cmp	r3, #5
 80020de:	d06b      	beq.n	80021b8 <HAL_GPIO_Init+0x3e8>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	2b09      	cmp	r3, #9
 80020e6:	d067      	beq.n	80021b8 <HAL_GPIO_Init+0x3e8>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	2b06      	cmp	r3, #6
 80020ee:	d063      	beq.n	80021b8 <HAL_GPIO_Init+0x3e8>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	2b09      	cmp	r3, #9
 80020f6:	d05f      	beq.n	80021b8 <HAL_GPIO_Init+0x3e8>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	2b07      	cmp	r3, #7
 80020fe:	d05b      	beq.n	80021b8 <HAL_GPIO_Init+0x3e8>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	2b07      	cmp	r3, #7
 8002106:	d057      	beq.n	80021b8 <HAL_GPIO_Init+0x3e8>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	2b07      	cmp	r3, #7
 800210e:	d053      	beq.n	80021b8 <HAL_GPIO_Init+0x3e8>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	2b08      	cmp	r3, #8
 8002116:	d04f      	beq.n	80021b8 <HAL_GPIO_Init+0x3e8>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	2b08      	cmp	r3, #8
 800211e:	d04b      	beq.n	80021b8 <HAL_GPIO_Init+0x3e8>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	2b08      	cmp	r3, #8
 8002126:	d047      	beq.n	80021b8 <HAL_GPIO_Init+0x3e8>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	2b09      	cmp	r3, #9
 800212e:	d043      	beq.n	80021b8 <HAL_GPIO_Init+0x3e8>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	2b09      	cmp	r3, #9
 8002136:	d03f      	beq.n	80021b8 <HAL_GPIO_Init+0x3e8>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	2b0a      	cmp	r3, #10
 800213e:	d03b      	beq.n	80021b8 <HAL_GPIO_Init+0x3e8>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	2b0a      	cmp	r3, #10
 8002146:	d037      	beq.n	80021b8 <HAL_GPIO_Init+0x3e8>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	2b0b      	cmp	r3, #11
 800214e:	d033      	beq.n	80021b8 <HAL_GPIO_Init+0x3e8>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	2b0c      	cmp	r3, #12
 8002156:	d02f      	beq.n	80021b8 <HAL_GPIO_Init+0x3e8>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	2b0c      	cmp	r3, #12
 800215e:	d02b      	beq.n	80021b8 <HAL_GPIO_Init+0x3e8>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	2b0d      	cmp	r3, #13
 8002166:	d027      	beq.n	80021b8 <HAL_GPIO_Init+0x3e8>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	2b0f      	cmp	r3, #15
 800216e:	d023      	beq.n	80021b8 <HAL_GPIO_Init+0x3e8>
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	2b05      	cmp	r3, #5
 8002176:	d01f      	beq.n	80021b8 <HAL_GPIO_Init+0x3e8>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	2b05      	cmp	r3, #5
 800217e:	d01b      	beq.n	80021b8 <HAL_GPIO_Init+0x3e8>
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	2b05      	cmp	r3, #5
 8002186:	d017      	beq.n	80021b8 <HAL_GPIO_Init+0x3e8>
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	2b08      	cmp	r3, #8
 800218e:	d013      	beq.n	80021b8 <HAL_GPIO_Init+0x3e8>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	2b08      	cmp	r3, #8
 8002196:	d00f      	beq.n	80021b8 <HAL_GPIO_Init+0x3e8>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	2b0c      	cmp	r3, #12
 800219e:	d00b      	beq.n	80021b8 <HAL_GPIO_Init+0x3e8>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	2b06      	cmp	r3, #6
 80021a6:	d007      	beq.n	80021b8 <HAL_GPIO_Init+0x3e8>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	2b0e      	cmp	r3, #14
 80021ae:	d003      	beq.n	80021b8 <HAL_GPIO_Init+0x3e8>
 80021b0:	21de      	movs	r1, #222	; 0xde
 80021b2:	488a      	ldr	r0, [pc, #552]	; (80023dc <HAL_GPIO_Init+0x60c>)
 80021b4:	f7fe ffde 	bl	8001174 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	08da      	lsrs	r2, r3, #3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3208      	adds	r2, #8
 80021c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	220f      	movs	r2, #15
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4013      	ands	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	691a      	ldr	r2, [r3, #16]
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	08da      	lsrs	r2, r3, #3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3208      	adds	r2, #8
 80021fa:	69b9      	ldr	r1, [r7, #24]
 80021fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	2203      	movs	r2, #3
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 0203 	and.w	r2, r3, #3
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 80c0 	beq.w	80023c2 <HAL_GPIO_Init+0x5f2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	4b66      	ldr	r3, [pc, #408]	; (80023e0 <HAL_GPIO_Init+0x610>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224a:	4a65      	ldr	r2, [pc, #404]	; (80023e0 <HAL_GPIO_Init+0x610>)
 800224c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002250:	6453      	str	r3, [r2, #68]	; 0x44
 8002252:	4b63      	ldr	r3, [pc, #396]	; (80023e0 <HAL_GPIO_Init+0x610>)
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800225e:	4a61      	ldr	r2, [pc, #388]	; (80023e4 <HAL_GPIO_Init+0x614>)
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	089b      	lsrs	r3, r3, #2
 8002264:	3302      	adds	r3, #2
 8002266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800226a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	220f      	movs	r2, #15
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a58      	ldr	r2, [pc, #352]	; (80023e8 <HAL_GPIO_Init+0x618>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d037      	beq.n	80022fa <HAL_GPIO_Init+0x52a>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a57      	ldr	r2, [pc, #348]	; (80023ec <HAL_GPIO_Init+0x61c>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d031      	beq.n	80022f6 <HAL_GPIO_Init+0x526>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a56      	ldr	r2, [pc, #344]	; (80023f0 <HAL_GPIO_Init+0x620>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d02b      	beq.n	80022f2 <HAL_GPIO_Init+0x522>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a55      	ldr	r2, [pc, #340]	; (80023f4 <HAL_GPIO_Init+0x624>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d025      	beq.n	80022ee <HAL_GPIO_Init+0x51e>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a54      	ldr	r2, [pc, #336]	; (80023f8 <HAL_GPIO_Init+0x628>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d01f      	beq.n	80022ea <HAL_GPIO_Init+0x51a>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a53      	ldr	r2, [pc, #332]	; (80023fc <HAL_GPIO_Init+0x62c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d019      	beq.n	80022e6 <HAL_GPIO_Init+0x516>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a52      	ldr	r2, [pc, #328]	; (8002400 <HAL_GPIO_Init+0x630>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d013      	beq.n	80022e2 <HAL_GPIO_Init+0x512>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a51      	ldr	r2, [pc, #324]	; (8002404 <HAL_GPIO_Init+0x634>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d00d      	beq.n	80022de <HAL_GPIO_Init+0x50e>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a50      	ldr	r2, [pc, #320]	; (8002408 <HAL_GPIO_Init+0x638>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d007      	beq.n	80022da <HAL_GPIO_Init+0x50a>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a4f      	ldr	r2, [pc, #316]	; (800240c <HAL_GPIO_Init+0x63c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d101      	bne.n	80022d6 <HAL_GPIO_Init+0x506>
 80022d2:	2309      	movs	r3, #9
 80022d4:	e012      	b.n	80022fc <HAL_GPIO_Init+0x52c>
 80022d6:	230a      	movs	r3, #10
 80022d8:	e010      	b.n	80022fc <HAL_GPIO_Init+0x52c>
 80022da:	2308      	movs	r3, #8
 80022dc:	e00e      	b.n	80022fc <HAL_GPIO_Init+0x52c>
 80022de:	2307      	movs	r3, #7
 80022e0:	e00c      	b.n	80022fc <HAL_GPIO_Init+0x52c>
 80022e2:	2306      	movs	r3, #6
 80022e4:	e00a      	b.n	80022fc <HAL_GPIO_Init+0x52c>
 80022e6:	2305      	movs	r3, #5
 80022e8:	e008      	b.n	80022fc <HAL_GPIO_Init+0x52c>
 80022ea:	2304      	movs	r3, #4
 80022ec:	e006      	b.n	80022fc <HAL_GPIO_Init+0x52c>
 80022ee:	2303      	movs	r3, #3
 80022f0:	e004      	b.n	80022fc <HAL_GPIO_Init+0x52c>
 80022f2:	2302      	movs	r3, #2
 80022f4:	e002      	b.n	80022fc <HAL_GPIO_Init+0x52c>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e000      	b.n	80022fc <HAL_GPIO_Init+0x52c>
 80022fa:	2300      	movs	r3, #0
 80022fc:	69fa      	ldr	r2, [r7, #28]
 80022fe:	f002 0203 	and.w	r2, r2, #3
 8002302:	0092      	lsls	r2, r2, #2
 8002304:	4093      	lsls	r3, r2
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4313      	orrs	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800230c:	4935      	ldr	r1, [pc, #212]	; (80023e4 <HAL_GPIO_Init+0x614>)
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	089b      	lsrs	r3, r3, #2
 8002312:	3302      	adds	r3, #2
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800231a:	4b3d      	ldr	r3, [pc, #244]	; (8002410 <HAL_GPIO_Init+0x640>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_GPIO_Init+0x56e>
        {
          temp |= iocurrent;
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800233e:	4a34      	ldr	r2, [pc, #208]	; (8002410 <HAL_GPIO_Init+0x640>)
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002344:	4b32      	ldr	r3, [pc, #200]	; (8002410 <HAL_GPIO_Init+0x640>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_GPIO_Init+0x598>
        {
          temp |= iocurrent;
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002368:	4a29      	ldr	r2, [pc, #164]	; (8002410 <HAL_GPIO_Init+0x640>)
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800236e:	4b28      	ldr	r3, [pc, #160]	; (8002410 <HAL_GPIO_Init+0x640>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	43db      	mvns	r3, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4013      	ands	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_Init+0x5c2>
        {
          temp |= iocurrent;
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002392:	4a1f      	ldr	r2, [pc, #124]	; (8002410 <HAL_GPIO_Init+0x640>)
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002398:	4b1d      	ldr	r3, [pc, #116]	; (8002410 <HAL_GPIO_Init+0x640>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <HAL_GPIO_Init+0x5ec>
        {
          temp |= iocurrent;
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023bc:	4a14      	ldr	r2, [pc, #80]	; (8002410 <HAL_GPIO_Init+0x640>)
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3301      	adds	r3, #1
 80023c6:	61fb      	str	r3, [r7, #28]
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	2b0f      	cmp	r3, #15
 80023cc:	f67f ada0 	bls.w	8001f10 <HAL_GPIO_Init+0x140>
      }
    }
  }
}
 80023d0:	bf00      	nop
 80023d2:	bf00      	nop
 80023d4:	3720      	adds	r7, #32
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	08008fc0 	.word	0x08008fc0
 80023e0:	40023800 	.word	0x40023800
 80023e4:	40013800 	.word	0x40013800
 80023e8:	40020000 	.word	0x40020000
 80023ec:	40020400 	.word	0x40020400
 80023f0:	40020800 	.word	0x40020800
 80023f4:	40020c00 	.word	0x40020c00
 80023f8:	40021000 	.word	0x40021000
 80023fc:	40021400 	.word	0x40021400
 8002400:	40021800 	.word	0x40021800
 8002404:	40021c00 	.word	0x40021c00
 8002408:	40022000 	.word	0x40022000
 800240c:	40022400 	.word	0x40022400
 8002410:	40013c00 	.word	0x40013c00

08002414 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	807b      	strh	r3, [r7, #2]
 8002420:	4613      	mov	r3, r2
 8002422:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002424:	887b      	ldrh	r3, [r7, #2]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d004      	beq.n	8002434 <HAL_GPIO_WritePin+0x20>
 800242a:	887b      	ldrh	r3, [r7, #2]
 800242c:	0c1b      	lsrs	r3, r3, #16
 800242e:	041b      	lsls	r3, r3, #16
 8002430:	2b00      	cmp	r3, #0
 8002432:	d004      	beq.n	800243e <HAL_GPIO_WritePin+0x2a>
 8002434:	f240 119d 	movw	r1, #413	; 0x19d
 8002438:	480e      	ldr	r0, [pc, #56]	; (8002474 <HAL_GPIO_WritePin+0x60>)
 800243a:	f7fe fe9b 	bl	8001174 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800243e:	787b      	ldrb	r3, [r7, #1]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d007      	beq.n	8002454 <HAL_GPIO_WritePin+0x40>
 8002444:	787b      	ldrb	r3, [r7, #1]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d004      	beq.n	8002454 <HAL_GPIO_WritePin+0x40>
 800244a:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800244e:	4809      	ldr	r0, [pc, #36]	; (8002474 <HAL_GPIO_WritePin+0x60>)
 8002450:	f7fe fe90 	bl	8001174 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002454:	787b      	ldrb	r3, [r7, #1]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800245a:	887a      	ldrh	r2, [r7, #2]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002460:	e003      	b.n	800246a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002462:	887b      	ldrh	r3, [r7, #2]
 8002464:	041a      	lsls	r2, r3, #16
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	619a      	str	r2, [r3, #24]
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	08008fc0 	.word	0x08008fc0

08002478 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e314      	b.n	8002ab4 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2b0f      	cmp	r3, #15
 8002490:	d903      	bls.n	800249a <HAL_RCC_OscConfig+0x22>
 8002492:	21e6      	movs	r1, #230	; 0xe6
 8002494:	4897      	ldr	r0, [pc, #604]	; (80026f4 <HAL_RCC_OscConfig+0x27c>)
 8002496:	f7fe fe6d 	bl	8001174 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 8088 	beq.w	80025b8 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00d      	beq.n	80024cc <HAL_RCC_OscConfig+0x54>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024b8:	d008      	beq.n	80024cc <HAL_RCC_OscConfig+0x54>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024c2:	d003      	beq.n	80024cc <HAL_RCC_OscConfig+0x54>
 80024c4:	21eb      	movs	r1, #235	; 0xeb
 80024c6:	488b      	ldr	r0, [pc, #556]	; (80026f4 <HAL_RCC_OscConfig+0x27c>)
 80024c8:	f7fe fe54 	bl	8001174 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024cc:	4b8a      	ldr	r3, [pc, #552]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 030c 	and.w	r3, r3, #12
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d00c      	beq.n	80024f2 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024d8:	4b87      	ldr	r3, [pc, #540]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	d112      	bne.n	800250a <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024e4:	4b84      	ldr	r3, [pc, #528]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024f0:	d10b      	bne.n	800250a <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f2:	4b81      	ldr	r3, [pc, #516]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d05b      	beq.n	80025b6 <HAL_RCC_OscConfig+0x13e>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d157      	bne.n	80025b6 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e2d4      	b.n	8002ab4 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002512:	d106      	bne.n	8002522 <HAL_RCC_OscConfig+0xaa>
 8002514:	4b78      	ldr	r3, [pc, #480]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a77      	ldr	r2, [pc, #476]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 800251a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251e:	6013      	str	r3, [r2, #0]
 8002520:	e01d      	b.n	800255e <HAL_RCC_OscConfig+0xe6>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800252a:	d10c      	bne.n	8002546 <HAL_RCC_OscConfig+0xce>
 800252c:	4b72      	ldr	r3, [pc, #456]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a71      	ldr	r2, [pc, #452]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 8002532:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	4b6f      	ldr	r3, [pc, #444]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a6e      	ldr	r2, [pc, #440]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 800253e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002542:	6013      	str	r3, [r2, #0]
 8002544:	e00b      	b.n	800255e <HAL_RCC_OscConfig+0xe6>
 8002546:	4b6c      	ldr	r3, [pc, #432]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a6b      	ldr	r2, [pc, #428]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 800254c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	4b69      	ldr	r3, [pc, #420]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a68      	ldr	r2, [pc, #416]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 8002558:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800255c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d013      	beq.n	800258e <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002566:	f7fe ff3f 	bl	80013e8 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800256e:	f7fe ff3b 	bl	80013e8 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b64      	cmp	r3, #100	; 0x64
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e299      	b.n	8002ab4 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002580:	4b5d      	ldr	r3, [pc, #372]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0f0      	beq.n	800256e <HAL_RCC_OscConfig+0xf6>
 800258c:	e014      	b.n	80025b8 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258e:	f7fe ff2b 	bl	80013e8 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002596:	f7fe ff27 	bl	80013e8 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b64      	cmp	r3, #100	; 0x64
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e285      	b.n	8002ab4 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a8:	4b53      	ldr	r3, [pc, #332]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1f0      	bne.n	8002596 <HAL_RCC_OscConfig+0x11e>
 80025b4:	e000      	b.n	80025b8 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d079      	beq.n	80026b8 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d008      	beq.n	80025de <HAL_RCC_OscConfig+0x166>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d004      	beq.n	80025de <HAL_RCC_OscConfig+0x166>
 80025d4:	f240 111d 	movw	r1, #285	; 0x11d
 80025d8:	4846      	ldr	r0, [pc, #280]	; (80026f4 <HAL_RCC_OscConfig+0x27c>)
 80025da:	f7fe fdcb 	bl	8001174 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	2b1f      	cmp	r3, #31
 80025e4:	d904      	bls.n	80025f0 <HAL_RCC_OscConfig+0x178>
 80025e6:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80025ea:	4842      	ldr	r0, [pc, #264]	; (80026f4 <HAL_RCC_OscConfig+0x27c>)
 80025ec:	f7fe fdc2 	bl	8001174 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025f0:	4b41      	ldr	r3, [pc, #260]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 030c 	and.w	r3, r3, #12
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00b      	beq.n	8002614 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025fc:	4b3e      	ldr	r3, [pc, #248]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002604:	2b08      	cmp	r3, #8
 8002606:	d11c      	bne.n	8002642 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002608:	4b3b      	ldr	r3, [pc, #236]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d116      	bne.n	8002642 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002614:	4b38      	ldr	r3, [pc, #224]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_RCC_OscConfig+0x1b4>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d001      	beq.n	800262c <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e243      	b.n	8002ab4 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800262c:	4b32      	ldr	r3, [pc, #200]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	492f      	ldr	r1, [pc, #188]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 800263c:	4313      	orrs	r3, r2
 800263e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002640:	e03a      	b.n	80026b8 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d020      	beq.n	800268c <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800264a:	4b2c      	ldr	r3, [pc, #176]	; (80026fc <HAL_RCC_OscConfig+0x284>)
 800264c:	2201      	movs	r2, #1
 800264e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002650:	f7fe feca 	bl	80013e8 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002658:	f7fe fec6 	bl	80013e8 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e224      	b.n	8002ab4 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266a:	4b23      	ldr	r3, [pc, #140]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0f0      	beq.n	8002658 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002676:	4b20      	ldr	r3, [pc, #128]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	491c      	ldr	r1, [pc, #112]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 8002686:	4313      	orrs	r3, r2
 8002688:	600b      	str	r3, [r1, #0]
 800268a:	e015      	b.n	80026b8 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800268c:	4b1b      	ldr	r3, [pc, #108]	; (80026fc <HAL_RCC_OscConfig+0x284>)
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002692:	f7fe fea9 	bl	80013e8 <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800269a:	f7fe fea5 	bl	80013e8 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e203      	b.n	8002ab4 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ac:	4b12      	ldr	r3, [pc, #72]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1f0      	bne.n	800269a <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0308 	and.w	r3, r3, #8
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d045      	beq.n	8002750 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d008      	beq.n	80026de <HAL_RCC_OscConfig+0x266>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d004      	beq.n	80026de <HAL_RCC_OscConfig+0x266>
 80026d4:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80026d8:	4806      	ldr	r0, [pc, #24]	; (80026f4 <HAL_RCC_OscConfig+0x27c>)
 80026da:	f7fe fd4b 	bl	8001174 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d01e      	beq.n	8002724 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026e6:	4b06      	ldr	r3, [pc, #24]	; (8002700 <HAL_RCC_OscConfig+0x288>)
 80026e8:	2201      	movs	r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ec:	f7fe fe7c 	bl	80013e8 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f2:	e010      	b.n	8002716 <HAL_RCC_OscConfig+0x29e>
 80026f4:	08008ffc 	.word	0x08008ffc
 80026f8:	40023800 	.word	0x40023800
 80026fc:	42470000 	.word	0x42470000
 8002700:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002704:	f7fe fe70 	bl	80013e8 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e1ce      	b.n	8002ab4 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002716:	4b5e      	ldr	r3, [pc, #376]	; (8002890 <HAL_RCC_OscConfig+0x418>)
 8002718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0f0      	beq.n	8002704 <HAL_RCC_OscConfig+0x28c>
 8002722:	e015      	b.n	8002750 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002724:	4b5b      	ldr	r3, [pc, #364]	; (8002894 <HAL_RCC_OscConfig+0x41c>)
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800272a:	f7fe fe5d 	bl	80013e8 <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002732:	f7fe fe59 	bl	80013e8 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e1b7      	b.n	8002ab4 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002744:	4b52      	ldr	r3, [pc, #328]	; (8002890 <HAL_RCC_OscConfig+0x418>)
 8002746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1f0      	bne.n	8002732 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	2b00      	cmp	r3, #0
 800275a:	f000 80b0 	beq.w	80028be <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 800275e:	2300      	movs	r3, #0
 8002760:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00c      	beq.n	8002784 <HAL_RCC_OscConfig+0x30c>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d008      	beq.n	8002784 <HAL_RCC_OscConfig+0x30c>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	2b05      	cmp	r3, #5
 8002778:	d004      	beq.n	8002784 <HAL_RCC_OscConfig+0x30c>
 800277a:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 800277e:	4846      	ldr	r0, [pc, #280]	; (8002898 <HAL_RCC_OscConfig+0x420>)
 8002780:	f7fe fcf8 	bl	8001174 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002784:	4b42      	ldr	r3, [pc, #264]	; (8002890 <HAL_RCC_OscConfig+0x418>)
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10f      	bne.n	80027b0 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002790:	2300      	movs	r3, #0
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	4b3e      	ldr	r3, [pc, #248]	; (8002890 <HAL_RCC_OscConfig+0x418>)
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	4a3d      	ldr	r2, [pc, #244]	; (8002890 <HAL_RCC_OscConfig+0x418>)
 800279a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800279e:	6413      	str	r3, [r2, #64]	; 0x40
 80027a0:	4b3b      	ldr	r3, [pc, #236]	; (8002890 <HAL_RCC_OscConfig+0x418>)
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ac:	2301      	movs	r3, #1
 80027ae:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b0:	4b3a      	ldr	r3, [pc, #232]	; (800289c <HAL_RCC_OscConfig+0x424>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d118      	bne.n	80027ee <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027bc:	4b37      	ldr	r3, [pc, #220]	; (800289c <HAL_RCC_OscConfig+0x424>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a36      	ldr	r2, [pc, #216]	; (800289c <HAL_RCC_OscConfig+0x424>)
 80027c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027c8:	f7fe fe0e 	bl	80013e8 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d0:	f7fe fe0a 	bl	80013e8 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e168      	b.n	8002ab4 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e2:	4b2e      	ldr	r3, [pc, #184]	; (800289c <HAL_RCC_OscConfig+0x424>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0f0      	beq.n	80027d0 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d106      	bne.n	8002804 <HAL_RCC_OscConfig+0x38c>
 80027f6:	4b26      	ldr	r3, [pc, #152]	; (8002890 <HAL_RCC_OscConfig+0x418>)
 80027f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fa:	4a25      	ldr	r2, [pc, #148]	; (8002890 <HAL_RCC_OscConfig+0x418>)
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	6713      	str	r3, [r2, #112]	; 0x70
 8002802:	e01c      	b.n	800283e <HAL_RCC_OscConfig+0x3c6>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	2b05      	cmp	r3, #5
 800280a:	d10c      	bne.n	8002826 <HAL_RCC_OscConfig+0x3ae>
 800280c:	4b20      	ldr	r3, [pc, #128]	; (8002890 <HAL_RCC_OscConfig+0x418>)
 800280e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002810:	4a1f      	ldr	r2, [pc, #124]	; (8002890 <HAL_RCC_OscConfig+0x418>)
 8002812:	f043 0304 	orr.w	r3, r3, #4
 8002816:	6713      	str	r3, [r2, #112]	; 0x70
 8002818:	4b1d      	ldr	r3, [pc, #116]	; (8002890 <HAL_RCC_OscConfig+0x418>)
 800281a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281c:	4a1c      	ldr	r2, [pc, #112]	; (8002890 <HAL_RCC_OscConfig+0x418>)
 800281e:	f043 0301 	orr.w	r3, r3, #1
 8002822:	6713      	str	r3, [r2, #112]	; 0x70
 8002824:	e00b      	b.n	800283e <HAL_RCC_OscConfig+0x3c6>
 8002826:	4b1a      	ldr	r3, [pc, #104]	; (8002890 <HAL_RCC_OscConfig+0x418>)
 8002828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282a:	4a19      	ldr	r2, [pc, #100]	; (8002890 <HAL_RCC_OscConfig+0x418>)
 800282c:	f023 0301 	bic.w	r3, r3, #1
 8002830:	6713      	str	r3, [r2, #112]	; 0x70
 8002832:	4b17      	ldr	r3, [pc, #92]	; (8002890 <HAL_RCC_OscConfig+0x418>)
 8002834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002836:	4a16      	ldr	r2, [pc, #88]	; (8002890 <HAL_RCC_OscConfig+0x418>)
 8002838:	f023 0304 	bic.w	r3, r3, #4
 800283c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d015      	beq.n	8002872 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002846:	f7fe fdcf 	bl	80013e8 <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800284c:	e00a      	b.n	8002864 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800284e:	f7fe fdcb 	bl	80013e8 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	f241 3288 	movw	r2, #5000	; 0x1388
 800285c:	4293      	cmp	r3, r2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e127      	b.n	8002ab4 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002864:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <HAL_RCC_OscConfig+0x418>)
 8002866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0ee      	beq.n	800284e <HAL_RCC_OscConfig+0x3d6>
 8002870:	e01c      	b.n	80028ac <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002872:	f7fe fdb9 	bl	80013e8 <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002878:	e012      	b.n	80028a0 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800287a:	f7fe fdb5 	bl	80013e8 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	f241 3288 	movw	r2, #5000	; 0x1388
 8002888:	4293      	cmp	r3, r2
 800288a:	d909      	bls.n	80028a0 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e111      	b.n	8002ab4 <HAL_RCC_OscConfig+0x63c>
 8002890:	40023800 	.word	0x40023800
 8002894:	42470e80 	.word	0x42470e80
 8002898:	08008ffc 	.word	0x08008ffc
 800289c:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a0:	4b86      	ldr	r3, [pc, #536]	; (8002abc <HAL_RCC_OscConfig+0x644>)
 80028a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1e6      	bne.n	800287a <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028ac:	7dfb      	ldrb	r3, [r7, #23]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d105      	bne.n	80028be <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b2:	4b82      	ldr	r3, [pc, #520]	; (8002abc <HAL_RCC_OscConfig+0x644>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	4a81      	ldr	r2, [pc, #516]	; (8002abc <HAL_RCC_OscConfig+0x644>)
 80028b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00c      	beq.n	80028e0 <HAL_RCC_OscConfig+0x468>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d008      	beq.n	80028e0 <HAL_RCC_OscConfig+0x468>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d004      	beq.n	80028e0 <HAL_RCC_OscConfig+0x468>
 80028d6:	f240 11cd 	movw	r1, #461	; 0x1cd
 80028da:	4879      	ldr	r0, [pc, #484]	; (8002ac0 <HAL_RCC_OscConfig+0x648>)
 80028dc:	f7fe fc4a 	bl	8001174 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 80e4 	beq.w	8002ab2 <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028ea:	4b74      	ldr	r3, [pc, #464]	; (8002abc <HAL_RCC_OscConfig+0x644>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 030c 	and.w	r3, r3, #12
 80028f2:	2b08      	cmp	r3, #8
 80028f4:	f000 80a5 	beq.w	8002a42 <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	f040 8089 	bne.w	8002a14 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d009      	beq.n	800291e <HAL_RCC_OscConfig+0x4a6>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002912:	d004      	beq.n	800291e <HAL_RCC_OscConfig+0x4a6>
 8002914:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8002918:	4869      	ldr	r0, [pc, #420]	; (8002ac0 <HAL_RCC_OscConfig+0x648>)
 800291a:	f7fe fc2b 	bl	8001174 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	2b3f      	cmp	r3, #63	; 0x3f
 8002924:	d904      	bls.n	8002930 <HAL_RCC_OscConfig+0x4b8>
 8002926:	f240 11d7 	movw	r1, #471	; 0x1d7
 800292a:	4865      	ldr	r0, [pc, #404]	; (8002ac0 <HAL_RCC_OscConfig+0x648>)
 800292c:	f7fe fc22 	bl	8001174 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	2b31      	cmp	r3, #49	; 0x31
 8002936:	d904      	bls.n	8002942 <HAL_RCC_OscConfig+0x4ca>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8002940:	d904      	bls.n	800294c <HAL_RCC_OscConfig+0x4d4>
 8002942:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8002946:	485e      	ldr	r0, [pc, #376]	; (8002ac0 <HAL_RCC_OscConfig+0x648>)
 8002948:	f7fe fc14 	bl	8001174 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002950:	2b02      	cmp	r3, #2
 8002952:	d010      	beq.n	8002976 <HAL_RCC_OscConfig+0x4fe>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002958:	2b04      	cmp	r3, #4
 800295a:	d00c      	beq.n	8002976 <HAL_RCC_OscConfig+0x4fe>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002960:	2b06      	cmp	r3, #6
 8002962:	d008      	beq.n	8002976 <HAL_RCC_OscConfig+0x4fe>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002968:	2b08      	cmp	r3, #8
 800296a:	d004      	beq.n	8002976 <HAL_RCC_OscConfig+0x4fe>
 800296c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8002970:	4853      	ldr	r0, [pc, #332]	; (8002ac0 <HAL_RCC_OscConfig+0x648>)
 8002972:	f7fe fbff 	bl	8001174 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297a:	2b01      	cmp	r3, #1
 800297c:	d903      	bls.n	8002986 <HAL_RCC_OscConfig+0x50e>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002982:	2b0f      	cmp	r3, #15
 8002984:	d904      	bls.n	8002990 <HAL_RCC_OscConfig+0x518>
 8002986:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800298a:	484d      	ldr	r0, [pc, #308]	; (8002ac0 <HAL_RCC_OscConfig+0x648>)
 800298c:	f7fe fbf2 	bl	8001174 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002990:	4b4c      	ldr	r3, [pc, #304]	; (8002ac4 <HAL_RCC_OscConfig+0x64c>)
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002996:	f7fe fd27 	bl	80013e8 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800299e:	f7fe fd23 	bl	80013e8 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e081      	b.n	8002ab4 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b0:	4b42      	ldr	r3, [pc, #264]	; (8002abc <HAL_RCC_OscConfig+0x644>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1f0      	bne.n	800299e <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69da      	ldr	r2, [r3, #28]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	431a      	orrs	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	019b      	lsls	r3, r3, #6
 80029cc:	431a      	orrs	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d2:	085b      	lsrs	r3, r3, #1
 80029d4:	3b01      	subs	r3, #1
 80029d6:	041b      	lsls	r3, r3, #16
 80029d8:	431a      	orrs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029de:	061b      	lsls	r3, r3, #24
 80029e0:	4936      	ldr	r1, [pc, #216]	; (8002abc <HAL_RCC_OscConfig+0x644>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029e6:	4b37      	ldr	r3, [pc, #220]	; (8002ac4 <HAL_RCC_OscConfig+0x64c>)
 80029e8:	2201      	movs	r2, #1
 80029ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ec:	f7fe fcfc 	bl	80013e8 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f4:	f7fe fcf8 	bl	80013e8 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e056      	b.n	8002ab4 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a06:	4b2d      	ldr	r3, [pc, #180]	; (8002abc <HAL_RCC_OscConfig+0x644>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0f0      	beq.n	80029f4 <HAL_RCC_OscConfig+0x57c>
 8002a12:	e04e      	b.n	8002ab2 <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a14:	4b2b      	ldr	r3, [pc, #172]	; (8002ac4 <HAL_RCC_OscConfig+0x64c>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1a:	f7fe fce5 	bl	80013e8 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a22:	f7fe fce1 	bl	80013e8 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e03f      	b.n	8002ab4 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a34:	4b21      	ldr	r3, [pc, #132]	; (8002abc <HAL_RCC_OscConfig+0x644>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1f0      	bne.n	8002a22 <HAL_RCC_OscConfig+0x5aa>
 8002a40:	e037      	b.n	8002ab2 <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d101      	bne.n	8002a4e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e032      	b.n	8002ab4 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a4e:	4b1b      	ldr	r3, [pc, #108]	; (8002abc <HAL_RCC_OscConfig+0x644>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d028      	beq.n	8002aae <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d121      	bne.n	8002aae <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d11a      	bne.n	8002aae <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a7e:	4013      	ands	r3, r2
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a84:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d111      	bne.n	8002aae <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a94:	085b      	lsrs	r3, r3, #1
 8002a96:	3b01      	subs	r3, #1
 8002a98:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d107      	bne.n	8002aae <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d001      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	08008ffc 	.word	0x08008ffc
 8002ac4:	42470060 	.word	0x42470060

08002ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e18c      	b.n	8002df6 <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_RCC_ClockConfig+0x24>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b0f      	cmp	r3, #15
 8002aea:	d904      	bls.n	8002af6 <HAL_RCC_ClockConfig+0x2e>
 8002aec:	f240 215a 	movw	r1, #602	; 0x25a
 8002af0:	4887      	ldr	r0, [pc, #540]	; (8002d10 <HAL_RCC_ClockConfig+0x248>)
 8002af2:	f7fe fb3f 	bl	8001174 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d031      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x98>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d02e      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x98>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d02b      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x98>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	d028      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x98>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	2b04      	cmp	r3, #4
 8002b12:	d025      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x98>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	2b05      	cmp	r3, #5
 8002b18:	d022      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x98>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b06      	cmp	r3, #6
 8002b1e:	d01f      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x98>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	2b07      	cmp	r3, #7
 8002b24:	d01c      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x98>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	d019      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x98>
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	2b09      	cmp	r3, #9
 8002b30:	d016      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x98>
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	2b0a      	cmp	r3, #10
 8002b36:	d013      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x98>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	2b0b      	cmp	r3, #11
 8002b3c:	d010      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x98>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	2b0c      	cmp	r3, #12
 8002b42:	d00d      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x98>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	2b0d      	cmp	r3, #13
 8002b48:	d00a      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x98>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b0e      	cmp	r3, #14
 8002b4e:	d007      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x98>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	2b0f      	cmp	r3, #15
 8002b54:	d004      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x98>
 8002b56:	f240 215b 	movw	r1, #603	; 0x25b
 8002b5a:	486d      	ldr	r0, [pc, #436]	; (8002d10 <HAL_RCC_ClockConfig+0x248>)
 8002b5c:	f7fe fb0a 	bl	8001174 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b60:	4b6c      	ldr	r3, [pc, #432]	; (8002d14 <HAL_RCC_ClockConfig+0x24c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 030f 	and.w	r3, r3, #15
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d90c      	bls.n	8002b88 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6e:	4b69      	ldr	r3, [pc, #420]	; (8002d14 <HAL_RCC_ClockConfig+0x24c>)
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b76:	4b67      	ldr	r3, [pc, #412]	; (8002d14 <HAL_RCC_ClockConfig+0x24c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d001      	beq.n	8002b88 <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e136      	b.n	8002df6 <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d049      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d005      	beq.n	8002bac <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ba0:	4b5d      	ldr	r3, [pc, #372]	; (8002d18 <HAL_RCC_ClockConfig+0x250>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	4a5c      	ldr	r2, [pc, #368]	; (8002d18 <HAL_RCC_ClockConfig+0x250>)
 8002ba6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002baa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0308 	and.w	r3, r3, #8
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bb8:	4b57      	ldr	r3, [pc, #348]	; (8002d18 <HAL_RCC_ClockConfig+0x250>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	4a56      	ldr	r2, [pc, #344]	; (8002d18 <HAL_RCC_ClockConfig+0x250>)
 8002bbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d024      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x14e>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	2b80      	cmp	r3, #128	; 0x80
 8002bd2:	d020      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x14e>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b90      	cmp	r3, #144	; 0x90
 8002bda:	d01c      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x14e>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2ba0      	cmp	r3, #160	; 0xa0
 8002be2:	d018      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x14e>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	2bb0      	cmp	r3, #176	; 0xb0
 8002bea:	d014      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x14e>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	2bc0      	cmp	r3, #192	; 0xc0
 8002bf2:	d010      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x14e>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	2bd0      	cmp	r3, #208	; 0xd0
 8002bfa:	d00c      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x14e>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2be0      	cmp	r3, #224	; 0xe0
 8002c02:	d008      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x14e>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	2bf0      	cmp	r3, #240	; 0xf0
 8002c0a:	d004      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x14e>
 8002c0c:	f240 217e 	movw	r1, #638	; 0x27e
 8002c10:	483f      	ldr	r0, [pc, #252]	; (8002d10 <HAL_RCC_ClockConfig+0x248>)
 8002c12:	f7fe faaf 	bl	8001174 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c16:	4b40      	ldr	r3, [pc, #256]	; (8002d18 <HAL_RCC_ClockConfig+0x250>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	493d      	ldr	r1, [pc, #244]	; (8002d18 <HAL_RCC_ClockConfig+0x250>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d059      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d010      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x196>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d00c      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x196>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d008      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x196>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d004      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x196>
 8002c54:	f240 2185 	movw	r1, #645	; 0x285
 8002c58:	482d      	ldr	r0, [pc, #180]	; (8002d10 <HAL_RCC_ClockConfig+0x248>)
 8002c5a:	f7fe fa8b 	bl	8001174 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d107      	bne.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c66:	4b2c      	ldr	r3, [pc, #176]	; (8002d18 <HAL_RCC_ClockConfig+0x250>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d119      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e0bf      	b.n	8002df6 <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d003      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c82:	2b03      	cmp	r3, #3
 8002c84:	d107      	bne.n	8002c96 <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c86:	4b24      	ldr	r3, [pc, #144]	; (8002d18 <HAL_RCC_ClockConfig+0x250>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d109      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e0af      	b.n	8002df6 <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c96:	4b20      	ldr	r3, [pc, #128]	; (8002d18 <HAL_RCC_ClockConfig+0x250>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e0a7      	b.n	8002df6 <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ca6:	4b1c      	ldr	r3, [pc, #112]	; (8002d18 <HAL_RCC_ClockConfig+0x250>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f023 0203 	bic.w	r2, r3, #3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	4919      	ldr	r1, [pc, #100]	; (8002d18 <HAL_RCC_ClockConfig+0x250>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cb8:	f7fe fb96 	bl	80013e8 <HAL_GetTick>
 8002cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cbe:	e00a      	b.n	8002cd6 <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc0:	f7fe fb92 	bl	80013e8 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e08f      	b.n	8002df6 <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd6:	4b10      	ldr	r3, [pc, #64]	; (8002d18 <HAL_RCC_ClockConfig+0x250>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 020c 	and.w	r2, r3, #12
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d1eb      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ce8:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <HAL_RCC_ClockConfig+0x24c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 030f 	and.w	r3, r3, #15
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d212      	bcs.n	8002d1c <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf6:	4b07      	ldr	r3, [pc, #28]	; (8002d14 <HAL_RCC_ClockConfig+0x24c>)
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfe:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <HAL_RCC_ClockConfig+0x24c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 030f 	and.w	r3, r3, #15
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d007      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e072      	b.n	8002df6 <HAL_RCC_ClockConfig+0x32e>
 8002d10:	08008ffc 	.word	0x08008ffc
 8002d14:	40023c00 	.word	0x40023c00
 8002d18:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d025      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d018      	beq.n	8002d62 <HAL_RCC_ClockConfig+0x29a>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d38:	d013      	beq.n	8002d62 <HAL_RCC_ClockConfig+0x29a>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002d42:	d00e      	beq.n	8002d62 <HAL_RCC_ClockConfig+0x29a>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002d4c:	d009      	beq.n	8002d62 <HAL_RCC_ClockConfig+0x29a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002d56:	d004      	beq.n	8002d62 <HAL_RCC_ClockConfig+0x29a>
 8002d58:	f240 21c3 	movw	r1, #707	; 0x2c3
 8002d5c:	4828      	ldr	r0, [pc, #160]	; (8002e00 <HAL_RCC_ClockConfig+0x338>)
 8002d5e:	f7fe fa09 	bl	8001174 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d62:	4b28      	ldr	r3, [pc, #160]	; (8002e04 <HAL_RCC_ClockConfig+0x33c>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	4925      	ldr	r1, [pc, #148]	; (8002e04 <HAL_RCC_ClockConfig+0x33c>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0308 	and.w	r3, r3, #8
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d026      	beq.n	8002dce <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d018      	beq.n	8002dba <HAL_RCC_ClockConfig+0x2f2>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d90:	d013      	beq.n	8002dba <HAL_RCC_ClockConfig+0x2f2>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002d9a:	d00e      	beq.n	8002dba <HAL_RCC_ClockConfig+0x2f2>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002da4:	d009      	beq.n	8002dba <HAL_RCC_ClockConfig+0x2f2>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002dae:	d004      	beq.n	8002dba <HAL_RCC_ClockConfig+0x2f2>
 8002db0:	f240 21ca 	movw	r1, #714	; 0x2ca
 8002db4:	4812      	ldr	r0, [pc, #72]	; (8002e00 <HAL_RCC_ClockConfig+0x338>)
 8002db6:	f7fe f9dd 	bl	8001174 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dba:	4b12      	ldr	r3, [pc, #72]	; (8002e04 <HAL_RCC_ClockConfig+0x33c>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	490e      	ldr	r1, [pc, #56]	; (8002e04 <HAL_RCC_ClockConfig+0x33c>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dce:	f000 f821 	bl	8002e14 <HAL_RCC_GetSysClockFreq>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <HAL_RCC_ClockConfig+0x33c>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	091b      	lsrs	r3, r3, #4
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	490a      	ldr	r1, [pc, #40]	; (8002e08 <HAL_RCC_ClockConfig+0x340>)
 8002de0:	5ccb      	ldrb	r3, [r1, r3]
 8002de2:	fa22 f303 	lsr.w	r3, r2, r3
 8002de6:	4a09      	ldr	r2, [pc, #36]	; (8002e0c <HAL_RCC_ClockConfig+0x344>)
 8002de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dea:	4b09      	ldr	r3, [pc, #36]	; (8002e10 <HAL_RCC_ClockConfig+0x348>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fe f9f6 	bl	80011e0 <HAL_InitTick>

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	08008ffc 	.word	0x08008ffc
 8002e04:	40023800 	.word	0x40023800
 8002e08:	08009190 	.word	0x08009190
 8002e0c:	20000000 	.word	0x20000000
 8002e10:	20000004 	.word	0x20000004

08002e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e18:	b094      	sub	sp, #80	; 0x50
 8002e1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	647b      	str	r3, [r7, #68]	; 0x44
 8002e20:	2300      	movs	r3, #0
 8002e22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e24:	2300      	movs	r3, #0
 8002e26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e2c:	4b79      	ldr	r3, [pc, #484]	; (8003014 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 030c 	and.w	r3, r3, #12
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d00d      	beq.n	8002e54 <HAL_RCC_GetSysClockFreq+0x40>
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	f200 80e1 	bhi.w	8003000 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <HAL_RCC_GetSysClockFreq+0x34>
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	d003      	beq.n	8002e4e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e46:	e0db      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e48:	4b73      	ldr	r3, [pc, #460]	; (8003018 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e4a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002e4c:	e0db      	b.n	8003006 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e4e:	4b73      	ldr	r3, [pc, #460]	; (800301c <HAL_RCC_GetSysClockFreq+0x208>)
 8002e50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e52:	e0d8      	b.n	8003006 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e54:	4b6f      	ldr	r3, [pc, #444]	; (8003014 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e5c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e5e:	4b6d      	ldr	r3, [pc, #436]	; (8003014 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d063      	beq.n	8002f32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e6a:	4b6a      	ldr	r3, [pc, #424]	; (8003014 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	099b      	lsrs	r3, r3, #6
 8002e70:	2200      	movs	r2, #0
 8002e72:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e7c:	633b      	str	r3, [r7, #48]	; 0x30
 8002e7e:	2300      	movs	r3, #0
 8002e80:	637b      	str	r3, [r7, #52]	; 0x34
 8002e82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e86:	4622      	mov	r2, r4
 8002e88:	462b      	mov	r3, r5
 8002e8a:	f04f 0000 	mov.w	r0, #0
 8002e8e:	f04f 0100 	mov.w	r1, #0
 8002e92:	0159      	lsls	r1, r3, #5
 8002e94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e98:	0150      	lsls	r0, r2, #5
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	4621      	mov	r1, r4
 8002ea0:	1a51      	subs	r1, r2, r1
 8002ea2:	6139      	str	r1, [r7, #16]
 8002ea4:	4629      	mov	r1, r5
 8002ea6:	eb63 0301 	sbc.w	r3, r3, r1
 8002eaa:	617b      	str	r3, [r7, #20]
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	f04f 0300 	mov.w	r3, #0
 8002eb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002eb8:	4659      	mov	r1, fp
 8002eba:	018b      	lsls	r3, r1, #6
 8002ebc:	4651      	mov	r1, sl
 8002ebe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ec2:	4651      	mov	r1, sl
 8002ec4:	018a      	lsls	r2, r1, #6
 8002ec6:	4651      	mov	r1, sl
 8002ec8:	ebb2 0801 	subs.w	r8, r2, r1
 8002ecc:	4659      	mov	r1, fp
 8002ece:	eb63 0901 	sbc.w	r9, r3, r1
 8002ed2:	f04f 0200 	mov.w	r2, #0
 8002ed6:	f04f 0300 	mov.w	r3, #0
 8002eda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ede:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ee2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ee6:	4690      	mov	r8, r2
 8002ee8:	4699      	mov	r9, r3
 8002eea:	4623      	mov	r3, r4
 8002eec:	eb18 0303 	adds.w	r3, r8, r3
 8002ef0:	60bb      	str	r3, [r7, #8]
 8002ef2:	462b      	mov	r3, r5
 8002ef4:	eb49 0303 	adc.w	r3, r9, r3
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	f04f 0200 	mov.w	r2, #0
 8002efe:	f04f 0300 	mov.w	r3, #0
 8002f02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f06:	4629      	mov	r1, r5
 8002f08:	024b      	lsls	r3, r1, #9
 8002f0a:	4621      	mov	r1, r4
 8002f0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f10:	4621      	mov	r1, r4
 8002f12:	024a      	lsls	r2, r1, #9
 8002f14:	4610      	mov	r0, r2
 8002f16:	4619      	mov	r1, r3
 8002f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f24:	f7fd f9ae 	bl	8000284 <__aeabi_uldivmod>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f30:	e058      	b.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f32:	4b38      	ldr	r3, [pc, #224]	; (8003014 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	099b      	lsrs	r3, r3, #6
 8002f38:	2200      	movs	r2, #0
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	4611      	mov	r1, r2
 8002f3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f42:	623b      	str	r3, [r7, #32]
 8002f44:	2300      	movs	r3, #0
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
 8002f48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f4c:	4642      	mov	r2, r8
 8002f4e:	464b      	mov	r3, r9
 8002f50:	f04f 0000 	mov.w	r0, #0
 8002f54:	f04f 0100 	mov.w	r1, #0
 8002f58:	0159      	lsls	r1, r3, #5
 8002f5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f5e:	0150      	lsls	r0, r2, #5
 8002f60:	4602      	mov	r2, r0
 8002f62:	460b      	mov	r3, r1
 8002f64:	4641      	mov	r1, r8
 8002f66:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f6a:	4649      	mov	r1, r9
 8002f6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f70:	f04f 0200 	mov.w	r2, #0
 8002f74:	f04f 0300 	mov.w	r3, #0
 8002f78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f84:	ebb2 040a 	subs.w	r4, r2, sl
 8002f88:	eb63 050b 	sbc.w	r5, r3, fp
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	f04f 0300 	mov.w	r3, #0
 8002f94:	00eb      	lsls	r3, r5, #3
 8002f96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f9a:	00e2      	lsls	r2, r4, #3
 8002f9c:	4614      	mov	r4, r2
 8002f9e:	461d      	mov	r5, r3
 8002fa0:	4643      	mov	r3, r8
 8002fa2:	18e3      	adds	r3, r4, r3
 8002fa4:	603b      	str	r3, [r7, #0]
 8002fa6:	464b      	mov	r3, r9
 8002fa8:	eb45 0303 	adc.w	r3, r5, r3
 8002fac:	607b      	str	r3, [r7, #4]
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	f04f 0300 	mov.w	r3, #0
 8002fb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fba:	4629      	mov	r1, r5
 8002fbc:	028b      	lsls	r3, r1, #10
 8002fbe:	4621      	mov	r1, r4
 8002fc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fc4:	4621      	mov	r1, r4
 8002fc6:	028a      	lsls	r2, r1, #10
 8002fc8:	4610      	mov	r0, r2
 8002fca:	4619      	mov	r1, r3
 8002fcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fce:	2200      	movs	r2, #0
 8002fd0:	61bb      	str	r3, [r7, #24]
 8002fd2:	61fa      	str	r2, [r7, #28]
 8002fd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fd8:	f7fd f954 	bl	8000284 <__aeabi_uldivmod>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fe4:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	0c1b      	lsrs	r3, r3, #16
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	3301      	adds	r3, #1
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ff4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ffc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ffe:	e002      	b.n	8003006 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003000:	4b05      	ldr	r3, [pc, #20]	; (8003018 <HAL_RCC_GetSysClockFreq+0x204>)
 8003002:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003004:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003008:	4618      	mov	r0, r3
 800300a:	3750      	adds	r7, #80	; 0x50
 800300c:	46bd      	mov	sp, r7
 800300e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003012:	bf00      	nop
 8003014:	40023800 	.word	0x40023800
 8003018:	00f42400 	.word	0x00f42400
 800301c:	007a1200 	.word	0x007a1200

08003020 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003024:	4b03      	ldr	r3, [pc, #12]	; (8003034 <HAL_RCC_GetHCLKFreq+0x14>)
 8003026:	681b      	ldr	r3, [r3, #0]
}
 8003028:	4618      	mov	r0, r3
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	20000000 	.word	0x20000000

08003038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800303c:	f7ff fff0 	bl	8003020 <HAL_RCC_GetHCLKFreq>
 8003040:	4602      	mov	r2, r0
 8003042:	4b05      	ldr	r3, [pc, #20]	; (8003058 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	0a9b      	lsrs	r3, r3, #10
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	4903      	ldr	r1, [pc, #12]	; (800305c <HAL_RCC_GetPCLK1Freq+0x24>)
 800304e:	5ccb      	ldrb	r3, [r1, r3]
 8003050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003054:	4618      	mov	r0, r3
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40023800 	.word	0x40023800
 800305c:	080091a0 	.word	0x080091a0

08003060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003064:	f7ff ffdc 	bl	8003020 <HAL_RCC_GetHCLKFreq>
 8003068:	4602      	mov	r2, r0
 800306a:	4b05      	ldr	r3, [pc, #20]	; (8003080 <HAL_RCC_GetPCLK2Freq+0x20>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	0b5b      	lsrs	r3, r3, #13
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	4903      	ldr	r1, [pc, #12]	; (8003084 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003076:	5ccb      	ldrb	r3, [r1, r3]
 8003078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800307c:	4618      	mov	r0, r3
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40023800 	.word	0x40023800
 8003084:	080091a0 	.word	0x080091a0

08003088 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	220f      	movs	r2, #15
 8003096:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003098:	4b12      	ldr	r3, [pc, #72]	; (80030e4 <HAL_RCC_GetClockConfig+0x5c>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 0203 	and.w	r2, r3, #3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80030a4:	4b0f      	ldr	r3, [pc, #60]	; (80030e4 <HAL_RCC_GetClockConfig+0x5c>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80030b0:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <HAL_RCC_GetClockConfig+0x5c>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80030bc:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <HAL_RCC_GetClockConfig+0x5c>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	08db      	lsrs	r3, r3, #3
 80030c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030ca:	4b07      	ldr	r3, [pc, #28]	; (80030e8 <HAL_RCC_GetClockConfig+0x60>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 020f 	and.w	r2, r3, #15
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	601a      	str	r2, [r3, #0]
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	40023800 	.word	0x40023800
 80030e8:	40023c00 	.word	0x40023c00

080030ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e0c5      	b.n	800328a <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a64      	ldr	r2, [pc, #400]	; (8003294 <HAL_TIM_Base_Init+0x1a8>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d045      	beq.n	8003194 <HAL_TIM_Base_Init+0xa8>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003110:	d040      	beq.n	8003194 <HAL_TIM_Base_Init+0xa8>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a60      	ldr	r2, [pc, #384]	; (8003298 <HAL_TIM_Base_Init+0x1ac>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d03b      	beq.n	8003194 <HAL_TIM_Base_Init+0xa8>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a5e      	ldr	r2, [pc, #376]	; (800329c <HAL_TIM_Base_Init+0x1b0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d036      	beq.n	8003194 <HAL_TIM_Base_Init+0xa8>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a5d      	ldr	r2, [pc, #372]	; (80032a0 <HAL_TIM_Base_Init+0x1b4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d031      	beq.n	8003194 <HAL_TIM_Base_Init+0xa8>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a5b      	ldr	r2, [pc, #364]	; (80032a4 <HAL_TIM_Base_Init+0x1b8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d02c      	beq.n	8003194 <HAL_TIM_Base_Init+0xa8>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a5a      	ldr	r2, [pc, #360]	; (80032a8 <HAL_TIM_Base_Init+0x1bc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d027      	beq.n	8003194 <HAL_TIM_Base_Init+0xa8>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a58      	ldr	r2, [pc, #352]	; (80032ac <HAL_TIM_Base_Init+0x1c0>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d022      	beq.n	8003194 <HAL_TIM_Base_Init+0xa8>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a57      	ldr	r2, [pc, #348]	; (80032b0 <HAL_TIM_Base_Init+0x1c4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d01d      	beq.n	8003194 <HAL_TIM_Base_Init+0xa8>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a55      	ldr	r2, [pc, #340]	; (80032b4 <HAL_TIM_Base_Init+0x1c8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d018      	beq.n	8003194 <HAL_TIM_Base_Init+0xa8>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a54      	ldr	r2, [pc, #336]	; (80032b8 <HAL_TIM_Base_Init+0x1cc>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d013      	beq.n	8003194 <HAL_TIM_Base_Init+0xa8>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a52      	ldr	r2, [pc, #328]	; (80032bc <HAL_TIM_Base_Init+0x1d0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00e      	beq.n	8003194 <HAL_TIM_Base_Init+0xa8>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a51      	ldr	r2, [pc, #324]	; (80032c0 <HAL_TIM_Base_Init+0x1d4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d009      	beq.n	8003194 <HAL_TIM_Base_Init+0xa8>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a4f      	ldr	r2, [pc, #316]	; (80032c4 <HAL_TIM_Base_Init+0x1d8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d004      	beq.n	8003194 <HAL_TIM_Base_Init+0xa8>
 800318a:	f240 1113 	movw	r1, #275	; 0x113
 800318e:	484e      	ldr	r0, [pc, #312]	; (80032c8 <HAL_TIM_Base_Init+0x1dc>)
 8003190:	f7fd fff0 	bl	8001174 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d014      	beq.n	80031c6 <HAL_TIM_Base_Init+0xda>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	2b10      	cmp	r3, #16
 80031a2:	d010      	beq.n	80031c6 <HAL_TIM_Base_Init+0xda>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b20      	cmp	r3, #32
 80031aa:	d00c      	beq.n	80031c6 <HAL_TIM_Base_Init+0xda>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	2b40      	cmp	r3, #64	; 0x40
 80031b2:	d008      	beq.n	80031c6 <HAL_TIM_Base_Init+0xda>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	2b60      	cmp	r3, #96	; 0x60
 80031ba:	d004      	beq.n	80031c6 <HAL_TIM_Base_Init+0xda>
 80031bc:	f44f 718a 	mov.w	r1, #276	; 0x114
 80031c0:	4841      	ldr	r0, [pc, #260]	; (80032c8 <HAL_TIM_Base_Init+0x1dc>)
 80031c2:	f7fd ffd7 	bl	8001174 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00e      	beq.n	80031ec <HAL_TIM_Base_Init+0x100>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d6:	d009      	beq.n	80031ec <HAL_TIM_Base_Init+0x100>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031e0:	d004      	beq.n	80031ec <HAL_TIM_Base_Init+0x100>
 80031e2:	f240 1115 	movw	r1, #277	; 0x115
 80031e6:	4838      	ldr	r0, [pc, #224]	; (80032c8 <HAL_TIM_Base_Init+0x1dc>)
 80031e8:	f7fd ffc4 	bl	8001174 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <HAL_TIM_Base_Init+0x11a>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	2b80      	cmp	r3, #128	; 0x80
 80031fa:	d004      	beq.n	8003206 <HAL_TIM_Base_Init+0x11a>
 80031fc:	f44f 718b 	mov.w	r1, #278	; 0x116
 8003200:	4831      	ldr	r0, [pc, #196]	; (80032c8 <HAL_TIM_Base_Init+0x1dc>)
 8003202:	f7fd ffb7 	bl	8001174 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d106      	bne.n	8003220 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f856 	bl	80032cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3304      	adds	r3, #4
 8003230:	4619      	mov	r1, r3
 8003232:	4610      	mov	r0, r2
 8003234:	f000 fa54 	bl	80036e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40010000 	.word	0x40010000
 8003298:	40000400 	.word	0x40000400
 800329c:	40000800 	.word	0x40000800
 80032a0:	40000c00 	.word	0x40000c00
 80032a4:	40001000 	.word	0x40001000
 80032a8:	40001400 	.word	0x40001400
 80032ac:	40010400 	.word	0x40010400
 80032b0:	40014000 	.word	0x40014000
 80032b4:	40014400 	.word	0x40014400
 80032b8:	40014800 	.word	0x40014800
 80032bc:	40001800 	.word	0x40001800
 80032c0:	40001c00 	.word	0x40001c00
 80032c4:	40002000 	.word	0x40002000
 80032c8:	08009034 	.word	0x08009034

080032cc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a51      	ldr	r2, [pc, #324]	; (8003434 <HAL_TIM_Base_Start_IT+0x154>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d045      	beq.n	800337e <HAL_TIM_Base_Start_IT+0x9e>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032fa:	d040      	beq.n	800337e <HAL_TIM_Base_Start_IT+0x9e>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a4d      	ldr	r2, [pc, #308]	; (8003438 <HAL_TIM_Base_Start_IT+0x158>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d03b      	beq.n	800337e <HAL_TIM_Base_Start_IT+0x9e>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a4c      	ldr	r2, [pc, #304]	; (800343c <HAL_TIM_Base_Start_IT+0x15c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d036      	beq.n	800337e <HAL_TIM_Base_Start_IT+0x9e>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a4a      	ldr	r2, [pc, #296]	; (8003440 <HAL_TIM_Base_Start_IT+0x160>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d031      	beq.n	800337e <HAL_TIM_Base_Start_IT+0x9e>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a49      	ldr	r2, [pc, #292]	; (8003444 <HAL_TIM_Base_Start_IT+0x164>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d02c      	beq.n	800337e <HAL_TIM_Base_Start_IT+0x9e>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a47      	ldr	r2, [pc, #284]	; (8003448 <HAL_TIM_Base_Start_IT+0x168>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d027      	beq.n	800337e <HAL_TIM_Base_Start_IT+0x9e>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a46      	ldr	r2, [pc, #280]	; (800344c <HAL_TIM_Base_Start_IT+0x16c>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d022      	beq.n	800337e <HAL_TIM_Base_Start_IT+0x9e>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a44      	ldr	r2, [pc, #272]	; (8003450 <HAL_TIM_Base_Start_IT+0x170>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d01d      	beq.n	800337e <HAL_TIM_Base_Start_IT+0x9e>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a43      	ldr	r2, [pc, #268]	; (8003454 <HAL_TIM_Base_Start_IT+0x174>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d018      	beq.n	800337e <HAL_TIM_Base_Start_IT+0x9e>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a41      	ldr	r2, [pc, #260]	; (8003458 <HAL_TIM_Base_Start_IT+0x178>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d013      	beq.n	800337e <HAL_TIM_Base_Start_IT+0x9e>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a40      	ldr	r2, [pc, #256]	; (800345c <HAL_TIM_Base_Start_IT+0x17c>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d00e      	beq.n	800337e <HAL_TIM_Base_Start_IT+0x9e>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a3e      	ldr	r2, [pc, #248]	; (8003460 <HAL_TIM_Base_Start_IT+0x180>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d009      	beq.n	800337e <HAL_TIM_Base_Start_IT+0x9e>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a3d      	ldr	r2, [pc, #244]	; (8003464 <HAL_TIM_Base_Start_IT+0x184>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d004      	beq.n	800337e <HAL_TIM_Base_Start_IT+0x9e>
 8003374:	f240 11cf 	movw	r1, #463	; 0x1cf
 8003378:	483b      	ldr	r0, [pc, #236]	; (8003468 <HAL_TIM_Base_Start_IT+0x188>)
 800337a:	f7fd fefb 	bl	8001174 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b01      	cmp	r3, #1
 8003388:	d001      	beq.n	800338e <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e04e      	b.n	800342c <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2202      	movs	r2, #2
 8003392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68da      	ldr	r2, [r3, #12]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f042 0201 	orr.w	r2, r2, #1
 80033a4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a22      	ldr	r2, [pc, #136]	; (8003434 <HAL_TIM_Base_Start_IT+0x154>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d022      	beq.n	80033f6 <HAL_TIM_Base_Start_IT+0x116>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b8:	d01d      	beq.n	80033f6 <HAL_TIM_Base_Start_IT+0x116>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a1e      	ldr	r2, [pc, #120]	; (8003438 <HAL_TIM_Base_Start_IT+0x158>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d018      	beq.n	80033f6 <HAL_TIM_Base_Start_IT+0x116>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a1c      	ldr	r2, [pc, #112]	; (800343c <HAL_TIM_Base_Start_IT+0x15c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d013      	beq.n	80033f6 <HAL_TIM_Base_Start_IT+0x116>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a1b      	ldr	r2, [pc, #108]	; (8003440 <HAL_TIM_Base_Start_IT+0x160>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d00e      	beq.n	80033f6 <HAL_TIM_Base_Start_IT+0x116>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a1b      	ldr	r2, [pc, #108]	; (800344c <HAL_TIM_Base_Start_IT+0x16c>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d009      	beq.n	80033f6 <HAL_TIM_Base_Start_IT+0x116>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a1a      	ldr	r2, [pc, #104]	; (8003450 <HAL_TIM_Base_Start_IT+0x170>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d004      	beq.n	80033f6 <HAL_TIM_Base_Start_IT+0x116>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a1a      	ldr	r2, [pc, #104]	; (800345c <HAL_TIM_Base_Start_IT+0x17c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d111      	bne.n	800341a <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2b06      	cmp	r3, #6
 8003406:	d010      	beq.n	800342a <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003418:	e007      	b.n	800342a <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f042 0201 	orr.w	r2, r2, #1
 8003428:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40010000 	.word	0x40010000
 8003438:	40000400 	.word	0x40000400
 800343c:	40000800 	.word	0x40000800
 8003440:	40000c00 	.word	0x40000c00
 8003444:	40001000 	.word	0x40001000
 8003448:	40001400 	.word	0x40001400
 800344c:	40010400 	.word	0x40010400
 8003450:	40014000 	.word	0x40014000
 8003454:	40014400 	.word	0x40014400
 8003458:	40014800 	.word	0x40014800
 800345c:	40001800 	.word	0x40001800
 8003460:	40001c00 	.word	0x40001c00
 8003464:	40002000 	.word	0x40002000
 8003468:	08009034 	.word	0x08009034

0800346c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b02      	cmp	r3, #2
 8003480:	d122      	bne.n	80034c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b02      	cmp	r3, #2
 800348e:	d11b      	bne.n	80034c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f06f 0202 	mvn.w	r2, #2
 8003498:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f8f8 	bl	80036a4 <HAL_TIM_IC_CaptureCallback>
 80034b4:	e005      	b.n	80034c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f8ea 	bl	8003690 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 f8fb 	bl	80036b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	f003 0304 	and.w	r3, r3, #4
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d122      	bne.n	800351c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b04      	cmp	r3, #4
 80034e2:	d11b      	bne.n	800351c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f06f 0204 	mvn.w	r2, #4
 80034ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2202      	movs	r2, #2
 80034f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f8ce 	bl	80036a4 <HAL_TIM_IC_CaptureCallback>
 8003508:	e005      	b.n	8003516 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f8c0 	bl	8003690 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f8d1 	bl	80036b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f003 0308 	and.w	r3, r3, #8
 8003526:	2b08      	cmp	r3, #8
 8003528:	d122      	bne.n	8003570 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f003 0308 	and.w	r3, r3, #8
 8003534:	2b08      	cmp	r3, #8
 8003536:	d11b      	bne.n	8003570 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f06f 0208 	mvn.w	r2, #8
 8003540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2204      	movs	r2, #4
 8003546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f8a4 	bl	80036a4 <HAL_TIM_IC_CaptureCallback>
 800355c:	e005      	b.n	800356a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f896 	bl	8003690 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f8a7 	bl	80036b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	f003 0310 	and.w	r3, r3, #16
 800357a:	2b10      	cmp	r3, #16
 800357c:	d122      	bne.n	80035c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	2b10      	cmp	r3, #16
 800358a:	d11b      	bne.n	80035c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f06f 0210 	mvn.w	r2, #16
 8003594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2208      	movs	r2, #8
 800359a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f87a 	bl	80036a4 <HAL_TIM_IC_CaptureCallback>
 80035b0:	e005      	b.n	80035be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f86c 	bl	8003690 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f87d 	bl	80036b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d10e      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d107      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f06f 0201 	mvn.w	r2, #1
 80035e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f846 	bl	800367c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fa:	2b80      	cmp	r3, #128	; 0x80
 80035fc:	d10e      	bne.n	800361c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003608:	2b80      	cmp	r3, #128	; 0x80
 800360a:	d107      	bne.n	800361c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f90c 	bl	8003834 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003626:	2b40      	cmp	r3, #64	; 0x40
 8003628:	d10e      	bne.n	8003648 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003634:	2b40      	cmp	r3, #64	; 0x40
 8003636:	d107      	bne.n	8003648 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f842 	bl	80036cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f003 0320 	and.w	r3, r3, #32
 8003652:	2b20      	cmp	r3, #32
 8003654:	d10e      	bne.n	8003674 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f003 0320 	and.w	r3, r3, #32
 8003660:	2b20      	cmp	r3, #32
 8003662:	d107      	bne.n	8003674 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f06f 0220 	mvn.w	r2, #32
 800366c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f8d6 	bl	8003820 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003674:	bf00      	nop
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a40      	ldr	r2, [pc, #256]	; (80037f4 <TIM_Base_SetConfig+0x114>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d013      	beq.n	8003720 <TIM_Base_SetConfig+0x40>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036fe:	d00f      	beq.n	8003720 <TIM_Base_SetConfig+0x40>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a3d      	ldr	r2, [pc, #244]	; (80037f8 <TIM_Base_SetConfig+0x118>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d00b      	beq.n	8003720 <TIM_Base_SetConfig+0x40>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a3c      	ldr	r2, [pc, #240]	; (80037fc <TIM_Base_SetConfig+0x11c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d007      	beq.n	8003720 <TIM_Base_SetConfig+0x40>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a3b      	ldr	r2, [pc, #236]	; (8003800 <TIM_Base_SetConfig+0x120>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d003      	beq.n	8003720 <TIM_Base_SetConfig+0x40>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a3a      	ldr	r2, [pc, #232]	; (8003804 <TIM_Base_SetConfig+0x124>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d108      	bne.n	8003732 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003726:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	4313      	orrs	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a2f      	ldr	r2, [pc, #188]	; (80037f4 <TIM_Base_SetConfig+0x114>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d02b      	beq.n	8003792 <TIM_Base_SetConfig+0xb2>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003740:	d027      	beq.n	8003792 <TIM_Base_SetConfig+0xb2>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a2c      	ldr	r2, [pc, #176]	; (80037f8 <TIM_Base_SetConfig+0x118>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d023      	beq.n	8003792 <TIM_Base_SetConfig+0xb2>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a2b      	ldr	r2, [pc, #172]	; (80037fc <TIM_Base_SetConfig+0x11c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d01f      	beq.n	8003792 <TIM_Base_SetConfig+0xb2>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a2a      	ldr	r2, [pc, #168]	; (8003800 <TIM_Base_SetConfig+0x120>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d01b      	beq.n	8003792 <TIM_Base_SetConfig+0xb2>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a29      	ldr	r2, [pc, #164]	; (8003804 <TIM_Base_SetConfig+0x124>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d017      	beq.n	8003792 <TIM_Base_SetConfig+0xb2>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a28      	ldr	r2, [pc, #160]	; (8003808 <TIM_Base_SetConfig+0x128>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d013      	beq.n	8003792 <TIM_Base_SetConfig+0xb2>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a27      	ldr	r2, [pc, #156]	; (800380c <TIM_Base_SetConfig+0x12c>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d00f      	beq.n	8003792 <TIM_Base_SetConfig+0xb2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a26      	ldr	r2, [pc, #152]	; (8003810 <TIM_Base_SetConfig+0x130>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d00b      	beq.n	8003792 <TIM_Base_SetConfig+0xb2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a25      	ldr	r2, [pc, #148]	; (8003814 <TIM_Base_SetConfig+0x134>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d007      	beq.n	8003792 <TIM_Base_SetConfig+0xb2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a24      	ldr	r2, [pc, #144]	; (8003818 <TIM_Base_SetConfig+0x138>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d003      	beq.n	8003792 <TIM_Base_SetConfig+0xb2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a23      	ldr	r2, [pc, #140]	; (800381c <TIM_Base_SetConfig+0x13c>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d108      	bne.n	80037a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a0a      	ldr	r2, [pc, #40]	; (80037f4 <TIM_Base_SetConfig+0x114>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d003      	beq.n	80037d8 <TIM_Base_SetConfig+0xf8>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a0c      	ldr	r2, [pc, #48]	; (8003804 <TIM_Base_SetConfig+0x124>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d103      	bne.n	80037e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	615a      	str	r2, [r3, #20]
}
 80037e6:	bf00      	nop
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	40010000 	.word	0x40010000
 80037f8:	40000400 	.word	0x40000400
 80037fc:	40000800 	.word	0x40000800
 8003800:	40000c00 	.word	0x40000c00
 8003804:	40010400 	.word	0x40010400
 8003808:	40014000 	.word	0x40014000
 800380c:	40014400 	.word	0x40014400
 8003810:	40014800 	.word	0x40014800
 8003814:	40001800 	.word	0x40001800
 8003818:	40001c00 	.word	0x40001c00
 800381c:	40002000 	.word	0x40002000

08003820 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e0be      	b.n	80039d8 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d031      	beq.n	80038c6 <HAL_UART_Init+0x7e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a5e      	ldr	r2, [pc, #376]	; (80039e0 <HAL_UART_Init+0x198>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d013      	beq.n	8003894 <HAL_UART_Init+0x4c>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a5c      	ldr	r2, [pc, #368]	; (80039e4 <HAL_UART_Init+0x19c>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d00e      	beq.n	8003894 <HAL_UART_Init+0x4c>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a5b      	ldr	r2, [pc, #364]	; (80039e8 <HAL_UART_Init+0x1a0>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d009      	beq.n	8003894 <HAL_UART_Init+0x4c>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a59      	ldr	r2, [pc, #356]	; (80039ec <HAL_UART_Init+0x1a4>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d004      	beq.n	8003894 <HAL_UART_Init+0x4c>
 800388a:	f240 1173 	movw	r1, #371	; 0x173
 800388e:	4858      	ldr	r0, [pc, #352]	; (80039f0 <HAL_UART_Init+0x1a8>)
 8003890:	f7fd fc70 	bl	8001174 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d041      	beq.n	8003920 <HAL_UART_Init+0xd8>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038a4:	d03c      	beq.n	8003920 <HAL_UART_Init+0xd8>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038ae:	d037      	beq.n	8003920 <HAL_UART_Init+0xd8>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038b8:	d032      	beq.n	8003920 <HAL_UART_Init+0xd8>
 80038ba:	f44f 71ba 	mov.w	r1, #372	; 0x174
 80038be:	484c      	ldr	r0, [pc, #304]	; (80039f0 <HAL_UART_Init+0x1a8>)
 80038c0:	f7fd fc58 	bl	8001174 <assert_failed>
 80038c4:	e02c      	b.n	8003920 <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a45      	ldr	r2, [pc, #276]	; (80039e0 <HAL_UART_Init+0x198>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d027      	beq.n	8003920 <HAL_UART_Init+0xd8>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a43      	ldr	r2, [pc, #268]	; (80039e4 <HAL_UART_Init+0x19c>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d022      	beq.n	8003920 <HAL_UART_Init+0xd8>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a42      	ldr	r2, [pc, #264]	; (80039e8 <HAL_UART_Init+0x1a0>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d01d      	beq.n	8003920 <HAL_UART_Init+0xd8>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a42      	ldr	r2, [pc, #264]	; (80039f4 <HAL_UART_Init+0x1ac>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d018      	beq.n	8003920 <HAL_UART_Init+0xd8>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a41      	ldr	r2, [pc, #260]	; (80039f8 <HAL_UART_Init+0x1b0>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d013      	beq.n	8003920 <HAL_UART_Init+0xd8>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a3b      	ldr	r2, [pc, #236]	; (80039ec <HAL_UART_Init+0x1a4>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d00e      	beq.n	8003920 <HAL_UART_Init+0xd8>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a3d      	ldr	r2, [pc, #244]	; (80039fc <HAL_UART_Init+0x1b4>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d009      	beq.n	8003920 <HAL_UART_Init+0xd8>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a3b      	ldr	r2, [pc, #236]	; (8003a00 <HAL_UART_Init+0x1b8>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d004      	beq.n	8003920 <HAL_UART_Init+0xd8>
 8003916:	f44f 71bc 	mov.w	r1, #376	; 0x178
 800391a:	4835      	ldr	r0, [pc, #212]	; (80039f0 <HAL_UART_Init+0x1a8>)
 800391c:	f7fd fc2a 	bl	8001174 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d009      	beq.n	800393c <HAL_UART_Init+0xf4>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003930:	d004      	beq.n	800393c <HAL_UART_Init+0xf4>
 8003932:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8003936:	482e      	ldr	r0, [pc, #184]	; (80039f0 <HAL_UART_Init+0x1a8>)
 8003938:	f7fd fc1c 	bl	8001174 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d009      	beq.n	8003958 <HAL_UART_Init+0x110>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800394c:	d004      	beq.n	8003958 <HAL_UART_Init+0x110>
 800394e:	f240 117b 	movw	r1, #379	; 0x17b
 8003952:	4827      	ldr	r0, [pc, #156]	; (80039f0 <HAL_UART_Init+0x1a8>)
 8003954:	f7fd fc0e 	bl	8001174 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d106      	bne.n	8003972 <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f849 	bl	8003a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2224      	movs	r2, #36	; 0x24
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003988:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 fc96 	bl	80042bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	691a      	ldr	r2, [r3, #16]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800399e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695a      	ldr	r2, [r3, #20]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039ae:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039be:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2220      	movs	r2, #32
 80039ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2220      	movs	r2, #32
 80039d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40011000 	.word	0x40011000
 80039e4:	40004400 	.word	0x40004400
 80039e8:	40004800 	.word	0x40004800
 80039ec:	40011400 	.word	0x40011400
 80039f0:	0800906c 	.word	0x0800906c
 80039f4:	40004c00 	.word	0x40004c00
 80039f8:	40005000 	.word	0x40005000
 80039fc:	40007800 	.word	0x40007800
 8003a00:	40007c00 	.word	0x40007c00

08003a04 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b0ba      	sub	sp, #232	; 0xe8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10f      	bne.n	8003a7e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a62:	f003 0320 	and.w	r3, r3, #32
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d009      	beq.n	8003a7e <HAL_UART_IRQHandler+0x66>
 8003a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a6e:	f003 0320 	and.w	r3, r3, #32
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 fb65 	bl	8004146 <UART_Receive_IT>
      return;
 8003a7c:	e256      	b.n	8003f2c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 80de 	beq.w	8003c44 <HAL_UART_IRQHandler+0x22c>
 8003a88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d106      	bne.n	8003aa2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a98:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 80d1 	beq.w	8003c44 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00b      	beq.n	8003ac6 <HAL_UART_IRQHandler+0xae>
 8003aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d005      	beq.n	8003ac6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	f043 0201 	orr.w	r2, r3, #1
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00b      	beq.n	8003aea <HAL_UART_IRQHandler+0xd2>
 8003ad2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d005      	beq.n	8003aea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	f043 0202 	orr.w	r2, r3, #2
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00b      	beq.n	8003b0e <HAL_UART_IRQHandler+0xf6>
 8003af6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d005      	beq.n	8003b0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	f043 0204 	orr.w	r2, r3, #4
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b12:	f003 0308 	and.w	r3, r3, #8
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d011      	beq.n	8003b3e <HAL_UART_IRQHandler+0x126>
 8003b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b1e:	f003 0320 	and.w	r3, r3, #32
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d105      	bne.n	8003b32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d005      	beq.n	8003b3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	f043 0208 	orr.w	r2, r3, #8
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f000 81ed 	beq.w	8003f22 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b4c:	f003 0320 	and.w	r3, r3, #32
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d008      	beq.n	8003b66 <HAL_UART_IRQHandler+0x14e>
 8003b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b58:	f003 0320 	and.w	r3, r3, #32
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d002      	beq.n	8003b66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 faf0 	bl	8004146 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b70:	2b40      	cmp	r3, #64	; 0x40
 8003b72:	bf0c      	ite	eq
 8003b74:	2301      	moveq	r3, #1
 8003b76:	2300      	movne	r3, #0
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	f003 0308 	and.w	r3, r3, #8
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d103      	bne.n	8003b92 <HAL_UART_IRQHandler+0x17a>
 8003b8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d04f      	beq.n	8003c32 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f9f8 	bl	8003f88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba2:	2b40      	cmp	r3, #64	; 0x40
 8003ba4:	d141      	bne.n	8003c2a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	3314      	adds	r3, #20
 8003bac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bb4:	e853 3f00 	ldrex	r3, [r3]
 8003bb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003bbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3314      	adds	r3, #20
 8003bce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bd2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003bd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003bde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003be2:	e841 2300 	strex	r3, r2, [r1]
 8003be6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003bea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1d9      	bne.n	8003ba6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d013      	beq.n	8003c22 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfe:	4a7d      	ldr	r2, [pc, #500]	; (8003df4 <HAL_UART_IRQHandler+0x3dc>)
 8003c00:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fd ffe0 	bl	8001bcc <HAL_DMA_Abort_IT>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d016      	beq.n	8003c40 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c1c:	4610      	mov	r0, r2
 8003c1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c20:	e00e      	b.n	8003c40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f99a 	bl	8003f5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c28:	e00a      	b.n	8003c40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f996 	bl	8003f5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c30:	e006      	b.n	8003c40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f992 	bl	8003f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003c3e:	e170      	b.n	8003f22 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c40:	bf00      	nop
    return;
 8003c42:	e16e      	b.n	8003f22 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	f040 814a 	bne.w	8003ee2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c52:	f003 0310 	and.w	r3, r3, #16
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 8143 	beq.w	8003ee2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c60:	f003 0310 	and.w	r3, r3, #16
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 813c 	beq.w	8003ee2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60bb      	str	r3, [r7, #8]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	60bb      	str	r3, [r7, #8]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	60bb      	str	r3, [r7, #8]
 8003c7e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8a:	2b40      	cmp	r3, #64	; 0x40
 8003c8c:	f040 80b4 	bne.w	8003df8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 8140 	beq.w	8003f26 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003caa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	f080 8139 	bcs.w	8003f26 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cc6:	f000 8088 	beq.w	8003dda <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	330c      	adds	r3, #12
 8003cd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cd8:	e853 3f00 	ldrex	r3, [r3]
 8003cdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ce0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ce4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ce8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	330c      	adds	r3, #12
 8003cf2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003cf6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003cfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d06:	e841 2300 	strex	r3, r2, [r1]
 8003d0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1d9      	bne.n	8003cca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	3314      	adds	r3, #20
 8003d1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d20:	e853 3f00 	ldrex	r3, [r3]
 8003d24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d28:	f023 0301 	bic.w	r3, r3, #1
 8003d2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3314      	adds	r3, #20
 8003d36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d46:	e841 2300 	strex	r3, r2, [r1]
 8003d4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1e1      	bne.n	8003d16 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	3314      	adds	r3, #20
 8003d58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d5c:	e853 3f00 	ldrex	r3, [r3]
 8003d60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	3314      	adds	r3, #20
 8003d72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d7e:	e841 2300 	strex	r3, r2, [r1]
 8003d82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1e3      	bne.n	8003d52 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	330c      	adds	r3, #12
 8003d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003da2:	e853 3f00 	ldrex	r3, [r3]
 8003da6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003da8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003daa:	f023 0310 	bic.w	r3, r3, #16
 8003dae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	330c      	adds	r3, #12
 8003db8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003dbc:	65ba      	str	r2, [r7, #88]	; 0x58
 8003dbe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003dc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dc4:	e841 2300 	strex	r3, r2, [r1]
 8003dc8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1e3      	bne.n	8003d98 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7fd fe89 	bl	8001aec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	4619      	mov	r1, r3
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f8c0 	bl	8003f70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003df0:	e099      	b.n	8003f26 <HAL_UART_IRQHandler+0x50e>
 8003df2:	bf00      	nop
 8003df4:	0800404f 	.word	0x0800404f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 808b 	beq.w	8003f2a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003e14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 8086 	beq.w	8003f2a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	330c      	adds	r3, #12
 8003e24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e28:	e853 3f00 	ldrex	r3, [r3]
 8003e2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	330c      	adds	r3, #12
 8003e3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e42:	647a      	str	r2, [r7, #68]	; 0x44
 8003e44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e4a:	e841 2300 	strex	r3, r2, [r1]
 8003e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1e3      	bne.n	8003e1e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	3314      	adds	r3, #20
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	e853 3f00 	ldrex	r3, [r3]
 8003e64:	623b      	str	r3, [r7, #32]
   return(result);
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	f023 0301 	bic.w	r3, r3, #1
 8003e6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	3314      	adds	r3, #20
 8003e76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e7a:	633a      	str	r2, [r7, #48]	; 0x30
 8003e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e82:	e841 2300 	strex	r3, r2, [r1]
 8003e86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1e3      	bne.n	8003e56 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2220      	movs	r2, #32
 8003e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	330c      	adds	r3, #12
 8003ea2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	e853 3f00 	ldrex	r3, [r3]
 8003eaa:	60fb      	str	r3, [r7, #12]
   return(result);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f023 0310 	bic.w	r3, r3, #16
 8003eb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	330c      	adds	r3, #12
 8003ebc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ec0:	61fa      	str	r2, [r7, #28]
 8003ec2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec4:	69b9      	ldr	r1, [r7, #24]
 8003ec6:	69fa      	ldr	r2, [r7, #28]
 8003ec8:	e841 2300 	strex	r3, r2, [r1]
 8003ecc:	617b      	str	r3, [r7, #20]
   return(result);
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1e3      	bne.n	8003e9c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ed4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ed8:	4619      	mov	r1, r3
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f848 	bl	8003f70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ee0:	e023      	b.n	8003f2a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d009      	beq.n	8003f02 <HAL_UART_IRQHandler+0x4ea>
 8003eee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f8bb 	bl	8004076 <UART_Transmit_IT>
    return;
 8003f00:	e014      	b.n	8003f2c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00e      	beq.n	8003f2c <HAL_UART_IRQHandler+0x514>
 8003f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d008      	beq.n	8003f2c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f8fb 	bl	8004116 <UART_EndTransmit_IT>
    return;
 8003f20:	e004      	b.n	8003f2c <HAL_UART_IRQHandler+0x514>
    return;
 8003f22:	bf00      	nop
 8003f24:	e002      	b.n	8003f2c <HAL_UART_IRQHandler+0x514>
      return;
 8003f26:	bf00      	nop
 8003f28:	e000      	b.n	8003f2c <HAL_UART_IRQHandler+0x514>
      return;
 8003f2a:	bf00      	nop
  }
}
 8003f2c:	37e8      	adds	r7, #232	; 0xe8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop

08003f34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	460b      	mov	r3, r1
 8003f7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b095      	sub	sp, #84	; 0x54
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	330c      	adds	r3, #12
 8003f96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f9a:	e853 3f00 	ldrex	r3, [r3]
 8003f9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	330c      	adds	r3, #12
 8003fae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fb0:	643a      	str	r2, [r7, #64]	; 0x40
 8003fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003fb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fb8:	e841 2300 	strex	r3, r2, [r1]
 8003fbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1e5      	bne.n	8003f90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3314      	adds	r3, #20
 8003fca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fcc:	6a3b      	ldr	r3, [r7, #32]
 8003fce:	e853 3f00 	ldrex	r3, [r3]
 8003fd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	f023 0301 	bic.w	r3, r3, #1
 8003fda:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	3314      	adds	r3, #20
 8003fe2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fe4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fe6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fec:	e841 2300 	strex	r3, r2, [r1]
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1e5      	bne.n	8003fc4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d119      	bne.n	8004034 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	330c      	adds	r3, #12
 8004006:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	e853 3f00 	ldrex	r3, [r3]
 800400e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f023 0310 	bic.w	r3, r3, #16
 8004016:	647b      	str	r3, [r7, #68]	; 0x44
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	330c      	adds	r3, #12
 800401e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004020:	61ba      	str	r2, [r7, #24]
 8004022:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004024:	6979      	ldr	r1, [r7, #20]
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	e841 2300 	strex	r3, r2, [r1]
 800402c:	613b      	str	r3, [r7, #16]
   return(result);
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1e5      	bne.n	8004000 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004042:	bf00      	nop
 8004044:	3754      	adds	r7, #84	; 0x54
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b084      	sub	sp, #16
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f7ff ff77 	bl	8003f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800406e:	bf00      	nop
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004076:	b480      	push	{r7}
 8004078:	b085      	sub	sp, #20
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b21      	cmp	r3, #33	; 0x21
 8004088:	d13e      	bne.n	8004108 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004092:	d114      	bne.n	80040be <UART_Transmit_IT+0x48>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d110      	bne.n	80040be <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a1b      	ldr	r3, [r3, #32]
 80040a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	1c9a      	adds	r2, r3, #2
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	621a      	str	r2, [r3, #32]
 80040bc:	e008      	b.n	80040d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	1c59      	adds	r1, r3, #1
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	6211      	str	r1, [r2, #32]
 80040c8:	781a      	ldrb	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	3b01      	subs	r3, #1
 80040d8:	b29b      	uxth	r3, r3
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	4619      	mov	r1, r3
 80040de:	84d1      	strh	r1, [r2, #38]	; 0x26
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10f      	bne.n	8004104 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68da      	ldr	r2, [r3, #12]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004102:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004104:	2300      	movs	r3, #0
 8004106:	e000      	b.n	800410a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004108:	2302      	movs	r3, #2
  }
}
 800410a:	4618      	mov	r0, r3
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b082      	sub	sp, #8
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68da      	ldr	r2, [r3, #12]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800412c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2220      	movs	r2, #32
 8004132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7ff fefc 	bl	8003f34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b08c      	sub	sp, #48	; 0x30
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b22      	cmp	r3, #34	; 0x22
 8004158:	f040 80ab 	bne.w	80042b2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004164:	d117      	bne.n	8004196 <UART_Receive_IT+0x50>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d113      	bne.n	8004196 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800416e:	2300      	movs	r3, #0
 8004170:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004176:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	b29b      	uxth	r3, r3
 8004180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004184:	b29a      	uxth	r2, r3
 8004186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004188:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418e:	1c9a      	adds	r2, r3, #2
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	629a      	str	r2, [r3, #40]	; 0x28
 8004194:	e026      	b.n	80041e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800419c:	2300      	movs	r3, #0
 800419e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041a8:	d007      	beq.n	80041ba <UART_Receive_IT+0x74>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10a      	bne.n	80041c8 <UART_Receive_IT+0x82>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d106      	bne.n	80041c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c4:	701a      	strb	r2, [r3, #0]
 80041c6:	e008      	b.n	80041da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041de:	1c5a      	adds	r2, r3, #1
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	4619      	mov	r1, r3
 80041f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d15a      	bne.n	80042ae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0220 	bic.w	r2, r2, #32
 8004206:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004216:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695a      	ldr	r2, [r3, #20]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0201 	bic.w	r2, r2, #1
 8004226:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004234:	2b01      	cmp	r3, #1
 8004236:	d135      	bne.n	80042a4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	330c      	adds	r3, #12
 8004244:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	e853 3f00 	ldrex	r3, [r3]
 800424c:	613b      	str	r3, [r7, #16]
   return(result);
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f023 0310 	bic.w	r3, r3, #16
 8004254:	627b      	str	r3, [r7, #36]	; 0x24
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	330c      	adds	r3, #12
 800425c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800425e:	623a      	str	r2, [r7, #32]
 8004260:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004262:	69f9      	ldr	r1, [r7, #28]
 8004264:	6a3a      	ldr	r2, [r7, #32]
 8004266:	e841 2300 	strex	r3, r2, [r1]
 800426a:	61bb      	str	r3, [r7, #24]
   return(result);
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1e5      	bne.n	800423e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0310 	and.w	r3, r3, #16
 800427c:	2b10      	cmp	r3, #16
 800427e:	d10a      	bne.n	8004296 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004280:	2300      	movs	r3, #0
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800429a:	4619      	mov	r1, r3
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7ff fe67 	bl	8003f70 <HAL_UARTEx_RxEventCallback>
 80042a2:	e002      	b.n	80042aa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7ff fe4f 	bl	8003f48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042aa:	2300      	movs	r3, #0
 80042ac:	e002      	b.n	80042b4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	e000      	b.n	80042b4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80042b2:	2302      	movs	r3, #2
  }
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3730      	adds	r7, #48	; 0x30
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042c0:	b0c0      	sub	sp, #256	; 0x100
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80042c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	4bcf      	ldr	r3, [pc, #828]	; (800460c <UART_SetConfig+0x350>)
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d904      	bls.n	80042de <UART_SetConfig+0x22>
 80042d4:	f640 6161 	movw	r1, #3681	; 0xe61
 80042d8:	48cd      	ldr	r0, [pc, #820]	; (8004610 <UART_SetConfig+0x354>)
 80042da:	f7fc ff4b 	bl	8001174 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80042de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00a      	beq.n	80042fe <UART_SetConfig+0x42>
 80042e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042f2:	d004      	beq.n	80042fe <UART_SetConfig+0x42>
 80042f4:	f640 6162 	movw	r1, #3682	; 0xe62
 80042f8:	48c5      	ldr	r0, [pc, #788]	; (8004610 <UART_SetConfig+0x354>)
 80042fa:	f7fc ff3b 	bl	8001174 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80042fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d010      	beq.n	800432a <UART_SetConfig+0x6e>
 8004308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004312:	d00a      	beq.n	800432a <UART_SetConfig+0x6e>
 8004314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800431e:	d004      	beq.n	800432a <UART_SetConfig+0x6e>
 8004320:	f640 6163 	movw	r1, #3683	; 0xe63
 8004324:	48ba      	ldr	r0, [pc, #744]	; (8004610 <UART_SetConfig+0x354>)
 8004326:	f7fc ff25 	bl	8001174 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800432a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800432e:	695a      	ldr	r2, [r3, #20]
 8004330:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8004334:	4013      	ands	r3, r2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d104      	bne.n	8004344 <UART_SetConfig+0x88>
 800433a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d104      	bne.n	800434e <UART_SetConfig+0x92>
 8004344:	f640 6164 	movw	r1, #3684	; 0xe64
 8004348:	48b1      	ldr	r0, [pc, #708]	; (8004610 <UART_SetConfig+0x354>)
 800434a:	f7fc ff13 	bl	8001174 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800434e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800435a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800435e:	68d9      	ldr	r1, [r3, #12]
 8004360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	ea40 0301 	orr.w	r3, r0, r1
 800436a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800436c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	431a      	orrs	r2, r3
 800437a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	431a      	orrs	r2, r3
 8004382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	4313      	orrs	r3, r2
 800438a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800438e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800439a:	f021 010c 	bic.w	r1, r1, #12
 800439e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80043a8:	430b      	orrs	r3, r1
 80043aa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80043b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043bc:	6999      	ldr	r1, [r3, #24]
 80043be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	ea40 0301 	orr.w	r3, r0, r1
 80043c8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	4b90      	ldr	r3, [pc, #576]	; (8004614 <UART_SetConfig+0x358>)
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d005      	beq.n	80043e2 <UART_SetConfig+0x126>
 80043d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	4b8e      	ldr	r3, [pc, #568]	; (8004618 <UART_SetConfig+0x35c>)
 80043de:	429a      	cmp	r2, r3
 80043e0:	d104      	bne.n	80043ec <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043e2:	f7fe fe3d 	bl	8003060 <HAL_RCC_GetPCLK2Freq>
 80043e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80043ea:	e003      	b.n	80043f4 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043ec:	f7fe fe24 	bl	8003038 <HAL_RCC_GetPCLK1Freq>
 80043f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043fe:	f040 810f 	bne.w	8004620 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004406:	2200      	movs	r2, #0
 8004408:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800440c:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004410:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004414:	4622      	mov	r2, r4
 8004416:	462b      	mov	r3, r5
 8004418:	1891      	adds	r1, r2, r2
 800441a:	65b9      	str	r1, [r7, #88]	; 0x58
 800441c:	415b      	adcs	r3, r3
 800441e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004420:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004424:	4621      	mov	r1, r4
 8004426:	eb12 0801 	adds.w	r8, r2, r1
 800442a:	4629      	mov	r1, r5
 800442c:	eb43 0901 	adc.w	r9, r3, r1
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	f04f 0300 	mov.w	r3, #0
 8004438:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800443c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004440:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004444:	4690      	mov	r8, r2
 8004446:	4699      	mov	r9, r3
 8004448:	4623      	mov	r3, r4
 800444a:	eb18 0303 	adds.w	r3, r8, r3
 800444e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004452:	462b      	mov	r3, r5
 8004454:	eb49 0303 	adc.w	r3, r9, r3
 8004458:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800445c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004468:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800446c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004470:	460b      	mov	r3, r1
 8004472:	18db      	adds	r3, r3, r3
 8004474:	653b      	str	r3, [r7, #80]	; 0x50
 8004476:	4613      	mov	r3, r2
 8004478:	eb42 0303 	adc.w	r3, r2, r3
 800447c:	657b      	str	r3, [r7, #84]	; 0x54
 800447e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004482:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004486:	f7fb fefd 	bl	8000284 <__aeabi_uldivmod>
 800448a:	4602      	mov	r2, r0
 800448c:	460b      	mov	r3, r1
 800448e:	4b63      	ldr	r3, [pc, #396]	; (800461c <UART_SetConfig+0x360>)
 8004490:	fba3 2302 	umull	r2, r3, r3, r2
 8004494:	095b      	lsrs	r3, r3, #5
 8004496:	011c      	lsls	r4, r3, #4
 8004498:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800449c:	2200      	movs	r2, #0
 800449e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80044a2:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80044a6:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80044aa:	4642      	mov	r2, r8
 80044ac:	464b      	mov	r3, r9
 80044ae:	1891      	adds	r1, r2, r2
 80044b0:	64b9      	str	r1, [r7, #72]	; 0x48
 80044b2:	415b      	adcs	r3, r3
 80044b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044b6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80044ba:	4641      	mov	r1, r8
 80044bc:	eb12 0a01 	adds.w	sl, r2, r1
 80044c0:	4649      	mov	r1, r9
 80044c2:	eb43 0b01 	adc.w	fp, r3, r1
 80044c6:	f04f 0200 	mov.w	r2, #0
 80044ca:	f04f 0300 	mov.w	r3, #0
 80044ce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044d2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044da:	4692      	mov	sl, r2
 80044dc:	469b      	mov	fp, r3
 80044de:	4643      	mov	r3, r8
 80044e0:	eb1a 0303 	adds.w	r3, sl, r3
 80044e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044e8:	464b      	mov	r3, r9
 80044ea:	eb4b 0303 	adc.w	r3, fp, r3
 80044ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80044f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044fe:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004502:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004506:	460b      	mov	r3, r1
 8004508:	18db      	adds	r3, r3, r3
 800450a:	643b      	str	r3, [r7, #64]	; 0x40
 800450c:	4613      	mov	r3, r2
 800450e:	eb42 0303 	adc.w	r3, r2, r3
 8004512:	647b      	str	r3, [r7, #68]	; 0x44
 8004514:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004518:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800451c:	f7fb feb2 	bl	8000284 <__aeabi_uldivmod>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4611      	mov	r1, r2
 8004526:	4b3d      	ldr	r3, [pc, #244]	; (800461c <UART_SetConfig+0x360>)
 8004528:	fba3 2301 	umull	r2, r3, r3, r1
 800452c:	095b      	lsrs	r3, r3, #5
 800452e:	2264      	movs	r2, #100	; 0x64
 8004530:	fb02 f303 	mul.w	r3, r2, r3
 8004534:	1acb      	subs	r3, r1, r3
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800453c:	4b37      	ldr	r3, [pc, #220]	; (800461c <UART_SetConfig+0x360>)
 800453e:	fba3 2302 	umull	r2, r3, r3, r2
 8004542:	095b      	lsrs	r3, r3, #5
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800454a:	441c      	add	r4, r3
 800454c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004550:	2200      	movs	r2, #0
 8004552:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004556:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800455a:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800455e:	4642      	mov	r2, r8
 8004560:	464b      	mov	r3, r9
 8004562:	1891      	adds	r1, r2, r2
 8004564:	63b9      	str	r1, [r7, #56]	; 0x38
 8004566:	415b      	adcs	r3, r3
 8004568:	63fb      	str	r3, [r7, #60]	; 0x3c
 800456a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800456e:	4641      	mov	r1, r8
 8004570:	1851      	adds	r1, r2, r1
 8004572:	6339      	str	r1, [r7, #48]	; 0x30
 8004574:	4649      	mov	r1, r9
 8004576:	414b      	adcs	r3, r1
 8004578:	637b      	str	r3, [r7, #52]	; 0x34
 800457a:	f04f 0200 	mov.w	r2, #0
 800457e:	f04f 0300 	mov.w	r3, #0
 8004582:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004586:	4659      	mov	r1, fp
 8004588:	00cb      	lsls	r3, r1, #3
 800458a:	4651      	mov	r1, sl
 800458c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004590:	4651      	mov	r1, sl
 8004592:	00ca      	lsls	r2, r1, #3
 8004594:	4610      	mov	r0, r2
 8004596:	4619      	mov	r1, r3
 8004598:	4603      	mov	r3, r0
 800459a:	4642      	mov	r2, r8
 800459c:	189b      	adds	r3, r3, r2
 800459e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045a2:	464b      	mov	r3, r9
 80045a4:	460a      	mov	r2, r1
 80045a6:	eb42 0303 	adc.w	r3, r2, r3
 80045aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80045ba:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80045be:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80045c2:	460b      	mov	r3, r1
 80045c4:	18db      	adds	r3, r3, r3
 80045c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80045c8:	4613      	mov	r3, r2
 80045ca:	eb42 0303 	adc.w	r3, r2, r3
 80045ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045d4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80045d8:	f7fb fe54 	bl	8000284 <__aeabi_uldivmod>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	4b0e      	ldr	r3, [pc, #56]	; (800461c <UART_SetConfig+0x360>)
 80045e2:	fba3 1302 	umull	r1, r3, r3, r2
 80045e6:	095b      	lsrs	r3, r3, #5
 80045e8:	2164      	movs	r1, #100	; 0x64
 80045ea:	fb01 f303 	mul.w	r3, r1, r3
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	00db      	lsls	r3, r3, #3
 80045f2:	3332      	adds	r3, #50	; 0x32
 80045f4:	4a09      	ldr	r2, [pc, #36]	; (800461c <UART_SetConfig+0x360>)
 80045f6:	fba2 2303 	umull	r2, r3, r2, r3
 80045fa:	095b      	lsrs	r3, r3, #5
 80045fc:	f003 0207 	and.w	r2, r3, #7
 8004600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4422      	add	r2, r4
 8004608:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800460a:	e108      	b.n	800481e <UART_SetConfig+0x562>
 800460c:	00a037a0 	.word	0x00a037a0
 8004610:	0800906c 	.word	0x0800906c
 8004614:	40011000 	.word	0x40011000
 8004618:	40011400 	.word	0x40011400
 800461c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004624:	2200      	movs	r2, #0
 8004626:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800462a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800462e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004632:	4642      	mov	r2, r8
 8004634:	464b      	mov	r3, r9
 8004636:	1891      	adds	r1, r2, r2
 8004638:	6239      	str	r1, [r7, #32]
 800463a:	415b      	adcs	r3, r3
 800463c:	627b      	str	r3, [r7, #36]	; 0x24
 800463e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004642:	4641      	mov	r1, r8
 8004644:	1854      	adds	r4, r2, r1
 8004646:	4649      	mov	r1, r9
 8004648:	eb43 0501 	adc.w	r5, r3, r1
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	f04f 0300 	mov.w	r3, #0
 8004654:	00eb      	lsls	r3, r5, #3
 8004656:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800465a:	00e2      	lsls	r2, r4, #3
 800465c:	4614      	mov	r4, r2
 800465e:	461d      	mov	r5, r3
 8004660:	4643      	mov	r3, r8
 8004662:	18e3      	adds	r3, r4, r3
 8004664:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004668:	464b      	mov	r3, r9
 800466a:	eb45 0303 	adc.w	r3, r5, r3
 800466e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800467e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004682:	f04f 0200 	mov.w	r2, #0
 8004686:	f04f 0300 	mov.w	r3, #0
 800468a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800468e:	4629      	mov	r1, r5
 8004690:	008b      	lsls	r3, r1, #2
 8004692:	4621      	mov	r1, r4
 8004694:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004698:	4621      	mov	r1, r4
 800469a:	008a      	lsls	r2, r1, #2
 800469c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80046a0:	f7fb fdf0 	bl	8000284 <__aeabi_uldivmod>
 80046a4:	4602      	mov	r2, r0
 80046a6:	460b      	mov	r3, r1
 80046a8:	4b60      	ldr	r3, [pc, #384]	; (800482c <UART_SetConfig+0x570>)
 80046aa:	fba3 2302 	umull	r2, r3, r3, r2
 80046ae:	095b      	lsrs	r3, r3, #5
 80046b0:	011c      	lsls	r4, r3, #4
 80046b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046b6:	2200      	movs	r2, #0
 80046b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80046bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80046c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80046c4:	4642      	mov	r2, r8
 80046c6:	464b      	mov	r3, r9
 80046c8:	1891      	adds	r1, r2, r2
 80046ca:	61b9      	str	r1, [r7, #24]
 80046cc:	415b      	adcs	r3, r3
 80046ce:	61fb      	str	r3, [r7, #28]
 80046d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046d4:	4641      	mov	r1, r8
 80046d6:	1851      	adds	r1, r2, r1
 80046d8:	6139      	str	r1, [r7, #16]
 80046da:	4649      	mov	r1, r9
 80046dc:	414b      	adcs	r3, r1
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	f04f 0200 	mov.w	r2, #0
 80046e4:	f04f 0300 	mov.w	r3, #0
 80046e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046ec:	4659      	mov	r1, fp
 80046ee:	00cb      	lsls	r3, r1, #3
 80046f0:	4651      	mov	r1, sl
 80046f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046f6:	4651      	mov	r1, sl
 80046f8:	00ca      	lsls	r2, r1, #3
 80046fa:	4610      	mov	r0, r2
 80046fc:	4619      	mov	r1, r3
 80046fe:	4603      	mov	r3, r0
 8004700:	4642      	mov	r2, r8
 8004702:	189b      	adds	r3, r3, r2
 8004704:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004708:	464b      	mov	r3, r9
 800470a:	460a      	mov	r2, r1
 800470c:	eb42 0303 	adc.w	r3, r2, r3
 8004710:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	67bb      	str	r3, [r7, #120]	; 0x78
 800471e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004720:	f04f 0200 	mov.w	r2, #0
 8004724:	f04f 0300 	mov.w	r3, #0
 8004728:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800472c:	4649      	mov	r1, r9
 800472e:	008b      	lsls	r3, r1, #2
 8004730:	4641      	mov	r1, r8
 8004732:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004736:	4641      	mov	r1, r8
 8004738:	008a      	lsls	r2, r1, #2
 800473a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800473e:	f7fb fda1 	bl	8000284 <__aeabi_uldivmod>
 8004742:	4602      	mov	r2, r0
 8004744:	460b      	mov	r3, r1
 8004746:	4b39      	ldr	r3, [pc, #228]	; (800482c <UART_SetConfig+0x570>)
 8004748:	fba3 1302 	umull	r1, r3, r3, r2
 800474c:	095b      	lsrs	r3, r3, #5
 800474e:	2164      	movs	r1, #100	; 0x64
 8004750:	fb01 f303 	mul.w	r3, r1, r3
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	3332      	adds	r3, #50	; 0x32
 800475a:	4a34      	ldr	r2, [pc, #208]	; (800482c <UART_SetConfig+0x570>)
 800475c:	fba2 2303 	umull	r2, r3, r2, r3
 8004760:	095b      	lsrs	r3, r3, #5
 8004762:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004766:	441c      	add	r4, r3
 8004768:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800476c:	2200      	movs	r2, #0
 800476e:	673b      	str	r3, [r7, #112]	; 0x70
 8004770:	677a      	str	r2, [r7, #116]	; 0x74
 8004772:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004776:	4642      	mov	r2, r8
 8004778:	464b      	mov	r3, r9
 800477a:	1891      	adds	r1, r2, r2
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	415b      	adcs	r3, r3
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004786:	4641      	mov	r1, r8
 8004788:	1851      	adds	r1, r2, r1
 800478a:	6039      	str	r1, [r7, #0]
 800478c:	4649      	mov	r1, r9
 800478e:	414b      	adcs	r3, r1
 8004790:	607b      	str	r3, [r7, #4]
 8004792:	f04f 0200 	mov.w	r2, #0
 8004796:	f04f 0300 	mov.w	r3, #0
 800479a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800479e:	4659      	mov	r1, fp
 80047a0:	00cb      	lsls	r3, r1, #3
 80047a2:	4651      	mov	r1, sl
 80047a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047a8:	4651      	mov	r1, sl
 80047aa:	00ca      	lsls	r2, r1, #3
 80047ac:	4610      	mov	r0, r2
 80047ae:	4619      	mov	r1, r3
 80047b0:	4603      	mov	r3, r0
 80047b2:	4642      	mov	r2, r8
 80047b4:	189b      	adds	r3, r3, r2
 80047b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80047b8:	464b      	mov	r3, r9
 80047ba:	460a      	mov	r2, r1
 80047bc:	eb42 0303 	adc.w	r3, r2, r3
 80047c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	663b      	str	r3, [r7, #96]	; 0x60
 80047cc:	667a      	str	r2, [r7, #100]	; 0x64
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	f04f 0300 	mov.w	r3, #0
 80047d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80047da:	4649      	mov	r1, r9
 80047dc:	008b      	lsls	r3, r1, #2
 80047de:	4641      	mov	r1, r8
 80047e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047e4:	4641      	mov	r1, r8
 80047e6:	008a      	lsls	r2, r1, #2
 80047e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80047ec:	f7fb fd4a 	bl	8000284 <__aeabi_uldivmod>
 80047f0:	4602      	mov	r2, r0
 80047f2:	460b      	mov	r3, r1
 80047f4:	4b0d      	ldr	r3, [pc, #52]	; (800482c <UART_SetConfig+0x570>)
 80047f6:	fba3 1302 	umull	r1, r3, r3, r2
 80047fa:	095b      	lsrs	r3, r3, #5
 80047fc:	2164      	movs	r1, #100	; 0x64
 80047fe:	fb01 f303 	mul.w	r3, r1, r3
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	011b      	lsls	r3, r3, #4
 8004806:	3332      	adds	r3, #50	; 0x32
 8004808:	4a08      	ldr	r2, [pc, #32]	; (800482c <UART_SetConfig+0x570>)
 800480a:	fba2 2303 	umull	r2, r3, r2, r3
 800480e:	095b      	lsrs	r3, r3, #5
 8004810:	f003 020f 	and.w	r2, r3, #15
 8004814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4422      	add	r2, r4
 800481c:	609a      	str	r2, [r3, #8]
}
 800481e:	bf00      	nop
 8004820:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004824:	46bd      	mov	sp, r7
 8004826:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800482a:	bf00      	nop
 800482c:	51eb851f 	.word	0x51eb851f

08004830 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f103 0208 	add.w	r2, r3, #8
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f04f 32ff 	mov.w	r2, #4294967295
 8004848:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f103 0208 	add.w	r2, r3, #8
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f103 0208 	add.w	r2, r3, #8
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800488a:	b480      	push	{r7}
 800488c:	b085      	sub	sp, #20
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
 8004892:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	1c5a      	adds	r2, r3, #1
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	601a      	str	r2, [r3, #0]
}
 80048c6:	bf00      	nop
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80048d2:	b480      	push	{r7}
 80048d4:	b085      	sub	sp, #20
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
 80048da:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e8:	d103      	bne.n	80048f2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	e00c      	b.n	800490c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	3308      	adds	r3, #8
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	e002      	b.n	8004900 <vListInsert+0x2e>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	429a      	cmp	r2, r3
 800490a:	d2f6      	bcs.n	80048fa <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	1c5a      	adds	r2, r3, #1
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	601a      	str	r2, [r3, #0]
}
 8004938:	bf00      	nop
 800493a:	3714      	adds	r7, #20
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	6892      	ldr	r2, [r2, #8]
 800495a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6852      	ldr	r2, [r2, #4]
 8004964:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	429a      	cmp	r2, r3
 800496e:	d103      	bne.n	8004978 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	1e5a      	subs	r2, r3, #1
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10a      	bne.n	80049c2 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80049ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b0:	f383 8811 	msr	BASEPRI, r3
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80049be:	bf00      	nop
 80049c0:	e7fe      	b.n	80049c0 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80049c2:	f002 f8a1 	bl	8006b08 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ce:	68f9      	ldr	r1, [r7, #12]
 80049d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049d2:	fb01 f303 	mul.w	r3, r1, r3
 80049d6:	441a      	add	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f2:	3b01      	subs	r3, #1
 80049f4:	68f9      	ldr	r1, [r7, #12]
 80049f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049f8:	fb01 f303 	mul.w	r3, r1, r3
 80049fc:	441a      	add	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	22ff      	movs	r2, #255	; 0xff
 8004a06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	22ff      	movs	r2, #255	; 0xff
 8004a0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d114      	bne.n	8004a42 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d01a      	beq.n	8004a56 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	3310      	adds	r3, #16
 8004a24:	4618      	mov	r0, r3
 8004a26:	f001 f91f 	bl	8005c68 <xTaskRemoveFromEventList>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d012      	beq.n	8004a56 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8004a30:	4b0c      	ldr	r3, [pc, #48]	; (8004a64 <xQueueGenericReset+0xcc>)
 8004a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	f3bf 8f6f 	isb	sy
 8004a40:	e009      	b.n	8004a56 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	3310      	adds	r3, #16
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7ff fef2 	bl	8004830 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	3324      	adds	r3, #36	; 0x24
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7ff feed 	bl	8004830 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8004a56:	f002 f887 	bl	8006b68 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8004a5a:	2301      	movs	r3, #1
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	e000ed04 	.word	0xe000ed04

08004a68 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b08c      	sub	sp, #48	; 0x30
 8004a6c:	af02      	add	r7, sp, #8
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	4613      	mov	r3, r2
 8004a74:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10a      	bne.n	8004a92 <xQueueGenericCreate+0x2a>
        __asm volatile
 8004a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a80:	f383 8811 	msr	BASEPRI, r3
 8004a84:	f3bf 8f6f 	isb	sy
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	61bb      	str	r3, [r7, #24]
    }
 8004a8e:	bf00      	nop
 8004a90:	e7fe      	b.n	8004a90 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	fb02 f303 	mul.w	r3, r2, r3
 8004a9a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d006      	beq.n	8004ab0 <xQueueGenericCreate+0x48>
 8004aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d101      	bne.n	8004ab4 <xQueueGenericCreate+0x4c>
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e000      	b.n	8004ab6 <xQueueGenericCreate+0x4e>
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10a      	bne.n	8004ad0 <xQueueGenericCreate+0x68>
        __asm volatile
 8004aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abe:	f383 8811 	msr	BASEPRI, r3
 8004ac2:	f3bf 8f6f 	isb	sy
 8004ac6:	f3bf 8f4f 	dsb	sy
 8004aca:	617b      	str	r3, [r7, #20]
    }
 8004acc:	bf00      	nop
 8004ace:	e7fe      	b.n	8004ace <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8004ad6:	d90a      	bls.n	8004aee <xQueueGenericCreate+0x86>
        __asm volatile
 8004ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004adc:	f383 8811 	msr	BASEPRI, r3
 8004ae0:	f3bf 8f6f 	isb	sy
 8004ae4:	f3bf 8f4f 	dsb	sy
 8004ae8:	613b      	str	r3, [r7, #16]
    }
 8004aea:	bf00      	nop
 8004aec:	e7fe      	b.n	8004aec <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	3350      	adds	r3, #80	; 0x50
 8004af2:	4618      	mov	r0, r3
 8004af4:	f002 f932 	bl	8006d5c <pvPortMalloc>
 8004af8:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8004afa:	6a3b      	ldr	r3, [r7, #32]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00d      	beq.n	8004b1c <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004b00:	6a3b      	ldr	r3, [r7, #32]
 8004b02:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	3350      	adds	r3, #80	; 0x50
 8004b08:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b0a:	79fa      	ldrb	r2, [r7, #7]
 8004b0c:	6a3b      	ldr	r3, [r7, #32]
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	4613      	mov	r3, r2
 8004b12:	69fa      	ldr	r2, [r7, #28]
 8004b14:	68b9      	ldr	r1, [r7, #8]
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f000 f805 	bl	8004b26 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
    }
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3728      	adds	r7, #40	; 0x28
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b084      	sub	sp, #16
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	60f8      	str	r0, [r7, #12]
 8004b2e:	60b9      	str	r1, [r7, #8]
 8004b30:	607a      	str	r2, [r7, #4]
 8004b32:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d103      	bne.n	8004b42 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	e002      	b.n	8004b48 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b54:	2101      	movs	r1, #1
 8004b56:	69b8      	ldr	r0, [r7, #24]
 8004b58:	f7ff ff1e 	bl	8004998 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	78fa      	ldrb	r2, [r7, #3]
 8004b60:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8004b64:	78fb      	ldrb	r3, [r7, #3]
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	68f9      	ldr	r1, [r7, #12]
 8004b6a:	2073      	movs	r0, #115	; 0x73
 8004b6c:	f003 f916 	bl	8007d9c <SEGGER_SYSVIEW_RecordU32x3>
}
 8004b70:	bf00      	nop
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b090      	sub	sp, #64	; 0x40
 8004b7c:	af02      	add	r7, sp, #8
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
 8004b84:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b86:	2300      	movs	r3, #0
 8004b88:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10a      	bne.n	8004baa <xQueueGenericSend+0x32>
        __asm volatile
 8004b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b98:	f383 8811 	msr	BASEPRI, r3
 8004b9c:	f3bf 8f6f 	isb	sy
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004ba6:	bf00      	nop
 8004ba8:	e7fe      	b.n	8004ba8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d103      	bne.n	8004bb8 <xQueueGenericSend+0x40>
 8004bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <xQueueGenericSend+0x44>
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e000      	b.n	8004bbe <xQueueGenericSend+0x46>
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10a      	bne.n	8004bd8 <xQueueGenericSend+0x60>
        __asm volatile
 8004bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc6:	f383 8811 	msr	BASEPRI, r3
 8004bca:	f3bf 8f6f 	isb	sy
 8004bce:	f3bf 8f4f 	dsb	sy
 8004bd2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004bd4:	bf00      	nop
 8004bd6:	e7fe      	b.n	8004bd6 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d103      	bne.n	8004be6 <xQueueGenericSend+0x6e>
 8004bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d101      	bne.n	8004bea <xQueueGenericSend+0x72>
 8004be6:	2301      	movs	r3, #1
 8004be8:	e000      	b.n	8004bec <xQueueGenericSend+0x74>
 8004bea:	2300      	movs	r3, #0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10a      	bne.n	8004c06 <xQueueGenericSend+0x8e>
        __asm volatile
 8004bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf4:	f383 8811 	msr	BASEPRI, r3
 8004bf8:	f3bf 8f6f 	isb	sy
 8004bfc:	f3bf 8f4f 	dsb	sy
 8004c00:	623b      	str	r3, [r7, #32]
    }
 8004c02:	bf00      	nop
 8004c04:	e7fe      	b.n	8004c04 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c06:	f001 f9cf 	bl	8005fa8 <xTaskGetSchedulerState>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d102      	bne.n	8004c16 <xQueueGenericSend+0x9e>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <xQueueGenericSend+0xa2>
 8004c16:	2301      	movs	r3, #1
 8004c18:	e000      	b.n	8004c1c <xQueueGenericSend+0xa4>
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10a      	bne.n	8004c36 <xQueueGenericSend+0xbe>
        __asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	61fb      	str	r3, [r7, #28]
    }
 8004c32:	bf00      	nop
 8004c34:	e7fe      	b.n	8004c34 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004c36:	f001 ff67 	bl	8006b08 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d302      	bcc.n	8004c4c <xQueueGenericSend+0xd4>
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d136      	bne.n	8004cba <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8004c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f003 fe30 	bl	80088b4 <SEGGER_SYSVIEW_ShrinkId>
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	6879      	ldr	r1, [r7, #4]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	9300      	str	r3, [sp, #0]
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	4601      	mov	r1, r0
 8004c60:	205a      	movs	r0, #90	; 0x5a
 8004c62:	f003 f911 	bl	8007e88 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	68b9      	ldr	r1, [r7, #8]
 8004c6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c6c:	f000 fa78 	bl	8005160 <prvCopyDataToQueue>
 8004c70:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d010      	beq.n	8004c9c <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7c:	3324      	adds	r3, #36	; 0x24
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 fff2 	bl	8005c68 <xTaskRemoveFromEventList>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d013      	beq.n	8004cb2 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8004c8a:	4b4d      	ldr	r3, [pc, #308]	; (8004dc0 <xQueueGenericSend+0x248>)
 8004c8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	f3bf 8f4f 	dsb	sy
 8004c96:	f3bf 8f6f 	isb	sy
 8004c9a:	e00a      	b.n	8004cb2 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8004c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d007      	beq.n	8004cb2 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004ca2:	4b47      	ldr	r3, [pc, #284]	; (8004dc0 <xQueueGenericSend+0x248>)
 8004ca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	f3bf 8f4f 	dsb	sy
 8004cae:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004cb2:	f001 ff59 	bl	8006b68 <vPortExitCritical>
                return pdPASS;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e07d      	b.n	8004db6 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d110      	bne.n	8004ce2 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004cc0:	f001 ff52 	bl	8006b68 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8004cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f003 fdf4 	bl	80088b4 <SEGGER_SYSVIEW_ShrinkId>
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	6879      	ldr	r1, [r7, #4]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	9300      	str	r3, [sp, #0]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	4601      	mov	r1, r0
 8004cd8:	205a      	movs	r0, #90	; 0x5a
 8004cda:	f003 f8d5 	bl	8007e88 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	e069      	b.n	8004db6 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d106      	bne.n	8004cf6 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004ce8:	f107 0314 	add.w	r3, r7, #20
 8004cec:	4618      	mov	r0, r3
 8004cee:	f001 f821 	bl	8005d34 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004cf6:	f001 ff37 	bl	8006b68 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004cfa:	f000 fd6d 	bl	80057d8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004cfe:	f001 ff03 	bl	8006b08 <vPortEnterCritical>
 8004d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d08:	b25b      	sxtb	r3, r3
 8004d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0e:	d103      	bne.n	8004d18 <xQueueGenericSend+0x1a0>
 8004d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d1e:	b25b      	sxtb	r3, r3
 8004d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d24:	d103      	bne.n	8004d2e <xQueueGenericSend+0x1b6>
 8004d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d2e:	f001 ff1b 	bl	8006b68 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d32:	1d3a      	adds	r2, r7, #4
 8004d34:	f107 0314 	add.w	r3, r7, #20
 8004d38:	4611      	mov	r1, r2
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f001 f810 	bl	8005d60 <xTaskCheckForTimeOut>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d124      	bne.n	8004d90 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d48:	f000 fb02 	bl	8005350 <prvIsQueueFull>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d018      	beq.n	8004d84 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d54:	3310      	adds	r3, #16
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	4611      	mov	r1, r2
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 ff32 	bl	8005bc4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004d60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d62:	f000 fa8d 	bl	8005280 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004d66:	f000 fd45 	bl	80057f4 <xTaskResumeAll>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f47f af62 	bne.w	8004c36 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8004d72:	4b13      	ldr	r3, [pc, #76]	; (8004dc0 <xQueueGenericSend+0x248>)
 8004d74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	f3bf 8f6f 	isb	sy
 8004d82:	e758      	b.n	8004c36 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004d84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d86:	f000 fa7b 	bl	8005280 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004d8a:	f000 fd33 	bl	80057f4 <xTaskResumeAll>
 8004d8e:	e752      	b.n	8004c36 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004d90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d92:	f000 fa75 	bl	8005280 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004d96:	f000 fd2d 	bl	80057f4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f003 fd89 	bl	80088b4 <SEGGER_SYSVIEW_ShrinkId>
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	6879      	ldr	r1, [r7, #4]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	460b      	mov	r3, r1
 8004dac:	4601      	mov	r1, r0
 8004dae:	205a      	movs	r0, #90	; 0x5a
 8004db0:	f003 f86a 	bl	8007e88 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8004db4:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3738      	adds	r7, #56	; 0x38
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	e000ed04 	.word	0xe000ed04

08004dc4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b090      	sub	sp, #64	; 0x40
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
 8004dd0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8004dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10a      	bne.n	8004df2 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8004ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de0:	f383 8811 	msr	BASEPRI, r3
 8004de4:	f3bf 8f6f 	isb	sy
 8004de8:	f3bf 8f4f 	dsb	sy
 8004dec:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004dee:	bf00      	nop
 8004df0:	e7fe      	b.n	8004df0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d103      	bne.n	8004e00 <xQueueGenericSendFromISR+0x3c>
 8004df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <xQueueGenericSendFromISR+0x40>
 8004e00:	2301      	movs	r3, #1
 8004e02:	e000      	b.n	8004e06 <xQueueGenericSendFromISR+0x42>
 8004e04:	2300      	movs	r3, #0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10a      	bne.n	8004e20 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8004e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0e:	f383 8811 	msr	BASEPRI, r3
 8004e12:	f3bf 8f6f 	isb	sy
 8004e16:	f3bf 8f4f 	dsb	sy
 8004e1a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004e1c:	bf00      	nop
 8004e1e:	e7fe      	b.n	8004e1e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d103      	bne.n	8004e2e <xQueueGenericSendFromISR+0x6a>
 8004e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d101      	bne.n	8004e32 <xQueueGenericSendFromISR+0x6e>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e000      	b.n	8004e34 <xQueueGenericSendFromISR+0x70>
 8004e32:	2300      	movs	r3, #0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d10a      	bne.n	8004e4e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8004e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3c:	f383 8811 	msr	BASEPRI, r3
 8004e40:	f3bf 8f6f 	isb	sy
 8004e44:	f3bf 8f4f 	dsb	sy
 8004e48:	623b      	str	r3, [r7, #32]
    }
 8004e4a:	bf00      	nop
 8004e4c:	e7fe      	b.n	8004e4c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e4e:	f001 ff45 	bl	8006cdc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8004e52:	f3ef 8211 	mrs	r2, BASEPRI
 8004e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5a:	f383 8811 	msr	BASEPRI, r3
 8004e5e:	f3bf 8f6f 	isb	sy
 8004e62:	f3bf 8f4f 	dsb	sy
 8004e66:	61fa      	str	r2, [r7, #28]
 8004e68:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8004e6a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e6c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d302      	bcc.n	8004e80 <xQueueGenericSendFromISR+0xbc>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d148      	bne.n	8004f12 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8e:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8004e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e92:	4618      	mov	r0, r3
 8004e94:	f003 fd0e 	bl	80088b4 <SEGGER_SYSVIEW_ShrinkId>
 8004e98:	4601      	mov	r1, r0
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	2060      	movs	r0, #96	; 0x60
 8004ea0:	f002 ff22 	bl	8007ce8 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	68b9      	ldr	r1, [r7, #8]
 8004ea8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004eaa:	f000 f959 	bl	8005160 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004eae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb6:	d112      	bne.n	8004ede <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d025      	beq.n	8004f0c <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec2:	3324      	adds	r3, #36	; 0x24
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 fecf 	bl	8005c68 <xTaskRemoveFromEventList>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d01d      	beq.n	8004f0c <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d01a      	beq.n	8004f0c <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	601a      	str	r2, [r3, #0]
 8004edc:	e016      	b.n	8004f0c <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8004ede:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004ee2:	2b7f      	cmp	r3, #127	; 0x7f
 8004ee4:	d10a      	bne.n	8004efc <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8004ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eea:	f383 8811 	msr	BASEPRI, r3
 8004eee:	f3bf 8f6f 	isb	sy
 8004ef2:	f3bf 8f4f 	dsb	sy
 8004ef6:	617b      	str	r3, [r7, #20]
    }
 8004ef8:	bf00      	nop
 8004efa:	e7fe      	b.n	8004efa <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004efc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004f00:	3301      	adds	r3, #1
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	b25a      	sxtb	r2, r3
 8004f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8004f10:	e00b      	b.n	8004f2a <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8004f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f14:	4618      	mov	r0, r3
 8004f16:	f003 fccd 	bl	80088b4 <SEGGER_SYSVIEW_ShrinkId>
 8004f1a:	4601      	mov	r1, r0
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	2060      	movs	r0, #96	; 0x60
 8004f22:	f002 fee1 	bl	8007ce8 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8004f26:	2300      	movs	r3, #0
 8004f28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004f34:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3740      	adds	r7, #64	; 0x40
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004f40:	b590      	push	{r4, r7, lr}
 8004f42:	b08f      	sub	sp, #60	; 0x3c
 8004f44:	af02      	add	r7, sp, #8
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10a      	bne.n	8004f70 <xQueueReceive+0x30>
        __asm volatile
 8004f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5e:	f383 8811 	msr	BASEPRI, r3
 8004f62:	f3bf 8f6f 	isb	sy
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	623b      	str	r3, [r7, #32]
    }
 8004f6c:	bf00      	nop
 8004f6e:	e7fe      	b.n	8004f6e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d103      	bne.n	8004f7e <xQueueReceive+0x3e>
 8004f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <xQueueReceive+0x42>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e000      	b.n	8004f84 <xQueueReceive+0x44>
 8004f82:	2300      	movs	r3, #0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10a      	bne.n	8004f9e <xQueueReceive+0x5e>
        __asm volatile
 8004f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8c:	f383 8811 	msr	BASEPRI, r3
 8004f90:	f3bf 8f6f 	isb	sy
 8004f94:	f3bf 8f4f 	dsb	sy
 8004f98:	61fb      	str	r3, [r7, #28]
    }
 8004f9a:	bf00      	nop
 8004f9c:	e7fe      	b.n	8004f9c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f9e:	f001 f803 	bl	8005fa8 <xTaskGetSchedulerState>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d102      	bne.n	8004fae <xQueueReceive+0x6e>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <xQueueReceive+0x72>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e000      	b.n	8004fb4 <xQueueReceive+0x74>
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d10a      	bne.n	8004fce <xQueueReceive+0x8e>
        __asm volatile
 8004fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbc:	f383 8811 	msr	BASEPRI, r3
 8004fc0:	f3bf 8f6f 	isb	sy
 8004fc4:	f3bf 8f4f 	dsb	sy
 8004fc8:	61bb      	str	r3, [r7, #24]
    }
 8004fca:	bf00      	nop
 8004fcc:	e7fe      	b.n	8004fcc <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004fce:	f001 fd9b 	bl	8006b08 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d02f      	beq.n	800503e <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004fde:	68b9      	ldr	r1, [r7, #8]
 8004fe0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fe2:	f000 f927 	bl	8005234 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8004fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f003 fc63 	bl	80088b4 <SEGGER_SYSVIEW_ShrinkId>
 8004fee:	4604      	mov	r4, r0
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	f003 fc5f 	bl	80088b4 <SEGGER_SYSVIEW_ShrinkId>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	9100      	str	r1, [sp, #0]
 8004ffe:	4621      	mov	r1, r4
 8005000:	205c      	movs	r0, #92	; 0x5c
 8005002:	f002 ff41 	bl	8007e88 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	1e5a      	subs	r2, r3, #1
 800500a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800500e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00f      	beq.n	8005036 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005018:	3310      	adds	r3, #16
 800501a:	4618      	mov	r0, r3
 800501c:	f000 fe24 	bl	8005c68 <xTaskRemoveFromEventList>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d007      	beq.n	8005036 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005026:	4b4d      	ldr	r3, [pc, #308]	; (800515c <xQueueReceive+0x21c>)
 8005028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	f3bf 8f4f 	dsb	sy
 8005032:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005036:	f001 fd97 	bl	8006b68 <vPortExitCritical>
                return pdPASS;
 800503a:	2301      	movs	r3, #1
 800503c:	e08a      	b.n	8005154 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d113      	bne.n	800506c <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005044:	f001 fd90 	bl	8006b68 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8005048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504a:	4618      	mov	r0, r3
 800504c:	f003 fc32 	bl	80088b4 <SEGGER_SYSVIEW_ShrinkId>
 8005050:	4604      	mov	r4, r0
 8005052:	2000      	movs	r0, #0
 8005054:	f003 fc2e 	bl	80088b4 <SEGGER_SYSVIEW_ShrinkId>
 8005058:	4602      	mov	r2, r0
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2101      	movs	r1, #1
 800505e:	9100      	str	r1, [sp, #0]
 8005060:	4621      	mov	r1, r4
 8005062:	205c      	movs	r0, #92	; 0x5c
 8005064:	f002 ff10 	bl	8007e88 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8005068:	2300      	movs	r3, #0
 800506a:	e073      	b.n	8005154 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 800506c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800506e:	2b00      	cmp	r3, #0
 8005070:	d106      	bne.n	8005080 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005072:	f107 0310 	add.w	r3, r7, #16
 8005076:	4618      	mov	r0, r3
 8005078:	f000 fe5c 	bl	8005d34 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800507c:	2301      	movs	r3, #1
 800507e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005080:	f001 fd72 	bl	8006b68 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005084:	f000 fba8 	bl	80057d8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005088:	f001 fd3e 	bl	8006b08 <vPortEnterCritical>
 800508c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005092:	b25b      	sxtb	r3, r3
 8005094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005098:	d103      	bne.n	80050a2 <xQueueReceive+0x162>
 800509a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509c:	2200      	movs	r2, #0
 800509e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050a8:	b25b      	sxtb	r3, r3
 80050aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ae:	d103      	bne.n	80050b8 <xQueueReceive+0x178>
 80050b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050b8:	f001 fd56 	bl	8006b68 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050bc:	1d3a      	adds	r2, r7, #4
 80050be:	f107 0310 	add.w	r3, r7, #16
 80050c2:	4611      	mov	r1, r2
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 fe4b 	bl	8005d60 <xTaskCheckForTimeOut>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d124      	bne.n	800511a <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050d2:	f000 f927 	bl	8005324 <prvIsQueueEmpty>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d018      	beq.n	800510e <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80050dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050de:	3324      	adds	r3, #36	; 0x24
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	4611      	mov	r1, r2
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 fd6d 	bl	8005bc4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80050ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050ec:	f000 f8c8 	bl	8005280 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80050f0:	f000 fb80 	bl	80057f4 <xTaskResumeAll>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f47f af69 	bne.w	8004fce <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80050fc:	4b17      	ldr	r3, [pc, #92]	; (800515c <xQueueReceive+0x21c>)
 80050fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	f3bf 8f4f 	dsb	sy
 8005108:	f3bf 8f6f 	isb	sy
 800510c:	e75f      	b.n	8004fce <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800510e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005110:	f000 f8b6 	bl	8005280 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005114:	f000 fb6e 	bl	80057f4 <xTaskResumeAll>
 8005118:	e759      	b.n	8004fce <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800511a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800511c:	f000 f8b0 	bl	8005280 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005120:	f000 fb68 	bl	80057f4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005124:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005126:	f000 f8fd 	bl	8005324 <prvIsQueueEmpty>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	f43f af4e 	beq.w	8004fce <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8005132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005134:	4618      	mov	r0, r3
 8005136:	f003 fbbd 	bl	80088b4 <SEGGER_SYSVIEW_ShrinkId>
 800513a:	4604      	mov	r4, r0
 800513c:	2000      	movs	r0, #0
 800513e:	f003 fbb9 	bl	80088b4 <SEGGER_SYSVIEW_ShrinkId>
 8005142:	4602      	mov	r2, r0
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2101      	movs	r1, #1
 8005148:	9100      	str	r1, [sp, #0]
 800514a:	4621      	mov	r1, r4
 800514c:	205c      	movs	r0, #92	; 0x5c
 800514e:	f002 fe9b 	bl	8007e88 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8005152:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005154:	4618      	mov	r0, r3
 8005156:	3734      	adds	r7, #52	; 0x34
 8005158:	46bd      	mov	sp, r7
 800515a:	bd90      	pop	{r4, r7, pc}
 800515c:	e000ed04 	.word	0xe000ed04

08005160 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800516c:	2300      	movs	r3, #0
 800516e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005174:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10d      	bne.n	800519a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d14d      	bne.n	8005222 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	4618      	mov	r0, r3
 800518c:	f000 ff2a 	bl	8005fe4 <xTaskPriorityDisinherit>
 8005190:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	609a      	str	r2, [r3, #8]
 8005198:	e043      	b.n	8005222 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d119      	bne.n	80051d4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6858      	ldr	r0, [r3, #4]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a8:	461a      	mov	r2, r3
 80051aa:	68b9      	ldr	r1, [r7, #8]
 80051ac:	f003 fe4c 	bl	8008e48 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	685a      	ldr	r2, [r3, #4]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b8:	441a      	add	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	685a      	ldr	r2, [r3, #4]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d32b      	bcc.n	8005222 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	605a      	str	r2, [r3, #4]
 80051d2:	e026      	b.n	8005222 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	68d8      	ldr	r0, [r3, #12]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051dc:	461a      	mov	r2, r3
 80051de:	68b9      	ldr	r1, [r7, #8]
 80051e0:	f003 fe32 	bl	8008e48 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	68da      	ldr	r2, [r3, #12]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ec:	425b      	negs	r3, r3
 80051ee:	441a      	add	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	68da      	ldr	r2, [r3, #12]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d207      	bcs.n	8005210 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	689a      	ldr	r2, [r3, #8]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005208:	425b      	negs	r3, r3
 800520a:	441a      	add	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b02      	cmp	r3, #2
 8005214:	d105      	bne.n	8005222 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d002      	beq.n	8005222 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	3b01      	subs	r3, #1
 8005220:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1c5a      	adds	r2, r3, #1
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800522a:	697b      	ldr	r3, [r7, #20]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3718      	adds	r7, #24
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005242:	2b00      	cmp	r3, #0
 8005244:	d018      	beq.n	8005278 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68da      	ldr	r2, [r3, #12]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524e:	441a      	add	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	68da      	ldr	r2, [r3, #12]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	429a      	cmp	r2, r3
 800525e:	d303      	bcc.n	8005268 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	68d9      	ldr	r1, [r3, #12]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005270:	461a      	mov	r2, r3
 8005272:	6838      	ldr	r0, [r7, #0]
 8005274:	f003 fde8 	bl	8008e48 <memcpy>
    }
}
 8005278:	bf00      	nop
 800527a:	3708      	adds	r7, #8
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8005288:	f001 fc3e 	bl	8006b08 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005292:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005294:	e011      	b.n	80052ba <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529a:	2b00      	cmp	r3, #0
 800529c:	d012      	beq.n	80052c4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	3324      	adds	r3, #36	; 0x24
 80052a2:	4618      	mov	r0, r3
 80052a4:	f000 fce0 	bl	8005c68 <xTaskRemoveFromEventList>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80052ae:	f000 fdbd 	bl	8005e2c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80052b2:	7bfb      	ldrb	r3, [r7, #15]
 80052b4:	3b01      	subs	r3, #1
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80052ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	dce9      	bgt.n	8005296 <prvUnlockQueue+0x16>
 80052c2:	e000      	b.n	80052c6 <prvUnlockQueue+0x46>
                        break;
 80052c4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	22ff      	movs	r2, #255	; 0xff
 80052ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80052ce:	f001 fc4b 	bl	8006b68 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80052d2:	f001 fc19 	bl	8006b08 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052dc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80052de:	e011      	b.n	8005304 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d012      	beq.n	800530e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	3310      	adds	r3, #16
 80052ec:	4618      	mov	r0, r3
 80052ee:	f000 fcbb 	bl	8005c68 <xTaskRemoveFromEventList>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d001      	beq.n	80052fc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80052f8:	f000 fd98 	bl	8005e2c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80052fc:	7bbb      	ldrb	r3, [r7, #14]
 80052fe:	3b01      	subs	r3, #1
 8005300:	b2db      	uxtb	r3, r3
 8005302:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005304:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005308:	2b00      	cmp	r3, #0
 800530a:	dce9      	bgt.n	80052e0 <prvUnlockQueue+0x60>
 800530c:	e000      	b.n	8005310 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800530e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	22ff      	movs	r2, #255	; 0xff
 8005314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8005318:	f001 fc26 	bl	8006b68 <vPortExitCritical>
}
 800531c:	bf00      	nop
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800532c:	f001 fbec 	bl	8006b08 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005334:	2b00      	cmp	r3, #0
 8005336:	d102      	bne.n	800533e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005338:	2301      	movs	r3, #1
 800533a:	60fb      	str	r3, [r7, #12]
 800533c:	e001      	b.n	8005342 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800533e:	2300      	movs	r3, #0
 8005340:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005342:	f001 fc11 	bl	8006b68 <vPortExitCritical>

    return xReturn;
 8005346:	68fb      	ldr	r3, [r7, #12]
}
 8005348:	4618      	mov	r0, r3
 800534a:	3710      	adds	r7, #16
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005358:	f001 fbd6 	bl	8006b08 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005364:	429a      	cmp	r2, r3
 8005366:	d102      	bne.n	800536e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8005368:	2301      	movs	r3, #1
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	e001      	b.n	8005372 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800536e:	2300      	movs	r3, #0
 8005370:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005372:	f001 fbf9 	bl	8006b68 <vPortExitCritical>

    return xReturn;
 8005376:	68fb      	ldr	r3, [r7, #12]
}
 8005378:	4618      	mov	r0, r3
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800538a:	2300      	movs	r3, #0
 800538c:	60fb      	str	r3, [r7, #12]
 800538e:	e01e      	b.n	80053ce <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005390:	4a13      	ldr	r2, [pc, #76]	; (80053e0 <vQueueAddToRegistry+0x60>)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d115      	bne.n	80053c8 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800539c:	4910      	ldr	r1, [pc, #64]	; (80053e0 <vQueueAddToRegistry+0x60>)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	683a      	ldr	r2, [r7, #0]
 80053a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80053a6:	4a0e      	ldr	r2, [pc, #56]	; (80053e0 <vQueueAddToRegistry+0x60>)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	4413      	add	r3, r2
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4618      	mov	r0, r3
 80053b6:	f003 fa7d 	bl	80088b4 <SEGGER_SYSVIEW_ShrinkId>
 80053ba:	4601      	mov	r1, r0
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	461a      	mov	r2, r3
 80053c0:	2071      	movs	r0, #113	; 0x71
 80053c2:	f002 fc91 	bl	8007ce8 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 80053c6:	e006      	b.n	80053d6 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	3301      	adds	r3, #1
 80053cc:	60fb      	str	r3, [r7, #12]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2b07      	cmp	r3, #7
 80053d2:	d9dd      	bls.n	8005390 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80053d4:	bf00      	nop
 80053d6:	bf00      	nop
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	20000124 	.word	0x20000124

080053e4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80053f4:	f001 fb88 	bl	8006b08 <vPortEnterCritical>
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053fe:	b25b      	sxtb	r3, r3
 8005400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005404:	d103      	bne.n	800540e <vQueueWaitForMessageRestricted+0x2a>
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005414:	b25b      	sxtb	r3, r3
 8005416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541a:	d103      	bne.n	8005424 <vQueueWaitForMessageRestricted+0x40>
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005424:	f001 fba0 	bl	8006b68 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542c:	2b00      	cmp	r3, #0
 800542e:	d106      	bne.n	800543e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	3324      	adds	r3, #36	; 0x24
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	68b9      	ldr	r1, [r7, #8]
 8005438:	4618      	mov	r0, r3
 800543a:	f000 fbe7 	bl	8005c0c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800543e:	6978      	ldr	r0, [r7, #20]
 8005440:	f7ff ff1e 	bl	8005280 <prvUnlockQueue>
    }
 8005444:	bf00      	nop
 8005446:	3718      	adds	r7, #24
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800544c:	b580      	push	{r7, lr}
 800544e:	b08c      	sub	sp, #48	; 0x30
 8005450:	af04      	add	r7, sp, #16
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	603b      	str	r3, [r7, #0]
 8005458:	4613      	mov	r3, r2
 800545a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800545c:	88fb      	ldrh	r3, [r7, #6]
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4618      	mov	r0, r3
 8005462:	f001 fc7b 	bl	8006d5c <pvPortMalloc>
 8005466:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00e      	beq.n	800548c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800546e:	2058      	movs	r0, #88	; 0x58
 8005470:	f001 fc74 	bl	8006d5c <pvPortMalloc>
 8005474:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d003      	beq.n	8005484 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	631a      	str	r2, [r3, #48]	; 0x30
 8005482:	e005      	b.n	8005490 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8005484:	6978      	ldr	r0, [r7, #20]
 8005486:	f001 fd49 	bl	8006f1c <vPortFree>
 800548a:	e001      	b.n	8005490 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800548c:	2300      	movs	r3, #0
 800548e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d013      	beq.n	80054be <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005496:	88fa      	ldrh	r2, [r7, #6]
 8005498:	2300      	movs	r3, #0
 800549a:	9303      	str	r3, [sp, #12]
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	9302      	str	r3, [sp, #8]
 80054a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a2:	9301      	str	r3, [sp, #4]
 80054a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	68b9      	ldr	r1, [r7, #8]
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f000 f80e 	bl	80054ce <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80054b2:	69f8      	ldr	r0, [r7, #28]
 80054b4:	f000 f8a2 	bl	80055fc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80054b8:	2301      	movs	r3, #1
 80054ba:	61bb      	str	r3, [r7, #24]
 80054bc:	e002      	b.n	80054c4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80054be:	f04f 33ff 	mov.w	r3, #4294967295
 80054c2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80054c4:	69bb      	ldr	r3, [r7, #24]
    }
 80054c6:	4618      	mov	r0, r3
 80054c8:	3720      	adds	r7, #32
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b088      	sub	sp, #32
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	60f8      	str	r0, [r7, #12]
 80054d6:	60b9      	str	r1, [r7, #8]
 80054d8:	607a      	str	r2, [r7, #4]
 80054da:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80054dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054de:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	461a      	mov	r2, r3
 80054e6:	21a5      	movs	r1, #165	; 0xa5
 80054e8:	f003 fcbc 	bl	8008e64 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80054ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80054f6:	3b01      	subs	r3, #1
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4413      	add	r3, r2
 80054fc:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	f023 0307 	bic.w	r3, r3, #7
 8005504:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	f003 0307 	and.w	r3, r3, #7
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00a      	beq.n	8005526 <prvInitialiseNewTask+0x58>
        __asm volatile
 8005510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005514:	f383 8811 	msr	BASEPRI, r3
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	617b      	str	r3, [r7, #20]
    }
 8005522:	bf00      	nop
 8005524:	e7fe      	b.n	8005524 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d01f      	beq.n	800556c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800552c:	2300      	movs	r3, #0
 800552e:	61fb      	str	r3, [r7, #28]
 8005530:	e012      	b.n	8005558 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	4413      	add	r3, r2
 8005538:	7819      	ldrb	r1, [r3, #0]
 800553a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	4413      	add	r3, r2
 8005540:	3334      	adds	r3, #52	; 0x34
 8005542:	460a      	mov	r2, r1
 8005544:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	4413      	add	r3, r2
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d006      	beq.n	8005560 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	3301      	adds	r3, #1
 8005556:	61fb      	str	r3, [r7, #28]
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	2b09      	cmp	r3, #9
 800555c:	d9e9      	bls.n	8005532 <prvInitialiseNewTask+0x64>
 800555e:	e000      	b.n	8005562 <prvInitialiseNewTask+0x94>
            {
                break;
 8005560:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005564:	2200      	movs	r2, #0
 8005566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800556a:	e003      	b.n	8005574 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800556c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556e:	2200      	movs	r2, #0
 8005570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005576:	2b04      	cmp	r3, #4
 8005578:	d901      	bls.n	800557e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800557a:	2304      	movs	r3, #4
 800557c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800557e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005580:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005582:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8005584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005586:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005588:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800558a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558c:	2200      	movs	r2, #0
 800558e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005592:	3304      	adds	r3, #4
 8005594:	4618      	mov	r0, r3
 8005596:	f7ff f96b 	bl	8004870 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800559a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559c:	3318      	adds	r3, #24
 800559e:	4618      	mov	r0, r3
 80055a0:	f7ff f966 	bl	8004870 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80055a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055a8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ac:	f1c3 0205 	rsb	r2, r3, #5
 80055b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80055b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055b8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80055ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055bc:	3350      	adds	r3, #80	; 0x50
 80055be:	2204      	movs	r2, #4
 80055c0:	2100      	movs	r1, #0
 80055c2:	4618      	mov	r0, r3
 80055c4:	f003 fc4e 	bl	8008e64 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80055c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ca:	3354      	adds	r3, #84	; 0x54
 80055cc:	2201      	movs	r2, #1
 80055ce:	2100      	movs	r1, #0
 80055d0:	4618      	mov	r0, r3
 80055d2:	f003 fc47 	bl	8008e64 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055d6:	683a      	ldr	r2, [r7, #0]
 80055d8:	68f9      	ldr	r1, [r7, #12]
 80055da:	69b8      	ldr	r0, [r7, #24]
 80055dc:	f001 f968 	bl	80068b0 <pxPortInitialiseStack>
 80055e0:	4602      	mov	r2, r0
 80055e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80055e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d002      	beq.n	80055f2 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055f0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80055f2:	bf00      	nop
 80055f4:	3720      	adds	r7, #32
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
	...

080055fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80055fc:	b5b0      	push	{r4, r5, r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af02      	add	r7, sp, #8
 8005602:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005604:	f001 fa80 	bl	8006b08 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8005608:	4b3b      	ldr	r3, [pc, #236]	; (80056f8 <prvAddNewTaskToReadyList+0xfc>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3301      	adds	r3, #1
 800560e:	4a3a      	ldr	r2, [pc, #232]	; (80056f8 <prvAddNewTaskToReadyList+0xfc>)
 8005610:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8005612:	4b3a      	ldr	r3, [pc, #232]	; (80056fc <prvAddNewTaskToReadyList+0x100>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d109      	bne.n	800562e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800561a:	4a38      	ldr	r2, [pc, #224]	; (80056fc <prvAddNewTaskToReadyList+0x100>)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005620:	4b35      	ldr	r3, [pc, #212]	; (80056f8 <prvAddNewTaskToReadyList+0xfc>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d110      	bne.n	800564a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005628:	f000 fc24 	bl	8005e74 <prvInitialiseTaskLists>
 800562c:	e00d      	b.n	800564a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800562e:	4b34      	ldr	r3, [pc, #208]	; (8005700 <prvAddNewTaskToReadyList+0x104>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d109      	bne.n	800564a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005636:	4b31      	ldr	r3, [pc, #196]	; (80056fc <prvAddNewTaskToReadyList+0x100>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005640:	429a      	cmp	r2, r3
 8005642:	d802      	bhi.n	800564a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005644:	4a2d      	ldr	r2, [pc, #180]	; (80056fc <prvAddNewTaskToReadyList+0x100>)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800564a:	4b2e      	ldr	r3, [pc, #184]	; (8005704 <prvAddNewTaskToReadyList+0x108>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	3301      	adds	r3, #1
 8005650:	4a2c      	ldr	r2, [pc, #176]	; (8005704 <prvAddNewTaskToReadyList+0x108>)
 8005652:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005654:	4b2b      	ldr	r3, [pc, #172]	; (8005704 <prvAddNewTaskToReadyList+0x108>)
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d016      	beq.n	8005690 <prvAddNewTaskToReadyList+0x94>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4618      	mov	r0, r3
 8005666:	f002 ffff 	bl	8008668 <SEGGER_SYSVIEW_OnTaskCreate>
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567a:	461d      	mov	r5, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	461c      	mov	r4, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005686:	1ae3      	subs	r3, r4, r3
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	462b      	mov	r3, r5
 800568c:	f003 fb1e 	bl	8008ccc <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4618      	mov	r0, r3
 8005694:	f003 f86c 	bl	8008770 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569c:	2201      	movs	r2, #1
 800569e:	409a      	lsls	r2, r3
 80056a0:	4b19      	ldr	r3, [pc, #100]	; (8005708 <prvAddNewTaskToReadyList+0x10c>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	4a18      	ldr	r2, [pc, #96]	; (8005708 <prvAddNewTaskToReadyList+0x10c>)
 80056a8:	6013      	str	r3, [r2, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ae:	4613      	mov	r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4413      	add	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4a15      	ldr	r2, [pc, #84]	; (800570c <prvAddNewTaskToReadyList+0x110>)
 80056b8:	441a      	add	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	3304      	adds	r3, #4
 80056be:	4619      	mov	r1, r3
 80056c0:	4610      	mov	r0, r2
 80056c2:	f7ff f8e2 	bl	800488a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80056c6:	f001 fa4f 	bl	8006b68 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80056ca:	4b0d      	ldr	r3, [pc, #52]	; (8005700 <prvAddNewTaskToReadyList+0x104>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00e      	beq.n	80056f0 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80056d2:	4b0a      	ldr	r3, [pc, #40]	; (80056fc <prvAddNewTaskToReadyList+0x100>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056dc:	429a      	cmp	r2, r3
 80056de:	d207      	bcs.n	80056f0 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80056e0:	4b0b      	ldr	r3, [pc, #44]	; (8005710 <prvAddNewTaskToReadyList+0x114>)
 80056e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056e6:	601a      	str	r2, [r3, #0]
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80056f0:	bf00      	nop
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bdb0      	pop	{r4, r5, r7, pc}
 80056f8:	2000023c 	.word	0x2000023c
 80056fc:	20000164 	.word	0x20000164
 8005700:	20000248 	.word	0x20000248
 8005704:	20000258 	.word	0x20000258
 8005708:	20000244 	.word	0x20000244
 800570c:	20000168 	.word	0x20000168
 8005710:	e000ed04 	.word	0xe000ed04

08005714 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800571a:	4b27      	ldr	r3, [pc, #156]	; (80057b8 <vTaskStartScheduler+0xa4>)
 800571c:	9301      	str	r3, [sp, #4]
 800571e:	2300      	movs	r3, #0
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	2300      	movs	r3, #0
 8005724:	2282      	movs	r2, #130	; 0x82
 8005726:	4925      	ldr	r1, [pc, #148]	; (80057bc <vTaskStartScheduler+0xa8>)
 8005728:	4825      	ldr	r0, [pc, #148]	; (80057c0 <vTaskStartScheduler+0xac>)
 800572a:	f7ff fe8f 	bl	800544c <xTaskCreate>
 800572e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d102      	bne.n	800573c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8005736:	f000 fd4d 	bl	80061d4 <xTimerCreateTimerTask>
 800573a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d124      	bne.n	800578c <vTaskStartScheduler+0x78>
        __asm volatile
 8005742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005746:	f383 8811 	msr	BASEPRI, r3
 800574a:	f3bf 8f6f 	isb	sy
 800574e:	f3bf 8f4f 	dsb	sy
 8005752:	60bb      	str	r3, [r7, #8]
    }
 8005754:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8005756:	4b1b      	ldr	r3, [pc, #108]	; (80057c4 <vTaskStartScheduler+0xb0>)
 8005758:	f04f 32ff 	mov.w	r2, #4294967295
 800575c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800575e:	4b1a      	ldr	r3, [pc, #104]	; (80057c8 <vTaskStartScheduler+0xb4>)
 8005760:	2201      	movs	r2, #1
 8005762:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005764:	4b19      	ldr	r3, [pc, #100]	; (80057cc <vTaskStartScheduler+0xb8>)
 8005766:	2200      	movs	r2, #0
 8005768:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800576a:	4b19      	ldr	r3, [pc, #100]	; (80057d0 <vTaskStartScheduler+0xbc>)
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	4b12      	ldr	r3, [pc, #72]	; (80057b8 <vTaskStartScheduler+0xa4>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	429a      	cmp	r2, r3
 8005774:	d102      	bne.n	800577c <vTaskStartScheduler+0x68>
 8005776:	f002 ff5b 	bl	8008630 <SEGGER_SYSVIEW_OnIdle>
 800577a:	e004      	b.n	8005786 <vTaskStartScheduler+0x72>
 800577c:	4b14      	ldr	r3, [pc, #80]	; (80057d0 <vTaskStartScheduler+0xbc>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4618      	mov	r0, r3
 8005782:	f002 ffb3 	bl	80086ec <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8005786:	f001 f91d 	bl	80069c4 <xPortStartScheduler>
 800578a:	e00e      	b.n	80057aa <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005792:	d10a      	bne.n	80057aa <vTaskStartScheduler+0x96>
        __asm volatile
 8005794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005798:	f383 8811 	msr	BASEPRI, r3
 800579c:	f3bf 8f6f 	isb	sy
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	607b      	str	r3, [r7, #4]
    }
 80057a6:	bf00      	nop
 80057a8:	e7fe      	b.n	80057a8 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80057aa:	4b0a      	ldr	r3, [pc, #40]	; (80057d4 <vTaskStartScheduler+0xc0>)
 80057ac:	681b      	ldr	r3, [r3, #0]
}
 80057ae:	bf00      	nop
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	20000260 	.word	0x20000260
 80057bc:	080090a8 	.word	0x080090a8
 80057c0:	08005e45 	.word	0x08005e45
 80057c4:	2000025c 	.word	0x2000025c
 80057c8:	20000248 	.word	0x20000248
 80057cc:	20000240 	.word	0x20000240
 80057d0:	20000164 	.word	0x20000164
 80057d4:	20000008 	.word	0x20000008

080057d8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80057d8:	b480      	push	{r7}
 80057da:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80057dc:	4b04      	ldr	r3, [pc, #16]	; (80057f0 <vTaskSuspendAll+0x18>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	3301      	adds	r3, #1
 80057e2:	4a03      	ldr	r2, [pc, #12]	; (80057f0 <vTaskSuspendAll+0x18>)
 80057e4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80057e6:	bf00      	nop
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	20000264 	.word	0x20000264

080057f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80057fa:	2300      	movs	r3, #0
 80057fc:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80057fe:	2300      	movs	r3, #0
 8005800:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005802:	4b43      	ldr	r3, [pc, #268]	; (8005910 <xTaskResumeAll+0x11c>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10a      	bne.n	8005820 <xTaskResumeAll+0x2c>
        __asm volatile
 800580a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580e:	f383 8811 	msr	BASEPRI, r3
 8005812:	f3bf 8f6f 	isb	sy
 8005816:	f3bf 8f4f 	dsb	sy
 800581a:	603b      	str	r3, [r7, #0]
    }
 800581c:	bf00      	nop
 800581e:	e7fe      	b.n	800581e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005820:	f001 f972 	bl	8006b08 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005824:	4b3a      	ldr	r3, [pc, #232]	; (8005910 <xTaskResumeAll+0x11c>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	3b01      	subs	r3, #1
 800582a:	4a39      	ldr	r2, [pc, #228]	; (8005910 <xTaskResumeAll+0x11c>)
 800582c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800582e:	4b38      	ldr	r3, [pc, #224]	; (8005910 <xTaskResumeAll+0x11c>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d165      	bne.n	8005902 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005836:	4b37      	ldr	r3, [pc, #220]	; (8005914 <xTaskResumeAll+0x120>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d061      	beq.n	8005902 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800583e:	e032      	b.n	80058a6 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005840:	4b35      	ldr	r3, [pc, #212]	; (8005918 <xTaskResumeAll+0x124>)
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	3318      	adds	r3, #24
 800584c:	4618      	mov	r0, r3
 800584e:	f7ff f879 	bl	8004944 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	3304      	adds	r3, #4
 8005856:	4618      	mov	r0, r3
 8005858:	f7ff f874 	bl	8004944 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	4618      	mov	r0, r3
 8005860:	f002 ff86 	bl	8008770 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005868:	2201      	movs	r2, #1
 800586a:	409a      	lsls	r2, r3
 800586c:	4b2b      	ldr	r3, [pc, #172]	; (800591c <xTaskResumeAll+0x128>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4313      	orrs	r3, r2
 8005872:	4a2a      	ldr	r2, [pc, #168]	; (800591c <xTaskResumeAll+0x128>)
 8005874:	6013      	str	r3, [r2, #0]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800587a:	4613      	mov	r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4413      	add	r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	4a27      	ldr	r2, [pc, #156]	; (8005920 <xTaskResumeAll+0x12c>)
 8005884:	441a      	add	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	3304      	adds	r3, #4
 800588a:	4619      	mov	r1, r3
 800588c:	4610      	mov	r0, r2
 800588e:	f7fe fffc 	bl	800488a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005896:	4b23      	ldr	r3, [pc, #140]	; (8005924 <xTaskResumeAll+0x130>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589c:	429a      	cmp	r2, r3
 800589e:	d302      	bcc.n	80058a6 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80058a0:	4b21      	ldr	r3, [pc, #132]	; (8005928 <xTaskResumeAll+0x134>)
 80058a2:	2201      	movs	r2, #1
 80058a4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058a6:	4b1c      	ldr	r3, [pc, #112]	; (8005918 <xTaskResumeAll+0x124>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1c8      	bne.n	8005840 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d001      	beq.n	80058b8 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80058b4:	f000 fb5c 	bl	8005f70 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80058b8:	4b1c      	ldr	r3, [pc, #112]	; (800592c <xTaskResumeAll+0x138>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d010      	beq.n	80058e6 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80058c4:	f000 f858 	bl	8005978 <xTaskIncrementTick>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d002      	beq.n	80058d4 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80058ce:	4b16      	ldr	r3, [pc, #88]	; (8005928 <xTaskResumeAll+0x134>)
 80058d0:	2201      	movs	r2, #1
 80058d2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	3b01      	subs	r3, #1
 80058d8:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1f1      	bne.n	80058c4 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80058e0:	4b12      	ldr	r3, [pc, #72]	; (800592c <xTaskResumeAll+0x138>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80058e6:	4b10      	ldr	r3, [pc, #64]	; (8005928 <xTaskResumeAll+0x134>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d009      	beq.n	8005902 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80058ee:	2301      	movs	r3, #1
 80058f0:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80058f2:	4b0f      	ldr	r3, [pc, #60]	; (8005930 <xTaskResumeAll+0x13c>)
 80058f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058f8:	601a      	str	r2, [r3, #0]
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005902:	f001 f931 	bl	8006b68 <vPortExitCritical>

    return xAlreadyYielded;
 8005906:	68bb      	ldr	r3, [r7, #8]
}
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	20000264 	.word	0x20000264
 8005914:	2000023c 	.word	0x2000023c
 8005918:	200001fc 	.word	0x200001fc
 800591c:	20000244 	.word	0x20000244
 8005920:	20000168 	.word	0x20000168
 8005924:	20000164 	.word	0x20000164
 8005928:	20000250 	.word	0x20000250
 800592c:	2000024c 	.word	0x2000024c
 8005930:	e000ed04 	.word	0xe000ed04

08005934 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800593a:	4b05      	ldr	r3, [pc, #20]	; (8005950 <xTaskGetTickCount+0x1c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005940:	687b      	ldr	r3, [r7, #4]
}
 8005942:	4618      	mov	r0, r3
 8005944:	370c      	adds	r7, #12
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	20000240 	.word	0x20000240

08005954 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800595a:	f001 f9bf 	bl	8006cdc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800595e:	2300      	movs	r3, #0
 8005960:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8005962:	4b04      	ldr	r3, [pc, #16]	; (8005974 <xTaskGetTickCountFromISR+0x20>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005968:	683b      	ldr	r3, [r7, #0]
}
 800596a:	4618      	mov	r0, r3
 800596c:	3708      	adds	r7, #8
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	20000240 	.word	0x20000240

08005978 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800597e:	2300      	movs	r3, #0
 8005980:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005982:	4b50      	ldr	r3, [pc, #320]	; (8005ac4 <xTaskIncrementTick+0x14c>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	f040 8092 	bne.w	8005ab0 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800598c:	4b4e      	ldr	r3, [pc, #312]	; (8005ac8 <xTaskIncrementTick+0x150>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	3301      	adds	r3, #1
 8005992:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005994:	4a4c      	ldr	r2, [pc, #304]	; (8005ac8 <xTaskIncrementTick+0x150>)
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d120      	bne.n	80059e2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80059a0:	4b4a      	ldr	r3, [pc, #296]	; (8005acc <xTaskIncrementTick+0x154>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00a      	beq.n	80059c0 <xTaskIncrementTick+0x48>
        __asm volatile
 80059aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ae:	f383 8811 	msr	BASEPRI, r3
 80059b2:	f3bf 8f6f 	isb	sy
 80059b6:	f3bf 8f4f 	dsb	sy
 80059ba:	603b      	str	r3, [r7, #0]
    }
 80059bc:	bf00      	nop
 80059be:	e7fe      	b.n	80059be <xTaskIncrementTick+0x46>
 80059c0:	4b42      	ldr	r3, [pc, #264]	; (8005acc <xTaskIncrementTick+0x154>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	60fb      	str	r3, [r7, #12]
 80059c6:	4b42      	ldr	r3, [pc, #264]	; (8005ad0 <xTaskIncrementTick+0x158>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a40      	ldr	r2, [pc, #256]	; (8005acc <xTaskIncrementTick+0x154>)
 80059cc:	6013      	str	r3, [r2, #0]
 80059ce:	4a40      	ldr	r2, [pc, #256]	; (8005ad0 <xTaskIncrementTick+0x158>)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6013      	str	r3, [r2, #0]
 80059d4:	4b3f      	ldr	r3, [pc, #252]	; (8005ad4 <xTaskIncrementTick+0x15c>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	3301      	adds	r3, #1
 80059da:	4a3e      	ldr	r2, [pc, #248]	; (8005ad4 <xTaskIncrementTick+0x15c>)
 80059dc:	6013      	str	r3, [r2, #0]
 80059de:	f000 fac7 	bl	8005f70 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80059e2:	4b3d      	ldr	r3, [pc, #244]	; (8005ad8 <xTaskIncrementTick+0x160>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d34c      	bcc.n	8005a86 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059ec:	4b37      	ldr	r3, [pc, #220]	; (8005acc <xTaskIncrementTick+0x154>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d104      	bne.n	8005a00 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059f6:	4b38      	ldr	r3, [pc, #224]	; (8005ad8 <xTaskIncrementTick+0x160>)
 80059f8:	f04f 32ff 	mov.w	r2, #4294967295
 80059fc:	601a      	str	r2, [r3, #0]
                    break;
 80059fe:	e042      	b.n	8005a86 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a00:	4b32      	ldr	r3, [pc, #200]	; (8005acc <xTaskIncrementTick+0x154>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d203      	bcs.n	8005a20 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005a18:	4a2f      	ldr	r2, [pc, #188]	; (8005ad8 <xTaskIncrementTick+0x160>)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a1e:	e032      	b.n	8005a86 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	3304      	adds	r3, #4
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7fe ff8d 	bl	8004944 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d004      	beq.n	8005a3c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	3318      	adds	r3, #24
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7fe ff84 	bl	8004944 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f002 fe96 	bl	8008770 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a48:	2201      	movs	r2, #1
 8005a4a:	409a      	lsls	r2, r3
 8005a4c:	4b23      	ldr	r3, [pc, #140]	; (8005adc <xTaskIncrementTick+0x164>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	4a22      	ldr	r2, [pc, #136]	; (8005adc <xTaskIncrementTick+0x164>)
 8005a54:	6013      	str	r3, [r2, #0]
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4413      	add	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4a1f      	ldr	r2, [pc, #124]	; (8005ae0 <xTaskIncrementTick+0x168>)
 8005a64:	441a      	add	r2, r3
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	3304      	adds	r3, #4
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	4610      	mov	r0, r2
 8005a6e:	f7fe ff0c 	bl	800488a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a76:	4b1b      	ldr	r3, [pc, #108]	; (8005ae4 <xTaskIncrementTick+0x16c>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d3b5      	bcc.n	80059ec <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8005a80:	2301      	movs	r3, #1
 8005a82:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a84:	e7b2      	b.n	80059ec <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a86:	4b17      	ldr	r3, [pc, #92]	; (8005ae4 <xTaskIncrementTick+0x16c>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a8c:	4914      	ldr	r1, [pc, #80]	; (8005ae0 <xTaskIncrementTick+0x168>)
 8005a8e:	4613      	mov	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	440b      	add	r3, r1
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d901      	bls.n	8005aa2 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8005aa2:	4b11      	ldr	r3, [pc, #68]	; (8005ae8 <xTaskIncrementTick+0x170>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d007      	beq.n	8005aba <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	617b      	str	r3, [r7, #20]
 8005aae:	e004      	b.n	8005aba <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005ab0:	4b0e      	ldr	r3, [pc, #56]	; (8005aec <xTaskIncrementTick+0x174>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	4a0d      	ldr	r2, [pc, #52]	; (8005aec <xTaskIncrementTick+0x174>)
 8005ab8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8005aba:	697b      	ldr	r3, [r7, #20]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3718      	adds	r7, #24
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	20000264 	.word	0x20000264
 8005ac8:	20000240 	.word	0x20000240
 8005acc:	200001f4 	.word	0x200001f4
 8005ad0:	200001f8 	.word	0x200001f8
 8005ad4:	20000254 	.word	0x20000254
 8005ad8:	2000025c 	.word	0x2000025c
 8005adc:	20000244 	.word	0x20000244
 8005ae0:	20000168 	.word	0x20000168
 8005ae4:	20000164 	.word	0x20000164
 8005ae8:	20000250 	.word	0x20000250
 8005aec:	2000024c 	.word	0x2000024c

08005af0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005af6:	4b2d      	ldr	r3, [pc, #180]	; (8005bac <vTaskSwitchContext+0xbc>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005afe:	4b2c      	ldr	r3, [pc, #176]	; (8005bb0 <vTaskSwitchContext+0xc0>)
 8005b00:	2201      	movs	r2, #1
 8005b02:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8005b04:	e04d      	b.n	8005ba2 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8005b06:	4b2a      	ldr	r3, [pc, #168]	; (8005bb0 <vTaskSwitchContext+0xc0>)
 8005b08:	2200      	movs	r2, #0
 8005b0a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b0c:	4b29      	ldr	r3, [pc, #164]	; (8005bb4 <vTaskSwitchContext+0xc4>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	fab3 f383 	clz	r3, r3
 8005b18:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005b1a:	7afb      	ldrb	r3, [r7, #11]
 8005b1c:	f1c3 031f 	rsb	r3, r3, #31
 8005b20:	617b      	str	r3, [r7, #20]
 8005b22:	4925      	ldr	r1, [pc, #148]	; (8005bb8 <vTaskSwitchContext+0xc8>)
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	4613      	mov	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4413      	add	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	440b      	add	r3, r1
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10a      	bne.n	8005b4c <vTaskSwitchContext+0x5c>
        __asm volatile
 8005b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3a:	f383 8811 	msr	BASEPRI, r3
 8005b3e:	f3bf 8f6f 	isb	sy
 8005b42:	f3bf 8f4f 	dsb	sy
 8005b46:	607b      	str	r3, [r7, #4]
    }
 8005b48:	bf00      	nop
 8005b4a:	e7fe      	b.n	8005b4a <vTaskSwitchContext+0x5a>
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4a18      	ldr	r2, [pc, #96]	; (8005bb8 <vTaskSwitchContext+0xc8>)
 8005b58:	4413      	add	r3, r2
 8005b5a:	613b      	str	r3, [r7, #16]
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	605a      	str	r2, [r3, #4]
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	3308      	adds	r3, #8
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d104      	bne.n	8005b7c <vTaskSwitchContext+0x8c>
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	605a      	str	r2, [r3, #4]
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	4a0e      	ldr	r2, [pc, #56]	; (8005bbc <vTaskSwitchContext+0xcc>)
 8005b84:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8005b86:	4b0d      	ldr	r3, [pc, #52]	; (8005bbc <vTaskSwitchContext+0xcc>)
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	4b0d      	ldr	r3, [pc, #52]	; (8005bc0 <vTaskSwitchContext+0xd0>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d102      	bne.n	8005b98 <vTaskSwitchContext+0xa8>
 8005b92:	f002 fd4d 	bl	8008630 <SEGGER_SYSVIEW_OnIdle>
}
 8005b96:	e004      	b.n	8005ba2 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8005b98:	4b08      	ldr	r3, [pc, #32]	; (8005bbc <vTaskSwitchContext+0xcc>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f002 fda5 	bl	80086ec <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8005ba2:	bf00      	nop
 8005ba4:	3718      	adds	r7, #24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	20000264 	.word	0x20000264
 8005bb0:	20000250 	.word	0x20000250
 8005bb4:	20000244 	.word	0x20000244
 8005bb8:	20000168 	.word	0x20000168
 8005bbc:	20000164 	.word	0x20000164
 8005bc0:	20000260 	.word	0x20000260

08005bc4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10a      	bne.n	8005bea <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8005bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd8:	f383 8811 	msr	BASEPRI, r3
 8005bdc:	f3bf 8f6f 	isb	sy
 8005be0:	f3bf 8f4f 	dsb	sy
 8005be4:	60fb      	str	r3, [r7, #12]
    }
 8005be6:	bf00      	nop
 8005be8:	e7fe      	b.n	8005be8 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005bea:	4b07      	ldr	r3, [pc, #28]	; (8005c08 <vTaskPlaceOnEventList+0x44>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	3318      	adds	r3, #24
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7fe fe6d 	bl	80048d2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005bf8:	2101      	movs	r1, #1
 8005bfa:	6838      	ldr	r0, [r7, #0]
 8005bfc:	f000 fa72 	bl	80060e4 <prvAddCurrentTaskToDelayedList>
}
 8005c00:	bf00      	nop
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	20000164 	.word	0x20000164

08005c0c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10a      	bne.n	8005c34 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8005c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c22:	f383 8811 	msr	BASEPRI, r3
 8005c26:	f3bf 8f6f 	isb	sy
 8005c2a:	f3bf 8f4f 	dsb	sy
 8005c2e:	617b      	str	r3, [r7, #20]
    }
 8005c30:	bf00      	nop
 8005c32:	e7fe      	b.n	8005c32 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c34:	4b0b      	ldr	r3, [pc, #44]	; (8005c64 <vTaskPlaceOnEventListRestricted+0x58>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	3318      	adds	r3, #24
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f7fe fe24 	bl	800488a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d002      	beq.n	8005c4e <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8005c48:	f04f 33ff 	mov.w	r3, #4294967295
 8005c4c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8005c4e:	2024      	movs	r0, #36	; 0x24
 8005c50:	f001 fff0 	bl	8007c34 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c54:	6879      	ldr	r1, [r7, #4]
 8005c56:	68b8      	ldr	r0, [r7, #8]
 8005c58:	f000 fa44 	bl	80060e4 <prvAddCurrentTaskToDelayedList>
    }
 8005c5c:	bf00      	nop
 8005c5e:	3718      	adds	r7, #24
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	20000164 	.word	0x20000164

08005c68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10a      	bne.n	8005c94 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8005c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	60fb      	str	r3, [r7, #12]
    }
 8005c90:	bf00      	nop
 8005c92:	e7fe      	b.n	8005c92 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	3318      	adds	r3, #24
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7fe fe53 	bl	8004944 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c9e:	4b1f      	ldr	r3, [pc, #124]	; (8005d1c <xTaskRemoveFromEventList+0xb4>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d120      	bne.n	8005ce8 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	3304      	adds	r3, #4
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fe fe4a 	bl	8004944 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f002 fd5c 	bl	8008770 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	409a      	lsls	r2, r3
 8005cc0:	4b17      	ldr	r3, [pc, #92]	; (8005d20 <xTaskRemoveFromEventList+0xb8>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	4a16      	ldr	r2, [pc, #88]	; (8005d20 <xTaskRemoveFromEventList+0xb8>)
 8005cc8:	6013      	str	r3, [r2, #0]
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cce:	4613      	mov	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4a13      	ldr	r2, [pc, #76]	; (8005d24 <xTaskRemoveFromEventList+0xbc>)
 8005cd8:	441a      	add	r2, r3
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	3304      	adds	r3, #4
 8005cde:	4619      	mov	r1, r3
 8005ce0:	4610      	mov	r0, r2
 8005ce2:	f7fe fdd2 	bl	800488a <vListInsertEnd>
 8005ce6:	e005      	b.n	8005cf4 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	3318      	adds	r3, #24
 8005cec:	4619      	mov	r1, r3
 8005cee:	480e      	ldr	r0, [pc, #56]	; (8005d28 <xTaskRemoveFromEventList+0xc0>)
 8005cf0:	f7fe fdcb 	bl	800488a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf8:	4b0c      	ldr	r3, [pc, #48]	; (8005d2c <xTaskRemoveFromEventList+0xc4>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d905      	bls.n	8005d0e <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005d02:	2301      	movs	r3, #1
 8005d04:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005d06:	4b0a      	ldr	r3, [pc, #40]	; (8005d30 <xTaskRemoveFromEventList+0xc8>)
 8005d08:	2201      	movs	r2, #1
 8005d0a:	601a      	str	r2, [r3, #0]
 8005d0c:	e001      	b.n	8005d12 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005d12:	697b      	ldr	r3, [r7, #20]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3718      	adds	r7, #24
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	20000264 	.word	0x20000264
 8005d20:	20000244 	.word	0x20000244
 8005d24:	20000168 	.word	0x20000168
 8005d28:	200001fc 	.word	0x200001fc
 8005d2c:	20000164 	.word	0x20000164
 8005d30:	20000250 	.word	0x20000250

08005d34 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d3c:	4b06      	ldr	r3, [pc, #24]	; (8005d58 <vTaskInternalSetTimeOutState+0x24>)
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005d44:	4b05      	ldr	r3, [pc, #20]	; (8005d5c <vTaskInternalSetTimeOutState+0x28>)
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	605a      	str	r2, [r3, #4]
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr
 8005d58:	20000254 	.word	0x20000254
 8005d5c:	20000240 	.word	0x20000240

08005d60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b088      	sub	sp, #32
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10a      	bne.n	8005d86 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8005d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d74:	f383 8811 	msr	BASEPRI, r3
 8005d78:	f3bf 8f6f 	isb	sy
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	613b      	str	r3, [r7, #16]
    }
 8005d82:	bf00      	nop
 8005d84:	e7fe      	b.n	8005d84 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10a      	bne.n	8005da2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8005d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d90:	f383 8811 	msr	BASEPRI, r3
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	f3bf 8f4f 	dsb	sy
 8005d9c:	60fb      	str	r3, [r7, #12]
    }
 8005d9e:	bf00      	nop
 8005da0:	e7fe      	b.n	8005da0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8005da2:	f000 feb1 	bl	8006b08 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005da6:	4b1f      	ldr	r3, [pc, #124]	; (8005e24 <xTaskCheckForTimeOut+0xc4>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	69ba      	ldr	r2, [r7, #24]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dbe:	d102      	bne.n	8005dc6 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	61fb      	str	r3, [r7, #28]
 8005dc4:	e026      	b.n	8005e14 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	4b17      	ldr	r3, [pc, #92]	; (8005e28 <xTaskCheckForTimeOut+0xc8>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d00a      	beq.n	8005de8 <xTaskCheckForTimeOut+0x88>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	69ba      	ldr	r2, [r7, #24]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d305      	bcc.n	8005de8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	2200      	movs	r2, #0
 8005de4:	601a      	str	r2, [r3, #0]
 8005de6:	e015      	b.n	8005e14 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d20b      	bcs.n	8005e0a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	1ad2      	subs	r2, r2, r3
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7ff ff98 	bl	8005d34 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005e04:	2300      	movs	r3, #0
 8005e06:	61fb      	str	r3, [r7, #28]
 8005e08:	e004      	b.n	8005e14 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005e10:	2301      	movs	r3, #1
 8005e12:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005e14:	f000 fea8 	bl	8006b68 <vPortExitCritical>

    return xReturn;
 8005e18:	69fb      	ldr	r3, [r7, #28]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3720      	adds	r7, #32
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	20000240 	.word	0x20000240
 8005e28:	20000254 	.word	0x20000254

08005e2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005e30:	4b03      	ldr	r3, [pc, #12]	; (8005e40 <vTaskMissedYield+0x14>)
 8005e32:	2201      	movs	r2, #1
 8005e34:	601a      	str	r2, [r3, #0]
}
 8005e36:	bf00      	nop
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	20000250 	.word	0x20000250

08005e44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005e4c:	f000 f852 	bl	8005ef4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e50:	4b06      	ldr	r3, [pc, #24]	; (8005e6c <prvIdleTask+0x28>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d9f9      	bls.n	8005e4c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8005e58:	4b05      	ldr	r3, [pc, #20]	; (8005e70 <prvIdleTask+0x2c>)
 8005e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e5e:	601a      	str	r2, [r3, #0]
 8005e60:	f3bf 8f4f 	dsb	sy
 8005e64:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005e68:	e7f0      	b.n	8005e4c <prvIdleTask+0x8>
 8005e6a:	bf00      	nop
 8005e6c:	20000168 	.word	0x20000168
 8005e70:	e000ed04 	.word	0xe000ed04

08005e74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	607b      	str	r3, [r7, #4]
 8005e7e:	e00c      	b.n	8005e9a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	4613      	mov	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4413      	add	r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4a12      	ldr	r2, [pc, #72]	; (8005ed4 <prvInitialiseTaskLists+0x60>)
 8005e8c:	4413      	add	r3, r2
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7fe fcce 	bl	8004830 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	3301      	adds	r3, #1
 8005e98:	607b      	str	r3, [r7, #4]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2b04      	cmp	r3, #4
 8005e9e:	d9ef      	bls.n	8005e80 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005ea0:	480d      	ldr	r0, [pc, #52]	; (8005ed8 <prvInitialiseTaskLists+0x64>)
 8005ea2:	f7fe fcc5 	bl	8004830 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005ea6:	480d      	ldr	r0, [pc, #52]	; (8005edc <prvInitialiseTaskLists+0x68>)
 8005ea8:	f7fe fcc2 	bl	8004830 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005eac:	480c      	ldr	r0, [pc, #48]	; (8005ee0 <prvInitialiseTaskLists+0x6c>)
 8005eae:	f7fe fcbf 	bl	8004830 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8005eb2:	480c      	ldr	r0, [pc, #48]	; (8005ee4 <prvInitialiseTaskLists+0x70>)
 8005eb4:	f7fe fcbc 	bl	8004830 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8005eb8:	480b      	ldr	r0, [pc, #44]	; (8005ee8 <prvInitialiseTaskLists+0x74>)
 8005eba:	f7fe fcb9 	bl	8004830 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005ebe:	4b0b      	ldr	r3, [pc, #44]	; (8005eec <prvInitialiseTaskLists+0x78>)
 8005ec0:	4a05      	ldr	r2, [pc, #20]	; (8005ed8 <prvInitialiseTaskLists+0x64>)
 8005ec2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ec4:	4b0a      	ldr	r3, [pc, #40]	; (8005ef0 <prvInitialiseTaskLists+0x7c>)
 8005ec6:	4a05      	ldr	r2, [pc, #20]	; (8005edc <prvInitialiseTaskLists+0x68>)
 8005ec8:	601a      	str	r2, [r3, #0]
}
 8005eca:	bf00      	nop
 8005ecc:	3708      	adds	r7, #8
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	20000168 	.word	0x20000168
 8005ed8:	200001cc 	.word	0x200001cc
 8005edc:	200001e0 	.word	0x200001e0
 8005ee0:	200001fc 	.word	0x200001fc
 8005ee4:	20000210 	.word	0x20000210
 8005ee8:	20000228 	.word	0x20000228
 8005eec:	200001f4 	.word	0x200001f4
 8005ef0:	200001f8 	.word	0x200001f8

08005ef4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005efa:	e019      	b.n	8005f30 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8005efc:	f000 fe04 	bl	8006b08 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f00:	4b10      	ldr	r3, [pc, #64]	; (8005f44 <prvCheckTasksWaitingTermination+0x50>)
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	3304      	adds	r3, #4
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7fe fd19 	bl	8004944 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8005f12:	4b0d      	ldr	r3, [pc, #52]	; (8005f48 <prvCheckTasksWaitingTermination+0x54>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	3b01      	subs	r3, #1
 8005f18:	4a0b      	ldr	r2, [pc, #44]	; (8005f48 <prvCheckTasksWaitingTermination+0x54>)
 8005f1a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8005f1c:	4b0b      	ldr	r3, [pc, #44]	; (8005f4c <prvCheckTasksWaitingTermination+0x58>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	3b01      	subs	r3, #1
 8005f22:	4a0a      	ldr	r2, [pc, #40]	; (8005f4c <prvCheckTasksWaitingTermination+0x58>)
 8005f24:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8005f26:	f000 fe1f 	bl	8006b68 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f810 	bl	8005f50 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f30:	4b06      	ldr	r3, [pc, #24]	; (8005f4c <prvCheckTasksWaitingTermination+0x58>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1e1      	bne.n	8005efc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8005f38:	bf00      	nop
 8005f3a:	bf00      	nop
 8005f3c:	3708      	adds	r7, #8
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	20000210 	.word	0x20000210
 8005f48:	2000023c 	.word	0x2000023c
 8005f4c:	20000224 	.word	0x20000224

08005f50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f000 ffdd 	bl	8006f1c <vPortFree>
                vPortFree( pxTCB );
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 ffda 	bl	8006f1c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005f68:	bf00      	nop
 8005f6a:	3708      	adds	r7, #8
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f70:	b480      	push	{r7}
 8005f72:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f74:	4b0a      	ldr	r3, [pc, #40]	; (8005fa0 <prvResetNextTaskUnblockTime+0x30>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d104      	bne.n	8005f88 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005f7e:	4b09      	ldr	r3, [pc, #36]	; (8005fa4 <prvResetNextTaskUnblockTime+0x34>)
 8005f80:	f04f 32ff 	mov.w	r2, #4294967295
 8005f84:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005f86:	e005      	b.n	8005f94 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005f88:	4b05      	ldr	r3, [pc, #20]	; (8005fa0 <prvResetNextTaskUnblockTime+0x30>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a04      	ldr	r2, [pc, #16]	; (8005fa4 <prvResetNextTaskUnblockTime+0x34>)
 8005f92:	6013      	str	r3, [r2, #0]
}
 8005f94:	bf00      	nop
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	200001f4 	.word	0x200001f4
 8005fa4:	2000025c 	.word	0x2000025c

08005fa8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005fae:	4b0b      	ldr	r3, [pc, #44]	; (8005fdc <xTaskGetSchedulerState+0x34>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d102      	bne.n	8005fbc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	607b      	str	r3, [r7, #4]
 8005fba:	e008      	b.n	8005fce <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fbc:	4b08      	ldr	r3, [pc, #32]	; (8005fe0 <xTaskGetSchedulerState+0x38>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d102      	bne.n	8005fca <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	607b      	str	r3, [r7, #4]
 8005fc8:	e001      	b.n	8005fce <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005fce:	687b      	ldr	r3, [r7, #4]
    }
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr
 8005fdc:	20000248 	.word	0x20000248
 8005fe0:	20000264 	.word	0x20000264

08005fe4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d068      	beq.n	80060cc <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005ffa:	4b37      	ldr	r3, [pc, #220]	; (80060d8 <xTaskPriorityDisinherit+0xf4>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	429a      	cmp	r2, r3
 8006002:	d00a      	beq.n	800601a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8006004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006008:	f383 8811 	msr	BASEPRI, r3
 800600c:	f3bf 8f6f 	isb	sy
 8006010:	f3bf 8f4f 	dsb	sy
 8006014:	60fb      	str	r3, [r7, #12]
    }
 8006016:	bf00      	nop
 8006018:	e7fe      	b.n	8006018 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10a      	bne.n	8006038 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8006022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006026:	f383 8811 	msr	BASEPRI, r3
 800602a:	f3bf 8f6f 	isb	sy
 800602e:	f3bf 8f4f 	dsb	sy
 8006032:	60bb      	str	r3, [r7, #8]
    }
 8006034:	bf00      	nop
 8006036:	e7fe      	b.n	8006036 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800603c:	1e5a      	subs	r2, r3, #1
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800604a:	429a      	cmp	r2, r3
 800604c:	d03e      	beq.n	80060cc <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006052:	2b00      	cmp	r3, #0
 8006054:	d13a      	bne.n	80060cc <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	3304      	adds	r3, #4
 800605a:	4618      	mov	r0, r3
 800605c:	f7fe fc72 	bl	8004944 <uxListRemove>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10a      	bne.n	800607c <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606a:	2201      	movs	r2, #1
 800606c:	fa02 f303 	lsl.w	r3, r2, r3
 8006070:	43da      	mvns	r2, r3
 8006072:	4b1a      	ldr	r3, [pc, #104]	; (80060dc <xTaskPriorityDisinherit+0xf8>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4013      	ands	r3, r2
 8006078:	4a18      	ldr	r2, [pc, #96]	; (80060dc <xTaskPriorityDisinherit+0xf8>)
 800607a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4619      	mov	r1, r3
 8006080:	204a      	movs	r0, #74	; 0x4a
 8006082:	f001 fdf5 	bl	8007c70 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006092:	f1c3 0205 	rsb	r2, r3, #5
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609e:	2201      	movs	r2, #1
 80060a0:	409a      	lsls	r2, r3
 80060a2:	4b0e      	ldr	r3, [pc, #56]	; (80060dc <xTaskPriorityDisinherit+0xf8>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	4a0c      	ldr	r2, [pc, #48]	; (80060dc <xTaskPriorityDisinherit+0xf8>)
 80060aa:	6013      	str	r3, [r2, #0]
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b0:	4613      	mov	r3, r2
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	4413      	add	r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4a09      	ldr	r2, [pc, #36]	; (80060e0 <xTaskPriorityDisinherit+0xfc>)
 80060ba:	441a      	add	r2, r3
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	3304      	adds	r3, #4
 80060c0:	4619      	mov	r1, r3
 80060c2:	4610      	mov	r0, r2
 80060c4:	f7fe fbe1 	bl	800488a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80060c8:	2301      	movs	r3, #1
 80060ca:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80060cc:	697b      	ldr	r3, [r7, #20]
    }
 80060ce:	4618      	mov	r0, r3
 80060d0:	3718      	adds	r7, #24
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	20000164 	.word	0x20000164
 80060dc:	20000244 	.word	0x20000244
 80060e0:	20000168 	.word	0x20000168

080060e4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80060ee:	4b32      	ldr	r3, [pc, #200]	; (80061b8 <prvAddCurrentTaskToDelayedList+0xd4>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060f4:	4b31      	ldr	r3, [pc, #196]	; (80061bc <prvAddCurrentTaskToDelayedList+0xd8>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	3304      	adds	r3, #4
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7fe fc22 	bl	8004944 <uxListRemove>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10b      	bne.n	800611e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006106:	4b2d      	ldr	r3, [pc, #180]	; (80061bc <prvAddCurrentTaskToDelayedList+0xd8>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610c:	2201      	movs	r2, #1
 800610e:	fa02 f303 	lsl.w	r3, r2, r3
 8006112:	43da      	mvns	r2, r3
 8006114:	4b2a      	ldr	r3, [pc, #168]	; (80061c0 <prvAddCurrentTaskToDelayedList+0xdc>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4013      	ands	r3, r2
 800611a:	4a29      	ldr	r2, [pc, #164]	; (80061c0 <prvAddCurrentTaskToDelayedList+0xdc>)
 800611c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006124:	d110      	bne.n	8006148 <prvAddCurrentTaskToDelayedList+0x64>
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00d      	beq.n	8006148 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800612c:	4b23      	ldr	r3, [pc, #140]	; (80061bc <prvAddCurrentTaskToDelayedList+0xd8>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	211b      	movs	r1, #27
 8006132:	4618      	mov	r0, r3
 8006134:	f002 fb5e 	bl	80087f4 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006138:	4b20      	ldr	r3, [pc, #128]	; (80061bc <prvAddCurrentTaskToDelayedList+0xd8>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	3304      	adds	r3, #4
 800613e:	4619      	mov	r1, r3
 8006140:	4820      	ldr	r0, [pc, #128]	; (80061c4 <prvAddCurrentTaskToDelayedList+0xe0>)
 8006142:	f7fe fba2 	bl	800488a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006146:	e032      	b.n	80061ae <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4413      	add	r3, r2
 800614e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006150:	4b1a      	ldr	r3, [pc, #104]	; (80061bc <prvAddCurrentTaskToDelayedList+0xd8>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68ba      	ldr	r2, [r7, #8]
 8006156:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	429a      	cmp	r2, r3
 800615e:	d20f      	bcs.n	8006180 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8006160:	4b16      	ldr	r3, [pc, #88]	; (80061bc <prvAddCurrentTaskToDelayedList+0xd8>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2104      	movs	r1, #4
 8006166:	4618      	mov	r0, r3
 8006168:	f002 fb44 	bl	80087f4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800616c:	4b16      	ldr	r3, [pc, #88]	; (80061c8 <prvAddCurrentTaskToDelayedList+0xe4>)
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	4b12      	ldr	r3, [pc, #72]	; (80061bc <prvAddCurrentTaskToDelayedList+0xd8>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	3304      	adds	r3, #4
 8006176:	4619      	mov	r1, r3
 8006178:	4610      	mov	r0, r2
 800617a:	f7fe fbaa 	bl	80048d2 <vListInsert>
}
 800617e:	e016      	b.n	80061ae <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8006180:	4b0e      	ldr	r3, [pc, #56]	; (80061bc <prvAddCurrentTaskToDelayedList+0xd8>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2104      	movs	r1, #4
 8006186:	4618      	mov	r0, r3
 8006188:	f002 fb34 	bl	80087f4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800618c:	4b0f      	ldr	r3, [pc, #60]	; (80061cc <prvAddCurrentTaskToDelayedList+0xe8>)
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	4b0a      	ldr	r3, [pc, #40]	; (80061bc <prvAddCurrentTaskToDelayedList+0xd8>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	3304      	adds	r3, #4
 8006196:	4619      	mov	r1, r3
 8006198:	4610      	mov	r0, r2
 800619a:	f7fe fb9a 	bl	80048d2 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800619e:	4b0c      	ldr	r3, [pc, #48]	; (80061d0 <prvAddCurrentTaskToDelayedList+0xec>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68ba      	ldr	r2, [r7, #8]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d202      	bcs.n	80061ae <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80061a8:	4a09      	ldr	r2, [pc, #36]	; (80061d0 <prvAddCurrentTaskToDelayedList+0xec>)
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	6013      	str	r3, [r2, #0]
}
 80061ae:	bf00      	nop
 80061b0:	3710      	adds	r7, #16
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	20000240 	.word	0x20000240
 80061bc:	20000164 	.word	0x20000164
 80061c0:	20000244 	.word	0x20000244
 80061c4:	20000228 	.word	0x20000228
 80061c8:	200001f8 	.word	0x200001f8
 80061cc:	200001f4 	.word	0x200001f4
 80061d0:	2000025c 	.word	0x2000025c

080061d4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80061da:	2300      	movs	r3, #0
 80061dc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80061de:	f000 fb31 	bl	8006844 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80061e2:	4b11      	ldr	r3, [pc, #68]	; (8006228 <xTimerCreateTimerTask+0x54>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00b      	beq.n	8006202 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80061ea:	4b10      	ldr	r3, [pc, #64]	; (800622c <xTimerCreateTimerTask+0x58>)
 80061ec:	9301      	str	r3, [sp, #4]
 80061ee:	2302      	movs	r3, #2
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	2300      	movs	r3, #0
 80061f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80061f8:	490d      	ldr	r1, [pc, #52]	; (8006230 <xTimerCreateTimerTask+0x5c>)
 80061fa:	480e      	ldr	r0, [pc, #56]	; (8006234 <xTimerCreateTimerTask+0x60>)
 80061fc:	f7ff f926 	bl	800544c <xTaskCreate>
 8006200:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10a      	bne.n	800621e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8006208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620c:	f383 8811 	msr	BASEPRI, r3
 8006210:	f3bf 8f6f 	isb	sy
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	603b      	str	r3, [r7, #0]
    }
 800621a:	bf00      	nop
 800621c:	e7fe      	b.n	800621c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800621e:	687b      	ldr	r3, [r7, #4]
    }
 8006220:	4618      	mov	r0, r3
 8006222:	3708      	adds	r7, #8
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	20000298 	.word	0x20000298
 800622c:	2000029c 	.word	0x2000029c
 8006230:	080090b0 	.word	0x080090b0
 8006234:	08006425 	.word	0x08006425

08006238 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8006238:	b580      	push	{r7, lr}
 800623a:	b088      	sub	sp, #32
 800623c:	af02      	add	r7, sp, #8
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
 8006244:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006246:	202c      	movs	r0, #44	; 0x2c
 8006248:	f000 fd88 	bl	8006d5c <pvPortMalloc>
 800624c:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00d      	beq.n	8006270 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	9301      	str	r3, [sp, #4]
 8006260:	6a3b      	ldr	r3, [r7, #32]
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	68b9      	ldr	r1, [r7, #8]
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f000 f805 	bl	800627a <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8006270:	697b      	ldr	r3, [r7, #20]
        }
 8006272:	4618      	mov	r0, r3
 8006274:	3718      	adds	r7, #24
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800627a:	b580      	push	{r7, lr}
 800627c:	b086      	sub	sp, #24
 800627e:	af00      	add	r7, sp, #0
 8006280:	60f8      	str	r0, [r7, #12]
 8006282:	60b9      	str	r1, [r7, #8]
 8006284:	607a      	str	r2, [r7, #4]
 8006286:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10a      	bne.n	80062a4 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 800628e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006292:	f383 8811 	msr	BASEPRI, r3
 8006296:	f3bf 8f6f 	isb	sy
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	617b      	str	r3, [r7, #20]
    }
 80062a0:	bf00      	nop
 80062a2:	e7fe      	b.n	80062a2 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d01e      	beq.n	80062e8 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 80062aa:	f000 facb 	bl	8006844 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 80062ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	683a      	ldr	r2, [r7, #0]
 80062be:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80062c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c2:	6a3a      	ldr	r2, [r7, #32]
 80062c4:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	3304      	adds	r3, #4
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7fe fad0 	bl	8004870 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d008      	beq.n	80062e8 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062dc:	f043 0304 	orr.w	r3, r3, #4
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 80062e8:	bf00      	nop
 80062ea:	3718      	adds	r7, #24
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b08a      	sub	sp, #40	; 0x28
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
 80062fc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80062fe:	2300      	movs	r3, #0
 8006300:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d10a      	bne.n	800631e <xTimerGenericCommand+0x2e>
        __asm volatile
 8006308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630c:	f383 8811 	msr	BASEPRI, r3
 8006310:	f3bf 8f6f 	isb	sy
 8006314:	f3bf 8f4f 	dsb	sy
 8006318:	623b      	str	r3, [r7, #32]
    }
 800631a:	bf00      	nop
 800631c:	e7fe      	b.n	800631c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800631e:	4b1a      	ldr	r3, [pc, #104]	; (8006388 <xTimerGenericCommand+0x98>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d02a      	beq.n	800637c <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	2b05      	cmp	r3, #5
 8006336:	dc18      	bgt.n	800636a <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006338:	f7ff fe36 	bl	8005fa8 <xTaskGetSchedulerState>
 800633c:	4603      	mov	r3, r0
 800633e:	2b02      	cmp	r3, #2
 8006340:	d109      	bne.n	8006356 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006342:	4b11      	ldr	r3, [pc, #68]	; (8006388 <xTimerGenericCommand+0x98>)
 8006344:	6818      	ldr	r0, [r3, #0]
 8006346:	f107 0114 	add.w	r1, r7, #20
 800634a:	2300      	movs	r3, #0
 800634c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800634e:	f7fe fc13 	bl	8004b78 <xQueueGenericSend>
 8006352:	6278      	str	r0, [r7, #36]	; 0x24
 8006354:	e012      	b.n	800637c <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006356:	4b0c      	ldr	r3, [pc, #48]	; (8006388 <xTimerGenericCommand+0x98>)
 8006358:	6818      	ldr	r0, [r3, #0]
 800635a:	f107 0114 	add.w	r1, r7, #20
 800635e:	2300      	movs	r3, #0
 8006360:	2200      	movs	r2, #0
 8006362:	f7fe fc09 	bl	8004b78 <xQueueGenericSend>
 8006366:	6278      	str	r0, [r7, #36]	; 0x24
 8006368:	e008      	b.n	800637c <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800636a:	4b07      	ldr	r3, [pc, #28]	; (8006388 <xTimerGenericCommand+0x98>)
 800636c:	6818      	ldr	r0, [r3, #0]
 800636e:	f107 0114 	add.w	r1, r7, #20
 8006372:	2300      	movs	r3, #0
 8006374:	683a      	ldr	r2, [r7, #0]
 8006376:	f7fe fd25 	bl	8004dc4 <xQueueGenericSendFromISR>
 800637a:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800637e:	4618      	mov	r0, r3
 8006380:	3728      	adds	r7, #40	; 0x28
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	20000298 	.word	0x20000298

0800638c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800638c:	b580      	push	{r7, lr}
 800638e:	b088      	sub	sp, #32
 8006390:	af02      	add	r7, sp, #8
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006396:	4b22      	ldr	r3, [pc, #136]	; (8006420 <prvProcessExpiredTimer+0x94>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	3304      	adds	r3, #4
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7fe facd 	bl	8004944 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063b0:	f003 0304 	and.w	r3, r3, #4
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d022      	beq.n	80063fe <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	699a      	ldr	r2, [r3, #24]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	18d1      	adds	r1, r2, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	6978      	ldr	r0, [r7, #20]
 80063c6:	f000 f8d1 	bl	800656c <prvInsertTimerInActiveList>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d01f      	beq.n	8006410 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063d0:	2300      	movs	r3, #0
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	2300      	movs	r3, #0
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	2100      	movs	r1, #0
 80063da:	6978      	ldr	r0, [r7, #20]
 80063dc:	f7ff ff88 	bl	80062f0 <xTimerGenericCommand>
 80063e0:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d113      	bne.n	8006410 <prvProcessExpiredTimer+0x84>
        __asm volatile
 80063e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ec:	f383 8811 	msr	BASEPRI, r3
 80063f0:	f3bf 8f6f 	isb	sy
 80063f4:	f3bf 8f4f 	dsb	sy
 80063f8:	60fb      	str	r3, [r7, #12]
    }
 80063fa:	bf00      	nop
 80063fc:	e7fe      	b.n	80063fc <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006404:	f023 0301 	bic.w	r3, r3, #1
 8006408:	b2da      	uxtb	r2, r3
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	6978      	ldr	r0, [r7, #20]
 8006416:	4798      	blx	r3
    }
 8006418:	bf00      	nop
 800641a:	3718      	adds	r7, #24
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	20000290 	.word	0x20000290

08006424 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800642c:	f107 0308 	add.w	r3, r7, #8
 8006430:	4618      	mov	r0, r3
 8006432:	f000 f857 	bl	80064e4 <prvGetNextExpireTime>
 8006436:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	4619      	mov	r1, r3
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f000 f803 	bl	8006448 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006442:	f000 f8d5 	bl	80065f0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006446:	e7f1      	b.n	800642c <prvTimerTask+0x8>

08006448 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006452:	f7ff f9c1 	bl	80057d8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006456:	f107 0308 	add.w	r3, r7, #8
 800645a:	4618      	mov	r0, r3
 800645c:	f000 f866 	bl	800652c <prvSampleTimeNow>
 8006460:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d130      	bne.n	80064ca <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10a      	bne.n	8006484 <prvProcessTimerOrBlockTask+0x3c>
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	429a      	cmp	r2, r3
 8006474:	d806      	bhi.n	8006484 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8006476:	f7ff f9bd 	bl	80057f4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800647a:	68f9      	ldr	r1, [r7, #12]
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f7ff ff85 	bl	800638c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006482:	e024      	b.n	80064ce <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d008      	beq.n	800649c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800648a:	4b13      	ldr	r3, [pc, #76]	; (80064d8 <prvProcessTimerOrBlockTask+0x90>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d101      	bne.n	8006498 <prvProcessTimerOrBlockTask+0x50>
 8006494:	2301      	movs	r3, #1
 8006496:	e000      	b.n	800649a <prvProcessTimerOrBlockTask+0x52>
 8006498:	2300      	movs	r3, #0
 800649a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800649c:	4b0f      	ldr	r3, [pc, #60]	; (80064dc <prvProcessTimerOrBlockTask+0x94>)
 800649e:	6818      	ldr	r0, [r3, #0]
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	683a      	ldr	r2, [r7, #0]
 80064a8:	4619      	mov	r1, r3
 80064aa:	f7fe ff9b 	bl	80053e4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80064ae:	f7ff f9a1 	bl	80057f4 <xTaskResumeAll>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10a      	bne.n	80064ce <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80064b8:	4b09      	ldr	r3, [pc, #36]	; (80064e0 <prvProcessTimerOrBlockTask+0x98>)
 80064ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064be:	601a      	str	r2, [r3, #0]
 80064c0:	f3bf 8f4f 	dsb	sy
 80064c4:	f3bf 8f6f 	isb	sy
    }
 80064c8:	e001      	b.n	80064ce <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80064ca:	f7ff f993 	bl	80057f4 <xTaskResumeAll>
    }
 80064ce:	bf00      	nop
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	20000294 	.word	0x20000294
 80064dc:	20000298 	.word	0x20000298
 80064e0:	e000ed04 	.word	0xe000ed04

080064e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80064ec:	4b0e      	ldr	r3, [pc, #56]	; (8006528 <prvGetNextExpireTime+0x44>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d101      	bne.n	80064fa <prvGetNextExpireTime+0x16>
 80064f6:	2201      	movs	r2, #1
 80064f8:	e000      	b.n	80064fc <prvGetNextExpireTime+0x18>
 80064fa:	2200      	movs	r2, #0
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d105      	bne.n	8006514 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006508:	4b07      	ldr	r3, [pc, #28]	; (8006528 <prvGetNextExpireTime+0x44>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	60fb      	str	r3, [r7, #12]
 8006512:	e001      	b.n	8006518 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006514:	2300      	movs	r3, #0
 8006516:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006518:	68fb      	ldr	r3, [r7, #12]
    }
 800651a:	4618      	mov	r0, r3
 800651c:	3714      	adds	r7, #20
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	20000290 	.word	0x20000290

0800652c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006534:	f7ff f9fe 	bl	8005934 <xTaskGetTickCount>
 8006538:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800653a:	4b0b      	ldr	r3, [pc, #44]	; (8006568 <prvSampleTimeNow+0x3c>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	429a      	cmp	r2, r3
 8006542:	d205      	bcs.n	8006550 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006544:	f000 f91a 	bl	800677c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	601a      	str	r2, [r3, #0]
 800654e:	e002      	b.n	8006556 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006556:	4a04      	ldr	r2, [pc, #16]	; (8006568 <prvSampleTimeNow+0x3c>)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800655c:	68fb      	ldr	r3, [r7, #12]
    }
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	200002a0 	.word	0x200002a0

0800656c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800656c:	b580      	push	{r7, lr}
 800656e:	b086      	sub	sp, #24
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]
 8006578:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800657a:	2300      	movs	r3, #0
 800657c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	68ba      	ldr	r2, [r7, #8]
 8006582:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	429a      	cmp	r2, r3
 8006590:	d812      	bhi.n	80065b8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	1ad2      	subs	r2, r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	429a      	cmp	r2, r3
 800659e:	d302      	bcc.n	80065a6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80065a0:	2301      	movs	r3, #1
 80065a2:	617b      	str	r3, [r7, #20]
 80065a4:	e01b      	b.n	80065de <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80065a6:	4b10      	ldr	r3, [pc, #64]	; (80065e8 <prvInsertTimerInActiveList+0x7c>)
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	3304      	adds	r3, #4
 80065ae:	4619      	mov	r1, r3
 80065b0:	4610      	mov	r0, r2
 80065b2:	f7fe f98e 	bl	80048d2 <vListInsert>
 80065b6:	e012      	b.n	80065de <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d206      	bcs.n	80065ce <prvInsertTimerInActiveList+0x62>
 80065c0:	68ba      	ldr	r2, [r7, #8]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d302      	bcc.n	80065ce <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80065c8:	2301      	movs	r3, #1
 80065ca:	617b      	str	r3, [r7, #20]
 80065cc:	e007      	b.n	80065de <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065ce:	4b07      	ldr	r3, [pc, #28]	; (80065ec <prvInsertTimerInActiveList+0x80>)
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	3304      	adds	r3, #4
 80065d6:	4619      	mov	r1, r3
 80065d8:	4610      	mov	r0, r2
 80065da:	f7fe f97a 	bl	80048d2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80065de:	697b      	ldr	r3, [r7, #20]
    }
 80065e0:	4618      	mov	r0, r3
 80065e2:	3718      	adds	r7, #24
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	20000294 	.word	0x20000294
 80065ec:	20000290 	.word	0x20000290

080065f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b08c      	sub	sp, #48	; 0x30
 80065f4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065f6:	e0ae      	b.n	8006756 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f2c0 80aa 	blt.w	8006754 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d004      	beq.n	8006616 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	3304      	adds	r3, #4
 8006610:	4618      	mov	r0, r3
 8006612:	f7fe f997 	bl	8004944 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006616:	1d3b      	adds	r3, r7, #4
 8006618:	4618      	mov	r0, r3
 800661a:	f7ff ff87 	bl	800652c <prvSampleTimeNow>
 800661e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	2b09      	cmp	r3, #9
 8006624:	f200 8097 	bhi.w	8006756 <prvProcessReceivedCommands+0x166>
 8006628:	a201      	add	r2, pc, #4	; (adr r2, 8006630 <prvProcessReceivedCommands+0x40>)
 800662a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662e:	bf00      	nop
 8006630:	08006659 	.word	0x08006659
 8006634:	08006659 	.word	0x08006659
 8006638:	08006659 	.word	0x08006659
 800663c:	080066cd 	.word	0x080066cd
 8006640:	080066e1 	.word	0x080066e1
 8006644:	0800672b 	.word	0x0800672b
 8006648:	08006659 	.word	0x08006659
 800664c:	08006659 	.word	0x08006659
 8006650:	080066cd 	.word	0x080066cd
 8006654:	080066e1 	.word	0x080066e1
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800665e:	f043 0301 	orr.w	r3, r3, #1
 8006662:	b2da      	uxtb	r2, r3
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	18d1      	adds	r1, r2, r3
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6a3a      	ldr	r2, [r7, #32]
 8006676:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006678:	f7ff ff78 	bl	800656c <prvInsertTimerInActiveList>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d069      	beq.n	8006756 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006688:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800668a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006690:	f003 0304 	and.w	r3, r3, #4
 8006694:	2b00      	cmp	r3, #0
 8006696:	d05e      	beq.n	8006756 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	441a      	add	r2, r3
 80066a0:	2300      	movs	r3, #0
 80066a2:	9300      	str	r3, [sp, #0]
 80066a4:	2300      	movs	r3, #0
 80066a6:	2100      	movs	r1, #0
 80066a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066aa:	f7ff fe21 	bl	80062f0 <xTimerGenericCommand>
 80066ae:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d14f      	bne.n	8006756 <prvProcessReceivedCommands+0x166>
        __asm volatile
 80066b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ba:	f383 8811 	msr	BASEPRI, r3
 80066be:	f3bf 8f6f 	isb	sy
 80066c2:	f3bf 8f4f 	dsb	sy
 80066c6:	61bb      	str	r3, [r7, #24]
    }
 80066c8:	bf00      	nop
 80066ca:	e7fe      	b.n	80066ca <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80066cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066d2:	f023 0301 	bic.w	r3, r3, #1
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80066de:	e03a      	b.n	8006756 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80066e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066e6:	f043 0301 	orr.w	r3, r3, #1
 80066ea:	b2da      	uxtb	r2, r3
 80066ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80066f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10a      	bne.n	8006716 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8006700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006704:	f383 8811 	msr	BASEPRI, r3
 8006708:	f3bf 8f6f 	isb	sy
 800670c:	f3bf 8f4f 	dsb	sy
 8006710:	617b      	str	r3, [r7, #20]
    }
 8006712:	bf00      	nop
 8006714:	e7fe      	b.n	8006714 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006718:	699a      	ldr	r2, [r3, #24]
 800671a:	6a3b      	ldr	r3, [r7, #32]
 800671c:	18d1      	adds	r1, r2, r3
 800671e:	6a3b      	ldr	r3, [r7, #32]
 8006720:	6a3a      	ldr	r2, [r7, #32]
 8006722:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006724:	f7ff ff22 	bl	800656c <prvInsertTimerInActiveList>
                        break;
 8006728:	e015      	b.n	8006756 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006730:	f003 0302 	and.w	r3, r3, #2
 8006734:	2b00      	cmp	r3, #0
 8006736:	d103      	bne.n	8006740 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8006738:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800673a:	f000 fbef 	bl	8006f1c <vPortFree>
 800673e:	e00a      	b.n	8006756 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006742:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006746:	f023 0301 	bic.w	r3, r3, #1
 800674a:	b2da      	uxtb	r2, r3
 800674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006752:	e000      	b.n	8006756 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8006754:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006756:	4b08      	ldr	r3, [pc, #32]	; (8006778 <prvProcessReceivedCommands+0x188>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f107 0108 	add.w	r1, r7, #8
 800675e:	2200      	movs	r2, #0
 8006760:	4618      	mov	r0, r3
 8006762:	f7fe fbed 	bl	8004f40 <xQueueReceive>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	f47f af45 	bne.w	80065f8 <prvProcessReceivedCommands+0x8>
        }
    }
 800676e:	bf00      	nop
 8006770:	bf00      	nop
 8006772:	3728      	adds	r7, #40	; 0x28
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	20000298 	.word	0x20000298

0800677c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800677c:	b580      	push	{r7, lr}
 800677e:	b088      	sub	sp, #32
 8006780:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006782:	e048      	b.n	8006816 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006784:	4b2d      	ldr	r3, [pc, #180]	; (800683c <prvSwitchTimerLists+0xc0>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800678e:	4b2b      	ldr	r3, [pc, #172]	; (800683c <prvSwitchTimerLists+0xc0>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	3304      	adds	r3, #4
 800679c:	4618      	mov	r0, r3
 800679e:	f7fe f8d1 	bl	8004944 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6a1b      	ldr	r3, [r3, #32]
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067b0:	f003 0304 	and.w	r3, r3, #4
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d02e      	beq.n	8006816 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	4413      	add	r3, r2
 80067c0:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d90e      	bls.n	80067e8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	68ba      	ldr	r2, [r7, #8]
 80067ce:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067d6:	4b19      	ldr	r3, [pc, #100]	; (800683c <prvSwitchTimerLists+0xc0>)
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	3304      	adds	r3, #4
 80067de:	4619      	mov	r1, r3
 80067e0:	4610      	mov	r0, r2
 80067e2:	f7fe f876 	bl	80048d2 <vListInsert>
 80067e6:	e016      	b.n	8006816 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80067e8:	2300      	movs	r3, #0
 80067ea:	9300      	str	r3, [sp, #0]
 80067ec:	2300      	movs	r3, #0
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	2100      	movs	r1, #0
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f7ff fd7c 	bl	80062f0 <xTimerGenericCommand>
 80067f8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d10a      	bne.n	8006816 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8006800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006804:	f383 8811 	msr	BASEPRI, r3
 8006808:	f3bf 8f6f 	isb	sy
 800680c:	f3bf 8f4f 	dsb	sy
 8006810:	603b      	str	r3, [r7, #0]
    }
 8006812:	bf00      	nop
 8006814:	e7fe      	b.n	8006814 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006816:	4b09      	ldr	r3, [pc, #36]	; (800683c <prvSwitchTimerLists+0xc0>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1b1      	bne.n	8006784 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8006820:	4b06      	ldr	r3, [pc, #24]	; (800683c <prvSwitchTimerLists+0xc0>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8006826:	4b06      	ldr	r3, [pc, #24]	; (8006840 <prvSwitchTimerLists+0xc4>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a04      	ldr	r2, [pc, #16]	; (800683c <prvSwitchTimerLists+0xc0>)
 800682c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800682e:	4a04      	ldr	r2, [pc, #16]	; (8006840 <prvSwitchTimerLists+0xc4>)
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	6013      	str	r3, [r2, #0]
    }
 8006834:	bf00      	nop
 8006836:	3718      	adds	r7, #24
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	20000290 	.word	0x20000290
 8006840:	20000294 	.word	0x20000294

08006844 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006844:	b580      	push	{r7, lr}
 8006846:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006848:	f000 f95e 	bl	8006b08 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800684c:	4b12      	ldr	r3, [pc, #72]	; (8006898 <prvCheckForValidListAndQueue+0x54>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d11d      	bne.n	8006890 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006854:	4811      	ldr	r0, [pc, #68]	; (800689c <prvCheckForValidListAndQueue+0x58>)
 8006856:	f7fd ffeb 	bl	8004830 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800685a:	4811      	ldr	r0, [pc, #68]	; (80068a0 <prvCheckForValidListAndQueue+0x5c>)
 800685c:	f7fd ffe8 	bl	8004830 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006860:	4b10      	ldr	r3, [pc, #64]	; (80068a4 <prvCheckForValidListAndQueue+0x60>)
 8006862:	4a0e      	ldr	r2, [pc, #56]	; (800689c <prvCheckForValidListAndQueue+0x58>)
 8006864:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006866:	4b10      	ldr	r3, [pc, #64]	; (80068a8 <prvCheckForValidListAndQueue+0x64>)
 8006868:	4a0d      	ldr	r2, [pc, #52]	; (80068a0 <prvCheckForValidListAndQueue+0x5c>)
 800686a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800686c:	2200      	movs	r2, #0
 800686e:	210c      	movs	r1, #12
 8006870:	200a      	movs	r0, #10
 8006872:	f7fe f8f9 	bl	8004a68 <xQueueGenericCreate>
 8006876:	4603      	mov	r3, r0
 8006878:	4a07      	ldr	r2, [pc, #28]	; (8006898 <prvCheckForValidListAndQueue+0x54>)
 800687a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800687c:	4b06      	ldr	r3, [pc, #24]	; (8006898 <prvCheckForValidListAndQueue+0x54>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d005      	beq.n	8006890 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006884:	4b04      	ldr	r3, [pc, #16]	; (8006898 <prvCheckForValidListAndQueue+0x54>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4908      	ldr	r1, [pc, #32]	; (80068ac <prvCheckForValidListAndQueue+0x68>)
 800688a:	4618      	mov	r0, r3
 800688c:	f7fe fd78 	bl	8005380 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006890:	f000 f96a 	bl	8006b68 <vPortExitCritical>
    }
 8006894:	bf00      	nop
 8006896:	bd80      	pop	{r7, pc}
 8006898:	20000298 	.word	0x20000298
 800689c:	20000268 	.word	0x20000268
 80068a0:	2000027c 	.word	0x2000027c
 80068a4:	20000290 	.word	0x20000290
 80068a8:	20000294 	.word	0x20000294
 80068ac:	080090b8 	.word	0x080090b8

080068b0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	3b04      	subs	r3, #4
 80068c0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80068c8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	3b04      	subs	r3, #4
 80068ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	f023 0201 	bic.w	r2, r3, #1
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	3b04      	subs	r3, #4
 80068de:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80068e0:	4a0c      	ldr	r2, [pc, #48]	; (8006914 <pxPortInitialiseStack+0x64>)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	3b14      	subs	r3, #20
 80068ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	3b04      	subs	r3, #4
 80068f6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f06f 0202 	mvn.w	r2, #2
 80068fe:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	3b20      	subs	r3, #32
 8006904:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006906:	68fb      	ldr	r3, [r7, #12]
}
 8006908:	4618      	mov	r0, r3
 800690a:	3714      	adds	r7, #20
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr
 8006914:	08006919 	.word	0x08006919

08006918 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800691e:	2300      	movs	r3, #0
 8006920:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006922:	4b12      	ldr	r3, [pc, #72]	; (800696c <prvTaskExitError+0x54>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800692a:	d00a      	beq.n	8006942 <prvTaskExitError+0x2a>
        __asm volatile
 800692c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006930:	f383 8811 	msr	BASEPRI, r3
 8006934:	f3bf 8f6f 	isb	sy
 8006938:	f3bf 8f4f 	dsb	sy
 800693c:	60fb      	str	r3, [r7, #12]
    }
 800693e:	bf00      	nop
 8006940:	e7fe      	b.n	8006940 <prvTaskExitError+0x28>
        __asm volatile
 8006942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	60bb      	str	r3, [r7, #8]
    }
 8006954:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006956:	bf00      	nop
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d0fc      	beq.n	8006958 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800695e:	bf00      	nop
 8006960:	bf00      	nop
 8006962:	3714      	adds	r7, #20
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr
 800696c:	2000000c 	.word	0x2000000c

08006970 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006970:	4b07      	ldr	r3, [pc, #28]	; (8006990 <pxCurrentTCBConst2>)
 8006972:	6819      	ldr	r1, [r3, #0]
 8006974:	6808      	ldr	r0, [r1, #0]
 8006976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800697a:	f380 8809 	msr	PSP, r0
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f04f 0000 	mov.w	r0, #0
 8006986:	f380 8811 	msr	BASEPRI, r0
 800698a:	4770      	bx	lr
 800698c:	f3af 8000 	nop.w

08006990 <pxCurrentTCBConst2>:
 8006990:	20000164 	.word	0x20000164
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006994:	bf00      	nop
 8006996:	bf00      	nop

08006998 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006998:	4808      	ldr	r0, [pc, #32]	; (80069bc <prvPortStartFirstTask+0x24>)
 800699a:	6800      	ldr	r0, [r0, #0]
 800699c:	6800      	ldr	r0, [r0, #0]
 800699e:	f380 8808 	msr	MSP, r0
 80069a2:	f04f 0000 	mov.w	r0, #0
 80069a6:	f380 8814 	msr	CONTROL, r0
 80069aa:	b662      	cpsie	i
 80069ac:	b661      	cpsie	f
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	df00      	svc	0
 80069b8:	bf00      	nop
 80069ba:	0000      	.short	0x0000
 80069bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80069c0:	bf00      	nop
 80069c2:	bf00      	nop

080069c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80069ca:	4b46      	ldr	r3, [pc, #280]	; (8006ae4 <xPortStartScheduler+0x120>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a46      	ldr	r2, [pc, #280]	; (8006ae8 <xPortStartScheduler+0x124>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d10a      	bne.n	80069ea <xPortStartScheduler+0x26>
        __asm volatile
 80069d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d8:	f383 8811 	msr	BASEPRI, r3
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	613b      	str	r3, [r7, #16]
    }
 80069e6:	bf00      	nop
 80069e8:	e7fe      	b.n	80069e8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80069ea:	4b3e      	ldr	r3, [pc, #248]	; (8006ae4 <xPortStartScheduler+0x120>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a3f      	ldr	r2, [pc, #252]	; (8006aec <xPortStartScheduler+0x128>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d10a      	bne.n	8006a0a <xPortStartScheduler+0x46>
        __asm volatile
 80069f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f8:	f383 8811 	msr	BASEPRI, r3
 80069fc:	f3bf 8f6f 	isb	sy
 8006a00:	f3bf 8f4f 	dsb	sy
 8006a04:	60fb      	str	r3, [r7, #12]
    }
 8006a06:	bf00      	nop
 8006a08:	e7fe      	b.n	8006a08 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a0a:	4b39      	ldr	r3, [pc, #228]	; (8006af0 <xPortStartScheduler+0x12c>)
 8006a0c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	22ff      	movs	r2, #255	; 0xff
 8006a1a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006a24:	78fb      	ldrb	r3, [r7, #3]
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006a2c:	b2da      	uxtb	r2, r3
 8006a2e:	4b31      	ldr	r3, [pc, #196]	; (8006af4 <xPortStartScheduler+0x130>)
 8006a30:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006a32:	4b31      	ldr	r3, [pc, #196]	; (8006af8 <xPortStartScheduler+0x134>)
 8006a34:	2207      	movs	r2, #7
 8006a36:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a38:	e009      	b.n	8006a4e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8006a3a:	4b2f      	ldr	r3, [pc, #188]	; (8006af8 <xPortStartScheduler+0x134>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	4a2d      	ldr	r2, [pc, #180]	; (8006af8 <xPortStartScheduler+0x134>)
 8006a42:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a44:	78fb      	ldrb	r3, [r7, #3]
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	005b      	lsls	r3, r3, #1
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a4e:	78fb      	ldrb	r3, [r7, #3]
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a56:	2b80      	cmp	r3, #128	; 0x80
 8006a58:	d0ef      	beq.n	8006a3a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a5a:	4b27      	ldr	r3, [pc, #156]	; (8006af8 <xPortStartScheduler+0x134>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f1c3 0307 	rsb	r3, r3, #7
 8006a62:	2b04      	cmp	r3, #4
 8006a64:	d00a      	beq.n	8006a7c <xPortStartScheduler+0xb8>
        __asm volatile
 8006a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6a:	f383 8811 	msr	BASEPRI, r3
 8006a6e:	f3bf 8f6f 	isb	sy
 8006a72:	f3bf 8f4f 	dsb	sy
 8006a76:	60bb      	str	r3, [r7, #8]
    }
 8006a78:	bf00      	nop
 8006a7a:	e7fe      	b.n	8006a7a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a7c:	4b1e      	ldr	r3, [pc, #120]	; (8006af8 <xPortStartScheduler+0x134>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	021b      	lsls	r3, r3, #8
 8006a82:	4a1d      	ldr	r2, [pc, #116]	; (8006af8 <xPortStartScheduler+0x134>)
 8006a84:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a86:	4b1c      	ldr	r3, [pc, #112]	; (8006af8 <xPortStartScheduler+0x134>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a8e:	4a1a      	ldr	r2, [pc, #104]	; (8006af8 <xPortStartScheduler+0x134>)
 8006a90:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	b2da      	uxtb	r2, r3
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006a9a:	4b18      	ldr	r3, [pc, #96]	; (8006afc <xPortStartScheduler+0x138>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a17      	ldr	r2, [pc, #92]	; (8006afc <xPortStartScheduler+0x138>)
 8006aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006aa4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006aa6:	4b15      	ldr	r3, [pc, #84]	; (8006afc <xPortStartScheduler+0x138>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a14      	ldr	r2, [pc, #80]	; (8006afc <xPortStartScheduler+0x138>)
 8006aac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006ab0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006ab2:	f000 f8e3 	bl	8006c7c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006ab6:	4b12      	ldr	r3, [pc, #72]	; (8006b00 <xPortStartScheduler+0x13c>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8006abc:	f000 f902 	bl	8006cc4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006ac0:	4b10      	ldr	r3, [pc, #64]	; (8006b04 <xPortStartScheduler+0x140>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a0f      	ldr	r2, [pc, #60]	; (8006b04 <xPortStartScheduler+0x140>)
 8006ac6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006aca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8006acc:	f7ff ff64 	bl	8006998 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006ad0:	f7ff f80e 	bl	8005af0 <vTaskSwitchContext>
    prvTaskExitError();
 8006ad4:	f7ff ff20 	bl	8006918 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3718      	adds	r7, #24
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	e000ed00 	.word	0xe000ed00
 8006ae8:	410fc271 	.word	0x410fc271
 8006aec:	410fc270 	.word	0x410fc270
 8006af0:	e000e400 	.word	0xe000e400
 8006af4:	200002a4 	.word	0x200002a4
 8006af8:	200002a8 	.word	0x200002a8
 8006afc:	e000ed20 	.word	0xe000ed20
 8006b00:	2000000c 	.word	0x2000000c
 8006b04:	e000ef34 	.word	0xe000ef34

08006b08 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
        __asm volatile
 8006b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b12:	f383 8811 	msr	BASEPRI, r3
 8006b16:	f3bf 8f6f 	isb	sy
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	607b      	str	r3, [r7, #4]
    }
 8006b20:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006b22:	4b0f      	ldr	r3, [pc, #60]	; (8006b60 <vPortEnterCritical+0x58>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	3301      	adds	r3, #1
 8006b28:	4a0d      	ldr	r2, [pc, #52]	; (8006b60 <vPortEnterCritical+0x58>)
 8006b2a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006b2c:	4b0c      	ldr	r3, [pc, #48]	; (8006b60 <vPortEnterCritical+0x58>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d10f      	bne.n	8006b54 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006b34:	4b0b      	ldr	r3, [pc, #44]	; (8006b64 <vPortEnterCritical+0x5c>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00a      	beq.n	8006b54 <vPortEnterCritical+0x4c>
        __asm volatile
 8006b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b42:	f383 8811 	msr	BASEPRI, r3
 8006b46:	f3bf 8f6f 	isb	sy
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	603b      	str	r3, [r7, #0]
    }
 8006b50:	bf00      	nop
 8006b52:	e7fe      	b.n	8006b52 <vPortEnterCritical+0x4a>
    }
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr
 8006b60:	2000000c 	.word	0x2000000c
 8006b64:	e000ed04 	.word	0xe000ed04

08006b68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8006b6e:	4b12      	ldr	r3, [pc, #72]	; (8006bb8 <vPortExitCritical+0x50>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d10a      	bne.n	8006b8c <vPortExitCritical+0x24>
        __asm volatile
 8006b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7a:	f383 8811 	msr	BASEPRI, r3
 8006b7e:	f3bf 8f6f 	isb	sy
 8006b82:	f3bf 8f4f 	dsb	sy
 8006b86:	607b      	str	r3, [r7, #4]
    }
 8006b88:	bf00      	nop
 8006b8a:	e7fe      	b.n	8006b8a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8006b8c:	4b0a      	ldr	r3, [pc, #40]	; (8006bb8 <vPortExitCritical+0x50>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	3b01      	subs	r3, #1
 8006b92:	4a09      	ldr	r2, [pc, #36]	; (8006bb8 <vPortExitCritical+0x50>)
 8006b94:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006b96:	4b08      	ldr	r3, [pc, #32]	; (8006bb8 <vPortExitCritical+0x50>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d105      	bne.n	8006baa <vPortExitCritical+0x42>
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	f383 8811 	msr	BASEPRI, r3
    }
 8006ba8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8006baa:	bf00      	nop
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	2000000c 	.word	0x2000000c
 8006bbc:	00000000 	.word	0x00000000

08006bc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006bc0:	f3ef 8009 	mrs	r0, PSP
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	4b15      	ldr	r3, [pc, #84]	; (8006c20 <pxCurrentTCBConst>)
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	f01e 0f10 	tst.w	lr, #16
 8006bd0:	bf08      	it	eq
 8006bd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006bd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bda:	6010      	str	r0, [r2, #0]
 8006bdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006be0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006be4:	f380 8811 	msr	BASEPRI, r0
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f7fe ff7e 	bl	8005af0 <vTaskSwitchContext>
 8006bf4:	f04f 0000 	mov.w	r0, #0
 8006bf8:	f380 8811 	msr	BASEPRI, r0
 8006bfc:	bc09      	pop	{r0, r3}
 8006bfe:	6819      	ldr	r1, [r3, #0]
 8006c00:	6808      	ldr	r0, [r1, #0]
 8006c02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c06:	f01e 0f10 	tst.w	lr, #16
 8006c0a:	bf08      	it	eq
 8006c0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006c10:	f380 8809 	msr	PSP, r0
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	f3af 8000 	nop.w

08006c20 <pxCurrentTCBConst>:
 8006c20:	20000164 	.word	0x20000164
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006c24:	bf00      	nop
 8006c26:	bf00      	nop

08006c28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
        __asm volatile
 8006c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	607b      	str	r3, [r7, #4]
    }
 8006c40:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8006c42:	f001 fc7b 	bl	800853c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006c46:	f7fe fe97 	bl	8005978 <xTaskIncrementTick>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d006      	beq.n	8006c5e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8006c50:	f001 fcd2 	bl	80085f8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006c54:	4b08      	ldr	r3, [pc, #32]	; (8006c78 <SysTick_Handler+0x50>)
 8006c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c5a:	601a      	str	r2, [r3, #0]
 8006c5c:	e001      	b.n	8006c62 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8006c5e:	f001 fcaf 	bl	80085c0 <SEGGER_SYSVIEW_RecordExitISR>
 8006c62:	2300      	movs	r3, #0
 8006c64:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	f383 8811 	msr	BASEPRI, r3
    }
 8006c6c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8006c6e:	bf00      	nop
 8006c70:	3708      	adds	r7, #8
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	e000ed04 	.word	0xe000ed04

08006c7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c80:	4b0b      	ldr	r3, [pc, #44]	; (8006cb0 <vPortSetupTimerInterrupt+0x34>)
 8006c82:	2200      	movs	r2, #0
 8006c84:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006c86:	4b0b      	ldr	r3, [pc, #44]	; (8006cb4 <vPortSetupTimerInterrupt+0x38>)
 8006c88:	2200      	movs	r2, #0
 8006c8a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c8c:	4b0a      	ldr	r3, [pc, #40]	; (8006cb8 <vPortSetupTimerInterrupt+0x3c>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a0a      	ldr	r2, [pc, #40]	; (8006cbc <vPortSetupTimerInterrupt+0x40>)
 8006c92:	fba2 2303 	umull	r2, r3, r2, r3
 8006c96:	099b      	lsrs	r3, r3, #6
 8006c98:	4a09      	ldr	r2, [pc, #36]	; (8006cc0 <vPortSetupTimerInterrupt+0x44>)
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c9e:	4b04      	ldr	r3, [pc, #16]	; (8006cb0 <vPortSetupTimerInterrupt+0x34>)
 8006ca0:	2207      	movs	r2, #7
 8006ca2:	601a      	str	r2, [r3, #0]
}
 8006ca4:	bf00      	nop
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	e000e010 	.word	0xe000e010
 8006cb4:	e000e018 	.word	0xe000e018
 8006cb8:	20000000 	.word	0x20000000
 8006cbc:	10624dd3 	.word	0x10624dd3
 8006cc0:	e000e014 	.word	0xe000e014

08006cc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006cc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006cd4 <vPortEnableVFP+0x10>
 8006cc8:	6801      	ldr	r1, [r0, #0]
 8006cca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006cce:	6001      	str	r1, [r0, #0]
 8006cd0:	4770      	bx	lr
 8006cd2:	0000      	.short	0x0000
 8006cd4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006cd8:	bf00      	nop
 8006cda:	bf00      	nop

08006cdc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006ce2:	f3ef 8305 	mrs	r3, IPSR
 8006ce6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2b0f      	cmp	r3, #15
 8006cec:	d914      	bls.n	8006d18 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006cee:	4a17      	ldr	r2, [pc, #92]	; (8006d4c <vPortValidateInterruptPriority+0x70>)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006cf8:	4b15      	ldr	r3, [pc, #84]	; (8006d50 <vPortValidateInterruptPriority+0x74>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	7afa      	ldrb	r2, [r7, #11]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d20a      	bcs.n	8006d18 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8006d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d06:	f383 8811 	msr	BASEPRI, r3
 8006d0a:	f3bf 8f6f 	isb	sy
 8006d0e:	f3bf 8f4f 	dsb	sy
 8006d12:	607b      	str	r3, [r7, #4]
    }
 8006d14:	bf00      	nop
 8006d16:	e7fe      	b.n	8006d16 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d18:	4b0e      	ldr	r3, [pc, #56]	; (8006d54 <vPortValidateInterruptPriority+0x78>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006d20:	4b0d      	ldr	r3, [pc, #52]	; (8006d58 <vPortValidateInterruptPriority+0x7c>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d90a      	bls.n	8006d3e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8006d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2c:	f383 8811 	msr	BASEPRI, r3
 8006d30:	f3bf 8f6f 	isb	sy
 8006d34:	f3bf 8f4f 	dsb	sy
 8006d38:	603b      	str	r3, [r7, #0]
    }
 8006d3a:	bf00      	nop
 8006d3c:	e7fe      	b.n	8006d3c <vPortValidateInterruptPriority+0x60>
    }
 8006d3e:	bf00      	nop
 8006d40:	3714      	adds	r7, #20
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	e000e3f0 	.word	0xe000e3f0
 8006d50:	200002a4 	.word	0x200002a4
 8006d54:	e000ed0c 	.word	0xe000ed0c
 8006d58:	200002a8 	.word	0x200002a8

08006d5c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b08a      	sub	sp, #40	; 0x28
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8006d64:	2300      	movs	r3, #0
 8006d66:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8006d68:	f7fe fd36 	bl	80057d8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8006d6c:	4b65      	ldr	r3, [pc, #404]	; (8006f04 <pvPortMalloc+0x1a8>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d101      	bne.n	8006d78 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006d74:	f000 f934 	bl	8006fe0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006d78:	4b63      	ldr	r3, [pc, #396]	; (8006f08 <pvPortMalloc+0x1ac>)
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4013      	ands	r3, r2
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f040 80a7 	bne.w	8006ed4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d02d      	beq.n	8006de8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8006d8c:	2208      	movs	r2, #8
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d227      	bcs.n	8006de8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8006d98:	2208      	movs	r2, #8
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f003 0307 	and.w	r3, r3, #7
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d021      	beq.n	8006dee <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f023 0307 	bic.w	r3, r3, #7
 8006db0:	3308      	adds	r3, #8
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d214      	bcs.n	8006de2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f023 0307 	bic.w	r3, r3, #7
 8006dbe:	3308      	adds	r3, #8
 8006dc0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f003 0307 	and.w	r3, r3, #7
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d010      	beq.n	8006dee <pvPortMalloc+0x92>
        __asm volatile
 8006dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd0:	f383 8811 	msr	BASEPRI, r3
 8006dd4:	f3bf 8f6f 	isb	sy
 8006dd8:	f3bf 8f4f 	dsb	sy
 8006ddc:	617b      	str	r3, [r7, #20]
    }
 8006dde:	bf00      	nop
 8006de0:	e7fe      	b.n	8006de0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8006de2:	2300      	movs	r3, #0
 8006de4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006de6:	e002      	b.n	8006dee <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8006de8:	2300      	movs	r3, #0
 8006dea:	607b      	str	r3, [r7, #4]
 8006dec:	e000      	b.n	8006df0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006dee:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d06e      	beq.n	8006ed4 <pvPortMalloc+0x178>
 8006df6:	4b45      	ldr	r3, [pc, #276]	; (8006f0c <pvPortMalloc+0x1b0>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d869      	bhi.n	8006ed4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006e00:	4b43      	ldr	r3, [pc, #268]	; (8006f10 <pvPortMalloc+0x1b4>)
 8006e02:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8006e04:	4b42      	ldr	r3, [pc, #264]	; (8006f10 <pvPortMalloc+0x1b4>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e0a:	e004      	b.n	8006e16 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8006e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d903      	bls.n	8006e28 <pvPortMalloc+0xcc>
 8006e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1f1      	bne.n	8006e0c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006e28:	4b36      	ldr	r3, [pc, #216]	; (8006f04 <pvPortMalloc+0x1a8>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d050      	beq.n	8006ed4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e32:	6a3b      	ldr	r3, [r7, #32]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2208      	movs	r2, #8
 8006e38:	4413      	add	r3, r2
 8006e3a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	6a3b      	ldr	r3, [r7, #32]
 8006e42:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e46:	685a      	ldr	r2, [r3, #4]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	1ad2      	subs	r2, r2, r3
 8006e4c:	2308      	movs	r3, #8
 8006e4e:	005b      	lsls	r3, r3, #1
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d91f      	bls.n	8006e94 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4413      	add	r3, r2
 8006e5a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	f003 0307 	and.w	r3, r3, #7
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00a      	beq.n	8006e7c <pvPortMalloc+0x120>
        __asm volatile
 8006e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6a:	f383 8811 	msr	BASEPRI, r3
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	613b      	str	r3, [r7, #16]
    }
 8006e78:	bf00      	nop
 8006e7a:	e7fe      	b.n	8006e7a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7e:	685a      	ldr	r2, [r3, #4]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	1ad2      	subs	r2, r2, r3
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e8e:	69b8      	ldr	r0, [r7, #24]
 8006e90:	f000 f908 	bl	80070a4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e94:	4b1d      	ldr	r3, [pc, #116]	; (8006f0c <pvPortMalloc+0x1b0>)
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	4a1b      	ldr	r2, [pc, #108]	; (8006f0c <pvPortMalloc+0x1b0>)
 8006ea0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ea2:	4b1a      	ldr	r3, [pc, #104]	; (8006f0c <pvPortMalloc+0x1b0>)
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	4b1b      	ldr	r3, [pc, #108]	; (8006f14 <pvPortMalloc+0x1b8>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d203      	bcs.n	8006eb6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006eae:	4b17      	ldr	r3, [pc, #92]	; (8006f0c <pvPortMalloc+0x1b0>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a18      	ldr	r2, [pc, #96]	; (8006f14 <pvPortMalloc+0x1b8>)
 8006eb4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb8:	685a      	ldr	r2, [r3, #4]
 8006eba:	4b13      	ldr	r3, [pc, #76]	; (8006f08 <pvPortMalloc+0x1ac>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	431a      	orrs	r2, r3
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006eca:	4b13      	ldr	r3, [pc, #76]	; (8006f18 <pvPortMalloc+0x1bc>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	4a11      	ldr	r2, [pc, #68]	; (8006f18 <pvPortMalloc+0x1bc>)
 8006ed2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006ed4:	f7fe fc8e 	bl	80057f4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	f003 0307 	and.w	r3, r3, #7
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00a      	beq.n	8006ef8 <pvPortMalloc+0x19c>
        __asm volatile
 8006ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee6:	f383 8811 	msr	BASEPRI, r3
 8006eea:	f3bf 8f6f 	isb	sy
 8006eee:	f3bf 8f4f 	dsb	sy
 8006ef2:	60fb      	str	r3, [r7, #12]
    }
 8006ef4:	bf00      	nop
 8006ef6:	e7fe      	b.n	8006ef6 <pvPortMalloc+0x19a>
    return pvReturn;
 8006ef8:	69fb      	ldr	r3, [r7, #28]
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3728      	adds	r7, #40	; 0x28
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	20012eb4 	.word	0x20012eb4
 8006f08:	20012ec8 	.word	0x20012ec8
 8006f0c:	20012eb8 	.word	0x20012eb8
 8006f10:	20012eac 	.word	0x20012eac
 8006f14:	20012ebc 	.word	0x20012ebc
 8006f18:	20012ec0 	.word	0x20012ec0

08006f1c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b086      	sub	sp, #24
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d04d      	beq.n	8006fca <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8006f2e:	2308      	movs	r3, #8
 8006f30:	425b      	negs	r3, r3
 8006f32:	697a      	ldr	r2, [r7, #20]
 8006f34:	4413      	add	r3, r2
 8006f36:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	685a      	ldr	r2, [r3, #4]
 8006f40:	4b24      	ldr	r3, [pc, #144]	; (8006fd4 <vPortFree+0xb8>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4013      	ands	r3, r2
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10a      	bne.n	8006f60 <vPortFree+0x44>
        __asm volatile
 8006f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4e:	f383 8811 	msr	BASEPRI, r3
 8006f52:	f3bf 8f6f 	isb	sy
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	60fb      	str	r3, [r7, #12]
    }
 8006f5c:	bf00      	nop
 8006f5e:	e7fe      	b.n	8006f5e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00a      	beq.n	8006f7e <vPortFree+0x62>
        __asm volatile
 8006f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6c:	f383 8811 	msr	BASEPRI, r3
 8006f70:	f3bf 8f6f 	isb	sy
 8006f74:	f3bf 8f4f 	dsb	sy
 8006f78:	60bb      	str	r3, [r7, #8]
    }
 8006f7a:	bf00      	nop
 8006f7c:	e7fe      	b.n	8006f7c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	685a      	ldr	r2, [r3, #4]
 8006f82:	4b14      	ldr	r3, [pc, #80]	; (8006fd4 <vPortFree+0xb8>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4013      	ands	r3, r2
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d01e      	beq.n	8006fca <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d11a      	bne.n	8006fca <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	685a      	ldr	r2, [r3, #4]
 8006f98:	4b0e      	ldr	r3, [pc, #56]	; (8006fd4 <vPortFree+0xb8>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	43db      	mvns	r3, r3
 8006f9e:	401a      	ands	r2, r3
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8006fa4:	f7fe fc18 	bl	80057d8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	4b0a      	ldr	r3, [pc, #40]	; (8006fd8 <vPortFree+0xbc>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	4a09      	ldr	r2, [pc, #36]	; (8006fd8 <vPortFree+0xbc>)
 8006fb4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006fb6:	6938      	ldr	r0, [r7, #16]
 8006fb8:	f000 f874 	bl	80070a4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006fbc:	4b07      	ldr	r3, [pc, #28]	; (8006fdc <vPortFree+0xc0>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	4a06      	ldr	r2, [pc, #24]	; (8006fdc <vPortFree+0xc0>)
 8006fc4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006fc6:	f7fe fc15 	bl	80057f4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006fca:	bf00      	nop
 8006fcc:	3718      	adds	r7, #24
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	20012ec8 	.word	0x20012ec8
 8006fd8:	20012eb8 	.word	0x20012eb8
 8006fdc:	20012ec4 	.word	0x20012ec4

08006fe0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006fe6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8006fea:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8006fec:	4b27      	ldr	r3, [pc, #156]	; (800708c <prvHeapInit+0xac>)
 8006fee:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f003 0307 	and.w	r3, r3, #7
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00c      	beq.n	8007014 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	3307      	adds	r3, #7
 8006ffe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f023 0307 	bic.w	r3, r3, #7
 8007006:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007008:	68ba      	ldr	r2, [r7, #8]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	4a1f      	ldr	r2, [pc, #124]	; (800708c <prvHeapInit+0xac>)
 8007010:	4413      	add	r3, r2
 8007012:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007018:	4a1d      	ldr	r2, [pc, #116]	; (8007090 <prvHeapInit+0xb0>)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800701e:	4b1c      	ldr	r3, [pc, #112]	; (8007090 <prvHeapInit+0xb0>)
 8007020:	2200      	movs	r2, #0
 8007022:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	68ba      	ldr	r2, [r7, #8]
 8007028:	4413      	add	r3, r2
 800702a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800702c:	2208      	movs	r2, #8
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	1a9b      	subs	r3, r3, r2
 8007032:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f023 0307 	bic.w	r3, r3, #7
 800703a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	4a15      	ldr	r2, [pc, #84]	; (8007094 <prvHeapInit+0xb4>)
 8007040:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007042:	4b14      	ldr	r3, [pc, #80]	; (8007094 <prvHeapInit+0xb4>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2200      	movs	r2, #0
 8007048:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800704a:	4b12      	ldr	r3, [pc, #72]	; (8007094 <prvHeapInit+0xb4>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2200      	movs	r2, #0
 8007050:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	1ad2      	subs	r2, r2, r3
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007060:	4b0c      	ldr	r3, [pc, #48]	; (8007094 <prvHeapInit+0xb4>)
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	4a0a      	ldr	r2, [pc, #40]	; (8007098 <prvHeapInit+0xb8>)
 800706e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	4a09      	ldr	r2, [pc, #36]	; (800709c <prvHeapInit+0xbc>)
 8007076:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007078:	4b09      	ldr	r3, [pc, #36]	; (80070a0 <prvHeapInit+0xc0>)
 800707a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800707e:	601a      	str	r2, [r3, #0]
}
 8007080:	bf00      	nop
 8007082:	3714      	adds	r7, #20
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr
 800708c:	200002ac 	.word	0x200002ac
 8007090:	20012eac 	.word	0x20012eac
 8007094:	20012eb4 	.word	0x20012eb4
 8007098:	20012ebc 	.word	0x20012ebc
 800709c:	20012eb8 	.word	0x20012eb8
 80070a0:	20012ec8 	.word	0x20012ec8

080070a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80070ac:	4b28      	ldr	r3, [pc, #160]	; (8007150 <prvInsertBlockIntoFreeList+0xac>)
 80070ae:	60fb      	str	r3, [r7, #12]
 80070b0:	e002      	b.n	80070b8 <prvInsertBlockIntoFreeList+0x14>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	60fb      	str	r3, [r7, #12]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d8f7      	bhi.n	80070b2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	68ba      	ldr	r2, [r7, #8]
 80070cc:	4413      	add	r3, r2
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d108      	bne.n	80070e6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	685a      	ldr	r2, [r3, #4]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	441a      	add	r2, r3
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	68ba      	ldr	r2, [r7, #8]
 80070f0:	441a      	add	r2, r3
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d118      	bne.n	800712c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	4b15      	ldr	r3, [pc, #84]	; (8007154 <prvInsertBlockIntoFreeList+0xb0>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	429a      	cmp	r2, r3
 8007104:	d00d      	beq.n	8007122 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	685a      	ldr	r2, [r3, #4]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	441a      	add	r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	601a      	str	r2, [r3, #0]
 8007120:	e008      	b.n	8007134 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007122:	4b0c      	ldr	r3, [pc, #48]	; (8007154 <prvInsertBlockIntoFreeList+0xb0>)
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	601a      	str	r2, [r3, #0]
 800712a:	e003      	b.n	8007134 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	429a      	cmp	r2, r3
 800713a:	d002      	beq.n	8007142 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007142:	bf00      	nop
 8007144:	3714      	adds	r7, #20
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop
 8007150:	20012eac 	.word	0x20012eac
 8007154:	20012eb4 	.word	0x20012eb4

08007158 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800715e:	4b26      	ldr	r3, [pc, #152]	; (80071f8 <_DoInit+0xa0>)
 8007160:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8007162:	22a8      	movs	r2, #168	; 0xa8
 8007164:	2100      	movs	r1, #0
 8007166:	6838      	ldr	r0, [r7, #0]
 8007168:	f001 fe7c 	bl	8008e64 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	2203      	movs	r2, #3
 8007170:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	2203      	movs	r2, #3
 8007176:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	4a20      	ldr	r2, [pc, #128]	; (80071fc <_DoInit+0xa4>)
 800717c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	4a1f      	ldr	r2, [pc, #124]	; (8007200 <_DoInit+0xa8>)
 8007182:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800718a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	2200      	movs	r2, #0
 8007190:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	2200      	movs	r2, #0
 8007196:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	2200      	movs	r2, #0
 800719c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	4a16      	ldr	r2, [pc, #88]	; (80071fc <_DoInit+0xa4>)
 80071a2:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	4a17      	ldr	r2, [pc, #92]	; (8007204 <_DoInit+0xac>)
 80071a8:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	2210      	movs	r2, #16
 80071ae:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	2200      	movs	r2, #0
 80071b4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	2200      	movs	r2, #0
 80071ba:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	2200      	movs	r2, #0
 80071c0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80071c2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80071c6:	2300      	movs	r3, #0
 80071c8:	607b      	str	r3, [r7, #4]
 80071ca:	e00c      	b.n	80071e6 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f1c3 030f 	rsb	r3, r3, #15
 80071d2:	4a0d      	ldr	r2, [pc, #52]	; (8007208 <_DoInit+0xb0>)
 80071d4:	5cd1      	ldrb	r1, [r2, r3]
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4413      	add	r3, r2
 80071dc:	460a      	mov	r2, r1
 80071de:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	3301      	adds	r3, #1
 80071e4:	607b      	str	r3, [r7, #4]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2b0f      	cmp	r3, #15
 80071ea:	d9ef      	bls.n	80071cc <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80071ec:	f3bf 8f5f 	dmb	sy
}
 80071f0:	bf00      	nop
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	20012ecc 	.word	0x20012ecc
 80071fc:	080090c0 	.word	0x080090c0
 8007200:	20012f74 	.word	0x20012f74
 8007204:	20013374 	.word	0x20013374
 8007208:	080091b0 	.word	0x080091b0

0800720c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800720c:	b580      	push	{r7, lr}
 800720e:	b08c      	sub	sp, #48	; 0x30
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8007218:	4b3e      	ldr	r3, [pc, #248]	; (8007314 <SEGGER_RTT_ReadNoLock+0x108>)
 800721a:	623b      	str	r3, [r7, #32]
 800721c:	6a3b      	ldr	r3, [r7, #32]
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d101      	bne.n	800722a <SEGGER_RTT_ReadNoLock+0x1e>
 8007226:	f7ff ff97 	bl	8007158 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	4613      	mov	r3, r2
 800722e:	005b      	lsls	r3, r3, #1
 8007230:	4413      	add	r3, r2
 8007232:	00db      	lsls	r3, r3, #3
 8007234:	3360      	adds	r3, #96	; 0x60
 8007236:	4a37      	ldr	r2, [pc, #220]	; (8007314 <SEGGER_RTT_ReadNoLock+0x108>)
 8007238:	4413      	add	r3, r2
 800723a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800724c:	2300      	movs	r3, #0
 800724e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8007250:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	429a      	cmp	r2, r3
 8007256:	d92b      	bls.n	80072b0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	689a      	ldr	r2, [r3, #8]
 800725c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4293      	cmp	r3, r2
 8007268:	bf28      	it	cs
 800726a:	4613      	movcs	r3, r2
 800726c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	685a      	ldr	r2, [r3, #4]
 8007272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007274:	4413      	add	r3, r2
 8007276:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8007278:	697a      	ldr	r2, [r7, #20]
 800727a:	6939      	ldr	r1, [r7, #16]
 800727c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800727e:	f001 fde3 	bl	8008e48 <memcpy>
    NumBytesRead += NumBytesRem;
 8007282:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	4413      	add	r3, r2
 8007288:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800728a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	4413      	add	r3, r2
 8007290:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800729a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	4413      	add	r3, r2
 80072a0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d101      	bne.n	80072b0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80072ac:	2300      	movs	r3, #0
 80072ae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80072b0:	69ba      	ldr	r2, [r7, #24]
 80072b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80072b8:	697a      	ldr	r2, [r7, #20]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4293      	cmp	r3, r2
 80072be:	bf28      	it	cs
 80072c0:	4613      	movcs	r3, r2
 80072c2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d019      	beq.n	80072fe <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	685a      	ldr	r2, [r3, #4]
 80072ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d0:	4413      	add	r3, r2
 80072d2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80072d4:	697a      	ldr	r2, [r7, #20]
 80072d6:	6939      	ldr	r1, [r7, #16]
 80072d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072da:	f001 fdb5 	bl	8008e48 <memcpy>
    NumBytesRead += NumBytesRem;
 80072de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	4413      	add	r3, r2
 80072e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80072e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	4413      	add	r3, r2
 80072ec:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80072f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	4413      	add	r3, r2
 80072fc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80072fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007300:	2b00      	cmp	r3, #0
 8007302:	d002      	beq.n	800730a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007308:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800730a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800730c:	4618      	mov	r0, r3
 800730e:	3730      	adds	r7, #48	; 0x30
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}
 8007314:	20012ecc 	.word	0x20012ecc

08007318 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8007318:	b580      	push	{r7, lr}
 800731a:	b088      	sub	sp, #32
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
 8007324:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8007326:	4b3d      	ldr	r3, [pc, #244]	; (800741c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8007328:	61bb      	str	r3, [r7, #24]
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	b2db      	uxtb	r3, r3
 8007330:	2b00      	cmp	r3, #0
 8007332:	d101      	bne.n	8007338 <SEGGER_RTT_AllocUpBuffer+0x20>
 8007334:	f7ff ff10 	bl	8007158 <_DoInit>
  SEGGER_RTT_LOCK();
 8007338:	f3ef 8311 	mrs	r3, BASEPRI
 800733c:	f04f 0120 	mov.w	r1, #32
 8007340:	f381 8811 	msr	BASEPRI, r1
 8007344:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007346:	4b35      	ldr	r3, [pc, #212]	; (800741c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8007348:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800734a:	2300      	movs	r3, #0
 800734c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800734e:	6939      	ldr	r1, [r7, #16]
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	1c5a      	adds	r2, r3, #1
 8007354:	4613      	mov	r3, r2
 8007356:	005b      	lsls	r3, r3, #1
 8007358:	4413      	add	r3, r2
 800735a:	00db      	lsls	r3, r3, #3
 800735c:	440b      	add	r3, r1
 800735e:	3304      	adds	r3, #4
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d008      	beq.n	8007378 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	3301      	adds	r3, #1
 800736a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	69fa      	ldr	r2, [r7, #28]
 8007372:	429a      	cmp	r2, r3
 8007374:	dbeb      	blt.n	800734e <SEGGER_RTT_AllocUpBuffer+0x36>
 8007376:	e000      	b.n	800737a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8007378:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	69fa      	ldr	r2, [r7, #28]
 8007380:	429a      	cmp	r2, r3
 8007382:	da3f      	bge.n	8007404 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8007384:	6939      	ldr	r1, [r7, #16]
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	1c5a      	adds	r2, r3, #1
 800738a:	4613      	mov	r3, r2
 800738c:	005b      	lsls	r3, r3, #1
 800738e:	4413      	add	r3, r2
 8007390:	00db      	lsls	r3, r3, #3
 8007392:	440b      	add	r3, r1
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8007398:	6939      	ldr	r1, [r7, #16]
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	1c5a      	adds	r2, r3, #1
 800739e:	4613      	mov	r3, r2
 80073a0:	005b      	lsls	r3, r3, #1
 80073a2:	4413      	add	r3, r2
 80073a4:	00db      	lsls	r3, r3, #3
 80073a6:	440b      	add	r3, r1
 80073a8:	3304      	adds	r3, #4
 80073aa:	68ba      	ldr	r2, [r7, #8]
 80073ac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80073ae:	6939      	ldr	r1, [r7, #16]
 80073b0:	69fa      	ldr	r2, [r7, #28]
 80073b2:	4613      	mov	r3, r2
 80073b4:	005b      	lsls	r3, r3, #1
 80073b6:	4413      	add	r3, r2
 80073b8:	00db      	lsls	r3, r3, #3
 80073ba:	440b      	add	r3, r1
 80073bc:	3320      	adds	r3, #32
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80073c2:	6939      	ldr	r1, [r7, #16]
 80073c4:	69fa      	ldr	r2, [r7, #28]
 80073c6:	4613      	mov	r3, r2
 80073c8:	005b      	lsls	r3, r3, #1
 80073ca:	4413      	add	r3, r2
 80073cc:	00db      	lsls	r3, r3, #3
 80073ce:	440b      	add	r3, r1
 80073d0:	3328      	adds	r3, #40	; 0x28
 80073d2:	2200      	movs	r2, #0
 80073d4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80073d6:	6939      	ldr	r1, [r7, #16]
 80073d8:	69fa      	ldr	r2, [r7, #28]
 80073da:	4613      	mov	r3, r2
 80073dc:	005b      	lsls	r3, r3, #1
 80073de:	4413      	add	r3, r2
 80073e0:	00db      	lsls	r3, r3, #3
 80073e2:	440b      	add	r3, r1
 80073e4:	3324      	adds	r3, #36	; 0x24
 80073e6:	2200      	movs	r2, #0
 80073e8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80073ea:	6939      	ldr	r1, [r7, #16]
 80073ec:	69fa      	ldr	r2, [r7, #28]
 80073ee:	4613      	mov	r3, r2
 80073f0:	005b      	lsls	r3, r3, #1
 80073f2:	4413      	add	r3, r2
 80073f4:	00db      	lsls	r3, r3, #3
 80073f6:	440b      	add	r3, r1
 80073f8:	332c      	adds	r3, #44	; 0x2c
 80073fa:	683a      	ldr	r2, [r7, #0]
 80073fc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80073fe:	f3bf 8f5f 	dmb	sy
 8007402:	e002      	b.n	800740a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8007404:	f04f 33ff 	mov.w	r3, #4294967295
 8007408:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8007410:	69fb      	ldr	r3, [r7, #28]
}
 8007412:	4618      	mov	r0, r3
 8007414:	3720      	adds	r7, #32
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	20012ecc 	.word	0x20012ecc

08007420 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8007420:	b580      	push	{r7, lr}
 8007422:	b08a      	sub	sp, #40	; 0x28
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	607a      	str	r2, [r7, #4]
 800742c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800742e:	4b21      	ldr	r3, [pc, #132]	; (80074b4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8007430:	623b      	str	r3, [r7, #32]
 8007432:	6a3b      	ldr	r3, [r7, #32]
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	b2db      	uxtb	r3, r3
 8007438:	2b00      	cmp	r3, #0
 800743a:	d101      	bne.n	8007440 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800743c:	f7ff fe8c 	bl	8007158 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007440:	4b1c      	ldr	r3, [pc, #112]	; (80074b4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8007442:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2b02      	cmp	r3, #2
 8007448:	d82c      	bhi.n	80074a4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800744a:	f3ef 8311 	mrs	r3, BASEPRI
 800744e:	f04f 0120 	mov.w	r1, #32
 8007452:	f381 8811 	msr	BASEPRI, r1
 8007456:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	4613      	mov	r3, r2
 800745c:	005b      	lsls	r3, r3, #1
 800745e:	4413      	add	r3, r2
 8007460:	00db      	lsls	r3, r3, #3
 8007462:	3360      	adds	r3, #96	; 0x60
 8007464:	69fa      	ldr	r2, [r7, #28]
 8007466:	4413      	add	r3, r2
 8007468:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00e      	beq.n	800748e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	68ba      	ldr	r2, [r7, #8]
 8007474:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	683a      	ldr	r2, [r7, #0]
 8007480:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	2200      	movs	r2, #0
 8007486:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	2200      	movs	r2, #0
 800748c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007492:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8007494:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800749e:	2300      	movs	r3, #0
 80074a0:	627b      	str	r3, [r7, #36]	; 0x24
 80074a2:	e002      	b.n	80074aa <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80074a4:	f04f 33ff 	mov.w	r3, #4294967295
 80074a8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80074aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3728      	adds	r7, #40	; 0x28
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	20012ecc 	.word	0x20012ecc

080074b8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80074b8:	b480      	push	{r7}
 80074ba:	b087      	sub	sp, #28
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80074c4:	2300      	movs	r3, #0
 80074c6:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00f      	beq.n	80074ee <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80074ce:	e002      	b.n	80074d6 <_EncodeStr+0x1e>
      Len++;
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	3301      	adds	r3, #1
 80074d4:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 80074d6:	68ba      	ldr	r2, [r7, #8]
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	4413      	add	r3, r2
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1f6      	bne.n	80074d0 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 80074e2:	693a      	ldr	r2, [r7, #16]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d901      	bls.n	80074ee <_EncodeStr+0x36>
      Len = Limit;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	2bfe      	cmp	r3, #254	; 0xfe
 80074f2:	d806      	bhi.n	8007502 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	1c5a      	adds	r2, r3, #1
 80074f8:	60fa      	str	r2, [r7, #12]
 80074fa:	693a      	ldr	r2, [r7, #16]
 80074fc:	b2d2      	uxtb	r2, r2
 80074fe:	701a      	strb	r2, [r3, #0]
 8007500:	e011      	b.n	8007526 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	1c5a      	adds	r2, r3, #1
 8007506:	60fa      	str	r2, [r7, #12]
 8007508:	22ff      	movs	r2, #255	; 0xff
 800750a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	1c5a      	adds	r2, r3, #1
 8007510:	60fa      	str	r2, [r7, #12]
 8007512:	693a      	ldr	r2, [r7, #16]
 8007514:	b2d2      	uxtb	r2, r2
 8007516:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	0a19      	lsrs	r1, r3, #8
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	1c5a      	adds	r2, r3, #1
 8007520:	60fa      	str	r2, [r7, #12]
 8007522:	b2ca      	uxtb	r2, r1
 8007524:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8007526:	2300      	movs	r3, #0
 8007528:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800752a:	e00a      	b.n	8007542 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	1c53      	adds	r3, r2, #1
 8007530:	60bb      	str	r3, [r7, #8]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	1c59      	adds	r1, r3, #1
 8007536:	60f9      	str	r1, [r7, #12]
 8007538:	7812      	ldrb	r2, [r2, #0]
 800753a:	701a      	strb	r2, [r3, #0]
    n++;
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	3301      	adds	r3, #1
 8007540:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8007542:	697a      	ldr	r2, [r7, #20]
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	429a      	cmp	r2, r3
 8007548:	d3f0      	bcc.n	800752c <_EncodeStr+0x74>
  }
  return pPayload;
 800754a:	68fb      	ldr	r3, [r7, #12]
}
 800754c:	4618      	mov	r0, r3
 800754e:	371c      	adds	r7, #28
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	3307      	adds	r3, #7
}
 8007564:	4618      	mov	r0, r3
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007576:	4b35      	ldr	r3, [pc, #212]	; (800764c <_HandleIncomingPacket+0xdc>)
 8007578:	7e1b      	ldrb	r3, [r3, #24]
 800757a:	4618      	mov	r0, r3
 800757c:	1cfb      	adds	r3, r7, #3
 800757e:	2201      	movs	r2, #1
 8007580:	4619      	mov	r1, r3
 8007582:	f7ff fe43 	bl	800720c <SEGGER_RTT_ReadNoLock>
 8007586:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d052      	beq.n	8007634 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 800758e:	78fb      	ldrb	r3, [r7, #3]
 8007590:	2b80      	cmp	r3, #128	; 0x80
 8007592:	d031      	beq.n	80075f8 <_HandleIncomingPacket+0x88>
 8007594:	2b80      	cmp	r3, #128	; 0x80
 8007596:	dc40      	bgt.n	800761a <_HandleIncomingPacket+0xaa>
 8007598:	2b07      	cmp	r3, #7
 800759a:	dc15      	bgt.n	80075c8 <_HandleIncomingPacket+0x58>
 800759c:	2b00      	cmp	r3, #0
 800759e:	dd3c      	ble.n	800761a <_HandleIncomingPacket+0xaa>
 80075a0:	3b01      	subs	r3, #1
 80075a2:	2b06      	cmp	r3, #6
 80075a4:	d839      	bhi.n	800761a <_HandleIncomingPacket+0xaa>
 80075a6:	a201      	add	r2, pc, #4	; (adr r2, 80075ac <_HandleIncomingPacket+0x3c>)
 80075a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ac:	080075cf 	.word	0x080075cf
 80075b0:	080075d5 	.word	0x080075d5
 80075b4:	080075db 	.word	0x080075db
 80075b8:	080075e1 	.word	0x080075e1
 80075bc:	080075e7 	.word	0x080075e7
 80075c0:	080075ed 	.word	0x080075ed
 80075c4:	080075f3 	.word	0x080075f3
 80075c8:	2b7f      	cmp	r3, #127	; 0x7f
 80075ca:	d035      	beq.n	8007638 <_HandleIncomingPacket+0xc8>
 80075cc:	e025      	b.n	800761a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80075ce:	f000 fced 	bl	8007fac <SEGGER_SYSVIEW_Start>
      break;
 80075d2:	e036      	b.n	8007642 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80075d4:	f000 fda4 	bl	8008120 <SEGGER_SYSVIEW_Stop>
      break;
 80075d8:	e033      	b.n	8007642 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80075da:	f000 ff7d 	bl	80084d8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80075de:	e030      	b.n	8007642 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80075e0:	f000 ff42 	bl	8008468 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80075e4:	e02d      	b.n	8007642 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80075e6:	f000 fdc1 	bl	800816c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80075ea:	e02a      	b.n	8007642 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80075ec:	f001 fa10 	bl	8008a10 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80075f0:	e027      	b.n	8007642 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80075f2:	f001 f9ef 	bl	80089d4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80075f6:	e024      	b.n	8007642 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80075f8:	4b14      	ldr	r3, [pc, #80]	; (800764c <_HandleIncomingPacket+0xdc>)
 80075fa:	7e1b      	ldrb	r3, [r3, #24]
 80075fc:	4618      	mov	r0, r3
 80075fe:	1cfb      	adds	r3, r7, #3
 8007600:	2201      	movs	r2, #1
 8007602:	4619      	mov	r1, r3
 8007604:	f7ff fe02 	bl	800720c <SEGGER_RTT_ReadNoLock>
 8007608:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d015      	beq.n	800763c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8007610:	78fb      	ldrb	r3, [r7, #3]
 8007612:	4618      	mov	r0, r3
 8007614:	f001 f95e 	bl	80088d4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8007618:	e010      	b.n	800763c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800761a:	78fb      	ldrb	r3, [r7, #3]
 800761c:	b25b      	sxtb	r3, r3
 800761e:	2b00      	cmp	r3, #0
 8007620:	da0e      	bge.n	8007640 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007622:	4b0a      	ldr	r3, [pc, #40]	; (800764c <_HandleIncomingPacket+0xdc>)
 8007624:	7e1b      	ldrb	r3, [r3, #24]
 8007626:	4618      	mov	r0, r3
 8007628:	1cfb      	adds	r3, r7, #3
 800762a:	2201      	movs	r2, #1
 800762c:	4619      	mov	r1, r3
 800762e:	f7ff fded 	bl	800720c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8007632:	e005      	b.n	8007640 <_HandleIncomingPacket+0xd0>
    }
  }
 8007634:	bf00      	nop
 8007636:	e004      	b.n	8007642 <_HandleIncomingPacket+0xd2>
      break;
 8007638:	bf00      	nop
 800763a:	e002      	b.n	8007642 <_HandleIncomingPacket+0xd2>
      break;
 800763c:	bf00      	nop
 800763e:	e000      	b.n	8007642 <_HandleIncomingPacket+0xd2>
      break;
 8007640:	bf00      	nop
}
 8007642:	bf00      	nop
 8007644:	3708      	adds	r7, #8
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	2001438c 	.word	0x2001438c

08007650 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8007650:	b580      	push	{r7, lr}
 8007652:	b08c      	sub	sp, #48	; 0x30
 8007654:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8007656:	2301      	movs	r3, #1
 8007658:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800765a:	1d3b      	adds	r3, r7, #4
 800765c:	3301      	adds	r3, #1
 800765e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007664:	4b31      	ldr	r3, [pc, #196]	; (800772c <_TrySendOverflowPacket+0xdc>)
 8007666:	695b      	ldr	r3, [r3, #20]
 8007668:	62bb      	str	r3, [r7, #40]	; 0x28
 800766a:	e00b      	b.n	8007684 <_TrySendOverflowPacket+0x34>
 800766c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766e:	b2da      	uxtb	r2, r3
 8007670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007672:	1c59      	adds	r1, r3, #1
 8007674:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007676:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800767a:	b2d2      	uxtb	r2, r2
 800767c:	701a      	strb	r2, [r3, #0]
 800767e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007680:	09db      	lsrs	r3, r3, #7
 8007682:	62bb      	str	r3, [r7, #40]	; 0x28
 8007684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007686:	2b7f      	cmp	r3, #127	; 0x7f
 8007688:	d8f0      	bhi.n	800766c <_TrySendOverflowPacket+0x1c>
 800768a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800768c:	1c5a      	adds	r2, r3, #1
 800768e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007690:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007692:	b2d2      	uxtb	r2, r2
 8007694:	701a      	strb	r2, [r3, #0]
 8007696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007698:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800769a:	4b25      	ldr	r3, [pc, #148]	; (8007730 <_TrySendOverflowPacket+0xe0>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80076a0:	4b22      	ldr	r3, [pc, #136]	; (800772c <_TrySendOverflowPacket+0xdc>)
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	69ba      	ldr	r2, [r7, #24]
 80076a6:	1ad3      	subs	r3, r2, r3
 80076a8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	627b      	str	r3, [r7, #36]	; 0x24
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	623b      	str	r3, [r7, #32]
 80076b2:	e00b      	b.n	80076cc <_TrySendOverflowPacket+0x7c>
 80076b4:	6a3b      	ldr	r3, [r7, #32]
 80076b6:	b2da      	uxtb	r2, r3
 80076b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ba:	1c59      	adds	r1, r3, #1
 80076bc:	6279      	str	r1, [r7, #36]	; 0x24
 80076be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076c2:	b2d2      	uxtb	r2, r2
 80076c4:	701a      	strb	r2, [r3, #0]
 80076c6:	6a3b      	ldr	r3, [r7, #32]
 80076c8:	09db      	lsrs	r3, r3, #7
 80076ca:	623b      	str	r3, [r7, #32]
 80076cc:	6a3b      	ldr	r3, [r7, #32]
 80076ce:	2b7f      	cmp	r3, #127	; 0x7f
 80076d0:	d8f0      	bhi.n	80076b4 <_TrySendOverflowPacket+0x64>
 80076d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d4:	1c5a      	adds	r2, r3, #1
 80076d6:	627a      	str	r2, [r7, #36]	; 0x24
 80076d8:	6a3a      	ldr	r2, [r7, #32]
 80076da:	b2d2      	uxtb	r2, r2
 80076dc:	701a      	strb	r2, [r3, #0]
 80076de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80076e2:	4b12      	ldr	r3, [pc, #72]	; (800772c <_TrySendOverflowPacket+0xdc>)
 80076e4:	785b      	ldrb	r3, [r3, #1]
 80076e6:	4618      	mov	r0, r3
 80076e8:	1d3b      	adds	r3, r7, #4
 80076ea:	69fa      	ldr	r2, [r7, #28]
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	461a      	mov	r2, r3
 80076f0:	1d3b      	adds	r3, r7, #4
 80076f2:	4619      	mov	r1, r3
 80076f4:	f7f8 fd7c 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80076f8:	4603      	mov	r3, r0
 80076fa:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d009      	beq.n	8007716 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8007702:	4a0a      	ldr	r2, [pc, #40]	; (800772c <_TrySendOverflowPacket+0xdc>)
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8007708:	4b08      	ldr	r3, [pc, #32]	; (800772c <_TrySendOverflowPacket+0xdc>)
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	3b01      	subs	r3, #1
 800770e:	b2da      	uxtb	r2, r3
 8007710:	4b06      	ldr	r3, [pc, #24]	; (800772c <_TrySendOverflowPacket+0xdc>)
 8007712:	701a      	strb	r2, [r3, #0]
 8007714:	e004      	b.n	8007720 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8007716:	4b05      	ldr	r3, [pc, #20]	; (800772c <_TrySendOverflowPacket+0xdc>)
 8007718:	695b      	ldr	r3, [r3, #20]
 800771a:	3301      	adds	r3, #1
 800771c:	4a03      	ldr	r2, [pc, #12]	; (800772c <_TrySendOverflowPacket+0xdc>)
 800771e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8007720:	693b      	ldr	r3, [r7, #16]
}
 8007722:	4618      	mov	r0, r3
 8007724:	3730      	adds	r7, #48	; 0x30
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	2001438c 	.word	0x2001438c
 8007730:	e0001004 	.word	0xe0001004

08007734 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8007734:	b580      	push	{r7, lr}
 8007736:	b08a      	sub	sp, #40	; 0x28
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8007740:	4b98      	ldr	r3, [pc, #608]	; (80079a4 <_SendPacket+0x270>)
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d010      	beq.n	800776a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8007748:	4b96      	ldr	r3, [pc, #600]	; (80079a4 <_SendPacket+0x270>)
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	f000 812d 	beq.w	80079ac <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8007752:	4b94      	ldr	r3, [pc, #592]	; (80079a4 <_SendPacket+0x270>)
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	2b02      	cmp	r3, #2
 8007758:	d109      	bne.n	800776e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800775a:	f7ff ff79 	bl	8007650 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800775e:	4b91      	ldr	r3, [pc, #580]	; (80079a4 <_SendPacket+0x270>)
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	2b01      	cmp	r3, #1
 8007764:	f040 8124 	bne.w	80079b0 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8007768:	e001      	b.n	800776e <_SendPacket+0x3a>
    goto Send;
 800776a:	bf00      	nop
 800776c:	e000      	b.n	8007770 <_SendPacket+0x3c>
Send:
 800776e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2b1f      	cmp	r3, #31
 8007774:	d809      	bhi.n	800778a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8007776:	4b8b      	ldr	r3, [pc, #556]	; (80079a4 <_SendPacket+0x270>)
 8007778:	69da      	ldr	r2, [r3, #28]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	fa22 f303 	lsr.w	r3, r2, r3
 8007780:	f003 0301 	and.w	r3, r3, #1
 8007784:	2b00      	cmp	r3, #0
 8007786:	f040 8115 	bne.w	80079b4 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2b17      	cmp	r3, #23
 800778e:	d807      	bhi.n	80077a0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	3b01      	subs	r3, #1
 8007794:	60fb      	str	r3, [r7, #12]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	b2da      	uxtb	r2, r3
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	701a      	strb	r2, [r3, #0]
 800779e:	e0c4      	b.n	800792a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	1ad3      	subs	r3, r2, r3
 80077a6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	2b7f      	cmp	r3, #127	; 0x7f
 80077ac:	d912      	bls.n	80077d4 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	09da      	lsrs	r2, r3, #7
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	3b01      	subs	r3, #1
 80077b6:	60fb      	str	r3, [r7, #12]
 80077b8:	b2d2      	uxtb	r2, r2
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	3a01      	subs	r2, #1
 80077c6:	60fa      	str	r2, [r7, #12]
 80077c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80077cc:	b2da      	uxtb	r2, r3
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	701a      	strb	r2, [r3, #0]
 80077d2:	e006      	b.n	80077e2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	3b01      	subs	r3, #1
 80077d8:	60fb      	str	r3, [r7, #12]
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	b2da      	uxtb	r2, r3
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2b7e      	cmp	r3, #126	; 0x7e
 80077e6:	d807      	bhi.n	80077f8 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	3b01      	subs	r3, #1
 80077ec:	60fb      	str	r3, [r7, #12]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	b2da      	uxtb	r2, r3
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	701a      	strb	r2, [r3, #0]
 80077f6:	e098      	b.n	800792a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077fe:	d212      	bcs.n	8007826 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	09da      	lsrs	r2, r3, #7
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	3b01      	subs	r3, #1
 8007808:	60fb      	str	r3, [r7, #12]
 800780a:	b2d2      	uxtb	r2, r2
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	b2db      	uxtb	r3, r3
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	3a01      	subs	r2, #1
 8007818:	60fa      	str	r2, [r7, #12]
 800781a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800781e:	b2da      	uxtb	r2, r3
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	701a      	strb	r2, [r3, #0]
 8007824:	e081      	b.n	800792a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800782c:	d21d      	bcs.n	800786a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	0b9a      	lsrs	r2, r3, #14
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	3b01      	subs	r3, #1
 8007836:	60fb      	str	r3, [r7, #12]
 8007838:	b2d2      	uxtb	r2, r2
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	09db      	lsrs	r3, r3, #7
 8007842:	b2db      	uxtb	r3, r3
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	3a01      	subs	r2, #1
 8007848:	60fa      	str	r2, [r7, #12]
 800784a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800784e:	b2da      	uxtb	r2, r3
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	b2db      	uxtb	r3, r3
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	3a01      	subs	r2, #1
 800785c:	60fa      	str	r2, [r7, #12]
 800785e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007862:	b2da      	uxtb	r2, r3
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	701a      	strb	r2, [r3, #0]
 8007868:	e05f      	b.n	800792a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007870:	d228      	bcs.n	80078c4 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	0d5a      	lsrs	r2, r3, #21
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	3b01      	subs	r3, #1
 800787a:	60fb      	str	r3, [r7, #12]
 800787c:	b2d2      	uxtb	r2, r2
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	0b9b      	lsrs	r3, r3, #14
 8007886:	b2db      	uxtb	r3, r3
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	3a01      	subs	r2, #1
 800788c:	60fa      	str	r2, [r7, #12]
 800788e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007892:	b2da      	uxtb	r2, r3
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	09db      	lsrs	r3, r3, #7
 800789c:	b2db      	uxtb	r3, r3
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	3a01      	subs	r2, #1
 80078a2:	60fa      	str	r2, [r7, #12]
 80078a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80078a8:	b2da      	uxtb	r2, r3
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	3a01      	subs	r2, #1
 80078b6:	60fa      	str	r2, [r7, #12]
 80078b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80078bc:	b2da      	uxtb	r2, r3
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	701a      	strb	r2, [r3, #0]
 80078c2:	e032      	b.n	800792a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	0f1a      	lsrs	r2, r3, #28
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	3b01      	subs	r3, #1
 80078cc:	60fb      	str	r3, [r7, #12]
 80078ce:	b2d2      	uxtb	r2, r2
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	0d5b      	lsrs	r3, r3, #21
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	3a01      	subs	r2, #1
 80078de:	60fa      	str	r2, [r7, #12]
 80078e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80078e4:	b2da      	uxtb	r2, r3
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	0b9b      	lsrs	r3, r3, #14
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	3a01      	subs	r2, #1
 80078f4:	60fa      	str	r2, [r7, #12]
 80078f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80078fa:	b2da      	uxtb	r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	09db      	lsrs	r3, r3, #7
 8007904:	b2db      	uxtb	r3, r3
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	3a01      	subs	r2, #1
 800790a:	60fa      	str	r2, [r7, #12]
 800790c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007910:	b2da      	uxtb	r2, r3
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	b2db      	uxtb	r3, r3
 800791a:	68fa      	ldr	r2, [r7, #12]
 800791c:	3a01      	subs	r2, #1
 800791e:	60fa      	str	r2, [r7, #12]
 8007920:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007924:	b2da      	uxtb	r2, r3
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800792a:	4b1f      	ldr	r3, [pc, #124]	; (80079a8 <_SendPacket+0x274>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8007930:	4b1c      	ldr	r3, [pc, #112]	; (80079a4 <_SendPacket+0x270>)
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	69ba      	ldr	r2, [r7, #24]
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	627b      	str	r3, [r7, #36]	; 0x24
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	623b      	str	r3, [r7, #32]
 8007942:	e00b      	b.n	800795c <_SendPacket+0x228>
 8007944:	6a3b      	ldr	r3, [r7, #32]
 8007946:	b2da      	uxtb	r2, r3
 8007948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794a:	1c59      	adds	r1, r3, #1
 800794c:	6279      	str	r1, [r7, #36]	; 0x24
 800794e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007952:	b2d2      	uxtb	r2, r2
 8007954:	701a      	strb	r2, [r3, #0]
 8007956:	6a3b      	ldr	r3, [r7, #32]
 8007958:	09db      	lsrs	r3, r3, #7
 800795a:	623b      	str	r3, [r7, #32]
 800795c:	6a3b      	ldr	r3, [r7, #32]
 800795e:	2b7f      	cmp	r3, #127	; 0x7f
 8007960:	d8f0      	bhi.n	8007944 <_SendPacket+0x210>
 8007962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007964:	1c5a      	adds	r2, r3, #1
 8007966:	627a      	str	r2, [r7, #36]	; 0x24
 8007968:	6a3a      	ldr	r2, [r7, #32]
 800796a:	b2d2      	uxtb	r2, r2
 800796c:	701a      	strb	r2, [r3, #0]
 800796e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007970:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8007972:	4b0c      	ldr	r3, [pc, #48]	; (80079a4 <_SendPacket+0x270>)
 8007974:	785b      	ldrb	r3, [r3, #1]
 8007976:	4618      	mov	r0, r3
 8007978:	68ba      	ldr	r2, [r7, #8]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	461a      	mov	r2, r3
 8007980:	68f9      	ldr	r1, [r7, #12]
 8007982:	f7f8 fc35 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007986:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d003      	beq.n	8007996 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800798e:	4a05      	ldr	r2, [pc, #20]	; (80079a4 <_SendPacket+0x270>)
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	60d3      	str	r3, [r2, #12]
 8007994:	e00f      	b.n	80079b6 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8007996:	4b03      	ldr	r3, [pc, #12]	; (80079a4 <_SendPacket+0x270>)
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	3301      	adds	r3, #1
 800799c:	b2da      	uxtb	r2, r3
 800799e:	4b01      	ldr	r3, [pc, #4]	; (80079a4 <_SendPacket+0x270>)
 80079a0:	701a      	strb	r2, [r3, #0]
 80079a2:	e008      	b.n	80079b6 <_SendPacket+0x282>
 80079a4:	2001438c 	.word	0x2001438c
 80079a8:	e0001004 	.word	0xe0001004
    goto SendDone;
 80079ac:	bf00      	nop
 80079ae:	e002      	b.n	80079b6 <_SendPacket+0x282>
      goto SendDone;
 80079b0:	bf00      	nop
 80079b2:	e000      	b.n	80079b6 <_SendPacket+0x282>
      goto SendDone;
 80079b4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80079b6:	4b14      	ldr	r3, [pc, #80]	; (8007a08 <_SendPacket+0x2d4>)
 80079b8:	7e1b      	ldrb	r3, [r3, #24]
 80079ba:	4619      	mov	r1, r3
 80079bc:	4a13      	ldr	r2, [pc, #76]	; (8007a0c <_SendPacket+0x2d8>)
 80079be:	460b      	mov	r3, r1
 80079c0:	005b      	lsls	r3, r3, #1
 80079c2:	440b      	add	r3, r1
 80079c4:	00db      	lsls	r3, r3, #3
 80079c6:	4413      	add	r3, r2
 80079c8:	336c      	adds	r3, #108	; 0x6c
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	4b0e      	ldr	r3, [pc, #56]	; (8007a08 <_SendPacket+0x2d4>)
 80079ce:	7e1b      	ldrb	r3, [r3, #24]
 80079d0:	4618      	mov	r0, r3
 80079d2:	490e      	ldr	r1, [pc, #56]	; (8007a0c <_SendPacket+0x2d8>)
 80079d4:	4603      	mov	r3, r0
 80079d6:	005b      	lsls	r3, r3, #1
 80079d8:	4403      	add	r3, r0
 80079da:	00db      	lsls	r3, r3, #3
 80079dc:	440b      	add	r3, r1
 80079de:	3370      	adds	r3, #112	; 0x70
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d00b      	beq.n	80079fe <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80079e6:	4b08      	ldr	r3, [pc, #32]	; (8007a08 <_SendPacket+0x2d4>)
 80079e8:	789b      	ldrb	r3, [r3, #2]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d107      	bne.n	80079fe <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80079ee:	4b06      	ldr	r3, [pc, #24]	; (8007a08 <_SendPacket+0x2d4>)
 80079f0:	2201      	movs	r2, #1
 80079f2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80079f4:	f7ff fdbc 	bl	8007570 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80079f8:	4b03      	ldr	r3, [pc, #12]	; (8007a08 <_SendPacket+0x2d4>)
 80079fa:	2200      	movs	r2, #0
 80079fc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80079fe:	bf00      	nop
 8007a00:	3728      	adds	r7, #40	; 0x28
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	2001438c 	.word	0x2001438c
 8007a0c:	20012ecc 	.word	0x20012ecc

08007a10 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b0a2      	sub	sp, #136	; 0x88
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 8007a20:	2300      	movs	r3, #0
 8007a22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 8007a26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a28:	1c5a      	adds	r2, r3, #1
 8007a2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 8007a32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d01d      	beq.n	8007a76 <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 8007a3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a3e:	2b25      	cmp	r3, #37	; 0x25
 8007a40:	d1f1      	bne.n	8007a26 <_VPrintHost+0x16>
      c = *p;
 8007a42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	1d19      	adds	r1, r3, #4
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	6011      	str	r1, [r2, #0]
 8007a54:	6819      	ldr	r1, [r3, #0]
 8007a56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a5a:	1c5a      	adds	r2, r3, #1
 8007a5c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007a60:	460a      	mov	r2, r1
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	3388      	adds	r3, #136	; 0x88
 8007a66:	443b      	add	r3, r7
 8007a68:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 8007a6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a70:	2b10      	cmp	r3, #16
 8007a72:	d002      	beq.n	8007a7a <_VPrintHost+0x6a>
    c = *p++;
 8007a74:	e7d7      	b.n	8007a26 <_VPrintHost+0x16>
      break;
 8007a76:	bf00      	nop
 8007a78:	e000      	b.n	8007a7c <_VPrintHost+0x6c>
        break;
 8007a7a:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 8007a7c:	f3ef 8311 	mrs	r3, BASEPRI
 8007a80:	f04f 0120 	mov.w	r1, #32
 8007a84:	f381 8811 	msr	BASEPRI, r1
 8007a88:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a8a:	483f      	ldr	r0, [pc, #252]	; (8007b88 <_VPrintHost+0x178>)
 8007a8c:	f7ff fd64 	bl	8007558 <_PreparePacket>
 8007a90:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007a92:	2280      	movs	r2, #128	; 0x80
 8007a94:	68f9      	ldr	r1, [r7, #12]
 8007a96:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007a98:	f7ff fd0e 	bl	80074b8 <_EncodeStr>
 8007a9c:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 8007a9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007aa0:	677b      	str	r3, [r7, #116]	; 0x74
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	673b      	str	r3, [r7, #112]	; 0x70
 8007aa6:	e00b      	b.n	8007ac0 <_VPrintHost+0xb0>
 8007aa8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007aaa:	b2da      	uxtb	r2, r3
 8007aac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007aae:	1c59      	adds	r1, r3, #1
 8007ab0:	6779      	str	r1, [r7, #116]	; 0x74
 8007ab2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ab6:	b2d2      	uxtb	r2, r2
 8007ab8:	701a      	strb	r2, [r3, #0]
 8007aba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007abc:	09db      	lsrs	r3, r3, #7
 8007abe:	673b      	str	r3, [r7, #112]	; 0x70
 8007ac0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ac2:	2b7f      	cmp	r3, #127	; 0x7f
 8007ac4:	d8f0      	bhi.n	8007aa8 <_VPrintHost+0x98>
 8007ac6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ac8:	1c5a      	adds	r2, r3, #1
 8007aca:	677a      	str	r2, [r7, #116]	; 0x74
 8007acc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007ace:	b2d2      	uxtb	r2, r2
 8007ad0:	701a      	strb	r2, [r3, #0]
 8007ad2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ad4:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 8007ad6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ad8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ada:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ade:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ae0:	e00b      	b.n	8007afa <_VPrintHost+0xea>
 8007ae2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ae4:	b2da      	uxtb	r2, r3
 8007ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ae8:	1c59      	adds	r1, r3, #1
 8007aea:	66f9      	str	r1, [r7, #108]	; 0x6c
 8007aec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007af0:	b2d2      	uxtb	r2, r2
 8007af2:	701a      	strb	r2, [r3, #0]
 8007af4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007af6:	09db      	lsrs	r3, r3, #7
 8007af8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007afa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007afc:	2b7f      	cmp	r3, #127	; 0x7f
 8007afe:	d8f0      	bhi.n	8007ae2 <_VPrintHost+0xd2>
 8007b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b02:	1c5a      	adds	r2, r3, #1
 8007b04:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007b06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b08:	b2d2      	uxtb	r2, r2
 8007b0a:	701a      	strb	r2, [r3, #0]
 8007b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b0e:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 8007b10:	f107 0314 	add.w	r3, r7, #20
 8007b14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8007b18:	e022      	b.n	8007b60 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 8007b1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b1c:	667b      	str	r3, [r7, #100]	; 0x64
 8007b1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	663b      	str	r3, [r7, #96]	; 0x60
 8007b26:	e00b      	b.n	8007b40 <_VPrintHost+0x130>
 8007b28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b2a:	b2da      	uxtb	r2, r3
 8007b2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b2e:	1c59      	adds	r1, r3, #1
 8007b30:	6679      	str	r1, [r7, #100]	; 0x64
 8007b32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b36:	b2d2      	uxtb	r2, r2
 8007b38:	701a      	strb	r2, [r3, #0]
 8007b3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b3c:	09db      	lsrs	r3, r3, #7
 8007b3e:	663b      	str	r3, [r7, #96]	; 0x60
 8007b40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b42:	2b7f      	cmp	r3, #127	; 0x7f
 8007b44:	d8f0      	bhi.n	8007b28 <_VPrintHost+0x118>
 8007b46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b48:	1c5a      	adds	r2, r3, #1
 8007b4a:	667a      	str	r2, [r7, #100]	; 0x64
 8007b4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007b4e:	b2d2      	uxtb	r2, r2
 8007b50:	701a      	strb	r2, [r3, #0]
 8007b52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b54:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 8007b56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b5a:	3304      	adds	r3, #4
 8007b5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8007b60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b64:	1e5a      	subs	r2, r3, #1
 8007b66:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1d5      	bne.n	8007b1a <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007b6e:	221a      	movs	r2, #26
 8007b70:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007b72:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007b74:	f7ff fdde 	bl	8007734 <_SendPacket>
    RECORD_END();
 8007b78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b7a:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3788      	adds	r7, #136	; 0x88
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	200143bc 	.word	0x200143bc

08007b8c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b086      	sub	sp, #24
 8007b90:	af02      	add	r7, sp, #8
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
 8007b98:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007ba0:	4917      	ldr	r1, [pc, #92]	; (8007c00 <SEGGER_SYSVIEW_Init+0x74>)
 8007ba2:	4818      	ldr	r0, [pc, #96]	; (8007c04 <SEGGER_SYSVIEW_Init+0x78>)
 8007ba4:	f7ff fbb8 	bl	8007318 <SEGGER_RTT_AllocUpBuffer>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	b2da      	uxtb	r2, r3
 8007bac:	4b16      	ldr	r3, [pc, #88]	; (8007c08 <SEGGER_SYSVIEW_Init+0x7c>)
 8007bae:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8007bb0:	4b15      	ldr	r3, [pc, #84]	; (8007c08 <SEGGER_SYSVIEW_Init+0x7c>)
 8007bb2:	785a      	ldrb	r2, [r3, #1]
 8007bb4:	4b14      	ldr	r3, [pc, #80]	; (8007c08 <SEGGER_SYSVIEW_Init+0x7c>)
 8007bb6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8007bb8:	4b13      	ldr	r3, [pc, #76]	; (8007c08 <SEGGER_SYSVIEW_Init+0x7c>)
 8007bba:	7e1b      	ldrb	r3, [r3, #24]
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	9300      	str	r3, [sp, #0]
 8007bc2:	2308      	movs	r3, #8
 8007bc4:	4a11      	ldr	r2, [pc, #68]	; (8007c0c <SEGGER_SYSVIEW_Init+0x80>)
 8007bc6:	490f      	ldr	r1, [pc, #60]	; (8007c04 <SEGGER_SYSVIEW_Init+0x78>)
 8007bc8:	f7ff fc2a 	bl	8007420 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8007bcc:	4b0e      	ldr	r3, [pc, #56]	; (8007c08 <SEGGER_SYSVIEW_Init+0x7c>)
 8007bce:	2200      	movs	r2, #0
 8007bd0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007bd2:	4b0f      	ldr	r3, [pc, #60]	; (8007c10 <SEGGER_SYSVIEW_Init+0x84>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a0c      	ldr	r2, [pc, #48]	; (8007c08 <SEGGER_SYSVIEW_Init+0x7c>)
 8007bd8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8007bda:	4a0b      	ldr	r2, [pc, #44]	; (8007c08 <SEGGER_SYSVIEW_Init+0x7c>)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8007be0:	4a09      	ldr	r2, [pc, #36]	; (8007c08 <SEGGER_SYSVIEW_Init+0x7c>)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8007be6:	4a08      	ldr	r2, [pc, #32]	; (8007c08 <SEGGER_SYSVIEW_Init+0x7c>)
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8007bec:	4a06      	ldr	r2, [pc, #24]	; (8007c08 <SEGGER_SYSVIEW_Init+0x7c>)
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8007bf2:	4b05      	ldr	r3, [pc, #20]	; (8007c08 <SEGGER_SYSVIEW_Init+0x7c>)
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8007bf8:	bf00      	nop
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	20013384 	.word	0x20013384
 8007c04:	080090cc 	.word	0x080090cc
 8007c08:	2001438c 	.word	0x2001438c
 8007c0c:	20014384 	.word	0x20014384
 8007c10:	e0001004 	.word	0xe0001004

08007c14 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8007c1c:	4a04      	ldr	r2, [pc, #16]	; (8007c30 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6113      	str	r3, [r2, #16]
}
 8007c22:	bf00      	nop
 8007c24:	370c      	adds	r7, #12
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	2001438c 	.word	0x2001438c

08007c34 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007c3c:	f3ef 8311 	mrs	r3, BASEPRI
 8007c40:	f04f 0120 	mov.w	r1, #32
 8007c44:	f381 8811 	msr	BASEPRI, r1
 8007c48:	60fb      	str	r3, [r7, #12]
 8007c4a:	4808      	ldr	r0, [pc, #32]	; (8007c6c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8007c4c:	f7ff fc84 	bl	8007558 <_PreparePacket>
 8007c50:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	68b9      	ldr	r1, [r7, #8]
 8007c56:	68b8      	ldr	r0, [r7, #8]
 8007c58:	f7ff fd6c 	bl	8007734 <_SendPacket>
  RECORD_END();
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f383 8811 	msr	BASEPRI, r3
}
 8007c62:	bf00      	nop
 8007c64:	3710      	adds	r7, #16
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
 8007c6a:	bf00      	nop
 8007c6c:	200143bc 	.word	0x200143bc

08007c70 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b088      	sub	sp, #32
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007c7a:	f3ef 8311 	mrs	r3, BASEPRI
 8007c7e:	f04f 0120 	mov.w	r1, #32
 8007c82:	f381 8811 	msr	BASEPRI, r1
 8007c86:	617b      	str	r3, [r7, #20]
 8007c88:	4816      	ldr	r0, [pc, #88]	; (8007ce4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8007c8a:	f7ff fc65 	bl	8007558 <_PreparePacket>
 8007c8e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	61fb      	str	r3, [r7, #28]
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	61bb      	str	r3, [r7, #24]
 8007c9c:	e00b      	b.n	8007cb6 <SEGGER_SYSVIEW_RecordU32+0x46>
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	b2da      	uxtb	r2, r3
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	1c59      	adds	r1, r3, #1
 8007ca6:	61f9      	str	r1, [r7, #28]
 8007ca8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007cac:	b2d2      	uxtb	r2, r2
 8007cae:	701a      	strb	r2, [r3, #0]
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	09db      	lsrs	r3, r3, #7
 8007cb4:	61bb      	str	r3, [r7, #24]
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	2b7f      	cmp	r3, #127	; 0x7f
 8007cba:	d8f0      	bhi.n	8007c9e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	1c5a      	adds	r2, r3, #1
 8007cc0:	61fa      	str	r2, [r7, #28]
 8007cc2:	69ba      	ldr	r2, [r7, #24]
 8007cc4:	b2d2      	uxtb	r2, r2
 8007cc6:	701a      	strb	r2, [r3, #0]
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	68f9      	ldr	r1, [r7, #12]
 8007cd0:	6938      	ldr	r0, [r7, #16]
 8007cd2:	f7ff fd2f 	bl	8007734 <_SendPacket>
  RECORD_END();
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	f383 8811 	msr	BASEPRI, r3
}
 8007cdc:	bf00      	nop
 8007cde:	3720      	adds	r7, #32
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	200143bc 	.word	0x200143bc

08007ce8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b08c      	sub	sp, #48	; 0x30
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007cf4:	f3ef 8311 	mrs	r3, BASEPRI
 8007cf8:	f04f 0120 	mov.w	r1, #32
 8007cfc:	f381 8811 	msr	BASEPRI, r1
 8007d00:	61fb      	str	r3, [r7, #28]
 8007d02:	4825      	ldr	r0, [pc, #148]	; (8007d98 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8007d04:	f7ff fc28 	bl	8007558 <_PreparePacket>
 8007d08:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d16:	e00b      	b.n	8007d30 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8007d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1a:	b2da      	uxtb	r2, r3
 8007d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d1e:	1c59      	adds	r1, r3, #1
 8007d20:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007d22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d26:	b2d2      	uxtb	r2, r2
 8007d28:	701a      	strb	r2, [r3, #0]
 8007d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2c:	09db      	lsrs	r3, r3, #7
 8007d2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d32:	2b7f      	cmp	r3, #127	; 0x7f
 8007d34:	d8f0      	bhi.n	8007d18 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8007d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d38:	1c5a      	adds	r2, r3, #1
 8007d3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d3e:	b2d2      	uxtb	r2, r2
 8007d40:	701a      	strb	r2, [r3, #0]
 8007d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d44:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	627b      	str	r3, [r7, #36]	; 0x24
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	623b      	str	r3, [r7, #32]
 8007d4e:	e00b      	b.n	8007d68 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8007d50:	6a3b      	ldr	r3, [r7, #32]
 8007d52:	b2da      	uxtb	r2, r3
 8007d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d56:	1c59      	adds	r1, r3, #1
 8007d58:	6279      	str	r1, [r7, #36]	; 0x24
 8007d5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d5e:	b2d2      	uxtb	r2, r2
 8007d60:	701a      	strb	r2, [r3, #0]
 8007d62:	6a3b      	ldr	r3, [r7, #32]
 8007d64:	09db      	lsrs	r3, r3, #7
 8007d66:	623b      	str	r3, [r7, #32]
 8007d68:	6a3b      	ldr	r3, [r7, #32]
 8007d6a:	2b7f      	cmp	r3, #127	; 0x7f
 8007d6c:	d8f0      	bhi.n	8007d50 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8007d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d70:	1c5a      	adds	r2, r3, #1
 8007d72:	627a      	str	r2, [r7, #36]	; 0x24
 8007d74:	6a3a      	ldr	r2, [r7, #32]
 8007d76:	b2d2      	uxtb	r2, r2
 8007d78:	701a      	strb	r2, [r3, #0]
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007d7e:	68fa      	ldr	r2, [r7, #12]
 8007d80:	6979      	ldr	r1, [r7, #20]
 8007d82:	69b8      	ldr	r0, [r7, #24]
 8007d84:	f7ff fcd6 	bl	8007734 <_SendPacket>
  RECORD_END();
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	f383 8811 	msr	BASEPRI, r3
}
 8007d8e:	bf00      	nop
 8007d90:	3730      	adds	r7, #48	; 0x30
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop
 8007d98:	200143bc 	.word	0x200143bc

08007d9c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b08e      	sub	sp, #56	; 0x38
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]
 8007da8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8007daa:	f3ef 8311 	mrs	r3, BASEPRI
 8007dae:	f04f 0120 	mov.w	r1, #32
 8007db2:	f381 8811 	msr	BASEPRI, r1
 8007db6:	61fb      	str	r3, [r7, #28]
 8007db8:	4832      	ldr	r0, [pc, #200]	; (8007e84 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8007dba:	f7ff fbcd 	bl	8007558 <_PreparePacket>
 8007dbe:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	637b      	str	r3, [r7, #52]	; 0x34
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	633b      	str	r3, [r7, #48]	; 0x30
 8007dcc:	e00b      	b.n	8007de6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8007dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd0:	b2da      	uxtb	r2, r3
 8007dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd4:	1c59      	adds	r1, r3, #1
 8007dd6:	6379      	str	r1, [r7, #52]	; 0x34
 8007dd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ddc:	b2d2      	uxtb	r2, r2
 8007dde:	701a      	strb	r2, [r3, #0]
 8007de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de2:	09db      	lsrs	r3, r3, #7
 8007de4:	633b      	str	r3, [r7, #48]	; 0x30
 8007de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de8:	2b7f      	cmp	r3, #127	; 0x7f
 8007dea:	d8f0      	bhi.n	8007dce <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8007dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dee:	1c5a      	adds	r2, r3, #1
 8007df0:	637a      	str	r2, [r7, #52]	; 0x34
 8007df2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007df4:	b2d2      	uxtb	r2, r2
 8007df6:	701a      	strb	r2, [r3, #0]
 8007df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dfa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e04:	e00b      	b.n	8007e1e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8007e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e08:	b2da      	uxtb	r2, r3
 8007e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e0c:	1c59      	adds	r1, r3, #1
 8007e0e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007e10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e14:	b2d2      	uxtb	r2, r2
 8007e16:	701a      	strb	r2, [r3, #0]
 8007e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1a:	09db      	lsrs	r3, r3, #7
 8007e1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e20:	2b7f      	cmp	r3, #127	; 0x7f
 8007e22:	d8f0      	bhi.n	8007e06 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8007e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e26:	1c5a      	adds	r2, r3, #1
 8007e28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e2c:	b2d2      	uxtb	r2, r2
 8007e2e:	701a      	strb	r2, [r3, #0]
 8007e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e32:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	627b      	str	r3, [r7, #36]	; 0x24
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	623b      	str	r3, [r7, #32]
 8007e3c:	e00b      	b.n	8007e56 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8007e3e:	6a3b      	ldr	r3, [r7, #32]
 8007e40:	b2da      	uxtb	r2, r3
 8007e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e44:	1c59      	adds	r1, r3, #1
 8007e46:	6279      	str	r1, [r7, #36]	; 0x24
 8007e48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e4c:	b2d2      	uxtb	r2, r2
 8007e4e:	701a      	strb	r2, [r3, #0]
 8007e50:	6a3b      	ldr	r3, [r7, #32]
 8007e52:	09db      	lsrs	r3, r3, #7
 8007e54:	623b      	str	r3, [r7, #32]
 8007e56:	6a3b      	ldr	r3, [r7, #32]
 8007e58:	2b7f      	cmp	r3, #127	; 0x7f
 8007e5a:	d8f0      	bhi.n	8007e3e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8007e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5e:	1c5a      	adds	r2, r3, #1
 8007e60:	627a      	str	r2, [r7, #36]	; 0x24
 8007e62:	6a3a      	ldr	r2, [r7, #32]
 8007e64:	b2d2      	uxtb	r2, r2
 8007e66:	701a      	strb	r2, [r3, #0]
 8007e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	6979      	ldr	r1, [r7, #20]
 8007e70:	69b8      	ldr	r0, [r7, #24]
 8007e72:	f7ff fc5f 	bl	8007734 <_SendPacket>
  RECORD_END();
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	f383 8811 	msr	BASEPRI, r3
}
 8007e7c:	bf00      	nop
 8007e7e:	3738      	adds	r7, #56	; 0x38
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	200143bc 	.word	0x200143bc

08007e88 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b090      	sub	sp, #64	; 0x40
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
 8007e94:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007e96:	f3ef 8311 	mrs	r3, BASEPRI
 8007e9a:	f04f 0120 	mov.w	r1, #32
 8007e9e:	f381 8811 	msr	BASEPRI, r1
 8007ea2:	61fb      	str	r3, [r7, #28]
 8007ea4:	4840      	ldr	r0, [pc, #256]	; (8007fa8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8007ea6:	f7ff fb57 	bl	8007558 <_PreparePacket>
 8007eaa:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8007eb8:	e00b      	b.n	8007ed2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8007eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ebc:	b2da      	uxtb	r2, r3
 8007ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ec0:	1c59      	adds	r1, r3, #1
 8007ec2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007ec4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ec8:	b2d2      	uxtb	r2, r2
 8007eca:	701a      	strb	r2, [r3, #0]
 8007ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ece:	09db      	lsrs	r3, r3, #7
 8007ed0:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed4:	2b7f      	cmp	r3, #127	; 0x7f
 8007ed6:	d8f0      	bhi.n	8007eba <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8007ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eda:	1c5a      	adds	r2, r3, #1
 8007edc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007ede:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ee0:	b2d2      	uxtb	r2, r2
 8007ee2:	701a      	strb	r2, [r3, #0]
 8007ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ee6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	637b      	str	r3, [r7, #52]	; 0x34
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	633b      	str	r3, [r7, #48]	; 0x30
 8007ef0:	e00b      	b.n	8007f0a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8007ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef4:	b2da      	uxtb	r2, r3
 8007ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef8:	1c59      	adds	r1, r3, #1
 8007efa:	6379      	str	r1, [r7, #52]	; 0x34
 8007efc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f00:	b2d2      	uxtb	r2, r2
 8007f02:	701a      	strb	r2, [r3, #0]
 8007f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f06:	09db      	lsrs	r3, r3, #7
 8007f08:	633b      	str	r3, [r7, #48]	; 0x30
 8007f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0c:	2b7f      	cmp	r3, #127	; 0x7f
 8007f0e:	d8f0      	bhi.n	8007ef2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8007f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f12:	1c5a      	adds	r2, r3, #1
 8007f14:	637a      	str	r2, [r7, #52]	; 0x34
 8007f16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f18:	b2d2      	uxtb	r2, r2
 8007f1a:	701a      	strb	r2, [r3, #0]
 8007f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f1e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f28:	e00b      	b.n	8007f42 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8007f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2c:	b2da      	uxtb	r2, r3
 8007f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f30:	1c59      	adds	r1, r3, #1
 8007f32:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007f34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f38:	b2d2      	uxtb	r2, r2
 8007f3a:	701a      	strb	r2, [r3, #0]
 8007f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f3e:	09db      	lsrs	r3, r3, #7
 8007f40:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f44:	2b7f      	cmp	r3, #127	; 0x7f
 8007f46:	d8f0      	bhi.n	8007f2a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8007f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4a:	1c5a      	adds	r2, r3, #1
 8007f4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f50:	b2d2      	uxtb	r2, r2
 8007f52:	701a      	strb	r2, [r3, #0]
 8007f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f56:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8007f5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f5e:	623b      	str	r3, [r7, #32]
 8007f60:	e00b      	b.n	8007f7a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8007f62:	6a3b      	ldr	r3, [r7, #32]
 8007f64:	b2da      	uxtb	r2, r3
 8007f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f68:	1c59      	adds	r1, r3, #1
 8007f6a:	6279      	str	r1, [r7, #36]	; 0x24
 8007f6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f70:	b2d2      	uxtb	r2, r2
 8007f72:	701a      	strb	r2, [r3, #0]
 8007f74:	6a3b      	ldr	r3, [r7, #32]
 8007f76:	09db      	lsrs	r3, r3, #7
 8007f78:	623b      	str	r3, [r7, #32]
 8007f7a:	6a3b      	ldr	r3, [r7, #32]
 8007f7c:	2b7f      	cmp	r3, #127	; 0x7f
 8007f7e:	d8f0      	bhi.n	8007f62 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8007f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f82:	1c5a      	adds	r2, r3, #1
 8007f84:	627a      	str	r2, [r7, #36]	; 0x24
 8007f86:	6a3a      	ldr	r2, [r7, #32]
 8007f88:	b2d2      	uxtb	r2, r2
 8007f8a:	701a      	strb	r2, [r3, #0]
 8007f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	6979      	ldr	r1, [r7, #20]
 8007f94:	69b8      	ldr	r0, [r7, #24]
 8007f96:	f7ff fbcd 	bl	8007734 <_SendPacket>
  RECORD_END();
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	f383 8811 	msr	BASEPRI, r3
}
 8007fa0:	bf00      	nop
 8007fa2:	3740      	adds	r7, #64	; 0x40
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	200143bc 	.word	0x200143bc

08007fac <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b08c      	sub	sp, #48	; 0x30
 8007fb0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8007fb2:	4b58      	ldr	r3, [pc, #352]	; (8008114 <SEGGER_SYSVIEW_Start+0x168>)
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8007fb8:	f3ef 8311 	mrs	r3, BASEPRI
 8007fbc:	f04f 0120 	mov.w	r1, #32
 8007fc0:	f381 8811 	msr	BASEPRI, r1
 8007fc4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8007fc6:	4b53      	ldr	r3, [pc, #332]	; (8008114 <SEGGER_SYSVIEW_Start+0x168>)
 8007fc8:	785b      	ldrb	r3, [r3, #1]
 8007fca:	220a      	movs	r2, #10
 8007fcc:	4952      	ldr	r1, [pc, #328]	; (8008118 <SEGGER_SYSVIEW_Start+0x16c>)
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7f8 f90e 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8007fda:	200a      	movs	r0, #10
 8007fdc:	f7ff fe2a 	bl	8007c34 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007fe0:	f3ef 8311 	mrs	r3, BASEPRI
 8007fe4:	f04f 0120 	mov.w	r1, #32
 8007fe8:	f381 8811 	msr	BASEPRI, r1
 8007fec:	60bb      	str	r3, [r7, #8]
 8007fee:	484b      	ldr	r0, [pc, #300]	; (800811c <SEGGER_SYSVIEW_Start+0x170>)
 8007ff0:	f7ff fab2 	bl	8007558 <_PreparePacket>
 8007ff4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ffe:	4b45      	ldr	r3, [pc, #276]	; (8008114 <SEGGER_SYSVIEW_Start+0x168>)
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	62bb      	str	r3, [r7, #40]	; 0x28
 8008004:	e00b      	b.n	800801e <SEGGER_SYSVIEW_Start+0x72>
 8008006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008008:	b2da      	uxtb	r2, r3
 800800a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800c:	1c59      	adds	r1, r3, #1
 800800e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008010:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008014:	b2d2      	uxtb	r2, r2
 8008016:	701a      	strb	r2, [r3, #0]
 8008018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801a:	09db      	lsrs	r3, r3, #7
 800801c:	62bb      	str	r3, [r7, #40]	; 0x28
 800801e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008020:	2b7f      	cmp	r3, #127	; 0x7f
 8008022:	d8f0      	bhi.n	8008006 <SEGGER_SYSVIEW_Start+0x5a>
 8008024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008026:	1c5a      	adds	r2, r3, #1
 8008028:	62fa      	str	r2, [r7, #44]	; 0x2c
 800802a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800802c:	b2d2      	uxtb	r2, r2
 800802e:	701a      	strb	r2, [r3, #0]
 8008030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008032:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	627b      	str	r3, [r7, #36]	; 0x24
 8008038:	4b36      	ldr	r3, [pc, #216]	; (8008114 <SEGGER_SYSVIEW_Start+0x168>)
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	623b      	str	r3, [r7, #32]
 800803e:	e00b      	b.n	8008058 <SEGGER_SYSVIEW_Start+0xac>
 8008040:	6a3b      	ldr	r3, [r7, #32]
 8008042:	b2da      	uxtb	r2, r3
 8008044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008046:	1c59      	adds	r1, r3, #1
 8008048:	6279      	str	r1, [r7, #36]	; 0x24
 800804a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800804e:	b2d2      	uxtb	r2, r2
 8008050:	701a      	strb	r2, [r3, #0]
 8008052:	6a3b      	ldr	r3, [r7, #32]
 8008054:	09db      	lsrs	r3, r3, #7
 8008056:	623b      	str	r3, [r7, #32]
 8008058:	6a3b      	ldr	r3, [r7, #32]
 800805a:	2b7f      	cmp	r3, #127	; 0x7f
 800805c:	d8f0      	bhi.n	8008040 <SEGGER_SYSVIEW_Start+0x94>
 800805e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008060:	1c5a      	adds	r2, r3, #1
 8008062:	627a      	str	r2, [r7, #36]	; 0x24
 8008064:	6a3a      	ldr	r2, [r7, #32]
 8008066:	b2d2      	uxtb	r2, r2
 8008068:	701a      	strb	r2, [r3, #0]
 800806a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	61fb      	str	r3, [r7, #28]
 8008072:	4b28      	ldr	r3, [pc, #160]	; (8008114 <SEGGER_SYSVIEW_Start+0x168>)
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	61bb      	str	r3, [r7, #24]
 8008078:	e00b      	b.n	8008092 <SEGGER_SYSVIEW_Start+0xe6>
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	b2da      	uxtb	r2, r3
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	1c59      	adds	r1, r3, #1
 8008082:	61f9      	str	r1, [r7, #28]
 8008084:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008088:	b2d2      	uxtb	r2, r2
 800808a:	701a      	strb	r2, [r3, #0]
 800808c:	69bb      	ldr	r3, [r7, #24]
 800808e:	09db      	lsrs	r3, r3, #7
 8008090:	61bb      	str	r3, [r7, #24]
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	2b7f      	cmp	r3, #127	; 0x7f
 8008096:	d8f0      	bhi.n	800807a <SEGGER_SYSVIEW_Start+0xce>
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	1c5a      	adds	r2, r3, #1
 800809c:	61fa      	str	r2, [r7, #28]
 800809e:	69ba      	ldr	r2, [r7, #24]
 80080a0:	b2d2      	uxtb	r2, r2
 80080a2:	701a      	strb	r2, [r3, #0]
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	617b      	str	r3, [r7, #20]
 80080ac:	2300      	movs	r3, #0
 80080ae:	613b      	str	r3, [r7, #16]
 80080b0:	e00b      	b.n	80080ca <SEGGER_SYSVIEW_Start+0x11e>
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	b2da      	uxtb	r2, r3
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	1c59      	adds	r1, r3, #1
 80080ba:	6179      	str	r1, [r7, #20]
 80080bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80080c0:	b2d2      	uxtb	r2, r2
 80080c2:	701a      	strb	r2, [r3, #0]
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	09db      	lsrs	r3, r3, #7
 80080c8:	613b      	str	r3, [r7, #16]
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	2b7f      	cmp	r3, #127	; 0x7f
 80080ce:	d8f0      	bhi.n	80080b2 <SEGGER_SYSVIEW_Start+0x106>
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	1c5a      	adds	r2, r3, #1
 80080d4:	617a      	str	r2, [r7, #20]
 80080d6:	693a      	ldr	r2, [r7, #16]
 80080d8:	b2d2      	uxtb	r2, r2
 80080da:	701a      	strb	r2, [r3, #0]
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80080e0:	2218      	movs	r2, #24
 80080e2:	6839      	ldr	r1, [r7, #0]
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f7ff fb25 	bl	8007734 <_SendPacket>
      RECORD_END();
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80080f0:	4b08      	ldr	r3, [pc, #32]	; (8008114 <SEGGER_SYSVIEW_Start+0x168>)
 80080f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d002      	beq.n	80080fe <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80080f8:	4b06      	ldr	r3, [pc, #24]	; (8008114 <SEGGER_SYSVIEW_Start+0x168>)
 80080fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80080fe:	f000 f9eb 	bl	80084d8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8008102:	f000 f9b1 	bl	8008468 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8008106:	f000 fc83 	bl	8008a10 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800810a:	bf00      	nop
 800810c:	3730      	adds	r7, #48	; 0x30
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	2001438c 	.word	0x2001438c
 8008118:	080091c4 	.word	0x080091c4
 800811c:	200143bc 	.word	0x200143bc

08008120 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008126:	f3ef 8311 	mrs	r3, BASEPRI
 800812a:	f04f 0120 	mov.w	r1, #32
 800812e:	f381 8811 	msr	BASEPRI, r1
 8008132:	607b      	str	r3, [r7, #4]
 8008134:	480b      	ldr	r0, [pc, #44]	; (8008164 <SEGGER_SYSVIEW_Stop+0x44>)
 8008136:	f7ff fa0f 	bl	8007558 <_PreparePacket>
 800813a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800813c:	4b0a      	ldr	r3, [pc, #40]	; (8008168 <SEGGER_SYSVIEW_Stop+0x48>)
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d007      	beq.n	8008154 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8008144:	220b      	movs	r2, #11
 8008146:	6839      	ldr	r1, [r7, #0]
 8008148:	6838      	ldr	r0, [r7, #0]
 800814a:	f7ff faf3 	bl	8007734 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800814e:	4b06      	ldr	r3, [pc, #24]	; (8008168 <SEGGER_SYSVIEW_Stop+0x48>)
 8008150:	2200      	movs	r2, #0
 8008152:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f383 8811 	msr	BASEPRI, r3
}
 800815a:	bf00      	nop
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	200143bc 	.word	0x200143bc
 8008168:	2001438c 	.word	0x2001438c

0800816c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800816c:	b580      	push	{r7, lr}
 800816e:	b08c      	sub	sp, #48	; 0x30
 8008170:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8008172:	f3ef 8311 	mrs	r3, BASEPRI
 8008176:	f04f 0120 	mov.w	r1, #32
 800817a:	f381 8811 	msr	BASEPRI, r1
 800817e:	60fb      	str	r3, [r7, #12]
 8008180:	4845      	ldr	r0, [pc, #276]	; (8008298 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8008182:	f7ff f9e9 	bl	8007558 <_PreparePacket>
 8008186:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008190:	4b42      	ldr	r3, [pc, #264]	; (800829c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	62bb      	str	r3, [r7, #40]	; 0x28
 8008196:	e00b      	b.n	80081b0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8008198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819a:	b2da      	uxtb	r2, r3
 800819c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800819e:	1c59      	adds	r1, r3, #1
 80081a0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80081a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80081a6:	b2d2      	uxtb	r2, r2
 80081a8:	701a      	strb	r2, [r3, #0]
 80081aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ac:	09db      	lsrs	r3, r3, #7
 80081ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80081b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b2:	2b7f      	cmp	r3, #127	; 0x7f
 80081b4:	d8f0      	bhi.n	8008198 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80081b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b8:	1c5a      	adds	r2, r3, #1
 80081ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081be:	b2d2      	uxtb	r2, r2
 80081c0:	701a      	strb	r2, [r3, #0]
 80081c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	627b      	str	r3, [r7, #36]	; 0x24
 80081ca:	4b34      	ldr	r3, [pc, #208]	; (800829c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	623b      	str	r3, [r7, #32]
 80081d0:	e00b      	b.n	80081ea <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80081d2:	6a3b      	ldr	r3, [r7, #32]
 80081d4:	b2da      	uxtb	r2, r3
 80081d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d8:	1c59      	adds	r1, r3, #1
 80081da:	6279      	str	r1, [r7, #36]	; 0x24
 80081dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80081e0:	b2d2      	uxtb	r2, r2
 80081e2:	701a      	strb	r2, [r3, #0]
 80081e4:	6a3b      	ldr	r3, [r7, #32]
 80081e6:	09db      	lsrs	r3, r3, #7
 80081e8:	623b      	str	r3, [r7, #32]
 80081ea:	6a3b      	ldr	r3, [r7, #32]
 80081ec:	2b7f      	cmp	r3, #127	; 0x7f
 80081ee:	d8f0      	bhi.n	80081d2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80081f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f2:	1c5a      	adds	r2, r3, #1
 80081f4:	627a      	str	r2, [r7, #36]	; 0x24
 80081f6:	6a3a      	ldr	r2, [r7, #32]
 80081f8:	b2d2      	uxtb	r2, r2
 80081fa:	701a      	strb	r2, [r3, #0]
 80081fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	61fb      	str	r3, [r7, #28]
 8008204:	4b25      	ldr	r3, [pc, #148]	; (800829c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	61bb      	str	r3, [r7, #24]
 800820a:	e00b      	b.n	8008224 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800820c:	69bb      	ldr	r3, [r7, #24]
 800820e:	b2da      	uxtb	r2, r3
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	1c59      	adds	r1, r3, #1
 8008214:	61f9      	str	r1, [r7, #28]
 8008216:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800821a:	b2d2      	uxtb	r2, r2
 800821c:	701a      	strb	r2, [r3, #0]
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	09db      	lsrs	r3, r3, #7
 8008222:	61bb      	str	r3, [r7, #24]
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	2b7f      	cmp	r3, #127	; 0x7f
 8008228:	d8f0      	bhi.n	800820c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800822a:	69fb      	ldr	r3, [r7, #28]
 800822c:	1c5a      	adds	r2, r3, #1
 800822e:	61fa      	str	r2, [r7, #28]
 8008230:	69ba      	ldr	r2, [r7, #24]
 8008232:	b2d2      	uxtb	r2, r2
 8008234:	701a      	strb	r2, [r3, #0]
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	617b      	str	r3, [r7, #20]
 800823e:	2300      	movs	r3, #0
 8008240:	613b      	str	r3, [r7, #16]
 8008242:	e00b      	b.n	800825c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	b2da      	uxtb	r2, r3
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	1c59      	adds	r1, r3, #1
 800824c:	6179      	str	r1, [r7, #20]
 800824e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008252:	b2d2      	uxtb	r2, r2
 8008254:	701a      	strb	r2, [r3, #0]
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	09db      	lsrs	r3, r3, #7
 800825a:	613b      	str	r3, [r7, #16]
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	2b7f      	cmp	r3, #127	; 0x7f
 8008260:	d8f0      	bhi.n	8008244 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	1c5a      	adds	r2, r3, #1
 8008266:	617a      	str	r2, [r7, #20]
 8008268:	693a      	ldr	r2, [r7, #16]
 800826a:	b2d2      	uxtb	r2, r2
 800826c:	701a      	strb	r2, [r3, #0]
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8008272:	2218      	movs	r2, #24
 8008274:	6879      	ldr	r1, [r7, #4]
 8008276:	68b8      	ldr	r0, [r7, #8]
 8008278:	f7ff fa5c 	bl	8007734 <_SendPacket>
  RECORD_END();
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8008282:	4b06      	ldr	r3, [pc, #24]	; (800829c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008286:	2b00      	cmp	r3, #0
 8008288:	d002      	beq.n	8008290 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800828a:	4b04      	ldr	r3, [pc, #16]	; (800829c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800828c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828e:	4798      	blx	r3
  }
}
 8008290:	bf00      	nop
 8008292:	3730      	adds	r7, #48	; 0x30
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}
 8008298:	200143bc 	.word	0x200143bc
 800829c:	2001438c 	.word	0x2001438c

080082a0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b092      	sub	sp, #72	; 0x48
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80082a8:	f3ef 8311 	mrs	r3, BASEPRI
 80082ac:	f04f 0120 	mov.w	r1, #32
 80082b0:	f381 8811 	msr	BASEPRI, r1
 80082b4:	617b      	str	r3, [r7, #20]
 80082b6:	486a      	ldr	r0, [pc, #424]	; (8008460 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80082b8:	f7ff f94e 	bl	8007558 <_PreparePacket>
 80082bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	647b      	str	r3, [r7, #68]	; 0x44
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	4b66      	ldr	r3, [pc, #408]	; (8008464 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80082cc:	691b      	ldr	r3, [r3, #16]
 80082ce:	1ad3      	subs	r3, r2, r3
 80082d0:	643b      	str	r3, [r7, #64]	; 0x40
 80082d2:	e00b      	b.n	80082ec <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80082d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082d6:	b2da      	uxtb	r2, r3
 80082d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082da:	1c59      	adds	r1, r3, #1
 80082dc:	6479      	str	r1, [r7, #68]	; 0x44
 80082de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80082e2:	b2d2      	uxtb	r2, r2
 80082e4:	701a      	strb	r2, [r3, #0]
 80082e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082e8:	09db      	lsrs	r3, r3, #7
 80082ea:	643b      	str	r3, [r7, #64]	; 0x40
 80082ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082ee:	2b7f      	cmp	r3, #127	; 0x7f
 80082f0:	d8f0      	bhi.n	80082d4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80082f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082f4:	1c5a      	adds	r2, r3, #1
 80082f6:	647a      	str	r2, [r7, #68]	; 0x44
 80082f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082fa:	b2d2      	uxtb	r2, r2
 80082fc:	701a      	strb	r2, [r3, #0]
 80082fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008300:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	63bb      	str	r3, [r7, #56]	; 0x38
 800830c:	e00b      	b.n	8008326 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800830e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008310:	b2da      	uxtb	r2, r3
 8008312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008314:	1c59      	adds	r1, r3, #1
 8008316:	63f9      	str	r1, [r7, #60]	; 0x3c
 8008318:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800831c:	b2d2      	uxtb	r2, r2
 800831e:	701a      	strb	r2, [r3, #0]
 8008320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008322:	09db      	lsrs	r3, r3, #7
 8008324:	63bb      	str	r3, [r7, #56]	; 0x38
 8008326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008328:	2b7f      	cmp	r3, #127	; 0x7f
 800832a:	d8f0      	bhi.n	800830e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800832c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800832e:	1c5a      	adds	r2, r3, #1
 8008330:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008332:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008334:	b2d2      	uxtb	r2, r2
 8008336:	701a      	strb	r2, [r3, #0]
 8008338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800833a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	2220      	movs	r2, #32
 8008342:	4619      	mov	r1, r3
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	f7ff f8b7 	bl	80074b8 <_EncodeStr>
 800834a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800834c:	2209      	movs	r2, #9
 800834e:	68f9      	ldr	r1, [r7, #12]
 8008350:	6938      	ldr	r0, [r7, #16]
 8008352:	f7ff f9ef 	bl	8007734 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	637b      	str	r3, [r7, #52]	; 0x34
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	4b40      	ldr	r3, [pc, #256]	; (8008464 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	1ad3      	subs	r3, r2, r3
 8008368:	633b      	str	r3, [r7, #48]	; 0x30
 800836a:	e00b      	b.n	8008384 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800836c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836e:	b2da      	uxtb	r2, r3
 8008370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008372:	1c59      	adds	r1, r3, #1
 8008374:	6379      	str	r1, [r7, #52]	; 0x34
 8008376:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800837a:	b2d2      	uxtb	r2, r2
 800837c:	701a      	strb	r2, [r3, #0]
 800837e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008380:	09db      	lsrs	r3, r3, #7
 8008382:	633b      	str	r3, [r7, #48]	; 0x30
 8008384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008386:	2b7f      	cmp	r3, #127	; 0x7f
 8008388:	d8f0      	bhi.n	800836c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800838a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800838c:	1c5a      	adds	r2, r3, #1
 800838e:	637a      	str	r2, [r7, #52]	; 0x34
 8008390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008392:	b2d2      	uxtb	r2, r2
 8008394:	701a      	strb	r2, [r3, #0]
 8008396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008398:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80083a4:	e00b      	b.n	80083be <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80083a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a8:	b2da      	uxtb	r2, r3
 80083aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ac:	1c59      	adds	r1, r3, #1
 80083ae:	62f9      	str	r1, [r7, #44]	; 0x2c
 80083b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80083b4:	b2d2      	uxtb	r2, r2
 80083b6:	701a      	strb	r2, [r3, #0]
 80083b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ba:	09db      	lsrs	r3, r3, #7
 80083bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80083be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c0:	2b7f      	cmp	r3, #127	; 0x7f
 80083c2:	d8f0      	bhi.n	80083a6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80083c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c6:	1c5a      	adds	r2, r3, #1
 80083c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80083ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083cc:	b2d2      	uxtb	r2, r2
 80083ce:	701a      	strb	r2, [r3, #0]
 80083d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	627b      	str	r3, [r7, #36]	; 0x24
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	691b      	ldr	r3, [r3, #16]
 80083dc:	623b      	str	r3, [r7, #32]
 80083de:	e00b      	b.n	80083f8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80083e0:	6a3b      	ldr	r3, [r7, #32]
 80083e2:	b2da      	uxtb	r2, r3
 80083e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e6:	1c59      	adds	r1, r3, #1
 80083e8:	6279      	str	r1, [r7, #36]	; 0x24
 80083ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80083ee:	b2d2      	uxtb	r2, r2
 80083f0:	701a      	strb	r2, [r3, #0]
 80083f2:	6a3b      	ldr	r3, [r7, #32]
 80083f4:	09db      	lsrs	r3, r3, #7
 80083f6:	623b      	str	r3, [r7, #32]
 80083f8:	6a3b      	ldr	r3, [r7, #32]
 80083fa:	2b7f      	cmp	r3, #127	; 0x7f
 80083fc:	d8f0      	bhi.n	80083e0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80083fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008400:	1c5a      	adds	r2, r3, #1
 8008402:	627a      	str	r2, [r7, #36]	; 0x24
 8008404:	6a3a      	ldr	r2, [r7, #32]
 8008406:	b2d2      	uxtb	r2, r2
 8008408:	701a      	strb	r2, [r3, #0]
 800840a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	61fb      	str	r3, [r7, #28]
 8008412:	2300      	movs	r3, #0
 8008414:	61bb      	str	r3, [r7, #24]
 8008416:	e00b      	b.n	8008430 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	b2da      	uxtb	r2, r3
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	1c59      	adds	r1, r3, #1
 8008420:	61f9      	str	r1, [r7, #28]
 8008422:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008426:	b2d2      	uxtb	r2, r2
 8008428:	701a      	strb	r2, [r3, #0]
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	09db      	lsrs	r3, r3, #7
 800842e:	61bb      	str	r3, [r7, #24]
 8008430:	69bb      	ldr	r3, [r7, #24]
 8008432:	2b7f      	cmp	r3, #127	; 0x7f
 8008434:	d8f0      	bhi.n	8008418 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	1c5a      	adds	r2, r3, #1
 800843a:	61fa      	str	r2, [r7, #28]
 800843c:	69ba      	ldr	r2, [r7, #24]
 800843e:	b2d2      	uxtb	r2, r2
 8008440:	701a      	strb	r2, [r3, #0]
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8008446:	2215      	movs	r2, #21
 8008448:	68f9      	ldr	r1, [r7, #12]
 800844a:	6938      	ldr	r0, [r7, #16]
 800844c:	f7ff f972 	bl	8007734 <_SendPacket>
  RECORD_END();
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	f383 8811 	msr	BASEPRI, r3
}
 8008456:	bf00      	nop
 8008458:	3748      	adds	r7, #72	; 0x48
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	200143bc 	.word	0x200143bc
 8008464:	2001438c 	.word	0x2001438c

08008468 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8008468:	b580      	push	{r7, lr}
 800846a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800846c:	4b07      	ldr	r3, [pc, #28]	; (800848c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800846e:	6a1b      	ldr	r3, [r3, #32]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d008      	beq.n	8008486 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8008474:	4b05      	ldr	r3, [pc, #20]	; (800848c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008476:	6a1b      	ldr	r3, [r3, #32]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d003      	beq.n	8008486 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800847e:	4b03      	ldr	r3, [pc, #12]	; (800848c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008480:	6a1b      	ldr	r3, [r3, #32]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	4798      	blx	r3
  }
}
 8008486:	bf00      	nop
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	2001438c 	.word	0x2001438c

08008490 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8008490:	b580      	push	{r7, lr}
 8008492:	b086      	sub	sp, #24
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008498:	f3ef 8311 	mrs	r3, BASEPRI
 800849c:	f04f 0120 	mov.w	r1, #32
 80084a0:	f381 8811 	msr	BASEPRI, r1
 80084a4:	617b      	str	r3, [r7, #20]
 80084a6:	480b      	ldr	r0, [pc, #44]	; (80084d4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80084a8:	f7ff f856 	bl	8007558 <_PreparePacket>
 80084ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80084ae:	2280      	movs	r2, #128	; 0x80
 80084b0:	6879      	ldr	r1, [r7, #4]
 80084b2:	6938      	ldr	r0, [r7, #16]
 80084b4:	f7ff f800 	bl	80074b8 <_EncodeStr>
 80084b8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80084ba:	220e      	movs	r2, #14
 80084bc:	68f9      	ldr	r1, [r7, #12]
 80084be:	6938      	ldr	r0, [r7, #16]
 80084c0:	f7ff f938 	bl	8007734 <_SendPacket>
  RECORD_END();
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	f383 8811 	msr	BASEPRI, r3
}
 80084ca:	bf00      	nop
 80084cc:	3718      	adds	r7, #24
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	200143bc 	.word	0x200143bc

080084d8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80084d8:	b590      	push	{r4, r7, lr}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80084de:	4b15      	ldr	r3, [pc, #84]	; (8008534 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80084e0:	6a1b      	ldr	r3, [r3, #32]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d01a      	beq.n	800851c <SEGGER_SYSVIEW_RecordSystime+0x44>
 80084e6:	4b13      	ldr	r3, [pc, #76]	; (8008534 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80084e8:	6a1b      	ldr	r3, [r3, #32]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d015      	beq.n	800851c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80084f0:	4b10      	ldr	r3, [pc, #64]	; (8008534 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80084f2:	6a1b      	ldr	r3, [r3, #32]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4798      	blx	r3
 80084f8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80084fc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80084fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008502:	f04f 0200 	mov.w	r2, #0
 8008506:	f04f 0300 	mov.w	r3, #0
 800850a:	000a      	movs	r2, r1
 800850c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800850e:	4613      	mov	r3, r2
 8008510:	461a      	mov	r2, r3
 8008512:	4621      	mov	r1, r4
 8008514:	200d      	movs	r0, #13
 8008516:	f7ff fbe7 	bl	8007ce8 <SEGGER_SYSVIEW_RecordU32x2>
 800851a:	e006      	b.n	800852a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800851c:	4b06      	ldr	r3, [pc, #24]	; (8008538 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4619      	mov	r1, r3
 8008522:	200c      	movs	r0, #12
 8008524:	f7ff fba4 	bl	8007c70 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8008528:	bf00      	nop
 800852a:	bf00      	nop
 800852c:	370c      	adds	r7, #12
 800852e:	46bd      	mov	sp, r7
 8008530:	bd90      	pop	{r4, r7, pc}
 8008532:	bf00      	nop
 8008534:	2001438c 	.word	0x2001438c
 8008538:	e0001004 	.word	0xe0001004

0800853c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800853c:	b580      	push	{r7, lr}
 800853e:	b086      	sub	sp, #24
 8008540:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008542:	f3ef 8311 	mrs	r3, BASEPRI
 8008546:	f04f 0120 	mov.w	r1, #32
 800854a:	f381 8811 	msr	BASEPRI, r1
 800854e:	60fb      	str	r3, [r7, #12]
 8008550:	4819      	ldr	r0, [pc, #100]	; (80085b8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8008552:	f7ff f801 	bl	8007558 <_PreparePacket>
 8008556:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800855c:	4b17      	ldr	r3, [pc, #92]	; (80085bc <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008564:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	617b      	str	r3, [r7, #20]
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	613b      	str	r3, [r7, #16]
 800856e:	e00b      	b.n	8008588 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	b2da      	uxtb	r2, r3
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	1c59      	adds	r1, r3, #1
 8008578:	6179      	str	r1, [r7, #20]
 800857a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800857e:	b2d2      	uxtb	r2, r2
 8008580:	701a      	strb	r2, [r3, #0]
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	09db      	lsrs	r3, r3, #7
 8008586:	613b      	str	r3, [r7, #16]
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	2b7f      	cmp	r3, #127	; 0x7f
 800858c:	d8f0      	bhi.n	8008570 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	1c5a      	adds	r2, r3, #1
 8008592:	617a      	str	r2, [r7, #20]
 8008594:	693a      	ldr	r2, [r7, #16]
 8008596:	b2d2      	uxtb	r2, r2
 8008598:	701a      	strb	r2, [r3, #0]
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800859e:	2202      	movs	r2, #2
 80085a0:	6879      	ldr	r1, [r7, #4]
 80085a2:	68b8      	ldr	r0, [r7, #8]
 80085a4:	f7ff f8c6 	bl	8007734 <_SendPacket>
  RECORD_END();
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f383 8811 	msr	BASEPRI, r3
}
 80085ae:	bf00      	nop
 80085b0:	3718      	adds	r7, #24
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	200143bc 	.word	0x200143bc
 80085bc:	e000ed04 	.word	0xe000ed04

080085c0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80085c6:	f3ef 8311 	mrs	r3, BASEPRI
 80085ca:	f04f 0120 	mov.w	r1, #32
 80085ce:	f381 8811 	msr	BASEPRI, r1
 80085d2:	607b      	str	r3, [r7, #4]
 80085d4:	4807      	ldr	r0, [pc, #28]	; (80085f4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80085d6:	f7fe ffbf 	bl	8007558 <_PreparePacket>
 80085da:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80085dc:	2203      	movs	r2, #3
 80085de:	6839      	ldr	r1, [r7, #0]
 80085e0:	6838      	ldr	r0, [r7, #0]
 80085e2:	f7ff f8a7 	bl	8007734 <_SendPacket>
  RECORD_END();
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f383 8811 	msr	BASEPRI, r3
}
 80085ec:	bf00      	nop
 80085ee:	3708      	adds	r7, #8
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	200143bc 	.word	0x200143bc

080085f8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80085fe:	f3ef 8311 	mrs	r3, BASEPRI
 8008602:	f04f 0120 	mov.w	r1, #32
 8008606:	f381 8811 	msr	BASEPRI, r1
 800860a:	607b      	str	r3, [r7, #4]
 800860c:	4807      	ldr	r0, [pc, #28]	; (800862c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800860e:	f7fe ffa3 	bl	8007558 <_PreparePacket>
 8008612:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8008614:	2212      	movs	r2, #18
 8008616:	6839      	ldr	r1, [r7, #0]
 8008618:	6838      	ldr	r0, [r7, #0]
 800861a:	f7ff f88b 	bl	8007734 <_SendPacket>
  RECORD_END();
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f383 8811 	msr	BASEPRI, r3
}
 8008624:	bf00      	nop
 8008626:	3708      	adds	r7, #8
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	200143bc 	.word	0x200143bc

08008630 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008636:	f3ef 8311 	mrs	r3, BASEPRI
 800863a:	f04f 0120 	mov.w	r1, #32
 800863e:	f381 8811 	msr	BASEPRI, r1
 8008642:	607b      	str	r3, [r7, #4]
 8008644:	4807      	ldr	r0, [pc, #28]	; (8008664 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8008646:	f7fe ff87 	bl	8007558 <_PreparePacket>
 800864a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800864c:	2211      	movs	r2, #17
 800864e:	6839      	ldr	r1, [r7, #0]
 8008650:	6838      	ldr	r0, [r7, #0]
 8008652:	f7ff f86f 	bl	8007734 <_SendPacket>
  RECORD_END();
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f383 8811 	msr	BASEPRI, r3
}
 800865c:	bf00      	nop
 800865e:	3708      	adds	r7, #8
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	200143bc 	.word	0x200143bc

08008668 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8008668:	b580      	push	{r7, lr}
 800866a:	b088      	sub	sp, #32
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008670:	f3ef 8311 	mrs	r3, BASEPRI
 8008674:	f04f 0120 	mov.w	r1, #32
 8008678:	f381 8811 	msr	BASEPRI, r1
 800867c:	617b      	str	r3, [r7, #20]
 800867e:	4819      	ldr	r0, [pc, #100]	; (80086e4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8008680:	f7fe ff6a 	bl	8007558 <_PreparePacket>
 8008684:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800868a:	4b17      	ldr	r3, [pc, #92]	; (80086e8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	1ad3      	subs	r3, r2, r3
 8008692:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	61fb      	str	r3, [r7, #28]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	61bb      	str	r3, [r7, #24]
 800869c:	e00b      	b.n	80086b6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	b2da      	uxtb	r2, r3
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	1c59      	adds	r1, r3, #1
 80086a6:	61f9      	str	r1, [r7, #28]
 80086a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80086ac:	b2d2      	uxtb	r2, r2
 80086ae:	701a      	strb	r2, [r3, #0]
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	09db      	lsrs	r3, r3, #7
 80086b4:	61bb      	str	r3, [r7, #24]
 80086b6:	69bb      	ldr	r3, [r7, #24]
 80086b8:	2b7f      	cmp	r3, #127	; 0x7f
 80086ba:	d8f0      	bhi.n	800869e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	1c5a      	adds	r2, r3, #1
 80086c0:	61fa      	str	r2, [r7, #28]
 80086c2:	69ba      	ldr	r2, [r7, #24]
 80086c4:	b2d2      	uxtb	r2, r2
 80086c6:	701a      	strb	r2, [r3, #0]
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80086cc:	2208      	movs	r2, #8
 80086ce:	68f9      	ldr	r1, [r7, #12]
 80086d0:	6938      	ldr	r0, [r7, #16]
 80086d2:	f7ff f82f 	bl	8007734 <_SendPacket>
  RECORD_END();
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	f383 8811 	msr	BASEPRI, r3
}
 80086dc:	bf00      	nop
 80086de:	3720      	adds	r7, #32
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	200143bc 	.word	0x200143bc
 80086e8:	2001438c 	.word	0x2001438c

080086ec <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b088      	sub	sp, #32
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80086f4:	f3ef 8311 	mrs	r3, BASEPRI
 80086f8:	f04f 0120 	mov.w	r1, #32
 80086fc:	f381 8811 	msr	BASEPRI, r1
 8008700:	617b      	str	r3, [r7, #20]
 8008702:	4819      	ldr	r0, [pc, #100]	; (8008768 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8008704:	f7fe ff28 	bl	8007558 <_PreparePacket>
 8008708:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800870e:	4b17      	ldr	r3, [pc, #92]	; (800876c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8008710:	691b      	ldr	r3, [r3, #16]
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	1ad3      	subs	r3, r2, r3
 8008716:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	61fb      	str	r3, [r7, #28]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	61bb      	str	r3, [r7, #24]
 8008720:	e00b      	b.n	800873a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	b2da      	uxtb	r2, r3
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	1c59      	adds	r1, r3, #1
 800872a:	61f9      	str	r1, [r7, #28]
 800872c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008730:	b2d2      	uxtb	r2, r2
 8008732:	701a      	strb	r2, [r3, #0]
 8008734:	69bb      	ldr	r3, [r7, #24]
 8008736:	09db      	lsrs	r3, r3, #7
 8008738:	61bb      	str	r3, [r7, #24]
 800873a:	69bb      	ldr	r3, [r7, #24]
 800873c:	2b7f      	cmp	r3, #127	; 0x7f
 800873e:	d8f0      	bhi.n	8008722 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	1c5a      	adds	r2, r3, #1
 8008744:	61fa      	str	r2, [r7, #28]
 8008746:	69ba      	ldr	r2, [r7, #24]
 8008748:	b2d2      	uxtb	r2, r2
 800874a:	701a      	strb	r2, [r3, #0]
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8008750:	2204      	movs	r2, #4
 8008752:	68f9      	ldr	r1, [r7, #12]
 8008754:	6938      	ldr	r0, [r7, #16]
 8008756:	f7fe ffed 	bl	8007734 <_SendPacket>
  RECORD_END();
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f383 8811 	msr	BASEPRI, r3
}
 8008760:	bf00      	nop
 8008762:	3720      	adds	r7, #32
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}
 8008768:	200143bc 	.word	0x200143bc
 800876c:	2001438c 	.word	0x2001438c

08008770 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8008770:	b580      	push	{r7, lr}
 8008772:	b088      	sub	sp, #32
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008778:	f3ef 8311 	mrs	r3, BASEPRI
 800877c:	f04f 0120 	mov.w	r1, #32
 8008780:	f381 8811 	msr	BASEPRI, r1
 8008784:	617b      	str	r3, [r7, #20]
 8008786:	4819      	ldr	r0, [pc, #100]	; (80087ec <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8008788:	f7fe fee6 	bl	8007558 <_PreparePacket>
 800878c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008792:	4b17      	ldr	r3, [pc, #92]	; (80087f0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	1ad3      	subs	r3, r2, r3
 800879a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	61fb      	str	r3, [r7, #28]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	61bb      	str	r3, [r7, #24]
 80087a4:	e00b      	b.n	80087be <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	b2da      	uxtb	r2, r3
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	1c59      	adds	r1, r3, #1
 80087ae:	61f9      	str	r1, [r7, #28]
 80087b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80087b4:	b2d2      	uxtb	r2, r2
 80087b6:	701a      	strb	r2, [r3, #0]
 80087b8:	69bb      	ldr	r3, [r7, #24]
 80087ba:	09db      	lsrs	r3, r3, #7
 80087bc:	61bb      	str	r3, [r7, #24]
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	2b7f      	cmp	r3, #127	; 0x7f
 80087c2:	d8f0      	bhi.n	80087a6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	1c5a      	adds	r2, r3, #1
 80087c8:	61fa      	str	r2, [r7, #28]
 80087ca:	69ba      	ldr	r2, [r7, #24]
 80087cc:	b2d2      	uxtb	r2, r2
 80087ce:	701a      	strb	r2, [r3, #0]
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80087d4:	2206      	movs	r2, #6
 80087d6:	68f9      	ldr	r1, [r7, #12]
 80087d8:	6938      	ldr	r0, [r7, #16]
 80087da:	f7fe ffab 	bl	8007734 <_SendPacket>
  RECORD_END();
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	f383 8811 	msr	BASEPRI, r3
}
 80087e4:	bf00      	nop
 80087e6:	3720      	adds	r7, #32
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	200143bc 	.word	0x200143bc
 80087f0:	2001438c 	.word	0x2001438c

080087f4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b08a      	sub	sp, #40	; 0x28
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80087fe:	f3ef 8311 	mrs	r3, BASEPRI
 8008802:	f04f 0120 	mov.w	r1, #32
 8008806:	f381 8811 	msr	BASEPRI, r1
 800880a:	617b      	str	r3, [r7, #20]
 800880c:	4827      	ldr	r0, [pc, #156]	; (80088ac <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800880e:	f7fe fea3 	bl	8007558 <_PreparePacket>
 8008812:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008818:	4b25      	ldr	r3, [pc, #148]	; (80088b0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	1ad3      	subs	r3, r2, r3
 8008820:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	627b      	str	r3, [r7, #36]	; 0x24
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	623b      	str	r3, [r7, #32]
 800882a:	e00b      	b.n	8008844 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800882c:	6a3b      	ldr	r3, [r7, #32]
 800882e:	b2da      	uxtb	r2, r3
 8008830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008832:	1c59      	adds	r1, r3, #1
 8008834:	6279      	str	r1, [r7, #36]	; 0x24
 8008836:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800883a:	b2d2      	uxtb	r2, r2
 800883c:	701a      	strb	r2, [r3, #0]
 800883e:	6a3b      	ldr	r3, [r7, #32]
 8008840:	09db      	lsrs	r3, r3, #7
 8008842:	623b      	str	r3, [r7, #32]
 8008844:	6a3b      	ldr	r3, [r7, #32]
 8008846:	2b7f      	cmp	r3, #127	; 0x7f
 8008848:	d8f0      	bhi.n	800882c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800884a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884c:	1c5a      	adds	r2, r3, #1
 800884e:	627a      	str	r2, [r7, #36]	; 0x24
 8008850:	6a3a      	ldr	r2, [r7, #32]
 8008852:	b2d2      	uxtb	r2, r2
 8008854:	701a      	strb	r2, [r3, #0]
 8008856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008858:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	61fb      	str	r3, [r7, #28]
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	61bb      	str	r3, [r7, #24]
 8008862:	e00b      	b.n	800887c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	b2da      	uxtb	r2, r3
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	1c59      	adds	r1, r3, #1
 800886c:	61f9      	str	r1, [r7, #28]
 800886e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008872:	b2d2      	uxtb	r2, r2
 8008874:	701a      	strb	r2, [r3, #0]
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	09db      	lsrs	r3, r3, #7
 800887a:	61bb      	str	r3, [r7, #24]
 800887c:	69bb      	ldr	r3, [r7, #24]
 800887e:	2b7f      	cmp	r3, #127	; 0x7f
 8008880:	d8f0      	bhi.n	8008864 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	1c5a      	adds	r2, r3, #1
 8008886:	61fa      	str	r2, [r7, #28]
 8008888:	69ba      	ldr	r2, [r7, #24]
 800888a:	b2d2      	uxtb	r2, r2
 800888c:	701a      	strb	r2, [r3, #0]
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8008892:	2207      	movs	r2, #7
 8008894:	68f9      	ldr	r1, [r7, #12]
 8008896:	6938      	ldr	r0, [r7, #16]
 8008898:	f7fe ff4c 	bl	8007734 <_SendPacket>
  RECORD_END();
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	f383 8811 	msr	BASEPRI, r3
}
 80088a2:	bf00      	nop
 80088a4:	3728      	adds	r7, #40	; 0x28
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	200143bc 	.word	0x200143bc
 80088b0:	2001438c 	.word	0x2001438c

080088b4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80088b4:	b480      	push	{r7}
 80088b6:	b083      	sub	sp, #12
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80088bc:	4b04      	ldr	r3, [pc, #16]	; (80088d0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80088be:	691b      	ldr	r3, [r3, #16]
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	1ad3      	subs	r3, r2, r3
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	370c      	adds	r7, #12
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr
 80088d0:	2001438c 	.word	0x2001438c

080088d4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b08c      	sub	sp, #48	; 0x30
 80088d8:	af00      	add	r7, sp, #0
 80088da:	4603      	mov	r3, r0
 80088dc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80088de:	4b3b      	ldr	r3, [pc, #236]	; (80089cc <SEGGER_SYSVIEW_SendModule+0xf8>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d06d      	beq.n	80089c2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80088e6:	4b39      	ldr	r3, [pc, #228]	; (80089cc <SEGGER_SYSVIEW_SendModule+0xf8>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80088ec:	2300      	movs	r3, #0
 80088ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80088f0:	e008      	b.n	8008904 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80088f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80088f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d007      	beq.n	800890e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80088fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008900:	3301      	adds	r3, #1
 8008902:	62bb      	str	r3, [r7, #40]	; 0x28
 8008904:	79fb      	ldrb	r3, [r7, #7]
 8008906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008908:	429a      	cmp	r2, r3
 800890a:	d3f2      	bcc.n	80088f2 <SEGGER_SYSVIEW_SendModule+0x1e>
 800890c:	e000      	b.n	8008910 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800890e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8008910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008912:	2b00      	cmp	r3, #0
 8008914:	d055      	beq.n	80089c2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008916:	f3ef 8311 	mrs	r3, BASEPRI
 800891a:	f04f 0120 	mov.w	r1, #32
 800891e:	f381 8811 	msr	BASEPRI, r1
 8008922:	617b      	str	r3, [r7, #20]
 8008924:	482a      	ldr	r0, [pc, #168]	; (80089d0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8008926:	f7fe fe17 	bl	8007558 <_PreparePacket>
 800892a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	627b      	str	r3, [r7, #36]	; 0x24
 8008934:	79fb      	ldrb	r3, [r7, #7]
 8008936:	623b      	str	r3, [r7, #32]
 8008938:	e00b      	b.n	8008952 <SEGGER_SYSVIEW_SendModule+0x7e>
 800893a:	6a3b      	ldr	r3, [r7, #32]
 800893c:	b2da      	uxtb	r2, r3
 800893e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008940:	1c59      	adds	r1, r3, #1
 8008942:	6279      	str	r1, [r7, #36]	; 0x24
 8008944:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008948:	b2d2      	uxtb	r2, r2
 800894a:	701a      	strb	r2, [r3, #0]
 800894c:	6a3b      	ldr	r3, [r7, #32]
 800894e:	09db      	lsrs	r3, r3, #7
 8008950:	623b      	str	r3, [r7, #32]
 8008952:	6a3b      	ldr	r3, [r7, #32]
 8008954:	2b7f      	cmp	r3, #127	; 0x7f
 8008956:	d8f0      	bhi.n	800893a <SEGGER_SYSVIEW_SendModule+0x66>
 8008958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895a:	1c5a      	adds	r2, r3, #1
 800895c:	627a      	str	r2, [r7, #36]	; 0x24
 800895e:	6a3a      	ldr	r2, [r7, #32]
 8008960:	b2d2      	uxtb	r2, r2
 8008962:	701a      	strb	r2, [r3, #0]
 8008964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008966:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	61fb      	str	r3, [r7, #28]
 800896c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	61bb      	str	r3, [r7, #24]
 8008972:	e00b      	b.n	800898c <SEGGER_SYSVIEW_SendModule+0xb8>
 8008974:	69bb      	ldr	r3, [r7, #24]
 8008976:	b2da      	uxtb	r2, r3
 8008978:	69fb      	ldr	r3, [r7, #28]
 800897a:	1c59      	adds	r1, r3, #1
 800897c:	61f9      	str	r1, [r7, #28]
 800897e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008982:	b2d2      	uxtb	r2, r2
 8008984:	701a      	strb	r2, [r3, #0]
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	09db      	lsrs	r3, r3, #7
 800898a:	61bb      	str	r3, [r7, #24]
 800898c:	69bb      	ldr	r3, [r7, #24]
 800898e:	2b7f      	cmp	r3, #127	; 0x7f
 8008990:	d8f0      	bhi.n	8008974 <SEGGER_SYSVIEW_SendModule+0xa0>
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	1c5a      	adds	r2, r3, #1
 8008996:	61fa      	str	r2, [r7, #28]
 8008998:	69ba      	ldr	r2, [r7, #24]
 800899a:	b2d2      	uxtb	r2, r2
 800899c:	701a      	strb	r2, [r3, #0]
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80089a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	2280      	movs	r2, #128	; 0x80
 80089a8:	4619      	mov	r1, r3
 80089aa:	68f8      	ldr	r0, [r7, #12]
 80089ac:	f7fe fd84 	bl	80074b8 <_EncodeStr>
 80089b0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80089b2:	2216      	movs	r2, #22
 80089b4:	68f9      	ldr	r1, [r7, #12]
 80089b6:	6938      	ldr	r0, [r7, #16]
 80089b8:	f7fe febc 	bl	8007734 <_SendPacket>
      RECORD_END();
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80089c2:	bf00      	nop
 80089c4:	3730      	adds	r7, #48	; 0x30
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	200143b4 	.word	0x200143b4
 80089d0:	200143bc 	.word	0x200143bc

080089d4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80089da:	4b0c      	ldr	r3, [pc, #48]	; (8008a0c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d00f      	beq.n	8008a02 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80089e2:	4b0a      	ldr	r3, [pc, #40]	; (8008a0c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d002      	beq.n	80089f6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d1f2      	bne.n	80089e8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8008a02:	bf00      	nop
 8008a04:	3708      	adds	r7, #8
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	200143b4 	.word	0x200143b4

08008a10 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b086      	sub	sp, #24
 8008a14:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8008a16:	f3ef 8311 	mrs	r3, BASEPRI
 8008a1a:	f04f 0120 	mov.w	r1, #32
 8008a1e:	f381 8811 	msr	BASEPRI, r1
 8008a22:	60fb      	str	r3, [r7, #12]
 8008a24:	4817      	ldr	r0, [pc, #92]	; (8008a84 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8008a26:	f7fe fd97 	bl	8007558 <_PreparePacket>
 8008a2a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	617b      	str	r3, [r7, #20]
 8008a34:	4b14      	ldr	r3, [pc, #80]	; (8008a88 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	613b      	str	r3, [r7, #16]
 8008a3a:	e00b      	b.n	8008a54 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	b2da      	uxtb	r2, r3
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	1c59      	adds	r1, r3, #1
 8008a44:	6179      	str	r1, [r7, #20]
 8008a46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a4a:	b2d2      	uxtb	r2, r2
 8008a4c:	701a      	strb	r2, [r3, #0]
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	09db      	lsrs	r3, r3, #7
 8008a52:	613b      	str	r3, [r7, #16]
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	2b7f      	cmp	r3, #127	; 0x7f
 8008a58:	d8f0      	bhi.n	8008a3c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	1c5a      	adds	r2, r3, #1
 8008a5e:	617a      	str	r2, [r7, #20]
 8008a60:	693a      	ldr	r2, [r7, #16]
 8008a62:	b2d2      	uxtb	r2, r2
 8008a64:	701a      	strb	r2, [r3, #0]
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8008a6a:	221b      	movs	r2, #27
 8008a6c:	6879      	ldr	r1, [r7, #4]
 8008a6e:	68b8      	ldr	r0, [r7, #8]
 8008a70:	f7fe fe60 	bl	8007734 <_SendPacket>
  RECORD_END();
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f383 8811 	msr	BASEPRI, r3
}
 8008a7a:	bf00      	nop
 8008a7c:	3718      	adds	r7, #24
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	200143bc 	.word	0x200143bc
 8008a88:	200143b8 	.word	0x200143b8

08008a8c <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 8008a8c:	b40f      	push	{r0, r1, r2, r3}
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b082      	sub	sp, #8
 8008a92:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 8008a94:	f107 0314 	add.w	r3, r7, #20
 8008a98:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8008a9a:	1d3b      	adds	r3, r7, #4
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	2100      	movs	r1, #0
 8008aa0:	6938      	ldr	r0, [r7, #16]
 8008aa2:	f7fe ffb5 	bl	8007a10 <_VPrintHost>
  va_end(ParamList);
#endif
}
 8008aa6:	bf00      	nop
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ab0:	b004      	add	sp, #16
 8008ab2:	4770      	bx	lr

08008ab4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b08a      	sub	sp, #40	; 0x28
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008abc:	f3ef 8311 	mrs	r3, BASEPRI
 8008ac0:	f04f 0120 	mov.w	r1, #32
 8008ac4:	f381 8811 	msr	BASEPRI, r1
 8008ac8:	617b      	str	r3, [r7, #20]
 8008aca:	4827      	ldr	r0, [pc, #156]	; (8008b68 <SEGGER_SYSVIEW_Warn+0xb4>)
 8008acc:	f7fe fd44 	bl	8007558 <_PreparePacket>
 8008ad0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008ad2:	2280      	movs	r2, #128	; 0x80
 8008ad4:	6879      	ldr	r1, [r7, #4]
 8008ad6:	6938      	ldr	r0, [r7, #16]
 8008ad8:	f7fe fcee 	bl	80074b8 <_EncodeStr>
 8008adc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	623b      	str	r3, [r7, #32]
 8008ae6:	e00b      	b.n	8008b00 <SEGGER_SYSVIEW_Warn+0x4c>
 8008ae8:	6a3b      	ldr	r3, [r7, #32]
 8008aea:	b2da      	uxtb	r2, r3
 8008aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aee:	1c59      	adds	r1, r3, #1
 8008af0:	6279      	str	r1, [r7, #36]	; 0x24
 8008af2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008af6:	b2d2      	uxtb	r2, r2
 8008af8:	701a      	strb	r2, [r3, #0]
 8008afa:	6a3b      	ldr	r3, [r7, #32]
 8008afc:	09db      	lsrs	r3, r3, #7
 8008afe:	623b      	str	r3, [r7, #32]
 8008b00:	6a3b      	ldr	r3, [r7, #32]
 8008b02:	2b7f      	cmp	r3, #127	; 0x7f
 8008b04:	d8f0      	bhi.n	8008ae8 <SEGGER_SYSVIEW_Warn+0x34>
 8008b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b08:	1c5a      	adds	r2, r3, #1
 8008b0a:	627a      	str	r2, [r7, #36]	; 0x24
 8008b0c:	6a3a      	ldr	r2, [r7, #32]
 8008b0e:	b2d2      	uxtb	r2, r2
 8008b10:	701a      	strb	r2, [r3, #0]
 8008b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b14:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	61fb      	str	r3, [r7, #28]
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	61bb      	str	r3, [r7, #24]
 8008b1e:	e00b      	b.n	8008b38 <SEGGER_SYSVIEW_Warn+0x84>
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	b2da      	uxtb	r2, r3
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	1c59      	adds	r1, r3, #1
 8008b28:	61f9      	str	r1, [r7, #28]
 8008b2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008b2e:	b2d2      	uxtb	r2, r2
 8008b30:	701a      	strb	r2, [r3, #0]
 8008b32:	69bb      	ldr	r3, [r7, #24]
 8008b34:	09db      	lsrs	r3, r3, #7
 8008b36:	61bb      	str	r3, [r7, #24]
 8008b38:	69bb      	ldr	r3, [r7, #24]
 8008b3a:	2b7f      	cmp	r3, #127	; 0x7f
 8008b3c:	d8f0      	bhi.n	8008b20 <SEGGER_SYSVIEW_Warn+0x6c>
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	1c5a      	adds	r2, r3, #1
 8008b42:	61fa      	str	r2, [r7, #28]
 8008b44:	69ba      	ldr	r2, [r7, #24]
 8008b46:	b2d2      	uxtb	r2, r2
 8008b48:	701a      	strb	r2, [r3, #0]
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8008b4e:	221a      	movs	r2, #26
 8008b50:	68f9      	ldr	r1, [r7, #12]
 8008b52:	6938      	ldr	r0, [r7, #16]
 8008b54:	f7fe fdee 	bl	8007734 <_SendPacket>
  RECORD_END();
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	f383 8811 	msr	BASEPRI, r3
}
 8008b5e:	bf00      	nop
 8008b60:	3728      	adds	r7, #40	; 0x28
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	200143bc 	.word	0x200143bc

08008b6c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8008b70:	4803      	ldr	r0, [pc, #12]	; (8008b80 <_cbSendSystemDesc+0x14>)
 8008b72:	f7ff fc8d 	bl	8008490 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8008b76:	4803      	ldr	r0, [pc, #12]	; (8008b84 <_cbSendSystemDesc+0x18>)
 8008b78:	f7ff fc8a 	bl	8008490 <SEGGER_SYSVIEW_SendSysDesc>
}
 8008b7c:	bf00      	nop
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	080090d4 	.word	0x080090d4
 8008b84:	08009118 	.word	0x08009118

08008b88 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8008b8c:	4b06      	ldr	r3, [pc, #24]	; (8008ba8 <SEGGER_SYSVIEW_Conf+0x20>)
 8008b8e:	6818      	ldr	r0, [r3, #0]
 8008b90:	4b05      	ldr	r3, [pc, #20]	; (8008ba8 <SEGGER_SYSVIEW_Conf+0x20>)
 8008b92:	6819      	ldr	r1, [r3, #0]
 8008b94:	4b05      	ldr	r3, [pc, #20]	; (8008bac <SEGGER_SYSVIEW_Conf+0x24>)
 8008b96:	4a06      	ldr	r2, [pc, #24]	; (8008bb0 <SEGGER_SYSVIEW_Conf+0x28>)
 8008b98:	f7fe fff8 	bl	8007b8c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8008b9c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8008ba0:	f7ff f838 	bl	8007c14 <SEGGER_SYSVIEW_SetRAMBase>
}
 8008ba4:	bf00      	nop
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	20000000 	.word	0x20000000
 8008bac:	08008b6d 	.word	0x08008b6d
 8008bb0:	080091d0 	.word	0x080091d0

08008bb4 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8008bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8008bba:	2300      	movs	r3, #0
 8008bbc:	607b      	str	r3, [r7, #4]
 8008bbe:	e033      	b.n	8008c28 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8008bc0:	491e      	ldr	r1, [pc, #120]	; (8008c3c <_cbSendTaskList+0x88>)
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	4413      	add	r3, r2
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	440b      	add	r3, r1
 8008bce:	6818      	ldr	r0, [r3, #0]
 8008bd0:	491a      	ldr	r1, [pc, #104]	; (8008c3c <_cbSendTaskList+0x88>)
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4413      	add	r3, r2
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	440b      	add	r3, r1
 8008bde:	3304      	adds	r3, #4
 8008be0:	6819      	ldr	r1, [r3, #0]
 8008be2:	4c16      	ldr	r4, [pc, #88]	; (8008c3c <_cbSendTaskList+0x88>)
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	4613      	mov	r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4413      	add	r3, r2
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	4423      	add	r3, r4
 8008bf0:	3308      	adds	r3, #8
 8008bf2:	681c      	ldr	r4, [r3, #0]
 8008bf4:	4d11      	ldr	r5, [pc, #68]	; (8008c3c <_cbSendTaskList+0x88>)
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	4613      	mov	r3, r2
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	4413      	add	r3, r2
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	442b      	add	r3, r5
 8008c02:	330c      	adds	r3, #12
 8008c04:	681d      	ldr	r5, [r3, #0]
 8008c06:	4e0d      	ldr	r6, [pc, #52]	; (8008c3c <_cbSendTaskList+0x88>)
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	4413      	add	r3, r2
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	4433      	add	r3, r6
 8008c14:	3310      	adds	r3, #16
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	9300      	str	r3, [sp, #0]
 8008c1a:	462b      	mov	r3, r5
 8008c1c:	4622      	mov	r2, r4
 8008c1e:	f000 f8bd 	bl	8008d9c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	3301      	adds	r3, #1
 8008c26:	607b      	str	r3, [r7, #4]
 8008c28:	4b05      	ldr	r3, [pc, #20]	; (8008c40 <_cbSendTaskList+0x8c>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d3c6      	bcc.n	8008bc0 <_cbSendTaskList+0xc>
  }
}
 8008c32:	bf00      	nop
 8008c34:	bf00      	nop
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c3c:	200144a0 	.word	0x200144a0
 8008c40:	20014540 	.word	0x20014540

08008c44 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8008c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c48:	b082      	sub	sp, #8
 8008c4a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8008c4c:	f7fc fe82 	bl	8005954 <xTaskGetTickCountFromISR>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2200      	movs	r2, #0
 8008c54:	469a      	mov	sl, r3
 8008c56:	4693      	mov	fp, r2
 8008c58:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8008c5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c60:	4602      	mov	r2, r0
 8008c62:	460b      	mov	r3, r1
 8008c64:	f04f 0a00 	mov.w	sl, #0
 8008c68:	f04f 0b00 	mov.w	fp, #0
 8008c6c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8008c70:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8008c74:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8008c78:	4652      	mov	r2, sl
 8008c7a:	465b      	mov	r3, fp
 8008c7c:	1a14      	subs	r4, r2, r0
 8008c7e:	eb63 0501 	sbc.w	r5, r3, r1
 8008c82:	f04f 0200 	mov.w	r2, #0
 8008c86:	f04f 0300 	mov.w	r3, #0
 8008c8a:	00ab      	lsls	r3, r5, #2
 8008c8c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8008c90:	00a2      	lsls	r2, r4, #2
 8008c92:	4614      	mov	r4, r2
 8008c94:	461d      	mov	r5, r3
 8008c96:	eb14 0800 	adds.w	r8, r4, r0
 8008c9a:	eb45 0901 	adc.w	r9, r5, r1
 8008c9e:	f04f 0200 	mov.w	r2, #0
 8008ca2:	f04f 0300 	mov.w	r3, #0
 8008ca6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008caa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008cae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008cb2:	4690      	mov	r8, r2
 8008cb4:	4699      	mov	r9, r3
 8008cb6:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8008cba:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8008cbe:	4610      	mov	r0, r2
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	3708      	adds	r7, #8
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08008ccc <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b086      	sub	sp, #24
 8008cd0:	af02      	add	r7, sp, #8
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
 8008cd8:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8008cda:	2205      	movs	r2, #5
 8008cdc:	492b      	ldr	r1, [pc, #172]	; (8008d8c <SYSVIEW_AddTask+0xc0>)
 8008cde:	68b8      	ldr	r0, [r7, #8]
 8008ce0:	f000 f8a2 	bl	8008e28 <memcmp>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d04b      	beq.n	8008d82 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8008cea:	4b29      	ldr	r3, [pc, #164]	; (8008d90 <SYSVIEW_AddTask+0xc4>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	2b07      	cmp	r3, #7
 8008cf0:	d903      	bls.n	8008cfa <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8008cf2:	4828      	ldr	r0, [pc, #160]	; (8008d94 <SYSVIEW_AddTask+0xc8>)
 8008cf4:	f7ff fede 	bl	8008ab4 <SEGGER_SYSVIEW_Warn>
    return;
 8008cf8:	e044      	b.n	8008d84 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8008cfa:	4b25      	ldr	r3, [pc, #148]	; (8008d90 <SYSVIEW_AddTask+0xc4>)
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	4926      	ldr	r1, [pc, #152]	; (8008d98 <SYSVIEW_AddTask+0xcc>)
 8008d00:	4613      	mov	r3, r2
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	4413      	add	r3, r2
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	440b      	add	r3, r1
 8008d0a:	68fa      	ldr	r2, [r7, #12]
 8008d0c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8008d0e:	4b20      	ldr	r3, [pc, #128]	; (8008d90 <SYSVIEW_AddTask+0xc4>)
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	4921      	ldr	r1, [pc, #132]	; (8008d98 <SYSVIEW_AddTask+0xcc>)
 8008d14:	4613      	mov	r3, r2
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	4413      	add	r3, r2
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	440b      	add	r3, r1
 8008d1e:	3304      	adds	r3, #4
 8008d20:	68ba      	ldr	r2, [r7, #8]
 8008d22:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8008d24:	4b1a      	ldr	r3, [pc, #104]	; (8008d90 <SYSVIEW_AddTask+0xc4>)
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	491b      	ldr	r1, [pc, #108]	; (8008d98 <SYSVIEW_AddTask+0xcc>)
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	4413      	add	r3, r2
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	440b      	add	r3, r1
 8008d34:	3308      	adds	r3, #8
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8008d3a:	4b15      	ldr	r3, [pc, #84]	; (8008d90 <SYSVIEW_AddTask+0xc4>)
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	4916      	ldr	r1, [pc, #88]	; (8008d98 <SYSVIEW_AddTask+0xcc>)
 8008d40:	4613      	mov	r3, r2
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	4413      	add	r3, r2
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	440b      	add	r3, r1
 8008d4a:	330c      	adds	r3, #12
 8008d4c:	683a      	ldr	r2, [r7, #0]
 8008d4e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8008d50:	4b0f      	ldr	r3, [pc, #60]	; (8008d90 <SYSVIEW_AddTask+0xc4>)
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	4910      	ldr	r1, [pc, #64]	; (8008d98 <SYSVIEW_AddTask+0xcc>)
 8008d56:	4613      	mov	r3, r2
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	4413      	add	r3, r2
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	440b      	add	r3, r1
 8008d60:	3310      	adds	r3, #16
 8008d62:	69ba      	ldr	r2, [r7, #24]
 8008d64:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8008d66:	4b0a      	ldr	r3, [pc, #40]	; (8008d90 <SYSVIEW_AddTask+0xc4>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	4a08      	ldr	r2, [pc, #32]	; (8008d90 <SYSVIEW_AddTask+0xc4>)
 8008d6e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8008d70:	69bb      	ldr	r3, [r7, #24]
 8008d72:	9300      	str	r3, [sp, #0]
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	68b9      	ldr	r1, [r7, #8]
 8008d7a:	68f8      	ldr	r0, [r7, #12]
 8008d7c:	f000 f80e 	bl	8008d9c <SYSVIEW_SendTaskInfo>
 8008d80:	e000      	b.n	8008d84 <SYSVIEW_AddTask+0xb8>
    return;
 8008d82:	bf00      	nop

}
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	08009128 	.word	0x08009128
 8008d90:	20014540 	.word	0x20014540
 8008d94:	08009130 	.word	0x08009130
 8008d98:	200144a0 	.word	0x200144a0

08008d9c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b08a      	sub	sp, #40	; 0x28
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	607a      	str	r2, [r7, #4]
 8008da8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8008daa:	f107 0314 	add.w	r3, r7, #20
 8008dae:	2214      	movs	r2, #20
 8008db0:	2100      	movs	r1, #0
 8008db2:	4618      	mov	r0, r3
 8008db4:	f000 f856 	bl	8008e64 <memset>
  TaskInfo.TaskID     = TaskID;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8008dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dca:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8008dcc:	f107 0314 	add.w	r3, r7, #20
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7ff fa65 	bl	80082a0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8008dd6:	bf00      	nop
 8008dd8:	3728      	adds	r7, #40	; 0x28
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
	...

08008de0 <__libc_init_array>:
 8008de0:	b570      	push	{r4, r5, r6, lr}
 8008de2:	4d0d      	ldr	r5, [pc, #52]	; (8008e18 <__libc_init_array+0x38>)
 8008de4:	4c0d      	ldr	r4, [pc, #52]	; (8008e1c <__libc_init_array+0x3c>)
 8008de6:	1b64      	subs	r4, r4, r5
 8008de8:	10a4      	asrs	r4, r4, #2
 8008dea:	2600      	movs	r6, #0
 8008dec:	42a6      	cmp	r6, r4
 8008dee:	d109      	bne.n	8008e04 <__libc_init_array+0x24>
 8008df0:	4d0b      	ldr	r5, [pc, #44]	; (8008e20 <__libc_init_array+0x40>)
 8008df2:	4c0c      	ldr	r4, [pc, #48]	; (8008e24 <__libc_init_array+0x44>)
 8008df4:	f000 f83e 	bl	8008e74 <_init>
 8008df8:	1b64      	subs	r4, r4, r5
 8008dfa:	10a4      	asrs	r4, r4, #2
 8008dfc:	2600      	movs	r6, #0
 8008dfe:	42a6      	cmp	r6, r4
 8008e00:	d105      	bne.n	8008e0e <__libc_init_array+0x2e>
 8008e02:	bd70      	pop	{r4, r5, r6, pc}
 8008e04:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e08:	4798      	blx	r3
 8008e0a:	3601      	adds	r6, #1
 8008e0c:	e7ee      	b.n	8008dec <__libc_init_array+0xc>
 8008e0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e12:	4798      	blx	r3
 8008e14:	3601      	adds	r6, #1
 8008e16:	e7f2      	b.n	8008dfe <__libc_init_array+0x1e>
 8008e18:	080091e0 	.word	0x080091e0
 8008e1c:	080091e0 	.word	0x080091e0
 8008e20:	080091e0 	.word	0x080091e0
 8008e24:	080091e4 	.word	0x080091e4

08008e28 <memcmp>:
 8008e28:	b510      	push	{r4, lr}
 8008e2a:	3901      	subs	r1, #1
 8008e2c:	4402      	add	r2, r0
 8008e2e:	4290      	cmp	r0, r2
 8008e30:	d101      	bne.n	8008e36 <memcmp+0xe>
 8008e32:	2000      	movs	r0, #0
 8008e34:	e005      	b.n	8008e42 <memcmp+0x1a>
 8008e36:	7803      	ldrb	r3, [r0, #0]
 8008e38:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008e3c:	42a3      	cmp	r3, r4
 8008e3e:	d001      	beq.n	8008e44 <memcmp+0x1c>
 8008e40:	1b18      	subs	r0, r3, r4
 8008e42:	bd10      	pop	{r4, pc}
 8008e44:	3001      	adds	r0, #1
 8008e46:	e7f2      	b.n	8008e2e <memcmp+0x6>

08008e48 <memcpy>:
 8008e48:	440a      	add	r2, r1
 8008e4a:	4291      	cmp	r1, r2
 8008e4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e50:	d100      	bne.n	8008e54 <memcpy+0xc>
 8008e52:	4770      	bx	lr
 8008e54:	b510      	push	{r4, lr}
 8008e56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e5e:	4291      	cmp	r1, r2
 8008e60:	d1f9      	bne.n	8008e56 <memcpy+0xe>
 8008e62:	bd10      	pop	{r4, pc}

08008e64 <memset>:
 8008e64:	4402      	add	r2, r0
 8008e66:	4603      	mov	r3, r0
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d100      	bne.n	8008e6e <memset+0xa>
 8008e6c:	4770      	bx	lr
 8008e6e:	f803 1b01 	strb.w	r1, [r3], #1
 8008e72:	e7f9      	b.n	8008e68 <memset+0x4>

08008e74 <_init>:
 8008e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e76:	bf00      	nop
 8008e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e7a:	bc08      	pop	{r3}
 8008e7c:	469e      	mov	lr, r3
 8008e7e:	4770      	bx	lr

08008e80 <_fini>:
 8008e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e82:	bf00      	nop
 8008e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e86:	bc08      	pop	{r3}
 8008e88:	469e      	mov	lr, r3
 8008e8a:	4770      	bx	lr
