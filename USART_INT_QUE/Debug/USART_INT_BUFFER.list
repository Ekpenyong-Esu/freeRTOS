
USART_INT_BUFFER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e2c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000034c  08008fdc  08008fdc  00018fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009328  08009328  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08009328  08009328  00019328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009330  08009330  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009330  08009330  00019330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009334  08009334  00019334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08009338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00014594  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200145a4  200145a4  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001acb5  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a53  00000000  00000000  0003acf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001650  00000000  00000000  0003e748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014b8  00000000  00000000  0003fd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000476e  00000000  00000000  00041250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e10f  00000000  00000000  000459be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8c5e  00000000  00000000  00063acd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014c72b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d34  00000000  00000000  0014c77c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008fc4 	.word	0x08008fc4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08008fc4 	.word	0x08008fc4

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20012f2c 	.word	0x20012f2c

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b974 	b.w	8000584 <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9d08      	ldr	r5, [sp, #32]
 80002ba:	4604      	mov	r4, r0
 80002bc:	468e      	mov	lr, r1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d14d      	bne.n	800035e <__udivmoddi4+0xaa>
 80002c2:	428a      	cmp	r2, r1
 80002c4:	4694      	mov	ip, r2
 80002c6:	d969      	bls.n	800039c <__udivmoddi4+0xe8>
 80002c8:	fab2 f282 	clz	r2, r2
 80002cc:	b152      	cbz	r2, 80002e4 <__udivmoddi4+0x30>
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	f1c2 0120 	rsb	r1, r2, #32
 80002d6:	fa20 f101 	lsr.w	r1, r0, r1
 80002da:	fa0c fc02 	lsl.w	ip, ip, r2
 80002de:	ea41 0e03 	orr.w	lr, r1, r3
 80002e2:	4094      	lsls	r4, r2
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	0c21      	lsrs	r1, r4, #16
 80002ea:	fbbe f6f8 	udiv	r6, lr, r8
 80002ee:	fa1f f78c 	uxth.w	r7, ip
 80002f2:	fb08 e316 	mls	r3, r8, r6, lr
 80002f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002fa:	fb06 f107 	mul.w	r1, r6, r7
 80002fe:	4299      	cmp	r1, r3
 8000300:	d90a      	bls.n	8000318 <__udivmoddi4+0x64>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 30ff 	add.w	r0, r6, #4294967295
 800030a:	f080 811f 	bcs.w	800054c <__udivmoddi4+0x298>
 800030e:	4299      	cmp	r1, r3
 8000310:	f240 811c 	bls.w	800054c <__udivmoddi4+0x298>
 8000314:	3e02      	subs	r6, #2
 8000316:	4463      	add	r3, ip
 8000318:	1a5b      	subs	r3, r3, r1
 800031a:	b2a4      	uxth	r4, r4
 800031c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000320:	fb08 3310 	mls	r3, r8, r0, r3
 8000324:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000328:	fb00 f707 	mul.w	r7, r0, r7
 800032c:	42a7      	cmp	r7, r4
 800032e:	d90a      	bls.n	8000346 <__udivmoddi4+0x92>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	f080 810a 	bcs.w	8000550 <__udivmoddi4+0x29c>
 800033c:	42a7      	cmp	r7, r4
 800033e:	f240 8107 	bls.w	8000550 <__udivmoddi4+0x29c>
 8000342:	4464      	add	r4, ip
 8000344:	3802      	subs	r0, #2
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	1be4      	subs	r4, r4, r7
 800034c:	2600      	movs	r6, #0
 800034e:	b11d      	cbz	r5, 8000358 <__udivmoddi4+0xa4>
 8000350:	40d4      	lsrs	r4, r2
 8000352:	2300      	movs	r3, #0
 8000354:	e9c5 4300 	strd	r4, r3, [r5]
 8000358:	4631      	mov	r1, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0xc2>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80ef 	beq.w	8000546 <__udivmoddi4+0x292>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x160>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xd4>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80f9 	bhi.w	800057a <__udivmoddi4+0x2c6>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0303 	sbc.w	r3, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	469e      	mov	lr, r3
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e0      	beq.n	8000358 <__udivmoddi4+0xa4>
 8000396:	e9c5 4e00 	strd	r4, lr, [r5]
 800039a:	e7dd      	b.n	8000358 <__udivmoddi4+0xa4>
 800039c:	b902      	cbnz	r2, 80003a0 <__udivmoddi4+0xec>
 800039e:	deff      	udf	#255	; 0xff
 80003a0:	fab2 f282 	clz	r2, r2
 80003a4:	2a00      	cmp	r2, #0
 80003a6:	f040 8092 	bne.w	80004ce <__udivmoddi4+0x21a>
 80003aa:	eba1 010c 	sub.w	r1, r1, ip
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	2601      	movs	r6, #1
 80003b8:	0c20      	lsrs	r0, r4, #16
 80003ba:	fbb1 f3f7 	udiv	r3, r1, r7
 80003be:	fb07 1113 	mls	r1, r7, r3, r1
 80003c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c6:	fb0e f003 	mul.w	r0, lr, r3
 80003ca:	4288      	cmp	r0, r1
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x12c>
 80003ce:	eb1c 0101 	adds.w	r1, ip, r1
 80003d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x12a>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f200 80cb 	bhi.w	8000574 <__udivmoddi4+0x2c0>
 80003de:	4643      	mov	r3, r8
 80003e0:	1a09      	subs	r1, r1, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e8:	fb07 1110 	mls	r1, r7, r0, r1
 80003ec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003f0:	fb0e fe00 	mul.w	lr, lr, r0
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x156>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x154>
 8000402:	45a6      	cmp	lr, r4
 8000404:	f200 80bb 	bhi.w	800057e <__udivmoddi4+0x2ca>
 8000408:	4608      	mov	r0, r1
 800040a:	eba4 040e 	sub.w	r4, r4, lr
 800040e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000412:	e79c      	b.n	800034e <__udivmoddi4+0x9a>
 8000414:	f1c6 0720 	rsb	r7, r6, #32
 8000418:	40b3      	lsls	r3, r6
 800041a:	fa22 fc07 	lsr.w	ip, r2, r7
 800041e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000422:	fa20 f407 	lsr.w	r4, r0, r7
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	431c      	orrs	r4, r3
 800042c:	40f9      	lsrs	r1, r7
 800042e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000432:	fa00 f306 	lsl.w	r3, r0, r6
 8000436:	fbb1 f8f9 	udiv	r8, r1, r9
 800043a:	0c20      	lsrs	r0, r4, #16
 800043c:	fa1f fe8c 	uxth.w	lr, ip
 8000440:	fb09 1118 	mls	r1, r9, r8, r1
 8000444:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000448:	fb08 f00e 	mul.w	r0, r8, lr
 800044c:	4288      	cmp	r0, r1
 800044e:	fa02 f206 	lsl.w	r2, r2, r6
 8000452:	d90b      	bls.n	800046c <__udivmoddi4+0x1b8>
 8000454:	eb1c 0101 	adds.w	r1, ip, r1
 8000458:	f108 3aff 	add.w	sl, r8, #4294967295
 800045c:	f080 8088 	bcs.w	8000570 <__udivmoddi4+0x2bc>
 8000460:	4288      	cmp	r0, r1
 8000462:	f240 8085 	bls.w	8000570 <__udivmoddi4+0x2bc>
 8000466:	f1a8 0802 	sub.w	r8, r8, #2
 800046a:	4461      	add	r1, ip
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f9 	udiv	r0, r1, r9
 8000474:	fb09 1110 	mls	r1, r9, r0, r1
 8000478:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800047c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000480:	458e      	cmp	lr, r1
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x1e2>
 8000484:	eb1c 0101 	adds.w	r1, ip, r1
 8000488:	f100 34ff 	add.w	r4, r0, #4294967295
 800048c:	d26c      	bcs.n	8000568 <__udivmoddi4+0x2b4>
 800048e:	458e      	cmp	lr, r1
 8000490:	d96a      	bls.n	8000568 <__udivmoddi4+0x2b4>
 8000492:	3802      	subs	r0, #2
 8000494:	4461      	add	r1, ip
 8000496:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800049a:	fba0 9402 	umull	r9, r4, r0, r2
 800049e:	eba1 010e 	sub.w	r1, r1, lr
 80004a2:	42a1      	cmp	r1, r4
 80004a4:	46c8      	mov	r8, r9
 80004a6:	46a6      	mov	lr, r4
 80004a8:	d356      	bcc.n	8000558 <__udivmoddi4+0x2a4>
 80004aa:	d053      	beq.n	8000554 <__udivmoddi4+0x2a0>
 80004ac:	b15d      	cbz	r5, 80004c6 <__udivmoddi4+0x212>
 80004ae:	ebb3 0208 	subs.w	r2, r3, r8
 80004b2:	eb61 010e 	sbc.w	r1, r1, lr
 80004b6:	fa01 f707 	lsl.w	r7, r1, r7
 80004ba:	fa22 f306 	lsr.w	r3, r2, r6
 80004be:	40f1      	lsrs	r1, r6
 80004c0:	431f      	orrs	r7, r3
 80004c2:	e9c5 7100 	strd	r7, r1, [r5]
 80004c6:	2600      	movs	r6, #0
 80004c8:	4631      	mov	r1, r6
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	40d8      	lsrs	r0, r3
 80004d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d8:	fa21 f303 	lsr.w	r3, r1, r3
 80004dc:	4091      	lsls	r1, r2
 80004de:	4301      	orrs	r1, r0
 80004e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e4:	fa1f fe8c 	uxth.w	lr, ip
 80004e8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004ec:	fb07 3610 	mls	r6, r7, r0, r3
 80004f0:	0c0b      	lsrs	r3, r1, #16
 80004f2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f6:	fb00 f60e 	mul.w	r6, r0, lr
 80004fa:	429e      	cmp	r6, r3
 80004fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x260>
 8000502:	eb1c 0303 	adds.w	r3, ip, r3
 8000506:	f100 38ff 	add.w	r8, r0, #4294967295
 800050a:	d22f      	bcs.n	800056c <__udivmoddi4+0x2b8>
 800050c:	429e      	cmp	r6, r3
 800050e:	d92d      	bls.n	800056c <__udivmoddi4+0x2b8>
 8000510:	3802      	subs	r0, #2
 8000512:	4463      	add	r3, ip
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	b289      	uxth	r1, r1
 8000518:	fbb3 f6f7 	udiv	r6, r3, r7
 800051c:	fb07 3316 	mls	r3, r7, r6, r3
 8000520:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000524:	fb06 f30e 	mul.w	r3, r6, lr
 8000528:	428b      	cmp	r3, r1
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x28a>
 800052c:	eb1c 0101 	adds.w	r1, ip, r1
 8000530:	f106 38ff 	add.w	r8, r6, #4294967295
 8000534:	d216      	bcs.n	8000564 <__udivmoddi4+0x2b0>
 8000536:	428b      	cmp	r3, r1
 8000538:	d914      	bls.n	8000564 <__udivmoddi4+0x2b0>
 800053a:	3e02      	subs	r6, #2
 800053c:	4461      	add	r1, ip
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000544:	e738      	b.n	80003b8 <__udivmoddi4+0x104>
 8000546:	462e      	mov	r6, r5
 8000548:	4628      	mov	r0, r5
 800054a:	e705      	b.n	8000358 <__udivmoddi4+0xa4>
 800054c:	4606      	mov	r6, r0
 800054e:	e6e3      	b.n	8000318 <__udivmoddi4+0x64>
 8000550:	4618      	mov	r0, r3
 8000552:	e6f8      	b.n	8000346 <__udivmoddi4+0x92>
 8000554:	454b      	cmp	r3, r9
 8000556:	d2a9      	bcs.n	80004ac <__udivmoddi4+0x1f8>
 8000558:	ebb9 0802 	subs.w	r8, r9, r2
 800055c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000560:	3801      	subs	r0, #1
 8000562:	e7a3      	b.n	80004ac <__udivmoddi4+0x1f8>
 8000564:	4646      	mov	r6, r8
 8000566:	e7ea      	b.n	800053e <__udivmoddi4+0x28a>
 8000568:	4620      	mov	r0, r4
 800056a:	e794      	b.n	8000496 <__udivmoddi4+0x1e2>
 800056c:	4640      	mov	r0, r8
 800056e:	e7d1      	b.n	8000514 <__udivmoddi4+0x260>
 8000570:	46d0      	mov	r8, sl
 8000572:	e77b      	b.n	800046c <__udivmoddi4+0x1b8>
 8000574:	3b02      	subs	r3, #2
 8000576:	4461      	add	r1, ip
 8000578:	e732      	b.n	80003e0 <__udivmoddi4+0x12c>
 800057a:	4630      	mov	r0, r6
 800057c:	e709      	b.n	8000392 <__udivmoddi4+0xde>
 800057e:	4464      	add	r4, ip
 8000580:	3802      	subs	r0, #2
 8000582:	e742      	b.n	800040a <__udivmoddi4+0x156>

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <initUart1Pins>:
#include "UartQuickDirtyInit.h"
#include <stm32f4xx_hal.h>
#include <main.h>

void initUart1Pins( void )
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

	//PA9 is USART1_RX PA10 is USART1_TX
	GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800059c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80005a0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a2:	2302      	movs	r3, #2
 80005a4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005aa:	2303      	movs	r3, #3
 80005ac:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80005ae:	2307      	movs	r3, #7
 80005b0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	4619      	mov	r1, r3
 80005b6:	4803      	ldr	r0, [pc, #12]	; (80005c4 <initUart1Pins+0x3c>)
 80005b8:	f001 fcb6 	bl	8001f28 <HAL_GPIO_Init>
}
 80005bc:	bf00      	nop
 80005be:	3718      	adds	r7, #24
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40020000 	.word	0x40020000

080005c8 <initUart5Pins>:

void initUart5Pins( void )
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = GPIO_PIN_12;
 80005dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e2:	2302      	movs	r3, #2
 80005e4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ea:	2303      	movs	r3, #3
 80005ec:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80005ee:	2308      	movs	r3, #8
 80005f0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	4619      	mov	r1, r3
 80005f6:	480b      	ldr	r0, [pc, #44]	; (8000624 <initUart5Pins+0x5c>)
 80005f8:	f001 fc96 	bl	8001f28 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005fc:	2304      	movs	r3, #4
 80005fe:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000600:	2302      	movs	r3, #2
 8000602:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000608:	2303      	movs	r3, #3
 800060a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800060c:	2308      	movs	r3, #8
 800060e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	4619      	mov	r1, r3
 8000614:	4804      	ldr	r0, [pc, #16]	; (8000628 <initUart5Pins+0x60>)
 8000616:	f001 fc87 	bl	8001f28 <HAL_GPIO_Init>

}
 800061a:	bf00      	nop
 800061c:	3718      	adds	r7, #24
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40020800 	.word	0x40020800
 8000628:	40020c00 	.word	0x40020c00

0800062c <STM_UartInit>:
 * @param Baudrate desired baudrate the UART will be setup to use
 * @param DmaTx pointer to DMA struct to use when transmitting via DMA
 * @param DmaRx pointer to DMA struct to use when receiving via DMA
 */
void STM_UartInit( USART_TypeDef* STM_UART_PERIPH, uint32_t Baudrate, DMA_HandleTypeDef* DmaTx, DMA_HandleTypeDef* DmaRx )
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b098      	sub	sp, #96	; 0x60
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
 8000638:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef retVal;
	UART_HandleTypeDef uartInitStruct;
	assert_param(	STM_UART_PERIPH == USART1 ||
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	4a2e      	ldr	r2, [pc, #184]	; (80006f8 <STM_UartInit+0xcc>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d007      	beq.n	8000652 <STM_UartInit+0x26>
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	4a2d      	ldr	r2, [pc, #180]	; (80006fc <STM_UartInit+0xd0>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d003      	beq.n	8000652 <STM_UartInit+0x26>
 800064a:	2150      	movs	r1, #80	; 0x50
 800064c:	482c      	ldr	r0, [pc, #176]	; (8000700 <STM_UartInit+0xd4>)
 800064e:	f000 fd61 	bl	8001114 <assert_failed>
					STM_UART_PERIPH == UART5 );

	if(STM_UART_PERIPH == USART1)
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	4a28      	ldr	r2, [pc, #160]	; (80006f8 <STM_UartInit+0xcc>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d110      	bne.n	800067c <STM_UartInit+0x50>
	{
		initUart1Pins();
 800065a:	f7ff ff95 	bl	8000588 <initUart1Pins>
		__USART1_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]
 8000662:	4b28      	ldr	r3, [pc, #160]	; (8000704 <STM_UartInit+0xd8>)
 8000664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000666:	4a27      	ldr	r2, [pc, #156]	; (8000704 <STM_UartInit+0xd8>)
 8000668:	f043 0310 	orr.w	r3, r3, #16
 800066c:	6453      	str	r3, [r2, #68]	; 0x44
 800066e:	4b25      	ldr	r3, [pc, #148]	; (8000704 <STM_UartInit+0xd8>)
 8000670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000672:	f003 0310 	and.w	r3, r3, #16
 8000676:	617b      	str	r3, [r7, #20]
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	e013      	b.n	80006a4 <STM_UartInit+0x78>
	}
	else if (STM_UART_PERIPH == UART5)
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	4a1f      	ldr	r2, [pc, #124]	; (80006fc <STM_UartInit+0xd0>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d10f      	bne.n	80006a4 <STM_UartInit+0x78>
	{
		initUart5Pins();
 8000684:	f7ff ffa0 	bl	80005c8 <initUart5Pins>
		__UART5_CLK_ENABLE();
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]
 800068c:	4b1d      	ldr	r3, [pc, #116]	; (8000704 <STM_UartInit+0xd8>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	4a1c      	ldr	r2, [pc, #112]	; (8000704 <STM_UartInit+0xd8>)
 8000692:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000696:	6413      	str	r3, [r2, #64]	; 0x40
 8000698:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <STM_UartInit+0xd8>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80006a0:	613b      	str	r3, [r7, #16]
 80006a2:	693b      	ldr	r3, [r7, #16]
	}

	uartInitStruct.Instance = STM_UART_PERIPH;
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	61bb      	str	r3, [r7, #24]
	uartInitStruct.Init.BaudRate = Baudrate;
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	61fb      	str	r3, [r7, #28]
	uartInitStruct.Init.WordLength = UART_WORDLENGTH_8B;
 80006ac:	2300      	movs	r3, #0
 80006ae:	623b      	str	r3, [r7, #32]
	uartInitStruct.Init.StopBits = UART_STOPBITS_1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24
	uartInitStruct.Init.Parity = UART_PARITY_NONE;
 80006b4:	2300      	movs	r3, #0
 80006b6:	62bb      	str	r3, [r7, #40]	; 0x28
	uartInitStruct.Init.Mode = UART_MODE_TX_RX;
 80006b8:	230c      	movs	r3, #12
 80006ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	uartInitStruct.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006bc:	2300      	movs	r3, #0
 80006be:	633b      	str	r3, [r7, #48]	; 0x30
	uartInitStruct.Init.OverSampling = UART_OVERSAMPLING_8;
 80006c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006c4:	637b      	str	r3, [r7, #52]	; 0x34
	//uartInitStruct.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	uartInitStruct.hdmatx = DmaTx;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	64fb      	str	r3, [r7, #76]	; 0x4c
	uartInitStruct.hdmarx = DmaRx;
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	653b      	str	r3, [r7, #80]	; 0x50
	//uartInitStruct.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;

	retVal = HAL_UART_Init(&uartInitStruct);
 80006ce:	f107 0318 	add.w	r3, r7, #24
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 f964 	bl	80039a0 <HAL_UART_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	assert_param(retVal == HAL_OK);
 80006de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d003      	beq.n	80006ee <STM_UartInit+0xc2>
 80006e6:	216c      	movs	r1, #108	; 0x6c
 80006e8:	4805      	ldr	r0, [pc, #20]	; (8000700 <STM_UartInit+0xd4>)
 80006ea:	f000 fd13 	bl	8001114 <assert_failed>
}
 80006ee:	bf00      	nop
 80006f0:	3760      	adds	r7, #96	; 0x60
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40011000 	.word	0x40011000
 80006fc:	40005000 	.word	0x40005000
 8000700:	08008fdc 	.word	0x08008fdc
 8000704:	40023800 	.word	0x40023800

08000708 <SetupUart5ExternalSim>:
 * @param Baudrate desired baudrate for the UART4
 *
 * This is a quick and dirty setup. . .
 */
void SetupUart5ExternalSim( uint32_t BaudRate )
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	//setup DMA
	uart5TxDmaSetup();
 8000710:	f000 f81a 	bl	8000748 <uart5TxDmaSetup>

	//GPIO pins are setup in BSP/Nucleo_F767ZI_Init
	STM_UartInit(UART5, BaudRate, &hdma_uart5_tx, NULL);
 8000714:	2300      	movs	r3, #0
 8000716:	4a09      	ldr	r2, [pc, #36]	; (800073c <SetupUart5ExternalSim+0x34>)
 8000718:	6879      	ldr	r1, [r7, #4]
 800071a:	4809      	ldr	r0, [pc, #36]	; (8000740 <SetupUart5ExternalSim+0x38>)
 800071c:	f7ff ff86 	bl	800062c <STM_UartInit>

	//also enable DMA for UART5 Transmits
	UART5->CR3 |= USART_CR3_DMAT;
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <SetupUart5ExternalSim+0x38>)
 8000722:	695b      	ldr	r3, [r3, #20]
 8000724:	4a06      	ldr	r2, [pc, #24]	; (8000740 <SetupUart5ExternalSim+0x38>)
 8000726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800072a:	6153      	str	r3, [r2, #20]
	 *	start the repeating DMA transfer.  Eventually, non-circular
	 *	receivers will loose a character here or there at high baudrates.
	 *	When this happens, SEGGER_SYSVIEW_Print() will stop printing when it hits
	 *	the first NULL character.
	 */
	uart5TxDmaStartRepeat(uart5Msg, sizeof(uart5Msg));
 800072c:	2110      	movs	r1, #16
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <SetupUart5ExternalSim+0x3c>)
 8000730:	f000 f874 	bl	800081c <uart5TxDmaStartRepeat>
}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2000002c 	.word	0x2000002c
 8000740:	40005000 	.word	0x40005000
 8000744:	080092d0 	.word	0x080092d0

08000748 <uart5TxDmaSetup>:

static void uart5TxDmaSetup( void )
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	  __HAL_RCC_DMA1_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	4b2d      	ldr	r3, [pc, #180]	; (8000808 <uart5TxDmaSetup+0xc0>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a2c      	ldr	r2, [pc, #176]	; (8000808 <uart5TxDmaSetup+0xc0>)
 8000758:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b2a      	ldr	r3, [pc, #168]	; (8000808 <uart5TxDmaSetup+0xc0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

	  /* DMA interrupt init */
	  /* DMA1_Stream7_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2100      	movs	r1, #0
 800076e:	202f      	movs	r0, #47	; 0x2f
 8000770:	f000 ffc0 	bl	80016f4 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000774:	202f      	movs	r0, #47	; 0x2f
 8000776:	f000 ffe9 	bl	800174c <HAL_NVIC_EnableIRQ>

	//initialize the DMA peripheral to transfer uart4Msg
	//to UART4 repeatedly
	memset(&hdma_uart5_tx, 0, sizeof(hdma_uart5_tx));
 800077a:	2260      	movs	r2, #96	; 0x60
 800077c:	2100      	movs	r1, #0
 800077e:	4823      	ldr	r0, [pc, #140]	; (800080c <uart5TxDmaSetup+0xc4>)
 8000780:	f008 fc18 	bl	8008fb4 <memset>
	hdma_uart5_tx.Instance = DMA1_Stream7;
 8000784:	4b21      	ldr	r3, [pc, #132]	; (800080c <uart5TxDmaSetup+0xc4>)
 8000786:	4a22      	ldr	r2, [pc, #136]	; (8000810 <uart5TxDmaSetup+0xc8>)
 8000788:	601a      	str	r2, [r3, #0]
	hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;			//channel 4 is for UART5 Tx
 800078a:	4b20      	ldr	r3, [pc, #128]	; (800080c <uart5TxDmaSetup+0xc4>)
 800078c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000790:	605a      	str	r2, [r3, #4]
	hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;	//transfering out of memory and into the peripheral register
 8000792:	4b1e      	ldr	r3, [pc, #120]	; (800080c <uart5TxDmaSetup+0xc4>)
 8000794:	2240      	movs	r2, #64	; 0x40
 8000796:	609a      	str	r2, [r3, #8]
	hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;	//no fifo
 8000798:	4b1c      	ldr	r3, [pc, #112]	; (800080c <uart5TxDmaSetup+0xc4>)
 800079a:	2200      	movs	r2, #0
 800079c:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_uart5_tx.Init.MemBurst = DMA_MBURST_SINGLE;		//transfer 1 at a time
 800079e:	4b1b      	ldr	r3, [pc, #108]	; (800080c <uart5TxDmaSetup+0xc4>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007a4:	4b19      	ldr	r3, [pc, #100]	; (800080c <uart5TxDmaSetup+0xc4>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	619a      	str	r2, [r3, #24]
	hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;			//increment 1 byte at a time
 80007aa:	4b18      	ldr	r3, [pc, #96]	; (800080c <uart5TxDmaSetup+0xc4>)
 80007ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007b0:	611a      	str	r2, [r3, #16]
	hdma_uart5_tx.Init.Mode = DMA_CIRCULAR;				//this will automatically restart the transfer at the beginning after it has finished
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <uart5TxDmaSetup+0xc4>)
 80007b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007b8:	61da      	str	r2, [r3, #28]
	hdma_uart5_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;	//write 1 at a time to the peripheral
 80007ba:	4b14      	ldr	r3, [pc, #80]	; (800080c <uart5TxDmaSetup+0xc4>)
 80007bc:	2200      	movs	r2, #0
 80007be:	631a      	str	r2, [r3, #48]	; 0x30
	hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;		//always keep the peripheral address the same (the Tx data register is always in the same location)
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <uart5TxDmaSetup+0xc4>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
	hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <uart5TxDmaSetup+0xc4>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	615a      	str	r2, [r3, #20]
	//we're setting low priority since this is meant to be simulated data - the DMA
	//transfers of the active code should take priority
	hdma_uart5_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <uart5TxDmaSetup+0xc4>)
 80007ce:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007d2:	621a      	str	r2, [r3, #32]
	assert_param(HAL_DMA_Init(&hdma_uart5_tx) == HAL_OK);
 80007d4:	480d      	ldr	r0, [pc, #52]	; (800080c <uart5TxDmaSetup+0xc4>)
 80007d6:	f000 ffd1 	bl	800177c <HAL_DMA_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d003      	beq.n	80007e8 <uart5TxDmaSetup+0xa0>
 80007e0:	2161      	movs	r1, #97	; 0x61
 80007e2:	480c      	ldr	r0, [pc, #48]	; (8000814 <uart5TxDmaSetup+0xcc>)
 80007e4:	f000 fc96 	bl	8001114 <assert_failed>
	DMA1_Stream7->CR &= ~DMA_SxCR_EN;
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <uart5TxDmaSetup+0xc8>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a08      	ldr	r2, [pc, #32]	; (8000810 <uart5TxDmaSetup+0xc8>)
 80007ee:	f023 0301 	bic.w	r3, r3, #1
 80007f2:	6013      	str	r3, [r2, #0]

	//set the DMA transmit mode flag to enable DMA transfers
	UART5->CR3 |= USART_CR3_DMAT;
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <uart5TxDmaSetup+0xd0>)
 80007f6:	695b      	ldr	r3, [r3, #20]
 80007f8:	4a07      	ldr	r2, [pc, #28]	; (8000818 <uart5TxDmaSetup+0xd0>)
 80007fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007fe:	6153      	str	r3, [r2, #20]
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40023800 	.word	0x40023800
 800080c:	2000002c 	.word	0x2000002c
 8000810:	400260b8 	.word	0x400260b8
 8000814:	08009000 	.word	0x08009000
 8000818:	40005000 	.word	0x40005000

0800081c <uart5TxDmaStartRepeat>:
 * that will automatically repeat after it is finished
 * @param Msg pointer to array to transfer
 * @param Len number of elements in the array
 */
static void uart5TxDmaStartRepeat( const uint8_t* Msg, uint16_t Len )
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	460b      	mov	r3, r1
 8000826:	807b      	strh	r3, [r7, #2]

	//clear the transfer complete flag to make sure our transfer starts
	//UART5->ICR |= USART_ICR_TCCF;
	UART5->SR &= ~USART_SR_TC;
 8000828:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <uart5TxDmaStartRepeat+0x3c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <uart5TxDmaStartRepeat+0x3c>)
 800082e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000832:	6013      	str	r3, [r2, #0]
	assert_param(HAL_DMA_Start(&hdma_uart5_tx, (uint32_t)Msg, (uint32_t)&(UART5->DR), Len) == HAL_OK);
 8000834:	6879      	ldr	r1, [r7, #4]
 8000836:	887b      	ldrh	r3, [r7, #2]
 8000838:	4a08      	ldr	r2, [pc, #32]	; (800085c <uart5TxDmaStartRepeat+0x40>)
 800083a:	4809      	ldr	r0, [pc, #36]	; (8000860 <uart5TxDmaStartRepeat+0x44>)
 800083c:	f001 f9b8 	bl	8001bb0 <HAL_DMA_Start>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d003      	beq.n	800084e <uart5TxDmaStartRepeat+0x32>
 8000846:	2174      	movs	r1, #116	; 0x74
 8000848:	4806      	ldr	r0, [pc, #24]	; (8000864 <uart5TxDmaStartRepeat+0x48>)
 800084a:	f000 fc63 	bl	8001114 <assert_failed>
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40005000 	.word	0x40005000
 800085c:	40005004 	.word	0x40005004
 8000860:	2000002c 	.word	0x2000002c
 8000864:	08009000 	.word	0x08009000

08000868 <DMA1_Stream7_IRQHandler>:

void DMA1_Stream7_IRQHandler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
	//shouldn't ever get here - interrupts are not enabled
	while(1);
 800086c:	e7fe      	b.n	800086c <DMA1_Stream7_IRQHandler+0x4>
	...

08000870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f003 0307 	and.w	r3, r3, #7
 800087e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000886:	68ba      	ldr	r2, [r7, #8]
 8000888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800088c:	4013      	ands	r3, r2
 800088e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800089c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008a2:	4a04      	ldr	r2, [pc, #16]	; (80008b4 <__NVIC_SetPriorityGrouping+0x44>)
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	60d3      	str	r3, [r2, #12]
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	db0b      	blt.n	80008e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	f003 021f 	and.w	r2, r3, #31
 80008d0:	4907      	ldr	r1, [pc, #28]	; (80008f0 <__NVIC_EnableIRQ+0x38>)
 80008d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d6:	095b      	lsrs	r3, r3, #5
 80008d8:	2001      	movs	r0, #1
 80008da:	fa00 f202 	lsl.w	r2, r0, r2
 80008de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	e000e100 	.word	0xe000e100

080008f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	6039      	str	r1, [r7, #0]
 80008fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000904:	2b00      	cmp	r3, #0
 8000906:	db0a      	blt.n	800091e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	b2da      	uxtb	r2, r3
 800090c:	490c      	ldr	r1, [pc, #48]	; (8000940 <__NVIC_SetPriority+0x4c>)
 800090e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000912:	0112      	lsls	r2, r2, #4
 8000914:	b2d2      	uxtb	r2, r2
 8000916:	440b      	add	r3, r1
 8000918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800091c:	e00a      	b.n	8000934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	b2da      	uxtb	r2, r3
 8000922:	4908      	ldr	r1, [pc, #32]	; (8000944 <__NVIC_SetPriority+0x50>)
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	f003 030f 	and.w	r3, r3, #15
 800092a:	3b04      	subs	r3, #4
 800092c:	0112      	lsls	r2, r2, #4
 800092e:	b2d2      	uxtb	r2, r2
 8000930:	440b      	add	r3, r1
 8000932:	761a      	strb	r2, [r3, #24]
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	e000e100 	.word	0xe000e100
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <main>:
static QueueHandle_t uart1_BytesReceived = NULL;

static bool rxInProgress = false;

int main(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af02      	add	r7, sp, #8
	HWInit();
 800094e:	f000 f8e5 	bl	8000b1c <HWInit>
	SEGGER_SYSVIEW_Conf();
 8000952:	f008 f9c1 	bl	8008cd8 <SEGGER_SYSVIEW_Conf>
	//value for the NVIC. The argument passed to the function is the priority grouping
	//value, which is a number from 0 to 7. The value 0 means that no preemption and sub-priority bits are used,
	//and all interrupts have the same priority level.

	//ensure proper priority grouping for freeRTOS
	NVIC_SetPriorityGrouping(0);  // This means that priority grouping is use all the systems have the same priority
 8000956:	2000      	movs	r0, #0
 8000958:	f7ff ff8a 	bl	8000870 <__NVIC_SetPriorityGrouping>
	//this delay is only present since we're using a simple
	//block-based buffer for receiving data - the transmission
	//needs to start after the receiver is ready for data for the
	//strings to start in the correct position in this simple setup
	TimerHandle_t oneShotHandle =
			xTimerCreate(	"startUart5Traffic",
 800095c:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <main+0x94>)
 800095e:	9300      	str	r3, [sp, #0]
 8000960:	2300      	movs	r3, #0
 8000962:	2200      	movs	r2, #0
 8000964:	f241 3188 	movw	r1, #5000	; 0x1388
 8000968:	481d      	ldr	r0, [pc, #116]	; (80009e0 <main+0x98>)
 800096a:	f005 fd07 	bl	800637c <xTimerCreate>
 800096e:	6078      	str	r0, [r7, #4]
					5000 /portTICK_PERIOD_MS,
					pdFALSE,
					NULL,
					startUart5Traffic);
	assert_param(oneShotHandle != NULL);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d103      	bne.n	800097e <main+0x36>
 8000976:	2135      	movs	r1, #53	; 0x35
 8000978:	481a      	ldr	r0, [pc, #104]	; (80009e4 <main+0x9c>)
 800097a:	f000 fbcb 	bl	8001114 <assert_failed>
	xTimerStart(oneShotHandle, 0);
 800097e:	f005 f87b 	bl	8005a78 <xTaskGetTickCount>
 8000982:	4602      	mov	r2, r0
 8000984:	2300      	movs	r3, #0
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2300      	movs	r3, #0
 800098a:	2101      	movs	r1, #1
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f005 fd51 	bl	8006434 <xTimerGenericCommand>

	//setup tasks, making sure they have been properly created before moving on
	uart1_BytesReceived = xQueueCreate(10, sizeof(char));
 8000992:	2200      	movs	r2, #0
 8000994:	2101      	movs	r1, #1
 8000996:	200a      	movs	r0, #10
 8000998:	f004 f908 	bl	8004bac <xQueueGenericCreate>
 800099c:	4603      	mov	r3, r0
 800099e:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <main+0xa0>)
 80009a0:	6013      	str	r3, [r2, #0]
	assert_param(uart1_BytesReceived != NULL);
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <main+0xa0>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d103      	bne.n	80009b2 <main+0x6a>
 80009aa:	213a      	movs	r1, #58	; 0x3a
 80009ac:	480d      	ldr	r0, [pc, #52]	; (80009e4 <main+0x9c>)
 80009ae:	f000 fbb1 	bl	8001114 <assert_failed>

	assert_param(xTaskCreate(uartPrintOutTask, "uartPrint", STACK_SIZE, NULL, tskIDLE_PRIORITY + 3, NULL) == pdPASS);
 80009b2:	2300      	movs	r3, #0
 80009b4:	9301      	str	r3, [sp, #4]
 80009b6:	2303      	movs	r3, #3
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	2300      	movs	r3, #0
 80009bc:	2280      	movs	r2, #128	; 0x80
 80009be:	490b      	ldr	r1, [pc, #44]	; (80009ec <main+0xa4>)
 80009c0:	480b      	ldr	r0, [pc, #44]	; (80009f0 <main+0xa8>)
 80009c2:	f004 fde5 	bl	8005590 <xTaskCreate>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d003      	beq.n	80009d4 <main+0x8c>
 80009cc:	213c      	movs	r1, #60	; 0x3c
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <main+0x9c>)
 80009d0:	f000 fba0 	bl	8001114 <assert_failed>

	//start the scheduler - shouldn't return unless there's a problem
	vTaskStartScheduler();
 80009d4:	f004 ff40 	bl	8005858 <vTaskStartScheduler>

	//if you've wound up here, there is likely an issue with overrunning the freeRTOS heap
	while(1)
 80009d8:	e7fe      	b.n	80009d8 <main+0x90>
 80009da:	bf00      	nop
 80009dc:	08000a35 	.word	0x08000a35
 80009e0:	08009018 	.word	0x08009018
 80009e4:	0800902c 	.word	0x0800902c
 80009e8:	2000008c 	.word	0x2000008c
 80009ec:	08009048 	.word	0x08009048
 80009f0:	08000a4d 	.word	0x08000a4d

080009f4 <startReceiveInt>:
/**
 * Start an interrupt driven receive.  This particular ISR is hard-coded
 * to push characters into a queue
 */
void startReceiveInt( void )
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	rxInProgress = true;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <startReceiveInt+0x38>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	701a      	strb	r2, [r3, #0]
	USART1->CR3 |= USART_CR3_EIE;	//enable error interrupts
 80009fe:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <startReceiveInt+0x3c>)
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	4a0b      	ldr	r2, [pc, #44]	; (8000a30 <startReceiveInt+0x3c>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6153      	str	r3, [r2, #20]
	USART1->CR1 |= (USART_CR1_UE | USART_CR1_RXNEIE);
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <startReceiveInt+0x3c>)
 8000a0c:	68db      	ldr	r3, [r3, #12]
 8000a0e:	4a08      	ldr	r2, [pc, #32]	; (8000a30 <startReceiveInt+0x3c>)
 8000a10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a14:	f043 0320 	orr.w	r3, r3, #32
 8000a18:	60d3      	str	r3, [r2, #12]
	//all 4 bits are for preemption priority -
	NVIC_SetPriority(USART1_IRQn, 6);
 8000a1a:	2106      	movs	r1, #6
 8000a1c:	2025      	movs	r0, #37	; 0x25
 8000a1e:	f7ff ff69 	bl	80008f4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 8000a22:	2025      	movs	r0, #37	; 0x25
 8000a24:	f7ff ff48 	bl	80008b8 <__NVIC_EnableIRQ>
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000090 	.word	0x20000090
 8000a30:	40011000 	.word	0x40011000

08000a34 <startUart5Traffic>:

void startUart5Traffic( TimerHandle_t xTimer )
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	SetupUart5ExternalSim(BAUDRATE);
 8000a3c:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 8000a40:	f7ff fe62 	bl	8000708 <SetupUart5ExternalSim>
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <uartPrintOutTask>:

void uartPrintOutTask( void* NotUsed)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	char nextByte;
	STM_UartInit(USART1, BAUDRATE, NULL, NULL);
 8000a54:	2300      	movs	r3, #0
 8000a56:	2200      	movs	r2, #0
 8000a58:	f44f 3161 	mov.w	r1, #230400	; 0x38400
 8000a5c:	4809      	ldr	r0, [pc, #36]	; (8000a84 <uartPrintOutTask+0x38>)
 8000a5e:	f7ff fde5 	bl	800062c <STM_UartInit>
	startReceiveInt();
 8000a62:	f7ff ffc7 	bl	80009f4 <startReceiveInt>

	while(1)
	{
		xQueueReceive(uart1_BytesReceived, &nextByte, portMAX_DELAY);
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <uartPrintOutTask+0x3c>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f107 010f 	add.w	r1, r7, #15
 8000a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8000a72:	4618      	mov	r0, r3
 8000a74:	f004 fb06 	bl	8005084 <xQueueReceive>
		SEGGER_SYSVIEW_PrintfHost("%c", nextByte);
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4803      	ldr	r0, [pc, #12]	; (8000a8c <uartPrintOutTask+0x40>)
 8000a7e:	f008 f8ad 	bl	8008bdc <SEGGER_SYSVIEW_PrintfHost>
		xQueueReceive(uart1_BytesReceived, &nextByte, portMAX_DELAY);
 8000a82:	e7f0      	b.n	8000a66 <uartPrintOutTask+0x1a>
 8000a84:	40011000 	.word	0x40011000
 8000a88:	2000008c 	.word	0x2000008c
 8000a8c:	08009054 	.word	0x08009054

08000a90 <USART1_IRQHandler>:
	}
}

void USART1_IRQHandler( void )
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
	SEGGER_SYSVIEW_RecordEnterISR();
 8000a9a:	f007 fdf7 	bl	800868c <SEGGER_SYSVIEW_RecordEnterISR>

	//first check for errors
	if(	USART1->SR & (	USART_SR_ORE |
 8000a9e:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <USART1_IRQHandler+0x7c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f003 030f 	and.w	r3, r3, #15
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d005      	beq.n	8000ab6 <USART1_IRQHandler+0x26>
			USART_SR_NE |
			USART_SR_FE |
			USART_SR_PE ))
	{
		//clear error flags
		USART1->SR &= ~(USART_SR_ORE |  // overun error
 8000aaa:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <USART1_IRQHandler+0x7c>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a17      	ldr	r2, [pc, #92]	; (8000b0c <USART1_IRQHandler+0x7c>)
 8000ab0:	f023 030f 	bic.w	r3, r3, #15
 8000ab4:	6013      	str	r3, [r2, #0]
						USART_SR_NE |
						USART_SR_FE |
						USART_SR_PE);
	}

	if(	USART1->SR & USART_SR_RXNE)
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <USART1_IRQHandler+0x7c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f003 0320 	and.w	r3, r3, #32
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d00e      	beq.n	8000ae0 <USART1_IRQHandler+0x50>
	{
		//read the data register unconditionally to clear
		//the receive not empty interrupt if no reception is
		//in progress
		uint8_t tempVal = (uint8_t) USART1->DR;
 8000ac2:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <USART1_IRQHandler+0x7c>)
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	70fb      	strb	r3, [r7, #3]

		if(rxInProgress)
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <USART1_IRQHandler+0x80>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d006      	beq.n	8000ae0 <USART1_IRQHandler+0x50>
		{
			xQueueSendFromISR(uart1_BytesReceived, &tempVal, &xHigherPriorityTaskWoken);
 8000ad2:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <USART1_IRQHandler+0x84>)
 8000ad4:	6818      	ldr	r0, [r3, #0]
 8000ad6:	1d3a      	adds	r2, r7, #4
 8000ad8:	1cf9      	adds	r1, r7, #3
 8000ada:	2300      	movs	r3, #0
 8000adc:	f004 fa14 	bl	8004f08 <xQueueGenericSendFromISR>
		}
	}
	SEGGER_SYSVIEW_RecordExitISR();
 8000ae0:	f007 fe16 	bl	8008710 <SEGGER_SYSVIEW_RecordExitISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d00a      	beq.n	8000b00 <USART1_IRQHandler+0x70>
 8000aea:	f007 fe2d 	bl	8008748 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8000aee:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <USART1_IRQHandler+0x88>)
 8000af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	f3bf 8f4f 	dsb	sy
 8000afa:	f3bf 8f6f 	isb	sy
}
 8000afe:	e001      	b.n	8000b04 <USART1_IRQHandler+0x74>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000b00:	f007 fe06 	bl	8008710 <SEGGER_SYSVIEW_RecordExitISR>
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40011000 	.word	0x40011000
 8000b10:	20000090 	.word	0x20000090
 8000b14:	2000008c 	.word	0x2000008c
 8000b18:	e000ed04 	.word	0xe000ed04

08000b1c <HWInit>:
 * Initialize the minimum amount of hardware that will be used in all examples
 * Other initialization might also be necessary (PWM for LED's, USART's, USB, etc)
 * and should be performed after the initial call to HWInit
 */
void HWInit( void )
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	HAL_Init();
 8000b20:	f000 fcec 	bl	80014fc <HAL_Init>
	SystemClock_Config();
 8000b24:	f000 f806 	bl	8000b34 <SystemClock_Config>
	gpioPinsInit();			//initialize GPIO lines for LED's
 8000b28:	f000 f870 	bl	8000c0c <gpioPinsInit>
	rngInit();
 8000b2c:	f000 fac8 	bl	80010c0 <rngInit>
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <SystemClock_Config>:
	return RNG->DR %Max + Min;
}


void SystemClock_Config(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b094      	sub	sp, #80	; 0x50
 8000b38:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3a:	f107 0320 	add.w	r3, r7, #32
 8000b3e:	2230      	movs	r2, #48	; 0x30
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f008 fa36 	bl	8008fb4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b48:	f107 030c 	add.w	r3, r7, #12
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	4b29      	ldr	r3, [pc, #164]	; (8000c04 <SystemClock_Config+0xd0>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b60:	4a28      	ldr	r2, [pc, #160]	; (8000c04 <SystemClock_Config+0xd0>)
 8000b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b66:	6413      	str	r3, [r2, #64]	; 0x40
 8000b68:	4b26      	ldr	r3, [pc, #152]	; (8000c04 <SystemClock_Config+0xd0>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	4b23      	ldr	r3, [pc, #140]	; (8000c08 <SystemClock_Config+0xd4>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b80:	4a21      	ldr	r2, [pc, #132]	; (8000c08 <SystemClock_Config+0xd4>)
 8000b82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b86:	6013      	str	r3, [r2, #0]
 8000b88:	4b1f      	ldr	r3, [pc, #124]	; (8000c08 <SystemClock_Config+0xd4>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b94:	2302      	movs	r3, #2
 8000b96:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b9c:	2310      	movs	r3, #16
 8000b9e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000ba8:	2308      	movs	r3, #8
 8000baa:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 50;
 8000bac:	2332      	movs	r3, #50	; 0x32
 8000bae:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bb4:	2307      	movs	r3, #7
 8000bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb8:	f107 0320 	add.w	r3, r7, #32
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f001 fd07 	bl	80025d0 <HAL_RCC_OscConfig>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <SystemClock_Config+0x98>
	{
		Error_Handler();
 8000bc8:	f000 fa9c 	bl	8001104 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bcc:	230f      	movs	r3, #15
 8000bce:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000bd8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000bdc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000bde:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000be2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000be4:	f107 030c 	add.w	r3, r7, #12
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f002 f818 	bl	8002c20 <HAL_RCC_ClockConfig>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <SystemClock_Config+0xc6>
	{
		Error_Handler();
 8000bf6:	f000 fa85 	bl	8001104 <Error_Handler>
	}

}
 8000bfa:	bf00      	nop
 8000bfc:	3750      	adds	r7, #80	; 0x50
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40007000 	.word	0x40007000

08000c0c <gpioPinsInit>:
/**
  * Initialize all relevant GPIO lines for LED's used in examples, as well as
  * USB pins
  */
static void gpioPinsInit(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08e      	sub	sp, #56	; 0x38
 8000c10:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
 8000c20:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	623b      	str	r3, [r7, #32]
 8000c26:	4bb2      	ldr	r3, [pc, #712]	; (8000ef0 <gpioPinsInit+0x2e4>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4ab1      	ldr	r2, [pc, #708]	; (8000ef0 <gpioPinsInit+0x2e4>)
 8000c2c:	f043 0304 	orr.w	r3, r3, #4
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4baf      	ldr	r3, [pc, #700]	; (8000ef0 <gpioPinsInit+0x2e4>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0304 	and.w	r3, r3, #4
 8000c3a:	623b      	str	r3, [r7, #32]
 8000c3c:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
 8000c42:	4bab      	ldr	r3, [pc, #684]	; (8000ef0 <gpioPinsInit+0x2e4>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4aaa      	ldr	r2, [pc, #680]	; (8000ef0 <gpioPinsInit+0x2e4>)
 8000c48:	f043 0320 	orr.w	r3, r3, #32
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4ba8      	ldr	r3, [pc, #672]	; (8000ef0 <gpioPinsInit+0x2e4>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0320 	and.w	r3, r3, #32
 8000c56:	61fb      	str	r3, [r7, #28]
 8000c58:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61bb      	str	r3, [r7, #24]
 8000c5e:	4ba4      	ldr	r3, [pc, #656]	; (8000ef0 <gpioPinsInit+0x2e4>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4aa3      	ldr	r2, [pc, #652]	; (8000ef0 <gpioPinsInit+0x2e4>)
 8000c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4ba1      	ldr	r3, [pc, #644]	; (8000ef0 <gpioPinsInit+0x2e4>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c72:	61bb      	str	r3, [r7, #24]
 8000c74:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	617b      	str	r3, [r7, #20]
 8000c7a:	4b9d      	ldr	r3, [pc, #628]	; (8000ef0 <gpioPinsInit+0x2e4>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a9c      	ldr	r2, [pc, #624]	; (8000ef0 <gpioPinsInit+0x2e4>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b9a      	ldr	r3, [pc, #616]	; (8000ef0 <gpioPinsInit+0x2e4>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	4b96      	ldr	r3, [pc, #600]	; (8000ef0 <gpioPinsInit+0x2e4>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a95      	ldr	r2, [pc, #596]	; (8000ef0 <gpioPinsInit+0x2e4>)
 8000c9c:	f043 0302 	orr.w	r3, r3, #2
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b93      	ldr	r3, [pc, #588]	; (8000ef0 <gpioPinsInit+0x2e4>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	4b8f      	ldr	r3, [pc, #572]	; (8000ef0 <gpioPinsInit+0x2e4>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a8e      	ldr	r2, [pc, #568]	; (8000ef0 <gpioPinsInit+0x2e4>)
 8000cb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b8c      	ldr	r3, [pc, #560]	; (8000ef0 <gpioPinsInit+0x2e4>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	4b88      	ldr	r3, [pc, #544]	; (8000ef0 <gpioPinsInit+0x2e4>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a87      	ldr	r2, [pc, #540]	; (8000ef0 <gpioPinsInit+0x2e4>)
 8000cd4:	f043 0310 	orr.w	r3, r3, #16
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b85      	ldr	r3, [pc, #532]	; (8000ef0 <gpioPinsInit+0x2e4>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0310 	and.w	r3, r3, #16
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	4b81      	ldr	r3, [pc, #516]	; (8000ef0 <gpioPinsInit+0x2e4>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a80      	ldr	r2, [pc, #512]	; (8000ef0 <gpioPinsInit+0x2e4>)
 8000cf0:	f043 0308 	orr.w	r3, r3, #8
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b7e      	ldr	r3, [pc, #504]	; (8000ef0 <gpioPinsInit+0x2e4>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0308 	and.w	r3, r3, #8
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2116      	movs	r1, #22
 8000d06:	487b      	ldr	r0, [pc, #492]	; (8000ef4 <gpioPinsInit+0x2e8>)
 8000d08:	f001 fc30 	bl	800256c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2180      	movs	r1, #128	; 0x80
 8000d10:	4879      	ldr	r0, [pc, #484]	; (8000ef8 <gpioPinsInit+0x2ec>)
 8000d12:	f001 fc2b 	bl	800256c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000d1c:	4877      	ldr	r0, [pc, #476]	; (8000efc <gpioPinsInit+0x2f0>)
 8000d1e:	f001 fc25 	bl	800256c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000d28:	4875      	ldr	r0, [pc, #468]	; (8000f00 <gpioPinsInit+0x2f4>)
 8000d2a:	f001 fc1f 	bl	800256c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
	                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
	                           A7_Pin A8_Pin A9_Pin */
	GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000d2e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
			|A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
			|A7_Pin|A8_Pin|A9_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d40:	230c      	movs	r3, #12
 8000d42:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d48:	4619      	mov	r1, r3
 8000d4a:	486e      	ldr	r0, [pc, #440]	; (8000f04 <gpioPinsInit+0x2f8>)
 8000d4c:	f001 f8ec 	bl	8001f28 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
	GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000d50:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000d62:	2305      	movs	r3, #5
 8000d64:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4865      	ldr	r0, [pc, #404]	; (8000f04 <gpioPinsInit+0x2f8>)
 8000d6e:	f001 f8db 	bl	8001f28 <HAL_GPIO_Init>

	/*Configure GPIO pin : ENABLE_Pin */
	GPIO_InitStruct.Pin = ENABLE_Pin;
 8000d72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d84:	230e      	movs	r3, #14
 8000d86:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	485d      	ldr	r0, [pc, #372]	; (8000f04 <gpioPinsInit+0x2f8>)
 8000d90:	f001 f8ca 	bl	8001f28 <HAL_GPIO_Init>

	/*Configure GPIO pin : SDNWE_Pin */
	GPIO_InitStruct.Pin = SDNWE_Pin;
 8000d94:	2301      	movs	r3, #1
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da0:	2303      	movs	r3, #3
 8000da2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000da4:	230c      	movs	r3, #12
 8000da6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dac:	4619      	mov	r1, r3
 8000dae:	4851      	ldr	r0, [pc, #324]	; (8000ef4 <gpioPinsInit+0x2e8>)
 8000db0:	f001 f8ba 	bl	8001f28 <HAL_GPIO_Init>

	/*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
	GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000db4:	2316      	movs	r3, #22
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc8:	4619      	mov	r1, r3
 8000dca:	484a      	ldr	r0, [pc, #296]	; (8000ef4 <gpioPinsInit+0x2e8>)
 8000dcc:	f001 f8ac 	bl	8001f28 <HAL_GPIO_Init>

	/*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
	GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000dd0:	f248 0307 	movw	r3, #32775	; 0x8007
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000dd6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de4:	4619      	mov	r1, r3
 8000de6:	4844      	ldr	r0, [pc, #272]	; (8000ef8 <gpioPinsInit+0x2ec>)
 8000de8:	f001 f89e 	bl	8001f28 <HAL_GPIO_Init>

	/*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
	                           R5_Pin */
	GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000dec:	f641 0358 	movw	r3, #6232	; 0x1858
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
			|R5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000dfe:	230e      	movs	r3, #14
 8000e00:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e06:	4619      	mov	r1, r3
 8000e08:	483b      	ldr	r0, [pc, #236]	; (8000ef8 <gpioPinsInit+0x2ec>)
 8000e0a:	f001 f88d 	bl	8001f28 <HAL_GPIO_Init>

	/*Configure GPIO pin : ACP_RST_Pin */
	GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000e0e:	2380      	movs	r3, #128	; 0x80
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e22:	4619      	mov	r1, r3
 8000e24:	4834      	ldr	r0, [pc, #208]	; (8000ef8 <gpioPinsInit+0x2ec>)
 8000e26:	f001 f87f 	bl	8001f28 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OC_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000e2a:	2320      	movs	r3, #32
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e2e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e32:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	482d      	ldr	r0, [pc, #180]	; (8000ef4 <gpioPinsInit+0x2e8>)
 8000e40:	f001 f872 	bl	8001f28 <HAL_GPIO_Init>

	/*Configure GPIO pins : R3_Pin R6_Pin */
	GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000e44:	2303      	movs	r3, #3
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	2300      	movs	r3, #0
 8000e52:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000e54:	2309      	movs	r3, #9
 8000e56:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	482a      	ldr	r0, [pc, #168]	; (8000f08 <gpioPinsInit+0x2fc>)
 8000e60:	f001 f862 	bl	8001f28 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e64:	2304      	movs	r3, #4
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e74:	4619      	mov	r1, r3
 8000e76:	4824      	ldr	r0, [pc, #144]	; (8000f08 <gpioPinsInit+0x2fc>)
 8000e78:	f001 f856 	bl	8001f28 <HAL_GPIO_Init>

	/*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
	                           SDCLK_Pin SDNCAS_Pin */
	GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000e7c:	f248 1333 	movw	r3, #33075	; 0x8133
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
			|SDCLK_Pin|SDNCAS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	2302      	movs	r3, #2
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e8e:	230c      	movs	r3, #12
 8000e90:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e96:	4619      	mov	r1, r3
 8000e98:	4819      	ldr	r0, [pc, #100]	; (8000f00 <gpioPinsInit+0x2f4>)
 8000e9a:	f001 f845 	bl	8001f28 <HAL_GPIO_Init>

	/*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
	                           D8_Pin D9_Pin D10_Pin D11_Pin
	                           D12_Pin NBL0_Pin NBL1_Pin */
	GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000e9e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
			|D8_Pin|D9_Pin|D10_Pin|D11_Pin
			|D12_Pin|NBL0_Pin|NBL1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eac:	2303      	movs	r3, #3
 8000eae:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000eb0:	230c      	movs	r3, #12
 8000eb2:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4814      	ldr	r0, [pc, #80]	; (8000f0c <gpioPinsInit+0x300>)
 8000ebc:	f001 f834 	bl	8001f28 <HAL_GPIO_Init>

	/*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
	GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000ec0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ed2:	230e      	movs	r3, #14
 8000ed4:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eda:	4619      	mov	r1, r3
 8000edc:	480a      	ldr	r0, [pc, #40]	; (8000f08 <gpioPinsInit+0x2fc>)
 8000ede:	f001 f823 	bl	8001f28 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
	GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000ee2:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000ee6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	62bb      	str	r3, [r7, #40]	; 0x28
 8000eec:	e010      	b.n	8000f10 <gpioPinsInit+0x304>
 8000eee:	bf00      	nop
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020800 	.word	0x40020800
 8000ef8:	40020000 	.word	0x40020000
 8000efc:	40020c00 	.word	0x40020c00
 8000f00:	40021800 	.word	0x40021800
 8000f04:	40021400 	.word	0x40021400
 8000f08:	40020400 	.word	0x40020400
 8000f0c:	40021000 	.word	0x40021000
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	2300      	movs	r3, #0
 8000f16:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000f18:	230c      	movs	r3, #12
 8000f1a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f20:	4619      	mov	r1, r3
 8000f22:	4862      	ldr	r0, [pc, #392]	; (80010ac <gpioPinsInit+0x4a0>)
 8000f24:	f001 f800 	bl	8001f28 <HAL_GPIO_Init>

	/*Configure GPIO pin : VBUS_HS_Pin */
	GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000f28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000f36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	485b      	ldr	r0, [pc, #364]	; (80010ac <gpioPinsInit+0x4a0>)
 8000f3e:	f000 fff3 	bl	8001f28 <HAL_GPIO_Init>

	/*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
	                           D1_Pin D2_Pin D3_Pin */
	GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000f42:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
			|D1_Pin|D2_Pin|D3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f50:	2303      	movs	r3, #3
 8000f52:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f54:	230c      	movs	r3, #12
 8000f56:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4854      	ldr	r0, [pc, #336]	; (80010b0 <gpioPinsInit+0x4a4>)
 8000f60:	f000 ffe2 	bl	8001f28 <HAL_GPIO_Init>

	/*Configure GPIO pin : TE_Pin */
	GPIO_InitStruct.Pin = TE_Pin;
 8000f64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f76:	4619      	mov	r1, r3
 8000f78:	484d      	ldr	r0, [pc, #308]	; (80010b0 <gpioPinsInit+0x4a4>)
 8000f7a:	f000 ffd5 	bl	8001f28 <HAL_GPIO_Init>

	/*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
	GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000f7e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f84:	2301      	movs	r3, #1
 8000f86:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f94:	4619      	mov	r1, r3
 8000f96:	4846      	ldr	r0, [pc, #280]	; (80010b0 <gpioPinsInit+0x4a4>)
 8000f98:	f000 ffc6 	bl	8001f28 <HAL_GPIO_Init>

	/*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
	GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000f9c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fae:	230e      	movs	r3, #14
 8000fb0:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	483e      	ldr	r0, [pc, #248]	; (80010b4 <gpioPinsInit+0x4a8>)
 8000fba:	f000 ffb5 	bl	8001f28 <HAL_GPIO_Init>

	/*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
	GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000fbe:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000fc2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fd0:	230e      	movs	r3, #14
 8000fd2:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4837      	ldr	r0, [pc, #220]	; (80010b8 <gpioPinsInit+0x4ac>)
 8000fdc:	f000 ffa4 	bl	8001f28 <HAL_GPIO_Init>

	/*Configure GPIO pin : I2C3_SDA_Pin */
	GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000fe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fe6:	2312      	movs	r3, #18
 8000fe8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	482e      	ldr	r0, [pc, #184]	; (80010b8 <gpioPinsInit+0x4ac>)
 8000ffe:	f000 ff93 	bl	8001f28 <HAL_GPIO_Init>

	/*Configure GPIO pin : I2C3_SCL_Pin */
	GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001002:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001008:	2312      	movs	r3, #18
 800100a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	2300      	movs	r3, #0
 8001012:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001014:	2304      	movs	r3, #4
 8001016:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101c:	4619      	mov	r1, r3
 800101e:	4827      	ldr	r0, [pc, #156]	; (80010bc <gpioPinsInit+0x4b0>)
 8001020:	f000 ff82 	bl	8001f28 <HAL_GPIO_Init>

	/*Configure GPIO pins : G7_Pin B2_Pin */
	GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001024:	2348      	movs	r3, #72	; 0x48
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001030:	2300      	movs	r3, #0
 8001032:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001034:	230e      	movs	r3, #14
 8001036:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001038:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103c:	4619      	mov	r1, r3
 800103e:	481c      	ldr	r0, [pc, #112]	; (80010b0 <gpioPinsInit+0x4a4>)
 8001040:	f000 ff72 	bl	8001f28 <HAL_GPIO_Init>

	/*Configure GPIO pins : G3_Pin B4_Pin */
	GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001044:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001056:	2309      	movs	r3, #9
 8001058:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800105a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105e:	4619      	mov	r1, r3
 8001060:	4814      	ldr	r0, [pc, #80]	; (80010b4 <gpioPinsInit+0x4a8>)
 8001062:	f000 ff61 	bl	8001f28 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin LD4_Pin */
	GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001066:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107c:	4619      	mov	r1, r3
 800107e:	480d      	ldr	r0, [pc, #52]	; (80010b4 <gpioPinsInit+0x4a8>)
 8001080:	f000 ff52 	bl	8001f28 <HAL_GPIO_Init>

	/*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
	GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001084:	2360      	movs	r3, #96	; 0x60
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2302      	movs	r3, #2
 800108a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001090:	2303      	movs	r3, #3
 8001092:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001094:	230c      	movs	r3, #12
 8001096:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109c:	4619      	mov	r1, r3
 800109e:	4803      	ldr	r0, [pc, #12]	; (80010ac <gpioPinsInit+0x4a0>)
 80010a0:	f000 ff42 	bl	8001f28 <HAL_GPIO_Init>

}
 80010a4:	bf00      	nop
 80010a6:	3738      	adds	r7, #56	; 0x38
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40020400 	.word	0x40020400
 80010b0:	40020c00 	.word	0x40020c00
 80010b4:	40021800 	.word	0x40021800
 80010b8:	40020800 	.word	0x40020800
 80010bc:	40020000 	.word	0x40020000

080010c0 <rngInit>:

/**
 * Init the random number generator (RNG) peripheral
 */
static void rngInit( void )
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
	//start the peripheral clock
	__HAL_RCC_RNG_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <rngInit+0x3c>)
 80010cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ce:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <rngInit+0x3c>)
 80010d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010d4:	6353      	str	r3, [r2, #52]	; 0x34
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <rngInit+0x3c>)
 80010d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]

	//enable the random number generator
	RNG->CR |= RNG_CR_RNGEN;
 80010e2:	4b07      	ldr	r3, [pc, #28]	; (8001100 <rngInit+0x40>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a06      	ldr	r2, [pc, #24]	; (8001100 <rngInit+0x40>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	6013      	str	r3, [r2, #0]
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800
 8001100:	50060800 	.word	0x50060800

08001104 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
	...

08001114 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  SEGGER_SYSVIEW_PrintfHost("Assertion Failed:file %s \
 800111e:	683a      	ldr	r2, [r7, #0]
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	4802      	ldr	r0, [pc, #8]	; (800112c <assert_failed+0x18>)
 8001124:	f007 fd5a 	bl	8008bdc <SEGGER_SYSVIEW_PrintfHost>
                            on line %d\r\n", file, line);
  while(1);
 8001128:	e7fe      	b.n	8001128 <assert_failed+0x14>
 800112a:	bf00      	nop
 800112c:	08009058 	.word	0x08009058

08001130 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	4b10      	ldr	r3, [pc, #64]	; (800117c <HAL_MspInit+0x4c>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	4a0f      	ldr	r2, [pc, #60]	; (800117c <HAL_MspInit+0x4c>)
 8001140:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001144:	6453      	str	r3, [r2, #68]	; 0x44
 8001146:	4b0d      	ldr	r3, [pc, #52]	; (800117c <HAL_MspInit+0x4c>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	603b      	str	r3, [r7, #0]
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <HAL_MspInit+0x4c>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	4a08      	ldr	r2, [pc, #32]	; (800117c <HAL_MspInit+0x4c>)
 800115c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001160:	6413      	str	r3, [r2, #64]	; 0x40
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_MspInit+0x4c>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116a:	603b      	str	r3, [r7, #0]
 800116c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800116e:	2007      	movs	r0, #7
 8001170:	f000 faa0 	bl	80016b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40023800 	.word	0x40023800

08001180 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08c      	sub	sp, #48	; 0x30
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a5e      	ldr	r2, [pc, #376]	; (8001318 <HAL_UART_MspInit+0x198>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	f040 8083 	bne.w	80012aa <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80011a4:	2300      	movs	r3, #0
 80011a6:	61bb      	str	r3, [r7, #24]
 80011a8:	4b5c      	ldr	r3, [pc, #368]	; (800131c <HAL_UART_MspInit+0x19c>)
 80011aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ac:	4a5b      	ldr	r2, [pc, #364]	; (800131c <HAL_UART_MspInit+0x19c>)
 80011ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011b2:	6413      	str	r3, [r2, #64]	; 0x40
 80011b4:	4b59      	ldr	r3, [pc, #356]	; (800131c <HAL_UART_MspInit+0x19c>)
 80011b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011bc:	61bb      	str	r3, [r7, #24]
 80011be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
 80011c4:	4b55      	ldr	r3, [pc, #340]	; (800131c <HAL_UART_MspInit+0x19c>)
 80011c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c8:	4a54      	ldr	r2, [pc, #336]	; (800131c <HAL_UART_MspInit+0x19c>)
 80011ca:	f043 0304 	orr.w	r3, r3, #4
 80011ce:	6313      	str	r3, [r2, #48]	; 0x30
 80011d0:	4b52      	ldr	r3, [pc, #328]	; (800131c <HAL_UART_MspInit+0x19c>)
 80011d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	617b      	str	r3, [r7, #20]
 80011da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	4b4e      	ldr	r3, [pc, #312]	; (800131c <HAL_UART_MspInit+0x19c>)
 80011e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e4:	4a4d      	ldr	r2, [pc, #308]	; (800131c <HAL_UART_MspInit+0x19c>)
 80011e6:	f043 0308 	orr.w	r3, r3, #8
 80011ea:	6313      	str	r3, [r2, #48]	; 0x30
 80011ec:	4b4b      	ldr	r3, [pc, #300]	; (800131c <HAL_UART_MspInit+0x19c>)
 80011ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f0:	f003 0308 	and.w	r3, r3, #8
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001206:	2303      	movs	r3, #3
 8001208:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800120a:	2308      	movs	r3, #8
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	4619      	mov	r1, r3
 8001214:	4842      	ldr	r0, [pc, #264]	; (8001320 <HAL_UART_MspInit+0x1a0>)
 8001216:	f000 fe87 	bl	8001f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800121a:	2304      	movs	r3, #4
 800121c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001226:	2303      	movs	r3, #3
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800122a:	2308      	movs	r3, #8
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	4619      	mov	r1, r3
 8001234:	483b      	ldr	r0, [pc, #236]	; (8001324 <HAL_UART_MspInit+0x1a4>)
 8001236:	f000 fe77 	bl	8001f28 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream7;
 800123a:	4b3b      	ldr	r3, [pc, #236]	; (8001328 <HAL_UART_MspInit+0x1a8>)
 800123c:	4a3b      	ldr	r2, [pc, #236]	; (800132c <HAL_UART_MspInit+0x1ac>)
 800123e:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8001240:	4b39      	ldr	r3, [pc, #228]	; (8001328 <HAL_UART_MspInit+0x1a8>)
 8001242:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001246:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001248:	4b37      	ldr	r3, [pc, #220]	; (8001328 <HAL_UART_MspInit+0x1a8>)
 800124a:	2240      	movs	r2, #64	; 0x40
 800124c:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800124e:	4b36      	ldr	r3, [pc, #216]	; (8001328 <HAL_UART_MspInit+0x1a8>)
 8001250:	2200      	movs	r2, #0
 8001252:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001254:	4b34      	ldr	r3, [pc, #208]	; (8001328 <HAL_UART_MspInit+0x1a8>)
 8001256:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800125a:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800125c:	4b32      	ldr	r3, [pc, #200]	; (8001328 <HAL_UART_MspInit+0x1a8>)
 800125e:	2200      	movs	r2, #0
 8001260:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001262:	4b31      	ldr	r3, [pc, #196]	; (8001328 <HAL_UART_MspInit+0x1a8>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8001268:	4b2f      	ldr	r3, [pc, #188]	; (8001328 <HAL_UART_MspInit+0x1a8>)
 800126a:	2200      	movs	r2, #0
 800126c:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800126e:	4b2e      	ldr	r3, [pc, #184]	; (8001328 <HAL_UART_MspInit+0x1a8>)
 8001270:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001274:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001276:	4b2c      	ldr	r3, [pc, #176]	; (8001328 <HAL_UART_MspInit+0x1a8>)
 8001278:	2200      	movs	r2, #0
 800127a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 800127c:	482a      	ldr	r0, [pc, #168]	; (8001328 <HAL_UART_MspInit+0x1a8>)
 800127e:	f000 fa7d 	bl	800177c <HAL_DMA_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001288:	f7ff ff3c 	bl	8001104 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a26      	ldr	r2, [pc, #152]	; (8001328 <HAL_UART_MspInit+0x1a8>)
 8001290:	635a      	str	r2, [r3, #52]	; 0x34
 8001292:	4a25      	ldr	r2, [pc, #148]	; (8001328 <HAL_UART_MspInit+0x1a8>)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001298:	2200      	movs	r2, #0
 800129a:	2100      	movs	r1, #0
 800129c:	2035      	movs	r0, #53	; 0x35
 800129e:	f000 fa29 	bl	80016f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80012a2:	2035      	movs	r0, #53	; 0x35
 80012a4:	f000 fa52 	bl	800174c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012a8:	e031      	b.n	800130e <HAL_UART_MspInit+0x18e>
  else if(huart->Instance==USART1)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a20      	ldr	r2, [pc, #128]	; (8001330 <HAL_UART_MspInit+0x1b0>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d12c      	bne.n	800130e <HAL_UART_MspInit+0x18e>
    __HAL_RCC_USART1_CLK_ENABLE();
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	4b18      	ldr	r3, [pc, #96]	; (800131c <HAL_UART_MspInit+0x19c>)
 80012ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012bc:	4a17      	ldr	r2, [pc, #92]	; (800131c <HAL_UART_MspInit+0x19c>)
 80012be:	f043 0310 	orr.w	r3, r3, #16
 80012c2:	6453      	str	r3, [r2, #68]	; 0x44
 80012c4:	4b15      	ldr	r3, [pc, #84]	; (800131c <HAL_UART_MspInit+0x19c>)
 80012c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c8:	f003 0310 	and.w	r3, r3, #16
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d0:	2300      	movs	r3, #0
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	4b11      	ldr	r3, [pc, #68]	; (800131c <HAL_UART_MspInit+0x19c>)
 80012d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d8:	4a10      	ldr	r2, [pc, #64]	; (800131c <HAL_UART_MspInit+0x19c>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	6313      	str	r3, [r2, #48]	; 0x30
 80012e0:	4b0e      	ldr	r3, [pc, #56]	; (800131c <HAL_UART_MspInit+0x19c>)
 80012e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80012ec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fa:	2303      	movs	r3, #3
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012fe:	2307      	movs	r3, #7
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	480a      	ldr	r0, [pc, #40]	; (8001334 <HAL_UART_MspInit+0x1b4>)
 800130a:	f000 fe0d 	bl	8001f28 <HAL_GPIO_Init>
}
 800130e:	bf00      	nop
 8001310:	3730      	adds	r7, #48	; 0x30
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40005000 	.word	0x40005000
 800131c:	40023800 	.word	0x40023800
 8001320:	40020800 	.word	0x40020800
 8001324:	40020c00 	.word	0x40020c00
 8001328:	200000d8 	.word	0x200000d8
 800132c:	400260b8 	.word	0x400260b8
 8001330:	40011000 	.word	0x40011000
 8001334:	40020000 	.word	0x40020000

08001338 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08e      	sub	sp, #56	; 0x38
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001340:	2300      	movs	r3, #0
 8001342:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001344:	2300      	movs	r3, #0
 8001346:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	4b33      	ldr	r3, [pc, #204]	; (800141c <HAL_InitTick+0xe4>)
 800134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001350:	4a32      	ldr	r2, [pc, #200]	; (800141c <HAL_InitTick+0xe4>)
 8001352:	f043 0310 	orr.w	r3, r3, #16
 8001356:	6413      	str	r3, [r2, #64]	; 0x40
 8001358:	4b30      	ldr	r3, [pc, #192]	; (800141c <HAL_InitTick+0xe4>)
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	f003 0310 	and.w	r3, r3, #16
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001364:	f107 0210 	add.w	r2, r7, #16
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	4611      	mov	r1, r2
 800136e:	4618      	mov	r0, r3
 8001370:	f001 ff36 	bl	80031e0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001374:	6a3b      	ldr	r3, [r7, #32]
 8001376:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800137a:	2b00      	cmp	r3, #0
 800137c:	d103      	bne.n	8001386 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800137e:	f001 ff07 	bl	8003190 <HAL_RCC_GetPCLK1Freq>
 8001382:	6378      	str	r0, [r7, #52]	; 0x34
 8001384:	e004      	b.n	8001390 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001386:	f001 ff03 	bl	8003190 <HAL_RCC_GetPCLK1Freq>
 800138a:	4603      	mov	r3, r0
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001392:	4a23      	ldr	r2, [pc, #140]	; (8001420 <HAL_InitTick+0xe8>)
 8001394:	fba2 2303 	umull	r2, r3, r2, r3
 8001398:	0c9b      	lsrs	r3, r3, #18
 800139a:	3b01      	subs	r3, #1
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800139e:	4b21      	ldr	r3, [pc, #132]	; (8001424 <HAL_InitTick+0xec>)
 80013a0:	4a21      	ldr	r2, [pc, #132]	; (8001428 <HAL_InitTick+0xf0>)
 80013a2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013a4:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <HAL_InitTick+0xec>)
 80013a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013aa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013ac:	4a1d      	ldr	r2, [pc, #116]	; (8001424 <HAL_InitTick+0xec>)
 80013ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013b2:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <HAL_InitTick+0xec>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b8:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <HAL_InitTick+0xec>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013be:	4b19      	ldr	r3, [pc, #100]	; (8001424 <HAL_InitTick+0xec>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80013c4:	4817      	ldr	r0, [pc, #92]	; (8001424 <HAL_InitTick+0xec>)
 80013c6:	f001 ff3d 	bl	8003244 <HAL_TIM_Base_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80013d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d11b      	bne.n	8001410 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80013d8:	4812      	ldr	r0, [pc, #72]	; (8001424 <HAL_InitTick+0xec>)
 80013da:	f002 f82d 	bl	8003438 <HAL_TIM_Base_Start_IT>
 80013de:	4603      	mov	r3, r0
 80013e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80013e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d111      	bne.n	8001410 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013ec:	2036      	movs	r0, #54	; 0x36
 80013ee:	f000 f9ad 	bl	800174c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b0f      	cmp	r3, #15
 80013f6:	d808      	bhi.n	800140a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80013f8:	2200      	movs	r2, #0
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	2036      	movs	r0, #54	; 0x36
 80013fe:	f000 f979 	bl	80016f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001402:	4a0a      	ldr	r2, [pc, #40]	; (800142c <HAL_InitTick+0xf4>)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	e002      	b.n	8001410 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001410:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001414:	4618      	mov	r0, r3
 8001416:	3738      	adds	r7, #56	; 0x38
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40023800 	.word	0x40023800
 8001420:	431bde83 	.word	0x431bde83
 8001424:	20000138 	.word	0x20000138
 8001428:	40001000 	.word	0x40001000
 800142c:	20000004 	.word	0x20000004

08001430 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <NMI_Handler+0x4>

08001436 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800143a:	e7fe      	b.n	800143a <HardFault_Handler+0x4>

0800143c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <MemManage_Handler+0x4>

08001442 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001446:	e7fe      	b.n	8001446 <BusFault_Handler+0x4>

08001448 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800144c:	e7fe      	b.n	800144c <UsageFault_Handler+0x4>

0800144e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001460:	4802      	ldr	r0, [pc, #8]	; (800146c <UART5_IRQHandler+0x10>)
 8001462:	f002 fb7b 	bl	8003b5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000094 	.word	0x20000094

08001470 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001474:	4802      	ldr	r0, [pc, #8]	; (8001480 <TIM6_DAC_IRQHandler+0x10>)
 8001476:	f002 f8a5 	bl	80035c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000138 	.word	0x20000138

08001484 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <SystemInit+0x20>)
 800148a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800148e:	4a05      	ldr	r2, [pc, #20]	; (80014a4 <SystemInit+0x20>)
 8001490:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001494:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80014a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014e0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014ac:	480d      	ldr	r0, [pc, #52]	; (80014e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014ae:	490e      	ldr	r1, [pc, #56]	; (80014e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014b0:	4a0e      	ldr	r2, [pc, #56]	; (80014ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b4:	e002      	b.n	80014bc <LoopCopyDataInit>

080014b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ba:	3304      	adds	r3, #4

080014bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c0:	d3f9      	bcc.n	80014b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014c2:	4a0b      	ldr	r2, [pc, #44]	; (80014f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014c4:	4c0b      	ldr	r4, [pc, #44]	; (80014f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c8:	e001      	b.n	80014ce <LoopFillZerobss>

080014ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014cc:	3204      	adds	r2, #4

080014ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d0:	d3fb      	bcc.n	80014ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014d2:	f7ff ffd7 	bl	8001484 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014d6:	f007 fd2b 	bl	8008f30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014da:	f7ff fa35 	bl	8000948 <main>
  bx  lr    
 80014de:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80014e0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80014e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80014ec:	08009338 	.word	0x08009338
  ldr r2, =_sbss
 80014f0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80014f4:	200145a4 	.word	0x200145a4

080014f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f8:	e7fe      	b.n	80014f8 <ADC_IRQHandler>
	...

080014fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001500:	4b0e      	ldr	r3, [pc, #56]	; (800153c <HAL_Init+0x40>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a0d      	ldr	r2, [pc, #52]	; (800153c <HAL_Init+0x40>)
 8001506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800150a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <HAL_Init+0x40>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a0a      	ldr	r2, [pc, #40]	; (800153c <HAL_Init+0x40>)
 8001512:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001516:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001518:	4b08      	ldr	r3, [pc, #32]	; (800153c <HAL_Init+0x40>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a07      	ldr	r2, [pc, #28]	; (800153c <HAL_Init+0x40>)
 800151e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001522:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001524:	2003      	movs	r0, #3
 8001526:	f000 f8c5 	bl	80016b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800152a:	2000      	movs	r0, #0
 800152c:	f7ff ff04 	bl	8001338 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001530:	f7ff fdfe 	bl	8001130 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40023c00 	.word	0x40023c00

08001540 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return uwTick;
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <HAL_GetTick+0x14>)
 8001546:	681b      	ldr	r3, [r3, #0]
}
 8001548:	4618      	mov	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	20000180 	.word	0x20000180

08001558 <__NVIC_SetPriorityGrouping>:
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001568:	4b0c      	ldr	r3, [pc, #48]	; (800159c <__NVIC_SetPriorityGrouping+0x44>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001574:	4013      	ands	r3, r2
 8001576:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001580:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800158a:	4a04      	ldr	r2, [pc, #16]	; (800159c <__NVIC_SetPriorityGrouping+0x44>)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	60d3      	str	r3, [r2, #12]
}
 8001590:	bf00      	nop
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <__NVIC_GetPriorityGrouping>:
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a4:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <__NVIC_GetPriorityGrouping+0x18>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	0a1b      	lsrs	r3, r3, #8
 80015aa:	f003 0307 	and.w	r3, r3, #7
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <__NVIC_EnableIRQ>:
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	db0b      	blt.n	80015e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	f003 021f 	and.w	r2, r3, #31
 80015d4:	4907      	ldr	r1, [pc, #28]	; (80015f4 <__NVIC_EnableIRQ+0x38>)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	095b      	lsrs	r3, r3, #5
 80015dc:	2001      	movs	r0, #1
 80015de:	fa00 f202 	lsl.w	r2, r0, r2
 80015e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000e100 	.word	0xe000e100

080015f8 <__NVIC_SetPriority>:
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	6039      	str	r1, [r7, #0]
 8001602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	2b00      	cmp	r3, #0
 800160a:	db0a      	blt.n	8001622 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	b2da      	uxtb	r2, r3
 8001610:	490c      	ldr	r1, [pc, #48]	; (8001644 <__NVIC_SetPriority+0x4c>)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	0112      	lsls	r2, r2, #4
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	440b      	add	r3, r1
 800161c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001620:	e00a      	b.n	8001638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4908      	ldr	r1, [pc, #32]	; (8001648 <__NVIC_SetPriority+0x50>)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	3b04      	subs	r3, #4
 8001630:	0112      	lsls	r2, r2, #4
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	440b      	add	r3, r1
 8001636:	761a      	strb	r2, [r3, #24]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000e100 	.word	0xe000e100
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800164c:	b480      	push	{r7}
 800164e:	b089      	sub	sp, #36	; 0x24
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f1c3 0307 	rsb	r3, r3, #7
 8001666:	2b04      	cmp	r3, #4
 8001668:	bf28      	it	cs
 800166a:	2304      	movcs	r3, #4
 800166c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3304      	adds	r3, #4
 8001672:	2b06      	cmp	r3, #6
 8001674:	d902      	bls.n	800167c <NVIC_EncodePriority+0x30>
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3b03      	subs	r3, #3
 800167a:	e000      	b.n	800167e <NVIC_EncodePriority+0x32>
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	f04f 32ff 	mov.w	r2, #4294967295
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43da      	mvns	r2, r3
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	401a      	ands	r2, r3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001694:	f04f 31ff 	mov.w	r1, #4294967295
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	fa01 f303 	lsl.w	r3, r1, r3
 800169e:	43d9      	mvns	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	4313      	orrs	r3, r2
         );
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3724      	adds	r7, #36	; 0x24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
	...

080016b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b07      	cmp	r3, #7
 80016c0:	d00f      	beq.n	80016e2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b06      	cmp	r3, #6
 80016c6:	d00c      	beq.n	80016e2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b05      	cmp	r3, #5
 80016cc:	d009      	beq.n	80016e2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d006      	beq.n	80016e2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	d003      	beq.n	80016e2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80016da:	2190      	movs	r1, #144	; 0x90
 80016dc:	4804      	ldr	r0, [pc, #16]	; (80016f0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80016de:	f7ff fd19 	bl	8001114 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff ff38 	bl	8001558 <__NVIC_SetPriorityGrouping>
}
 80016e8:	bf00      	nop
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	0800909c 	.word	0x0800909c

080016f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
 8001700:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b0f      	cmp	r3, #15
 800170a:	d903      	bls.n	8001714 <HAL_NVIC_SetPriority+0x20>
 800170c:	21a8      	movs	r1, #168	; 0xa8
 800170e:	480e      	ldr	r0, [pc, #56]	; (8001748 <HAL_NVIC_SetPriority+0x54>)
 8001710:	f7ff fd00 	bl	8001114 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	2b0f      	cmp	r3, #15
 8001718:	d903      	bls.n	8001722 <HAL_NVIC_SetPriority+0x2e>
 800171a:	21a9      	movs	r1, #169	; 0xa9
 800171c:	480a      	ldr	r0, [pc, #40]	; (8001748 <HAL_NVIC_SetPriority+0x54>)
 800171e:	f7ff fcf9 	bl	8001114 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001722:	f7ff ff3d 	bl	80015a0 <__NVIC_GetPriorityGrouping>
 8001726:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	68b9      	ldr	r1, [r7, #8]
 800172c:	6978      	ldr	r0, [r7, #20]
 800172e:	f7ff ff8d 	bl	800164c <NVIC_EncodePriority>
 8001732:	4602      	mov	r2, r0
 8001734:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001738:	4611      	mov	r1, r2
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff ff5c 	bl	80015f8 <__NVIC_SetPriority>
}
 8001740:	bf00      	nop
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	0800909c 	.word	0x0800909c

0800174c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175a:	2b00      	cmp	r3, #0
 800175c:	da03      	bge.n	8001766 <HAL_NVIC_EnableIRQ+0x1a>
 800175e:	21bc      	movs	r1, #188	; 0xbc
 8001760:	4805      	ldr	r0, [pc, #20]	; (8001778 <HAL_NVIC_EnableIRQ+0x2c>)
 8001762:	f7ff fcd7 	bl	8001114 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff ff26 	bl	80015bc <__NVIC_EnableIRQ>
}
 8001770:	bf00      	nop
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	0800909c 	.word	0x0800909c

0800177c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001788:	f7ff feda 	bl	8001540 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e203      	b.n	8001ba0 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a8b      	ldr	r2, [pc, #556]	; (80019cc <HAL_DMA_Init+0x250>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d04e      	beq.n	8001840 <HAL_DMA_Init+0xc4>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a8a      	ldr	r2, [pc, #552]	; (80019d0 <HAL_DMA_Init+0x254>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d049      	beq.n	8001840 <HAL_DMA_Init+0xc4>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a88      	ldr	r2, [pc, #544]	; (80019d4 <HAL_DMA_Init+0x258>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d044      	beq.n	8001840 <HAL_DMA_Init+0xc4>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a87      	ldr	r2, [pc, #540]	; (80019d8 <HAL_DMA_Init+0x25c>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d03f      	beq.n	8001840 <HAL_DMA_Init+0xc4>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a85      	ldr	r2, [pc, #532]	; (80019dc <HAL_DMA_Init+0x260>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d03a      	beq.n	8001840 <HAL_DMA_Init+0xc4>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a84      	ldr	r2, [pc, #528]	; (80019e0 <HAL_DMA_Init+0x264>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d035      	beq.n	8001840 <HAL_DMA_Init+0xc4>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a82      	ldr	r2, [pc, #520]	; (80019e4 <HAL_DMA_Init+0x268>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d030      	beq.n	8001840 <HAL_DMA_Init+0xc4>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a81      	ldr	r2, [pc, #516]	; (80019e8 <HAL_DMA_Init+0x26c>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d02b      	beq.n	8001840 <HAL_DMA_Init+0xc4>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a7f      	ldr	r2, [pc, #508]	; (80019ec <HAL_DMA_Init+0x270>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d026      	beq.n	8001840 <HAL_DMA_Init+0xc4>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a7e      	ldr	r2, [pc, #504]	; (80019f0 <HAL_DMA_Init+0x274>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d021      	beq.n	8001840 <HAL_DMA_Init+0xc4>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a7c      	ldr	r2, [pc, #496]	; (80019f4 <HAL_DMA_Init+0x278>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d01c      	beq.n	8001840 <HAL_DMA_Init+0xc4>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a7b      	ldr	r2, [pc, #492]	; (80019f8 <HAL_DMA_Init+0x27c>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d017      	beq.n	8001840 <HAL_DMA_Init+0xc4>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a79      	ldr	r2, [pc, #484]	; (80019fc <HAL_DMA_Init+0x280>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d012      	beq.n	8001840 <HAL_DMA_Init+0xc4>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a78      	ldr	r2, [pc, #480]	; (8001a00 <HAL_DMA_Init+0x284>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d00d      	beq.n	8001840 <HAL_DMA_Init+0xc4>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a76      	ldr	r2, [pc, #472]	; (8001a04 <HAL_DMA_Init+0x288>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d008      	beq.n	8001840 <HAL_DMA_Init+0xc4>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a75      	ldr	r2, [pc, #468]	; (8001a08 <HAL_DMA_Init+0x28c>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d003      	beq.n	8001840 <HAL_DMA_Init+0xc4>
 8001838:	21b7      	movs	r1, #183	; 0xb7
 800183a:	4874      	ldr	r0, [pc, #464]	; (8001a0c <HAL_DMA_Init+0x290>)
 800183c:	f7ff fc6a 	bl	8001114 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d026      	beq.n	8001896 <HAL_DMA_Init+0x11a>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001850:	d021      	beq.n	8001896 <HAL_DMA_Init+0x11a>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800185a:	d01c      	beq.n	8001896 <HAL_DMA_Init+0x11a>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8001864:	d017      	beq.n	8001896 <HAL_DMA_Init+0x11a>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800186e:	d012      	beq.n	8001896 <HAL_DMA_Init+0x11a>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8001878:	d00d      	beq.n	8001896 <HAL_DMA_Init+0x11a>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001882:	d008      	beq.n	8001896 <HAL_DMA_Init+0x11a>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 800188c:	d003      	beq.n	8001896 <HAL_DMA_Init+0x11a>
 800188e:	21b8      	movs	r1, #184	; 0xb8
 8001890:	485e      	ldr	r0, [pc, #376]	; (8001a0c <HAL_DMA_Init+0x290>)
 8001892:	f7ff fc3f 	bl	8001114 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00b      	beq.n	80018b6 <HAL_DMA_Init+0x13a>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2b40      	cmp	r3, #64	; 0x40
 80018a4:	d007      	beq.n	80018b6 <HAL_DMA_Init+0x13a>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2b80      	cmp	r3, #128	; 0x80
 80018ac:	d003      	beq.n	80018b6 <HAL_DMA_Init+0x13a>
 80018ae:	21b9      	movs	r1, #185	; 0xb9
 80018b0:	4856      	ldr	r0, [pc, #344]	; (8001a0c <HAL_DMA_Init+0x290>)
 80018b2:	f7ff fc2f 	bl	8001114 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018be:	d007      	beq.n	80018d0 <HAL_DMA_Init+0x154>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_DMA_Init+0x154>
 80018c8:	21ba      	movs	r1, #186	; 0xba
 80018ca:	4850      	ldr	r0, [pc, #320]	; (8001a0c <HAL_DMA_Init+0x290>)
 80018cc:	f7ff fc22 	bl	8001114 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018d8:	d007      	beq.n	80018ea <HAL_DMA_Init+0x16e>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <HAL_DMA_Init+0x16e>
 80018e2:	21bb      	movs	r1, #187	; 0xbb
 80018e4:	4849      	ldr	r0, [pc, #292]	; (8001a0c <HAL_DMA_Init+0x290>)
 80018e6:	f7ff fc15 	bl	8001114 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d00d      	beq.n	800190e <HAL_DMA_Init+0x192>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018fa:	d008      	beq.n	800190e <HAL_DMA_Init+0x192>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	695b      	ldr	r3, [r3, #20]
 8001900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001904:	d003      	beq.n	800190e <HAL_DMA_Init+0x192>
 8001906:	21bc      	movs	r1, #188	; 0xbc
 8001908:	4840      	ldr	r0, [pc, #256]	; (8001a0c <HAL_DMA_Init+0x290>)
 800190a:	f7ff fc03 	bl	8001114 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00d      	beq.n	8001932 <HAL_DMA_Init+0x1b6>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800191e:	d008      	beq.n	8001932 <HAL_DMA_Init+0x1b6>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001928:	d003      	beq.n	8001932 <HAL_DMA_Init+0x1b6>
 800192a:	21bd      	movs	r1, #189	; 0xbd
 800192c:	4837      	ldr	r0, [pc, #220]	; (8001a0c <HAL_DMA_Init+0x290>)
 800192e:	f7ff fbf1 	bl	8001114 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00c      	beq.n	8001954 <HAL_DMA_Init+0x1d8>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001942:	d007      	beq.n	8001954 <HAL_DMA_Init+0x1d8>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69db      	ldr	r3, [r3, #28]
 8001948:	2b20      	cmp	r3, #32
 800194a:	d003      	beq.n	8001954 <HAL_DMA_Init+0x1d8>
 800194c:	21be      	movs	r1, #190	; 0xbe
 800194e:	482f      	ldr	r0, [pc, #188]	; (8001a0c <HAL_DMA_Init+0x290>)
 8001950:	f7ff fbe0 	bl	8001114 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d012      	beq.n	8001982 <HAL_DMA_Init+0x206>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001964:	d00d      	beq.n	8001982 <HAL_DMA_Init+0x206>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800196e:	d008      	beq.n	8001982 <HAL_DMA_Init+0x206>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001978:	d003      	beq.n	8001982 <HAL_DMA_Init+0x206>
 800197a:	21bf      	movs	r1, #191	; 0xbf
 800197c:	4823      	ldr	r0, [pc, #140]	; (8001a0c <HAL_DMA_Init+0x290>)
 800197e:	f7ff fbc9 	bl	8001114 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	2b00      	cmp	r3, #0
 8001988:	d007      	beq.n	800199a <HAL_DMA_Init+0x21e>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198e:	2b04      	cmp	r3, #4
 8001990:	d003      	beq.n	800199a <HAL_DMA_Init+0x21e>
 8001992:	21c0      	movs	r1, #192	; 0xc0
 8001994:	481d      	ldr	r0, [pc, #116]	; (8001a0c <HAL_DMA_Init+0x290>)
 8001996:	f7ff fbbd 	bl	8001114 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d064      	beq.n	8001a6c <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d032      	beq.n	8001a10 <HAL_DMA_Init+0x294>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d02e      	beq.n	8001a10 <HAL_DMA_Init+0x294>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d02a      	beq.n	8001a10 <HAL_DMA_Init+0x294>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019be:	2b03      	cmp	r3, #3
 80019c0:	d026      	beq.n	8001a10 <HAL_DMA_Init+0x294>
 80019c2:	21c5      	movs	r1, #197	; 0xc5
 80019c4:	4811      	ldr	r0, [pc, #68]	; (8001a0c <HAL_DMA_Init+0x290>)
 80019c6:	f7ff fba5 	bl	8001114 <assert_failed>
 80019ca:	e021      	b.n	8001a10 <HAL_DMA_Init+0x294>
 80019cc:	40026010 	.word	0x40026010
 80019d0:	40026028 	.word	0x40026028
 80019d4:	40026040 	.word	0x40026040
 80019d8:	40026058 	.word	0x40026058
 80019dc:	40026070 	.word	0x40026070
 80019e0:	40026088 	.word	0x40026088
 80019e4:	400260a0 	.word	0x400260a0
 80019e8:	400260b8 	.word	0x400260b8
 80019ec:	40026410 	.word	0x40026410
 80019f0:	40026428 	.word	0x40026428
 80019f4:	40026440 	.word	0x40026440
 80019f8:	40026458 	.word	0x40026458
 80019fc:	40026470 	.word	0x40026470
 8001a00:	40026488 	.word	0x40026488
 8001a04:	400264a0 	.word	0x400264a0
 8001a08:	400264b8 	.word	0x400264b8
 8001a0c:	080090d8 	.word	0x080090d8
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d012      	beq.n	8001a3e <HAL_DMA_Init+0x2c2>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001a20:	d00d      	beq.n	8001a3e <HAL_DMA_Init+0x2c2>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a2a:	d008      	beq.n	8001a3e <HAL_DMA_Init+0x2c2>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a34:	d003      	beq.n	8001a3e <HAL_DMA_Init+0x2c2>
 8001a36:	21c6      	movs	r1, #198	; 0xc6
 8001a38:	485b      	ldr	r0, [pc, #364]	; (8001ba8 <HAL_DMA_Init+0x42c>)
 8001a3a:	f7ff fb6b 	bl	8001114 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d012      	beq.n	8001a6c <HAL_DMA_Init+0x2f0>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a4e:	d00d      	beq.n	8001a6c <HAL_DMA_Init+0x2f0>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a58:	d008      	beq.n	8001a6c <HAL_DMA_Init+0x2f0>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001a62:	d003      	beq.n	8001a6c <HAL_DMA_Init+0x2f0>
 8001a64:	21c7      	movs	r1, #199	; 0xc7
 8001a66:	4850      	ldr	r0, [pc, #320]	; (8001ba8 <HAL_DMA_Init+0x42c>)
 8001a68:	f7ff fb54 	bl	8001114 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2202      	movs	r2, #2
 8001a70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 0201 	bic.w	r2, r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a8c:	e00f      	b.n	8001aae <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a8e:	f7ff fd57 	bl	8001540 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b05      	cmp	r3, #5
 8001a9a:	d908      	bls.n	8001aae <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2203      	movs	r2, #3
 8001aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e078      	b.n	8001ba0 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1e8      	bne.n	8001a8e <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	4b39      	ldr	r3, [pc, #228]	; (8001bac <HAL_DMA_Init+0x430>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ada:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001af2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	2b04      	cmp	r3, #4
 8001b06:	d107      	bne.n	8001b18 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b10:	4313      	orrs	r3, r2
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f023 0307 	bic.w	r3, r3, #7
 8001b2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	d117      	bne.n	8001b72 <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d00e      	beq.n	8001b72 <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 f96b 	bl	8001e30 <DMA_CheckFifoParam>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d008      	beq.n	8001b72 <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2240      	movs	r2, #64	; 0x40
 8001b64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e016      	b.n	8001ba0 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f922 	bl	8001dc4 <DMA_CalcBaseAndBitshift>
 8001b80:	4603      	mov	r3, r0
 8001b82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b88:	223f      	movs	r2, #63	; 0x3f
 8001b8a:	409a      	lsls	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	080090d8 	.word	0x080090d8
 8001bac:	f010803f 	.word	0xf010803f

08001bb0 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
 8001bbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <HAL_DMA_Start+0x20>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bce:	d304      	bcc.n	8001bda <HAL_DMA_Start+0x2a>
 8001bd0:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8001bd4:	481a      	ldr	r0, [pc, #104]	; (8001c40 <HAL_DMA_Start+0x90>)
 8001bd6:	f7ff fa9d 	bl	8001114 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d101      	bne.n	8001be8 <HAL_DMA_Start+0x38>
 8001be4:	2302      	movs	r3, #2
 8001be6:	e026      	b.n	8001c36 <HAL_DMA_Start+0x86>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d115      	bne.n	8001c28 <HAL_DMA_Start+0x78>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2200      	movs	r2, #0
 8001c08:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	68b9      	ldr	r1, [r7, #8]
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f000 f8a9 	bl	8001d68 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f042 0201 	orr.w	r2, r2, #1
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	e005      	b.n	8001c34 <HAL_DMA_Start+0x84>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c30:	2302      	movs	r3, #2
 8001c32:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8001c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	080090d8 	.word	0x080090d8

08001c44 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c50:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c52:	f7ff fc75 	bl	8001540 <HAL_GetTick>
 8001c56:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d008      	beq.n	8001c76 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2280      	movs	r2, #128	; 0x80
 8001c68:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e052      	b.n	8001d1c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 0216 	bic.w	r2, r2, #22
 8001c84:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	695a      	ldr	r2, [r3, #20]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c94:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d103      	bne.n	8001ca6 <HAL_DMA_Abort+0x62>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d007      	beq.n	8001cb6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0208 	bic.w	r2, r2, #8
 8001cb4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 0201 	bic.w	r2, r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cc6:	e013      	b.n	8001cf0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cc8:	f7ff fc3a 	bl	8001540 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b05      	cmp	r3, #5
 8001cd4:	d90c      	bls.n	8001cf0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2220      	movs	r2, #32
 8001cda:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2203      	movs	r2, #3
 8001ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e015      	b.n	8001d1c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1e4      	bne.n	8001cc8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d02:	223f      	movs	r2, #63	; 0x3f
 8001d04:	409a      	lsls	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d004      	beq.n	8001d42 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2280      	movs	r2, #128	; 0x80
 8001d3c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e00c      	b.n	8001d5c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2205      	movs	r2, #5
 8001d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 0201 	bic.w	r2, r2, #1
 8001d58:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
 8001d74:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d84:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	2b40      	cmp	r3, #64	; 0x40
 8001d94:	d108      	bne.n	8001da8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001da6:	e007      	b.n	8001db8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	60da      	str	r2, [r3, #12]
}
 8001db8:	bf00      	nop
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	3b10      	subs	r3, #16
 8001dd4:	4a14      	ldr	r2, [pc, #80]	; (8001e28 <DMA_CalcBaseAndBitshift+0x64>)
 8001dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dda:	091b      	lsrs	r3, r3, #4
 8001ddc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001dde:	4a13      	ldr	r2, [pc, #76]	; (8001e2c <DMA_CalcBaseAndBitshift+0x68>)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4413      	add	r3, r2
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2b03      	cmp	r3, #3
 8001df0:	d909      	bls.n	8001e06 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001dfa:	f023 0303 	bic.w	r3, r3, #3
 8001dfe:	1d1a      	adds	r2, r3, #4
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	659a      	str	r2, [r3, #88]	; 0x58
 8001e04:	e007      	b.n	8001e16 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e0e:	f023 0303 	bic.w	r3, r3, #3
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	aaaaaaab 	.word	0xaaaaaaab
 8001e2c:	080092f8 	.word	0x080092f8

08001e30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d11f      	bne.n	8001e8a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	2b03      	cmp	r3, #3
 8001e4e:	d856      	bhi.n	8001efe <DMA_CheckFifoParam+0xce>
 8001e50:	a201      	add	r2, pc, #4	; (adr r2, 8001e58 <DMA_CheckFifoParam+0x28>)
 8001e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e56:	bf00      	nop
 8001e58:	08001e69 	.word	0x08001e69
 8001e5c:	08001e7b 	.word	0x08001e7b
 8001e60:	08001e69 	.word	0x08001e69
 8001e64:	08001eff 	.word	0x08001eff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d046      	beq.n	8001f02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e78:	e043      	b.n	8001f02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e82:	d140      	bne.n	8001f06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e88:	e03d      	b.n	8001f06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e92:	d121      	bne.n	8001ed8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	2b03      	cmp	r3, #3
 8001e98:	d837      	bhi.n	8001f0a <DMA_CheckFifoParam+0xda>
 8001e9a:	a201      	add	r2, pc, #4	; (adr r2, 8001ea0 <DMA_CheckFifoParam+0x70>)
 8001e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ea0:	08001eb1 	.word	0x08001eb1
 8001ea4:	08001eb7 	.word	0x08001eb7
 8001ea8:	08001eb1 	.word	0x08001eb1
 8001eac:	08001ec9 	.word	0x08001ec9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8001eb4:	e030      	b.n	8001f18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d025      	beq.n	8001f0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ec6:	e022      	b.n	8001f0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ecc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ed0:	d11f      	bne.n	8001f12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ed6:	e01c      	b.n	8001f12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d903      	bls.n	8001ee6 <DMA_CheckFifoParam+0xb6>
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2b03      	cmp	r3, #3
 8001ee2:	d003      	beq.n	8001eec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ee4:	e018      	b.n	8001f18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	73fb      	strb	r3, [r7, #15]
      break;
 8001eea:	e015      	b.n	8001f18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00e      	beq.n	8001f16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	73fb      	strb	r3, [r7, #15]
      break;
 8001efc:	e00b      	b.n	8001f16 <DMA_CheckFifoParam+0xe6>
      break;
 8001efe:	bf00      	nop
 8001f00:	e00a      	b.n	8001f18 <DMA_CheckFifoParam+0xe8>
      break;
 8001f02:	bf00      	nop
 8001f04:	e008      	b.n	8001f18 <DMA_CheckFifoParam+0xe8>
      break;
 8001f06:	bf00      	nop
 8001f08:	e006      	b.n	8001f18 <DMA_CheckFifoParam+0xe8>
      break;
 8001f0a:	bf00      	nop
 8001f0c:	e004      	b.n	8001f18 <DMA_CheckFifoParam+0xe8>
      break;
 8001f0e:	bf00      	nop
 8001f10:	e002      	b.n	8001f18 <DMA_CheckFifoParam+0xe8>
      break;   
 8001f12:	bf00      	nop
 8001f14:	e000      	b.n	8001f18 <DMA_CheckFifoParam+0xe8>
      break;
 8001f16:	bf00      	nop
    }
  } 
  
  return status; 
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop

08001f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b088      	sub	sp, #32
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a3d      	ldr	r2, [pc, #244]	; (8002038 <HAL_GPIO_Init+0x110>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d02b      	beq.n	8001f9e <HAL_GPIO_Init+0x76>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a3c      	ldr	r2, [pc, #240]	; (800203c <HAL_GPIO_Init+0x114>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d027      	beq.n	8001f9e <HAL_GPIO_Init+0x76>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a3b      	ldr	r2, [pc, #236]	; (8002040 <HAL_GPIO_Init+0x118>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d023      	beq.n	8001f9e <HAL_GPIO_Init+0x76>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a3a      	ldr	r2, [pc, #232]	; (8002044 <HAL_GPIO_Init+0x11c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d01f      	beq.n	8001f9e <HAL_GPIO_Init+0x76>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a39      	ldr	r2, [pc, #228]	; (8002048 <HAL_GPIO_Init+0x120>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d01b      	beq.n	8001f9e <HAL_GPIO_Init+0x76>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a38      	ldr	r2, [pc, #224]	; (800204c <HAL_GPIO_Init+0x124>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d017      	beq.n	8001f9e <HAL_GPIO_Init+0x76>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a37      	ldr	r2, [pc, #220]	; (8002050 <HAL_GPIO_Init+0x128>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d013      	beq.n	8001f9e <HAL_GPIO_Init+0x76>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a36      	ldr	r2, [pc, #216]	; (8002054 <HAL_GPIO_Init+0x12c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d00f      	beq.n	8001f9e <HAL_GPIO_Init+0x76>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a35      	ldr	r2, [pc, #212]	; (8002058 <HAL_GPIO_Init+0x130>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d00b      	beq.n	8001f9e <HAL_GPIO_Init+0x76>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a34      	ldr	r2, [pc, #208]	; (800205c <HAL_GPIO_Init+0x134>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d007      	beq.n	8001f9e <HAL_GPIO_Init+0x76>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a33      	ldr	r2, [pc, #204]	; (8002060 <HAL_GPIO_Init+0x138>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_Init+0x76>
 8001f96:	21ac      	movs	r1, #172	; 0xac
 8001f98:	4832      	ldr	r0, [pc, #200]	; (8002064 <HAL_GPIO_Init+0x13c>)
 8001f9a:	f7ff f8bb 	bl	8001114 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d005      	beq.n	8001fb4 <HAL_GPIO_Init+0x8c>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	0c1b      	lsrs	r3, r3, #16
 8001fae:	041b      	lsls	r3, r3, #16
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d003      	beq.n	8001fbc <HAL_GPIO_Init+0x94>
 8001fb4:	21ad      	movs	r1, #173	; 0xad
 8001fb6:	482b      	ldr	r0, [pc, #172]	; (8002064 <HAL_GPIO_Init+0x13c>)
 8001fb8:	f7ff f8ac 	bl	8001114 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d035      	beq.n	8002030 <HAL_GPIO_Init+0x108>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d031      	beq.n	8002030 <HAL_GPIO_Init+0x108>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b11      	cmp	r3, #17
 8001fd2:	d02d      	beq.n	8002030 <HAL_GPIO_Init+0x108>
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d029      	beq.n	8002030 <HAL_GPIO_Init+0x108>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b12      	cmp	r3, #18
 8001fe2:	d025      	beq.n	8002030 <HAL_GPIO_Init+0x108>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001fec:	d020      	beq.n	8002030 <HAL_GPIO_Init+0x108>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001ff6:	d01b      	beq.n	8002030 <HAL_GPIO_Init+0x108>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8002000:	d016      	beq.n	8002030 <HAL_GPIO_Init+0x108>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800200a:	d011      	beq.n	8002030 <HAL_GPIO_Init+0x108>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8002014:	d00c      	beq.n	8002030 <HAL_GPIO_Init+0x108>
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800201e:	d007      	beq.n	8002030 <HAL_GPIO_Init+0x108>
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b03      	cmp	r3, #3
 8002026:	d003      	beq.n	8002030 <HAL_GPIO_Init+0x108>
 8002028:	21ae      	movs	r1, #174	; 0xae
 800202a:	480e      	ldr	r0, [pc, #56]	; (8002064 <HAL_GPIO_Init+0x13c>)
 800202c:	f7ff f872 	bl	8001114 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002030:	2300      	movs	r3, #0
 8002032:	61fb      	str	r3, [r7, #28]
 8002034:	e274      	b.n	8002520 <HAL_GPIO_Init+0x5f8>
 8002036:	bf00      	nop
 8002038:	40020000 	.word	0x40020000
 800203c:	40020400 	.word	0x40020400
 8002040:	40020800 	.word	0x40020800
 8002044:	40020c00 	.word	0x40020c00
 8002048:	40021000 	.word	0x40021000
 800204c:	40021400 	.word	0x40021400
 8002050:	40021800 	.word	0x40021800
 8002054:	40021c00 	.word	0x40021c00
 8002058:	40022000 	.word	0x40022000
 800205c:	40022400 	.word	0x40022400
 8002060:	40022800 	.word	0x40022800
 8002064:	08009110 	.word	0x08009110
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002068:	2201      	movs	r2, #1
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	4013      	ands	r3, r2
 800207a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	429a      	cmp	r2, r3
 8002082:	f040 824a 	bne.w	800251a <HAL_GPIO_Init+0x5f2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	2b01      	cmp	r3, #1
 8002090:	d005      	beq.n	800209e <HAL_GPIO_Init+0x176>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800209a:	2b02      	cmp	r3, #2
 800209c:	d144      	bne.n	8002128 <HAL_GPIO_Init+0x200>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00f      	beq.n	80020c6 <HAL_GPIO_Init+0x19e>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d00b      	beq.n	80020c6 <HAL_GPIO_Init+0x19e>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d007      	beq.n	80020c6 <HAL_GPIO_Init+0x19e>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	2b03      	cmp	r3, #3
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_Init+0x19e>
 80020be:	21c0      	movs	r1, #192	; 0xc0
 80020c0:	4831      	ldr	r0, [pc, #196]	; (8002188 <HAL_GPIO_Init+0x260>)
 80020c2:	f7ff f827 	bl	8001114 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	2203      	movs	r2, #3
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020fc:	2201      	movs	r2, #1
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	091b      	lsrs	r3, r3, #4
 8002112:	f003 0201 	and.w	r2, r3, #1
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	2b03      	cmp	r3, #3
 8002132:	d02b      	beq.n	800218c <HAL_GPIO_Init+0x264>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00b      	beq.n	8002154 <HAL_GPIO_Init+0x22c>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d007      	beq.n	8002154 <HAL_GPIO_Init+0x22c>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	2b02      	cmp	r3, #2
 800214a:	d003      	beq.n	8002154 <HAL_GPIO_Init+0x22c>
 800214c:	21d1      	movs	r1, #209	; 0xd1
 800214e:	480e      	ldr	r0, [pc, #56]	; (8002188 <HAL_GPIO_Init+0x260>)
 8002150:	f7fe ffe0 	bl	8001114 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	2203      	movs	r2, #3
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	60da      	str	r2, [r3, #12]
 8002184:	e002      	b.n	800218c <HAL_GPIO_Init+0x264>
 8002186:	bf00      	nop
 8002188:	08009110 	.word	0x08009110
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 0303 	and.w	r3, r3, #3
 8002194:	2b02      	cmp	r3, #2
 8002196:	f040 80df 	bne.w	8002358 <HAL_GPIO_Init+0x430>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 80b6 	beq.w	8002310 <HAL_GPIO_Init+0x3e8>
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	2b09      	cmp	r3, #9
 80021aa:	f000 80b1 	beq.w	8002310 <HAL_GPIO_Init+0x3e8>
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 80ac 	beq.w	8002310 <HAL_GPIO_Init+0x3e8>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 80a7 	beq.w	8002310 <HAL_GPIO_Init+0x3e8>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 80a2 	beq.w	8002310 <HAL_GPIO_Init+0x3e8>
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 809d 	beq.w	8002310 <HAL_GPIO_Init+0x3e8>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	f000 8098 	beq.w	8002310 <HAL_GPIO_Init+0x3e8>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	f000 8093 	beq.w	8002310 <HAL_GPIO_Init+0x3e8>
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	f000 808e 	beq.w	8002310 <HAL_GPIO_Init+0x3e8>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	f000 8089 	beq.w	8002310 <HAL_GPIO_Init+0x3e8>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	2b02      	cmp	r3, #2
 8002204:	f000 8084 	beq.w	8002310 <HAL_GPIO_Init+0x3e8>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	2b03      	cmp	r3, #3
 800220e:	d07f      	beq.n	8002310 <HAL_GPIO_Init+0x3e8>
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	2b04      	cmp	r3, #4
 8002216:	d07b      	beq.n	8002310 <HAL_GPIO_Init+0x3e8>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	2b04      	cmp	r3, #4
 800221e:	d077      	beq.n	8002310 <HAL_GPIO_Init+0x3e8>
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	2b04      	cmp	r3, #4
 8002226:	d073      	beq.n	8002310 <HAL_GPIO_Init+0x3e8>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	2b05      	cmp	r3, #5
 800222e:	d06f      	beq.n	8002310 <HAL_GPIO_Init+0x3e8>
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	2b05      	cmp	r3, #5
 8002236:	d06b      	beq.n	8002310 <HAL_GPIO_Init+0x3e8>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	2b09      	cmp	r3, #9
 800223e:	d067      	beq.n	8002310 <HAL_GPIO_Init+0x3e8>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	2b06      	cmp	r3, #6
 8002246:	d063      	beq.n	8002310 <HAL_GPIO_Init+0x3e8>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	2b09      	cmp	r3, #9
 800224e:	d05f      	beq.n	8002310 <HAL_GPIO_Init+0x3e8>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	2b07      	cmp	r3, #7
 8002256:	d05b      	beq.n	8002310 <HAL_GPIO_Init+0x3e8>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	2b07      	cmp	r3, #7
 800225e:	d057      	beq.n	8002310 <HAL_GPIO_Init+0x3e8>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	2b07      	cmp	r3, #7
 8002266:	d053      	beq.n	8002310 <HAL_GPIO_Init+0x3e8>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	2b08      	cmp	r3, #8
 800226e:	d04f      	beq.n	8002310 <HAL_GPIO_Init+0x3e8>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	2b08      	cmp	r3, #8
 8002276:	d04b      	beq.n	8002310 <HAL_GPIO_Init+0x3e8>
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	2b08      	cmp	r3, #8
 800227e:	d047      	beq.n	8002310 <HAL_GPIO_Init+0x3e8>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	2b09      	cmp	r3, #9
 8002286:	d043      	beq.n	8002310 <HAL_GPIO_Init+0x3e8>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	2b09      	cmp	r3, #9
 800228e:	d03f      	beq.n	8002310 <HAL_GPIO_Init+0x3e8>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	2b0a      	cmp	r3, #10
 8002296:	d03b      	beq.n	8002310 <HAL_GPIO_Init+0x3e8>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	2b0a      	cmp	r3, #10
 800229e:	d037      	beq.n	8002310 <HAL_GPIO_Init+0x3e8>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	2b0b      	cmp	r3, #11
 80022a6:	d033      	beq.n	8002310 <HAL_GPIO_Init+0x3e8>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	2b0c      	cmp	r3, #12
 80022ae:	d02f      	beq.n	8002310 <HAL_GPIO_Init+0x3e8>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	2b0c      	cmp	r3, #12
 80022b6:	d02b      	beq.n	8002310 <HAL_GPIO_Init+0x3e8>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	2b0d      	cmp	r3, #13
 80022be:	d027      	beq.n	8002310 <HAL_GPIO_Init+0x3e8>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	2b0f      	cmp	r3, #15
 80022c6:	d023      	beq.n	8002310 <HAL_GPIO_Init+0x3e8>
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	2b05      	cmp	r3, #5
 80022ce:	d01f      	beq.n	8002310 <HAL_GPIO_Init+0x3e8>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	2b05      	cmp	r3, #5
 80022d6:	d01b      	beq.n	8002310 <HAL_GPIO_Init+0x3e8>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	2b05      	cmp	r3, #5
 80022de:	d017      	beq.n	8002310 <HAL_GPIO_Init+0x3e8>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d013      	beq.n	8002310 <HAL_GPIO_Init+0x3e8>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	2b08      	cmp	r3, #8
 80022ee:	d00f      	beq.n	8002310 <HAL_GPIO_Init+0x3e8>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	2b0c      	cmp	r3, #12
 80022f6:	d00b      	beq.n	8002310 <HAL_GPIO_Init+0x3e8>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	2b06      	cmp	r3, #6
 80022fe:	d007      	beq.n	8002310 <HAL_GPIO_Init+0x3e8>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	2b0e      	cmp	r3, #14
 8002306:	d003      	beq.n	8002310 <HAL_GPIO_Init+0x3e8>
 8002308:	21de      	movs	r1, #222	; 0xde
 800230a:	488a      	ldr	r0, [pc, #552]	; (8002534 <HAL_GPIO_Init+0x60c>)
 800230c:	f7fe ff02 	bl	8001114 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	08da      	lsrs	r2, r3, #3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3208      	adds	r2, #8
 8002318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800231c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	220f      	movs	r2, #15
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	691a      	ldr	r2, [r3, #16]
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	08da      	lsrs	r2, r3, #3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3208      	adds	r2, #8
 8002352:	69b9      	ldr	r1, [r7, #24]
 8002354:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	2203      	movs	r2, #3
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 0203 	and.w	r2, r3, #3
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 80c0 	beq.w	800251a <HAL_GPIO_Init+0x5f2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	4b66      	ldr	r3, [pc, #408]	; (8002538 <HAL_GPIO_Init+0x610>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	4a65      	ldr	r2, [pc, #404]	; (8002538 <HAL_GPIO_Init+0x610>)
 80023a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023a8:	6453      	str	r3, [r2, #68]	; 0x44
 80023aa:	4b63      	ldr	r3, [pc, #396]	; (8002538 <HAL_GPIO_Init+0x610>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023b6:	4a61      	ldr	r2, [pc, #388]	; (800253c <HAL_GPIO_Init+0x614>)
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	089b      	lsrs	r3, r3, #2
 80023bc:	3302      	adds	r3, #2
 80023be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	220f      	movs	r2, #15
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43db      	mvns	r3, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4013      	ands	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a58      	ldr	r2, [pc, #352]	; (8002540 <HAL_GPIO_Init+0x618>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d037      	beq.n	8002452 <HAL_GPIO_Init+0x52a>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a57      	ldr	r2, [pc, #348]	; (8002544 <HAL_GPIO_Init+0x61c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d031      	beq.n	800244e <HAL_GPIO_Init+0x526>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a56      	ldr	r2, [pc, #344]	; (8002548 <HAL_GPIO_Init+0x620>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d02b      	beq.n	800244a <HAL_GPIO_Init+0x522>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a55      	ldr	r2, [pc, #340]	; (800254c <HAL_GPIO_Init+0x624>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d025      	beq.n	8002446 <HAL_GPIO_Init+0x51e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a54      	ldr	r2, [pc, #336]	; (8002550 <HAL_GPIO_Init+0x628>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d01f      	beq.n	8002442 <HAL_GPIO_Init+0x51a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a53      	ldr	r2, [pc, #332]	; (8002554 <HAL_GPIO_Init+0x62c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d019      	beq.n	800243e <HAL_GPIO_Init+0x516>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a52      	ldr	r2, [pc, #328]	; (8002558 <HAL_GPIO_Init+0x630>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d013      	beq.n	800243a <HAL_GPIO_Init+0x512>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a51      	ldr	r2, [pc, #324]	; (800255c <HAL_GPIO_Init+0x634>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d00d      	beq.n	8002436 <HAL_GPIO_Init+0x50e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a50      	ldr	r2, [pc, #320]	; (8002560 <HAL_GPIO_Init+0x638>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d007      	beq.n	8002432 <HAL_GPIO_Init+0x50a>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a4f      	ldr	r2, [pc, #316]	; (8002564 <HAL_GPIO_Init+0x63c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d101      	bne.n	800242e <HAL_GPIO_Init+0x506>
 800242a:	2309      	movs	r3, #9
 800242c:	e012      	b.n	8002454 <HAL_GPIO_Init+0x52c>
 800242e:	230a      	movs	r3, #10
 8002430:	e010      	b.n	8002454 <HAL_GPIO_Init+0x52c>
 8002432:	2308      	movs	r3, #8
 8002434:	e00e      	b.n	8002454 <HAL_GPIO_Init+0x52c>
 8002436:	2307      	movs	r3, #7
 8002438:	e00c      	b.n	8002454 <HAL_GPIO_Init+0x52c>
 800243a:	2306      	movs	r3, #6
 800243c:	e00a      	b.n	8002454 <HAL_GPIO_Init+0x52c>
 800243e:	2305      	movs	r3, #5
 8002440:	e008      	b.n	8002454 <HAL_GPIO_Init+0x52c>
 8002442:	2304      	movs	r3, #4
 8002444:	e006      	b.n	8002454 <HAL_GPIO_Init+0x52c>
 8002446:	2303      	movs	r3, #3
 8002448:	e004      	b.n	8002454 <HAL_GPIO_Init+0x52c>
 800244a:	2302      	movs	r3, #2
 800244c:	e002      	b.n	8002454 <HAL_GPIO_Init+0x52c>
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <HAL_GPIO_Init+0x52c>
 8002452:	2300      	movs	r3, #0
 8002454:	69fa      	ldr	r2, [r7, #28]
 8002456:	f002 0203 	and.w	r2, r2, #3
 800245a:	0092      	lsls	r2, r2, #2
 800245c:	4093      	lsls	r3, r2
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002464:	4935      	ldr	r1, [pc, #212]	; (800253c <HAL_GPIO_Init+0x614>)
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	089b      	lsrs	r3, r3, #2
 800246a:	3302      	adds	r3, #2
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002472:	4b3d      	ldr	r3, [pc, #244]	; (8002568 <HAL_GPIO_Init+0x640>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	43db      	mvns	r3, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4013      	ands	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_GPIO_Init+0x56e>
        {
          temp |= iocurrent;
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002496:	4a34      	ldr	r2, [pc, #208]	; (8002568 <HAL_GPIO_Init+0x640>)
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800249c:	4b32      	ldr	r3, [pc, #200]	; (8002568 <HAL_GPIO_Init+0x640>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	43db      	mvns	r3, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <HAL_GPIO_Init+0x598>
        {
          temp |= iocurrent;
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024c0:	4a29      	ldr	r2, [pc, #164]	; (8002568 <HAL_GPIO_Init+0x640>)
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024c6:	4b28      	ldr	r3, [pc, #160]	; (8002568 <HAL_GPIO_Init+0x640>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	43db      	mvns	r3, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4013      	ands	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_GPIO_Init+0x5c2>
        {
          temp |= iocurrent;
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024ea:	4a1f      	ldr	r2, [pc, #124]	; (8002568 <HAL_GPIO_Init+0x640>)
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024f0:	4b1d      	ldr	r3, [pc, #116]	; (8002568 <HAL_GPIO_Init+0x640>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_GPIO_Init+0x5ec>
        {
          temp |= iocurrent;
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002514:	4a14      	ldr	r2, [pc, #80]	; (8002568 <HAL_GPIO_Init+0x640>)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3301      	adds	r3, #1
 800251e:	61fb      	str	r3, [r7, #28]
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	2b0f      	cmp	r3, #15
 8002524:	f67f ada0 	bls.w	8002068 <HAL_GPIO_Init+0x140>
      }
    }
  }
}
 8002528:	bf00      	nop
 800252a:	bf00      	nop
 800252c:	3720      	adds	r7, #32
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	08009110 	.word	0x08009110
 8002538:	40023800 	.word	0x40023800
 800253c:	40013800 	.word	0x40013800
 8002540:	40020000 	.word	0x40020000
 8002544:	40020400 	.word	0x40020400
 8002548:	40020800 	.word	0x40020800
 800254c:	40020c00 	.word	0x40020c00
 8002550:	40021000 	.word	0x40021000
 8002554:	40021400 	.word	0x40021400
 8002558:	40021800 	.word	0x40021800
 800255c:	40021c00 	.word	0x40021c00
 8002560:	40022000 	.word	0x40022000
 8002564:	40022400 	.word	0x40022400
 8002568:	40013c00 	.word	0x40013c00

0800256c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	807b      	strh	r3, [r7, #2]
 8002578:	4613      	mov	r3, r2
 800257a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800257c:	887b      	ldrh	r3, [r7, #2]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d004      	beq.n	800258c <HAL_GPIO_WritePin+0x20>
 8002582:	887b      	ldrh	r3, [r7, #2]
 8002584:	0c1b      	lsrs	r3, r3, #16
 8002586:	041b      	lsls	r3, r3, #16
 8002588:	2b00      	cmp	r3, #0
 800258a:	d004      	beq.n	8002596 <HAL_GPIO_WritePin+0x2a>
 800258c:	f240 119d 	movw	r1, #413	; 0x19d
 8002590:	480e      	ldr	r0, [pc, #56]	; (80025cc <HAL_GPIO_WritePin+0x60>)
 8002592:	f7fe fdbf 	bl	8001114 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002596:	787b      	ldrb	r3, [r7, #1]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d007      	beq.n	80025ac <HAL_GPIO_WritePin+0x40>
 800259c:	787b      	ldrb	r3, [r7, #1]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d004      	beq.n	80025ac <HAL_GPIO_WritePin+0x40>
 80025a2:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80025a6:	4809      	ldr	r0, [pc, #36]	; (80025cc <HAL_GPIO_WritePin+0x60>)
 80025a8:	f7fe fdb4 	bl	8001114 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80025ac:	787b      	ldrb	r3, [r7, #1]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025b2:	887a      	ldrh	r2, [r7, #2]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025b8:	e003      	b.n	80025c2 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025ba:	887b      	ldrh	r3, [r7, #2]
 80025bc:	041a      	lsls	r2, r3, #16
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	619a      	str	r2, [r3, #24]
}
 80025c2:	bf00      	nop
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	08009110 	.word	0x08009110

080025d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e314      	b.n	8002c0c <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2b0f      	cmp	r3, #15
 80025e8:	d903      	bls.n	80025f2 <HAL_RCC_OscConfig+0x22>
 80025ea:	21e6      	movs	r1, #230	; 0xe6
 80025ec:	4897      	ldr	r0, [pc, #604]	; (800284c <HAL_RCC_OscConfig+0x27c>)
 80025ee:	f7fe fd91 	bl	8001114 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 8088 	beq.w	8002710 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00d      	beq.n	8002624 <HAL_RCC_OscConfig+0x54>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002610:	d008      	beq.n	8002624 <HAL_RCC_OscConfig+0x54>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800261a:	d003      	beq.n	8002624 <HAL_RCC_OscConfig+0x54>
 800261c:	21eb      	movs	r1, #235	; 0xeb
 800261e:	488b      	ldr	r0, [pc, #556]	; (800284c <HAL_RCC_OscConfig+0x27c>)
 8002620:	f7fe fd78 	bl	8001114 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002624:	4b8a      	ldr	r3, [pc, #552]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 030c 	and.w	r3, r3, #12
 800262c:	2b04      	cmp	r3, #4
 800262e:	d00c      	beq.n	800264a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002630:	4b87      	ldr	r3, [pc, #540]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002638:	2b08      	cmp	r3, #8
 800263a:	d112      	bne.n	8002662 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800263c:	4b84      	ldr	r3, [pc, #528]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002644:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002648:	d10b      	bne.n	8002662 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800264a:	4b81      	ldr	r3, [pc, #516]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d05b      	beq.n	800270e <HAL_RCC_OscConfig+0x13e>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d157      	bne.n	800270e <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e2d4      	b.n	8002c0c <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800266a:	d106      	bne.n	800267a <HAL_RCC_OscConfig+0xaa>
 800266c:	4b78      	ldr	r3, [pc, #480]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a77      	ldr	r2, [pc, #476]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 8002672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002676:	6013      	str	r3, [r2, #0]
 8002678:	e01d      	b.n	80026b6 <HAL_RCC_OscConfig+0xe6>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002682:	d10c      	bne.n	800269e <HAL_RCC_OscConfig+0xce>
 8002684:	4b72      	ldr	r3, [pc, #456]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a71      	ldr	r2, [pc, #452]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 800268a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800268e:	6013      	str	r3, [r2, #0]
 8002690:	4b6f      	ldr	r3, [pc, #444]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a6e      	ldr	r2, [pc, #440]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 8002696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	e00b      	b.n	80026b6 <HAL_RCC_OscConfig+0xe6>
 800269e:	4b6c      	ldr	r3, [pc, #432]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a6b      	ldr	r2, [pc, #428]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 80026a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	4b69      	ldr	r3, [pc, #420]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a68      	ldr	r2, [pc, #416]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 80026b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026b4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d013      	beq.n	80026e6 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026be:	f7fe ff3f 	bl	8001540 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026c6:	f7fe ff3b 	bl	8001540 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b64      	cmp	r3, #100	; 0x64
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e299      	b.n	8002c0c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d8:	4b5d      	ldr	r3, [pc, #372]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0f0      	beq.n	80026c6 <HAL_RCC_OscConfig+0xf6>
 80026e4:	e014      	b.n	8002710 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e6:	f7fe ff2b 	bl	8001540 <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ee:	f7fe ff27 	bl	8001540 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b64      	cmp	r3, #100	; 0x64
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e285      	b.n	8002c0c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002700:	4b53      	ldr	r3, [pc, #332]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1f0      	bne.n	80026ee <HAL_RCC_OscConfig+0x11e>
 800270c:	e000      	b.n	8002710 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800270e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d079      	beq.n	8002810 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d008      	beq.n	8002736 <HAL_RCC_OscConfig+0x166>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d004      	beq.n	8002736 <HAL_RCC_OscConfig+0x166>
 800272c:	f240 111d 	movw	r1, #285	; 0x11d
 8002730:	4846      	ldr	r0, [pc, #280]	; (800284c <HAL_RCC_OscConfig+0x27c>)
 8002732:	f7fe fcef 	bl	8001114 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	2b1f      	cmp	r3, #31
 800273c:	d904      	bls.n	8002748 <HAL_RCC_OscConfig+0x178>
 800273e:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8002742:	4842      	ldr	r0, [pc, #264]	; (800284c <HAL_RCC_OscConfig+0x27c>)
 8002744:	f7fe fce6 	bl	8001114 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002748:	4b41      	ldr	r3, [pc, #260]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 030c 	and.w	r3, r3, #12
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00b      	beq.n	800276c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002754:	4b3e      	ldr	r3, [pc, #248]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800275c:	2b08      	cmp	r3, #8
 800275e:	d11c      	bne.n	800279a <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002760:	4b3b      	ldr	r3, [pc, #236]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d116      	bne.n	800279a <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800276c:	4b38      	ldr	r3, [pc, #224]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <HAL_RCC_OscConfig+0x1b4>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d001      	beq.n	8002784 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e243      	b.n	8002c0c <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002784:	4b32      	ldr	r3, [pc, #200]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	492f      	ldr	r1, [pc, #188]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 8002794:	4313      	orrs	r3, r2
 8002796:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002798:	e03a      	b.n	8002810 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d020      	beq.n	80027e4 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027a2:	4b2c      	ldr	r3, [pc, #176]	; (8002854 <HAL_RCC_OscConfig+0x284>)
 80027a4:	2201      	movs	r2, #1
 80027a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a8:	f7fe feca 	bl	8001540 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027b0:	f7fe fec6 	bl	8001540 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e224      	b.n	8002c0c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c2:	4b23      	ldr	r3, [pc, #140]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0f0      	beq.n	80027b0 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ce:	4b20      	ldr	r3, [pc, #128]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	491c      	ldr	r1, [pc, #112]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]
 80027e2:	e015      	b.n	8002810 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027e4:	4b1b      	ldr	r3, [pc, #108]	; (8002854 <HAL_RCC_OscConfig+0x284>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ea:	f7fe fea9 	bl	8001540 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027f2:	f7fe fea5 	bl	8001540 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e203      	b.n	8002c0c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002804:	4b12      	ldr	r3, [pc, #72]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1f0      	bne.n	80027f2 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0308 	and.w	r3, r3, #8
 8002818:	2b00      	cmp	r3, #0
 800281a:	d045      	beq.n	80028a8 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d008      	beq.n	8002836 <HAL_RCC_OscConfig+0x266>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d004      	beq.n	8002836 <HAL_RCC_OscConfig+0x266>
 800282c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002830:	4806      	ldr	r0, [pc, #24]	; (800284c <HAL_RCC_OscConfig+0x27c>)
 8002832:	f7fe fc6f 	bl	8001114 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d01e      	beq.n	800287c <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800283e:	4b06      	ldr	r3, [pc, #24]	; (8002858 <HAL_RCC_OscConfig+0x288>)
 8002840:	2201      	movs	r2, #1
 8002842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002844:	f7fe fe7c 	bl	8001540 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800284a:	e010      	b.n	800286e <HAL_RCC_OscConfig+0x29e>
 800284c:	0800914c 	.word	0x0800914c
 8002850:	40023800 	.word	0x40023800
 8002854:	42470000 	.word	0x42470000
 8002858:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800285c:	f7fe fe70 	bl	8001540 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e1ce      	b.n	8002c0c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800286e:	4b5e      	ldr	r3, [pc, #376]	; (80029e8 <HAL_RCC_OscConfig+0x418>)
 8002870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0f0      	beq.n	800285c <HAL_RCC_OscConfig+0x28c>
 800287a:	e015      	b.n	80028a8 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800287c:	4b5b      	ldr	r3, [pc, #364]	; (80029ec <HAL_RCC_OscConfig+0x41c>)
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002882:	f7fe fe5d 	bl	8001540 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800288a:	f7fe fe59 	bl	8001540 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e1b7      	b.n	8002c0c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800289c:	4b52      	ldr	r3, [pc, #328]	; (80029e8 <HAL_RCC_OscConfig+0x418>)
 800289e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1f0      	bne.n	800288a <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 80b0 	beq.w	8002a16 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028b6:	2300      	movs	r3, #0
 80028b8:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00c      	beq.n	80028dc <HAL_RCC_OscConfig+0x30c>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d008      	beq.n	80028dc <HAL_RCC_OscConfig+0x30c>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	2b05      	cmp	r3, #5
 80028d0:	d004      	beq.n	80028dc <HAL_RCC_OscConfig+0x30c>
 80028d2:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80028d6:	4846      	ldr	r0, [pc, #280]	; (80029f0 <HAL_RCC_OscConfig+0x420>)
 80028d8:	f7fe fc1c 	bl	8001114 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028dc:	4b42      	ldr	r3, [pc, #264]	; (80029e8 <HAL_RCC_OscConfig+0x418>)
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10f      	bne.n	8002908 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028e8:	2300      	movs	r3, #0
 80028ea:	60bb      	str	r3, [r7, #8]
 80028ec:	4b3e      	ldr	r3, [pc, #248]	; (80029e8 <HAL_RCC_OscConfig+0x418>)
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	4a3d      	ldr	r2, [pc, #244]	; (80029e8 <HAL_RCC_OscConfig+0x418>)
 80028f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f6:	6413      	str	r3, [r2, #64]	; 0x40
 80028f8:	4b3b      	ldr	r3, [pc, #236]	; (80029e8 <HAL_RCC_OscConfig+0x418>)
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002904:	2301      	movs	r3, #1
 8002906:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002908:	4b3a      	ldr	r3, [pc, #232]	; (80029f4 <HAL_RCC_OscConfig+0x424>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002910:	2b00      	cmp	r3, #0
 8002912:	d118      	bne.n	8002946 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002914:	4b37      	ldr	r3, [pc, #220]	; (80029f4 <HAL_RCC_OscConfig+0x424>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a36      	ldr	r2, [pc, #216]	; (80029f4 <HAL_RCC_OscConfig+0x424>)
 800291a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800291e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002920:	f7fe fe0e 	bl	8001540 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002928:	f7fe fe0a 	bl	8001540 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e168      	b.n	8002c0c <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293a:	4b2e      	ldr	r3, [pc, #184]	; (80029f4 <HAL_RCC_OscConfig+0x424>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f0      	beq.n	8002928 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d106      	bne.n	800295c <HAL_RCC_OscConfig+0x38c>
 800294e:	4b26      	ldr	r3, [pc, #152]	; (80029e8 <HAL_RCC_OscConfig+0x418>)
 8002950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002952:	4a25      	ldr	r2, [pc, #148]	; (80029e8 <HAL_RCC_OscConfig+0x418>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	6713      	str	r3, [r2, #112]	; 0x70
 800295a:	e01c      	b.n	8002996 <HAL_RCC_OscConfig+0x3c6>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	2b05      	cmp	r3, #5
 8002962:	d10c      	bne.n	800297e <HAL_RCC_OscConfig+0x3ae>
 8002964:	4b20      	ldr	r3, [pc, #128]	; (80029e8 <HAL_RCC_OscConfig+0x418>)
 8002966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002968:	4a1f      	ldr	r2, [pc, #124]	; (80029e8 <HAL_RCC_OscConfig+0x418>)
 800296a:	f043 0304 	orr.w	r3, r3, #4
 800296e:	6713      	str	r3, [r2, #112]	; 0x70
 8002970:	4b1d      	ldr	r3, [pc, #116]	; (80029e8 <HAL_RCC_OscConfig+0x418>)
 8002972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002974:	4a1c      	ldr	r2, [pc, #112]	; (80029e8 <HAL_RCC_OscConfig+0x418>)
 8002976:	f043 0301 	orr.w	r3, r3, #1
 800297a:	6713      	str	r3, [r2, #112]	; 0x70
 800297c:	e00b      	b.n	8002996 <HAL_RCC_OscConfig+0x3c6>
 800297e:	4b1a      	ldr	r3, [pc, #104]	; (80029e8 <HAL_RCC_OscConfig+0x418>)
 8002980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002982:	4a19      	ldr	r2, [pc, #100]	; (80029e8 <HAL_RCC_OscConfig+0x418>)
 8002984:	f023 0301 	bic.w	r3, r3, #1
 8002988:	6713      	str	r3, [r2, #112]	; 0x70
 800298a:	4b17      	ldr	r3, [pc, #92]	; (80029e8 <HAL_RCC_OscConfig+0x418>)
 800298c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298e:	4a16      	ldr	r2, [pc, #88]	; (80029e8 <HAL_RCC_OscConfig+0x418>)
 8002990:	f023 0304 	bic.w	r3, r3, #4
 8002994:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d015      	beq.n	80029ca <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299e:	f7fe fdcf 	bl	8001540 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a4:	e00a      	b.n	80029bc <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029a6:	f7fe fdcb 	bl	8001540 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e127      	b.n	8002c0c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029bc:	4b0a      	ldr	r3, [pc, #40]	; (80029e8 <HAL_RCC_OscConfig+0x418>)
 80029be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0ee      	beq.n	80029a6 <HAL_RCC_OscConfig+0x3d6>
 80029c8:	e01c      	b.n	8002a04 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ca:	f7fe fdb9 	bl	8001540 <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d0:	e012      	b.n	80029f8 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d2:	f7fe fdb5 	bl	8001540 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d909      	bls.n	80029f8 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e111      	b.n	8002c0c <HAL_RCC_OscConfig+0x63c>
 80029e8:	40023800 	.word	0x40023800
 80029ec:	42470e80 	.word	0x42470e80
 80029f0:	0800914c 	.word	0x0800914c
 80029f4:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029f8:	4b86      	ldr	r3, [pc, #536]	; (8002c14 <HAL_RCC_OscConfig+0x644>)
 80029fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1e6      	bne.n	80029d2 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a04:	7dfb      	ldrb	r3, [r7, #23]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d105      	bne.n	8002a16 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a0a:	4b82      	ldr	r3, [pc, #520]	; (8002c14 <HAL_RCC_OscConfig+0x644>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	4a81      	ldr	r2, [pc, #516]	; (8002c14 <HAL_RCC_OscConfig+0x644>)
 8002a10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a14:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00c      	beq.n	8002a38 <HAL_RCC_OscConfig+0x468>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d008      	beq.n	8002a38 <HAL_RCC_OscConfig+0x468>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d004      	beq.n	8002a38 <HAL_RCC_OscConfig+0x468>
 8002a2e:	f240 11cd 	movw	r1, #461	; 0x1cd
 8002a32:	4879      	ldr	r0, [pc, #484]	; (8002c18 <HAL_RCC_OscConfig+0x648>)
 8002a34:	f7fe fb6e 	bl	8001114 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 80e4 	beq.w	8002c0a <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a42:	4b74      	ldr	r3, [pc, #464]	; (8002c14 <HAL_RCC_OscConfig+0x644>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 030c 	and.w	r3, r3, #12
 8002a4a:	2b08      	cmp	r3, #8
 8002a4c:	f000 80a5 	beq.w	8002b9a <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	f040 8089 	bne.w	8002b6c <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d009      	beq.n	8002a76 <HAL_RCC_OscConfig+0x4a6>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a6a:	d004      	beq.n	8002a76 <HAL_RCC_OscConfig+0x4a6>
 8002a6c:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8002a70:	4869      	ldr	r0, [pc, #420]	; (8002c18 <HAL_RCC_OscConfig+0x648>)
 8002a72:	f7fe fb4f 	bl	8001114 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	2b3f      	cmp	r3, #63	; 0x3f
 8002a7c:	d904      	bls.n	8002a88 <HAL_RCC_OscConfig+0x4b8>
 8002a7e:	f240 11d7 	movw	r1, #471	; 0x1d7
 8002a82:	4865      	ldr	r0, [pc, #404]	; (8002c18 <HAL_RCC_OscConfig+0x648>)
 8002a84:	f7fe fb46 	bl	8001114 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	2b31      	cmp	r3, #49	; 0x31
 8002a8e:	d904      	bls.n	8002a9a <HAL_RCC_OscConfig+0x4ca>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8002a98:	d904      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x4d4>
 8002a9a:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8002a9e:	485e      	ldr	r0, [pc, #376]	; (8002c18 <HAL_RCC_OscConfig+0x648>)
 8002aa0:	f7fe fb38 	bl	8001114 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d010      	beq.n	8002ace <HAL_RCC_OscConfig+0x4fe>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab0:	2b04      	cmp	r3, #4
 8002ab2:	d00c      	beq.n	8002ace <HAL_RCC_OscConfig+0x4fe>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab8:	2b06      	cmp	r3, #6
 8002aba:	d008      	beq.n	8002ace <HAL_RCC_OscConfig+0x4fe>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	d004      	beq.n	8002ace <HAL_RCC_OscConfig+0x4fe>
 8002ac4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8002ac8:	4853      	ldr	r0, [pc, #332]	; (8002c18 <HAL_RCC_OscConfig+0x648>)
 8002aca:	f7fe fb23 	bl	8001114 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d903      	bls.n	8002ade <HAL_RCC_OscConfig+0x50e>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ada:	2b0f      	cmp	r3, #15
 8002adc:	d904      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x518>
 8002ade:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8002ae2:	484d      	ldr	r0, [pc, #308]	; (8002c18 <HAL_RCC_OscConfig+0x648>)
 8002ae4:	f7fe fb16 	bl	8001114 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae8:	4b4c      	ldr	r3, [pc, #304]	; (8002c1c <HAL_RCC_OscConfig+0x64c>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aee:	f7fe fd27 	bl	8001540 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af6:	f7fe fd23 	bl	8001540 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e081      	b.n	8002c0c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b08:	4b42      	ldr	r3, [pc, #264]	; (8002c14 <HAL_RCC_OscConfig+0x644>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1f0      	bne.n	8002af6 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	69da      	ldr	r2, [r3, #28]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	019b      	lsls	r3, r3, #6
 8002b24:	431a      	orrs	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2a:	085b      	lsrs	r3, r3, #1
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	041b      	lsls	r3, r3, #16
 8002b30:	431a      	orrs	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b36:	061b      	lsls	r3, r3, #24
 8002b38:	4936      	ldr	r1, [pc, #216]	; (8002c14 <HAL_RCC_OscConfig+0x644>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b3e:	4b37      	ldr	r3, [pc, #220]	; (8002c1c <HAL_RCC_OscConfig+0x64c>)
 8002b40:	2201      	movs	r2, #1
 8002b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b44:	f7fe fcfc 	bl	8001540 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b4c:	f7fe fcf8 	bl	8001540 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e056      	b.n	8002c0c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b5e:	4b2d      	ldr	r3, [pc, #180]	; (8002c14 <HAL_RCC_OscConfig+0x644>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0f0      	beq.n	8002b4c <HAL_RCC_OscConfig+0x57c>
 8002b6a:	e04e      	b.n	8002c0a <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6c:	4b2b      	ldr	r3, [pc, #172]	; (8002c1c <HAL_RCC_OscConfig+0x64c>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b72:	f7fe fce5 	bl	8001540 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b7a:	f7fe fce1 	bl	8001540 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e03f      	b.n	8002c0c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8c:	4b21      	ldr	r3, [pc, #132]	; (8002c14 <HAL_RCC_OscConfig+0x644>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1f0      	bne.n	8002b7a <HAL_RCC_OscConfig+0x5aa>
 8002b98:	e037      	b.n	8002c0a <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d101      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e032      	b.n	8002c0c <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ba6:	4b1b      	ldr	r3, [pc, #108]	; (8002c14 <HAL_RCC_OscConfig+0x644>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d028      	beq.n	8002c06 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d121      	bne.n	8002c06 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d11a      	bne.n	8002c06 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bdc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d111      	bne.n	8002c06 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bec:	085b      	lsrs	r3, r3, #1
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d107      	bne.n	8002c06 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c00:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d001      	beq.n	8002c0a <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40023800 	.word	0x40023800
 8002c18:	0800914c 	.word	0x0800914c
 8002c1c:	42470060 	.word	0x42470060

08002c20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e18c      	b.n	8002f4e <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x24>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b0f      	cmp	r3, #15
 8002c42:	d904      	bls.n	8002c4e <HAL_RCC_ClockConfig+0x2e>
 8002c44:	f240 215a 	movw	r1, #602	; 0x25a
 8002c48:	4887      	ldr	r0, [pc, #540]	; (8002e68 <HAL_RCC_ClockConfig+0x248>)
 8002c4a:	f7fe fa63 	bl	8001114 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d031      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x98>
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d02e      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x98>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d02b      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x98>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	2b03      	cmp	r3, #3
 8002c64:	d028      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x98>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	2b04      	cmp	r3, #4
 8002c6a:	d025      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x98>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	2b05      	cmp	r3, #5
 8002c70:	d022      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x98>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b06      	cmp	r3, #6
 8002c76:	d01f      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x98>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	2b07      	cmp	r3, #7
 8002c7c:	d01c      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x98>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d019      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x98>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	2b09      	cmp	r3, #9
 8002c88:	d016      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x98>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2b0a      	cmp	r3, #10
 8002c8e:	d013      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x98>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	2b0b      	cmp	r3, #11
 8002c94:	d010      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x98>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b0c      	cmp	r3, #12
 8002c9a:	d00d      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x98>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	2b0d      	cmp	r3, #13
 8002ca0:	d00a      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x98>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	2b0e      	cmp	r3, #14
 8002ca6:	d007      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x98>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	2b0f      	cmp	r3, #15
 8002cac:	d004      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x98>
 8002cae:	f240 215b 	movw	r1, #603	; 0x25b
 8002cb2:	486d      	ldr	r0, [pc, #436]	; (8002e68 <HAL_RCC_ClockConfig+0x248>)
 8002cb4:	f7fe fa2e 	bl	8001114 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb8:	4b6c      	ldr	r3, [pc, #432]	; (8002e6c <HAL_RCC_ClockConfig+0x24c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 030f 	and.w	r3, r3, #15
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d90c      	bls.n	8002ce0 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc6:	4b69      	ldr	r3, [pc, #420]	; (8002e6c <HAL_RCC_ClockConfig+0x24c>)
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cce:	4b67      	ldr	r3, [pc, #412]	; (8002e6c <HAL_RCC_ClockConfig+0x24c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d001      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e136      	b.n	8002f4e <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d049      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d005      	beq.n	8002d04 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cf8:	4b5d      	ldr	r3, [pc, #372]	; (8002e70 <HAL_RCC_ClockConfig+0x250>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	4a5c      	ldr	r2, [pc, #368]	; (8002e70 <HAL_RCC_ClockConfig+0x250>)
 8002cfe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0308 	and.w	r3, r3, #8
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d10:	4b57      	ldr	r3, [pc, #348]	; (8002e70 <HAL_RCC_ClockConfig+0x250>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	4a56      	ldr	r2, [pc, #344]	; (8002e70 <HAL_RCC_ClockConfig+0x250>)
 8002d16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d024      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x14e>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2b80      	cmp	r3, #128	; 0x80
 8002d2a:	d020      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x14e>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	2b90      	cmp	r3, #144	; 0x90
 8002d32:	d01c      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x14e>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	2ba0      	cmp	r3, #160	; 0xa0
 8002d3a:	d018      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x14e>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	2bb0      	cmp	r3, #176	; 0xb0
 8002d42:	d014      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x14e>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	2bc0      	cmp	r3, #192	; 0xc0
 8002d4a:	d010      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x14e>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	2bd0      	cmp	r3, #208	; 0xd0
 8002d52:	d00c      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x14e>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	2be0      	cmp	r3, #224	; 0xe0
 8002d5a:	d008      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x14e>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	2bf0      	cmp	r3, #240	; 0xf0
 8002d62:	d004      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x14e>
 8002d64:	f240 217e 	movw	r1, #638	; 0x27e
 8002d68:	483f      	ldr	r0, [pc, #252]	; (8002e68 <HAL_RCC_ClockConfig+0x248>)
 8002d6a:	f7fe f9d3 	bl	8001114 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d6e:	4b40      	ldr	r3, [pc, #256]	; (8002e70 <HAL_RCC_ClockConfig+0x250>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	493d      	ldr	r1, [pc, #244]	; (8002e70 <HAL_RCC_ClockConfig+0x250>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d059      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d010      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x196>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d00c      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x196>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d008      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x196>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d004      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x196>
 8002dac:	f240 2185 	movw	r1, #645	; 0x285
 8002db0:	482d      	ldr	r0, [pc, #180]	; (8002e68 <HAL_RCC_ClockConfig+0x248>)
 8002db2:	f7fe f9af 	bl	8001114 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d107      	bne.n	8002dce <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dbe:	4b2c      	ldr	r3, [pc, #176]	; (8002e70 <HAL_RCC_ClockConfig+0x250>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d119      	bne.n	8002dfe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e0bf      	b.n	8002f4e <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d003      	beq.n	8002dde <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dda:	2b03      	cmp	r3, #3
 8002ddc:	d107      	bne.n	8002dee <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dde:	4b24      	ldr	r3, [pc, #144]	; (8002e70 <HAL_RCC_ClockConfig+0x250>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d109      	bne.n	8002dfe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e0af      	b.n	8002f4e <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dee:	4b20      	ldr	r3, [pc, #128]	; (8002e70 <HAL_RCC_ClockConfig+0x250>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e0a7      	b.n	8002f4e <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dfe:	4b1c      	ldr	r3, [pc, #112]	; (8002e70 <HAL_RCC_ClockConfig+0x250>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f023 0203 	bic.w	r2, r3, #3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	4919      	ldr	r1, [pc, #100]	; (8002e70 <HAL_RCC_ClockConfig+0x250>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e10:	f7fe fb96 	bl	8001540 <HAL_GetTick>
 8002e14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e16:	e00a      	b.n	8002e2e <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e18:	f7fe fb92 	bl	8001540 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e08f      	b.n	8002f4e <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2e:	4b10      	ldr	r3, [pc, #64]	; (8002e70 <HAL_RCC_ClockConfig+0x250>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 020c 	and.w	r2, r3, #12
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d1eb      	bne.n	8002e18 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e40:	4b0a      	ldr	r3, [pc, #40]	; (8002e6c <HAL_RCC_ClockConfig+0x24c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 030f 	and.w	r3, r3, #15
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d212      	bcs.n	8002e74 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e4e:	4b07      	ldr	r3, [pc, #28]	; (8002e6c <HAL_RCC_ClockConfig+0x24c>)
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e56:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <HAL_RCC_ClockConfig+0x24c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d007      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e072      	b.n	8002f4e <HAL_RCC_ClockConfig+0x32e>
 8002e68:	0800914c 	.word	0x0800914c
 8002e6c:	40023c00 	.word	0x40023c00
 8002e70:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d025      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d018      	beq.n	8002eba <HAL_RCC_ClockConfig+0x29a>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e90:	d013      	beq.n	8002eba <HAL_RCC_ClockConfig+0x29a>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002e9a:	d00e      	beq.n	8002eba <HAL_RCC_ClockConfig+0x29a>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002ea4:	d009      	beq.n	8002eba <HAL_RCC_ClockConfig+0x29a>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002eae:	d004      	beq.n	8002eba <HAL_RCC_ClockConfig+0x29a>
 8002eb0:	f240 21c3 	movw	r1, #707	; 0x2c3
 8002eb4:	4828      	ldr	r0, [pc, #160]	; (8002f58 <HAL_RCC_ClockConfig+0x338>)
 8002eb6:	f7fe f92d 	bl	8001114 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eba:	4b28      	ldr	r3, [pc, #160]	; (8002f5c <HAL_RCC_ClockConfig+0x33c>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	4925      	ldr	r1, [pc, #148]	; (8002f5c <HAL_RCC_ClockConfig+0x33c>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0308 	and.w	r3, r3, #8
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d026      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d018      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x2f2>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee8:	d013      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x2f2>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002ef2:	d00e      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x2f2>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002efc:	d009      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x2f2>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002f06:	d004      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x2f2>
 8002f08:	f240 21ca 	movw	r1, #714	; 0x2ca
 8002f0c:	4812      	ldr	r0, [pc, #72]	; (8002f58 <HAL_RCC_ClockConfig+0x338>)
 8002f0e:	f7fe f901 	bl	8001114 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f12:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <HAL_RCC_ClockConfig+0x33c>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	490e      	ldr	r1, [pc, #56]	; (8002f5c <HAL_RCC_ClockConfig+0x33c>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f26:	f000 f821 	bl	8002f6c <HAL_RCC_GetSysClockFreq>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <HAL_RCC_ClockConfig+0x33c>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	091b      	lsrs	r3, r3, #4
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	490a      	ldr	r1, [pc, #40]	; (8002f60 <HAL_RCC_ClockConfig+0x340>)
 8002f38:	5ccb      	ldrb	r3, [r1, r3]
 8002f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3e:	4a09      	ldr	r2, [pc, #36]	; (8002f64 <HAL_RCC_ClockConfig+0x344>)
 8002f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f42:	4b09      	ldr	r3, [pc, #36]	; (8002f68 <HAL_RCC_ClockConfig+0x348>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fe f9f6 	bl	8001338 <HAL_InitTick>

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	0800914c 	.word	0x0800914c
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	080092e0 	.word	0x080092e0
 8002f64:	20000000 	.word	0x20000000
 8002f68:	20000004 	.word	0x20000004

08002f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f70:	b094      	sub	sp, #80	; 0x50
 8002f72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	647b      	str	r3, [r7, #68]	; 0x44
 8002f78:	2300      	movs	r3, #0
 8002f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f84:	4b79      	ldr	r3, [pc, #484]	; (800316c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 030c 	and.w	r3, r3, #12
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d00d      	beq.n	8002fac <HAL_RCC_GetSysClockFreq+0x40>
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	f200 80e1 	bhi.w	8003158 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d002      	beq.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x34>
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	d003      	beq.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f9e:	e0db      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fa0:	4b73      	ldr	r3, [pc, #460]	; (8003170 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fa2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002fa4:	e0db      	b.n	800315e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fa6:	4b73      	ldr	r3, [pc, #460]	; (8003174 <HAL_RCC_GetSysClockFreq+0x208>)
 8002fa8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002faa:	e0d8      	b.n	800315e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fac:	4b6f      	ldr	r3, [pc, #444]	; (800316c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fb4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fb6:	4b6d      	ldr	r3, [pc, #436]	; (800316c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d063      	beq.n	800308a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fc2:	4b6a      	ldr	r3, [pc, #424]	; (800316c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	099b      	lsrs	r3, r3, #6
 8002fc8:	2200      	movs	r2, #0
 8002fca:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fcc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fd4:	633b      	str	r3, [r7, #48]	; 0x30
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8002fda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002fde:	4622      	mov	r2, r4
 8002fe0:	462b      	mov	r3, r5
 8002fe2:	f04f 0000 	mov.w	r0, #0
 8002fe6:	f04f 0100 	mov.w	r1, #0
 8002fea:	0159      	lsls	r1, r3, #5
 8002fec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ff0:	0150      	lsls	r0, r2, #5
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	4621      	mov	r1, r4
 8002ff8:	1a51      	subs	r1, r2, r1
 8002ffa:	6139      	str	r1, [r7, #16]
 8002ffc:	4629      	mov	r1, r5
 8002ffe:	eb63 0301 	sbc.w	r3, r3, r1
 8003002:	617b      	str	r3, [r7, #20]
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003010:	4659      	mov	r1, fp
 8003012:	018b      	lsls	r3, r1, #6
 8003014:	4651      	mov	r1, sl
 8003016:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800301a:	4651      	mov	r1, sl
 800301c:	018a      	lsls	r2, r1, #6
 800301e:	4651      	mov	r1, sl
 8003020:	ebb2 0801 	subs.w	r8, r2, r1
 8003024:	4659      	mov	r1, fp
 8003026:	eb63 0901 	sbc.w	r9, r3, r1
 800302a:	f04f 0200 	mov.w	r2, #0
 800302e:	f04f 0300 	mov.w	r3, #0
 8003032:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003036:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800303a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800303e:	4690      	mov	r8, r2
 8003040:	4699      	mov	r9, r3
 8003042:	4623      	mov	r3, r4
 8003044:	eb18 0303 	adds.w	r3, r8, r3
 8003048:	60bb      	str	r3, [r7, #8]
 800304a:	462b      	mov	r3, r5
 800304c:	eb49 0303 	adc.w	r3, r9, r3
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	f04f 0200 	mov.w	r2, #0
 8003056:	f04f 0300 	mov.w	r3, #0
 800305a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800305e:	4629      	mov	r1, r5
 8003060:	024b      	lsls	r3, r1, #9
 8003062:	4621      	mov	r1, r4
 8003064:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003068:	4621      	mov	r1, r4
 800306a:	024a      	lsls	r2, r1, #9
 800306c:	4610      	mov	r0, r2
 800306e:	4619      	mov	r1, r3
 8003070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003072:	2200      	movs	r2, #0
 8003074:	62bb      	str	r3, [r7, #40]	; 0x28
 8003076:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003078:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800307c:	f7fd f902 	bl	8000284 <__aeabi_uldivmod>
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	4613      	mov	r3, r2
 8003086:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003088:	e058      	b.n	800313c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800308a:	4b38      	ldr	r3, [pc, #224]	; (800316c <HAL_RCC_GetSysClockFreq+0x200>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	099b      	lsrs	r3, r3, #6
 8003090:	2200      	movs	r2, #0
 8003092:	4618      	mov	r0, r3
 8003094:	4611      	mov	r1, r2
 8003096:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800309a:	623b      	str	r3, [r7, #32]
 800309c:	2300      	movs	r3, #0
 800309e:	627b      	str	r3, [r7, #36]	; 0x24
 80030a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030a4:	4642      	mov	r2, r8
 80030a6:	464b      	mov	r3, r9
 80030a8:	f04f 0000 	mov.w	r0, #0
 80030ac:	f04f 0100 	mov.w	r1, #0
 80030b0:	0159      	lsls	r1, r3, #5
 80030b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030b6:	0150      	lsls	r0, r2, #5
 80030b8:	4602      	mov	r2, r0
 80030ba:	460b      	mov	r3, r1
 80030bc:	4641      	mov	r1, r8
 80030be:	ebb2 0a01 	subs.w	sl, r2, r1
 80030c2:	4649      	mov	r1, r9
 80030c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030dc:	ebb2 040a 	subs.w	r4, r2, sl
 80030e0:	eb63 050b 	sbc.w	r5, r3, fp
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	f04f 0300 	mov.w	r3, #0
 80030ec:	00eb      	lsls	r3, r5, #3
 80030ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030f2:	00e2      	lsls	r2, r4, #3
 80030f4:	4614      	mov	r4, r2
 80030f6:	461d      	mov	r5, r3
 80030f8:	4643      	mov	r3, r8
 80030fa:	18e3      	adds	r3, r4, r3
 80030fc:	603b      	str	r3, [r7, #0]
 80030fe:	464b      	mov	r3, r9
 8003100:	eb45 0303 	adc.w	r3, r5, r3
 8003104:	607b      	str	r3, [r7, #4]
 8003106:	f04f 0200 	mov.w	r2, #0
 800310a:	f04f 0300 	mov.w	r3, #0
 800310e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003112:	4629      	mov	r1, r5
 8003114:	028b      	lsls	r3, r1, #10
 8003116:	4621      	mov	r1, r4
 8003118:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800311c:	4621      	mov	r1, r4
 800311e:	028a      	lsls	r2, r1, #10
 8003120:	4610      	mov	r0, r2
 8003122:	4619      	mov	r1, r3
 8003124:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003126:	2200      	movs	r2, #0
 8003128:	61bb      	str	r3, [r7, #24]
 800312a:	61fa      	str	r2, [r7, #28]
 800312c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003130:	f7fd f8a8 	bl	8000284 <__aeabi_uldivmod>
 8003134:	4602      	mov	r2, r0
 8003136:	460b      	mov	r3, r1
 8003138:	4613      	mov	r3, r2
 800313a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800313c:	4b0b      	ldr	r3, [pc, #44]	; (800316c <HAL_RCC_GetSysClockFreq+0x200>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	0c1b      	lsrs	r3, r3, #16
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	3301      	adds	r3, #1
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800314c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800314e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003150:	fbb2 f3f3 	udiv	r3, r2, r3
 8003154:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003156:	e002      	b.n	800315e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003158:	4b05      	ldr	r3, [pc, #20]	; (8003170 <HAL_RCC_GetSysClockFreq+0x204>)
 800315a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800315c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800315e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003160:	4618      	mov	r0, r3
 8003162:	3750      	adds	r7, #80	; 0x50
 8003164:	46bd      	mov	sp, r7
 8003166:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800316a:	bf00      	nop
 800316c:	40023800 	.word	0x40023800
 8003170:	00f42400 	.word	0x00f42400
 8003174:	007a1200 	.word	0x007a1200

08003178 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800317c:	4b03      	ldr	r3, [pc, #12]	; (800318c <HAL_RCC_GetHCLKFreq+0x14>)
 800317e:	681b      	ldr	r3, [r3, #0]
}
 8003180:	4618      	mov	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	20000000 	.word	0x20000000

08003190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003194:	f7ff fff0 	bl	8003178 <HAL_RCC_GetHCLKFreq>
 8003198:	4602      	mov	r2, r0
 800319a:	4b05      	ldr	r3, [pc, #20]	; (80031b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	0a9b      	lsrs	r3, r3, #10
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	4903      	ldr	r1, [pc, #12]	; (80031b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031a6:	5ccb      	ldrb	r3, [r1, r3]
 80031a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40023800 	.word	0x40023800
 80031b4:	080092f0 	.word	0x080092f0

080031b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031bc:	f7ff ffdc 	bl	8003178 <HAL_RCC_GetHCLKFreq>
 80031c0:	4602      	mov	r2, r0
 80031c2:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	0b5b      	lsrs	r3, r3, #13
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	4903      	ldr	r1, [pc, #12]	; (80031dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80031ce:	5ccb      	ldrb	r3, [r1, r3]
 80031d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40023800 	.word	0x40023800
 80031dc:	080092f0 	.word	0x080092f0

080031e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	220f      	movs	r2, #15
 80031ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80031f0:	4b12      	ldr	r3, [pc, #72]	; (800323c <HAL_RCC_GetClockConfig+0x5c>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f003 0203 	and.w	r2, r3, #3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80031fc:	4b0f      	ldr	r3, [pc, #60]	; (800323c <HAL_RCC_GetClockConfig+0x5c>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003208:	4b0c      	ldr	r3, [pc, #48]	; (800323c <HAL_RCC_GetClockConfig+0x5c>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003214:	4b09      	ldr	r3, [pc, #36]	; (800323c <HAL_RCC_GetClockConfig+0x5c>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	08db      	lsrs	r3, r3, #3
 800321a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003222:	4b07      	ldr	r3, [pc, #28]	; (8003240 <HAL_RCC_GetClockConfig+0x60>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 020f 	and.w	r2, r3, #15
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	601a      	str	r2, [r3, #0]
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	40023800 	.word	0x40023800
 8003240:	40023c00 	.word	0x40023c00

08003244 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e0c5      	b.n	80033e2 <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a64      	ldr	r2, [pc, #400]	; (80033ec <HAL_TIM_Base_Init+0x1a8>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d045      	beq.n	80032ec <HAL_TIM_Base_Init+0xa8>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003268:	d040      	beq.n	80032ec <HAL_TIM_Base_Init+0xa8>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a60      	ldr	r2, [pc, #384]	; (80033f0 <HAL_TIM_Base_Init+0x1ac>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d03b      	beq.n	80032ec <HAL_TIM_Base_Init+0xa8>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a5e      	ldr	r2, [pc, #376]	; (80033f4 <HAL_TIM_Base_Init+0x1b0>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d036      	beq.n	80032ec <HAL_TIM_Base_Init+0xa8>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a5d      	ldr	r2, [pc, #372]	; (80033f8 <HAL_TIM_Base_Init+0x1b4>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d031      	beq.n	80032ec <HAL_TIM_Base_Init+0xa8>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a5b      	ldr	r2, [pc, #364]	; (80033fc <HAL_TIM_Base_Init+0x1b8>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d02c      	beq.n	80032ec <HAL_TIM_Base_Init+0xa8>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a5a      	ldr	r2, [pc, #360]	; (8003400 <HAL_TIM_Base_Init+0x1bc>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d027      	beq.n	80032ec <HAL_TIM_Base_Init+0xa8>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a58      	ldr	r2, [pc, #352]	; (8003404 <HAL_TIM_Base_Init+0x1c0>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d022      	beq.n	80032ec <HAL_TIM_Base_Init+0xa8>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a57      	ldr	r2, [pc, #348]	; (8003408 <HAL_TIM_Base_Init+0x1c4>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d01d      	beq.n	80032ec <HAL_TIM_Base_Init+0xa8>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a55      	ldr	r2, [pc, #340]	; (800340c <HAL_TIM_Base_Init+0x1c8>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d018      	beq.n	80032ec <HAL_TIM_Base_Init+0xa8>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a54      	ldr	r2, [pc, #336]	; (8003410 <HAL_TIM_Base_Init+0x1cc>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d013      	beq.n	80032ec <HAL_TIM_Base_Init+0xa8>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a52      	ldr	r2, [pc, #328]	; (8003414 <HAL_TIM_Base_Init+0x1d0>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d00e      	beq.n	80032ec <HAL_TIM_Base_Init+0xa8>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a51      	ldr	r2, [pc, #324]	; (8003418 <HAL_TIM_Base_Init+0x1d4>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d009      	beq.n	80032ec <HAL_TIM_Base_Init+0xa8>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a4f      	ldr	r2, [pc, #316]	; (800341c <HAL_TIM_Base_Init+0x1d8>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d004      	beq.n	80032ec <HAL_TIM_Base_Init+0xa8>
 80032e2:	f240 1113 	movw	r1, #275	; 0x113
 80032e6:	484e      	ldr	r0, [pc, #312]	; (8003420 <HAL_TIM_Base_Init+0x1dc>)
 80032e8:	f7fd ff14 	bl	8001114 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d014      	beq.n	800331e <HAL_TIM_Base_Init+0xda>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	2b10      	cmp	r3, #16
 80032fa:	d010      	beq.n	800331e <HAL_TIM_Base_Init+0xda>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	2b20      	cmp	r3, #32
 8003302:	d00c      	beq.n	800331e <HAL_TIM_Base_Init+0xda>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	2b40      	cmp	r3, #64	; 0x40
 800330a:	d008      	beq.n	800331e <HAL_TIM_Base_Init+0xda>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2b60      	cmp	r3, #96	; 0x60
 8003312:	d004      	beq.n	800331e <HAL_TIM_Base_Init+0xda>
 8003314:	f44f 718a 	mov.w	r1, #276	; 0x114
 8003318:	4841      	ldr	r0, [pc, #260]	; (8003420 <HAL_TIM_Base_Init+0x1dc>)
 800331a:	f7fd fefb 	bl	8001114 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00e      	beq.n	8003344 <HAL_TIM_Base_Init+0x100>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800332e:	d009      	beq.n	8003344 <HAL_TIM_Base_Init+0x100>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003338:	d004      	beq.n	8003344 <HAL_TIM_Base_Init+0x100>
 800333a:	f240 1115 	movw	r1, #277	; 0x115
 800333e:	4838      	ldr	r0, [pc, #224]	; (8003420 <HAL_TIM_Base_Init+0x1dc>)
 8003340:	f7fd fee8 	bl	8001114 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d008      	beq.n	800335e <HAL_TIM_Base_Init+0x11a>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	2b80      	cmp	r3, #128	; 0x80
 8003352:	d004      	beq.n	800335e <HAL_TIM_Base_Init+0x11a>
 8003354:	f44f 718b 	mov.w	r1, #278	; 0x116
 8003358:	4831      	ldr	r0, [pc, #196]	; (8003420 <HAL_TIM_Base_Init+0x1dc>)
 800335a:	f7fd fedb 	bl	8001114 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d106      	bne.n	8003378 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f856 	bl	8003424 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3304      	adds	r3, #4
 8003388:	4619      	mov	r1, r3
 800338a:	4610      	mov	r0, r2
 800338c:	f000 fa54 	bl	8003838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40010000 	.word	0x40010000
 80033f0:	40000400 	.word	0x40000400
 80033f4:	40000800 	.word	0x40000800
 80033f8:	40000c00 	.word	0x40000c00
 80033fc:	40001000 	.word	0x40001000
 8003400:	40001400 	.word	0x40001400
 8003404:	40010400 	.word	0x40010400
 8003408:	40014000 	.word	0x40014000
 800340c:	40014400 	.word	0x40014400
 8003410:	40014800 	.word	0x40014800
 8003414:	40001800 	.word	0x40001800
 8003418:	40001c00 	.word	0x40001c00
 800341c:	40002000 	.word	0x40002000
 8003420:	08009184 	.word	0x08009184

08003424 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a51      	ldr	r2, [pc, #324]	; (800358c <HAL_TIM_Base_Start_IT+0x154>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d045      	beq.n	80034d6 <HAL_TIM_Base_Start_IT+0x9e>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003452:	d040      	beq.n	80034d6 <HAL_TIM_Base_Start_IT+0x9e>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a4d      	ldr	r2, [pc, #308]	; (8003590 <HAL_TIM_Base_Start_IT+0x158>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d03b      	beq.n	80034d6 <HAL_TIM_Base_Start_IT+0x9e>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a4c      	ldr	r2, [pc, #304]	; (8003594 <HAL_TIM_Base_Start_IT+0x15c>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d036      	beq.n	80034d6 <HAL_TIM_Base_Start_IT+0x9e>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a4a      	ldr	r2, [pc, #296]	; (8003598 <HAL_TIM_Base_Start_IT+0x160>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d031      	beq.n	80034d6 <HAL_TIM_Base_Start_IT+0x9e>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a49      	ldr	r2, [pc, #292]	; (800359c <HAL_TIM_Base_Start_IT+0x164>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d02c      	beq.n	80034d6 <HAL_TIM_Base_Start_IT+0x9e>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a47      	ldr	r2, [pc, #284]	; (80035a0 <HAL_TIM_Base_Start_IT+0x168>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d027      	beq.n	80034d6 <HAL_TIM_Base_Start_IT+0x9e>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a46      	ldr	r2, [pc, #280]	; (80035a4 <HAL_TIM_Base_Start_IT+0x16c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d022      	beq.n	80034d6 <HAL_TIM_Base_Start_IT+0x9e>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a44      	ldr	r2, [pc, #272]	; (80035a8 <HAL_TIM_Base_Start_IT+0x170>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d01d      	beq.n	80034d6 <HAL_TIM_Base_Start_IT+0x9e>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a43      	ldr	r2, [pc, #268]	; (80035ac <HAL_TIM_Base_Start_IT+0x174>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d018      	beq.n	80034d6 <HAL_TIM_Base_Start_IT+0x9e>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a41      	ldr	r2, [pc, #260]	; (80035b0 <HAL_TIM_Base_Start_IT+0x178>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d013      	beq.n	80034d6 <HAL_TIM_Base_Start_IT+0x9e>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a40      	ldr	r2, [pc, #256]	; (80035b4 <HAL_TIM_Base_Start_IT+0x17c>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d00e      	beq.n	80034d6 <HAL_TIM_Base_Start_IT+0x9e>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a3e      	ldr	r2, [pc, #248]	; (80035b8 <HAL_TIM_Base_Start_IT+0x180>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d009      	beq.n	80034d6 <HAL_TIM_Base_Start_IT+0x9e>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a3d      	ldr	r2, [pc, #244]	; (80035bc <HAL_TIM_Base_Start_IT+0x184>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d004      	beq.n	80034d6 <HAL_TIM_Base_Start_IT+0x9e>
 80034cc:	f240 11cf 	movw	r1, #463	; 0x1cf
 80034d0:	483b      	ldr	r0, [pc, #236]	; (80035c0 <HAL_TIM_Base_Start_IT+0x188>)
 80034d2:	f7fd fe1f 	bl	8001114 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d001      	beq.n	80034e6 <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e04e      	b.n	8003584 <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2202      	movs	r2, #2
 80034ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68da      	ldr	r2, [r3, #12]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f042 0201 	orr.w	r2, r2, #1
 80034fc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a22      	ldr	r2, [pc, #136]	; (800358c <HAL_TIM_Base_Start_IT+0x154>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d022      	beq.n	800354e <HAL_TIM_Base_Start_IT+0x116>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003510:	d01d      	beq.n	800354e <HAL_TIM_Base_Start_IT+0x116>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a1e      	ldr	r2, [pc, #120]	; (8003590 <HAL_TIM_Base_Start_IT+0x158>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d018      	beq.n	800354e <HAL_TIM_Base_Start_IT+0x116>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a1c      	ldr	r2, [pc, #112]	; (8003594 <HAL_TIM_Base_Start_IT+0x15c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d013      	beq.n	800354e <HAL_TIM_Base_Start_IT+0x116>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a1b      	ldr	r2, [pc, #108]	; (8003598 <HAL_TIM_Base_Start_IT+0x160>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d00e      	beq.n	800354e <HAL_TIM_Base_Start_IT+0x116>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a1b      	ldr	r2, [pc, #108]	; (80035a4 <HAL_TIM_Base_Start_IT+0x16c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d009      	beq.n	800354e <HAL_TIM_Base_Start_IT+0x116>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a1a      	ldr	r2, [pc, #104]	; (80035a8 <HAL_TIM_Base_Start_IT+0x170>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d004      	beq.n	800354e <HAL_TIM_Base_Start_IT+0x116>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a1a      	ldr	r2, [pc, #104]	; (80035b4 <HAL_TIM_Base_Start_IT+0x17c>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d111      	bne.n	8003572 <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2b06      	cmp	r3, #6
 800355e:	d010      	beq.n	8003582 <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0201 	orr.w	r2, r2, #1
 800356e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003570:	e007      	b.n	8003582 <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f042 0201 	orr.w	r2, r2, #1
 8003580:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40010000 	.word	0x40010000
 8003590:	40000400 	.word	0x40000400
 8003594:	40000800 	.word	0x40000800
 8003598:	40000c00 	.word	0x40000c00
 800359c:	40001000 	.word	0x40001000
 80035a0:	40001400 	.word	0x40001400
 80035a4:	40010400 	.word	0x40010400
 80035a8:	40014000 	.word	0x40014000
 80035ac:	40014400 	.word	0x40014400
 80035b0:	40014800 	.word	0x40014800
 80035b4:	40001800 	.word	0x40001800
 80035b8:	40001c00 	.word	0x40001c00
 80035bc:	40002000 	.word	0x40002000
 80035c0:	08009184 	.word	0x08009184

080035c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d122      	bne.n	8003620 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d11b      	bne.n	8003620 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f06f 0202 	mvn.w	r2, #2
 80035f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f8f8 	bl	80037fc <HAL_TIM_IC_CaptureCallback>
 800360c:	e005      	b.n	800361a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f8ea 	bl	80037e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f8fb 	bl	8003810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f003 0304 	and.w	r3, r3, #4
 800362a:	2b04      	cmp	r3, #4
 800362c:	d122      	bne.n	8003674 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b04      	cmp	r3, #4
 800363a:	d11b      	bne.n	8003674 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f06f 0204 	mvn.w	r2, #4
 8003644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2202      	movs	r2, #2
 800364a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f8ce 	bl	80037fc <HAL_TIM_IC_CaptureCallback>
 8003660:	e005      	b.n	800366e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f8c0 	bl	80037e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f8d1 	bl	8003810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b08      	cmp	r3, #8
 8003680:	d122      	bne.n	80036c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f003 0308 	and.w	r3, r3, #8
 800368c:	2b08      	cmp	r3, #8
 800368e:	d11b      	bne.n	80036c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f06f 0208 	mvn.w	r2, #8
 8003698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2204      	movs	r2, #4
 800369e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f8a4 	bl	80037fc <HAL_TIM_IC_CaptureCallback>
 80036b4:	e005      	b.n	80036c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f896 	bl	80037e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f8a7 	bl	8003810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f003 0310 	and.w	r3, r3, #16
 80036d2:	2b10      	cmp	r3, #16
 80036d4:	d122      	bne.n	800371c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f003 0310 	and.w	r3, r3, #16
 80036e0:	2b10      	cmp	r3, #16
 80036e2:	d11b      	bne.n	800371c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f06f 0210 	mvn.w	r2, #16
 80036ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2208      	movs	r2, #8
 80036f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f87a 	bl	80037fc <HAL_TIM_IC_CaptureCallback>
 8003708:	e005      	b.n	8003716 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f86c 	bl	80037e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f87d 	bl	8003810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b01      	cmp	r3, #1
 8003728:	d10e      	bne.n	8003748 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b01      	cmp	r3, #1
 8003736:	d107      	bne.n	8003748 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f06f 0201 	mvn.w	r2, #1
 8003740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f846 	bl	80037d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003752:	2b80      	cmp	r3, #128	; 0x80
 8003754:	d10e      	bne.n	8003774 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003760:	2b80      	cmp	r3, #128	; 0x80
 8003762:	d107      	bne.n	8003774 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800376c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f90c 	bl	800398c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377e:	2b40      	cmp	r3, #64	; 0x40
 8003780:	d10e      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378c:	2b40      	cmp	r3, #64	; 0x40
 800378e:	d107      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f842 	bl	8003824 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	f003 0320 	and.w	r3, r3, #32
 80037aa:	2b20      	cmp	r3, #32
 80037ac:	d10e      	bne.n	80037cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f003 0320 	and.w	r3, r3, #32
 80037b8:	2b20      	cmp	r3, #32
 80037ba:	d107      	bne.n	80037cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f06f 0220 	mvn.w	r2, #32
 80037c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f8d6 	bl	8003978 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037cc:	bf00      	nop
 80037ce:	3708      	adds	r7, #8
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a40      	ldr	r2, [pc, #256]	; (800394c <TIM_Base_SetConfig+0x114>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d013      	beq.n	8003878 <TIM_Base_SetConfig+0x40>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003856:	d00f      	beq.n	8003878 <TIM_Base_SetConfig+0x40>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a3d      	ldr	r2, [pc, #244]	; (8003950 <TIM_Base_SetConfig+0x118>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d00b      	beq.n	8003878 <TIM_Base_SetConfig+0x40>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a3c      	ldr	r2, [pc, #240]	; (8003954 <TIM_Base_SetConfig+0x11c>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d007      	beq.n	8003878 <TIM_Base_SetConfig+0x40>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a3b      	ldr	r2, [pc, #236]	; (8003958 <TIM_Base_SetConfig+0x120>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d003      	beq.n	8003878 <TIM_Base_SetConfig+0x40>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a3a      	ldr	r2, [pc, #232]	; (800395c <TIM_Base_SetConfig+0x124>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d108      	bne.n	800388a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800387e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	4313      	orrs	r3, r2
 8003888:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a2f      	ldr	r2, [pc, #188]	; (800394c <TIM_Base_SetConfig+0x114>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d02b      	beq.n	80038ea <TIM_Base_SetConfig+0xb2>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003898:	d027      	beq.n	80038ea <TIM_Base_SetConfig+0xb2>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a2c      	ldr	r2, [pc, #176]	; (8003950 <TIM_Base_SetConfig+0x118>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d023      	beq.n	80038ea <TIM_Base_SetConfig+0xb2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a2b      	ldr	r2, [pc, #172]	; (8003954 <TIM_Base_SetConfig+0x11c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d01f      	beq.n	80038ea <TIM_Base_SetConfig+0xb2>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a2a      	ldr	r2, [pc, #168]	; (8003958 <TIM_Base_SetConfig+0x120>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d01b      	beq.n	80038ea <TIM_Base_SetConfig+0xb2>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a29      	ldr	r2, [pc, #164]	; (800395c <TIM_Base_SetConfig+0x124>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d017      	beq.n	80038ea <TIM_Base_SetConfig+0xb2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a28      	ldr	r2, [pc, #160]	; (8003960 <TIM_Base_SetConfig+0x128>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d013      	beq.n	80038ea <TIM_Base_SetConfig+0xb2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a27      	ldr	r2, [pc, #156]	; (8003964 <TIM_Base_SetConfig+0x12c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d00f      	beq.n	80038ea <TIM_Base_SetConfig+0xb2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a26      	ldr	r2, [pc, #152]	; (8003968 <TIM_Base_SetConfig+0x130>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d00b      	beq.n	80038ea <TIM_Base_SetConfig+0xb2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a25      	ldr	r2, [pc, #148]	; (800396c <TIM_Base_SetConfig+0x134>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d007      	beq.n	80038ea <TIM_Base_SetConfig+0xb2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a24      	ldr	r2, [pc, #144]	; (8003970 <TIM_Base_SetConfig+0x138>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d003      	beq.n	80038ea <TIM_Base_SetConfig+0xb2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a23      	ldr	r2, [pc, #140]	; (8003974 <TIM_Base_SetConfig+0x13c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d108      	bne.n	80038fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	4313      	orrs	r3, r2
 8003908:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a0a      	ldr	r2, [pc, #40]	; (800394c <TIM_Base_SetConfig+0x114>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d003      	beq.n	8003930 <TIM_Base_SetConfig+0xf8>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a0c      	ldr	r2, [pc, #48]	; (800395c <TIM_Base_SetConfig+0x124>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d103      	bne.n	8003938 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	691a      	ldr	r2, [r3, #16]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	615a      	str	r2, [r3, #20]
}
 800393e:	bf00      	nop
 8003940:	3714      	adds	r7, #20
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	40010000 	.word	0x40010000
 8003950:	40000400 	.word	0x40000400
 8003954:	40000800 	.word	0x40000800
 8003958:	40000c00 	.word	0x40000c00
 800395c:	40010400 	.word	0x40010400
 8003960:	40014000 	.word	0x40014000
 8003964:	40014400 	.word	0x40014400
 8003968:	40014800 	.word	0x40014800
 800396c:	40001800 	.word	0x40001800
 8003970:	40001c00 	.word	0x40001c00
 8003974:	40002000 	.word	0x40002000

08003978 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e0be      	b.n	8003b30 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d031      	beq.n	8003a1e <HAL_UART_Init+0x7e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a5e      	ldr	r2, [pc, #376]	; (8003b38 <HAL_UART_Init+0x198>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d013      	beq.n	80039ec <HAL_UART_Init+0x4c>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a5c      	ldr	r2, [pc, #368]	; (8003b3c <HAL_UART_Init+0x19c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d00e      	beq.n	80039ec <HAL_UART_Init+0x4c>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a5b      	ldr	r2, [pc, #364]	; (8003b40 <HAL_UART_Init+0x1a0>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d009      	beq.n	80039ec <HAL_UART_Init+0x4c>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a59      	ldr	r2, [pc, #356]	; (8003b44 <HAL_UART_Init+0x1a4>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d004      	beq.n	80039ec <HAL_UART_Init+0x4c>
 80039e2:	f240 1173 	movw	r1, #371	; 0x173
 80039e6:	4858      	ldr	r0, [pc, #352]	; (8003b48 <HAL_UART_Init+0x1a8>)
 80039e8:	f7fd fb94 	bl	8001114 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d041      	beq.n	8003a78 <HAL_UART_Init+0xd8>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039fc:	d03c      	beq.n	8003a78 <HAL_UART_Init+0xd8>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a06:	d037      	beq.n	8003a78 <HAL_UART_Init+0xd8>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a10:	d032      	beq.n	8003a78 <HAL_UART_Init+0xd8>
 8003a12:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8003a16:	484c      	ldr	r0, [pc, #304]	; (8003b48 <HAL_UART_Init+0x1a8>)
 8003a18:	f7fd fb7c 	bl	8001114 <assert_failed>
 8003a1c:	e02c      	b.n	8003a78 <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a45      	ldr	r2, [pc, #276]	; (8003b38 <HAL_UART_Init+0x198>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d027      	beq.n	8003a78 <HAL_UART_Init+0xd8>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a43      	ldr	r2, [pc, #268]	; (8003b3c <HAL_UART_Init+0x19c>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d022      	beq.n	8003a78 <HAL_UART_Init+0xd8>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a42      	ldr	r2, [pc, #264]	; (8003b40 <HAL_UART_Init+0x1a0>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d01d      	beq.n	8003a78 <HAL_UART_Init+0xd8>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a42      	ldr	r2, [pc, #264]	; (8003b4c <HAL_UART_Init+0x1ac>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d018      	beq.n	8003a78 <HAL_UART_Init+0xd8>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a41      	ldr	r2, [pc, #260]	; (8003b50 <HAL_UART_Init+0x1b0>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d013      	beq.n	8003a78 <HAL_UART_Init+0xd8>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a3b      	ldr	r2, [pc, #236]	; (8003b44 <HAL_UART_Init+0x1a4>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d00e      	beq.n	8003a78 <HAL_UART_Init+0xd8>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a3d      	ldr	r2, [pc, #244]	; (8003b54 <HAL_UART_Init+0x1b4>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d009      	beq.n	8003a78 <HAL_UART_Init+0xd8>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a3b      	ldr	r2, [pc, #236]	; (8003b58 <HAL_UART_Init+0x1b8>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d004      	beq.n	8003a78 <HAL_UART_Init+0xd8>
 8003a6e:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8003a72:	4835      	ldr	r0, [pc, #212]	; (8003b48 <HAL_UART_Init+0x1a8>)
 8003a74:	f7fd fb4e 	bl	8001114 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d009      	beq.n	8003a94 <HAL_UART_Init+0xf4>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a88:	d004      	beq.n	8003a94 <HAL_UART_Init+0xf4>
 8003a8a:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8003a8e:	482e      	ldr	r0, [pc, #184]	; (8003b48 <HAL_UART_Init+0x1a8>)
 8003a90:	f7fd fb40 	bl	8001114 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	69db      	ldr	r3, [r3, #28]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d009      	beq.n	8003ab0 <HAL_UART_Init+0x110>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	69db      	ldr	r3, [r3, #28]
 8003aa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aa4:	d004      	beq.n	8003ab0 <HAL_UART_Init+0x110>
 8003aa6:	f240 117b 	movw	r1, #379	; 0x17b
 8003aaa:	4827      	ldr	r0, [pc, #156]	; (8003b48 <HAL_UART_Init+0x1a8>)
 8003aac:	f7fd fb32 	bl	8001114 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d106      	bne.n	8003aca <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7fd fb5b 	bl	8001180 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2224      	movs	r2, #36	; 0x24
 8003ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68da      	ldr	r2, [r3, #12]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ae0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 fc8c 	bl	8004400 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	691a      	ldr	r2, [r3, #16]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003af6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695a      	ldr	r2, [r3, #20]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b06:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68da      	ldr	r2, [r3, #12]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b16:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40011000 	.word	0x40011000
 8003b3c:	40004400 	.word	0x40004400
 8003b40:	40004800 	.word	0x40004800
 8003b44:	40011400 	.word	0x40011400
 8003b48:	080091bc 	.word	0x080091bc
 8003b4c:	40004c00 	.word	0x40004c00
 8003b50:	40005000 	.word	0x40005000
 8003b54:	40007800 	.word	0x40007800
 8003b58:	40007c00 	.word	0x40007c00

08003b5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b0ba      	sub	sp, #232	; 0xe8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003b82:	2300      	movs	r3, #0
 8003b84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003b9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10f      	bne.n	8003bc2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ba6:	f003 0320 	and.w	r3, r3, #32
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d009      	beq.n	8003bc2 <HAL_UART_IRQHandler+0x66>
 8003bae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bb2:	f003 0320 	and.w	r3, r3, #32
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 fb65 	bl	800428a <UART_Receive_IT>
      return;
 8003bc0:	e256      	b.n	8004070 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003bc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 80de 	beq.w	8003d88 <HAL_UART_IRQHandler+0x22c>
 8003bcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d106      	bne.n	8003be6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bdc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 80d1 	beq.w	8003d88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00b      	beq.n	8003c0a <HAL_UART_IRQHandler+0xae>
 8003bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d005      	beq.n	8003c0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	f043 0201 	orr.w	r2, r3, #1
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c0e:	f003 0304 	and.w	r3, r3, #4
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00b      	beq.n	8003c2e <HAL_UART_IRQHandler+0xd2>
 8003c16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d005      	beq.n	8003c2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	f043 0202 	orr.w	r2, r3, #2
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00b      	beq.n	8003c52 <HAL_UART_IRQHandler+0xf6>
 8003c3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d005      	beq.n	8003c52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	f043 0204 	orr.w	r2, r3, #4
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c56:	f003 0308 	and.w	r3, r3, #8
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d011      	beq.n	8003c82 <HAL_UART_IRQHandler+0x126>
 8003c5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c62:	f003 0320 	and.w	r3, r3, #32
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d105      	bne.n	8003c76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d005      	beq.n	8003c82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	f043 0208 	orr.w	r2, r3, #8
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 81ed 	beq.w	8004066 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c90:	f003 0320 	and.w	r3, r3, #32
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d008      	beq.n	8003caa <HAL_UART_IRQHandler+0x14e>
 8003c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c9c:	f003 0320 	and.w	r3, r3, #32
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 faf0 	bl	800428a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb4:	2b40      	cmp	r3, #64	; 0x40
 8003cb6:	bf0c      	ite	eq
 8003cb8:	2301      	moveq	r3, #1
 8003cba:	2300      	movne	r3, #0
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d103      	bne.n	8003cd6 <HAL_UART_IRQHandler+0x17a>
 8003cce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d04f      	beq.n	8003d76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f9f8 	bl	80040cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce6:	2b40      	cmp	r3, #64	; 0x40
 8003ce8:	d141      	bne.n	8003d6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	3314      	adds	r3, #20
 8003cf0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003cf8:	e853 3f00 	ldrex	r3, [r3]
 8003cfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	3314      	adds	r3, #20
 8003d12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d26:	e841 2300 	strex	r3, r2, [r1]
 8003d2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1d9      	bne.n	8003cea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d013      	beq.n	8003d66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d42:	4a7d      	ldr	r2, [pc, #500]	; (8003f38 <HAL_UART_IRQHandler+0x3dc>)
 8003d44:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fd ffea 	bl	8001d24 <HAL_DMA_Abort_IT>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d016      	beq.n	8003d84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d60:	4610      	mov	r0, r2
 8003d62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d64:	e00e      	b.n	8003d84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f99a 	bl	80040a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d6c:	e00a      	b.n	8003d84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f996 	bl	80040a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d74:	e006      	b.n	8003d84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f992 	bl	80040a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003d82:	e170      	b.n	8004066 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d84:	bf00      	nop
    return;
 8003d86:	e16e      	b.n	8004066 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	f040 814a 	bne.w	8004026 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d96:	f003 0310 	and.w	r3, r3, #16
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 8143 	beq.w	8004026 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003da4:	f003 0310 	and.w	r3, r3, #16
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 813c 	beq.w	8004026 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003dae:	2300      	movs	r3, #0
 8003db0:	60bb      	str	r3, [r7, #8]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	60bb      	str	r3, [r7, #8]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	60bb      	str	r3, [r7, #8]
 8003dc2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dce:	2b40      	cmp	r3, #64	; 0x40
 8003dd0:	f040 80b4 	bne.w	8003f3c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003de0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 8140 	beq.w	800406a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003dee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003df2:	429a      	cmp	r2, r3
 8003df4:	f080 8139 	bcs.w	800406a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003dfe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e0a:	f000 8088 	beq.w	8003f1e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	330c      	adds	r3, #12
 8003e14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e1c:	e853 3f00 	ldrex	r3, [r3]
 8003e20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	330c      	adds	r3, #12
 8003e36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003e3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e4a:	e841 2300 	strex	r3, r2, [r1]
 8003e4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1d9      	bne.n	8003e0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	3314      	adds	r3, #20
 8003e60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e64:	e853 3f00 	ldrex	r3, [r3]
 8003e68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e6c:	f023 0301 	bic.w	r3, r3, #1
 8003e70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3314      	adds	r3, #20
 8003e7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e8a:	e841 2300 	strex	r3, r2, [r1]
 8003e8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1e1      	bne.n	8003e5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	3314      	adds	r3, #20
 8003e9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ea0:	e853 3f00 	ldrex	r3, [r3]
 8003ea4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ea6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ea8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	3314      	adds	r3, #20
 8003eb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003eba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ebc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ebe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ec0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ec2:	e841 2300 	strex	r3, r2, [r1]
 8003ec6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003ec8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1e3      	bne.n	8003e96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	330c      	adds	r3, #12
 8003ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ee6:	e853 3f00 	ldrex	r3, [r3]
 8003eea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003eec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eee:	f023 0310 	bic.w	r3, r3, #16
 8003ef2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	330c      	adds	r3, #12
 8003efc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003f00:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f02:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f08:	e841 2300 	strex	r3, r2, [r1]
 8003f0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1e3      	bne.n	8003edc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7fd fe93 	bl	8001c44 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f8c0 	bl	80040b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f34:	e099      	b.n	800406a <HAL_UART_IRQHandler+0x50e>
 8003f36:	bf00      	nop
 8003f38:	08004193 	.word	0x08004193
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 808b 	beq.w	800406e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003f58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 8086 	beq.w	800406e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	330c      	adds	r3, #12
 8003f68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f6c:	e853 3f00 	ldrex	r3, [r3]
 8003f70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	330c      	adds	r3, #12
 8003f82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003f86:	647a      	str	r2, [r7, #68]	; 0x44
 8003f88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f8e:	e841 2300 	strex	r3, r2, [r1]
 8003f92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1e3      	bne.n	8003f62 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	3314      	adds	r3, #20
 8003fa0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	e853 3f00 	ldrex	r3, [r3]
 8003fa8:	623b      	str	r3, [r7, #32]
   return(result);
 8003faa:	6a3b      	ldr	r3, [r7, #32]
 8003fac:	f023 0301 	bic.w	r3, r3, #1
 8003fb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	3314      	adds	r3, #20
 8003fba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003fbe:	633a      	str	r2, [r7, #48]	; 0x30
 8003fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fc6:	e841 2300 	strex	r3, r2, [r1]
 8003fca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1e3      	bne.n	8003f9a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	330c      	adds	r3, #12
 8003fe6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	e853 3f00 	ldrex	r3, [r3]
 8003fee:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f023 0310 	bic.w	r3, r3, #16
 8003ff6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	330c      	adds	r3, #12
 8004000:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004004:	61fa      	str	r2, [r7, #28]
 8004006:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004008:	69b9      	ldr	r1, [r7, #24]
 800400a:	69fa      	ldr	r2, [r7, #28]
 800400c:	e841 2300 	strex	r3, r2, [r1]
 8004010:	617b      	str	r3, [r7, #20]
   return(result);
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1e3      	bne.n	8003fe0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004018:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800401c:	4619      	mov	r1, r3
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f848 	bl	80040b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004024:	e023      	b.n	800406e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800402a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402e:	2b00      	cmp	r3, #0
 8004030:	d009      	beq.n	8004046 <HAL_UART_IRQHandler+0x4ea>
 8004032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f8bb 	bl	80041ba <UART_Transmit_IT>
    return;
 8004044:	e014      	b.n	8004070 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800404a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00e      	beq.n	8004070 <HAL_UART_IRQHandler+0x514>
 8004052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405a:	2b00      	cmp	r3, #0
 800405c:	d008      	beq.n	8004070 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f8fb 	bl	800425a <UART_EndTransmit_IT>
    return;
 8004064:	e004      	b.n	8004070 <HAL_UART_IRQHandler+0x514>
    return;
 8004066:	bf00      	nop
 8004068:	e002      	b.n	8004070 <HAL_UART_IRQHandler+0x514>
      return;
 800406a:	bf00      	nop
 800406c:	e000      	b.n	8004070 <HAL_UART_IRQHandler+0x514>
      return;
 800406e:	bf00      	nop
  }
}
 8004070:	37e8      	adds	r7, #232	; 0xe8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop

08004078 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	460b      	mov	r3, r1
 80040be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b095      	sub	sp, #84	; 0x54
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	330c      	adds	r3, #12
 80040da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040de:	e853 3f00 	ldrex	r3, [r3]
 80040e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	330c      	adds	r3, #12
 80040f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040f4:	643a      	str	r2, [r7, #64]	; 0x40
 80040f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040fc:	e841 2300 	strex	r3, r2, [r1]
 8004100:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1e5      	bne.n	80040d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	3314      	adds	r3, #20
 800410e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004110:	6a3b      	ldr	r3, [r7, #32]
 8004112:	e853 3f00 	ldrex	r3, [r3]
 8004116:	61fb      	str	r3, [r7, #28]
   return(result);
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	f023 0301 	bic.w	r3, r3, #1
 800411e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	3314      	adds	r3, #20
 8004126:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004128:	62fa      	str	r2, [r7, #44]	; 0x2c
 800412a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800412e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004130:	e841 2300 	strex	r3, r2, [r1]
 8004134:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1e5      	bne.n	8004108 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004140:	2b01      	cmp	r3, #1
 8004142:	d119      	bne.n	8004178 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	330c      	adds	r3, #12
 800414a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	e853 3f00 	ldrex	r3, [r3]
 8004152:	60bb      	str	r3, [r7, #8]
   return(result);
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	f023 0310 	bic.w	r3, r3, #16
 800415a:	647b      	str	r3, [r7, #68]	; 0x44
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	330c      	adds	r3, #12
 8004162:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004164:	61ba      	str	r2, [r7, #24]
 8004166:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004168:	6979      	ldr	r1, [r7, #20]
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	e841 2300 	strex	r3, r2, [r1]
 8004170:	613b      	str	r3, [r7, #16]
   return(result);
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1e5      	bne.n	8004144 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2220      	movs	r2, #32
 800417c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004186:	bf00      	nop
 8004188:	3754      	adds	r7, #84	; 0x54
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b084      	sub	sp, #16
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f7ff ff77 	bl	80040a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041b2:	bf00      	nop
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b085      	sub	sp, #20
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b21      	cmp	r3, #33	; 0x21
 80041cc:	d13e      	bne.n	800424c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d6:	d114      	bne.n	8004202 <UART_Transmit_IT+0x48>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d110      	bne.n	8004202 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	461a      	mov	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	1c9a      	adds	r2, r3, #2
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	621a      	str	r2, [r3, #32]
 8004200:	e008      	b.n	8004214 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	1c59      	adds	r1, r3, #1
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	6211      	str	r1, [r2, #32]
 800420c:	781a      	ldrb	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004218:	b29b      	uxth	r3, r3
 800421a:	3b01      	subs	r3, #1
 800421c:	b29b      	uxth	r3, r3
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	4619      	mov	r1, r3
 8004222:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10f      	bne.n	8004248 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004236:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68da      	ldr	r2, [r3, #12]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004246:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004248:	2300      	movs	r3, #0
 800424a:	e000      	b.n	800424e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800424c:	2302      	movs	r3, #2
  }
}
 800424e:	4618      	mov	r0, r3
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b082      	sub	sp, #8
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68da      	ldr	r2, [r3, #12]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004270:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2220      	movs	r2, #32
 8004276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7ff fefc 	bl	8004078 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b08c      	sub	sp, #48	; 0x30
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b22      	cmp	r3, #34	; 0x22
 800429c:	f040 80ab 	bne.w	80043f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042a8:	d117      	bne.n	80042da <UART_Receive_IT+0x50>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d113      	bne.n	80042da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80042b2:	2300      	movs	r3, #0
 80042b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d2:	1c9a      	adds	r2, r3, #2
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	629a      	str	r2, [r3, #40]	; 0x28
 80042d8:	e026      	b.n	8004328 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80042e0:	2300      	movs	r3, #0
 80042e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ec:	d007      	beq.n	80042fe <UART_Receive_IT+0x74>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10a      	bne.n	800430c <UART_Receive_IT+0x82>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d106      	bne.n	800430c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	b2da      	uxtb	r2, r3
 8004306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004308:	701a      	strb	r2, [r3, #0]
 800430a:	e008      	b.n	800431e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	b2db      	uxtb	r3, r3
 8004314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004318:	b2da      	uxtb	r2, r3
 800431a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004322:	1c5a      	adds	r2, r3, #1
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800432c:	b29b      	uxth	r3, r3
 800432e:	3b01      	subs	r3, #1
 8004330:	b29b      	uxth	r3, r3
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	4619      	mov	r1, r3
 8004336:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004338:	2b00      	cmp	r3, #0
 800433a:	d15a      	bne.n	80043f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 0220 	bic.w	r2, r2, #32
 800434a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800435a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	695a      	ldr	r2, [r3, #20]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 0201 	bic.w	r2, r2, #1
 800436a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2220      	movs	r2, #32
 8004370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004378:	2b01      	cmp	r3, #1
 800437a:	d135      	bne.n	80043e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	330c      	adds	r3, #12
 8004388:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	e853 3f00 	ldrex	r3, [r3]
 8004390:	613b      	str	r3, [r7, #16]
   return(result);
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f023 0310 	bic.w	r3, r3, #16
 8004398:	627b      	str	r3, [r7, #36]	; 0x24
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	330c      	adds	r3, #12
 80043a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a2:	623a      	str	r2, [r7, #32]
 80043a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a6:	69f9      	ldr	r1, [r7, #28]
 80043a8:	6a3a      	ldr	r2, [r7, #32]
 80043aa:	e841 2300 	strex	r3, r2, [r1]
 80043ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1e5      	bne.n	8004382 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0310 	and.w	r3, r3, #16
 80043c0:	2b10      	cmp	r3, #16
 80043c2:	d10a      	bne.n	80043da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043c4:	2300      	movs	r3, #0
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043de:	4619      	mov	r1, r3
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f7ff fe67 	bl	80040b4 <HAL_UARTEx_RxEventCallback>
 80043e6:	e002      	b.n	80043ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7ff fe4f 	bl	800408c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80043ee:	2300      	movs	r3, #0
 80043f0:	e002      	b.n	80043f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	e000      	b.n	80043f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80043f6:	2302      	movs	r3, #2
  }
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3730      	adds	r7, #48	; 0x30
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004400:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004404:	b0c0      	sub	sp, #256	; 0x100
 8004406:	af00      	add	r7, sp, #0
 8004408:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800440c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	4bcf      	ldr	r3, [pc, #828]	; (8004750 <UART_SetConfig+0x350>)
 8004414:	429a      	cmp	r2, r3
 8004416:	d904      	bls.n	8004422 <UART_SetConfig+0x22>
 8004418:	f640 6161 	movw	r1, #3681	; 0xe61
 800441c:	48cd      	ldr	r0, [pc, #820]	; (8004754 <UART_SetConfig+0x354>)
 800441e:	f7fc fe79 	bl	8001114 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8004422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00a      	beq.n	8004442 <UART_SetConfig+0x42>
 800442c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004436:	d004      	beq.n	8004442 <UART_SetConfig+0x42>
 8004438:	f640 6162 	movw	r1, #3682	; 0xe62
 800443c:	48c5      	ldr	r0, [pc, #788]	; (8004754 <UART_SetConfig+0x354>)
 800443e:	f7fc fe69 	bl	8001114 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8004442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d010      	beq.n	800446e <UART_SetConfig+0x6e>
 800444c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004456:	d00a      	beq.n	800446e <UART_SetConfig+0x6e>
 8004458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004462:	d004      	beq.n	800446e <UART_SetConfig+0x6e>
 8004464:	f640 6163 	movw	r1, #3683	; 0xe63
 8004468:	48ba      	ldr	r0, [pc, #744]	; (8004754 <UART_SetConfig+0x354>)
 800446a:	f7fc fe53 	bl	8001114 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800446e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004472:	695a      	ldr	r2, [r3, #20]
 8004474:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8004478:	4013      	ands	r3, r2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d104      	bne.n	8004488 <UART_SetConfig+0x88>
 800447e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d104      	bne.n	8004492 <UART_SetConfig+0x92>
 8004488:	f640 6164 	movw	r1, #3684	; 0xe64
 800448c:	48b1      	ldr	r0, [pc, #708]	; (8004754 <UART_SetConfig+0x354>)
 800448e:	f7fc fe41 	bl	8001114 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800449e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a2:	68d9      	ldr	r1, [r3, #12]
 80044a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	ea40 0301 	orr.w	r3, r0, r1
 80044ae:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b4:	689a      	ldr	r2, [r3, #8]
 80044b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	431a      	orrs	r2, r3
 80044be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	431a      	orrs	r2, r3
 80044c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ca:	69db      	ldr	r3, [r3, #28]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80044d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044de:	f021 010c 	bic.w	r1, r1, #12
 80044e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80044ec:	430b      	orrs	r3, r1
 80044ee:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80044fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004500:	6999      	ldr	r1, [r3, #24]
 8004502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	ea40 0301 	orr.w	r3, r0, r1
 800450c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800450e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	4b90      	ldr	r3, [pc, #576]	; (8004758 <UART_SetConfig+0x358>)
 8004516:	429a      	cmp	r2, r3
 8004518:	d005      	beq.n	8004526 <UART_SetConfig+0x126>
 800451a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	4b8e      	ldr	r3, [pc, #568]	; (800475c <UART_SetConfig+0x35c>)
 8004522:	429a      	cmp	r2, r3
 8004524:	d104      	bne.n	8004530 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004526:	f7fe fe47 	bl	80031b8 <HAL_RCC_GetPCLK2Freq>
 800452a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800452e:	e003      	b.n	8004538 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004530:	f7fe fe2e 	bl	8003190 <HAL_RCC_GetPCLK1Freq>
 8004534:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004542:	f040 810f 	bne.w	8004764 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800454a:	2200      	movs	r2, #0
 800454c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004550:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004554:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004558:	4622      	mov	r2, r4
 800455a:	462b      	mov	r3, r5
 800455c:	1891      	adds	r1, r2, r2
 800455e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004560:	415b      	adcs	r3, r3
 8004562:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004564:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004568:	4621      	mov	r1, r4
 800456a:	eb12 0801 	adds.w	r8, r2, r1
 800456e:	4629      	mov	r1, r5
 8004570:	eb43 0901 	adc.w	r9, r3, r1
 8004574:	f04f 0200 	mov.w	r2, #0
 8004578:	f04f 0300 	mov.w	r3, #0
 800457c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004580:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004584:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004588:	4690      	mov	r8, r2
 800458a:	4699      	mov	r9, r3
 800458c:	4623      	mov	r3, r4
 800458e:	eb18 0303 	adds.w	r3, r8, r3
 8004592:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004596:	462b      	mov	r3, r5
 8004598:	eb49 0303 	adc.w	r3, r9, r3
 800459c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80045ac:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80045b0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80045b4:	460b      	mov	r3, r1
 80045b6:	18db      	adds	r3, r3, r3
 80045b8:	653b      	str	r3, [r7, #80]	; 0x50
 80045ba:	4613      	mov	r3, r2
 80045bc:	eb42 0303 	adc.w	r3, r2, r3
 80045c0:	657b      	str	r3, [r7, #84]	; 0x54
 80045c2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80045c6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80045ca:	f7fb fe5b 	bl	8000284 <__aeabi_uldivmod>
 80045ce:	4602      	mov	r2, r0
 80045d0:	460b      	mov	r3, r1
 80045d2:	4b63      	ldr	r3, [pc, #396]	; (8004760 <UART_SetConfig+0x360>)
 80045d4:	fba3 2302 	umull	r2, r3, r3, r2
 80045d8:	095b      	lsrs	r3, r3, #5
 80045da:	011c      	lsls	r4, r3, #4
 80045dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045e0:	2200      	movs	r2, #0
 80045e2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045e6:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80045ea:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80045ee:	4642      	mov	r2, r8
 80045f0:	464b      	mov	r3, r9
 80045f2:	1891      	adds	r1, r2, r2
 80045f4:	64b9      	str	r1, [r7, #72]	; 0x48
 80045f6:	415b      	adcs	r3, r3
 80045f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045fa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80045fe:	4641      	mov	r1, r8
 8004600:	eb12 0a01 	adds.w	sl, r2, r1
 8004604:	4649      	mov	r1, r9
 8004606:	eb43 0b01 	adc.w	fp, r3, r1
 800460a:	f04f 0200 	mov.w	r2, #0
 800460e:	f04f 0300 	mov.w	r3, #0
 8004612:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004616:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800461a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800461e:	4692      	mov	sl, r2
 8004620:	469b      	mov	fp, r3
 8004622:	4643      	mov	r3, r8
 8004624:	eb1a 0303 	adds.w	r3, sl, r3
 8004628:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800462c:	464b      	mov	r3, r9
 800462e:	eb4b 0303 	adc.w	r3, fp, r3
 8004632:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004642:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004646:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800464a:	460b      	mov	r3, r1
 800464c:	18db      	adds	r3, r3, r3
 800464e:	643b      	str	r3, [r7, #64]	; 0x40
 8004650:	4613      	mov	r3, r2
 8004652:	eb42 0303 	adc.w	r3, r2, r3
 8004656:	647b      	str	r3, [r7, #68]	; 0x44
 8004658:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800465c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004660:	f7fb fe10 	bl	8000284 <__aeabi_uldivmod>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	4611      	mov	r1, r2
 800466a:	4b3d      	ldr	r3, [pc, #244]	; (8004760 <UART_SetConfig+0x360>)
 800466c:	fba3 2301 	umull	r2, r3, r3, r1
 8004670:	095b      	lsrs	r3, r3, #5
 8004672:	2264      	movs	r2, #100	; 0x64
 8004674:	fb02 f303 	mul.w	r3, r2, r3
 8004678:	1acb      	subs	r3, r1, r3
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004680:	4b37      	ldr	r3, [pc, #220]	; (8004760 <UART_SetConfig+0x360>)
 8004682:	fba3 2302 	umull	r2, r3, r3, r2
 8004686:	095b      	lsrs	r3, r3, #5
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800468e:	441c      	add	r4, r3
 8004690:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004694:	2200      	movs	r2, #0
 8004696:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800469a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800469e:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80046a2:	4642      	mov	r2, r8
 80046a4:	464b      	mov	r3, r9
 80046a6:	1891      	adds	r1, r2, r2
 80046a8:	63b9      	str	r1, [r7, #56]	; 0x38
 80046aa:	415b      	adcs	r3, r3
 80046ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046ae:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80046b2:	4641      	mov	r1, r8
 80046b4:	1851      	adds	r1, r2, r1
 80046b6:	6339      	str	r1, [r7, #48]	; 0x30
 80046b8:	4649      	mov	r1, r9
 80046ba:	414b      	adcs	r3, r1
 80046bc:	637b      	str	r3, [r7, #52]	; 0x34
 80046be:	f04f 0200 	mov.w	r2, #0
 80046c2:	f04f 0300 	mov.w	r3, #0
 80046c6:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80046ca:	4659      	mov	r1, fp
 80046cc:	00cb      	lsls	r3, r1, #3
 80046ce:	4651      	mov	r1, sl
 80046d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046d4:	4651      	mov	r1, sl
 80046d6:	00ca      	lsls	r2, r1, #3
 80046d8:	4610      	mov	r0, r2
 80046da:	4619      	mov	r1, r3
 80046dc:	4603      	mov	r3, r0
 80046de:	4642      	mov	r2, r8
 80046e0:	189b      	adds	r3, r3, r2
 80046e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046e6:	464b      	mov	r3, r9
 80046e8:	460a      	mov	r2, r1
 80046ea:	eb42 0303 	adc.w	r3, r2, r3
 80046ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80046fe:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004702:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004706:	460b      	mov	r3, r1
 8004708:	18db      	adds	r3, r3, r3
 800470a:	62bb      	str	r3, [r7, #40]	; 0x28
 800470c:	4613      	mov	r3, r2
 800470e:	eb42 0303 	adc.w	r3, r2, r3
 8004712:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004714:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004718:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800471c:	f7fb fdb2 	bl	8000284 <__aeabi_uldivmod>
 8004720:	4602      	mov	r2, r0
 8004722:	460b      	mov	r3, r1
 8004724:	4b0e      	ldr	r3, [pc, #56]	; (8004760 <UART_SetConfig+0x360>)
 8004726:	fba3 1302 	umull	r1, r3, r3, r2
 800472a:	095b      	lsrs	r3, r3, #5
 800472c:	2164      	movs	r1, #100	; 0x64
 800472e:	fb01 f303 	mul.w	r3, r1, r3
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	00db      	lsls	r3, r3, #3
 8004736:	3332      	adds	r3, #50	; 0x32
 8004738:	4a09      	ldr	r2, [pc, #36]	; (8004760 <UART_SetConfig+0x360>)
 800473a:	fba2 2303 	umull	r2, r3, r2, r3
 800473e:	095b      	lsrs	r3, r3, #5
 8004740:	f003 0207 	and.w	r2, r3, #7
 8004744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4422      	add	r2, r4
 800474c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800474e:	e108      	b.n	8004962 <UART_SetConfig+0x562>
 8004750:	00a037a0 	.word	0x00a037a0
 8004754:	080091bc 	.word	0x080091bc
 8004758:	40011000 	.word	0x40011000
 800475c:	40011400 	.word	0x40011400
 8004760:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004768:	2200      	movs	r2, #0
 800476a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800476e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004772:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004776:	4642      	mov	r2, r8
 8004778:	464b      	mov	r3, r9
 800477a:	1891      	adds	r1, r2, r2
 800477c:	6239      	str	r1, [r7, #32]
 800477e:	415b      	adcs	r3, r3
 8004780:	627b      	str	r3, [r7, #36]	; 0x24
 8004782:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004786:	4641      	mov	r1, r8
 8004788:	1854      	adds	r4, r2, r1
 800478a:	4649      	mov	r1, r9
 800478c:	eb43 0501 	adc.w	r5, r3, r1
 8004790:	f04f 0200 	mov.w	r2, #0
 8004794:	f04f 0300 	mov.w	r3, #0
 8004798:	00eb      	lsls	r3, r5, #3
 800479a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800479e:	00e2      	lsls	r2, r4, #3
 80047a0:	4614      	mov	r4, r2
 80047a2:	461d      	mov	r5, r3
 80047a4:	4643      	mov	r3, r8
 80047a6:	18e3      	adds	r3, r4, r3
 80047a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047ac:	464b      	mov	r3, r9
 80047ae:	eb45 0303 	adc.w	r3, r5, r3
 80047b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80047b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047c6:	f04f 0200 	mov.w	r2, #0
 80047ca:	f04f 0300 	mov.w	r3, #0
 80047ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80047d2:	4629      	mov	r1, r5
 80047d4:	008b      	lsls	r3, r1, #2
 80047d6:	4621      	mov	r1, r4
 80047d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047dc:	4621      	mov	r1, r4
 80047de:	008a      	lsls	r2, r1, #2
 80047e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80047e4:	f7fb fd4e 	bl	8000284 <__aeabi_uldivmod>
 80047e8:	4602      	mov	r2, r0
 80047ea:	460b      	mov	r3, r1
 80047ec:	4b60      	ldr	r3, [pc, #384]	; (8004970 <UART_SetConfig+0x570>)
 80047ee:	fba3 2302 	umull	r2, r3, r3, r2
 80047f2:	095b      	lsrs	r3, r3, #5
 80047f4:	011c      	lsls	r4, r3, #4
 80047f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047fa:	2200      	movs	r2, #0
 80047fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004800:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004804:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004808:	4642      	mov	r2, r8
 800480a:	464b      	mov	r3, r9
 800480c:	1891      	adds	r1, r2, r2
 800480e:	61b9      	str	r1, [r7, #24]
 8004810:	415b      	adcs	r3, r3
 8004812:	61fb      	str	r3, [r7, #28]
 8004814:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004818:	4641      	mov	r1, r8
 800481a:	1851      	adds	r1, r2, r1
 800481c:	6139      	str	r1, [r7, #16]
 800481e:	4649      	mov	r1, r9
 8004820:	414b      	adcs	r3, r1
 8004822:	617b      	str	r3, [r7, #20]
 8004824:	f04f 0200 	mov.w	r2, #0
 8004828:	f04f 0300 	mov.w	r3, #0
 800482c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004830:	4659      	mov	r1, fp
 8004832:	00cb      	lsls	r3, r1, #3
 8004834:	4651      	mov	r1, sl
 8004836:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800483a:	4651      	mov	r1, sl
 800483c:	00ca      	lsls	r2, r1, #3
 800483e:	4610      	mov	r0, r2
 8004840:	4619      	mov	r1, r3
 8004842:	4603      	mov	r3, r0
 8004844:	4642      	mov	r2, r8
 8004846:	189b      	adds	r3, r3, r2
 8004848:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800484c:	464b      	mov	r3, r9
 800484e:	460a      	mov	r2, r1
 8004850:	eb42 0303 	adc.w	r3, r2, r3
 8004854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	67bb      	str	r3, [r7, #120]	; 0x78
 8004862:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004864:	f04f 0200 	mov.w	r2, #0
 8004868:	f04f 0300 	mov.w	r3, #0
 800486c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004870:	4649      	mov	r1, r9
 8004872:	008b      	lsls	r3, r1, #2
 8004874:	4641      	mov	r1, r8
 8004876:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800487a:	4641      	mov	r1, r8
 800487c:	008a      	lsls	r2, r1, #2
 800487e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004882:	f7fb fcff 	bl	8000284 <__aeabi_uldivmod>
 8004886:	4602      	mov	r2, r0
 8004888:	460b      	mov	r3, r1
 800488a:	4b39      	ldr	r3, [pc, #228]	; (8004970 <UART_SetConfig+0x570>)
 800488c:	fba3 1302 	umull	r1, r3, r3, r2
 8004890:	095b      	lsrs	r3, r3, #5
 8004892:	2164      	movs	r1, #100	; 0x64
 8004894:	fb01 f303 	mul.w	r3, r1, r3
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	011b      	lsls	r3, r3, #4
 800489c:	3332      	adds	r3, #50	; 0x32
 800489e:	4a34      	ldr	r2, [pc, #208]	; (8004970 <UART_SetConfig+0x570>)
 80048a0:	fba2 2303 	umull	r2, r3, r2, r3
 80048a4:	095b      	lsrs	r3, r3, #5
 80048a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048aa:	441c      	add	r4, r3
 80048ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048b0:	2200      	movs	r2, #0
 80048b2:	673b      	str	r3, [r7, #112]	; 0x70
 80048b4:	677a      	str	r2, [r7, #116]	; 0x74
 80048b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80048ba:	4642      	mov	r2, r8
 80048bc:	464b      	mov	r3, r9
 80048be:	1891      	adds	r1, r2, r2
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	415b      	adcs	r3, r3
 80048c4:	60fb      	str	r3, [r7, #12]
 80048c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048ca:	4641      	mov	r1, r8
 80048cc:	1851      	adds	r1, r2, r1
 80048ce:	6039      	str	r1, [r7, #0]
 80048d0:	4649      	mov	r1, r9
 80048d2:	414b      	adcs	r3, r1
 80048d4:	607b      	str	r3, [r7, #4]
 80048d6:	f04f 0200 	mov.w	r2, #0
 80048da:	f04f 0300 	mov.w	r3, #0
 80048de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80048e2:	4659      	mov	r1, fp
 80048e4:	00cb      	lsls	r3, r1, #3
 80048e6:	4651      	mov	r1, sl
 80048e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048ec:	4651      	mov	r1, sl
 80048ee:	00ca      	lsls	r2, r1, #3
 80048f0:	4610      	mov	r0, r2
 80048f2:	4619      	mov	r1, r3
 80048f4:	4603      	mov	r3, r0
 80048f6:	4642      	mov	r2, r8
 80048f8:	189b      	adds	r3, r3, r2
 80048fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80048fc:	464b      	mov	r3, r9
 80048fe:	460a      	mov	r2, r1
 8004900:	eb42 0303 	adc.w	r3, r2, r3
 8004904:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	663b      	str	r3, [r7, #96]	; 0x60
 8004910:	667a      	str	r2, [r7, #100]	; 0x64
 8004912:	f04f 0200 	mov.w	r2, #0
 8004916:	f04f 0300 	mov.w	r3, #0
 800491a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800491e:	4649      	mov	r1, r9
 8004920:	008b      	lsls	r3, r1, #2
 8004922:	4641      	mov	r1, r8
 8004924:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004928:	4641      	mov	r1, r8
 800492a:	008a      	lsls	r2, r1, #2
 800492c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004930:	f7fb fca8 	bl	8000284 <__aeabi_uldivmod>
 8004934:	4602      	mov	r2, r0
 8004936:	460b      	mov	r3, r1
 8004938:	4b0d      	ldr	r3, [pc, #52]	; (8004970 <UART_SetConfig+0x570>)
 800493a:	fba3 1302 	umull	r1, r3, r3, r2
 800493e:	095b      	lsrs	r3, r3, #5
 8004940:	2164      	movs	r1, #100	; 0x64
 8004942:	fb01 f303 	mul.w	r3, r1, r3
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	011b      	lsls	r3, r3, #4
 800494a:	3332      	adds	r3, #50	; 0x32
 800494c:	4a08      	ldr	r2, [pc, #32]	; (8004970 <UART_SetConfig+0x570>)
 800494e:	fba2 2303 	umull	r2, r3, r2, r3
 8004952:	095b      	lsrs	r3, r3, #5
 8004954:	f003 020f 	and.w	r2, r3, #15
 8004958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4422      	add	r2, r4
 8004960:	609a      	str	r2, [r3, #8]
}
 8004962:	bf00      	nop
 8004964:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004968:	46bd      	mov	sp, r7
 800496a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800496e:	bf00      	nop
 8004970:	51eb851f 	.word	0x51eb851f

08004974 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f103 0208 	add.w	r2, r3, #8
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f04f 32ff 	mov.w	r2, #4294967295
 800498c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f103 0208 	add.w	r2, r3, #8
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f103 0208 	add.w	r2, r3, #8
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80049ce:	b480      	push	{r7}
 80049d0:	b085      	sub	sp, #20
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
 80049d6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	683a      	ldr	r2, [r7, #0]
 80049f2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	1c5a      	adds	r2, r3, #1
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	601a      	str	r2, [r3, #0]
}
 8004a0a:	bf00      	nop
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004a16:	b480      	push	{r7}
 8004a18:	b085      	sub	sp, #20
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
 8004a1e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a2c:	d103      	bne.n	8004a36 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	60fb      	str	r3, [r7, #12]
 8004a34:	e00c      	b.n	8004a50 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	3308      	adds	r3, #8
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	e002      	b.n	8004a44 <vListInsert+0x2e>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d2f6      	bcs.n	8004a3e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	601a      	str	r2, [r3, #0]
}
 8004a7c:	bf00      	nop
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	6892      	ldr	r2, [r2, #8]
 8004a9e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	6852      	ldr	r2, [r2, #4]
 8004aa8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d103      	bne.n	8004abc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689a      	ldr	r2, [r3, #8]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	1e5a      	subs	r2, r3, #1
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10a      	bne.n	8004b06 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8004af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af4:	f383 8811 	msr	BASEPRI, r3
 8004af8:	f3bf 8f6f 	isb	sy
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8004b02:	bf00      	nop
 8004b04:	e7fe      	b.n	8004b04 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8004b06:	f002 f8a7 	bl	8006c58 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b12:	68f9      	ldr	r1, [r7, #12]
 8004b14:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b16:	fb01 f303 	mul.w	r3, r1, r3
 8004b1a:	441a      	add	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b36:	3b01      	subs	r3, #1
 8004b38:	68f9      	ldr	r1, [r7, #12]
 8004b3a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b3c:	fb01 f303 	mul.w	r3, r1, r3
 8004b40:	441a      	add	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	22ff      	movs	r2, #255	; 0xff
 8004b4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	22ff      	movs	r2, #255	; 0xff
 8004b52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d114      	bne.n	8004b86 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d01a      	beq.n	8004b9a <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	3310      	adds	r3, #16
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f001 f91f 	bl	8005dac <xTaskRemoveFromEventList>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d012      	beq.n	8004b9a <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8004b74:	4b0c      	ldr	r3, [pc, #48]	; (8004ba8 <xQueueGenericReset+0xcc>)
 8004b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b7a:	601a      	str	r2, [r3, #0]
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	f3bf 8f6f 	isb	sy
 8004b84:	e009      	b.n	8004b9a <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	3310      	adds	r3, #16
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7ff fef2 	bl	8004974 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	3324      	adds	r3, #36	; 0x24
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7ff feed 	bl	8004974 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8004b9a:	f002 f88d 	bl	8006cb8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8004b9e:	2301      	movs	r3, #1
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	e000ed04 	.word	0xe000ed04

08004bac <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08c      	sub	sp, #48	; 0x30
 8004bb0:	af02      	add	r7, sp, #8
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10a      	bne.n	8004bd6 <xQueueGenericCreate+0x2a>
        __asm volatile
 8004bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc4:	f383 8811 	msr	BASEPRI, r3
 8004bc8:	f3bf 8f6f 	isb	sy
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	61bb      	str	r3, [r7, #24]
    }
 8004bd2:	bf00      	nop
 8004bd4:	e7fe      	b.n	8004bd4 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	fb02 f303 	mul.w	r3, r2, r3
 8004bde:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d006      	beq.n	8004bf4 <xQueueGenericCreate+0x48>
 8004be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d101      	bne.n	8004bf8 <xQueueGenericCreate+0x4c>
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e000      	b.n	8004bfa <xQueueGenericCreate+0x4e>
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10a      	bne.n	8004c14 <xQueueGenericCreate+0x68>
        __asm volatile
 8004bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c02:	f383 8811 	msr	BASEPRI, r3
 8004c06:	f3bf 8f6f 	isb	sy
 8004c0a:	f3bf 8f4f 	dsb	sy
 8004c0e:	617b      	str	r3, [r7, #20]
    }
 8004c10:	bf00      	nop
 8004c12:	e7fe      	b.n	8004c12 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8004c1a:	d90a      	bls.n	8004c32 <xQueueGenericCreate+0x86>
        __asm volatile
 8004c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c20:	f383 8811 	msr	BASEPRI, r3
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	613b      	str	r3, [r7, #16]
    }
 8004c2e:	bf00      	nop
 8004c30:	e7fe      	b.n	8004c30 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	3350      	adds	r3, #80	; 0x50
 8004c36:	4618      	mov	r0, r3
 8004c38:	f002 f938 	bl	8006eac <pvPortMalloc>
 8004c3c:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8004c3e:	6a3b      	ldr	r3, [r7, #32]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00d      	beq.n	8004c60 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	3350      	adds	r3, #80	; 0x50
 8004c4c:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c4e:	79fa      	ldrb	r2, [r7, #7]
 8004c50:	6a3b      	ldr	r3, [r7, #32]
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	4613      	mov	r3, r2
 8004c56:	69fa      	ldr	r2, [r7, #28]
 8004c58:	68b9      	ldr	r1, [r7, #8]
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f000 f805 	bl	8004c6a <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004c60:	6a3b      	ldr	r3, [r7, #32]
    }
 8004c62:	4618      	mov	r0, r3
 8004c64:	3728      	adds	r7, #40	; 0x28
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b084      	sub	sp, #16
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	60f8      	str	r0, [r7, #12]
 8004c72:	60b9      	str	r1, [r7, #8]
 8004c74:	607a      	str	r2, [r7, #4]
 8004c76:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d103      	bne.n	8004c86 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	e002      	b.n	8004c8c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c98:	2101      	movs	r1, #1
 8004c9a:	69b8      	ldr	r0, [r7, #24]
 8004c9c:	f7ff ff1e 	bl	8004adc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	78fa      	ldrb	r2, [r7, #3]
 8004ca4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8004ca8:	78fb      	ldrb	r3, [r7, #3]
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	68f9      	ldr	r1, [r7, #12]
 8004cae:	2073      	movs	r0, #115	; 0x73
 8004cb0:	f003 f91c 	bl	8007eec <SEGGER_SYSVIEW_RecordU32x3>
}
 8004cb4:	bf00      	nop
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b090      	sub	sp, #64	; 0x40
 8004cc0:	af02      	add	r7, sp, #8
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
 8004cc8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10a      	bne.n	8004cee <xQueueGenericSend+0x32>
        __asm volatile
 8004cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cdc:	f383 8811 	msr	BASEPRI, r3
 8004ce0:	f3bf 8f6f 	isb	sy
 8004ce4:	f3bf 8f4f 	dsb	sy
 8004ce8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004cea:	bf00      	nop
 8004cec:	e7fe      	b.n	8004cec <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d103      	bne.n	8004cfc <xQueueGenericSend+0x40>
 8004cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <xQueueGenericSend+0x44>
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e000      	b.n	8004d02 <xQueueGenericSend+0x46>
 8004d00:	2300      	movs	r3, #0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10a      	bne.n	8004d1c <xQueueGenericSend+0x60>
        __asm volatile
 8004d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0a:	f383 8811 	msr	BASEPRI, r3
 8004d0e:	f3bf 8f6f 	isb	sy
 8004d12:	f3bf 8f4f 	dsb	sy
 8004d16:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004d18:	bf00      	nop
 8004d1a:	e7fe      	b.n	8004d1a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d103      	bne.n	8004d2a <xQueueGenericSend+0x6e>
 8004d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d101      	bne.n	8004d2e <xQueueGenericSend+0x72>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e000      	b.n	8004d30 <xQueueGenericSend+0x74>
 8004d2e:	2300      	movs	r3, #0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10a      	bne.n	8004d4a <xQueueGenericSend+0x8e>
        __asm volatile
 8004d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d38:	f383 8811 	msr	BASEPRI, r3
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	623b      	str	r3, [r7, #32]
    }
 8004d46:	bf00      	nop
 8004d48:	e7fe      	b.n	8004d48 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d4a:	f001 f9cf 	bl	80060ec <xTaskGetSchedulerState>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d102      	bne.n	8004d5a <xQueueGenericSend+0x9e>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <xQueueGenericSend+0xa2>
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e000      	b.n	8004d60 <xQueueGenericSend+0xa4>
 8004d5e:	2300      	movs	r3, #0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d10a      	bne.n	8004d7a <xQueueGenericSend+0xbe>
        __asm volatile
 8004d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d68:	f383 8811 	msr	BASEPRI, r3
 8004d6c:	f3bf 8f6f 	isb	sy
 8004d70:	f3bf 8f4f 	dsb	sy
 8004d74:	61fb      	str	r3, [r7, #28]
    }
 8004d76:	bf00      	nop
 8004d78:	e7fe      	b.n	8004d78 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004d7a:	f001 ff6d 	bl	8006c58 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d302      	bcc.n	8004d90 <xQueueGenericSend+0xd4>
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d136      	bne.n	8004dfe <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8004d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d92:	4618      	mov	r0, r3
 8004d94:	f003 fe36 	bl	8008a04 <SEGGER_SYSVIEW_ShrinkId>
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	6879      	ldr	r1, [r7, #4]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	460b      	mov	r3, r1
 8004da2:	4601      	mov	r1, r0
 8004da4:	205a      	movs	r0, #90	; 0x5a
 8004da6:	f003 f917 	bl	8007fd8 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	68b9      	ldr	r1, [r7, #8]
 8004dae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004db0:	f000 fa78 	bl	80052a4 <prvCopyDataToQueue>
 8004db4:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d010      	beq.n	8004de0 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc0:	3324      	adds	r3, #36	; 0x24
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 fff2 	bl	8005dac <xTaskRemoveFromEventList>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d013      	beq.n	8004df6 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8004dce:	4b4d      	ldr	r3, [pc, #308]	; (8004f04 <xQueueGenericSend+0x248>)
 8004dd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	f3bf 8f4f 	dsb	sy
 8004dda:	f3bf 8f6f 	isb	sy
 8004dde:	e00a      	b.n	8004df6 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8004de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d007      	beq.n	8004df6 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004de6:	4b47      	ldr	r3, [pc, #284]	; (8004f04 <xQueueGenericSend+0x248>)
 8004de8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004df6:	f001 ff5f 	bl	8006cb8 <vPortExitCritical>
                return pdPASS;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e07d      	b.n	8004efa <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d110      	bne.n	8004e26 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004e04:	f001 ff58 	bl	8006cb8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8004e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f003 fdfa 	bl	8008a04 <SEGGER_SYSVIEW_ShrinkId>
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	6879      	ldr	r1, [r7, #4]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	460b      	mov	r3, r1
 8004e1a:	4601      	mov	r1, r0
 8004e1c:	205a      	movs	r0, #90	; 0x5a
 8004e1e:	f003 f8db 	bl	8007fd8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8004e22:	2300      	movs	r3, #0
 8004e24:	e069      	b.n	8004efa <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d106      	bne.n	8004e3a <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004e2c:	f107 0314 	add.w	r3, r7, #20
 8004e30:	4618      	mov	r0, r3
 8004e32:	f001 f821 	bl	8005e78 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004e36:	2301      	movs	r3, #1
 8004e38:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004e3a:	f001 ff3d 	bl	8006cb8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004e3e:	f000 fd6d 	bl	800591c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004e42:	f001 ff09 	bl	8006c58 <vPortEnterCritical>
 8004e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e4c:	b25b      	sxtb	r3, r3
 8004e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e52:	d103      	bne.n	8004e5c <xQueueGenericSend+0x1a0>
 8004e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e62:	b25b      	sxtb	r3, r3
 8004e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e68:	d103      	bne.n	8004e72 <xQueueGenericSend+0x1b6>
 8004e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e72:	f001 ff21 	bl	8006cb8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e76:	1d3a      	adds	r2, r7, #4
 8004e78:	f107 0314 	add.w	r3, r7, #20
 8004e7c:	4611      	mov	r1, r2
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f001 f810 	bl	8005ea4 <xTaskCheckForTimeOut>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d124      	bne.n	8004ed4 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004e8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e8c:	f000 fb02 	bl	8005494 <prvIsQueueFull>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d018      	beq.n	8004ec8 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e98:	3310      	adds	r3, #16
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	4611      	mov	r1, r2
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 ff32 	bl	8005d08 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004ea4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ea6:	f000 fa8d 	bl	80053c4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004eaa:	f000 fd45 	bl	8005938 <xTaskResumeAll>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f47f af62 	bne.w	8004d7a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8004eb6:	4b13      	ldr	r3, [pc, #76]	; (8004f04 <xQueueGenericSend+0x248>)
 8004eb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ebc:	601a      	str	r2, [r3, #0]
 8004ebe:	f3bf 8f4f 	dsb	sy
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	e758      	b.n	8004d7a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004ec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004eca:	f000 fa7b 	bl	80053c4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004ece:	f000 fd33 	bl	8005938 <xTaskResumeAll>
 8004ed2:	e752      	b.n	8004d7a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004ed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ed6:	f000 fa75 	bl	80053c4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004eda:	f000 fd2d 	bl	8005938 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8004ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f003 fd8f 	bl	8008a04 <SEGGER_SYSVIEW_ShrinkId>
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	6879      	ldr	r1, [r7, #4]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	460b      	mov	r3, r1
 8004ef0:	4601      	mov	r1, r0
 8004ef2:	205a      	movs	r0, #90	; 0x5a
 8004ef4:	f003 f870 	bl	8007fd8 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8004ef8:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3738      	adds	r7, #56	; 0x38
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	e000ed04 	.word	0xe000ed04

08004f08 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b090      	sub	sp, #64	; 0x40
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
 8004f14:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8004f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10a      	bne.n	8004f36 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8004f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f24:	f383 8811 	msr	BASEPRI, r3
 8004f28:	f3bf 8f6f 	isb	sy
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004f32:	bf00      	nop
 8004f34:	e7fe      	b.n	8004f34 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d103      	bne.n	8004f44 <xQueueGenericSendFromISR+0x3c>
 8004f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <xQueueGenericSendFromISR+0x40>
 8004f44:	2301      	movs	r3, #1
 8004f46:	e000      	b.n	8004f4a <xQueueGenericSendFromISR+0x42>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10a      	bne.n	8004f64 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8004f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f52:	f383 8811 	msr	BASEPRI, r3
 8004f56:	f3bf 8f6f 	isb	sy
 8004f5a:	f3bf 8f4f 	dsb	sy
 8004f5e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004f60:	bf00      	nop
 8004f62:	e7fe      	b.n	8004f62 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d103      	bne.n	8004f72 <xQueueGenericSendFromISR+0x6a>
 8004f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d101      	bne.n	8004f76 <xQueueGenericSendFromISR+0x6e>
 8004f72:	2301      	movs	r3, #1
 8004f74:	e000      	b.n	8004f78 <xQueueGenericSendFromISR+0x70>
 8004f76:	2300      	movs	r3, #0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10a      	bne.n	8004f92 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8004f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f80:	f383 8811 	msr	BASEPRI, r3
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	623b      	str	r3, [r7, #32]
    }
 8004f8e:	bf00      	nop
 8004f90:	e7fe      	b.n	8004f90 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f92:	f001 ff4b 	bl	8006e2c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8004f96:	f3ef 8211 	mrs	r2, BASEPRI
 8004f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9e:	f383 8811 	msr	BASEPRI, r3
 8004fa2:	f3bf 8f6f 	isb	sy
 8004fa6:	f3bf 8f4f 	dsb	sy
 8004faa:	61fa      	str	r2, [r7, #28]
 8004fac:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8004fae:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004fb0:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d302      	bcc.n	8004fc4 <xQueueGenericSendFromISR+0xbc>
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d148      	bne.n	8005056 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd2:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8004fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f003 fd14 	bl	8008a04 <SEGGER_SYSVIEW_ShrinkId>
 8004fdc:	4601      	mov	r1, r0
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	2060      	movs	r0, #96	; 0x60
 8004fe4:	f002 ff28 	bl	8007e38 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	68b9      	ldr	r1, [r7, #8]
 8004fec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004fee:	f000 f959 	bl	80052a4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004ff2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffa:	d112      	bne.n	8005022 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	2b00      	cmp	r3, #0
 8005002:	d025      	beq.n	8005050 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005006:	3324      	adds	r3, #36	; 0x24
 8005008:	4618      	mov	r0, r3
 800500a:	f000 fecf 	bl	8005dac <xTaskRemoveFromEventList>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d01d      	beq.n	8005050 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d01a      	beq.n	8005050 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	601a      	str	r2, [r3, #0]
 8005020:	e016      	b.n	8005050 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8005022:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005026:	2b7f      	cmp	r3, #127	; 0x7f
 8005028:	d10a      	bne.n	8005040 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 800502a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502e:	f383 8811 	msr	BASEPRI, r3
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	617b      	str	r3, [r7, #20]
    }
 800503c:	bf00      	nop
 800503e:	e7fe      	b.n	800503e <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005040:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005044:	3301      	adds	r3, #1
 8005046:	b2db      	uxtb	r3, r3
 8005048:	b25a      	sxtb	r2, r3
 800504a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8005050:	2301      	movs	r3, #1
 8005052:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8005054:	e00b      	b.n	800506e <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8005056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005058:	4618      	mov	r0, r3
 800505a:	f003 fcd3 	bl	8008a04 <SEGGER_SYSVIEW_ShrinkId>
 800505e:	4601      	mov	r1, r0
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	461a      	mov	r2, r3
 8005064:	2060      	movs	r0, #96	; 0x60
 8005066:	f002 fee7 	bl	8007e38 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800506a:	2300      	movs	r3, #0
 800506c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800506e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005070:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005078:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800507a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800507c:	4618      	mov	r0, r3
 800507e:	3740      	adds	r7, #64	; 0x40
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005084:	b590      	push	{r4, r7, lr}
 8005086:	b08f      	sub	sp, #60	; 0x3c
 8005088:	af02      	add	r7, sp, #8
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005090:	2300      	movs	r3, #0
 8005092:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10a      	bne.n	80050b4 <xQueueReceive+0x30>
        __asm volatile
 800509e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a2:	f383 8811 	msr	BASEPRI, r3
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	f3bf 8f4f 	dsb	sy
 80050ae:	623b      	str	r3, [r7, #32]
    }
 80050b0:	bf00      	nop
 80050b2:	e7fe      	b.n	80050b2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d103      	bne.n	80050c2 <xQueueReceive+0x3e>
 80050ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <xQueueReceive+0x42>
 80050c2:	2301      	movs	r3, #1
 80050c4:	e000      	b.n	80050c8 <xQueueReceive+0x44>
 80050c6:	2300      	movs	r3, #0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10a      	bne.n	80050e2 <xQueueReceive+0x5e>
        __asm volatile
 80050cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d0:	f383 8811 	msr	BASEPRI, r3
 80050d4:	f3bf 8f6f 	isb	sy
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	61fb      	str	r3, [r7, #28]
    }
 80050de:	bf00      	nop
 80050e0:	e7fe      	b.n	80050e0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050e2:	f001 f803 	bl	80060ec <xTaskGetSchedulerState>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d102      	bne.n	80050f2 <xQueueReceive+0x6e>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <xQueueReceive+0x72>
 80050f2:	2301      	movs	r3, #1
 80050f4:	e000      	b.n	80050f8 <xQueueReceive+0x74>
 80050f6:	2300      	movs	r3, #0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10a      	bne.n	8005112 <xQueueReceive+0x8e>
        __asm volatile
 80050fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	61bb      	str	r3, [r7, #24]
    }
 800510e:	bf00      	nop
 8005110:	e7fe      	b.n	8005110 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005112:	f001 fda1 	bl	8006c58 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800511c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511e:	2b00      	cmp	r3, #0
 8005120:	d02f      	beq.n	8005182 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005122:	68b9      	ldr	r1, [r7, #8]
 8005124:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005126:	f000 f927 	bl	8005378 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800512a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512c:	4618      	mov	r0, r3
 800512e:	f003 fc69 	bl	8008a04 <SEGGER_SYSVIEW_ShrinkId>
 8005132:	4604      	mov	r4, r0
 8005134:	2000      	movs	r0, #0
 8005136:	f003 fc65 	bl	8008a04 <SEGGER_SYSVIEW_ShrinkId>
 800513a:	4602      	mov	r2, r0
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2101      	movs	r1, #1
 8005140:	9100      	str	r1, [sp, #0]
 8005142:	4621      	mov	r1, r4
 8005144:	205c      	movs	r0, #92	; 0x5c
 8005146:	f002 ff47 	bl	8007fd8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514c:	1e5a      	subs	r2, r3, #1
 800514e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005150:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00f      	beq.n	800517a <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800515a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515c:	3310      	adds	r3, #16
 800515e:	4618      	mov	r0, r3
 8005160:	f000 fe24 	bl	8005dac <xTaskRemoveFromEventList>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d007      	beq.n	800517a <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800516a:	4b4d      	ldr	r3, [pc, #308]	; (80052a0 <xQueueReceive+0x21c>)
 800516c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005170:	601a      	str	r2, [r3, #0]
 8005172:	f3bf 8f4f 	dsb	sy
 8005176:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800517a:	f001 fd9d 	bl	8006cb8 <vPortExitCritical>
                return pdPASS;
 800517e:	2301      	movs	r3, #1
 8005180:	e08a      	b.n	8005298 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d113      	bne.n	80051b0 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005188:	f001 fd96 	bl	8006cb8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800518c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518e:	4618      	mov	r0, r3
 8005190:	f003 fc38 	bl	8008a04 <SEGGER_SYSVIEW_ShrinkId>
 8005194:	4604      	mov	r4, r0
 8005196:	2000      	movs	r0, #0
 8005198:	f003 fc34 	bl	8008a04 <SEGGER_SYSVIEW_ShrinkId>
 800519c:	4602      	mov	r2, r0
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2101      	movs	r1, #1
 80051a2:	9100      	str	r1, [sp, #0]
 80051a4:	4621      	mov	r1, r4
 80051a6:	205c      	movs	r0, #92	; 0x5c
 80051a8:	f002 ff16 	bl	8007fd8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80051ac:	2300      	movs	r3, #0
 80051ae:	e073      	b.n	8005298 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 80051b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d106      	bne.n	80051c4 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80051b6:	f107 0310 	add.w	r3, r7, #16
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 fe5c 	bl	8005e78 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80051c0:	2301      	movs	r3, #1
 80051c2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80051c4:	f001 fd78 	bl	8006cb8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80051c8:	f000 fba8 	bl	800591c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80051cc:	f001 fd44 	bl	8006c58 <vPortEnterCritical>
 80051d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051d6:	b25b      	sxtb	r3, r3
 80051d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051dc:	d103      	bne.n	80051e6 <xQueueReceive+0x162>
 80051de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051ec:	b25b      	sxtb	r3, r3
 80051ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f2:	d103      	bne.n	80051fc <xQueueReceive+0x178>
 80051f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051fc:	f001 fd5c 	bl	8006cb8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005200:	1d3a      	adds	r2, r7, #4
 8005202:	f107 0310 	add.w	r3, r7, #16
 8005206:	4611      	mov	r1, r2
 8005208:	4618      	mov	r0, r3
 800520a:	f000 fe4b 	bl	8005ea4 <xTaskCheckForTimeOut>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d124      	bne.n	800525e <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005216:	f000 f927 	bl	8005468 <prvIsQueueEmpty>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d018      	beq.n	8005252 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005222:	3324      	adds	r3, #36	; 0x24
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	4611      	mov	r1, r2
 8005228:	4618      	mov	r0, r3
 800522a:	f000 fd6d 	bl	8005d08 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800522e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005230:	f000 f8c8 	bl	80053c4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005234:	f000 fb80 	bl	8005938 <xTaskResumeAll>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	f47f af69 	bne.w	8005112 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8005240:	4b17      	ldr	r3, [pc, #92]	; (80052a0 <xQueueReceive+0x21c>)
 8005242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005246:	601a      	str	r2, [r3, #0]
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	e75f      	b.n	8005112 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8005252:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005254:	f000 f8b6 	bl	80053c4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005258:	f000 fb6e 	bl	8005938 <xTaskResumeAll>
 800525c:	e759      	b.n	8005112 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800525e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005260:	f000 f8b0 	bl	80053c4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005264:	f000 fb68 	bl	8005938 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005268:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800526a:	f000 f8fd 	bl	8005468 <prvIsQueueEmpty>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	f43f af4e 	beq.w	8005112 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8005276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005278:	4618      	mov	r0, r3
 800527a:	f003 fbc3 	bl	8008a04 <SEGGER_SYSVIEW_ShrinkId>
 800527e:	4604      	mov	r4, r0
 8005280:	2000      	movs	r0, #0
 8005282:	f003 fbbf 	bl	8008a04 <SEGGER_SYSVIEW_ShrinkId>
 8005286:	4602      	mov	r2, r0
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2101      	movs	r1, #1
 800528c:	9100      	str	r1, [sp, #0]
 800528e:	4621      	mov	r1, r4
 8005290:	205c      	movs	r0, #92	; 0x5c
 8005292:	f002 fea1 	bl	8007fd8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8005296:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005298:	4618      	mov	r0, r3
 800529a:	3734      	adds	r7, #52	; 0x34
 800529c:	46bd      	mov	sp, r7
 800529e:	bd90      	pop	{r4, r7, pc}
 80052a0:	e000ed04 	.word	0xe000ed04

080052a4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80052b0:	2300      	movs	r3, #0
 80052b2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10d      	bne.n	80052de <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d14d      	bne.n	8005366 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f000 ff2a 	bl	8006128 <xTaskPriorityDisinherit>
 80052d4:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	609a      	str	r2, [r3, #8]
 80052dc:	e043      	b.n	8005366 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d119      	bne.n	8005318 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6858      	ldr	r0, [r3, #4]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ec:	461a      	mov	r2, r3
 80052ee:	68b9      	ldr	r1, [r7, #8]
 80052f0:	f003 fe52 	bl	8008f98 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fc:	441a      	add	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	429a      	cmp	r2, r3
 800530c:	d32b      	bcc.n	8005366 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	605a      	str	r2, [r3, #4]
 8005316:	e026      	b.n	8005366 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	68d8      	ldr	r0, [r3, #12]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005320:	461a      	mov	r2, r3
 8005322:	68b9      	ldr	r1, [r7, #8]
 8005324:	f003 fe38 	bl	8008f98 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	68da      	ldr	r2, [r3, #12]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005330:	425b      	negs	r3, r3
 8005332:	441a      	add	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	68da      	ldr	r2, [r3, #12]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	429a      	cmp	r2, r3
 8005342:	d207      	bcs.n	8005354 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	689a      	ldr	r2, [r3, #8]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534c:	425b      	negs	r3, r3
 800534e:	441a      	add	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b02      	cmp	r3, #2
 8005358:	d105      	bne.n	8005366 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d002      	beq.n	8005366 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	3b01      	subs	r3, #1
 8005364:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	1c5a      	adds	r2, r3, #1
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800536e:	697b      	ldr	r3, [r7, #20]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3718      	adds	r7, #24
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005386:	2b00      	cmp	r3, #0
 8005388:	d018      	beq.n	80053bc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68da      	ldr	r2, [r3, #12]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	441a      	add	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68da      	ldr	r2, [r3, #12]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d303      	bcc.n	80053ac <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68d9      	ldr	r1, [r3, #12]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b4:	461a      	mov	r2, r3
 80053b6:	6838      	ldr	r0, [r7, #0]
 80053b8:	f003 fdee 	bl	8008f98 <memcpy>
    }
}
 80053bc:	bf00      	nop
 80053be:	3708      	adds	r7, #8
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80053cc:	f001 fc44 	bl	8006c58 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053d6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80053d8:	e011      	b.n	80053fe <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d012      	beq.n	8005408 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	3324      	adds	r3, #36	; 0x24
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 fce0 	bl	8005dac <xTaskRemoveFromEventList>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d001      	beq.n	80053f6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80053f2:	f000 fdbd 	bl	8005f70 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80053f6:	7bfb      	ldrb	r3, [r7, #15]
 80053f8:	3b01      	subs	r3, #1
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80053fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005402:	2b00      	cmp	r3, #0
 8005404:	dce9      	bgt.n	80053da <prvUnlockQueue+0x16>
 8005406:	e000      	b.n	800540a <prvUnlockQueue+0x46>
                        break;
 8005408:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	22ff      	movs	r2, #255	; 0xff
 800540e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8005412:	f001 fc51 	bl	8006cb8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8005416:	f001 fc1f 	bl	8006c58 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005420:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005422:	e011      	b.n	8005448 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d012      	beq.n	8005452 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3310      	adds	r3, #16
 8005430:	4618      	mov	r0, r3
 8005432:	f000 fcbb 	bl	8005dac <xTaskRemoveFromEventList>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d001      	beq.n	8005440 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800543c:	f000 fd98 	bl	8005f70 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8005440:	7bbb      	ldrb	r3, [r7, #14]
 8005442:	3b01      	subs	r3, #1
 8005444:	b2db      	uxtb	r3, r3
 8005446:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005448:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800544c:	2b00      	cmp	r3, #0
 800544e:	dce9      	bgt.n	8005424 <prvUnlockQueue+0x60>
 8005450:	e000      	b.n	8005454 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8005452:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	22ff      	movs	r2, #255	; 0xff
 8005458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800545c:	f001 fc2c 	bl	8006cb8 <vPortExitCritical>
}
 8005460:	bf00      	nop
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005470:	f001 fbf2 	bl	8006c58 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005478:	2b00      	cmp	r3, #0
 800547a:	d102      	bne.n	8005482 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800547c:	2301      	movs	r3, #1
 800547e:	60fb      	str	r3, [r7, #12]
 8005480:	e001      	b.n	8005486 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8005482:	2300      	movs	r3, #0
 8005484:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005486:	f001 fc17 	bl	8006cb8 <vPortExitCritical>

    return xReturn;
 800548a:	68fb      	ldr	r3, [r7, #12]
}
 800548c:	4618      	mov	r0, r3
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800549c:	f001 fbdc 	bl	8006c58 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d102      	bne.n	80054b2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80054ac:	2301      	movs	r3, #1
 80054ae:	60fb      	str	r3, [r7, #12]
 80054b0:	e001      	b.n	80054b6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80054b2:	2300      	movs	r3, #0
 80054b4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80054b6:	f001 fbff 	bl	8006cb8 <vPortExitCritical>

    return xReturn;
 80054ba:	68fb      	ldr	r3, [r7, #12]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80054ce:	2300      	movs	r3, #0
 80054d0:	60fb      	str	r3, [r7, #12]
 80054d2:	e01e      	b.n	8005512 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80054d4:	4a13      	ldr	r2, [pc, #76]	; (8005524 <vQueueAddToRegistry+0x60>)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d115      	bne.n	800550c <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80054e0:	4910      	ldr	r1, [pc, #64]	; (8005524 <vQueueAddToRegistry+0x60>)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80054ea:	4a0e      	ldr	r2, [pc, #56]	; (8005524 <vQueueAddToRegistry+0x60>)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	4413      	add	r3, r2
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4618      	mov	r0, r3
 80054fa:	f003 fa83 	bl	8008a04 <SEGGER_SYSVIEW_ShrinkId>
 80054fe:	4601      	mov	r1, r0
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	461a      	mov	r2, r3
 8005504:	2071      	movs	r0, #113	; 0x71
 8005506:	f002 fc97 	bl	8007e38 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800550a:	e006      	b.n	800551a <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	3301      	adds	r3, #1
 8005510:	60fb      	str	r3, [r7, #12]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2b07      	cmp	r3, #7
 8005516:	d9dd      	bls.n	80054d4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8005518:	bf00      	nop
 800551a:	bf00      	nop
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	20000184 	.word	0x20000184

08005528 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8005538:	f001 fb8e 	bl	8006c58 <vPortEnterCritical>
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005542:	b25b      	sxtb	r3, r3
 8005544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005548:	d103      	bne.n	8005552 <vQueueWaitForMessageRestricted+0x2a>
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005558:	b25b      	sxtb	r3, r3
 800555a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555e:	d103      	bne.n	8005568 <vQueueWaitForMessageRestricted+0x40>
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005568:	f001 fba6 	bl	8006cb8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005570:	2b00      	cmp	r3, #0
 8005572:	d106      	bne.n	8005582 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	3324      	adds	r3, #36	; 0x24
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	68b9      	ldr	r1, [r7, #8]
 800557c:	4618      	mov	r0, r3
 800557e:	f000 fbe7 	bl	8005d50 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8005582:	6978      	ldr	r0, [r7, #20]
 8005584:	f7ff ff1e 	bl	80053c4 <prvUnlockQueue>
    }
 8005588:	bf00      	nop
 800558a:	3718      	adds	r7, #24
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005590:	b580      	push	{r7, lr}
 8005592:	b08c      	sub	sp, #48	; 0x30
 8005594:	af04      	add	r7, sp, #16
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	603b      	str	r3, [r7, #0]
 800559c:	4613      	mov	r3, r2
 800559e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80055a0:	88fb      	ldrh	r3, [r7, #6]
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4618      	mov	r0, r3
 80055a6:	f001 fc81 	bl	8006eac <pvPortMalloc>
 80055aa:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00e      	beq.n	80055d0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80055b2:	2058      	movs	r0, #88	; 0x58
 80055b4:	f001 fc7a 	bl	8006eac <pvPortMalloc>
 80055b8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d003      	beq.n	80055c8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	631a      	str	r2, [r3, #48]	; 0x30
 80055c6:	e005      	b.n	80055d4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80055c8:	6978      	ldr	r0, [r7, #20]
 80055ca:	f001 fd4f 	bl	800706c <vPortFree>
 80055ce:	e001      	b.n	80055d4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80055d0:	2300      	movs	r3, #0
 80055d2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d013      	beq.n	8005602 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80055da:	88fa      	ldrh	r2, [r7, #6]
 80055dc:	2300      	movs	r3, #0
 80055de:	9303      	str	r3, [sp, #12]
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	9302      	str	r3, [sp, #8]
 80055e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e6:	9301      	str	r3, [sp, #4]
 80055e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ea:	9300      	str	r3, [sp, #0]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	68b9      	ldr	r1, [r7, #8]
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f000 f80e 	bl	8005612 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80055f6:	69f8      	ldr	r0, [r7, #28]
 80055f8:	f000 f8a2 	bl	8005740 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80055fc:	2301      	movs	r3, #1
 80055fe:	61bb      	str	r3, [r7, #24]
 8005600:	e002      	b.n	8005608 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005602:	f04f 33ff 	mov.w	r3, #4294967295
 8005606:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005608:	69bb      	ldr	r3, [r7, #24]
    }
 800560a:	4618      	mov	r0, r3
 800560c:	3720      	adds	r7, #32
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b088      	sub	sp, #32
 8005616:	af00      	add	r7, sp, #0
 8005618:	60f8      	str	r0, [r7, #12]
 800561a:	60b9      	str	r1, [r7, #8]
 800561c:	607a      	str	r2, [r7, #4]
 800561e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005622:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	461a      	mov	r2, r3
 800562a:	21a5      	movs	r1, #165	; 0xa5
 800562c:	f003 fcc2 	bl	8008fb4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800563a:	3b01      	subs	r3, #1
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4413      	add	r3, r2
 8005640:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	f023 0307 	bic.w	r3, r3, #7
 8005648:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	f003 0307 	and.w	r3, r3, #7
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00a      	beq.n	800566a <prvInitialiseNewTask+0x58>
        __asm volatile
 8005654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005658:	f383 8811 	msr	BASEPRI, r3
 800565c:	f3bf 8f6f 	isb	sy
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	617b      	str	r3, [r7, #20]
    }
 8005666:	bf00      	nop
 8005668:	e7fe      	b.n	8005668 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d01f      	beq.n	80056b0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005670:	2300      	movs	r3, #0
 8005672:	61fb      	str	r3, [r7, #28]
 8005674:	e012      	b.n	800569c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	4413      	add	r3, r2
 800567c:	7819      	ldrb	r1, [r3, #0]
 800567e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	4413      	add	r3, r2
 8005684:	3334      	adds	r3, #52	; 0x34
 8005686:	460a      	mov	r2, r1
 8005688:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	4413      	add	r3, r2
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d006      	beq.n	80056a4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	3301      	adds	r3, #1
 800569a:	61fb      	str	r3, [r7, #28]
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	2b09      	cmp	r3, #9
 80056a0:	d9e9      	bls.n	8005676 <prvInitialiseNewTask+0x64>
 80056a2:	e000      	b.n	80056a6 <prvInitialiseNewTask+0x94>
            {
                break;
 80056a4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80056a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80056ae:	e003      	b.n	80056b8 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80056b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80056b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ba:	2b04      	cmp	r3, #4
 80056bc:	d901      	bls.n	80056c2 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80056be:	2304      	movs	r3, #4
 80056c0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80056c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056c6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80056c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056cc:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80056ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d0:	2200      	movs	r2, #0
 80056d2:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80056d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d6:	3304      	adds	r3, #4
 80056d8:	4618      	mov	r0, r3
 80056da:	f7ff f96b 	bl	80049b4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80056de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e0:	3318      	adds	r3, #24
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7ff f966 	bl	80049b4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80056e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056ec:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f0:	f1c3 0205 	rsb	r2, r3, #5
 80056f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80056f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056fc:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80056fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005700:	3350      	adds	r3, #80	; 0x50
 8005702:	2204      	movs	r2, #4
 8005704:	2100      	movs	r1, #0
 8005706:	4618      	mov	r0, r3
 8005708:	f003 fc54 	bl	8008fb4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800570c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570e:	3354      	adds	r3, #84	; 0x54
 8005710:	2201      	movs	r2, #1
 8005712:	2100      	movs	r1, #0
 8005714:	4618      	mov	r0, r3
 8005716:	f003 fc4d 	bl	8008fb4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	68f9      	ldr	r1, [r7, #12]
 800571e:	69b8      	ldr	r0, [r7, #24]
 8005720:	f001 f968 	bl	80069f4 <pxPortInitialiseStack>
 8005724:	4602      	mov	r2, r0
 8005726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005728:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800572a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005732:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005734:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005736:	bf00      	nop
 8005738:	3720      	adds	r7, #32
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
	...

08005740 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005740:	b5b0      	push	{r4, r5, r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af02      	add	r7, sp, #8
 8005746:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005748:	f001 fa86 	bl	8006c58 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800574c:	4b3b      	ldr	r3, [pc, #236]	; (800583c <prvAddNewTaskToReadyList+0xfc>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	3301      	adds	r3, #1
 8005752:	4a3a      	ldr	r2, [pc, #232]	; (800583c <prvAddNewTaskToReadyList+0xfc>)
 8005754:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8005756:	4b3a      	ldr	r3, [pc, #232]	; (8005840 <prvAddNewTaskToReadyList+0x100>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d109      	bne.n	8005772 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800575e:	4a38      	ldr	r2, [pc, #224]	; (8005840 <prvAddNewTaskToReadyList+0x100>)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005764:	4b35      	ldr	r3, [pc, #212]	; (800583c <prvAddNewTaskToReadyList+0xfc>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d110      	bne.n	800578e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800576c:	f000 fc24 	bl	8005fb8 <prvInitialiseTaskLists>
 8005770:	e00d      	b.n	800578e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8005772:	4b34      	ldr	r3, [pc, #208]	; (8005844 <prvAddNewTaskToReadyList+0x104>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d109      	bne.n	800578e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800577a:	4b31      	ldr	r3, [pc, #196]	; (8005840 <prvAddNewTaskToReadyList+0x100>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005784:	429a      	cmp	r2, r3
 8005786:	d802      	bhi.n	800578e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005788:	4a2d      	ldr	r2, [pc, #180]	; (8005840 <prvAddNewTaskToReadyList+0x100>)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800578e:	4b2e      	ldr	r3, [pc, #184]	; (8005848 <prvAddNewTaskToReadyList+0x108>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	3301      	adds	r3, #1
 8005794:	4a2c      	ldr	r2, [pc, #176]	; (8005848 <prvAddNewTaskToReadyList+0x108>)
 8005796:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005798:	4b2b      	ldr	r3, [pc, #172]	; (8005848 <prvAddNewTaskToReadyList+0x108>)
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d016      	beq.n	80057d4 <prvAddNewTaskToReadyList+0x94>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4618      	mov	r0, r3
 80057aa:	f003 f805 	bl	80087b8 <SEGGER_SYSVIEW_OnTaskCreate>
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057be:	461d      	mov	r5, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	461c      	mov	r4, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ca:	1ae3      	subs	r3, r4, r3
 80057cc:	9300      	str	r3, [sp, #0]
 80057ce:	462b      	mov	r3, r5
 80057d0:	f003 fb24 	bl	8008e1c <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f003 f872 	bl	80088c0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e0:	2201      	movs	r2, #1
 80057e2:	409a      	lsls	r2, r3
 80057e4:	4b19      	ldr	r3, [pc, #100]	; (800584c <prvAddNewTaskToReadyList+0x10c>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	4a18      	ldr	r2, [pc, #96]	; (800584c <prvAddNewTaskToReadyList+0x10c>)
 80057ec:	6013      	str	r3, [r2, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f2:	4613      	mov	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	4413      	add	r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	4a15      	ldr	r2, [pc, #84]	; (8005850 <prvAddNewTaskToReadyList+0x110>)
 80057fc:	441a      	add	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	3304      	adds	r3, #4
 8005802:	4619      	mov	r1, r3
 8005804:	4610      	mov	r0, r2
 8005806:	f7ff f8e2 	bl	80049ce <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800580a:	f001 fa55 	bl	8006cb8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800580e:	4b0d      	ldr	r3, [pc, #52]	; (8005844 <prvAddNewTaskToReadyList+0x104>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00e      	beq.n	8005834 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005816:	4b0a      	ldr	r3, [pc, #40]	; (8005840 <prvAddNewTaskToReadyList+0x100>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005820:	429a      	cmp	r2, r3
 8005822:	d207      	bcs.n	8005834 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005824:	4b0b      	ldr	r3, [pc, #44]	; (8005854 <prvAddNewTaskToReadyList+0x114>)
 8005826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800582a:	601a      	str	r2, [r3, #0]
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005834:	bf00      	nop
 8005836:	3708      	adds	r7, #8
 8005838:	46bd      	mov	sp, r7
 800583a:	bdb0      	pop	{r4, r5, r7, pc}
 800583c:	2000029c 	.word	0x2000029c
 8005840:	200001c4 	.word	0x200001c4
 8005844:	200002a8 	.word	0x200002a8
 8005848:	200002b8 	.word	0x200002b8
 800584c:	200002a4 	.word	0x200002a4
 8005850:	200001c8 	.word	0x200001c8
 8005854:	e000ed04 	.word	0xe000ed04

08005858 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800585e:	4b27      	ldr	r3, [pc, #156]	; (80058fc <vTaskStartScheduler+0xa4>)
 8005860:	9301      	str	r3, [sp, #4]
 8005862:	2300      	movs	r3, #0
 8005864:	9300      	str	r3, [sp, #0]
 8005866:	2300      	movs	r3, #0
 8005868:	2282      	movs	r2, #130	; 0x82
 800586a:	4925      	ldr	r1, [pc, #148]	; (8005900 <vTaskStartScheduler+0xa8>)
 800586c:	4825      	ldr	r0, [pc, #148]	; (8005904 <vTaskStartScheduler+0xac>)
 800586e:	f7ff fe8f 	bl	8005590 <xTaskCreate>
 8005872:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d102      	bne.n	8005880 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800587a:	f000 fd4d 	bl	8006318 <xTimerCreateTimerTask>
 800587e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d124      	bne.n	80058d0 <vTaskStartScheduler+0x78>
        __asm volatile
 8005886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588a:	f383 8811 	msr	BASEPRI, r3
 800588e:	f3bf 8f6f 	isb	sy
 8005892:	f3bf 8f4f 	dsb	sy
 8005896:	60bb      	str	r3, [r7, #8]
    }
 8005898:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800589a:	4b1b      	ldr	r3, [pc, #108]	; (8005908 <vTaskStartScheduler+0xb0>)
 800589c:	f04f 32ff 	mov.w	r2, #4294967295
 80058a0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80058a2:	4b1a      	ldr	r3, [pc, #104]	; (800590c <vTaskStartScheduler+0xb4>)
 80058a4:	2201      	movs	r2, #1
 80058a6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80058a8:	4b19      	ldr	r3, [pc, #100]	; (8005910 <vTaskStartScheduler+0xb8>)
 80058aa:	2200      	movs	r2, #0
 80058ac:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80058ae:	4b19      	ldr	r3, [pc, #100]	; (8005914 <vTaskStartScheduler+0xbc>)
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	4b12      	ldr	r3, [pc, #72]	; (80058fc <vTaskStartScheduler+0xa4>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d102      	bne.n	80058c0 <vTaskStartScheduler+0x68>
 80058ba:	f002 ff61 	bl	8008780 <SEGGER_SYSVIEW_OnIdle>
 80058be:	e004      	b.n	80058ca <vTaskStartScheduler+0x72>
 80058c0:	4b14      	ldr	r3, [pc, #80]	; (8005914 <vTaskStartScheduler+0xbc>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f002 ffb9 	bl	800883c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80058ca:	f001 f923 	bl	8006b14 <xPortStartScheduler>
 80058ce:	e00e      	b.n	80058ee <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d6:	d10a      	bne.n	80058ee <vTaskStartScheduler+0x96>
        __asm volatile
 80058d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058dc:	f383 8811 	msr	BASEPRI, r3
 80058e0:	f3bf 8f6f 	isb	sy
 80058e4:	f3bf 8f4f 	dsb	sy
 80058e8:	607b      	str	r3, [r7, #4]
    }
 80058ea:	bf00      	nop
 80058ec:	e7fe      	b.n	80058ec <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80058ee:	4b0a      	ldr	r3, [pc, #40]	; (8005918 <vTaskStartScheduler+0xc0>)
 80058f0:	681b      	ldr	r3, [r3, #0]
}
 80058f2:	bf00      	nop
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	200002c0 	.word	0x200002c0
 8005900:	080091f8 	.word	0x080091f8
 8005904:	08005f89 	.word	0x08005f89
 8005908:	200002bc 	.word	0x200002bc
 800590c:	200002a8 	.word	0x200002a8
 8005910:	200002a0 	.word	0x200002a0
 8005914:	200001c4 	.word	0x200001c4
 8005918:	20000008 	.word	0x20000008

0800591c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800591c:	b480      	push	{r7}
 800591e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005920:	4b04      	ldr	r3, [pc, #16]	; (8005934 <vTaskSuspendAll+0x18>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	3301      	adds	r3, #1
 8005926:	4a03      	ldr	r2, [pc, #12]	; (8005934 <vTaskSuspendAll+0x18>)
 8005928:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800592a:	bf00      	nop
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr
 8005934:	200002c4 	.word	0x200002c4

08005938 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800593e:	2300      	movs	r3, #0
 8005940:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005942:	2300      	movs	r3, #0
 8005944:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005946:	4b43      	ldr	r3, [pc, #268]	; (8005a54 <xTaskResumeAll+0x11c>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10a      	bne.n	8005964 <xTaskResumeAll+0x2c>
        __asm volatile
 800594e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005952:	f383 8811 	msr	BASEPRI, r3
 8005956:	f3bf 8f6f 	isb	sy
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	603b      	str	r3, [r7, #0]
    }
 8005960:	bf00      	nop
 8005962:	e7fe      	b.n	8005962 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005964:	f001 f978 	bl	8006c58 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005968:	4b3a      	ldr	r3, [pc, #232]	; (8005a54 <xTaskResumeAll+0x11c>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3b01      	subs	r3, #1
 800596e:	4a39      	ldr	r2, [pc, #228]	; (8005a54 <xTaskResumeAll+0x11c>)
 8005970:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005972:	4b38      	ldr	r3, [pc, #224]	; (8005a54 <xTaskResumeAll+0x11c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d165      	bne.n	8005a46 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800597a:	4b37      	ldr	r3, [pc, #220]	; (8005a58 <xTaskResumeAll+0x120>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d061      	beq.n	8005a46 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005982:	e032      	b.n	80059ea <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005984:	4b35      	ldr	r3, [pc, #212]	; (8005a5c <xTaskResumeAll+0x124>)
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	3318      	adds	r3, #24
 8005990:	4618      	mov	r0, r3
 8005992:	f7ff f879 	bl	8004a88 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	3304      	adds	r3, #4
 800599a:	4618      	mov	r0, r3
 800599c:	f7ff f874 	bl	8004a88 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f002 ff8c 	bl	80088c0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ac:	2201      	movs	r2, #1
 80059ae:	409a      	lsls	r2, r3
 80059b0:	4b2b      	ldr	r3, [pc, #172]	; (8005a60 <xTaskResumeAll+0x128>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	4a2a      	ldr	r2, [pc, #168]	; (8005a60 <xTaskResumeAll+0x128>)
 80059b8:	6013      	str	r3, [r2, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059be:	4613      	mov	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	4413      	add	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4a27      	ldr	r2, [pc, #156]	; (8005a64 <xTaskResumeAll+0x12c>)
 80059c8:	441a      	add	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	3304      	adds	r3, #4
 80059ce:	4619      	mov	r1, r3
 80059d0:	4610      	mov	r0, r2
 80059d2:	f7fe fffc 	bl	80049ce <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059da:	4b23      	ldr	r3, [pc, #140]	; (8005a68 <xTaskResumeAll+0x130>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d302      	bcc.n	80059ea <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80059e4:	4b21      	ldr	r3, [pc, #132]	; (8005a6c <xTaskResumeAll+0x134>)
 80059e6:	2201      	movs	r2, #1
 80059e8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059ea:	4b1c      	ldr	r3, [pc, #112]	; (8005a5c <xTaskResumeAll+0x124>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1c8      	bne.n	8005984 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80059f8:	f000 fb5c 	bl	80060b4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80059fc:	4b1c      	ldr	r3, [pc, #112]	; (8005a70 <xTaskResumeAll+0x138>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d010      	beq.n	8005a2a <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005a08:	f000 f858 	bl	8005abc <xTaskIncrementTick>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d002      	beq.n	8005a18 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8005a12:	4b16      	ldr	r3, [pc, #88]	; (8005a6c <xTaskResumeAll+0x134>)
 8005a14:	2201      	movs	r2, #1
 8005a16:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1f1      	bne.n	8005a08 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8005a24:	4b12      	ldr	r3, [pc, #72]	; (8005a70 <xTaskResumeAll+0x138>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005a2a:	4b10      	ldr	r3, [pc, #64]	; (8005a6c <xTaskResumeAll+0x134>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d009      	beq.n	8005a46 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8005a32:	2301      	movs	r3, #1
 8005a34:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005a36:	4b0f      	ldr	r3, [pc, #60]	; (8005a74 <xTaskResumeAll+0x13c>)
 8005a38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a3c:	601a      	str	r2, [r3, #0]
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005a46:	f001 f937 	bl	8006cb8 <vPortExitCritical>

    return xAlreadyYielded;
 8005a4a:	68bb      	ldr	r3, [r7, #8]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	200002c4 	.word	0x200002c4
 8005a58:	2000029c 	.word	0x2000029c
 8005a5c:	2000025c 	.word	0x2000025c
 8005a60:	200002a4 	.word	0x200002a4
 8005a64:	200001c8 	.word	0x200001c8
 8005a68:	200001c4 	.word	0x200001c4
 8005a6c:	200002b0 	.word	0x200002b0
 8005a70:	200002ac 	.word	0x200002ac
 8005a74:	e000ed04 	.word	0xe000ed04

08005a78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005a7e:	4b05      	ldr	r3, [pc, #20]	; (8005a94 <xTaskGetTickCount+0x1c>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005a84:	687b      	ldr	r3, [r7, #4]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	200002a0 	.word	0x200002a0

08005a98 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a9e:	f001 f9c5 	bl	8006e2c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8005aa6:	4b04      	ldr	r3, [pc, #16]	; (8005ab8 <xTaskGetTickCountFromISR+0x20>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005aac:	683b      	ldr	r3, [r7, #0]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3708      	adds	r7, #8
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	200002a0 	.word	0x200002a0

08005abc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ac6:	4b50      	ldr	r3, [pc, #320]	; (8005c08 <xTaskIncrementTick+0x14c>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f040 8092 	bne.w	8005bf4 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ad0:	4b4e      	ldr	r3, [pc, #312]	; (8005c0c <xTaskIncrementTick+0x150>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005ad8:	4a4c      	ldr	r2, [pc, #304]	; (8005c0c <xTaskIncrementTick+0x150>)
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d120      	bne.n	8005b26 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8005ae4:	4b4a      	ldr	r3, [pc, #296]	; (8005c10 <xTaskIncrementTick+0x154>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00a      	beq.n	8005b04 <xTaskIncrementTick+0x48>
        __asm volatile
 8005aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af2:	f383 8811 	msr	BASEPRI, r3
 8005af6:	f3bf 8f6f 	isb	sy
 8005afa:	f3bf 8f4f 	dsb	sy
 8005afe:	603b      	str	r3, [r7, #0]
    }
 8005b00:	bf00      	nop
 8005b02:	e7fe      	b.n	8005b02 <xTaskIncrementTick+0x46>
 8005b04:	4b42      	ldr	r3, [pc, #264]	; (8005c10 <xTaskIncrementTick+0x154>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	60fb      	str	r3, [r7, #12]
 8005b0a:	4b42      	ldr	r3, [pc, #264]	; (8005c14 <xTaskIncrementTick+0x158>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a40      	ldr	r2, [pc, #256]	; (8005c10 <xTaskIncrementTick+0x154>)
 8005b10:	6013      	str	r3, [r2, #0]
 8005b12:	4a40      	ldr	r2, [pc, #256]	; (8005c14 <xTaskIncrementTick+0x158>)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6013      	str	r3, [r2, #0]
 8005b18:	4b3f      	ldr	r3, [pc, #252]	; (8005c18 <xTaskIncrementTick+0x15c>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	4a3e      	ldr	r2, [pc, #248]	; (8005c18 <xTaskIncrementTick+0x15c>)
 8005b20:	6013      	str	r3, [r2, #0]
 8005b22:	f000 fac7 	bl	80060b4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005b26:	4b3d      	ldr	r3, [pc, #244]	; (8005c1c <xTaskIncrementTick+0x160>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d34c      	bcc.n	8005bca <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b30:	4b37      	ldr	r3, [pc, #220]	; (8005c10 <xTaskIncrementTick+0x154>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d104      	bne.n	8005b44 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b3a:	4b38      	ldr	r3, [pc, #224]	; (8005c1c <xTaskIncrementTick+0x160>)
 8005b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b40:	601a      	str	r2, [r3, #0]
                    break;
 8005b42:	e042      	b.n	8005bca <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b44:	4b32      	ldr	r3, [pc, #200]	; (8005c10 <xTaskIncrementTick+0x154>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d203      	bcs.n	8005b64 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005b5c:	4a2f      	ldr	r2, [pc, #188]	; (8005c1c <xTaskIncrementTick+0x160>)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005b62:	e032      	b.n	8005bca <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	3304      	adds	r3, #4
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7fe ff8d 	bl	8004a88 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d004      	beq.n	8005b80 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	3318      	adds	r3, #24
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fe ff84 	bl	8004a88 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	4618      	mov	r0, r3
 8005b84:	f002 fe9c 	bl	80088c0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	409a      	lsls	r2, r3
 8005b90:	4b23      	ldr	r3, [pc, #140]	; (8005c20 <xTaskIncrementTick+0x164>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	4a22      	ldr	r2, [pc, #136]	; (8005c20 <xTaskIncrementTick+0x164>)
 8005b98:	6013      	str	r3, [r2, #0]
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4a1f      	ldr	r2, [pc, #124]	; (8005c24 <xTaskIncrementTick+0x168>)
 8005ba8:	441a      	add	r2, r3
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	3304      	adds	r3, #4
 8005bae:	4619      	mov	r1, r3
 8005bb0:	4610      	mov	r0, r2
 8005bb2:	f7fe ff0c 	bl	80049ce <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bba:	4b1b      	ldr	r3, [pc, #108]	; (8005c28 <xTaskIncrementTick+0x16c>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d3b5      	bcc.n	8005b30 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bc8:	e7b2      	b.n	8005b30 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005bca:	4b17      	ldr	r3, [pc, #92]	; (8005c28 <xTaskIncrementTick+0x16c>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd0:	4914      	ldr	r1, [pc, #80]	; (8005c24 <xTaskIncrementTick+0x168>)
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4413      	add	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	440b      	add	r3, r1
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d901      	bls.n	8005be6 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8005be2:	2301      	movs	r3, #1
 8005be4:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8005be6:	4b11      	ldr	r3, [pc, #68]	; (8005c2c <xTaskIncrementTick+0x170>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d007      	beq.n	8005bfe <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	617b      	str	r3, [r7, #20]
 8005bf2:	e004      	b.n	8005bfe <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005bf4:	4b0e      	ldr	r3, [pc, #56]	; (8005c30 <xTaskIncrementTick+0x174>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	4a0d      	ldr	r2, [pc, #52]	; (8005c30 <xTaskIncrementTick+0x174>)
 8005bfc:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8005bfe:	697b      	ldr	r3, [r7, #20]
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3718      	adds	r7, #24
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	200002c4 	.word	0x200002c4
 8005c0c:	200002a0 	.word	0x200002a0
 8005c10:	20000254 	.word	0x20000254
 8005c14:	20000258 	.word	0x20000258
 8005c18:	200002b4 	.word	0x200002b4
 8005c1c:	200002bc 	.word	0x200002bc
 8005c20:	200002a4 	.word	0x200002a4
 8005c24:	200001c8 	.word	0x200001c8
 8005c28:	200001c4 	.word	0x200001c4
 8005c2c:	200002b0 	.word	0x200002b0
 8005c30:	200002ac 	.word	0x200002ac

08005c34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c3a:	4b2d      	ldr	r3, [pc, #180]	; (8005cf0 <vTaskSwitchContext+0xbc>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005c42:	4b2c      	ldr	r3, [pc, #176]	; (8005cf4 <vTaskSwitchContext+0xc0>)
 8005c44:	2201      	movs	r2, #1
 8005c46:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8005c48:	e04d      	b.n	8005ce6 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8005c4a:	4b2a      	ldr	r3, [pc, #168]	; (8005cf4 <vTaskSwitchContext+0xc0>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c50:	4b29      	ldr	r3, [pc, #164]	; (8005cf8 <vTaskSwitchContext+0xc4>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	fab3 f383 	clz	r3, r3
 8005c5c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005c5e:	7afb      	ldrb	r3, [r7, #11]
 8005c60:	f1c3 031f 	rsb	r3, r3, #31
 8005c64:	617b      	str	r3, [r7, #20]
 8005c66:	4925      	ldr	r1, [pc, #148]	; (8005cfc <vTaskSwitchContext+0xc8>)
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4413      	add	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	440b      	add	r3, r1
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10a      	bne.n	8005c90 <vTaskSwitchContext+0x5c>
        __asm volatile
 8005c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7e:	f383 8811 	msr	BASEPRI, r3
 8005c82:	f3bf 8f6f 	isb	sy
 8005c86:	f3bf 8f4f 	dsb	sy
 8005c8a:	607b      	str	r3, [r7, #4]
    }
 8005c8c:	bf00      	nop
 8005c8e:	e7fe      	b.n	8005c8e <vTaskSwitchContext+0x5a>
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	4613      	mov	r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4413      	add	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4a18      	ldr	r2, [pc, #96]	; (8005cfc <vTaskSwitchContext+0xc8>)
 8005c9c:	4413      	add	r3, r2
 8005c9e:	613b      	str	r3, [r7, #16]
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	685a      	ldr	r2, [r3, #4]
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	605a      	str	r2, [r3, #4]
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	3308      	adds	r3, #8
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d104      	bne.n	8005cc0 <vTaskSwitchContext+0x8c>
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	605a      	str	r2, [r3, #4]
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	4a0e      	ldr	r2, [pc, #56]	; (8005d00 <vTaskSwitchContext+0xcc>)
 8005cc8:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8005cca:	4b0d      	ldr	r3, [pc, #52]	; (8005d00 <vTaskSwitchContext+0xcc>)
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	4b0d      	ldr	r3, [pc, #52]	; (8005d04 <vTaskSwitchContext+0xd0>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d102      	bne.n	8005cdc <vTaskSwitchContext+0xa8>
 8005cd6:	f002 fd53 	bl	8008780 <SEGGER_SYSVIEW_OnIdle>
}
 8005cda:	e004      	b.n	8005ce6 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8005cdc:	4b08      	ldr	r3, [pc, #32]	; (8005d00 <vTaskSwitchContext+0xcc>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f002 fdab 	bl	800883c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8005ce6:	bf00      	nop
 8005ce8:	3718      	adds	r7, #24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	200002c4 	.word	0x200002c4
 8005cf4:	200002b0 	.word	0x200002b0
 8005cf8:	200002a4 	.word	0x200002a4
 8005cfc:	200001c8 	.word	0x200001c8
 8005d00:	200001c4 	.word	0x200001c4
 8005d04:	200002c0 	.word	0x200002c0

08005d08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10a      	bne.n	8005d2e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8005d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1c:	f383 8811 	msr	BASEPRI, r3
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	f3bf 8f4f 	dsb	sy
 8005d28:	60fb      	str	r3, [r7, #12]
    }
 8005d2a:	bf00      	nop
 8005d2c:	e7fe      	b.n	8005d2c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d2e:	4b07      	ldr	r3, [pc, #28]	; (8005d4c <vTaskPlaceOnEventList+0x44>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	3318      	adds	r3, #24
 8005d34:	4619      	mov	r1, r3
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f7fe fe6d 	bl	8004a16 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d3c:	2101      	movs	r1, #1
 8005d3e:	6838      	ldr	r0, [r7, #0]
 8005d40:	f000 fa72 	bl	8006228 <prvAddCurrentTaskToDelayedList>
}
 8005d44:	bf00      	nop
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	200001c4 	.word	0x200001c4

08005d50 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b086      	sub	sp, #24
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10a      	bne.n	8005d78 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8005d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d66:	f383 8811 	msr	BASEPRI, r3
 8005d6a:	f3bf 8f6f 	isb	sy
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	617b      	str	r3, [r7, #20]
    }
 8005d74:	bf00      	nop
 8005d76:	e7fe      	b.n	8005d76 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d78:	4b0b      	ldr	r3, [pc, #44]	; (8005da8 <vTaskPlaceOnEventListRestricted+0x58>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	3318      	adds	r3, #24
 8005d7e:	4619      	mov	r1, r3
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f7fe fe24 	bl	80049ce <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d002      	beq.n	8005d92 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8005d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d90:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8005d92:	2024      	movs	r0, #36	; 0x24
 8005d94:	f001 fff6 	bl	8007d84 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005d98:	6879      	ldr	r1, [r7, #4]
 8005d9a:	68b8      	ldr	r0, [r7, #8]
 8005d9c:	f000 fa44 	bl	8006228 <prvAddCurrentTaskToDelayedList>
    }
 8005da0:	bf00      	nop
 8005da2:	3718      	adds	r7, #24
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	200001c4 	.word	0x200001c4

08005dac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b086      	sub	sp, #24
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10a      	bne.n	8005dd8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8005dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc6:	f383 8811 	msr	BASEPRI, r3
 8005dca:	f3bf 8f6f 	isb	sy
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	60fb      	str	r3, [r7, #12]
    }
 8005dd4:	bf00      	nop
 8005dd6:	e7fe      	b.n	8005dd6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	3318      	adds	r3, #24
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7fe fe53 	bl	8004a88 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005de2:	4b1f      	ldr	r3, [pc, #124]	; (8005e60 <xTaskRemoveFromEventList+0xb4>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d120      	bne.n	8005e2c <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	3304      	adds	r3, #4
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7fe fe4a 	bl	8004a88 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f002 fd62 	bl	80088c0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e00:	2201      	movs	r2, #1
 8005e02:	409a      	lsls	r2, r3
 8005e04:	4b17      	ldr	r3, [pc, #92]	; (8005e64 <xTaskRemoveFromEventList+0xb8>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	4a16      	ldr	r2, [pc, #88]	; (8005e64 <xTaskRemoveFromEventList+0xb8>)
 8005e0c:	6013      	str	r3, [r2, #0]
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e12:	4613      	mov	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4413      	add	r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4a13      	ldr	r2, [pc, #76]	; (8005e68 <xTaskRemoveFromEventList+0xbc>)
 8005e1c:	441a      	add	r2, r3
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	3304      	adds	r3, #4
 8005e22:	4619      	mov	r1, r3
 8005e24:	4610      	mov	r0, r2
 8005e26:	f7fe fdd2 	bl	80049ce <vListInsertEnd>
 8005e2a:	e005      	b.n	8005e38 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	3318      	adds	r3, #24
 8005e30:	4619      	mov	r1, r3
 8005e32:	480e      	ldr	r0, [pc, #56]	; (8005e6c <xTaskRemoveFromEventList+0xc0>)
 8005e34:	f7fe fdcb 	bl	80049ce <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e3c:	4b0c      	ldr	r3, [pc, #48]	; (8005e70 <xTaskRemoveFromEventList+0xc4>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d905      	bls.n	8005e52 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005e46:	2301      	movs	r3, #1
 8005e48:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005e4a:	4b0a      	ldr	r3, [pc, #40]	; (8005e74 <xTaskRemoveFromEventList+0xc8>)
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	601a      	str	r2, [r3, #0]
 8005e50:	e001      	b.n	8005e56 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8005e52:	2300      	movs	r3, #0
 8005e54:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005e56:	697b      	ldr	r3, [r7, #20]
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3718      	adds	r7, #24
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	200002c4 	.word	0x200002c4
 8005e64:	200002a4 	.word	0x200002a4
 8005e68:	200001c8 	.word	0x200001c8
 8005e6c:	2000025c 	.word	0x2000025c
 8005e70:	200001c4 	.word	0x200001c4
 8005e74:	200002b0 	.word	0x200002b0

08005e78 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005e80:	4b06      	ldr	r3, [pc, #24]	; (8005e9c <vTaskInternalSetTimeOutState+0x24>)
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005e88:	4b05      	ldr	r3, [pc, #20]	; (8005ea0 <vTaskInternalSetTimeOutState+0x28>)
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	605a      	str	r2, [r3, #4]
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr
 8005e9c:	200002b4 	.word	0x200002b4
 8005ea0:	200002a0 	.word	0x200002a0

08005ea4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b088      	sub	sp, #32
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d10a      	bne.n	8005eca <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8005eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb8:	f383 8811 	msr	BASEPRI, r3
 8005ebc:	f3bf 8f6f 	isb	sy
 8005ec0:	f3bf 8f4f 	dsb	sy
 8005ec4:	613b      	str	r3, [r7, #16]
    }
 8005ec6:	bf00      	nop
 8005ec8:	e7fe      	b.n	8005ec8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10a      	bne.n	8005ee6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8005ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed4:	f383 8811 	msr	BASEPRI, r3
 8005ed8:	f3bf 8f6f 	isb	sy
 8005edc:	f3bf 8f4f 	dsb	sy
 8005ee0:	60fb      	str	r3, [r7, #12]
    }
 8005ee2:	bf00      	nop
 8005ee4:	e7fe      	b.n	8005ee4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8005ee6:	f000 feb7 	bl	8006c58 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005eea:	4b1f      	ldr	r3, [pc, #124]	; (8005f68 <xTaskCheckForTimeOut+0xc4>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	69ba      	ldr	r2, [r7, #24]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f02:	d102      	bne.n	8005f0a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005f04:	2300      	movs	r3, #0
 8005f06:	61fb      	str	r3, [r7, #28]
 8005f08:	e026      	b.n	8005f58 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	4b17      	ldr	r3, [pc, #92]	; (8005f6c <xTaskCheckForTimeOut+0xc8>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d00a      	beq.n	8005f2c <xTaskCheckForTimeOut+0x88>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d305      	bcc.n	8005f2c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005f20:	2301      	movs	r3, #1
 8005f22:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	2200      	movs	r2, #0
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	e015      	b.n	8005f58 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d20b      	bcs.n	8005f4e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	1ad2      	subs	r2, r2, r3
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7ff ff98 	bl	8005e78 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	61fb      	str	r3, [r7, #28]
 8005f4c:	e004      	b.n	8005f58 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	2200      	movs	r2, #0
 8005f52:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005f54:	2301      	movs	r3, #1
 8005f56:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005f58:	f000 feae 	bl	8006cb8 <vPortExitCritical>

    return xReturn;
 8005f5c:	69fb      	ldr	r3, [r7, #28]
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3720      	adds	r7, #32
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	200002a0 	.word	0x200002a0
 8005f6c:	200002b4 	.word	0x200002b4

08005f70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005f70:	b480      	push	{r7}
 8005f72:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005f74:	4b03      	ldr	r3, [pc, #12]	; (8005f84 <vTaskMissedYield+0x14>)
 8005f76:	2201      	movs	r2, #1
 8005f78:	601a      	str	r2, [r3, #0]
}
 8005f7a:	bf00      	nop
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr
 8005f84:	200002b0 	.word	0x200002b0

08005f88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005f90:	f000 f852 	bl	8006038 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f94:	4b06      	ldr	r3, [pc, #24]	; (8005fb0 <prvIdleTask+0x28>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d9f9      	bls.n	8005f90 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8005f9c:	4b05      	ldr	r3, [pc, #20]	; (8005fb4 <prvIdleTask+0x2c>)
 8005f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fa2:	601a      	str	r2, [r3, #0]
 8005fa4:	f3bf 8f4f 	dsb	sy
 8005fa8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005fac:	e7f0      	b.n	8005f90 <prvIdleTask+0x8>
 8005fae:	bf00      	nop
 8005fb0:	200001c8 	.word	0x200001c8
 8005fb4:	e000ed04 	.word	0xe000ed04

08005fb8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	607b      	str	r3, [r7, #4]
 8005fc2:	e00c      	b.n	8005fde <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4413      	add	r3, r2
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4a12      	ldr	r2, [pc, #72]	; (8006018 <prvInitialiseTaskLists+0x60>)
 8005fd0:	4413      	add	r3, r2
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7fe fcce 	bl	8004974 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	607b      	str	r3, [r7, #4]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b04      	cmp	r3, #4
 8005fe2:	d9ef      	bls.n	8005fc4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005fe4:	480d      	ldr	r0, [pc, #52]	; (800601c <prvInitialiseTaskLists+0x64>)
 8005fe6:	f7fe fcc5 	bl	8004974 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005fea:	480d      	ldr	r0, [pc, #52]	; (8006020 <prvInitialiseTaskLists+0x68>)
 8005fec:	f7fe fcc2 	bl	8004974 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005ff0:	480c      	ldr	r0, [pc, #48]	; (8006024 <prvInitialiseTaskLists+0x6c>)
 8005ff2:	f7fe fcbf 	bl	8004974 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8005ff6:	480c      	ldr	r0, [pc, #48]	; (8006028 <prvInitialiseTaskLists+0x70>)
 8005ff8:	f7fe fcbc 	bl	8004974 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8005ffc:	480b      	ldr	r0, [pc, #44]	; (800602c <prvInitialiseTaskLists+0x74>)
 8005ffe:	f7fe fcb9 	bl	8004974 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006002:	4b0b      	ldr	r3, [pc, #44]	; (8006030 <prvInitialiseTaskLists+0x78>)
 8006004:	4a05      	ldr	r2, [pc, #20]	; (800601c <prvInitialiseTaskLists+0x64>)
 8006006:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006008:	4b0a      	ldr	r3, [pc, #40]	; (8006034 <prvInitialiseTaskLists+0x7c>)
 800600a:	4a05      	ldr	r2, [pc, #20]	; (8006020 <prvInitialiseTaskLists+0x68>)
 800600c:	601a      	str	r2, [r3, #0]
}
 800600e:	bf00      	nop
 8006010:	3708      	adds	r7, #8
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	200001c8 	.word	0x200001c8
 800601c:	2000022c 	.word	0x2000022c
 8006020:	20000240 	.word	0x20000240
 8006024:	2000025c 	.word	0x2000025c
 8006028:	20000270 	.word	0x20000270
 800602c:	20000288 	.word	0x20000288
 8006030:	20000254 	.word	0x20000254
 8006034:	20000258 	.word	0x20000258

08006038 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800603e:	e019      	b.n	8006074 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8006040:	f000 fe0a 	bl	8006c58 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006044:	4b10      	ldr	r3, [pc, #64]	; (8006088 <prvCheckTasksWaitingTermination+0x50>)
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	3304      	adds	r3, #4
 8006050:	4618      	mov	r0, r3
 8006052:	f7fe fd19 	bl	8004a88 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8006056:	4b0d      	ldr	r3, [pc, #52]	; (800608c <prvCheckTasksWaitingTermination+0x54>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	3b01      	subs	r3, #1
 800605c:	4a0b      	ldr	r2, [pc, #44]	; (800608c <prvCheckTasksWaitingTermination+0x54>)
 800605e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8006060:	4b0b      	ldr	r3, [pc, #44]	; (8006090 <prvCheckTasksWaitingTermination+0x58>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	3b01      	subs	r3, #1
 8006066:	4a0a      	ldr	r2, [pc, #40]	; (8006090 <prvCheckTasksWaitingTermination+0x58>)
 8006068:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800606a:	f000 fe25 	bl	8006cb8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f810 	bl	8006094 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006074:	4b06      	ldr	r3, [pc, #24]	; (8006090 <prvCheckTasksWaitingTermination+0x58>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1e1      	bne.n	8006040 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800607c:	bf00      	nop
 800607e:	bf00      	nop
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	20000270 	.word	0x20000270
 800608c:	2000029c 	.word	0x2000029c
 8006090:	20000284 	.word	0x20000284

08006094 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a0:	4618      	mov	r0, r3
 80060a2:	f000 ffe3 	bl	800706c <vPortFree>
                vPortFree( pxTCB );
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 ffe0 	bl	800706c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80060ac:	bf00      	nop
 80060ae:	3708      	adds	r7, #8
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80060b4:	b480      	push	{r7}
 80060b6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060b8:	4b0a      	ldr	r3, [pc, #40]	; (80060e4 <prvResetNextTaskUnblockTime+0x30>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d104      	bne.n	80060cc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80060c2:	4b09      	ldr	r3, [pc, #36]	; (80060e8 <prvResetNextTaskUnblockTime+0x34>)
 80060c4:	f04f 32ff 	mov.w	r2, #4294967295
 80060c8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80060ca:	e005      	b.n	80060d8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80060cc:	4b05      	ldr	r3, [pc, #20]	; (80060e4 <prvResetNextTaskUnblockTime+0x30>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a04      	ldr	r2, [pc, #16]	; (80060e8 <prvResetNextTaskUnblockTime+0x34>)
 80060d6:	6013      	str	r3, [r2, #0]
}
 80060d8:	bf00      	nop
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	20000254 	.word	0x20000254
 80060e8:	200002bc 	.word	0x200002bc

080060ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80060f2:	4b0b      	ldr	r3, [pc, #44]	; (8006120 <xTaskGetSchedulerState+0x34>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d102      	bne.n	8006100 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80060fa:	2301      	movs	r3, #1
 80060fc:	607b      	str	r3, [r7, #4]
 80060fe:	e008      	b.n	8006112 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006100:	4b08      	ldr	r3, [pc, #32]	; (8006124 <xTaskGetSchedulerState+0x38>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d102      	bne.n	800610e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8006108:	2302      	movs	r3, #2
 800610a:	607b      	str	r3, [r7, #4]
 800610c:	e001      	b.n	8006112 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800610e:	2300      	movs	r3, #0
 8006110:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8006112:	687b      	ldr	r3, [r7, #4]
    }
 8006114:	4618      	mov	r0, r3
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr
 8006120:	200002a8 	.word	0x200002a8
 8006124:	200002c4 	.word	0x200002c4

08006128 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8006128:	b580      	push	{r7, lr}
 800612a:	b086      	sub	sp, #24
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8006134:	2300      	movs	r3, #0
 8006136:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d068      	beq.n	8006210 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800613e:	4b37      	ldr	r3, [pc, #220]	; (800621c <xTaskPriorityDisinherit+0xf4>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	429a      	cmp	r2, r3
 8006146:	d00a      	beq.n	800615e <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8006148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614c:	f383 8811 	msr	BASEPRI, r3
 8006150:	f3bf 8f6f 	isb	sy
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	60fb      	str	r3, [r7, #12]
    }
 800615a:	bf00      	nop
 800615c:	e7fe      	b.n	800615c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10a      	bne.n	800617c <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8006166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616a:	f383 8811 	msr	BASEPRI, r3
 800616e:	f3bf 8f6f 	isb	sy
 8006172:	f3bf 8f4f 	dsb	sy
 8006176:	60bb      	str	r3, [r7, #8]
    }
 8006178:	bf00      	nop
 800617a:	e7fe      	b.n	800617a <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006180:	1e5a      	subs	r2, r3, #1
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800618e:	429a      	cmp	r2, r3
 8006190:	d03e      	beq.n	8006210 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006196:	2b00      	cmp	r3, #0
 8006198:	d13a      	bne.n	8006210 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	3304      	adds	r3, #4
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fe fc72 	bl	8004a88 <uxListRemove>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d10a      	bne.n	80061c0 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ae:	2201      	movs	r2, #1
 80061b0:	fa02 f303 	lsl.w	r3, r2, r3
 80061b4:	43da      	mvns	r2, r3
 80061b6:	4b1a      	ldr	r3, [pc, #104]	; (8006220 <xTaskPriorityDisinherit+0xf8>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4013      	ands	r3, r2
 80061bc:	4a18      	ldr	r2, [pc, #96]	; (8006220 <xTaskPriorityDisinherit+0xf8>)
 80061be:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4619      	mov	r1, r3
 80061c4:	204a      	movs	r0, #74	; 0x4a
 80061c6:	f001 fdfb 	bl	8007dc0 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d6:	f1c3 0205 	rsb	r2, r3, #5
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e2:	2201      	movs	r2, #1
 80061e4:	409a      	lsls	r2, r3
 80061e6:	4b0e      	ldr	r3, [pc, #56]	; (8006220 <xTaskPriorityDisinherit+0xf8>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	4a0c      	ldr	r2, [pc, #48]	; (8006220 <xTaskPriorityDisinherit+0xf8>)
 80061ee:	6013      	str	r3, [r2, #0]
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f4:	4613      	mov	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4a09      	ldr	r2, [pc, #36]	; (8006224 <xTaskPriorityDisinherit+0xfc>)
 80061fe:	441a      	add	r2, r3
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	3304      	adds	r3, #4
 8006204:	4619      	mov	r1, r3
 8006206:	4610      	mov	r0, r2
 8006208:	f7fe fbe1 	bl	80049ce <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800620c:	2301      	movs	r3, #1
 800620e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006210:	697b      	ldr	r3, [r7, #20]
    }
 8006212:	4618      	mov	r0, r3
 8006214:	3718      	adds	r7, #24
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	200001c4 	.word	0x200001c4
 8006220:	200002a4 	.word	0x200002a4
 8006224:	200001c8 	.word	0x200001c8

08006228 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006232:	4b32      	ldr	r3, [pc, #200]	; (80062fc <prvAddCurrentTaskToDelayedList+0xd4>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006238:	4b31      	ldr	r3, [pc, #196]	; (8006300 <prvAddCurrentTaskToDelayedList+0xd8>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	3304      	adds	r3, #4
 800623e:	4618      	mov	r0, r3
 8006240:	f7fe fc22 	bl	8004a88 <uxListRemove>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10b      	bne.n	8006262 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800624a:	4b2d      	ldr	r3, [pc, #180]	; (8006300 <prvAddCurrentTaskToDelayedList+0xd8>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006250:	2201      	movs	r2, #1
 8006252:	fa02 f303 	lsl.w	r3, r2, r3
 8006256:	43da      	mvns	r2, r3
 8006258:	4b2a      	ldr	r3, [pc, #168]	; (8006304 <prvAddCurrentTaskToDelayedList+0xdc>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4013      	ands	r3, r2
 800625e:	4a29      	ldr	r2, [pc, #164]	; (8006304 <prvAddCurrentTaskToDelayedList+0xdc>)
 8006260:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006268:	d110      	bne.n	800628c <prvAddCurrentTaskToDelayedList+0x64>
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00d      	beq.n	800628c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8006270:	4b23      	ldr	r3, [pc, #140]	; (8006300 <prvAddCurrentTaskToDelayedList+0xd8>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	211b      	movs	r1, #27
 8006276:	4618      	mov	r0, r3
 8006278:	f002 fb64 	bl	8008944 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800627c:	4b20      	ldr	r3, [pc, #128]	; (8006300 <prvAddCurrentTaskToDelayedList+0xd8>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	3304      	adds	r3, #4
 8006282:	4619      	mov	r1, r3
 8006284:	4820      	ldr	r0, [pc, #128]	; (8006308 <prvAddCurrentTaskToDelayedList+0xe0>)
 8006286:	f7fe fba2 	bl	80049ce <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800628a:	e032      	b.n	80062f2 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4413      	add	r3, r2
 8006292:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006294:	4b1a      	ldr	r3, [pc, #104]	; (8006300 <prvAddCurrentTaskToDelayedList+0xd8>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d20f      	bcs.n	80062c4 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80062a4:	4b16      	ldr	r3, [pc, #88]	; (8006300 <prvAddCurrentTaskToDelayedList+0xd8>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2104      	movs	r1, #4
 80062aa:	4618      	mov	r0, r3
 80062ac:	f002 fb4a 	bl	8008944 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062b0:	4b16      	ldr	r3, [pc, #88]	; (800630c <prvAddCurrentTaskToDelayedList+0xe4>)
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	4b12      	ldr	r3, [pc, #72]	; (8006300 <prvAddCurrentTaskToDelayedList+0xd8>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	3304      	adds	r3, #4
 80062ba:	4619      	mov	r1, r3
 80062bc:	4610      	mov	r0, r2
 80062be:	f7fe fbaa 	bl	8004a16 <vListInsert>
}
 80062c2:	e016      	b.n	80062f2 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80062c4:	4b0e      	ldr	r3, [pc, #56]	; (8006300 <prvAddCurrentTaskToDelayedList+0xd8>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2104      	movs	r1, #4
 80062ca:	4618      	mov	r0, r3
 80062cc:	f002 fb3a 	bl	8008944 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062d0:	4b0f      	ldr	r3, [pc, #60]	; (8006310 <prvAddCurrentTaskToDelayedList+0xe8>)
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	4b0a      	ldr	r3, [pc, #40]	; (8006300 <prvAddCurrentTaskToDelayedList+0xd8>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	3304      	adds	r3, #4
 80062da:	4619      	mov	r1, r3
 80062dc:	4610      	mov	r0, r2
 80062de:	f7fe fb9a 	bl	8004a16 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80062e2:	4b0c      	ldr	r3, [pc, #48]	; (8006314 <prvAddCurrentTaskToDelayedList+0xec>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d202      	bcs.n	80062f2 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80062ec:	4a09      	ldr	r2, [pc, #36]	; (8006314 <prvAddCurrentTaskToDelayedList+0xec>)
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	6013      	str	r3, [r2, #0]
}
 80062f2:	bf00      	nop
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	200002a0 	.word	0x200002a0
 8006300:	200001c4 	.word	0x200001c4
 8006304:	200002a4 	.word	0x200002a4
 8006308:	20000288 	.word	0x20000288
 800630c:	20000258 	.word	0x20000258
 8006310:	20000254 	.word	0x20000254
 8006314:	200002bc 	.word	0x200002bc

08006318 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800631e:	2300      	movs	r3, #0
 8006320:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8006322:	f000 fb31 	bl	8006988 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8006326:	4b11      	ldr	r3, [pc, #68]	; (800636c <xTimerCreateTimerTask+0x54>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00b      	beq.n	8006346 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800632e:	4b10      	ldr	r3, [pc, #64]	; (8006370 <xTimerCreateTimerTask+0x58>)
 8006330:	9301      	str	r3, [sp, #4]
 8006332:	2302      	movs	r3, #2
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	2300      	movs	r3, #0
 8006338:	f44f 7282 	mov.w	r2, #260	; 0x104
 800633c:	490d      	ldr	r1, [pc, #52]	; (8006374 <xTimerCreateTimerTask+0x5c>)
 800633e:	480e      	ldr	r0, [pc, #56]	; (8006378 <xTimerCreateTimerTask+0x60>)
 8006340:	f7ff f926 	bl	8005590 <xTaskCreate>
 8006344:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10a      	bne.n	8006362 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800634c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006350:	f383 8811 	msr	BASEPRI, r3
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	603b      	str	r3, [r7, #0]
    }
 800635e:	bf00      	nop
 8006360:	e7fe      	b.n	8006360 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8006362:	687b      	ldr	r3, [r7, #4]
    }
 8006364:	4618      	mov	r0, r3
 8006366:	3708      	adds	r7, #8
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	200002f8 	.word	0x200002f8
 8006370:	200002fc 	.word	0x200002fc
 8006374:	08009200 	.word	0x08009200
 8006378:	08006569 	.word	0x08006569

0800637c <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 800637c:	b580      	push	{r7, lr}
 800637e:	b088      	sub	sp, #32
 8006380:	af02      	add	r7, sp, #8
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
 8006388:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800638a:	202c      	movs	r0, #44	; 0x2c
 800638c:	f000 fd8e 	bl	8006eac <pvPortMalloc>
 8006390:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00d      	beq.n	80063b4 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	9301      	str	r3, [sp, #4]
 80063a4:	6a3b      	ldr	r3, [r7, #32]
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	68b9      	ldr	r1, [r7, #8]
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f000 f805 	bl	80063be <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 80063b4:	697b      	ldr	r3, [r7, #20]
        }
 80063b6:	4618      	mov	r0, r3
 80063b8:	3718      	adds	r7, #24
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 80063be:	b580      	push	{r7, lr}
 80063c0:	b086      	sub	sp, #24
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	60f8      	str	r0, [r7, #12]
 80063c6:	60b9      	str	r1, [r7, #8]
 80063c8:	607a      	str	r2, [r7, #4]
 80063ca:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10a      	bne.n	80063e8 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 80063d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d6:	f383 8811 	msr	BASEPRI, r3
 80063da:	f3bf 8f6f 	isb	sy
 80063de:	f3bf 8f4f 	dsb	sy
 80063e2:	617b      	str	r3, [r7, #20]
    }
 80063e4:	bf00      	nop
 80063e6:	e7fe      	b.n	80063e6 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 80063e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d01e      	beq.n	800642c <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 80063ee:	f000 facb 	bl	8006988 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 80063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80063f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	6a3a      	ldr	r2, [r7, #32]
 8006408:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640c:	3304      	adds	r3, #4
 800640e:	4618      	mov	r0, r3
 8006410:	f7fe fad0 	bl	80049b4 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d008      	beq.n	800642c <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800641a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006420:	f043 0304 	orr.w	r3, r3, #4
 8006424:	b2da      	uxtb	r2, r3
 8006426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006428:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 800642c:	bf00      	nop
 800642e:	3718      	adds	r7, #24
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8006434:	b580      	push	{r7, lr}
 8006436:	b08a      	sub	sp, #40	; 0x28
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
 8006440:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8006442:	2300      	movs	r3, #0
 8006444:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10a      	bne.n	8006462 <xTimerGenericCommand+0x2e>
        __asm volatile
 800644c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006450:	f383 8811 	msr	BASEPRI, r3
 8006454:	f3bf 8f6f 	isb	sy
 8006458:	f3bf 8f4f 	dsb	sy
 800645c:	623b      	str	r3, [r7, #32]
    }
 800645e:	bf00      	nop
 8006460:	e7fe      	b.n	8006460 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8006462:	4b1a      	ldr	r3, [pc, #104]	; (80064cc <xTimerGenericCommand+0x98>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d02a      	beq.n	80064c0 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	2b05      	cmp	r3, #5
 800647a:	dc18      	bgt.n	80064ae <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800647c:	f7ff fe36 	bl	80060ec <xTaskGetSchedulerState>
 8006480:	4603      	mov	r3, r0
 8006482:	2b02      	cmp	r3, #2
 8006484:	d109      	bne.n	800649a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006486:	4b11      	ldr	r3, [pc, #68]	; (80064cc <xTimerGenericCommand+0x98>)
 8006488:	6818      	ldr	r0, [r3, #0]
 800648a:	f107 0114 	add.w	r1, r7, #20
 800648e:	2300      	movs	r3, #0
 8006490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006492:	f7fe fc13 	bl	8004cbc <xQueueGenericSend>
 8006496:	6278      	str	r0, [r7, #36]	; 0x24
 8006498:	e012      	b.n	80064c0 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800649a:	4b0c      	ldr	r3, [pc, #48]	; (80064cc <xTimerGenericCommand+0x98>)
 800649c:	6818      	ldr	r0, [r3, #0]
 800649e:	f107 0114 	add.w	r1, r7, #20
 80064a2:	2300      	movs	r3, #0
 80064a4:	2200      	movs	r2, #0
 80064a6:	f7fe fc09 	bl	8004cbc <xQueueGenericSend>
 80064aa:	6278      	str	r0, [r7, #36]	; 0x24
 80064ac:	e008      	b.n	80064c0 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80064ae:	4b07      	ldr	r3, [pc, #28]	; (80064cc <xTimerGenericCommand+0x98>)
 80064b0:	6818      	ldr	r0, [r3, #0]
 80064b2:	f107 0114 	add.w	r1, r7, #20
 80064b6:	2300      	movs	r3, #0
 80064b8:	683a      	ldr	r2, [r7, #0]
 80064ba:	f7fe fd25 	bl	8004f08 <xQueueGenericSendFromISR>
 80064be:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80064c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80064c2:	4618      	mov	r0, r3
 80064c4:	3728      	adds	r7, #40	; 0x28
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	200002f8 	.word	0x200002f8

080064d0 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b088      	sub	sp, #32
 80064d4:	af02      	add	r7, sp, #8
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064da:	4b22      	ldr	r3, [pc, #136]	; (8006564 <prvProcessExpiredTimer+0x94>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	3304      	adds	r3, #4
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7fe facd 	bl	8004a88 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064f4:	f003 0304 	and.w	r3, r3, #4
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d022      	beq.n	8006542 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	699a      	ldr	r2, [r3, #24]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	18d1      	adds	r1, r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	683a      	ldr	r2, [r7, #0]
 8006508:	6978      	ldr	r0, [r7, #20]
 800650a:	f000 f8d1 	bl	80066b0 <prvInsertTimerInActiveList>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d01f      	beq.n	8006554 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006514:	2300      	movs	r3, #0
 8006516:	9300      	str	r3, [sp, #0]
 8006518:	2300      	movs	r3, #0
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	2100      	movs	r1, #0
 800651e:	6978      	ldr	r0, [r7, #20]
 8006520:	f7ff ff88 	bl	8006434 <xTimerGenericCommand>
 8006524:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d113      	bne.n	8006554 <prvProcessExpiredTimer+0x84>
        __asm volatile
 800652c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006530:	f383 8811 	msr	BASEPRI, r3
 8006534:	f3bf 8f6f 	isb	sy
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	60fb      	str	r3, [r7, #12]
    }
 800653e:	bf00      	nop
 8006540:	e7fe      	b.n	8006540 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006548:	f023 0301 	bic.w	r3, r3, #1
 800654c:	b2da      	uxtb	r2, r3
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	6a1b      	ldr	r3, [r3, #32]
 8006558:	6978      	ldr	r0, [r7, #20]
 800655a:	4798      	blx	r3
    }
 800655c:	bf00      	nop
 800655e:	3718      	adds	r7, #24
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	200002f0 	.word	0x200002f0

08006568 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006570:	f107 0308 	add.w	r3, r7, #8
 8006574:	4618      	mov	r0, r3
 8006576:	f000 f857 	bl	8006628 <prvGetNextExpireTime>
 800657a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	4619      	mov	r1, r3
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 f803 	bl	800658c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006586:	f000 f8d5 	bl	8006734 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800658a:	e7f1      	b.n	8006570 <prvTimerTask+0x8>

0800658c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006596:	f7ff f9c1 	bl	800591c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800659a:	f107 0308 	add.w	r3, r7, #8
 800659e:	4618      	mov	r0, r3
 80065a0:	f000 f866 	bl	8006670 <prvSampleTimeNow>
 80065a4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d130      	bne.n	800660e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10a      	bne.n	80065c8 <prvProcessTimerOrBlockTask+0x3c>
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d806      	bhi.n	80065c8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80065ba:	f7ff f9bd 	bl	8005938 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80065be:	68f9      	ldr	r1, [r7, #12]
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f7ff ff85 	bl	80064d0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80065c6:	e024      	b.n	8006612 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d008      	beq.n	80065e0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80065ce:	4b13      	ldr	r3, [pc, #76]	; (800661c <prvProcessTimerOrBlockTask+0x90>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d101      	bne.n	80065dc <prvProcessTimerOrBlockTask+0x50>
 80065d8:	2301      	movs	r3, #1
 80065da:	e000      	b.n	80065de <prvProcessTimerOrBlockTask+0x52>
 80065dc:	2300      	movs	r3, #0
 80065de:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80065e0:	4b0f      	ldr	r3, [pc, #60]	; (8006620 <prvProcessTimerOrBlockTask+0x94>)
 80065e2:	6818      	ldr	r0, [r3, #0]
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	683a      	ldr	r2, [r7, #0]
 80065ec:	4619      	mov	r1, r3
 80065ee:	f7fe ff9b 	bl	8005528 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80065f2:	f7ff f9a1 	bl	8005938 <xTaskResumeAll>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10a      	bne.n	8006612 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80065fc:	4b09      	ldr	r3, [pc, #36]	; (8006624 <prvProcessTimerOrBlockTask+0x98>)
 80065fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006602:	601a      	str	r2, [r3, #0]
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	f3bf 8f6f 	isb	sy
    }
 800660c:	e001      	b.n	8006612 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800660e:	f7ff f993 	bl	8005938 <xTaskResumeAll>
    }
 8006612:	bf00      	nop
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	200002f4 	.word	0x200002f4
 8006620:	200002f8 	.word	0x200002f8
 8006624:	e000ed04 	.word	0xe000ed04

08006628 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006630:	4b0e      	ldr	r3, [pc, #56]	; (800666c <prvGetNextExpireTime+0x44>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d101      	bne.n	800663e <prvGetNextExpireTime+0x16>
 800663a:	2201      	movs	r2, #1
 800663c:	e000      	b.n	8006640 <prvGetNextExpireTime+0x18>
 800663e:	2200      	movs	r2, #0
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d105      	bne.n	8006658 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800664c:	4b07      	ldr	r3, [pc, #28]	; (800666c <prvGetNextExpireTime+0x44>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	60fb      	str	r3, [r7, #12]
 8006656:	e001      	b.n	800665c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006658:	2300      	movs	r3, #0
 800665a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800665c:	68fb      	ldr	r3, [r7, #12]
    }
 800665e:	4618      	mov	r0, r3
 8006660:	3714      	adds	r7, #20
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	200002f0 	.word	0x200002f0

08006670 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006678:	f7ff f9fe 	bl	8005a78 <xTaskGetTickCount>
 800667c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800667e:	4b0b      	ldr	r3, [pc, #44]	; (80066ac <prvSampleTimeNow+0x3c>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	429a      	cmp	r2, r3
 8006686:	d205      	bcs.n	8006694 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006688:	f000 f91a 	bl	80068c0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	601a      	str	r2, [r3, #0]
 8006692:	e002      	b.n	800669a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800669a:	4a04      	ldr	r2, [pc, #16]	; (80066ac <prvSampleTimeNow+0x3c>)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80066a0:	68fb      	ldr	r3, [r7, #12]
    }
 80066a2:	4618      	mov	r0, r3
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	20000300 	.word	0x20000300

080066b0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b086      	sub	sp, #24
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
 80066bc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80066be:	2300      	movs	r3, #0
 80066c0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d812      	bhi.n	80066fc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	1ad2      	subs	r2, r2, r3
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d302      	bcc.n	80066ea <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80066e4:	2301      	movs	r3, #1
 80066e6:	617b      	str	r3, [r7, #20]
 80066e8:	e01b      	b.n	8006722 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80066ea:	4b10      	ldr	r3, [pc, #64]	; (800672c <prvInsertTimerInActiveList+0x7c>)
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	3304      	adds	r3, #4
 80066f2:	4619      	mov	r1, r3
 80066f4:	4610      	mov	r0, r2
 80066f6:	f7fe f98e 	bl	8004a16 <vListInsert>
 80066fa:	e012      	b.n	8006722 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	429a      	cmp	r2, r3
 8006702:	d206      	bcs.n	8006712 <prvInsertTimerInActiveList+0x62>
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	429a      	cmp	r2, r3
 800670a:	d302      	bcc.n	8006712 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800670c:	2301      	movs	r3, #1
 800670e:	617b      	str	r3, [r7, #20]
 8006710:	e007      	b.n	8006722 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006712:	4b07      	ldr	r3, [pc, #28]	; (8006730 <prvInsertTimerInActiveList+0x80>)
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	3304      	adds	r3, #4
 800671a:	4619      	mov	r1, r3
 800671c:	4610      	mov	r0, r2
 800671e:	f7fe f97a 	bl	8004a16 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006722:	697b      	ldr	r3, [r7, #20]
    }
 8006724:	4618      	mov	r0, r3
 8006726:	3718      	adds	r7, #24
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	200002f4 	.word	0x200002f4
 8006730:	200002f0 	.word	0x200002f0

08006734 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006734:	b580      	push	{r7, lr}
 8006736:	b08c      	sub	sp, #48	; 0x30
 8006738:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800673a:	e0ae      	b.n	800689a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	2b00      	cmp	r3, #0
 8006740:	f2c0 80aa 	blt.w	8006898 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d004      	beq.n	800675a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006752:	3304      	adds	r3, #4
 8006754:	4618      	mov	r0, r3
 8006756:	f7fe f997 	bl	8004a88 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800675a:	1d3b      	adds	r3, r7, #4
 800675c:	4618      	mov	r0, r3
 800675e:	f7ff ff87 	bl	8006670 <prvSampleTimeNow>
 8006762:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	2b09      	cmp	r3, #9
 8006768:	f200 8097 	bhi.w	800689a <prvProcessReceivedCommands+0x166>
 800676c:	a201      	add	r2, pc, #4	; (adr r2, 8006774 <prvProcessReceivedCommands+0x40>)
 800676e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006772:	bf00      	nop
 8006774:	0800679d 	.word	0x0800679d
 8006778:	0800679d 	.word	0x0800679d
 800677c:	0800679d 	.word	0x0800679d
 8006780:	08006811 	.word	0x08006811
 8006784:	08006825 	.word	0x08006825
 8006788:	0800686f 	.word	0x0800686f
 800678c:	0800679d 	.word	0x0800679d
 8006790:	0800679d 	.word	0x0800679d
 8006794:	08006811 	.word	0x08006811
 8006798:	08006825 	.word	0x08006825
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800679c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067a2:	f043 0301 	orr.w	r3, r3, #1
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	18d1      	adds	r1, r2, r3
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6a3a      	ldr	r2, [r7, #32]
 80067ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067bc:	f7ff ff78 	bl	80066b0 <prvInsertTimerInActiveList>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d069      	beq.n	800689a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067cc:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067d4:	f003 0304 	and.w	r3, r3, #4
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d05e      	beq.n	800689a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	441a      	add	r2, r3
 80067e4:	2300      	movs	r3, #0
 80067e6:	9300      	str	r3, [sp, #0]
 80067e8:	2300      	movs	r3, #0
 80067ea:	2100      	movs	r1, #0
 80067ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067ee:	f7ff fe21 	bl	8006434 <xTimerGenericCommand>
 80067f2:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d14f      	bne.n	800689a <prvProcessReceivedCommands+0x166>
        __asm volatile
 80067fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fe:	f383 8811 	msr	BASEPRI, r3
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	f3bf 8f4f 	dsb	sy
 800680a:	61bb      	str	r3, [r7, #24]
    }
 800680c:	bf00      	nop
 800680e:	e7fe      	b.n	800680e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006812:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006816:	f023 0301 	bic.w	r3, r3, #1
 800681a:	b2da      	uxtb	r2, r3
 800681c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8006822:	e03a      	b.n	800689a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006826:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800682a:	f043 0301 	orr.w	r3, r3, #1
 800682e:	b2da      	uxtb	r2, r3
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006832:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800683c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d10a      	bne.n	800685a <prvProcessReceivedCommands+0x126>
        __asm volatile
 8006844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006848:	f383 8811 	msr	BASEPRI, r3
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	617b      	str	r3, [r7, #20]
    }
 8006856:	bf00      	nop
 8006858:	e7fe      	b.n	8006858 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800685a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685c:	699a      	ldr	r2, [r3, #24]
 800685e:	6a3b      	ldr	r3, [r7, #32]
 8006860:	18d1      	adds	r1, r2, r3
 8006862:	6a3b      	ldr	r3, [r7, #32]
 8006864:	6a3a      	ldr	r2, [r7, #32]
 8006866:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006868:	f7ff ff22 	bl	80066b0 <prvInsertTimerInActiveList>
                        break;
 800686c:	e015      	b.n	800689a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800686e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006870:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006874:	f003 0302 	and.w	r3, r3, #2
 8006878:	2b00      	cmp	r3, #0
 800687a:	d103      	bne.n	8006884 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 800687c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800687e:	f000 fbf5 	bl	800706c <vPortFree>
 8006882:	e00a      	b.n	800689a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800688a:	f023 0301 	bic.w	r3, r3, #1
 800688e:	b2da      	uxtb	r2, r3
 8006890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006892:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006896:	e000      	b.n	800689a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8006898:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800689a:	4b08      	ldr	r3, [pc, #32]	; (80068bc <prvProcessReceivedCommands+0x188>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f107 0108 	add.w	r1, r7, #8
 80068a2:	2200      	movs	r2, #0
 80068a4:	4618      	mov	r0, r3
 80068a6:	f7fe fbed 	bl	8005084 <xQueueReceive>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f47f af45 	bne.w	800673c <prvProcessReceivedCommands+0x8>
        }
    }
 80068b2:	bf00      	nop
 80068b4:	bf00      	nop
 80068b6:	3728      	adds	r7, #40	; 0x28
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	200002f8 	.word	0x200002f8

080068c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b088      	sub	sp, #32
 80068c4:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80068c6:	e048      	b.n	800695a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80068c8:	4b2d      	ldr	r3, [pc, #180]	; (8006980 <prvSwitchTimerLists+0xc0>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068d2:	4b2b      	ldr	r3, [pc, #172]	; (8006980 <prvSwitchTimerLists+0xc0>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	3304      	adds	r3, #4
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7fe f8d1 	bl	8004a88 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068f4:	f003 0304 	and.w	r3, r3, #4
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d02e      	beq.n	800695a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	4413      	add	r3, r2
 8006904:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8006906:	68ba      	ldr	r2, [r7, #8]
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	429a      	cmp	r2, r3
 800690c:	d90e      	bls.n	800692c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	68ba      	ldr	r2, [r7, #8]
 8006912:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800691a:	4b19      	ldr	r3, [pc, #100]	; (8006980 <prvSwitchTimerLists+0xc0>)
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	3304      	adds	r3, #4
 8006922:	4619      	mov	r1, r3
 8006924:	4610      	mov	r0, r2
 8006926:	f7fe f876 	bl	8004a16 <vListInsert>
 800692a:	e016      	b.n	800695a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800692c:	2300      	movs	r3, #0
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	2300      	movs	r3, #0
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	2100      	movs	r1, #0
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f7ff fd7c 	bl	8006434 <xTimerGenericCommand>
 800693c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10a      	bne.n	800695a <prvSwitchTimerLists+0x9a>
        __asm volatile
 8006944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006948:	f383 8811 	msr	BASEPRI, r3
 800694c:	f3bf 8f6f 	isb	sy
 8006950:	f3bf 8f4f 	dsb	sy
 8006954:	603b      	str	r3, [r7, #0]
    }
 8006956:	bf00      	nop
 8006958:	e7fe      	b.n	8006958 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800695a:	4b09      	ldr	r3, [pc, #36]	; (8006980 <prvSwitchTimerLists+0xc0>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1b1      	bne.n	80068c8 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8006964:	4b06      	ldr	r3, [pc, #24]	; (8006980 <prvSwitchTimerLists+0xc0>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800696a:	4b06      	ldr	r3, [pc, #24]	; (8006984 <prvSwitchTimerLists+0xc4>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a04      	ldr	r2, [pc, #16]	; (8006980 <prvSwitchTimerLists+0xc0>)
 8006970:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006972:	4a04      	ldr	r2, [pc, #16]	; (8006984 <prvSwitchTimerLists+0xc4>)
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	6013      	str	r3, [r2, #0]
    }
 8006978:	bf00      	nop
 800697a:	3718      	adds	r7, #24
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	200002f0 	.word	0x200002f0
 8006984:	200002f4 	.word	0x200002f4

08006988 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006988:	b580      	push	{r7, lr}
 800698a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800698c:	f000 f964 	bl	8006c58 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006990:	4b12      	ldr	r3, [pc, #72]	; (80069dc <prvCheckForValidListAndQueue+0x54>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d11d      	bne.n	80069d4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006998:	4811      	ldr	r0, [pc, #68]	; (80069e0 <prvCheckForValidListAndQueue+0x58>)
 800699a:	f7fd ffeb 	bl	8004974 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800699e:	4811      	ldr	r0, [pc, #68]	; (80069e4 <prvCheckForValidListAndQueue+0x5c>)
 80069a0:	f7fd ffe8 	bl	8004974 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80069a4:	4b10      	ldr	r3, [pc, #64]	; (80069e8 <prvCheckForValidListAndQueue+0x60>)
 80069a6:	4a0e      	ldr	r2, [pc, #56]	; (80069e0 <prvCheckForValidListAndQueue+0x58>)
 80069a8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80069aa:	4b10      	ldr	r3, [pc, #64]	; (80069ec <prvCheckForValidListAndQueue+0x64>)
 80069ac:	4a0d      	ldr	r2, [pc, #52]	; (80069e4 <prvCheckForValidListAndQueue+0x5c>)
 80069ae:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80069b0:	2200      	movs	r2, #0
 80069b2:	210c      	movs	r1, #12
 80069b4:	200a      	movs	r0, #10
 80069b6:	f7fe f8f9 	bl	8004bac <xQueueGenericCreate>
 80069ba:	4603      	mov	r3, r0
 80069bc:	4a07      	ldr	r2, [pc, #28]	; (80069dc <prvCheckForValidListAndQueue+0x54>)
 80069be:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80069c0:	4b06      	ldr	r3, [pc, #24]	; (80069dc <prvCheckForValidListAndQueue+0x54>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d005      	beq.n	80069d4 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80069c8:	4b04      	ldr	r3, [pc, #16]	; (80069dc <prvCheckForValidListAndQueue+0x54>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4908      	ldr	r1, [pc, #32]	; (80069f0 <prvCheckForValidListAndQueue+0x68>)
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7fe fd78 	bl	80054c4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80069d4:	f000 f970 	bl	8006cb8 <vPortExitCritical>
    }
 80069d8:	bf00      	nop
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	200002f8 	.word	0x200002f8
 80069e0:	200002c8 	.word	0x200002c8
 80069e4:	200002dc 	.word	0x200002dc
 80069e8:	200002f0 	.word	0x200002f0
 80069ec:	200002f4 	.word	0x200002f4
 80069f0:	08009208 	.word	0x08009208

080069f4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	3b04      	subs	r3, #4
 8006a04:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a0c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	3b04      	subs	r3, #4
 8006a12:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	f023 0201 	bic.w	r2, r3, #1
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	3b04      	subs	r3, #4
 8006a22:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006a24:	4a0c      	ldr	r2, [pc, #48]	; (8006a58 <pxPortInitialiseStack+0x64>)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	3b14      	subs	r3, #20
 8006a2e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	3b04      	subs	r3, #4
 8006a3a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f06f 0202 	mvn.w	r2, #2
 8006a42:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	3b20      	subs	r3, #32
 8006a48:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr
 8006a58:	08006a5d 	.word	0x08006a5d

08006a5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8006a62:	2300      	movs	r3, #0
 8006a64:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006a66:	4b12      	ldr	r3, [pc, #72]	; (8006ab0 <prvTaskExitError+0x54>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6e:	d00a      	beq.n	8006a86 <prvTaskExitError+0x2a>
        __asm volatile
 8006a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a74:	f383 8811 	msr	BASEPRI, r3
 8006a78:	f3bf 8f6f 	isb	sy
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	60fb      	str	r3, [r7, #12]
    }
 8006a82:	bf00      	nop
 8006a84:	e7fe      	b.n	8006a84 <prvTaskExitError+0x28>
        __asm volatile
 8006a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8a:	f383 8811 	msr	BASEPRI, r3
 8006a8e:	f3bf 8f6f 	isb	sy
 8006a92:	f3bf 8f4f 	dsb	sy
 8006a96:	60bb      	str	r3, [r7, #8]
    }
 8006a98:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006a9a:	bf00      	nop
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d0fc      	beq.n	8006a9c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006aa2:	bf00      	nop
 8006aa4:	bf00      	nop
 8006aa6:	3714      	adds	r7, #20
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr
 8006ab0:	2000000c 	.word	0x2000000c
	...

08006ac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006ac0:	4b07      	ldr	r3, [pc, #28]	; (8006ae0 <pxCurrentTCBConst2>)
 8006ac2:	6819      	ldr	r1, [r3, #0]
 8006ac4:	6808      	ldr	r0, [r1, #0]
 8006ac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aca:	f380 8809 	msr	PSP, r0
 8006ace:	f3bf 8f6f 	isb	sy
 8006ad2:	f04f 0000 	mov.w	r0, #0
 8006ad6:	f380 8811 	msr	BASEPRI, r0
 8006ada:	4770      	bx	lr
 8006adc:	f3af 8000 	nop.w

08006ae0 <pxCurrentTCBConst2>:
 8006ae0:	200001c4 	.word	0x200001c4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006ae4:	bf00      	nop
 8006ae6:	bf00      	nop

08006ae8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006ae8:	4808      	ldr	r0, [pc, #32]	; (8006b0c <prvPortStartFirstTask+0x24>)
 8006aea:	6800      	ldr	r0, [r0, #0]
 8006aec:	6800      	ldr	r0, [r0, #0]
 8006aee:	f380 8808 	msr	MSP, r0
 8006af2:	f04f 0000 	mov.w	r0, #0
 8006af6:	f380 8814 	msr	CONTROL, r0
 8006afa:	b662      	cpsie	i
 8006afc:	b661      	cpsie	f
 8006afe:	f3bf 8f4f 	dsb	sy
 8006b02:	f3bf 8f6f 	isb	sy
 8006b06:	df00      	svc	0
 8006b08:	bf00      	nop
 8006b0a:	0000      	.short	0x0000
 8006b0c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006b10:	bf00      	nop
 8006b12:	bf00      	nop

08006b14 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006b1a:	4b46      	ldr	r3, [pc, #280]	; (8006c34 <xPortStartScheduler+0x120>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a46      	ldr	r2, [pc, #280]	; (8006c38 <xPortStartScheduler+0x124>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d10a      	bne.n	8006b3a <xPortStartScheduler+0x26>
        __asm volatile
 8006b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b28:	f383 8811 	msr	BASEPRI, r3
 8006b2c:	f3bf 8f6f 	isb	sy
 8006b30:	f3bf 8f4f 	dsb	sy
 8006b34:	613b      	str	r3, [r7, #16]
    }
 8006b36:	bf00      	nop
 8006b38:	e7fe      	b.n	8006b38 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006b3a:	4b3e      	ldr	r3, [pc, #248]	; (8006c34 <xPortStartScheduler+0x120>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a3f      	ldr	r2, [pc, #252]	; (8006c3c <xPortStartScheduler+0x128>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d10a      	bne.n	8006b5a <xPortStartScheduler+0x46>
        __asm volatile
 8006b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b48:	f383 8811 	msr	BASEPRI, r3
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	f3bf 8f4f 	dsb	sy
 8006b54:	60fb      	str	r3, [r7, #12]
    }
 8006b56:	bf00      	nop
 8006b58:	e7fe      	b.n	8006b58 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006b5a:	4b39      	ldr	r3, [pc, #228]	; (8006c40 <xPortStartScheduler+0x12c>)
 8006b5c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	22ff      	movs	r2, #255	; 0xff
 8006b6a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b74:	78fb      	ldrb	r3, [r7, #3]
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006b7c:	b2da      	uxtb	r2, r3
 8006b7e:	4b31      	ldr	r3, [pc, #196]	; (8006c44 <xPortStartScheduler+0x130>)
 8006b80:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b82:	4b31      	ldr	r3, [pc, #196]	; (8006c48 <xPortStartScheduler+0x134>)
 8006b84:	2207      	movs	r2, #7
 8006b86:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b88:	e009      	b.n	8006b9e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8006b8a:	4b2f      	ldr	r3, [pc, #188]	; (8006c48 <xPortStartScheduler+0x134>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	4a2d      	ldr	r2, [pc, #180]	; (8006c48 <xPortStartScheduler+0x134>)
 8006b92:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b94:	78fb      	ldrb	r3, [r7, #3]
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	005b      	lsls	r3, r3, #1
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b9e:	78fb      	ldrb	r3, [r7, #3]
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba6:	2b80      	cmp	r3, #128	; 0x80
 8006ba8:	d0ef      	beq.n	8006b8a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006baa:	4b27      	ldr	r3, [pc, #156]	; (8006c48 <xPortStartScheduler+0x134>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f1c3 0307 	rsb	r3, r3, #7
 8006bb2:	2b04      	cmp	r3, #4
 8006bb4:	d00a      	beq.n	8006bcc <xPortStartScheduler+0xb8>
        __asm volatile
 8006bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bba:	f383 8811 	msr	BASEPRI, r3
 8006bbe:	f3bf 8f6f 	isb	sy
 8006bc2:	f3bf 8f4f 	dsb	sy
 8006bc6:	60bb      	str	r3, [r7, #8]
    }
 8006bc8:	bf00      	nop
 8006bca:	e7fe      	b.n	8006bca <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006bcc:	4b1e      	ldr	r3, [pc, #120]	; (8006c48 <xPortStartScheduler+0x134>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	021b      	lsls	r3, r3, #8
 8006bd2:	4a1d      	ldr	r2, [pc, #116]	; (8006c48 <xPortStartScheduler+0x134>)
 8006bd4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006bd6:	4b1c      	ldr	r3, [pc, #112]	; (8006c48 <xPortStartScheduler+0x134>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006bde:	4a1a      	ldr	r2, [pc, #104]	; (8006c48 <xPortStartScheduler+0x134>)
 8006be0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	b2da      	uxtb	r2, r3
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006bea:	4b18      	ldr	r3, [pc, #96]	; (8006c4c <xPortStartScheduler+0x138>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a17      	ldr	r2, [pc, #92]	; (8006c4c <xPortStartScheduler+0x138>)
 8006bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006bf4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006bf6:	4b15      	ldr	r3, [pc, #84]	; (8006c4c <xPortStartScheduler+0x138>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a14      	ldr	r2, [pc, #80]	; (8006c4c <xPortStartScheduler+0x138>)
 8006bfc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006c00:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006c02:	f000 f8e3 	bl	8006dcc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006c06:	4b12      	ldr	r3, [pc, #72]	; (8006c50 <xPortStartScheduler+0x13c>)
 8006c08:	2200      	movs	r2, #0
 8006c0a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8006c0c:	f000 f902 	bl	8006e14 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006c10:	4b10      	ldr	r3, [pc, #64]	; (8006c54 <xPortStartScheduler+0x140>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a0f      	ldr	r2, [pc, #60]	; (8006c54 <xPortStartScheduler+0x140>)
 8006c16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006c1a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8006c1c:	f7ff ff64 	bl	8006ae8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006c20:	f7ff f808 	bl	8005c34 <vTaskSwitchContext>
    prvTaskExitError();
 8006c24:	f7ff ff1a 	bl	8006a5c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3718      	adds	r7, #24
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	e000ed00 	.word	0xe000ed00
 8006c38:	410fc271 	.word	0x410fc271
 8006c3c:	410fc270 	.word	0x410fc270
 8006c40:	e000e400 	.word	0xe000e400
 8006c44:	20000304 	.word	0x20000304
 8006c48:	20000308 	.word	0x20000308
 8006c4c:	e000ed20 	.word	0xe000ed20
 8006c50:	2000000c 	.word	0x2000000c
 8006c54:	e000ef34 	.word	0xe000ef34

08006c58 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
        __asm volatile
 8006c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c62:	f383 8811 	msr	BASEPRI, r3
 8006c66:	f3bf 8f6f 	isb	sy
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	607b      	str	r3, [r7, #4]
    }
 8006c70:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006c72:	4b0f      	ldr	r3, [pc, #60]	; (8006cb0 <vPortEnterCritical+0x58>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	3301      	adds	r3, #1
 8006c78:	4a0d      	ldr	r2, [pc, #52]	; (8006cb0 <vPortEnterCritical+0x58>)
 8006c7a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006c7c:	4b0c      	ldr	r3, [pc, #48]	; (8006cb0 <vPortEnterCritical+0x58>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d10f      	bne.n	8006ca4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c84:	4b0b      	ldr	r3, [pc, #44]	; (8006cb4 <vPortEnterCritical+0x5c>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00a      	beq.n	8006ca4 <vPortEnterCritical+0x4c>
        __asm volatile
 8006c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c92:	f383 8811 	msr	BASEPRI, r3
 8006c96:	f3bf 8f6f 	isb	sy
 8006c9a:	f3bf 8f4f 	dsb	sy
 8006c9e:	603b      	str	r3, [r7, #0]
    }
 8006ca0:	bf00      	nop
 8006ca2:	e7fe      	b.n	8006ca2 <vPortEnterCritical+0x4a>
    }
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr
 8006cb0:	2000000c 	.word	0x2000000c
 8006cb4:	e000ed04 	.word	0xe000ed04

08006cb8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8006cbe:	4b12      	ldr	r3, [pc, #72]	; (8006d08 <vPortExitCritical+0x50>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d10a      	bne.n	8006cdc <vPortExitCritical+0x24>
        __asm volatile
 8006cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cca:	f383 8811 	msr	BASEPRI, r3
 8006cce:	f3bf 8f6f 	isb	sy
 8006cd2:	f3bf 8f4f 	dsb	sy
 8006cd6:	607b      	str	r3, [r7, #4]
    }
 8006cd8:	bf00      	nop
 8006cda:	e7fe      	b.n	8006cda <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8006cdc:	4b0a      	ldr	r3, [pc, #40]	; (8006d08 <vPortExitCritical+0x50>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	4a09      	ldr	r2, [pc, #36]	; (8006d08 <vPortExitCritical+0x50>)
 8006ce4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006ce6:	4b08      	ldr	r3, [pc, #32]	; (8006d08 <vPortExitCritical+0x50>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d105      	bne.n	8006cfa <vPortExitCritical+0x42>
 8006cee:	2300      	movs	r3, #0
 8006cf0:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	f383 8811 	msr	BASEPRI, r3
    }
 8006cf8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8006cfa:	bf00      	nop
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	2000000c 	.word	0x2000000c
 8006d0c:	00000000 	.word	0x00000000

08006d10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006d10:	f3ef 8009 	mrs	r0, PSP
 8006d14:	f3bf 8f6f 	isb	sy
 8006d18:	4b15      	ldr	r3, [pc, #84]	; (8006d70 <pxCurrentTCBConst>)
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	f01e 0f10 	tst.w	lr, #16
 8006d20:	bf08      	it	eq
 8006d22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006d26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d2a:	6010      	str	r0, [r2, #0]
 8006d2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006d30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006d34:	f380 8811 	msr	BASEPRI, r0
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	f3bf 8f6f 	isb	sy
 8006d40:	f7fe ff78 	bl	8005c34 <vTaskSwitchContext>
 8006d44:	f04f 0000 	mov.w	r0, #0
 8006d48:	f380 8811 	msr	BASEPRI, r0
 8006d4c:	bc09      	pop	{r0, r3}
 8006d4e:	6819      	ldr	r1, [r3, #0]
 8006d50:	6808      	ldr	r0, [r1, #0]
 8006d52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d56:	f01e 0f10 	tst.w	lr, #16
 8006d5a:	bf08      	it	eq
 8006d5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006d60:	f380 8809 	msr	PSP, r0
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	f3af 8000 	nop.w

08006d70 <pxCurrentTCBConst>:
 8006d70:	200001c4 	.word	0x200001c4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006d74:	bf00      	nop
 8006d76:	bf00      	nop

08006d78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
        __asm volatile
 8006d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d82:	f383 8811 	msr	BASEPRI, r3
 8006d86:	f3bf 8f6f 	isb	sy
 8006d8a:	f3bf 8f4f 	dsb	sy
 8006d8e:	607b      	str	r3, [r7, #4]
    }
 8006d90:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8006d92:	f001 fc7b 	bl	800868c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006d96:	f7fe fe91 	bl	8005abc <xTaskIncrementTick>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d006      	beq.n	8006dae <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8006da0:	f001 fcd2 	bl	8008748 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006da4:	4b08      	ldr	r3, [pc, #32]	; (8006dc8 <SysTick_Handler+0x50>)
 8006da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006daa:	601a      	str	r2, [r3, #0]
 8006dac:	e001      	b.n	8006db2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8006dae:	f001 fcaf 	bl	8008710 <SEGGER_SYSVIEW_RecordExitISR>
 8006db2:	2300      	movs	r3, #0
 8006db4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	f383 8811 	msr	BASEPRI, r3
    }
 8006dbc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8006dbe:	bf00      	nop
 8006dc0:	3708      	adds	r7, #8
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	e000ed04 	.word	0xe000ed04

08006dcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8006dcc:	b480      	push	{r7}
 8006dce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006dd0:	4b0b      	ldr	r3, [pc, #44]	; (8006e00 <vPortSetupTimerInterrupt+0x34>)
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006dd6:	4b0b      	ldr	r3, [pc, #44]	; (8006e04 <vPortSetupTimerInterrupt+0x38>)
 8006dd8:	2200      	movs	r2, #0
 8006dda:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006ddc:	4b0a      	ldr	r3, [pc, #40]	; (8006e08 <vPortSetupTimerInterrupt+0x3c>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a0a      	ldr	r2, [pc, #40]	; (8006e0c <vPortSetupTimerInterrupt+0x40>)
 8006de2:	fba2 2303 	umull	r2, r3, r2, r3
 8006de6:	099b      	lsrs	r3, r3, #6
 8006de8:	4a09      	ldr	r2, [pc, #36]	; (8006e10 <vPortSetupTimerInterrupt+0x44>)
 8006dea:	3b01      	subs	r3, #1
 8006dec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006dee:	4b04      	ldr	r3, [pc, #16]	; (8006e00 <vPortSetupTimerInterrupt+0x34>)
 8006df0:	2207      	movs	r2, #7
 8006df2:	601a      	str	r2, [r3, #0]
}
 8006df4:	bf00      	nop
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	e000e010 	.word	0xe000e010
 8006e04:	e000e018 	.word	0xe000e018
 8006e08:	20000000 	.word	0x20000000
 8006e0c:	10624dd3 	.word	0x10624dd3
 8006e10:	e000e014 	.word	0xe000e014

08006e14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006e14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006e24 <vPortEnableVFP+0x10>
 8006e18:	6801      	ldr	r1, [r0, #0]
 8006e1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006e1e:	6001      	str	r1, [r0, #0]
 8006e20:	4770      	bx	lr
 8006e22:	0000      	.short	0x0000
 8006e24:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006e28:	bf00      	nop
 8006e2a:	bf00      	nop

08006e2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006e32:	f3ef 8305 	mrs	r3, IPSR
 8006e36:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2b0f      	cmp	r3, #15
 8006e3c:	d914      	bls.n	8006e68 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006e3e:	4a17      	ldr	r2, [pc, #92]	; (8006e9c <vPortValidateInterruptPriority+0x70>)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	4413      	add	r3, r2
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006e48:	4b15      	ldr	r3, [pc, #84]	; (8006ea0 <vPortValidateInterruptPriority+0x74>)
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	7afa      	ldrb	r2, [r7, #11]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d20a      	bcs.n	8006e68 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8006e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e56:	f383 8811 	msr	BASEPRI, r3
 8006e5a:	f3bf 8f6f 	isb	sy
 8006e5e:	f3bf 8f4f 	dsb	sy
 8006e62:	607b      	str	r3, [r7, #4]
    }
 8006e64:	bf00      	nop
 8006e66:	e7fe      	b.n	8006e66 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006e68:	4b0e      	ldr	r3, [pc, #56]	; (8006ea4 <vPortValidateInterruptPriority+0x78>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006e70:	4b0d      	ldr	r3, [pc, #52]	; (8006ea8 <vPortValidateInterruptPriority+0x7c>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d90a      	bls.n	8006e8e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8006e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7c:	f383 8811 	msr	BASEPRI, r3
 8006e80:	f3bf 8f6f 	isb	sy
 8006e84:	f3bf 8f4f 	dsb	sy
 8006e88:	603b      	str	r3, [r7, #0]
    }
 8006e8a:	bf00      	nop
 8006e8c:	e7fe      	b.n	8006e8c <vPortValidateInterruptPriority+0x60>
    }
 8006e8e:	bf00      	nop
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	e000e3f0 	.word	0xe000e3f0
 8006ea0:	20000304 	.word	0x20000304
 8006ea4:	e000ed0c 	.word	0xe000ed0c
 8006ea8:	20000308 	.word	0x20000308

08006eac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b08a      	sub	sp, #40	; 0x28
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8006eb8:	f7fe fd30 	bl	800591c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8006ebc:	4b65      	ldr	r3, [pc, #404]	; (8007054 <pvPortMalloc+0x1a8>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d101      	bne.n	8006ec8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006ec4:	f000 f934 	bl	8007130 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ec8:	4b63      	ldr	r3, [pc, #396]	; (8007058 <pvPortMalloc+0x1ac>)
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4013      	ands	r3, r2
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f040 80a7 	bne.w	8007024 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d02d      	beq.n	8006f38 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8006edc:	2208      	movs	r2, #8
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d227      	bcs.n	8006f38 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8006ee8:	2208      	movs	r2, #8
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4413      	add	r3, r2
 8006eee:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f003 0307 	and.w	r3, r3, #7
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d021      	beq.n	8006f3e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f023 0307 	bic.w	r3, r3, #7
 8006f00:	3308      	adds	r3, #8
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d214      	bcs.n	8006f32 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f023 0307 	bic.w	r3, r3, #7
 8006f0e:	3308      	adds	r3, #8
 8006f10:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f003 0307 	and.w	r3, r3, #7
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d010      	beq.n	8006f3e <pvPortMalloc+0x92>
        __asm volatile
 8006f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f20:	f383 8811 	msr	BASEPRI, r3
 8006f24:	f3bf 8f6f 	isb	sy
 8006f28:	f3bf 8f4f 	dsb	sy
 8006f2c:	617b      	str	r3, [r7, #20]
    }
 8006f2e:	bf00      	nop
 8006f30:	e7fe      	b.n	8006f30 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8006f32:	2300      	movs	r3, #0
 8006f34:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006f36:	e002      	b.n	8006f3e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	607b      	str	r3, [r7, #4]
 8006f3c:	e000      	b.n	8006f40 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006f3e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d06e      	beq.n	8007024 <pvPortMalloc+0x178>
 8006f46:	4b45      	ldr	r3, [pc, #276]	; (800705c <pvPortMalloc+0x1b0>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d869      	bhi.n	8007024 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006f50:	4b43      	ldr	r3, [pc, #268]	; (8007060 <pvPortMalloc+0x1b4>)
 8006f52:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8006f54:	4b42      	ldr	r3, [pc, #264]	; (8007060 <pvPortMalloc+0x1b4>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f5a:	e004      	b.n	8006f66 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8006f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d903      	bls.n	8006f78 <pvPortMalloc+0xcc>
 8006f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d1f1      	bne.n	8006f5c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006f78:	4b36      	ldr	r3, [pc, #216]	; (8007054 <pvPortMalloc+0x1a8>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d050      	beq.n	8007024 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f82:	6a3b      	ldr	r3, [r7, #32]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2208      	movs	r2, #8
 8006f88:	4413      	add	r3, r2
 8006f8a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	6a3b      	ldr	r3, [r7, #32]
 8006f92:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f96:	685a      	ldr	r2, [r3, #4]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	1ad2      	subs	r2, r2, r3
 8006f9c:	2308      	movs	r3, #8
 8006f9e:	005b      	lsls	r3, r3, #1
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d91f      	bls.n	8006fe4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4413      	add	r3, r2
 8006faa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	f003 0307 	and.w	r3, r3, #7
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00a      	beq.n	8006fcc <pvPortMalloc+0x120>
        __asm volatile
 8006fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fba:	f383 8811 	msr	BASEPRI, r3
 8006fbe:	f3bf 8f6f 	isb	sy
 8006fc2:	f3bf 8f4f 	dsb	sy
 8006fc6:	613b      	str	r3, [r7, #16]
    }
 8006fc8:	bf00      	nop
 8006fca:	e7fe      	b.n	8006fca <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fce:	685a      	ldr	r2, [r3, #4]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	1ad2      	subs	r2, r2, r3
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006fde:	69b8      	ldr	r0, [r7, #24]
 8006fe0:	f000 f908 	bl	80071f4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006fe4:	4b1d      	ldr	r3, [pc, #116]	; (800705c <pvPortMalloc+0x1b0>)
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	4a1b      	ldr	r2, [pc, #108]	; (800705c <pvPortMalloc+0x1b0>)
 8006ff0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ff2:	4b1a      	ldr	r3, [pc, #104]	; (800705c <pvPortMalloc+0x1b0>)
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	4b1b      	ldr	r3, [pc, #108]	; (8007064 <pvPortMalloc+0x1b8>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d203      	bcs.n	8007006 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ffe:	4b17      	ldr	r3, [pc, #92]	; (800705c <pvPortMalloc+0x1b0>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a18      	ldr	r2, [pc, #96]	; (8007064 <pvPortMalloc+0x1b8>)
 8007004:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007008:	685a      	ldr	r2, [r3, #4]
 800700a:	4b13      	ldr	r3, [pc, #76]	; (8007058 <pvPortMalloc+0x1ac>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	431a      	orrs	r2, r3
 8007010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007012:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007016:	2200      	movs	r2, #0
 8007018:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800701a:	4b13      	ldr	r3, [pc, #76]	; (8007068 <pvPortMalloc+0x1bc>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	3301      	adds	r3, #1
 8007020:	4a11      	ldr	r2, [pc, #68]	; (8007068 <pvPortMalloc+0x1bc>)
 8007022:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007024:	f7fe fc88 	bl	8005938 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	f003 0307 	and.w	r3, r3, #7
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00a      	beq.n	8007048 <pvPortMalloc+0x19c>
        __asm volatile
 8007032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007036:	f383 8811 	msr	BASEPRI, r3
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	60fb      	str	r3, [r7, #12]
    }
 8007044:	bf00      	nop
 8007046:	e7fe      	b.n	8007046 <pvPortMalloc+0x19a>
    return pvReturn;
 8007048:	69fb      	ldr	r3, [r7, #28]
}
 800704a:	4618      	mov	r0, r3
 800704c:	3728      	adds	r7, #40	; 0x28
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	20012f14 	.word	0x20012f14
 8007058:	20012f28 	.word	0x20012f28
 800705c:	20012f18 	.word	0x20012f18
 8007060:	20012f0c 	.word	0x20012f0c
 8007064:	20012f1c 	.word	0x20012f1c
 8007068:	20012f20 	.word	0x20012f20

0800706c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b086      	sub	sp, #24
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d04d      	beq.n	800711a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800707e:	2308      	movs	r3, #8
 8007080:	425b      	negs	r3, r3
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	4413      	add	r3, r2
 8007086:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	685a      	ldr	r2, [r3, #4]
 8007090:	4b24      	ldr	r3, [pc, #144]	; (8007124 <vPortFree+0xb8>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4013      	ands	r3, r2
 8007096:	2b00      	cmp	r3, #0
 8007098:	d10a      	bne.n	80070b0 <vPortFree+0x44>
        __asm volatile
 800709a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800709e:	f383 8811 	msr	BASEPRI, r3
 80070a2:	f3bf 8f6f 	isb	sy
 80070a6:	f3bf 8f4f 	dsb	sy
 80070aa:	60fb      	str	r3, [r7, #12]
    }
 80070ac:	bf00      	nop
 80070ae:	e7fe      	b.n	80070ae <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00a      	beq.n	80070ce <vPortFree+0x62>
        __asm volatile
 80070b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070bc:	f383 8811 	msr	BASEPRI, r3
 80070c0:	f3bf 8f6f 	isb	sy
 80070c4:	f3bf 8f4f 	dsb	sy
 80070c8:	60bb      	str	r3, [r7, #8]
    }
 80070ca:	bf00      	nop
 80070cc:	e7fe      	b.n	80070cc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	4b14      	ldr	r3, [pc, #80]	; (8007124 <vPortFree+0xb8>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4013      	ands	r3, r2
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d01e      	beq.n	800711a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d11a      	bne.n	800711a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	685a      	ldr	r2, [r3, #4]
 80070e8:	4b0e      	ldr	r3, [pc, #56]	; (8007124 <vPortFree+0xb8>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	43db      	mvns	r3, r3
 80070ee:	401a      	ands	r2, r3
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80070f4:	f7fe fc12 	bl	800591c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	685a      	ldr	r2, [r3, #4]
 80070fc:	4b0a      	ldr	r3, [pc, #40]	; (8007128 <vPortFree+0xbc>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4413      	add	r3, r2
 8007102:	4a09      	ldr	r2, [pc, #36]	; (8007128 <vPortFree+0xbc>)
 8007104:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007106:	6938      	ldr	r0, [r7, #16]
 8007108:	f000 f874 	bl	80071f4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800710c:	4b07      	ldr	r3, [pc, #28]	; (800712c <vPortFree+0xc0>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	3301      	adds	r3, #1
 8007112:	4a06      	ldr	r2, [pc, #24]	; (800712c <vPortFree+0xc0>)
 8007114:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007116:	f7fe fc0f 	bl	8005938 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800711a:	bf00      	nop
 800711c:	3718      	adds	r7, #24
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	20012f28 	.word	0x20012f28
 8007128:	20012f18 	.word	0x20012f18
 800712c:	20012f24 	.word	0x20012f24

08007130 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007136:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800713a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800713c:	4b27      	ldr	r3, [pc, #156]	; (80071dc <prvHeapInit+0xac>)
 800713e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f003 0307 	and.w	r3, r3, #7
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00c      	beq.n	8007164 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	3307      	adds	r3, #7
 800714e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f023 0307 	bic.w	r3, r3, #7
 8007156:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	1ad3      	subs	r3, r2, r3
 800715e:	4a1f      	ldr	r2, [pc, #124]	; (80071dc <prvHeapInit+0xac>)
 8007160:	4413      	add	r3, r2
 8007162:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007168:	4a1d      	ldr	r2, [pc, #116]	; (80071e0 <prvHeapInit+0xb0>)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800716e:	4b1c      	ldr	r3, [pc, #112]	; (80071e0 <prvHeapInit+0xb0>)
 8007170:	2200      	movs	r2, #0
 8007172:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	68ba      	ldr	r2, [r7, #8]
 8007178:	4413      	add	r3, r2
 800717a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800717c:	2208      	movs	r2, #8
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	1a9b      	subs	r3, r3, r2
 8007182:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f023 0307 	bic.w	r3, r3, #7
 800718a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	4a15      	ldr	r2, [pc, #84]	; (80071e4 <prvHeapInit+0xb4>)
 8007190:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007192:	4b14      	ldr	r3, [pc, #80]	; (80071e4 <prvHeapInit+0xb4>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2200      	movs	r2, #0
 8007198:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800719a:	4b12      	ldr	r3, [pc, #72]	; (80071e4 <prvHeapInit+0xb4>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2200      	movs	r2, #0
 80071a0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	1ad2      	subs	r2, r2, r3
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80071b0:	4b0c      	ldr	r3, [pc, #48]	; (80071e4 <prvHeapInit+0xb4>)
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	4a0a      	ldr	r2, [pc, #40]	; (80071e8 <prvHeapInit+0xb8>)
 80071be:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	4a09      	ldr	r2, [pc, #36]	; (80071ec <prvHeapInit+0xbc>)
 80071c6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80071c8:	4b09      	ldr	r3, [pc, #36]	; (80071f0 <prvHeapInit+0xc0>)
 80071ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80071ce:	601a      	str	r2, [r3, #0]
}
 80071d0:	bf00      	nop
 80071d2:	3714      	adds	r7, #20
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr
 80071dc:	2000030c 	.word	0x2000030c
 80071e0:	20012f0c 	.word	0x20012f0c
 80071e4:	20012f14 	.word	0x20012f14
 80071e8:	20012f1c 	.word	0x20012f1c
 80071ec:	20012f18 	.word	0x20012f18
 80071f0:	20012f28 	.word	0x20012f28

080071f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80071fc:	4b28      	ldr	r3, [pc, #160]	; (80072a0 <prvInsertBlockIntoFreeList+0xac>)
 80071fe:	60fb      	str	r3, [r7, #12]
 8007200:	e002      	b.n	8007208 <prvInsertBlockIntoFreeList+0x14>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	60fb      	str	r3, [r7, #12]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	429a      	cmp	r2, r3
 8007210:	d8f7      	bhi.n	8007202 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	68ba      	ldr	r2, [r7, #8]
 800721c:	4413      	add	r3, r2
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	429a      	cmp	r2, r3
 8007222:	d108      	bne.n	8007236 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	685a      	ldr	r2, [r3, #4]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	441a      	add	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	441a      	add	r2, r3
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	429a      	cmp	r2, r3
 8007248:	d118      	bne.n	800727c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	4b15      	ldr	r3, [pc, #84]	; (80072a4 <prvInsertBlockIntoFreeList+0xb0>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	429a      	cmp	r2, r3
 8007254:	d00d      	beq.n	8007272 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	685a      	ldr	r2, [r3, #4]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	441a      	add	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	601a      	str	r2, [r3, #0]
 8007270:	e008      	b.n	8007284 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007272:	4b0c      	ldr	r3, [pc, #48]	; (80072a4 <prvInsertBlockIntoFreeList+0xb0>)
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	601a      	str	r2, [r3, #0]
 800727a:	e003      	b.n	8007284 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	429a      	cmp	r2, r3
 800728a:	d002      	beq.n	8007292 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007292:	bf00      	nop
 8007294:	3714      	adds	r7, #20
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	20012f0c 	.word	0x20012f0c
 80072a4:	20012f14 	.word	0x20012f14

080072a8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80072ae:	4b26      	ldr	r3, [pc, #152]	; (8007348 <_DoInit+0xa0>)
 80072b0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80072b2:	22a8      	movs	r2, #168	; 0xa8
 80072b4:	2100      	movs	r1, #0
 80072b6:	6838      	ldr	r0, [r7, #0]
 80072b8:	f001 fe7c 	bl	8008fb4 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	2203      	movs	r2, #3
 80072c0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	2203      	movs	r2, #3
 80072c6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	4a20      	ldr	r2, [pc, #128]	; (800734c <_DoInit+0xa4>)
 80072cc:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	4a1f      	ldr	r2, [pc, #124]	; (8007350 <_DoInit+0xa8>)
 80072d2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80072da:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	2200      	movs	r2, #0
 80072e0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	2200      	movs	r2, #0
 80072e6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	2200      	movs	r2, #0
 80072ec:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	4a16      	ldr	r2, [pc, #88]	; (800734c <_DoInit+0xa4>)
 80072f2:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	4a17      	ldr	r2, [pc, #92]	; (8007354 <_DoInit+0xac>)
 80072f8:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	2210      	movs	r2, #16
 80072fe:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	2200      	movs	r2, #0
 8007304:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	2200      	movs	r2, #0
 800730a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	2200      	movs	r2, #0
 8007310:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8007312:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8007316:	2300      	movs	r3, #0
 8007318:	607b      	str	r3, [r7, #4]
 800731a:	e00c      	b.n	8007336 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f1c3 030f 	rsb	r3, r3, #15
 8007322:	4a0d      	ldr	r2, [pc, #52]	; (8007358 <_DoInit+0xb0>)
 8007324:	5cd1      	ldrb	r1, [r2, r3]
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4413      	add	r3, r2
 800732c:	460a      	mov	r2, r1
 800732e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	3301      	adds	r3, #1
 8007334:	607b      	str	r3, [r7, #4]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2b0f      	cmp	r3, #15
 800733a:	d9ef      	bls.n	800731c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800733c:	f3bf 8f5f 	dmb	sy
}
 8007340:	bf00      	nop
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	20012f2c 	.word	0x20012f2c
 800734c:	08009210 	.word	0x08009210
 8007350:	20012fd4 	.word	0x20012fd4
 8007354:	200133d4 	.word	0x200133d4
 8007358:	08009300 	.word	0x08009300

0800735c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800735c:	b580      	push	{r7, lr}
 800735e:	b08c      	sub	sp, #48	; 0x30
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8007368:	4b3e      	ldr	r3, [pc, #248]	; (8007464 <SEGGER_RTT_ReadNoLock+0x108>)
 800736a:	623b      	str	r3, [r7, #32]
 800736c:	6a3b      	ldr	r3, [r7, #32]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	b2db      	uxtb	r3, r3
 8007372:	2b00      	cmp	r3, #0
 8007374:	d101      	bne.n	800737a <SEGGER_RTT_ReadNoLock+0x1e>
 8007376:	f7ff ff97 	bl	80072a8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	4613      	mov	r3, r2
 800737e:	005b      	lsls	r3, r3, #1
 8007380:	4413      	add	r3, r2
 8007382:	00db      	lsls	r3, r3, #3
 8007384:	3360      	adds	r3, #96	; 0x60
 8007386:	4a37      	ldr	r2, [pc, #220]	; (8007464 <SEGGER_RTT_ReadNoLock+0x108>)
 8007388:	4413      	add	r3, r2
 800738a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800739c:	2300      	movs	r3, #0
 800739e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80073a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d92b      	bls.n	8007400 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	689a      	ldr	r2, [r3, #8]
 80073ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4293      	cmp	r3, r2
 80073b8:	bf28      	it	cs
 80073ba:	4613      	movcs	r3, r2
 80073bc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	685a      	ldr	r2, [r3, #4]
 80073c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c4:	4413      	add	r3, r2
 80073c6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	6939      	ldr	r1, [r7, #16]
 80073cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073ce:	f001 fde3 	bl	8008f98 <memcpy>
    NumBytesRead += NumBytesRem;
 80073d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	4413      	add	r3, r2
 80073d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80073da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	4413      	add	r3, r2
 80073e0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80073ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	4413      	add	r3, r2
 80073f0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d101      	bne.n	8007400 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80073fc:	2300      	movs	r3, #0
 80073fe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8007400:	69ba      	ldr	r2, [r7, #24]
 8007402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4293      	cmp	r3, r2
 800740e:	bf28      	it	cs
 8007410:	4613      	movcs	r3, r2
 8007412:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d019      	beq.n	800744e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	685a      	ldr	r2, [r3, #4]
 800741e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007420:	4413      	add	r3, r2
 8007422:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	6939      	ldr	r1, [r7, #16]
 8007428:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800742a:	f001 fdb5 	bl	8008f98 <memcpy>
    NumBytesRead += NumBytesRem;
 800742e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	4413      	add	r3, r2
 8007434:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8007436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	4413      	add	r3, r2
 800743c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8007446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	4413      	add	r3, r2
 800744c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800744e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007450:	2b00      	cmp	r3, #0
 8007452:	d002      	beq.n	800745a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007458:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800745a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800745c:	4618      	mov	r0, r3
 800745e:	3730      	adds	r7, #48	; 0x30
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	20012f2c 	.word	0x20012f2c

08007468 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8007468:	b580      	push	{r7, lr}
 800746a:	b088      	sub	sp, #32
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
 8007474:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8007476:	4b3d      	ldr	r3, [pc, #244]	; (800756c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8007478:	61bb      	str	r3, [r7, #24]
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	b2db      	uxtb	r3, r3
 8007480:	2b00      	cmp	r3, #0
 8007482:	d101      	bne.n	8007488 <SEGGER_RTT_AllocUpBuffer+0x20>
 8007484:	f7ff ff10 	bl	80072a8 <_DoInit>
  SEGGER_RTT_LOCK();
 8007488:	f3ef 8311 	mrs	r3, BASEPRI
 800748c:	f04f 0120 	mov.w	r1, #32
 8007490:	f381 8811 	msr	BASEPRI, r1
 8007494:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007496:	4b35      	ldr	r3, [pc, #212]	; (800756c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8007498:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800749a:	2300      	movs	r3, #0
 800749c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800749e:	6939      	ldr	r1, [r7, #16]
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	1c5a      	adds	r2, r3, #1
 80074a4:	4613      	mov	r3, r2
 80074a6:	005b      	lsls	r3, r3, #1
 80074a8:	4413      	add	r3, r2
 80074aa:	00db      	lsls	r3, r3, #3
 80074ac:	440b      	add	r3, r1
 80074ae:	3304      	adds	r3, #4
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d008      	beq.n	80074c8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	3301      	adds	r3, #1
 80074ba:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	69fa      	ldr	r2, [r7, #28]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	dbeb      	blt.n	800749e <SEGGER_RTT_AllocUpBuffer+0x36>
 80074c6:	e000      	b.n	80074ca <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80074c8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	69fa      	ldr	r2, [r7, #28]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	da3f      	bge.n	8007554 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80074d4:	6939      	ldr	r1, [r7, #16]
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	1c5a      	adds	r2, r3, #1
 80074da:	4613      	mov	r3, r2
 80074dc:	005b      	lsls	r3, r3, #1
 80074de:	4413      	add	r3, r2
 80074e0:	00db      	lsls	r3, r3, #3
 80074e2:	440b      	add	r3, r1
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80074e8:	6939      	ldr	r1, [r7, #16]
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	1c5a      	adds	r2, r3, #1
 80074ee:	4613      	mov	r3, r2
 80074f0:	005b      	lsls	r3, r3, #1
 80074f2:	4413      	add	r3, r2
 80074f4:	00db      	lsls	r3, r3, #3
 80074f6:	440b      	add	r3, r1
 80074f8:	3304      	adds	r3, #4
 80074fa:	68ba      	ldr	r2, [r7, #8]
 80074fc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80074fe:	6939      	ldr	r1, [r7, #16]
 8007500:	69fa      	ldr	r2, [r7, #28]
 8007502:	4613      	mov	r3, r2
 8007504:	005b      	lsls	r3, r3, #1
 8007506:	4413      	add	r3, r2
 8007508:	00db      	lsls	r3, r3, #3
 800750a:	440b      	add	r3, r1
 800750c:	3320      	adds	r3, #32
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8007512:	6939      	ldr	r1, [r7, #16]
 8007514:	69fa      	ldr	r2, [r7, #28]
 8007516:	4613      	mov	r3, r2
 8007518:	005b      	lsls	r3, r3, #1
 800751a:	4413      	add	r3, r2
 800751c:	00db      	lsls	r3, r3, #3
 800751e:	440b      	add	r3, r1
 8007520:	3328      	adds	r3, #40	; 0x28
 8007522:	2200      	movs	r2, #0
 8007524:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8007526:	6939      	ldr	r1, [r7, #16]
 8007528:	69fa      	ldr	r2, [r7, #28]
 800752a:	4613      	mov	r3, r2
 800752c:	005b      	lsls	r3, r3, #1
 800752e:	4413      	add	r3, r2
 8007530:	00db      	lsls	r3, r3, #3
 8007532:	440b      	add	r3, r1
 8007534:	3324      	adds	r3, #36	; 0x24
 8007536:	2200      	movs	r2, #0
 8007538:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800753a:	6939      	ldr	r1, [r7, #16]
 800753c:	69fa      	ldr	r2, [r7, #28]
 800753e:	4613      	mov	r3, r2
 8007540:	005b      	lsls	r3, r3, #1
 8007542:	4413      	add	r3, r2
 8007544:	00db      	lsls	r3, r3, #3
 8007546:	440b      	add	r3, r1
 8007548:	332c      	adds	r3, #44	; 0x2c
 800754a:	683a      	ldr	r2, [r7, #0]
 800754c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800754e:	f3bf 8f5f 	dmb	sy
 8007552:	e002      	b.n	800755a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8007554:	f04f 33ff 	mov.w	r3, #4294967295
 8007558:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8007560:	69fb      	ldr	r3, [r7, #28]
}
 8007562:	4618      	mov	r0, r3
 8007564:	3720      	adds	r7, #32
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	20012f2c 	.word	0x20012f2c

08007570 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8007570:	b580      	push	{r7, lr}
 8007572:	b08a      	sub	sp, #40	; 0x28
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	607a      	str	r2, [r7, #4]
 800757c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800757e:	4b21      	ldr	r3, [pc, #132]	; (8007604 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8007580:	623b      	str	r3, [r7, #32]
 8007582:	6a3b      	ldr	r3, [r7, #32]
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	b2db      	uxtb	r3, r3
 8007588:	2b00      	cmp	r3, #0
 800758a:	d101      	bne.n	8007590 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800758c:	f7ff fe8c 	bl	80072a8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007590:	4b1c      	ldr	r3, [pc, #112]	; (8007604 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8007592:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2b02      	cmp	r3, #2
 8007598:	d82c      	bhi.n	80075f4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800759a:	f3ef 8311 	mrs	r3, BASEPRI
 800759e:	f04f 0120 	mov.w	r1, #32
 80075a2:	f381 8811 	msr	BASEPRI, r1
 80075a6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	4613      	mov	r3, r2
 80075ac:	005b      	lsls	r3, r3, #1
 80075ae:	4413      	add	r3, r2
 80075b0:	00db      	lsls	r3, r3, #3
 80075b2:	3360      	adds	r3, #96	; 0x60
 80075b4:	69fa      	ldr	r2, [r7, #28]
 80075b6:	4413      	add	r3, r2
 80075b8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00e      	beq.n	80075de <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	68ba      	ldr	r2, [r7, #8]
 80075c4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	683a      	ldr	r2, [r7, #0]
 80075d0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	2200      	movs	r2, #0
 80075d6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	2200      	movs	r2, #0
 80075dc:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075e2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80075e4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80075ee:	2300      	movs	r3, #0
 80075f0:	627b      	str	r3, [r7, #36]	; 0x24
 80075f2:	e002      	b.n	80075fa <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80075f4:	f04f 33ff 	mov.w	r3, #4294967295
 80075f8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3728      	adds	r7, #40	; 0x28
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	20012f2c 	.word	0x20012f2c

08007608 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8007608:	b480      	push	{r7}
 800760a:	b087      	sub	sp, #28
 800760c:	af00      	add	r7, sp, #0
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8007614:	2300      	movs	r3, #0
 8007616:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00f      	beq.n	800763e <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800761e:	e002      	b.n	8007626 <_EncodeStr+0x1e>
      Len++;
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	3301      	adds	r3, #1
 8007624:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8007626:	68ba      	ldr	r2, [r7, #8]
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	4413      	add	r3, r2
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1f6      	bne.n	8007620 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8007632:	693a      	ldr	r2, [r7, #16]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	429a      	cmp	r2, r3
 8007638:	d901      	bls.n	800763e <_EncodeStr+0x36>
      Len = Limit;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	2bfe      	cmp	r3, #254	; 0xfe
 8007642:	d806      	bhi.n	8007652 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	1c5a      	adds	r2, r3, #1
 8007648:	60fa      	str	r2, [r7, #12]
 800764a:	693a      	ldr	r2, [r7, #16]
 800764c:	b2d2      	uxtb	r2, r2
 800764e:	701a      	strb	r2, [r3, #0]
 8007650:	e011      	b.n	8007676 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	1c5a      	adds	r2, r3, #1
 8007656:	60fa      	str	r2, [r7, #12]
 8007658:	22ff      	movs	r2, #255	; 0xff
 800765a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	1c5a      	adds	r2, r3, #1
 8007660:	60fa      	str	r2, [r7, #12]
 8007662:	693a      	ldr	r2, [r7, #16]
 8007664:	b2d2      	uxtb	r2, r2
 8007666:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	0a19      	lsrs	r1, r3, #8
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	1c5a      	adds	r2, r3, #1
 8007670:	60fa      	str	r2, [r7, #12]
 8007672:	b2ca      	uxtb	r2, r1
 8007674:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8007676:	2300      	movs	r3, #0
 8007678:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800767a:	e00a      	b.n	8007692 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800767c:	68ba      	ldr	r2, [r7, #8]
 800767e:	1c53      	adds	r3, r2, #1
 8007680:	60bb      	str	r3, [r7, #8]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	1c59      	adds	r1, r3, #1
 8007686:	60f9      	str	r1, [r7, #12]
 8007688:	7812      	ldrb	r2, [r2, #0]
 800768a:	701a      	strb	r2, [r3, #0]
    n++;
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	3301      	adds	r3, #1
 8007690:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8007692:	697a      	ldr	r2, [r7, #20]
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	429a      	cmp	r2, r3
 8007698:	d3f0      	bcc.n	800767c <_EncodeStr+0x74>
  }
  return pPayload;
 800769a:	68fb      	ldr	r3, [r7, #12]
}
 800769c:	4618      	mov	r0, r3
 800769e:	371c      	adds	r7, #28
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	3307      	adds	r3, #7
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80076c6:	4b35      	ldr	r3, [pc, #212]	; (800779c <_HandleIncomingPacket+0xdc>)
 80076c8:	7e1b      	ldrb	r3, [r3, #24]
 80076ca:	4618      	mov	r0, r3
 80076cc:	1cfb      	adds	r3, r7, #3
 80076ce:	2201      	movs	r2, #1
 80076d0:	4619      	mov	r1, r3
 80076d2:	f7ff fe43 	bl	800735c <SEGGER_RTT_ReadNoLock>
 80076d6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d052      	beq.n	8007784 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80076de:	78fb      	ldrb	r3, [r7, #3]
 80076e0:	2b80      	cmp	r3, #128	; 0x80
 80076e2:	d031      	beq.n	8007748 <_HandleIncomingPacket+0x88>
 80076e4:	2b80      	cmp	r3, #128	; 0x80
 80076e6:	dc40      	bgt.n	800776a <_HandleIncomingPacket+0xaa>
 80076e8:	2b07      	cmp	r3, #7
 80076ea:	dc15      	bgt.n	8007718 <_HandleIncomingPacket+0x58>
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	dd3c      	ble.n	800776a <_HandleIncomingPacket+0xaa>
 80076f0:	3b01      	subs	r3, #1
 80076f2:	2b06      	cmp	r3, #6
 80076f4:	d839      	bhi.n	800776a <_HandleIncomingPacket+0xaa>
 80076f6:	a201      	add	r2, pc, #4	; (adr r2, 80076fc <_HandleIncomingPacket+0x3c>)
 80076f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fc:	0800771f 	.word	0x0800771f
 8007700:	08007725 	.word	0x08007725
 8007704:	0800772b 	.word	0x0800772b
 8007708:	08007731 	.word	0x08007731
 800770c:	08007737 	.word	0x08007737
 8007710:	0800773d 	.word	0x0800773d
 8007714:	08007743 	.word	0x08007743
 8007718:	2b7f      	cmp	r3, #127	; 0x7f
 800771a:	d035      	beq.n	8007788 <_HandleIncomingPacket+0xc8>
 800771c:	e025      	b.n	800776a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800771e:	f000 fced 	bl	80080fc <SEGGER_SYSVIEW_Start>
      break;
 8007722:	e036      	b.n	8007792 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8007724:	f000 fda4 	bl	8008270 <SEGGER_SYSVIEW_Stop>
      break;
 8007728:	e033      	b.n	8007792 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800772a:	f000 ff7d 	bl	8008628 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800772e:	e030      	b.n	8007792 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8007730:	f000 ff42 	bl	80085b8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8007734:	e02d      	b.n	8007792 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8007736:	f000 fdc1 	bl	80082bc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800773a:	e02a      	b.n	8007792 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800773c:	f001 fa10 	bl	8008b60 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8007740:	e027      	b.n	8007792 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8007742:	f001 f9ef 	bl	8008b24 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8007746:	e024      	b.n	8007792 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007748:	4b14      	ldr	r3, [pc, #80]	; (800779c <_HandleIncomingPacket+0xdc>)
 800774a:	7e1b      	ldrb	r3, [r3, #24]
 800774c:	4618      	mov	r0, r3
 800774e:	1cfb      	adds	r3, r7, #3
 8007750:	2201      	movs	r2, #1
 8007752:	4619      	mov	r1, r3
 8007754:	f7ff fe02 	bl	800735c <SEGGER_RTT_ReadNoLock>
 8007758:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d015      	beq.n	800778c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8007760:	78fb      	ldrb	r3, [r7, #3]
 8007762:	4618      	mov	r0, r3
 8007764:	f001 f95e 	bl	8008a24 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8007768:	e010      	b.n	800778c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800776a:	78fb      	ldrb	r3, [r7, #3]
 800776c:	b25b      	sxtb	r3, r3
 800776e:	2b00      	cmp	r3, #0
 8007770:	da0e      	bge.n	8007790 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007772:	4b0a      	ldr	r3, [pc, #40]	; (800779c <_HandleIncomingPacket+0xdc>)
 8007774:	7e1b      	ldrb	r3, [r3, #24]
 8007776:	4618      	mov	r0, r3
 8007778:	1cfb      	adds	r3, r7, #3
 800777a:	2201      	movs	r2, #1
 800777c:	4619      	mov	r1, r3
 800777e:	f7ff fded 	bl	800735c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8007782:	e005      	b.n	8007790 <_HandleIncomingPacket+0xd0>
    }
  }
 8007784:	bf00      	nop
 8007786:	e004      	b.n	8007792 <_HandleIncomingPacket+0xd2>
      break;
 8007788:	bf00      	nop
 800778a:	e002      	b.n	8007792 <_HandleIncomingPacket+0xd2>
      break;
 800778c:	bf00      	nop
 800778e:	e000      	b.n	8007792 <_HandleIncomingPacket+0xd2>
      break;
 8007790:	bf00      	nop
}
 8007792:	bf00      	nop
 8007794:	3708      	adds	r7, #8
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	200143ec 	.word	0x200143ec

080077a0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b08c      	sub	sp, #48	; 0x30
 80077a4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80077a6:	2301      	movs	r3, #1
 80077a8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80077aa:	1d3b      	adds	r3, r7, #4
 80077ac:	3301      	adds	r3, #1
 80077ae:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077b4:	4b31      	ldr	r3, [pc, #196]	; (800787c <_TrySendOverflowPacket+0xdc>)
 80077b6:	695b      	ldr	r3, [r3, #20]
 80077b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80077ba:	e00b      	b.n	80077d4 <_TrySendOverflowPacket+0x34>
 80077bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077be:	b2da      	uxtb	r2, r3
 80077c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c2:	1c59      	adds	r1, r3, #1
 80077c4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80077c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80077ca:	b2d2      	uxtb	r2, r2
 80077cc:	701a      	strb	r2, [r3, #0]
 80077ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d0:	09db      	lsrs	r3, r3, #7
 80077d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80077d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d6:	2b7f      	cmp	r3, #127	; 0x7f
 80077d8:	d8f0      	bhi.n	80077bc <_TrySendOverflowPacket+0x1c>
 80077da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077dc:	1c5a      	adds	r2, r3, #1
 80077de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077e2:	b2d2      	uxtb	r2, r2
 80077e4:	701a      	strb	r2, [r3, #0]
 80077e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80077ea:	4b25      	ldr	r3, [pc, #148]	; (8007880 <_TrySendOverflowPacket+0xe0>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80077f0:	4b22      	ldr	r3, [pc, #136]	; (800787c <_TrySendOverflowPacket+0xdc>)
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	69ba      	ldr	r2, [r7, #24]
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	627b      	str	r3, [r7, #36]	; 0x24
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	623b      	str	r3, [r7, #32]
 8007802:	e00b      	b.n	800781c <_TrySendOverflowPacket+0x7c>
 8007804:	6a3b      	ldr	r3, [r7, #32]
 8007806:	b2da      	uxtb	r2, r3
 8007808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780a:	1c59      	adds	r1, r3, #1
 800780c:	6279      	str	r1, [r7, #36]	; 0x24
 800780e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007812:	b2d2      	uxtb	r2, r2
 8007814:	701a      	strb	r2, [r3, #0]
 8007816:	6a3b      	ldr	r3, [r7, #32]
 8007818:	09db      	lsrs	r3, r3, #7
 800781a:	623b      	str	r3, [r7, #32]
 800781c:	6a3b      	ldr	r3, [r7, #32]
 800781e:	2b7f      	cmp	r3, #127	; 0x7f
 8007820:	d8f0      	bhi.n	8007804 <_TrySendOverflowPacket+0x64>
 8007822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007824:	1c5a      	adds	r2, r3, #1
 8007826:	627a      	str	r2, [r7, #36]	; 0x24
 8007828:	6a3a      	ldr	r2, [r7, #32]
 800782a:	b2d2      	uxtb	r2, r2
 800782c:	701a      	strb	r2, [r3, #0]
 800782e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007830:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8007832:	4b12      	ldr	r3, [pc, #72]	; (800787c <_TrySendOverflowPacket+0xdc>)
 8007834:	785b      	ldrb	r3, [r3, #1]
 8007836:	4618      	mov	r0, r3
 8007838:	1d3b      	adds	r3, r7, #4
 800783a:	69fa      	ldr	r2, [r7, #28]
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	461a      	mov	r2, r3
 8007840:	1d3b      	adds	r3, r7, #4
 8007842:	4619      	mov	r1, r3
 8007844:	f7f8 fcd4 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007848:	4603      	mov	r3, r0
 800784a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d009      	beq.n	8007866 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8007852:	4a0a      	ldr	r2, [pc, #40]	; (800787c <_TrySendOverflowPacket+0xdc>)
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8007858:	4b08      	ldr	r3, [pc, #32]	; (800787c <_TrySendOverflowPacket+0xdc>)
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	3b01      	subs	r3, #1
 800785e:	b2da      	uxtb	r2, r3
 8007860:	4b06      	ldr	r3, [pc, #24]	; (800787c <_TrySendOverflowPacket+0xdc>)
 8007862:	701a      	strb	r2, [r3, #0]
 8007864:	e004      	b.n	8007870 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8007866:	4b05      	ldr	r3, [pc, #20]	; (800787c <_TrySendOverflowPacket+0xdc>)
 8007868:	695b      	ldr	r3, [r3, #20]
 800786a:	3301      	adds	r3, #1
 800786c:	4a03      	ldr	r2, [pc, #12]	; (800787c <_TrySendOverflowPacket+0xdc>)
 800786e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8007870:	693b      	ldr	r3, [r7, #16]
}
 8007872:	4618      	mov	r0, r3
 8007874:	3730      	adds	r7, #48	; 0x30
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	200143ec 	.word	0x200143ec
 8007880:	e0001004 	.word	0xe0001004

08007884 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8007884:	b580      	push	{r7, lr}
 8007886:	b08a      	sub	sp, #40	; 0x28
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8007890:	4b98      	ldr	r3, [pc, #608]	; (8007af4 <_SendPacket+0x270>)
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	2b01      	cmp	r3, #1
 8007896:	d010      	beq.n	80078ba <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8007898:	4b96      	ldr	r3, [pc, #600]	; (8007af4 <_SendPacket+0x270>)
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	f000 812d 	beq.w	8007afc <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80078a2:	4b94      	ldr	r3, [pc, #592]	; (8007af4 <_SendPacket+0x270>)
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	d109      	bne.n	80078be <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80078aa:	f7ff ff79 	bl	80077a0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80078ae:	4b91      	ldr	r3, [pc, #580]	; (8007af4 <_SendPacket+0x270>)
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	f040 8124 	bne.w	8007b00 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80078b8:	e001      	b.n	80078be <_SendPacket+0x3a>
    goto Send;
 80078ba:	bf00      	nop
 80078bc:	e000      	b.n	80078c0 <_SendPacket+0x3c>
Send:
 80078be:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2b1f      	cmp	r3, #31
 80078c4:	d809      	bhi.n	80078da <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80078c6:	4b8b      	ldr	r3, [pc, #556]	; (8007af4 <_SendPacket+0x270>)
 80078c8:	69da      	ldr	r2, [r3, #28]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	fa22 f303 	lsr.w	r3, r2, r3
 80078d0:	f003 0301 	and.w	r3, r3, #1
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f040 8115 	bne.w	8007b04 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2b17      	cmp	r3, #23
 80078de:	d807      	bhi.n	80078f0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	3b01      	subs	r3, #1
 80078e4:	60fb      	str	r3, [r7, #12]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	b2da      	uxtb	r2, r3
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	701a      	strb	r2, [r3, #0]
 80078ee:	e0c4      	b.n	8007a7a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80078f0:	68ba      	ldr	r2, [r7, #8]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	1ad3      	subs	r3, r2, r3
 80078f6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	2b7f      	cmp	r3, #127	; 0x7f
 80078fc:	d912      	bls.n	8007924 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	09da      	lsrs	r2, r3, #7
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	3b01      	subs	r3, #1
 8007906:	60fb      	str	r3, [r7, #12]
 8007908:	b2d2      	uxtb	r2, r2
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	b2db      	uxtb	r3, r3
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	3a01      	subs	r2, #1
 8007916:	60fa      	str	r2, [r7, #12]
 8007918:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800791c:	b2da      	uxtb	r2, r3
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	701a      	strb	r2, [r3, #0]
 8007922:	e006      	b.n	8007932 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	3b01      	subs	r3, #1
 8007928:	60fb      	str	r3, [r7, #12]
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	b2da      	uxtb	r2, r3
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2b7e      	cmp	r3, #126	; 0x7e
 8007936:	d807      	bhi.n	8007948 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	3b01      	subs	r3, #1
 800793c:	60fb      	str	r3, [r7, #12]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	b2da      	uxtb	r2, r3
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	701a      	strb	r2, [r3, #0]
 8007946:	e098      	b.n	8007a7a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800794e:	d212      	bcs.n	8007976 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	09da      	lsrs	r2, r3, #7
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	3b01      	subs	r3, #1
 8007958:	60fb      	str	r3, [r7, #12]
 800795a:	b2d2      	uxtb	r2, r2
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	b2db      	uxtb	r3, r3
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	3a01      	subs	r2, #1
 8007968:	60fa      	str	r2, [r7, #12]
 800796a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800796e:	b2da      	uxtb	r2, r3
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	701a      	strb	r2, [r3, #0]
 8007974:	e081      	b.n	8007a7a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800797c:	d21d      	bcs.n	80079ba <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	0b9a      	lsrs	r2, r3, #14
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	3b01      	subs	r3, #1
 8007986:	60fb      	str	r3, [r7, #12]
 8007988:	b2d2      	uxtb	r2, r2
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	09db      	lsrs	r3, r3, #7
 8007992:	b2db      	uxtb	r3, r3
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	3a01      	subs	r2, #1
 8007998:	60fa      	str	r2, [r7, #12]
 800799a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800799e:	b2da      	uxtb	r2, r3
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	3a01      	subs	r2, #1
 80079ac:	60fa      	str	r2, [r7, #12]
 80079ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80079b2:	b2da      	uxtb	r2, r3
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	701a      	strb	r2, [r3, #0]
 80079b8:	e05f      	b.n	8007a7a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079c0:	d228      	bcs.n	8007a14 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	0d5a      	lsrs	r2, r3, #21
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	3b01      	subs	r3, #1
 80079ca:	60fb      	str	r3, [r7, #12]
 80079cc:	b2d2      	uxtb	r2, r2
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	0b9b      	lsrs	r3, r3, #14
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	3a01      	subs	r2, #1
 80079dc:	60fa      	str	r2, [r7, #12]
 80079de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80079e2:	b2da      	uxtb	r2, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	09db      	lsrs	r3, r3, #7
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	3a01      	subs	r2, #1
 80079f2:	60fa      	str	r2, [r7, #12]
 80079f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80079f8:	b2da      	uxtb	r2, r3
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	3a01      	subs	r2, #1
 8007a06:	60fa      	str	r2, [r7, #12]
 8007a08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a0c:	b2da      	uxtb	r2, r3
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	701a      	strb	r2, [r3, #0]
 8007a12:	e032      	b.n	8007a7a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	0f1a      	lsrs	r2, r3, #28
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	60fb      	str	r3, [r7, #12]
 8007a1e:	b2d2      	uxtb	r2, r2
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	0d5b      	lsrs	r3, r3, #21
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	3a01      	subs	r2, #1
 8007a2e:	60fa      	str	r2, [r7, #12]
 8007a30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a34:	b2da      	uxtb	r2, r3
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	0b9b      	lsrs	r3, r3, #14
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	3a01      	subs	r2, #1
 8007a44:	60fa      	str	r2, [r7, #12]
 8007a46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a4a:	b2da      	uxtb	r2, r3
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	09db      	lsrs	r3, r3, #7
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	3a01      	subs	r2, #1
 8007a5a:	60fa      	str	r2, [r7, #12]
 8007a5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a60:	b2da      	uxtb	r2, r3
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	3a01      	subs	r2, #1
 8007a6e:	60fa      	str	r2, [r7, #12]
 8007a70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a74:	b2da      	uxtb	r2, r3
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007a7a:	4b1f      	ldr	r3, [pc, #124]	; (8007af8 <_SendPacket+0x274>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8007a80:	4b1c      	ldr	r3, [pc, #112]	; (8007af4 <_SendPacket+0x270>)
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	69ba      	ldr	r2, [r7, #24]
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	623b      	str	r3, [r7, #32]
 8007a92:	e00b      	b.n	8007aac <_SendPacket+0x228>
 8007a94:	6a3b      	ldr	r3, [r7, #32]
 8007a96:	b2da      	uxtb	r2, r3
 8007a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9a:	1c59      	adds	r1, r3, #1
 8007a9c:	6279      	str	r1, [r7, #36]	; 0x24
 8007a9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007aa2:	b2d2      	uxtb	r2, r2
 8007aa4:	701a      	strb	r2, [r3, #0]
 8007aa6:	6a3b      	ldr	r3, [r7, #32]
 8007aa8:	09db      	lsrs	r3, r3, #7
 8007aaa:	623b      	str	r3, [r7, #32]
 8007aac:	6a3b      	ldr	r3, [r7, #32]
 8007aae:	2b7f      	cmp	r3, #127	; 0x7f
 8007ab0:	d8f0      	bhi.n	8007a94 <_SendPacket+0x210>
 8007ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab4:	1c5a      	adds	r2, r3, #1
 8007ab6:	627a      	str	r2, [r7, #36]	; 0x24
 8007ab8:	6a3a      	ldr	r2, [r7, #32]
 8007aba:	b2d2      	uxtb	r2, r2
 8007abc:	701a      	strb	r2, [r3, #0]
 8007abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8007ac2:	4b0c      	ldr	r3, [pc, #48]	; (8007af4 <_SendPacket+0x270>)
 8007ac4:	785b      	ldrb	r3, [r3, #1]
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	68ba      	ldr	r2, [r7, #8]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	1ad3      	subs	r3, r2, r3
 8007ace:	461a      	mov	r2, r3
 8007ad0:	68f9      	ldr	r1, [r7, #12]
 8007ad2:	f7f8 fb8d 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007ad6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d003      	beq.n	8007ae6 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8007ade:	4a05      	ldr	r2, [pc, #20]	; (8007af4 <_SendPacket+0x270>)
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	60d3      	str	r3, [r2, #12]
 8007ae4:	e00f      	b.n	8007b06 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8007ae6:	4b03      	ldr	r3, [pc, #12]	; (8007af4 <_SendPacket+0x270>)
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	3301      	adds	r3, #1
 8007aec:	b2da      	uxtb	r2, r3
 8007aee:	4b01      	ldr	r3, [pc, #4]	; (8007af4 <_SendPacket+0x270>)
 8007af0:	701a      	strb	r2, [r3, #0]
 8007af2:	e008      	b.n	8007b06 <_SendPacket+0x282>
 8007af4:	200143ec 	.word	0x200143ec
 8007af8:	e0001004 	.word	0xe0001004
    goto SendDone;
 8007afc:	bf00      	nop
 8007afe:	e002      	b.n	8007b06 <_SendPacket+0x282>
      goto SendDone;
 8007b00:	bf00      	nop
 8007b02:	e000      	b.n	8007b06 <_SendPacket+0x282>
      goto SendDone;
 8007b04:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007b06:	4b14      	ldr	r3, [pc, #80]	; (8007b58 <_SendPacket+0x2d4>)
 8007b08:	7e1b      	ldrb	r3, [r3, #24]
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	4a13      	ldr	r2, [pc, #76]	; (8007b5c <_SendPacket+0x2d8>)
 8007b0e:	460b      	mov	r3, r1
 8007b10:	005b      	lsls	r3, r3, #1
 8007b12:	440b      	add	r3, r1
 8007b14:	00db      	lsls	r3, r3, #3
 8007b16:	4413      	add	r3, r2
 8007b18:	336c      	adds	r3, #108	; 0x6c
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	4b0e      	ldr	r3, [pc, #56]	; (8007b58 <_SendPacket+0x2d4>)
 8007b1e:	7e1b      	ldrb	r3, [r3, #24]
 8007b20:	4618      	mov	r0, r3
 8007b22:	490e      	ldr	r1, [pc, #56]	; (8007b5c <_SendPacket+0x2d8>)
 8007b24:	4603      	mov	r3, r0
 8007b26:	005b      	lsls	r3, r3, #1
 8007b28:	4403      	add	r3, r0
 8007b2a:	00db      	lsls	r3, r3, #3
 8007b2c:	440b      	add	r3, r1
 8007b2e:	3370      	adds	r3, #112	; 0x70
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d00b      	beq.n	8007b4e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007b36:	4b08      	ldr	r3, [pc, #32]	; (8007b58 <_SendPacket+0x2d4>)
 8007b38:	789b      	ldrb	r3, [r3, #2]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d107      	bne.n	8007b4e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007b3e:	4b06      	ldr	r3, [pc, #24]	; (8007b58 <_SendPacket+0x2d4>)
 8007b40:	2201      	movs	r2, #1
 8007b42:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007b44:	f7ff fdbc 	bl	80076c0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007b48:	4b03      	ldr	r3, [pc, #12]	; (8007b58 <_SendPacket+0x2d4>)
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8007b4e:	bf00      	nop
 8007b50:	3728      	adds	r7, #40	; 0x28
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	200143ec 	.word	0x200143ec
 8007b5c:	20012f2c 	.word	0x20012f2c

08007b60 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b0a2      	sub	sp, #136	; 0x88
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 8007b70:	2300      	movs	r3, #0
 8007b72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 8007b76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b78:	1c5a      	adds	r2, r3, #1
 8007b7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 8007b82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d01d      	beq.n	8007bc6 <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 8007b8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007b8e:	2b25      	cmp	r3, #37	; 0x25
 8007b90:	d1f1      	bne.n	8007b76 <_VPrintHost+0x16>
      c = *p;
 8007b92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	1d19      	adds	r1, r3, #4
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	6011      	str	r1, [r2, #0]
 8007ba4:	6819      	ldr	r1, [r3, #0]
 8007ba6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007baa:	1c5a      	adds	r2, r3, #1
 8007bac:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007bb0:	460a      	mov	r2, r1
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	3388      	adds	r3, #136	; 0x88
 8007bb6:	443b      	add	r3, r7
 8007bb8:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 8007bbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007bc0:	2b10      	cmp	r3, #16
 8007bc2:	d002      	beq.n	8007bca <_VPrintHost+0x6a>
    c = *p++;
 8007bc4:	e7d7      	b.n	8007b76 <_VPrintHost+0x16>
      break;
 8007bc6:	bf00      	nop
 8007bc8:	e000      	b.n	8007bcc <_VPrintHost+0x6c>
        break;
 8007bca:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 8007bcc:	f3ef 8311 	mrs	r3, BASEPRI
 8007bd0:	f04f 0120 	mov.w	r1, #32
 8007bd4:	f381 8811 	msr	BASEPRI, r1
 8007bd8:	65bb      	str	r3, [r7, #88]	; 0x58
 8007bda:	483f      	ldr	r0, [pc, #252]	; (8007cd8 <_VPrintHost+0x178>)
 8007bdc:	f7ff fd64 	bl	80076a8 <_PreparePacket>
 8007be0:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007be2:	2280      	movs	r2, #128	; 0x80
 8007be4:	68f9      	ldr	r1, [r7, #12]
 8007be6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007be8:	f7ff fd0e 	bl	8007608 <_EncodeStr>
 8007bec:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 8007bee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bf0:	677b      	str	r3, [r7, #116]	; 0x74
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	673b      	str	r3, [r7, #112]	; 0x70
 8007bf6:	e00b      	b.n	8007c10 <_VPrintHost+0xb0>
 8007bf8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007bfa:	b2da      	uxtb	r2, r3
 8007bfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bfe:	1c59      	adds	r1, r3, #1
 8007c00:	6779      	str	r1, [r7, #116]	; 0x74
 8007c02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c06:	b2d2      	uxtb	r2, r2
 8007c08:	701a      	strb	r2, [r3, #0]
 8007c0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c0c:	09db      	lsrs	r3, r3, #7
 8007c0e:	673b      	str	r3, [r7, #112]	; 0x70
 8007c10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c12:	2b7f      	cmp	r3, #127	; 0x7f
 8007c14:	d8f0      	bhi.n	8007bf8 <_VPrintHost+0x98>
 8007c16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c18:	1c5a      	adds	r2, r3, #1
 8007c1a:	677a      	str	r2, [r7, #116]	; 0x74
 8007c1c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007c1e:	b2d2      	uxtb	r2, r2
 8007c20:	701a      	strb	r2, [r3, #0]
 8007c22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c24:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 8007c26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c30:	e00b      	b.n	8007c4a <_VPrintHost+0xea>
 8007c32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c34:	b2da      	uxtb	r2, r3
 8007c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c38:	1c59      	adds	r1, r3, #1
 8007c3a:	66f9      	str	r1, [r7, #108]	; 0x6c
 8007c3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c40:	b2d2      	uxtb	r2, r2
 8007c42:	701a      	strb	r2, [r3, #0]
 8007c44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c46:	09db      	lsrs	r3, r3, #7
 8007c48:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c4c:	2b7f      	cmp	r3, #127	; 0x7f
 8007c4e:	d8f0      	bhi.n	8007c32 <_VPrintHost+0xd2>
 8007c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c52:	1c5a      	adds	r2, r3, #1
 8007c54:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007c56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007c58:	b2d2      	uxtb	r2, r2
 8007c5a:	701a      	strb	r2, [r3, #0]
 8007c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c5e:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 8007c60:	f107 0314 	add.w	r3, r7, #20
 8007c64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8007c68:	e022      	b.n	8007cb0 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 8007c6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c6c:	667b      	str	r3, [r7, #100]	; 0x64
 8007c6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	663b      	str	r3, [r7, #96]	; 0x60
 8007c76:	e00b      	b.n	8007c90 <_VPrintHost+0x130>
 8007c78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c7a:	b2da      	uxtb	r2, r3
 8007c7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c7e:	1c59      	adds	r1, r3, #1
 8007c80:	6679      	str	r1, [r7, #100]	; 0x64
 8007c82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c86:	b2d2      	uxtb	r2, r2
 8007c88:	701a      	strb	r2, [r3, #0]
 8007c8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c8c:	09db      	lsrs	r3, r3, #7
 8007c8e:	663b      	str	r3, [r7, #96]	; 0x60
 8007c90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c92:	2b7f      	cmp	r3, #127	; 0x7f
 8007c94:	d8f0      	bhi.n	8007c78 <_VPrintHost+0x118>
 8007c96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c98:	1c5a      	adds	r2, r3, #1
 8007c9a:	667a      	str	r2, [r7, #100]	; 0x64
 8007c9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007c9e:	b2d2      	uxtb	r2, r2
 8007ca0:	701a      	strb	r2, [r3, #0]
 8007ca2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ca4:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 8007ca6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007caa:	3304      	adds	r3, #4
 8007cac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8007cb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007cb4:	1e5a      	subs	r2, r3, #1
 8007cb6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1d5      	bne.n	8007c6a <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007cbe:	221a      	movs	r2, #26
 8007cc0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007cc2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007cc4:	f7ff fdde 	bl	8007884 <_SendPacket>
    RECORD_END();
 8007cc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cca:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 8007cce:	2300      	movs	r3, #0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3788      	adds	r7, #136	; 0x88
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	2001441c 	.word	0x2001441c

08007cdc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b086      	sub	sp, #24
 8007ce0:	af02      	add	r7, sp, #8
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
 8007ce8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8007cea:	2300      	movs	r3, #0
 8007cec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007cf0:	4917      	ldr	r1, [pc, #92]	; (8007d50 <SEGGER_SYSVIEW_Init+0x74>)
 8007cf2:	4818      	ldr	r0, [pc, #96]	; (8007d54 <SEGGER_SYSVIEW_Init+0x78>)
 8007cf4:	f7ff fbb8 	bl	8007468 <SEGGER_RTT_AllocUpBuffer>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	b2da      	uxtb	r2, r3
 8007cfc:	4b16      	ldr	r3, [pc, #88]	; (8007d58 <SEGGER_SYSVIEW_Init+0x7c>)
 8007cfe:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8007d00:	4b15      	ldr	r3, [pc, #84]	; (8007d58 <SEGGER_SYSVIEW_Init+0x7c>)
 8007d02:	785a      	ldrb	r2, [r3, #1]
 8007d04:	4b14      	ldr	r3, [pc, #80]	; (8007d58 <SEGGER_SYSVIEW_Init+0x7c>)
 8007d06:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8007d08:	4b13      	ldr	r3, [pc, #76]	; (8007d58 <SEGGER_SYSVIEW_Init+0x7c>)
 8007d0a:	7e1b      	ldrb	r3, [r3, #24]
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	2300      	movs	r3, #0
 8007d10:	9300      	str	r3, [sp, #0]
 8007d12:	2308      	movs	r3, #8
 8007d14:	4a11      	ldr	r2, [pc, #68]	; (8007d5c <SEGGER_SYSVIEW_Init+0x80>)
 8007d16:	490f      	ldr	r1, [pc, #60]	; (8007d54 <SEGGER_SYSVIEW_Init+0x78>)
 8007d18:	f7ff fc2a 	bl	8007570 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8007d1c:	4b0e      	ldr	r3, [pc, #56]	; (8007d58 <SEGGER_SYSVIEW_Init+0x7c>)
 8007d1e:	2200      	movs	r2, #0
 8007d20:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007d22:	4b0f      	ldr	r3, [pc, #60]	; (8007d60 <SEGGER_SYSVIEW_Init+0x84>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a0c      	ldr	r2, [pc, #48]	; (8007d58 <SEGGER_SYSVIEW_Init+0x7c>)
 8007d28:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8007d2a:	4a0b      	ldr	r2, [pc, #44]	; (8007d58 <SEGGER_SYSVIEW_Init+0x7c>)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8007d30:	4a09      	ldr	r2, [pc, #36]	; (8007d58 <SEGGER_SYSVIEW_Init+0x7c>)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8007d36:	4a08      	ldr	r2, [pc, #32]	; (8007d58 <SEGGER_SYSVIEW_Init+0x7c>)
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8007d3c:	4a06      	ldr	r2, [pc, #24]	; (8007d58 <SEGGER_SYSVIEW_Init+0x7c>)
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8007d42:	4b05      	ldr	r3, [pc, #20]	; (8007d58 <SEGGER_SYSVIEW_Init+0x7c>)
 8007d44:	2200      	movs	r2, #0
 8007d46:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8007d48:	bf00      	nop
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	200133e4 	.word	0x200133e4
 8007d54:	0800921c 	.word	0x0800921c
 8007d58:	200143ec 	.word	0x200143ec
 8007d5c:	200143e4 	.word	0x200143e4
 8007d60:	e0001004 	.word	0xe0001004

08007d64 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8007d6c:	4a04      	ldr	r2, [pc, #16]	; (8007d80 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6113      	str	r3, [r2, #16]
}
 8007d72:	bf00      	nop
 8007d74:	370c      	adds	r7, #12
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop
 8007d80:	200143ec 	.word	0x200143ec

08007d84 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007d8c:	f3ef 8311 	mrs	r3, BASEPRI
 8007d90:	f04f 0120 	mov.w	r1, #32
 8007d94:	f381 8811 	msr	BASEPRI, r1
 8007d98:	60fb      	str	r3, [r7, #12]
 8007d9a:	4808      	ldr	r0, [pc, #32]	; (8007dbc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8007d9c:	f7ff fc84 	bl	80076a8 <_PreparePacket>
 8007da0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	68b9      	ldr	r1, [r7, #8]
 8007da6:	68b8      	ldr	r0, [r7, #8]
 8007da8:	f7ff fd6c 	bl	8007884 <_SendPacket>
  RECORD_END();
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f383 8811 	msr	BASEPRI, r3
}
 8007db2:	bf00      	nop
 8007db4:	3710      	adds	r7, #16
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	2001441c 	.word	0x2001441c

08007dc0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b088      	sub	sp, #32
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007dca:	f3ef 8311 	mrs	r3, BASEPRI
 8007dce:	f04f 0120 	mov.w	r1, #32
 8007dd2:	f381 8811 	msr	BASEPRI, r1
 8007dd6:	617b      	str	r3, [r7, #20]
 8007dd8:	4816      	ldr	r0, [pc, #88]	; (8007e34 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8007dda:	f7ff fc65 	bl	80076a8 <_PreparePacket>
 8007dde:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	61fb      	str	r3, [r7, #28]
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	61bb      	str	r3, [r7, #24]
 8007dec:	e00b      	b.n	8007e06 <SEGGER_SYSVIEW_RecordU32+0x46>
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	b2da      	uxtb	r2, r3
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	1c59      	adds	r1, r3, #1
 8007df6:	61f9      	str	r1, [r7, #28]
 8007df8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007dfc:	b2d2      	uxtb	r2, r2
 8007dfe:	701a      	strb	r2, [r3, #0]
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	09db      	lsrs	r3, r3, #7
 8007e04:	61bb      	str	r3, [r7, #24]
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	2b7f      	cmp	r3, #127	; 0x7f
 8007e0a:	d8f0      	bhi.n	8007dee <SEGGER_SYSVIEW_RecordU32+0x2e>
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	1c5a      	adds	r2, r3, #1
 8007e10:	61fa      	str	r2, [r7, #28]
 8007e12:	69ba      	ldr	r2, [r7, #24]
 8007e14:	b2d2      	uxtb	r2, r2
 8007e16:	701a      	strb	r2, [r3, #0]
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	68f9      	ldr	r1, [r7, #12]
 8007e20:	6938      	ldr	r0, [r7, #16]
 8007e22:	f7ff fd2f 	bl	8007884 <_SendPacket>
  RECORD_END();
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	f383 8811 	msr	BASEPRI, r3
}
 8007e2c:	bf00      	nop
 8007e2e:	3720      	adds	r7, #32
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	2001441c 	.word	0x2001441c

08007e38 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b08c      	sub	sp, #48	; 0x30
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007e44:	f3ef 8311 	mrs	r3, BASEPRI
 8007e48:	f04f 0120 	mov.w	r1, #32
 8007e4c:	f381 8811 	msr	BASEPRI, r1
 8007e50:	61fb      	str	r3, [r7, #28]
 8007e52:	4825      	ldr	r0, [pc, #148]	; (8007ee8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8007e54:	f7ff fc28 	bl	80076a8 <_PreparePacket>
 8007e58:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e66:	e00b      	b.n	8007e80 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8007e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6a:	b2da      	uxtb	r2, r3
 8007e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6e:	1c59      	adds	r1, r3, #1
 8007e70:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007e72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e76:	b2d2      	uxtb	r2, r2
 8007e78:	701a      	strb	r2, [r3, #0]
 8007e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7c:	09db      	lsrs	r3, r3, #7
 8007e7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e82:	2b7f      	cmp	r3, #127	; 0x7f
 8007e84:	d8f0      	bhi.n	8007e68 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8007e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e88:	1c5a      	adds	r2, r3, #1
 8007e8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e8e:	b2d2      	uxtb	r2, r2
 8007e90:	701a      	strb	r2, [r3, #0]
 8007e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e94:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	627b      	str	r3, [r7, #36]	; 0x24
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	623b      	str	r3, [r7, #32]
 8007e9e:	e00b      	b.n	8007eb8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8007ea0:	6a3b      	ldr	r3, [r7, #32]
 8007ea2:	b2da      	uxtb	r2, r3
 8007ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea6:	1c59      	adds	r1, r3, #1
 8007ea8:	6279      	str	r1, [r7, #36]	; 0x24
 8007eaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007eae:	b2d2      	uxtb	r2, r2
 8007eb0:	701a      	strb	r2, [r3, #0]
 8007eb2:	6a3b      	ldr	r3, [r7, #32]
 8007eb4:	09db      	lsrs	r3, r3, #7
 8007eb6:	623b      	str	r3, [r7, #32]
 8007eb8:	6a3b      	ldr	r3, [r7, #32]
 8007eba:	2b7f      	cmp	r3, #127	; 0x7f
 8007ebc:	d8f0      	bhi.n	8007ea0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8007ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec0:	1c5a      	adds	r2, r3, #1
 8007ec2:	627a      	str	r2, [r7, #36]	; 0x24
 8007ec4:	6a3a      	ldr	r2, [r7, #32]
 8007ec6:	b2d2      	uxtb	r2, r2
 8007ec8:	701a      	strb	r2, [r3, #0]
 8007eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ecc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	6979      	ldr	r1, [r7, #20]
 8007ed2:	69b8      	ldr	r0, [r7, #24]
 8007ed4:	f7ff fcd6 	bl	8007884 <_SendPacket>
  RECORD_END();
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	f383 8811 	msr	BASEPRI, r3
}
 8007ede:	bf00      	nop
 8007ee0:	3730      	adds	r7, #48	; 0x30
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	2001441c 	.word	0x2001441c

08007eec <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b08e      	sub	sp, #56	; 0x38
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]
 8007ef8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8007efa:	f3ef 8311 	mrs	r3, BASEPRI
 8007efe:	f04f 0120 	mov.w	r1, #32
 8007f02:	f381 8811 	msr	BASEPRI, r1
 8007f06:	61fb      	str	r3, [r7, #28]
 8007f08:	4832      	ldr	r0, [pc, #200]	; (8007fd4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8007f0a:	f7ff fbcd 	bl	80076a8 <_PreparePacket>
 8007f0e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	637b      	str	r3, [r7, #52]	; 0x34
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	633b      	str	r3, [r7, #48]	; 0x30
 8007f1c:	e00b      	b.n	8007f36 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8007f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f20:	b2da      	uxtb	r2, r3
 8007f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f24:	1c59      	adds	r1, r3, #1
 8007f26:	6379      	str	r1, [r7, #52]	; 0x34
 8007f28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f2c:	b2d2      	uxtb	r2, r2
 8007f2e:	701a      	strb	r2, [r3, #0]
 8007f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f32:	09db      	lsrs	r3, r3, #7
 8007f34:	633b      	str	r3, [r7, #48]	; 0x30
 8007f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f38:	2b7f      	cmp	r3, #127	; 0x7f
 8007f3a:	d8f0      	bhi.n	8007f1e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8007f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f3e:	1c5a      	adds	r2, r3, #1
 8007f40:	637a      	str	r2, [r7, #52]	; 0x34
 8007f42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f44:	b2d2      	uxtb	r2, r2
 8007f46:	701a      	strb	r2, [r3, #0]
 8007f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f4a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f54:	e00b      	b.n	8007f6e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8007f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f58:	b2da      	uxtb	r2, r3
 8007f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f5c:	1c59      	adds	r1, r3, #1
 8007f5e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007f60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f64:	b2d2      	uxtb	r2, r2
 8007f66:	701a      	strb	r2, [r3, #0]
 8007f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6a:	09db      	lsrs	r3, r3, #7
 8007f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f70:	2b7f      	cmp	r3, #127	; 0x7f
 8007f72:	d8f0      	bhi.n	8007f56 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8007f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f76:	1c5a      	adds	r2, r3, #1
 8007f78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f7c:	b2d2      	uxtb	r2, r2
 8007f7e:	701a      	strb	r2, [r3, #0]
 8007f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f82:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	627b      	str	r3, [r7, #36]	; 0x24
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	623b      	str	r3, [r7, #32]
 8007f8c:	e00b      	b.n	8007fa6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8007f8e:	6a3b      	ldr	r3, [r7, #32]
 8007f90:	b2da      	uxtb	r2, r3
 8007f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f94:	1c59      	adds	r1, r3, #1
 8007f96:	6279      	str	r1, [r7, #36]	; 0x24
 8007f98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f9c:	b2d2      	uxtb	r2, r2
 8007f9e:	701a      	strb	r2, [r3, #0]
 8007fa0:	6a3b      	ldr	r3, [r7, #32]
 8007fa2:	09db      	lsrs	r3, r3, #7
 8007fa4:	623b      	str	r3, [r7, #32]
 8007fa6:	6a3b      	ldr	r3, [r7, #32]
 8007fa8:	2b7f      	cmp	r3, #127	; 0x7f
 8007faa:	d8f0      	bhi.n	8007f8e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8007fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fae:	1c5a      	adds	r2, r3, #1
 8007fb0:	627a      	str	r2, [r7, #36]	; 0x24
 8007fb2:	6a3a      	ldr	r2, [r7, #32]
 8007fb4:	b2d2      	uxtb	r2, r2
 8007fb6:	701a      	strb	r2, [r3, #0]
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fba:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	6979      	ldr	r1, [r7, #20]
 8007fc0:	69b8      	ldr	r0, [r7, #24]
 8007fc2:	f7ff fc5f 	bl	8007884 <_SendPacket>
  RECORD_END();
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	f383 8811 	msr	BASEPRI, r3
}
 8007fcc:	bf00      	nop
 8007fce:	3738      	adds	r7, #56	; 0x38
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	2001441c 	.word	0x2001441c

08007fd8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b090      	sub	sp, #64	; 0x40
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	607a      	str	r2, [r7, #4]
 8007fe4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007fe6:	f3ef 8311 	mrs	r3, BASEPRI
 8007fea:	f04f 0120 	mov.w	r1, #32
 8007fee:	f381 8811 	msr	BASEPRI, r1
 8007ff2:	61fb      	str	r3, [r7, #28]
 8007ff4:	4840      	ldr	r0, [pc, #256]	; (80080f8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8007ff6:	f7ff fb57 	bl	80076a8 <_PreparePacket>
 8007ffa:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	63bb      	str	r3, [r7, #56]	; 0x38
 8008008:	e00b      	b.n	8008022 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800800a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800c:	b2da      	uxtb	r2, r3
 800800e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008010:	1c59      	adds	r1, r3, #1
 8008012:	63f9      	str	r1, [r7, #60]	; 0x3c
 8008014:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008018:	b2d2      	uxtb	r2, r2
 800801a:	701a      	strb	r2, [r3, #0]
 800801c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800801e:	09db      	lsrs	r3, r3, #7
 8008020:	63bb      	str	r3, [r7, #56]	; 0x38
 8008022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008024:	2b7f      	cmp	r3, #127	; 0x7f
 8008026:	d8f0      	bhi.n	800800a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8008028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800802a:	1c5a      	adds	r2, r3, #1
 800802c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800802e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008030:	b2d2      	uxtb	r2, r2
 8008032:	701a      	strb	r2, [r3, #0]
 8008034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008036:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	637b      	str	r3, [r7, #52]	; 0x34
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	633b      	str	r3, [r7, #48]	; 0x30
 8008040:	e00b      	b.n	800805a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8008042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008044:	b2da      	uxtb	r2, r3
 8008046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008048:	1c59      	adds	r1, r3, #1
 800804a:	6379      	str	r1, [r7, #52]	; 0x34
 800804c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008050:	b2d2      	uxtb	r2, r2
 8008052:	701a      	strb	r2, [r3, #0]
 8008054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008056:	09db      	lsrs	r3, r3, #7
 8008058:	633b      	str	r3, [r7, #48]	; 0x30
 800805a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805c:	2b7f      	cmp	r3, #127	; 0x7f
 800805e:	d8f0      	bhi.n	8008042 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8008060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008062:	1c5a      	adds	r2, r3, #1
 8008064:	637a      	str	r2, [r7, #52]	; 0x34
 8008066:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008068:	b2d2      	uxtb	r2, r2
 800806a:	701a      	strb	r2, [r3, #0]
 800806c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800806e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	62bb      	str	r3, [r7, #40]	; 0x28
 8008078:	e00b      	b.n	8008092 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800807a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807c:	b2da      	uxtb	r2, r3
 800807e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008080:	1c59      	adds	r1, r3, #1
 8008082:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008084:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008088:	b2d2      	uxtb	r2, r2
 800808a:	701a      	strb	r2, [r3, #0]
 800808c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808e:	09db      	lsrs	r3, r3, #7
 8008090:	62bb      	str	r3, [r7, #40]	; 0x28
 8008092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008094:	2b7f      	cmp	r3, #127	; 0x7f
 8008096:	d8f0      	bhi.n	800807a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8008098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800809a:	1c5a      	adds	r2, r3, #1
 800809c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800809e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080a0:	b2d2      	uxtb	r2, r2
 80080a2:	701a      	strb	r2, [r3, #0]
 80080a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	627b      	str	r3, [r7, #36]	; 0x24
 80080ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080ae:	623b      	str	r3, [r7, #32]
 80080b0:	e00b      	b.n	80080ca <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80080b2:	6a3b      	ldr	r3, [r7, #32]
 80080b4:	b2da      	uxtb	r2, r3
 80080b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b8:	1c59      	adds	r1, r3, #1
 80080ba:	6279      	str	r1, [r7, #36]	; 0x24
 80080bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80080c0:	b2d2      	uxtb	r2, r2
 80080c2:	701a      	strb	r2, [r3, #0]
 80080c4:	6a3b      	ldr	r3, [r7, #32]
 80080c6:	09db      	lsrs	r3, r3, #7
 80080c8:	623b      	str	r3, [r7, #32]
 80080ca:	6a3b      	ldr	r3, [r7, #32]
 80080cc:	2b7f      	cmp	r3, #127	; 0x7f
 80080ce:	d8f0      	bhi.n	80080b2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80080d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d2:	1c5a      	adds	r2, r3, #1
 80080d4:	627a      	str	r2, [r7, #36]	; 0x24
 80080d6:	6a3a      	ldr	r2, [r7, #32]
 80080d8:	b2d2      	uxtb	r2, r2
 80080da:	701a      	strb	r2, [r3, #0]
 80080dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080de:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	6979      	ldr	r1, [r7, #20]
 80080e4:	69b8      	ldr	r0, [r7, #24]
 80080e6:	f7ff fbcd 	bl	8007884 <_SendPacket>
  RECORD_END();
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	f383 8811 	msr	BASEPRI, r3
}
 80080f0:	bf00      	nop
 80080f2:	3740      	adds	r7, #64	; 0x40
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	2001441c 	.word	0x2001441c

080080fc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b08c      	sub	sp, #48	; 0x30
 8008100:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8008102:	4b58      	ldr	r3, [pc, #352]	; (8008264 <SEGGER_SYSVIEW_Start+0x168>)
 8008104:	2201      	movs	r2, #1
 8008106:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8008108:	f3ef 8311 	mrs	r3, BASEPRI
 800810c:	f04f 0120 	mov.w	r1, #32
 8008110:	f381 8811 	msr	BASEPRI, r1
 8008114:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8008116:	4b53      	ldr	r3, [pc, #332]	; (8008264 <SEGGER_SYSVIEW_Start+0x168>)
 8008118:	785b      	ldrb	r3, [r3, #1]
 800811a:	220a      	movs	r2, #10
 800811c:	4952      	ldr	r1, [pc, #328]	; (8008268 <SEGGER_SYSVIEW_Start+0x16c>)
 800811e:	4618      	mov	r0, r3
 8008120:	f7f8 f866 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800812a:	200a      	movs	r0, #10
 800812c:	f7ff fe2a 	bl	8007d84 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8008130:	f3ef 8311 	mrs	r3, BASEPRI
 8008134:	f04f 0120 	mov.w	r1, #32
 8008138:	f381 8811 	msr	BASEPRI, r1
 800813c:	60bb      	str	r3, [r7, #8]
 800813e:	484b      	ldr	r0, [pc, #300]	; (800826c <SEGGER_SYSVIEW_Start+0x170>)
 8008140:	f7ff fab2 	bl	80076a8 <_PreparePacket>
 8008144:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800814e:	4b45      	ldr	r3, [pc, #276]	; (8008264 <SEGGER_SYSVIEW_Start+0x168>)
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	62bb      	str	r3, [r7, #40]	; 0x28
 8008154:	e00b      	b.n	800816e <SEGGER_SYSVIEW_Start+0x72>
 8008156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008158:	b2da      	uxtb	r2, r3
 800815a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800815c:	1c59      	adds	r1, r3, #1
 800815e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008160:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008164:	b2d2      	uxtb	r2, r2
 8008166:	701a      	strb	r2, [r3, #0]
 8008168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816a:	09db      	lsrs	r3, r3, #7
 800816c:	62bb      	str	r3, [r7, #40]	; 0x28
 800816e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008170:	2b7f      	cmp	r3, #127	; 0x7f
 8008172:	d8f0      	bhi.n	8008156 <SEGGER_SYSVIEW_Start+0x5a>
 8008174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008176:	1c5a      	adds	r2, r3, #1
 8008178:	62fa      	str	r2, [r7, #44]	; 0x2c
 800817a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800817c:	b2d2      	uxtb	r2, r2
 800817e:	701a      	strb	r2, [r3, #0]
 8008180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008182:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	627b      	str	r3, [r7, #36]	; 0x24
 8008188:	4b36      	ldr	r3, [pc, #216]	; (8008264 <SEGGER_SYSVIEW_Start+0x168>)
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	623b      	str	r3, [r7, #32]
 800818e:	e00b      	b.n	80081a8 <SEGGER_SYSVIEW_Start+0xac>
 8008190:	6a3b      	ldr	r3, [r7, #32]
 8008192:	b2da      	uxtb	r2, r3
 8008194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008196:	1c59      	adds	r1, r3, #1
 8008198:	6279      	str	r1, [r7, #36]	; 0x24
 800819a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800819e:	b2d2      	uxtb	r2, r2
 80081a0:	701a      	strb	r2, [r3, #0]
 80081a2:	6a3b      	ldr	r3, [r7, #32]
 80081a4:	09db      	lsrs	r3, r3, #7
 80081a6:	623b      	str	r3, [r7, #32]
 80081a8:	6a3b      	ldr	r3, [r7, #32]
 80081aa:	2b7f      	cmp	r3, #127	; 0x7f
 80081ac:	d8f0      	bhi.n	8008190 <SEGGER_SYSVIEW_Start+0x94>
 80081ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b0:	1c5a      	adds	r2, r3, #1
 80081b2:	627a      	str	r2, [r7, #36]	; 0x24
 80081b4:	6a3a      	ldr	r2, [r7, #32]
 80081b6:	b2d2      	uxtb	r2, r2
 80081b8:	701a      	strb	r2, [r3, #0]
 80081ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081bc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	61fb      	str	r3, [r7, #28]
 80081c2:	4b28      	ldr	r3, [pc, #160]	; (8008264 <SEGGER_SYSVIEW_Start+0x168>)
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	61bb      	str	r3, [r7, #24]
 80081c8:	e00b      	b.n	80081e2 <SEGGER_SYSVIEW_Start+0xe6>
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	b2da      	uxtb	r2, r3
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	1c59      	adds	r1, r3, #1
 80081d2:	61f9      	str	r1, [r7, #28]
 80081d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80081d8:	b2d2      	uxtb	r2, r2
 80081da:	701a      	strb	r2, [r3, #0]
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	09db      	lsrs	r3, r3, #7
 80081e0:	61bb      	str	r3, [r7, #24]
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	2b7f      	cmp	r3, #127	; 0x7f
 80081e6:	d8f0      	bhi.n	80081ca <SEGGER_SYSVIEW_Start+0xce>
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	1c5a      	adds	r2, r3, #1
 80081ec:	61fa      	str	r2, [r7, #28]
 80081ee:	69ba      	ldr	r2, [r7, #24]
 80081f0:	b2d2      	uxtb	r2, r2
 80081f2:	701a      	strb	r2, [r3, #0]
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	617b      	str	r3, [r7, #20]
 80081fc:	2300      	movs	r3, #0
 80081fe:	613b      	str	r3, [r7, #16]
 8008200:	e00b      	b.n	800821a <SEGGER_SYSVIEW_Start+0x11e>
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	b2da      	uxtb	r2, r3
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	1c59      	adds	r1, r3, #1
 800820a:	6179      	str	r1, [r7, #20]
 800820c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008210:	b2d2      	uxtb	r2, r2
 8008212:	701a      	strb	r2, [r3, #0]
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	09db      	lsrs	r3, r3, #7
 8008218:	613b      	str	r3, [r7, #16]
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	2b7f      	cmp	r3, #127	; 0x7f
 800821e:	d8f0      	bhi.n	8008202 <SEGGER_SYSVIEW_Start+0x106>
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	1c5a      	adds	r2, r3, #1
 8008224:	617a      	str	r2, [r7, #20]
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	b2d2      	uxtb	r2, r2
 800822a:	701a      	strb	r2, [r3, #0]
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8008230:	2218      	movs	r2, #24
 8008232:	6839      	ldr	r1, [r7, #0]
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f7ff fb25 	bl	8007884 <_SendPacket>
      RECORD_END();
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8008240:	4b08      	ldr	r3, [pc, #32]	; (8008264 <SEGGER_SYSVIEW_Start+0x168>)
 8008242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008244:	2b00      	cmp	r3, #0
 8008246:	d002      	beq.n	800824e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8008248:	4b06      	ldr	r3, [pc, #24]	; (8008264 <SEGGER_SYSVIEW_Start+0x168>)
 800824a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800824e:	f000 f9eb 	bl	8008628 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8008252:	f000 f9b1 	bl	80085b8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8008256:	f000 fc83 	bl	8008b60 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800825a:	bf00      	nop
 800825c:	3730      	adds	r7, #48	; 0x30
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	200143ec 	.word	0x200143ec
 8008268:	08009314 	.word	0x08009314
 800826c:	2001441c 	.word	0x2001441c

08008270 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008276:	f3ef 8311 	mrs	r3, BASEPRI
 800827a:	f04f 0120 	mov.w	r1, #32
 800827e:	f381 8811 	msr	BASEPRI, r1
 8008282:	607b      	str	r3, [r7, #4]
 8008284:	480b      	ldr	r0, [pc, #44]	; (80082b4 <SEGGER_SYSVIEW_Stop+0x44>)
 8008286:	f7ff fa0f 	bl	80076a8 <_PreparePacket>
 800828a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800828c:	4b0a      	ldr	r3, [pc, #40]	; (80082b8 <SEGGER_SYSVIEW_Stop+0x48>)
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d007      	beq.n	80082a4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8008294:	220b      	movs	r2, #11
 8008296:	6839      	ldr	r1, [r7, #0]
 8008298:	6838      	ldr	r0, [r7, #0]
 800829a:	f7ff faf3 	bl	8007884 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800829e:	4b06      	ldr	r3, [pc, #24]	; (80082b8 <SEGGER_SYSVIEW_Stop+0x48>)
 80082a0:	2200      	movs	r2, #0
 80082a2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f383 8811 	msr	BASEPRI, r3
}
 80082aa:	bf00      	nop
 80082ac:	3708      	adds	r7, #8
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	2001441c 	.word	0x2001441c
 80082b8:	200143ec 	.word	0x200143ec

080082bc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80082bc:	b580      	push	{r7, lr}
 80082be:	b08c      	sub	sp, #48	; 0x30
 80082c0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80082c2:	f3ef 8311 	mrs	r3, BASEPRI
 80082c6:	f04f 0120 	mov.w	r1, #32
 80082ca:	f381 8811 	msr	BASEPRI, r1
 80082ce:	60fb      	str	r3, [r7, #12]
 80082d0:	4845      	ldr	r0, [pc, #276]	; (80083e8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80082d2:	f7ff f9e9 	bl	80076a8 <_PreparePacket>
 80082d6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082e0:	4b42      	ldr	r3, [pc, #264]	; (80083ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80082e6:	e00b      	b.n	8008300 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80082e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ea:	b2da      	uxtb	r2, r3
 80082ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ee:	1c59      	adds	r1, r3, #1
 80082f0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80082f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80082f6:	b2d2      	uxtb	r2, r2
 80082f8:	701a      	strb	r2, [r3, #0]
 80082fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fc:	09db      	lsrs	r3, r3, #7
 80082fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8008300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008302:	2b7f      	cmp	r3, #127	; 0x7f
 8008304:	d8f0      	bhi.n	80082e8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8008306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008308:	1c5a      	adds	r2, r3, #1
 800830a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800830c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800830e:	b2d2      	uxtb	r2, r2
 8008310:	701a      	strb	r2, [r3, #0]
 8008312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008314:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	627b      	str	r3, [r7, #36]	; 0x24
 800831a:	4b34      	ldr	r3, [pc, #208]	; (80083ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	623b      	str	r3, [r7, #32]
 8008320:	e00b      	b.n	800833a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8008322:	6a3b      	ldr	r3, [r7, #32]
 8008324:	b2da      	uxtb	r2, r3
 8008326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008328:	1c59      	adds	r1, r3, #1
 800832a:	6279      	str	r1, [r7, #36]	; 0x24
 800832c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008330:	b2d2      	uxtb	r2, r2
 8008332:	701a      	strb	r2, [r3, #0]
 8008334:	6a3b      	ldr	r3, [r7, #32]
 8008336:	09db      	lsrs	r3, r3, #7
 8008338:	623b      	str	r3, [r7, #32]
 800833a:	6a3b      	ldr	r3, [r7, #32]
 800833c:	2b7f      	cmp	r3, #127	; 0x7f
 800833e:	d8f0      	bhi.n	8008322 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8008340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008342:	1c5a      	adds	r2, r3, #1
 8008344:	627a      	str	r2, [r7, #36]	; 0x24
 8008346:	6a3a      	ldr	r2, [r7, #32]
 8008348:	b2d2      	uxtb	r2, r2
 800834a:	701a      	strb	r2, [r3, #0]
 800834c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	61fb      	str	r3, [r7, #28]
 8008354:	4b25      	ldr	r3, [pc, #148]	; (80083ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008356:	691b      	ldr	r3, [r3, #16]
 8008358:	61bb      	str	r3, [r7, #24]
 800835a:	e00b      	b.n	8008374 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	b2da      	uxtb	r2, r3
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	1c59      	adds	r1, r3, #1
 8008364:	61f9      	str	r1, [r7, #28]
 8008366:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800836a:	b2d2      	uxtb	r2, r2
 800836c:	701a      	strb	r2, [r3, #0]
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	09db      	lsrs	r3, r3, #7
 8008372:	61bb      	str	r3, [r7, #24]
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	2b7f      	cmp	r3, #127	; 0x7f
 8008378:	d8f0      	bhi.n	800835c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	1c5a      	adds	r2, r3, #1
 800837e:	61fa      	str	r2, [r7, #28]
 8008380:	69ba      	ldr	r2, [r7, #24]
 8008382:	b2d2      	uxtb	r2, r2
 8008384:	701a      	strb	r2, [r3, #0]
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	617b      	str	r3, [r7, #20]
 800838e:	2300      	movs	r3, #0
 8008390:	613b      	str	r3, [r7, #16]
 8008392:	e00b      	b.n	80083ac <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	b2da      	uxtb	r2, r3
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	1c59      	adds	r1, r3, #1
 800839c:	6179      	str	r1, [r7, #20]
 800839e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80083a2:	b2d2      	uxtb	r2, r2
 80083a4:	701a      	strb	r2, [r3, #0]
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	09db      	lsrs	r3, r3, #7
 80083aa:	613b      	str	r3, [r7, #16]
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	2b7f      	cmp	r3, #127	; 0x7f
 80083b0:	d8f0      	bhi.n	8008394 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	1c5a      	adds	r2, r3, #1
 80083b6:	617a      	str	r2, [r7, #20]
 80083b8:	693a      	ldr	r2, [r7, #16]
 80083ba:	b2d2      	uxtb	r2, r2
 80083bc:	701a      	strb	r2, [r3, #0]
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80083c2:	2218      	movs	r2, #24
 80083c4:	6879      	ldr	r1, [r7, #4]
 80083c6:	68b8      	ldr	r0, [r7, #8]
 80083c8:	f7ff fa5c 	bl	8007884 <_SendPacket>
  RECORD_END();
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80083d2:	4b06      	ldr	r3, [pc, #24]	; (80083ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80083d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d002      	beq.n	80083e0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80083da:	4b04      	ldr	r3, [pc, #16]	; (80083ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80083dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083de:	4798      	blx	r3
  }
}
 80083e0:	bf00      	nop
 80083e2:	3730      	adds	r7, #48	; 0x30
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	2001441c 	.word	0x2001441c
 80083ec:	200143ec 	.word	0x200143ec

080083f0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b092      	sub	sp, #72	; 0x48
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80083f8:	f3ef 8311 	mrs	r3, BASEPRI
 80083fc:	f04f 0120 	mov.w	r1, #32
 8008400:	f381 8811 	msr	BASEPRI, r1
 8008404:	617b      	str	r3, [r7, #20]
 8008406:	486a      	ldr	r0, [pc, #424]	; (80085b0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8008408:	f7ff f94e 	bl	80076a8 <_PreparePacket>
 800840c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	647b      	str	r3, [r7, #68]	; 0x44
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	4b66      	ldr	r3, [pc, #408]	; (80085b4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	1ad3      	subs	r3, r2, r3
 8008420:	643b      	str	r3, [r7, #64]	; 0x40
 8008422:	e00b      	b.n	800843c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8008424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008426:	b2da      	uxtb	r2, r3
 8008428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800842a:	1c59      	adds	r1, r3, #1
 800842c:	6479      	str	r1, [r7, #68]	; 0x44
 800842e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008432:	b2d2      	uxtb	r2, r2
 8008434:	701a      	strb	r2, [r3, #0]
 8008436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008438:	09db      	lsrs	r3, r3, #7
 800843a:	643b      	str	r3, [r7, #64]	; 0x40
 800843c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800843e:	2b7f      	cmp	r3, #127	; 0x7f
 8008440:	d8f0      	bhi.n	8008424 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8008442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008444:	1c5a      	adds	r2, r3, #1
 8008446:	647a      	str	r2, [r7, #68]	; 0x44
 8008448:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800844a:	b2d2      	uxtb	r2, r2
 800844c:	701a      	strb	r2, [r3, #0]
 800844e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008450:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	63bb      	str	r3, [r7, #56]	; 0x38
 800845c:	e00b      	b.n	8008476 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800845e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008460:	b2da      	uxtb	r2, r3
 8008462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008464:	1c59      	adds	r1, r3, #1
 8008466:	63f9      	str	r1, [r7, #60]	; 0x3c
 8008468:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800846c:	b2d2      	uxtb	r2, r2
 800846e:	701a      	strb	r2, [r3, #0]
 8008470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008472:	09db      	lsrs	r3, r3, #7
 8008474:	63bb      	str	r3, [r7, #56]	; 0x38
 8008476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008478:	2b7f      	cmp	r3, #127	; 0x7f
 800847a:	d8f0      	bhi.n	800845e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800847c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800847e:	1c5a      	adds	r2, r3, #1
 8008480:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008482:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008484:	b2d2      	uxtb	r2, r2
 8008486:	701a      	strb	r2, [r3, #0]
 8008488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800848a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	2220      	movs	r2, #32
 8008492:	4619      	mov	r1, r3
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f7ff f8b7 	bl	8007608 <_EncodeStr>
 800849a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800849c:	2209      	movs	r2, #9
 800849e:	68f9      	ldr	r1, [r7, #12]
 80084a0:	6938      	ldr	r0, [r7, #16]
 80084a2:	f7ff f9ef 	bl	8007884 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	637b      	str	r3, [r7, #52]	; 0x34
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	4b40      	ldr	r3, [pc, #256]	; (80085b4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	1ad3      	subs	r3, r2, r3
 80084b8:	633b      	str	r3, [r7, #48]	; 0x30
 80084ba:	e00b      	b.n	80084d4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80084bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084be:	b2da      	uxtb	r2, r3
 80084c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084c2:	1c59      	adds	r1, r3, #1
 80084c4:	6379      	str	r1, [r7, #52]	; 0x34
 80084c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80084ca:	b2d2      	uxtb	r2, r2
 80084cc:	701a      	strb	r2, [r3, #0]
 80084ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d0:	09db      	lsrs	r3, r3, #7
 80084d2:	633b      	str	r3, [r7, #48]	; 0x30
 80084d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d6:	2b7f      	cmp	r3, #127	; 0x7f
 80084d8:	d8f0      	bhi.n	80084bc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80084da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084dc:	1c5a      	adds	r2, r3, #1
 80084de:	637a      	str	r2, [r7, #52]	; 0x34
 80084e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084e2:	b2d2      	uxtb	r2, r2
 80084e4:	701a      	strb	r2, [r3, #0]
 80084e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80084f4:	e00b      	b.n	800850e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80084f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f8:	b2da      	uxtb	r2, r3
 80084fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fc:	1c59      	adds	r1, r3, #1
 80084fe:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008500:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008504:	b2d2      	uxtb	r2, r2
 8008506:	701a      	strb	r2, [r3, #0]
 8008508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800850a:	09db      	lsrs	r3, r3, #7
 800850c:	62bb      	str	r3, [r7, #40]	; 0x28
 800850e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008510:	2b7f      	cmp	r3, #127	; 0x7f
 8008512:	d8f0      	bhi.n	80084f6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8008514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008516:	1c5a      	adds	r2, r3, #1
 8008518:	62fa      	str	r2, [r7, #44]	; 0x2c
 800851a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800851c:	b2d2      	uxtb	r2, r2
 800851e:	701a      	strb	r2, [r3, #0]
 8008520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008522:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	627b      	str	r3, [r7, #36]	; 0x24
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	691b      	ldr	r3, [r3, #16]
 800852c:	623b      	str	r3, [r7, #32]
 800852e:	e00b      	b.n	8008548 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8008530:	6a3b      	ldr	r3, [r7, #32]
 8008532:	b2da      	uxtb	r2, r3
 8008534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008536:	1c59      	adds	r1, r3, #1
 8008538:	6279      	str	r1, [r7, #36]	; 0x24
 800853a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800853e:	b2d2      	uxtb	r2, r2
 8008540:	701a      	strb	r2, [r3, #0]
 8008542:	6a3b      	ldr	r3, [r7, #32]
 8008544:	09db      	lsrs	r3, r3, #7
 8008546:	623b      	str	r3, [r7, #32]
 8008548:	6a3b      	ldr	r3, [r7, #32]
 800854a:	2b7f      	cmp	r3, #127	; 0x7f
 800854c:	d8f0      	bhi.n	8008530 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800854e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008550:	1c5a      	adds	r2, r3, #1
 8008552:	627a      	str	r2, [r7, #36]	; 0x24
 8008554:	6a3a      	ldr	r2, [r7, #32]
 8008556:	b2d2      	uxtb	r2, r2
 8008558:	701a      	strb	r2, [r3, #0]
 800855a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	61fb      	str	r3, [r7, #28]
 8008562:	2300      	movs	r3, #0
 8008564:	61bb      	str	r3, [r7, #24]
 8008566:	e00b      	b.n	8008580 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	b2da      	uxtb	r2, r3
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	1c59      	adds	r1, r3, #1
 8008570:	61f9      	str	r1, [r7, #28]
 8008572:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008576:	b2d2      	uxtb	r2, r2
 8008578:	701a      	strb	r2, [r3, #0]
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	09db      	lsrs	r3, r3, #7
 800857e:	61bb      	str	r3, [r7, #24]
 8008580:	69bb      	ldr	r3, [r7, #24]
 8008582:	2b7f      	cmp	r3, #127	; 0x7f
 8008584:	d8f0      	bhi.n	8008568 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	1c5a      	adds	r2, r3, #1
 800858a:	61fa      	str	r2, [r7, #28]
 800858c:	69ba      	ldr	r2, [r7, #24]
 800858e:	b2d2      	uxtb	r2, r2
 8008590:	701a      	strb	r2, [r3, #0]
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8008596:	2215      	movs	r2, #21
 8008598:	68f9      	ldr	r1, [r7, #12]
 800859a:	6938      	ldr	r0, [r7, #16]
 800859c:	f7ff f972 	bl	8007884 <_SendPacket>
  RECORD_END();
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	f383 8811 	msr	BASEPRI, r3
}
 80085a6:	bf00      	nop
 80085a8:	3748      	adds	r7, #72	; 0x48
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	2001441c 	.word	0x2001441c
 80085b4:	200143ec 	.word	0x200143ec

080085b8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80085b8:	b580      	push	{r7, lr}
 80085ba:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80085bc:	4b07      	ldr	r3, [pc, #28]	; (80085dc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80085be:	6a1b      	ldr	r3, [r3, #32]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d008      	beq.n	80085d6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80085c4:	4b05      	ldr	r3, [pc, #20]	; (80085dc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80085c6:	6a1b      	ldr	r3, [r3, #32]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d003      	beq.n	80085d6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80085ce:	4b03      	ldr	r3, [pc, #12]	; (80085dc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80085d0:	6a1b      	ldr	r3, [r3, #32]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	4798      	blx	r3
  }
}
 80085d6:	bf00      	nop
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	200143ec 	.word	0x200143ec

080085e0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b086      	sub	sp, #24
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80085e8:	f3ef 8311 	mrs	r3, BASEPRI
 80085ec:	f04f 0120 	mov.w	r1, #32
 80085f0:	f381 8811 	msr	BASEPRI, r1
 80085f4:	617b      	str	r3, [r7, #20]
 80085f6:	480b      	ldr	r0, [pc, #44]	; (8008624 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80085f8:	f7ff f856 	bl	80076a8 <_PreparePacket>
 80085fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80085fe:	2280      	movs	r2, #128	; 0x80
 8008600:	6879      	ldr	r1, [r7, #4]
 8008602:	6938      	ldr	r0, [r7, #16]
 8008604:	f7ff f800 	bl	8007608 <_EncodeStr>
 8008608:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800860a:	220e      	movs	r2, #14
 800860c:	68f9      	ldr	r1, [r7, #12]
 800860e:	6938      	ldr	r0, [r7, #16]
 8008610:	f7ff f938 	bl	8007884 <_SendPacket>
  RECORD_END();
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	f383 8811 	msr	BASEPRI, r3
}
 800861a:	bf00      	nop
 800861c:	3718      	adds	r7, #24
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	2001441c 	.word	0x2001441c

08008628 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8008628:	b590      	push	{r4, r7, lr}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800862e:	4b15      	ldr	r3, [pc, #84]	; (8008684 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008630:	6a1b      	ldr	r3, [r3, #32]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d01a      	beq.n	800866c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8008636:	4b13      	ldr	r3, [pc, #76]	; (8008684 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008638:	6a1b      	ldr	r3, [r3, #32]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d015      	beq.n	800866c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8008640:	4b10      	ldr	r3, [pc, #64]	; (8008684 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8008642:	6a1b      	ldr	r3, [r3, #32]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4798      	blx	r3
 8008648:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800864c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800864e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008652:	f04f 0200 	mov.w	r2, #0
 8008656:	f04f 0300 	mov.w	r3, #0
 800865a:	000a      	movs	r2, r1
 800865c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800865e:	4613      	mov	r3, r2
 8008660:	461a      	mov	r2, r3
 8008662:	4621      	mov	r1, r4
 8008664:	200d      	movs	r0, #13
 8008666:	f7ff fbe7 	bl	8007e38 <SEGGER_SYSVIEW_RecordU32x2>
 800866a:	e006      	b.n	800867a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800866c:	4b06      	ldr	r3, [pc, #24]	; (8008688 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4619      	mov	r1, r3
 8008672:	200c      	movs	r0, #12
 8008674:	f7ff fba4 	bl	8007dc0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8008678:	bf00      	nop
 800867a:	bf00      	nop
 800867c:	370c      	adds	r7, #12
 800867e:	46bd      	mov	sp, r7
 8008680:	bd90      	pop	{r4, r7, pc}
 8008682:	bf00      	nop
 8008684:	200143ec 	.word	0x200143ec
 8008688:	e0001004 	.word	0xe0001004

0800868c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800868c:	b580      	push	{r7, lr}
 800868e:	b086      	sub	sp, #24
 8008690:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008692:	f3ef 8311 	mrs	r3, BASEPRI
 8008696:	f04f 0120 	mov.w	r1, #32
 800869a:	f381 8811 	msr	BASEPRI, r1
 800869e:	60fb      	str	r3, [r7, #12]
 80086a0:	4819      	ldr	r0, [pc, #100]	; (8008708 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80086a2:	f7ff f801 	bl	80076a8 <_PreparePacket>
 80086a6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80086ac:	4b17      	ldr	r3, [pc, #92]	; (800870c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086b4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	617b      	str	r3, [r7, #20]
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	613b      	str	r3, [r7, #16]
 80086be:	e00b      	b.n	80086d8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	b2da      	uxtb	r2, r3
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	1c59      	adds	r1, r3, #1
 80086c8:	6179      	str	r1, [r7, #20]
 80086ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80086ce:	b2d2      	uxtb	r2, r2
 80086d0:	701a      	strb	r2, [r3, #0]
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	09db      	lsrs	r3, r3, #7
 80086d6:	613b      	str	r3, [r7, #16]
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	2b7f      	cmp	r3, #127	; 0x7f
 80086dc:	d8f0      	bhi.n	80086c0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	1c5a      	adds	r2, r3, #1
 80086e2:	617a      	str	r2, [r7, #20]
 80086e4:	693a      	ldr	r2, [r7, #16]
 80086e6:	b2d2      	uxtb	r2, r2
 80086e8:	701a      	strb	r2, [r3, #0]
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80086ee:	2202      	movs	r2, #2
 80086f0:	6879      	ldr	r1, [r7, #4]
 80086f2:	68b8      	ldr	r0, [r7, #8]
 80086f4:	f7ff f8c6 	bl	8007884 <_SendPacket>
  RECORD_END();
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f383 8811 	msr	BASEPRI, r3
}
 80086fe:	bf00      	nop
 8008700:	3718      	adds	r7, #24
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	2001441c 	.word	0x2001441c
 800870c:	e000ed04 	.word	0xe000ed04

08008710 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008716:	f3ef 8311 	mrs	r3, BASEPRI
 800871a:	f04f 0120 	mov.w	r1, #32
 800871e:	f381 8811 	msr	BASEPRI, r1
 8008722:	607b      	str	r3, [r7, #4]
 8008724:	4807      	ldr	r0, [pc, #28]	; (8008744 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8008726:	f7fe ffbf 	bl	80076a8 <_PreparePacket>
 800872a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800872c:	2203      	movs	r2, #3
 800872e:	6839      	ldr	r1, [r7, #0]
 8008730:	6838      	ldr	r0, [r7, #0]
 8008732:	f7ff f8a7 	bl	8007884 <_SendPacket>
  RECORD_END();
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f383 8811 	msr	BASEPRI, r3
}
 800873c:	bf00      	nop
 800873e:	3708      	adds	r7, #8
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	2001441c 	.word	0x2001441c

08008748 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800874e:	f3ef 8311 	mrs	r3, BASEPRI
 8008752:	f04f 0120 	mov.w	r1, #32
 8008756:	f381 8811 	msr	BASEPRI, r1
 800875a:	607b      	str	r3, [r7, #4]
 800875c:	4807      	ldr	r0, [pc, #28]	; (800877c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800875e:	f7fe ffa3 	bl	80076a8 <_PreparePacket>
 8008762:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8008764:	2212      	movs	r2, #18
 8008766:	6839      	ldr	r1, [r7, #0]
 8008768:	6838      	ldr	r0, [r7, #0]
 800876a:	f7ff f88b 	bl	8007884 <_SendPacket>
  RECORD_END();
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f383 8811 	msr	BASEPRI, r3
}
 8008774:	bf00      	nop
 8008776:	3708      	adds	r7, #8
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}
 800877c:	2001441c 	.word	0x2001441c

08008780 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008786:	f3ef 8311 	mrs	r3, BASEPRI
 800878a:	f04f 0120 	mov.w	r1, #32
 800878e:	f381 8811 	msr	BASEPRI, r1
 8008792:	607b      	str	r3, [r7, #4]
 8008794:	4807      	ldr	r0, [pc, #28]	; (80087b4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8008796:	f7fe ff87 	bl	80076a8 <_PreparePacket>
 800879a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800879c:	2211      	movs	r2, #17
 800879e:	6839      	ldr	r1, [r7, #0]
 80087a0:	6838      	ldr	r0, [r7, #0]
 80087a2:	f7ff f86f 	bl	8007884 <_SendPacket>
  RECORD_END();
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f383 8811 	msr	BASEPRI, r3
}
 80087ac:	bf00      	nop
 80087ae:	3708      	adds	r7, #8
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	2001441c 	.word	0x2001441c

080087b8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b088      	sub	sp, #32
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80087c0:	f3ef 8311 	mrs	r3, BASEPRI
 80087c4:	f04f 0120 	mov.w	r1, #32
 80087c8:	f381 8811 	msr	BASEPRI, r1
 80087cc:	617b      	str	r3, [r7, #20]
 80087ce:	4819      	ldr	r0, [pc, #100]	; (8008834 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80087d0:	f7fe ff6a 	bl	80076a8 <_PreparePacket>
 80087d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80087da:	4b17      	ldr	r3, [pc, #92]	; (8008838 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80087dc:	691b      	ldr	r3, [r3, #16]
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	1ad3      	subs	r3, r2, r3
 80087e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	61fb      	str	r3, [r7, #28]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	61bb      	str	r3, [r7, #24]
 80087ec:	e00b      	b.n	8008806 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	b2da      	uxtb	r2, r3
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	1c59      	adds	r1, r3, #1
 80087f6:	61f9      	str	r1, [r7, #28]
 80087f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80087fc:	b2d2      	uxtb	r2, r2
 80087fe:	701a      	strb	r2, [r3, #0]
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	09db      	lsrs	r3, r3, #7
 8008804:	61bb      	str	r3, [r7, #24]
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	2b7f      	cmp	r3, #127	; 0x7f
 800880a:	d8f0      	bhi.n	80087ee <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	1c5a      	adds	r2, r3, #1
 8008810:	61fa      	str	r2, [r7, #28]
 8008812:	69ba      	ldr	r2, [r7, #24]
 8008814:	b2d2      	uxtb	r2, r2
 8008816:	701a      	strb	r2, [r3, #0]
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800881c:	2208      	movs	r2, #8
 800881e:	68f9      	ldr	r1, [r7, #12]
 8008820:	6938      	ldr	r0, [r7, #16]
 8008822:	f7ff f82f 	bl	8007884 <_SendPacket>
  RECORD_END();
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	f383 8811 	msr	BASEPRI, r3
}
 800882c:	bf00      	nop
 800882e:	3720      	adds	r7, #32
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}
 8008834:	2001441c 	.word	0x2001441c
 8008838:	200143ec 	.word	0x200143ec

0800883c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800883c:	b580      	push	{r7, lr}
 800883e:	b088      	sub	sp, #32
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008844:	f3ef 8311 	mrs	r3, BASEPRI
 8008848:	f04f 0120 	mov.w	r1, #32
 800884c:	f381 8811 	msr	BASEPRI, r1
 8008850:	617b      	str	r3, [r7, #20]
 8008852:	4819      	ldr	r0, [pc, #100]	; (80088b8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8008854:	f7fe ff28 	bl	80076a8 <_PreparePacket>
 8008858:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800885e:	4b17      	ldr	r3, [pc, #92]	; (80088bc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8008860:	691b      	ldr	r3, [r3, #16]
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	61fb      	str	r3, [r7, #28]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	61bb      	str	r3, [r7, #24]
 8008870:	e00b      	b.n	800888a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8008872:	69bb      	ldr	r3, [r7, #24]
 8008874:	b2da      	uxtb	r2, r3
 8008876:	69fb      	ldr	r3, [r7, #28]
 8008878:	1c59      	adds	r1, r3, #1
 800887a:	61f9      	str	r1, [r7, #28]
 800887c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008880:	b2d2      	uxtb	r2, r2
 8008882:	701a      	strb	r2, [r3, #0]
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	09db      	lsrs	r3, r3, #7
 8008888:	61bb      	str	r3, [r7, #24]
 800888a:	69bb      	ldr	r3, [r7, #24]
 800888c:	2b7f      	cmp	r3, #127	; 0x7f
 800888e:	d8f0      	bhi.n	8008872 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	1c5a      	adds	r2, r3, #1
 8008894:	61fa      	str	r2, [r7, #28]
 8008896:	69ba      	ldr	r2, [r7, #24]
 8008898:	b2d2      	uxtb	r2, r2
 800889a:	701a      	strb	r2, [r3, #0]
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80088a0:	2204      	movs	r2, #4
 80088a2:	68f9      	ldr	r1, [r7, #12]
 80088a4:	6938      	ldr	r0, [r7, #16]
 80088a6:	f7fe ffed 	bl	8007884 <_SendPacket>
  RECORD_END();
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	f383 8811 	msr	BASEPRI, r3
}
 80088b0:	bf00      	nop
 80088b2:	3720      	adds	r7, #32
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	2001441c 	.word	0x2001441c
 80088bc:	200143ec 	.word	0x200143ec

080088c0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b088      	sub	sp, #32
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80088c8:	f3ef 8311 	mrs	r3, BASEPRI
 80088cc:	f04f 0120 	mov.w	r1, #32
 80088d0:	f381 8811 	msr	BASEPRI, r1
 80088d4:	617b      	str	r3, [r7, #20]
 80088d6:	4819      	ldr	r0, [pc, #100]	; (800893c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80088d8:	f7fe fee6 	bl	80076a8 <_PreparePacket>
 80088dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80088e2:	4b17      	ldr	r3, [pc, #92]	; (8008940 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	1ad3      	subs	r3, r2, r3
 80088ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	61fb      	str	r3, [r7, #28]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	61bb      	str	r3, [r7, #24]
 80088f4:	e00b      	b.n	800890e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	b2da      	uxtb	r2, r3
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	1c59      	adds	r1, r3, #1
 80088fe:	61f9      	str	r1, [r7, #28]
 8008900:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008904:	b2d2      	uxtb	r2, r2
 8008906:	701a      	strb	r2, [r3, #0]
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	09db      	lsrs	r3, r3, #7
 800890c:	61bb      	str	r3, [r7, #24]
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	2b7f      	cmp	r3, #127	; 0x7f
 8008912:	d8f0      	bhi.n	80088f6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	1c5a      	adds	r2, r3, #1
 8008918:	61fa      	str	r2, [r7, #28]
 800891a:	69ba      	ldr	r2, [r7, #24]
 800891c:	b2d2      	uxtb	r2, r2
 800891e:	701a      	strb	r2, [r3, #0]
 8008920:	69fb      	ldr	r3, [r7, #28]
 8008922:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8008924:	2206      	movs	r2, #6
 8008926:	68f9      	ldr	r1, [r7, #12]
 8008928:	6938      	ldr	r0, [r7, #16]
 800892a:	f7fe ffab 	bl	8007884 <_SendPacket>
  RECORD_END();
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	f383 8811 	msr	BASEPRI, r3
}
 8008934:	bf00      	nop
 8008936:	3720      	adds	r7, #32
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}
 800893c:	2001441c 	.word	0x2001441c
 8008940:	200143ec 	.word	0x200143ec

08008944 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8008944:	b580      	push	{r7, lr}
 8008946:	b08a      	sub	sp, #40	; 0x28
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800894e:	f3ef 8311 	mrs	r3, BASEPRI
 8008952:	f04f 0120 	mov.w	r1, #32
 8008956:	f381 8811 	msr	BASEPRI, r1
 800895a:	617b      	str	r3, [r7, #20]
 800895c:	4827      	ldr	r0, [pc, #156]	; (80089fc <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800895e:	f7fe fea3 	bl	80076a8 <_PreparePacket>
 8008962:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008968:	4b25      	ldr	r3, [pc, #148]	; (8008a00 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800896a:	691b      	ldr	r3, [r3, #16]
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	1ad3      	subs	r3, r2, r3
 8008970:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	627b      	str	r3, [r7, #36]	; 0x24
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	623b      	str	r3, [r7, #32]
 800897a:	e00b      	b.n	8008994 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800897c:	6a3b      	ldr	r3, [r7, #32]
 800897e:	b2da      	uxtb	r2, r3
 8008980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008982:	1c59      	adds	r1, r3, #1
 8008984:	6279      	str	r1, [r7, #36]	; 0x24
 8008986:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800898a:	b2d2      	uxtb	r2, r2
 800898c:	701a      	strb	r2, [r3, #0]
 800898e:	6a3b      	ldr	r3, [r7, #32]
 8008990:	09db      	lsrs	r3, r3, #7
 8008992:	623b      	str	r3, [r7, #32]
 8008994:	6a3b      	ldr	r3, [r7, #32]
 8008996:	2b7f      	cmp	r3, #127	; 0x7f
 8008998:	d8f0      	bhi.n	800897c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800899a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899c:	1c5a      	adds	r2, r3, #1
 800899e:	627a      	str	r2, [r7, #36]	; 0x24
 80089a0:	6a3a      	ldr	r2, [r7, #32]
 80089a2:	b2d2      	uxtb	r2, r2
 80089a4:	701a      	strb	r2, [r3, #0]
 80089a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	61fb      	str	r3, [r7, #28]
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	61bb      	str	r3, [r7, #24]
 80089b2:	e00b      	b.n	80089cc <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80089b4:	69bb      	ldr	r3, [r7, #24]
 80089b6:	b2da      	uxtb	r2, r3
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	1c59      	adds	r1, r3, #1
 80089bc:	61f9      	str	r1, [r7, #28]
 80089be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80089c2:	b2d2      	uxtb	r2, r2
 80089c4:	701a      	strb	r2, [r3, #0]
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	09db      	lsrs	r3, r3, #7
 80089ca:	61bb      	str	r3, [r7, #24]
 80089cc:	69bb      	ldr	r3, [r7, #24]
 80089ce:	2b7f      	cmp	r3, #127	; 0x7f
 80089d0:	d8f0      	bhi.n	80089b4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	1c5a      	adds	r2, r3, #1
 80089d6:	61fa      	str	r2, [r7, #28]
 80089d8:	69ba      	ldr	r2, [r7, #24]
 80089da:	b2d2      	uxtb	r2, r2
 80089dc:	701a      	strb	r2, [r3, #0]
 80089de:	69fb      	ldr	r3, [r7, #28]
 80089e0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80089e2:	2207      	movs	r2, #7
 80089e4:	68f9      	ldr	r1, [r7, #12]
 80089e6:	6938      	ldr	r0, [r7, #16]
 80089e8:	f7fe ff4c 	bl	8007884 <_SendPacket>
  RECORD_END();
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	f383 8811 	msr	BASEPRI, r3
}
 80089f2:	bf00      	nop
 80089f4:	3728      	adds	r7, #40	; 0x28
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	2001441c 	.word	0x2001441c
 8008a00:	200143ec 	.word	0x200143ec

08008a04 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8008a04:	b480      	push	{r7}
 8008a06:	b083      	sub	sp, #12
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8008a0c:	4b04      	ldr	r3, [pc, #16]	; (8008a20 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	1ad3      	subs	r3, r2, r3
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	370c      	adds	r7, #12
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr
 8008a20:	200143ec 	.word	0x200143ec

08008a24 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b08c      	sub	sp, #48	; 0x30
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8008a2e:	4b3b      	ldr	r3, [pc, #236]	; (8008b1c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d06d      	beq.n	8008b12 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8008a36:	4b39      	ldr	r3, [pc, #228]	; (8008b1c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a40:	e008      	b.n	8008a54 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8008a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a44:	691b      	ldr	r3, [r3, #16]
 8008a46:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8008a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d007      	beq.n	8008a5e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8008a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a50:	3301      	adds	r3, #1
 8008a52:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a54:	79fb      	ldrb	r3, [r7, #7]
 8008a56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d3f2      	bcc.n	8008a42 <SEGGER_SYSVIEW_SendModule+0x1e>
 8008a5c:	e000      	b.n	8008a60 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8008a5e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8008a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d055      	beq.n	8008b12 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008a66:	f3ef 8311 	mrs	r3, BASEPRI
 8008a6a:	f04f 0120 	mov.w	r1, #32
 8008a6e:	f381 8811 	msr	BASEPRI, r1
 8008a72:	617b      	str	r3, [r7, #20]
 8008a74:	482a      	ldr	r0, [pc, #168]	; (8008b20 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8008a76:	f7fe fe17 	bl	80076a8 <_PreparePacket>
 8008a7a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	627b      	str	r3, [r7, #36]	; 0x24
 8008a84:	79fb      	ldrb	r3, [r7, #7]
 8008a86:	623b      	str	r3, [r7, #32]
 8008a88:	e00b      	b.n	8008aa2 <SEGGER_SYSVIEW_SendModule+0x7e>
 8008a8a:	6a3b      	ldr	r3, [r7, #32]
 8008a8c:	b2da      	uxtb	r2, r3
 8008a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a90:	1c59      	adds	r1, r3, #1
 8008a92:	6279      	str	r1, [r7, #36]	; 0x24
 8008a94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a98:	b2d2      	uxtb	r2, r2
 8008a9a:	701a      	strb	r2, [r3, #0]
 8008a9c:	6a3b      	ldr	r3, [r7, #32]
 8008a9e:	09db      	lsrs	r3, r3, #7
 8008aa0:	623b      	str	r3, [r7, #32]
 8008aa2:	6a3b      	ldr	r3, [r7, #32]
 8008aa4:	2b7f      	cmp	r3, #127	; 0x7f
 8008aa6:	d8f0      	bhi.n	8008a8a <SEGGER_SYSVIEW_SendModule+0x66>
 8008aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aaa:	1c5a      	adds	r2, r3, #1
 8008aac:	627a      	str	r2, [r7, #36]	; 0x24
 8008aae:	6a3a      	ldr	r2, [r7, #32]
 8008ab0:	b2d2      	uxtb	r2, r2
 8008ab2:	701a      	strb	r2, [r3, #0]
 8008ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	61fb      	str	r3, [r7, #28]
 8008abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	61bb      	str	r3, [r7, #24]
 8008ac2:	e00b      	b.n	8008adc <SEGGER_SYSVIEW_SendModule+0xb8>
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	b2da      	uxtb	r2, r3
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	1c59      	adds	r1, r3, #1
 8008acc:	61f9      	str	r1, [r7, #28]
 8008ace:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008ad2:	b2d2      	uxtb	r2, r2
 8008ad4:	701a      	strb	r2, [r3, #0]
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	09db      	lsrs	r3, r3, #7
 8008ada:	61bb      	str	r3, [r7, #24]
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	2b7f      	cmp	r3, #127	; 0x7f
 8008ae0:	d8f0      	bhi.n	8008ac4 <SEGGER_SYSVIEW_SendModule+0xa0>
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	1c5a      	adds	r2, r3, #1
 8008ae6:	61fa      	str	r2, [r7, #28]
 8008ae8:	69ba      	ldr	r2, [r7, #24]
 8008aea:	b2d2      	uxtb	r2, r2
 8008aec:	701a      	strb	r2, [r3, #0]
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2280      	movs	r2, #128	; 0x80
 8008af8:	4619      	mov	r1, r3
 8008afa:	68f8      	ldr	r0, [r7, #12]
 8008afc:	f7fe fd84 	bl	8007608 <_EncodeStr>
 8008b00:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8008b02:	2216      	movs	r2, #22
 8008b04:	68f9      	ldr	r1, [r7, #12]
 8008b06:	6938      	ldr	r0, [r7, #16]
 8008b08:	f7fe febc 	bl	8007884 <_SendPacket>
      RECORD_END();
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8008b12:	bf00      	nop
 8008b14:	3730      	adds	r7, #48	; 0x30
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	20014414 	.word	0x20014414
 8008b20:	2001441c 	.word	0x2001441c

08008b24 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8008b2a:	4b0c      	ldr	r3, [pc, #48]	; (8008b5c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00f      	beq.n	8008b52 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8008b32:	4b0a      	ldr	r3, [pc, #40]	; (8008b5c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d002      	beq.n	8008b46 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	691b      	ldr	r3, [r3, #16]
 8008b4a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1f2      	bne.n	8008b38 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8008b52:	bf00      	nop
 8008b54:	3708      	adds	r7, #8
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	bf00      	nop
 8008b5c:	20014414 	.word	0x20014414

08008b60 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b086      	sub	sp, #24
 8008b64:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8008b66:	f3ef 8311 	mrs	r3, BASEPRI
 8008b6a:	f04f 0120 	mov.w	r1, #32
 8008b6e:	f381 8811 	msr	BASEPRI, r1
 8008b72:	60fb      	str	r3, [r7, #12]
 8008b74:	4817      	ldr	r0, [pc, #92]	; (8008bd4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8008b76:	f7fe fd97 	bl	80076a8 <_PreparePacket>
 8008b7a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	617b      	str	r3, [r7, #20]
 8008b84:	4b14      	ldr	r3, [pc, #80]	; (8008bd8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	613b      	str	r3, [r7, #16]
 8008b8a:	e00b      	b.n	8008ba4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	b2da      	uxtb	r2, r3
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	1c59      	adds	r1, r3, #1
 8008b94:	6179      	str	r1, [r7, #20]
 8008b96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008b9a:	b2d2      	uxtb	r2, r2
 8008b9c:	701a      	strb	r2, [r3, #0]
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	09db      	lsrs	r3, r3, #7
 8008ba2:	613b      	str	r3, [r7, #16]
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	2b7f      	cmp	r3, #127	; 0x7f
 8008ba8:	d8f0      	bhi.n	8008b8c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	1c5a      	adds	r2, r3, #1
 8008bae:	617a      	str	r2, [r7, #20]
 8008bb0:	693a      	ldr	r2, [r7, #16]
 8008bb2:	b2d2      	uxtb	r2, r2
 8008bb4:	701a      	strb	r2, [r3, #0]
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8008bba:	221b      	movs	r2, #27
 8008bbc:	6879      	ldr	r1, [r7, #4]
 8008bbe:	68b8      	ldr	r0, [r7, #8]
 8008bc0:	f7fe fe60 	bl	8007884 <_SendPacket>
  RECORD_END();
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f383 8811 	msr	BASEPRI, r3
}
 8008bca:	bf00      	nop
 8008bcc:	3718      	adds	r7, #24
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	2001441c 	.word	0x2001441c
 8008bd8:	20014418 	.word	0x20014418

08008bdc <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 8008bdc:	b40f      	push	{r0, r1, r2, r3}
 8008bde:	b580      	push	{r7, lr}
 8008be0:	b082      	sub	sp, #8
 8008be2:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 8008be4:	f107 0314 	add.w	r3, r7, #20
 8008be8:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8008bea:	1d3b      	adds	r3, r7, #4
 8008bec:	461a      	mov	r2, r3
 8008bee:	2100      	movs	r1, #0
 8008bf0:	6938      	ldr	r0, [r7, #16]
 8008bf2:	f7fe ffb5 	bl	8007b60 <_VPrintHost>
  va_end(ParamList);
#endif
}
 8008bf6:	bf00      	nop
 8008bf8:	3708      	adds	r7, #8
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c00:	b004      	add	sp, #16
 8008c02:	4770      	bx	lr

08008c04 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b08a      	sub	sp, #40	; 0x28
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008c0c:	f3ef 8311 	mrs	r3, BASEPRI
 8008c10:	f04f 0120 	mov.w	r1, #32
 8008c14:	f381 8811 	msr	BASEPRI, r1
 8008c18:	617b      	str	r3, [r7, #20]
 8008c1a:	4827      	ldr	r0, [pc, #156]	; (8008cb8 <SEGGER_SYSVIEW_Warn+0xb4>)
 8008c1c:	f7fe fd44 	bl	80076a8 <_PreparePacket>
 8008c20:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008c22:	2280      	movs	r2, #128	; 0x80
 8008c24:	6879      	ldr	r1, [r7, #4]
 8008c26:	6938      	ldr	r0, [r7, #16]
 8008c28:	f7fe fcee 	bl	8007608 <_EncodeStr>
 8008c2c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	627b      	str	r3, [r7, #36]	; 0x24
 8008c32:	2301      	movs	r3, #1
 8008c34:	623b      	str	r3, [r7, #32]
 8008c36:	e00b      	b.n	8008c50 <SEGGER_SYSVIEW_Warn+0x4c>
 8008c38:	6a3b      	ldr	r3, [r7, #32]
 8008c3a:	b2da      	uxtb	r2, r3
 8008c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3e:	1c59      	adds	r1, r3, #1
 8008c40:	6279      	str	r1, [r7, #36]	; 0x24
 8008c42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008c46:	b2d2      	uxtb	r2, r2
 8008c48:	701a      	strb	r2, [r3, #0]
 8008c4a:	6a3b      	ldr	r3, [r7, #32]
 8008c4c:	09db      	lsrs	r3, r3, #7
 8008c4e:	623b      	str	r3, [r7, #32]
 8008c50:	6a3b      	ldr	r3, [r7, #32]
 8008c52:	2b7f      	cmp	r3, #127	; 0x7f
 8008c54:	d8f0      	bhi.n	8008c38 <SEGGER_SYSVIEW_Warn+0x34>
 8008c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c58:	1c5a      	adds	r2, r3, #1
 8008c5a:	627a      	str	r2, [r7, #36]	; 0x24
 8008c5c:	6a3a      	ldr	r2, [r7, #32]
 8008c5e:	b2d2      	uxtb	r2, r2
 8008c60:	701a      	strb	r2, [r3, #0]
 8008c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c64:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	61fb      	str	r3, [r7, #28]
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	61bb      	str	r3, [r7, #24]
 8008c6e:	e00b      	b.n	8008c88 <SEGGER_SYSVIEW_Warn+0x84>
 8008c70:	69bb      	ldr	r3, [r7, #24]
 8008c72:	b2da      	uxtb	r2, r3
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	1c59      	adds	r1, r3, #1
 8008c78:	61f9      	str	r1, [r7, #28]
 8008c7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008c7e:	b2d2      	uxtb	r2, r2
 8008c80:	701a      	strb	r2, [r3, #0]
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	09db      	lsrs	r3, r3, #7
 8008c86:	61bb      	str	r3, [r7, #24]
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	2b7f      	cmp	r3, #127	; 0x7f
 8008c8c:	d8f0      	bhi.n	8008c70 <SEGGER_SYSVIEW_Warn+0x6c>
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	1c5a      	adds	r2, r3, #1
 8008c92:	61fa      	str	r2, [r7, #28]
 8008c94:	69ba      	ldr	r2, [r7, #24]
 8008c96:	b2d2      	uxtb	r2, r2
 8008c98:	701a      	strb	r2, [r3, #0]
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8008c9e:	221a      	movs	r2, #26
 8008ca0:	68f9      	ldr	r1, [r7, #12]
 8008ca2:	6938      	ldr	r0, [r7, #16]
 8008ca4:	f7fe fdee 	bl	8007884 <_SendPacket>
  RECORD_END();
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	f383 8811 	msr	BASEPRI, r3
}
 8008cae:	bf00      	nop
 8008cb0:	3728      	adds	r7, #40	; 0x28
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	2001441c 	.word	0x2001441c

08008cbc <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8008cc0:	4803      	ldr	r0, [pc, #12]	; (8008cd0 <_cbSendSystemDesc+0x14>)
 8008cc2:	f7ff fc8d 	bl	80085e0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8008cc6:	4803      	ldr	r0, [pc, #12]	; (8008cd4 <_cbSendSystemDesc+0x18>)
 8008cc8:	f7ff fc8a 	bl	80085e0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8008ccc:	bf00      	nop
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	08009224 	.word	0x08009224
 8008cd4:	08009268 	.word	0x08009268

08008cd8 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8008cdc:	4b06      	ldr	r3, [pc, #24]	; (8008cf8 <SEGGER_SYSVIEW_Conf+0x20>)
 8008cde:	6818      	ldr	r0, [r3, #0]
 8008ce0:	4b05      	ldr	r3, [pc, #20]	; (8008cf8 <SEGGER_SYSVIEW_Conf+0x20>)
 8008ce2:	6819      	ldr	r1, [r3, #0]
 8008ce4:	4b05      	ldr	r3, [pc, #20]	; (8008cfc <SEGGER_SYSVIEW_Conf+0x24>)
 8008ce6:	4a06      	ldr	r2, [pc, #24]	; (8008d00 <SEGGER_SYSVIEW_Conf+0x28>)
 8008ce8:	f7fe fff8 	bl	8007cdc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8008cec:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8008cf0:	f7ff f838 	bl	8007d64 <SEGGER_SYSVIEW_SetRAMBase>
}
 8008cf4:	bf00      	nop
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	20000000 	.word	0x20000000
 8008cfc:	08008cbd 	.word	0x08008cbd
 8008d00:	08009320 	.word	0x08009320

08008d04 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8008d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d06:	b085      	sub	sp, #20
 8008d08:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	607b      	str	r3, [r7, #4]
 8008d0e:	e033      	b.n	8008d78 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8008d10:	491e      	ldr	r1, [pc, #120]	; (8008d8c <_cbSendTaskList+0x88>)
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	4613      	mov	r3, r2
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	4413      	add	r3, r2
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	440b      	add	r3, r1
 8008d1e:	6818      	ldr	r0, [r3, #0]
 8008d20:	491a      	ldr	r1, [pc, #104]	; (8008d8c <_cbSendTaskList+0x88>)
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	4613      	mov	r3, r2
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	4413      	add	r3, r2
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	440b      	add	r3, r1
 8008d2e:	3304      	adds	r3, #4
 8008d30:	6819      	ldr	r1, [r3, #0]
 8008d32:	4c16      	ldr	r4, [pc, #88]	; (8008d8c <_cbSendTaskList+0x88>)
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	4613      	mov	r3, r2
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	4413      	add	r3, r2
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	4423      	add	r3, r4
 8008d40:	3308      	adds	r3, #8
 8008d42:	681c      	ldr	r4, [r3, #0]
 8008d44:	4d11      	ldr	r5, [pc, #68]	; (8008d8c <_cbSendTaskList+0x88>)
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	4613      	mov	r3, r2
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	4413      	add	r3, r2
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	442b      	add	r3, r5
 8008d52:	330c      	adds	r3, #12
 8008d54:	681d      	ldr	r5, [r3, #0]
 8008d56:	4e0d      	ldr	r6, [pc, #52]	; (8008d8c <_cbSendTaskList+0x88>)
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	4413      	add	r3, r2
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	4433      	add	r3, r6
 8008d64:	3310      	adds	r3, #16
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	9300      	str	r3, [sp, #0]
 8008d6a:	462b      	mov	r3, r5
 8008d6c:	4622      	mov	r2, r4
 8008d6e:	f000 f8bd 	bl	8008eec <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	3301      	adds	r3, #1
 8008d76:	607b      	str	r3, [r7, #4]
 8008d78:	4b05      	ldr	r3, [pc, #20]	; (8008d90 <_cbSendTaskList+0x8c>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d3c6      	bcc.n	8008d10 <_cbSendTaskList+0xc>
  }
}
 8008d82:	bf00      	nop
 8008d84:	bf00      	nop
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d8c:	20014500 	.word	0x20014500
 8008d90:	200145a0 	.word	0x200145a0

08008d94 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8008d94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d98:	b082      	sub	sp, #8
 8008d9a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8008d9c:	f7fc fe7c 	bl	8005a98 <xTaskGetTickCountFromISR>
 8008da0:	4603      	mov	r3, r0
 8008da2:	2200      	movs	r2, #0
 8008da4:	469a      	mov	sl, r3
 8008da6:	4693      	mov	fp, r2
 8008da8:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8008dac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008db0:	4602      	mov	r2, r0
 8008db2:	460b      	mov	r3, r1
 8008db4:	f04f 0a00 	mov.w	sl, #0
 8008db8:	f04f 0b00 	mov.w	fp, #0
 8008dbc:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8008dc0:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8008dc4:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8008dc8:	4652      	mov	r2, sl
 8008dca:	465b      	mov	r3, fp
 8008dcc:	1a14      	subs	r4, r2, r0
 8008dce:	eb63 0501 	sbc.w	r5, r3, r1
 8008dd2:	f04f 0200 	mov.w	r2, #0
 8008dd6:	f04f 0300 	mov.w	r3, #0
 8008dda:	00ab      	lsls	r3, r5, #2
 8008ddc:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8008de0:	00a2      	lsls	r2, r4, #2
 8008de2:	4614      	mov	r4, r2
 8008de4:	461d      	mov	r5, r3
 8008de6:	eb14 0800 	adds.w	r8, r4, r0
 8008dea:	eb45 0901 	adc.w	r9, r5, r1
 8008dee:	f04f 0200 	mov.w	r2, #0
 8008df2:	f04f 0300 	mov.w	r3, #0
 8008df6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008dfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008dfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008e02:	4690      	mov	r8, r2
 8008e04:	4699      	mov	r9, r3
 8008e06:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8008e0a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8008e0e:	4610      	mov	r0, r2
 8008e10:	4619      	mov	r1, r3
 8008e12:	3708      	adds	r7, #8
 8008e14:	46bd      	mov	sp, r7
 8008e16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08008e1c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b086      	sub	sp, #24
 8008e20:	af02      	add	r7, sp, #8
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	607a      	str	r2, [r7, #4]
 8008e28:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8008e2a:	2205      	movs	r2, #5
 8008e2c:	492b      	ldr	r1, [pc, #172]	; (8008edc <SYSVIEW_AddTask+0xc0>)
 8008e2e:	68b8      	ldr	r0, [r7, #8]
 8008e30:	f000 f8a2 	bl	8008f78 <memcmp>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d04b      	beq.n	8008ed2 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8008e3a:	4b29      	ldr	r3, [pc, #164]	; (8008ee0 <SYSVIEW_AddTask+0xc4>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	2b07      	cmp	r3, #7
 8008e40:	d903      	bls.n	8008e4a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8008e42:	4828      	ldr	r0, [pc, #160]	; (8008ee4 <SYSVIEW_AddTask+0xc8>)
 8008e44:	f7ff fede 	bl	8008c04 <SEGGER_SYSVIEW_Warn>
    return;
 8008e48:	e044      	b.n	8008ed4 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8008e4a:	4b25      	ldr	r3, [pc, #148]	; (8008ee0 <SYSVIEW_AddTask+0xc4>)
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	4926      	ldr	r1, [pc, #152]	; (8008ee8 <SYSVIEW_AddTask+0xcc>)
 8008e50:	4613      	mov	r3, r2
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	4413      	add	r3, r2
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	440b      	add	r3, r1
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8008e5e:	4b20      	ldr	r3, [pc, #128]	; (8008ee0 <SYSVIEW_AddTask+0xc4>)
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	4921      	ldr	r1, [pc, #132]	; (8008ee8 <SYSVIEW_AddTask+0xcc>)
 8008e64:	4613      	mov	r3, r2
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	4413      	add	r3, r2
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	440b      	add	r3, r1
 8008e6e:	3304      	adds	r3, #4
 8008e70:	68ba      	ldr	r2, [r7, #8]
 8008e72:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8008e74:	4b1a      	ldr	r3, [pc, #104]	; (8008ee0 <SYSVIEW_AddTask+0xc4>)
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	491b      	ldr	r1, [pc, #108]	; (8008ee8 <SYSVIEW_AddTask+0xcc>)
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	4413      	add	r3, r2
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	440b      	add	r3, r1
 8008e84:	3308      	adds	r3, #8
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8008e8a:	4b15      	ldr	r3, [pc, #84]	; (8008ee0 <SYSVIEW_AddTask+0xc4>)
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	4916      	ldr	r1, [pc, #88]	; (8008ee8 <SYSVIEW_AddTask+0xcc>)
 8008e90:	4613      	mov	r3, r2
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	4413      	add	r3, r2
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	440b      	add	r3, r1
 8008e9a:	330c      	adds	r3, #12
 8008e9c:	683a      	ldr	r2, [r7, #0]
 8008e9e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8008ea0:	4b0f      	ldr	r3, [pc, #60]	; (8008ee0 <SYSVIEW_AddTask+0xc4>)
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	4910      	ldr	r1, [pc, #64]	; (8008ee8 <SYSVIEW_AddTask+0xcc>)
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	4413      	add	r3, r2
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	440b      	add	r3, r1
 8008eb0:	3310      	adds	r3, #16
 8008eb2:	69ba      	ldr	r2, [r7, #24]
 8008eb4:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8008eb6:	4b0a      	ldr	r3, [pc, #40]	; (8008ee0 <SYSVIEW_AddTask+0xc4>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	3301      	adds	r3, #1
 8008ebc:	4a08      	ldr	r2, [pc, #32]	; (8008ee0 <SYSVIEW_AddTask+0xc4>)
 8008ebe:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8008ec0:	69bb      	ldr	r3, [r7, #24]
 8008ec2:	9300      	str	r3, [sp, #0]
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	68b9      	ldr	r1, [r7, #8]
 8008eca:	68f8      	ldr	r0, [r7, #12]
 8008ecc:	f000 f80e 	bl	8008eec <SYSVIEW_SendTaskInfo>
 8008ed0:	e000      	b.n	8008ed4 <SYSVIEW_AddTask+0xb8>
    return;
 8008ed2:	bf00      	nop

}
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	08009278 	.word	0x08009278
 8008ee0:	200145a0 	.word	0x200145a0
 8008ee4:	08009280 	.word	0x08009280
 8008ee8:	20014500 	.word	0x20014500

08008eec <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b08a      	sub	sp, #40	; 0x28
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	607a      	str	r2, [r7, #4]
 8008ef8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8008efa:	f107 0314 	add.w	r3, r7, #20
 8008efe:	2214      	movs	r2, #20
 8008f00:	2100      	movs	r1, #0
 8008f02:	4618      	mov	r0, r3
 8008f04:	f000 f856 	bl	8008fb4 <memset>
  TaskInfo.TaskID     = TaskID;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8008f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8008f1c:	f107 0314 	add.w	r3, r7, #20
 8008f20:	4618      	mov	r0, r3
 8008f22:	f7ff fa65 	bl	80083f0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8008f26:	bf00      	nop
 8008f28:	3728      	adds	r7, #40	; 0x28
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
	...

08008f30 <__libc_init_array>:
 8008f30:	b570      	push	{r4, r5, r6, lr}
 8008f32:	4d0d      	ldr	r5, [pc, #52]	; (8008f68 <__libc_init_array+0x38>)
 8008f34:	4c0d      	ldr	r4, [pc, #52]	; (8008f6c <__libc_init_array+0x3c>)
 8008f36:	1b64      	subs	r4, r4, r5
 8008f38:	10a4      	asrs	r4, r4, #2
 8008f3a:	2600      	movs	r6, #0
 8008f3c:	42a6      	cmp	r6, r4
 8008f3e:	d109      	bne.n	8008f54 <__libc_init_array+0x24>
 8008f40:	4d0b      	ldr	r5, [pc, #44]	; (8008f70 <__libc_init_array+0x40>)
 8008f42:	4c0c      	ldr	r4, [pc, #48]	; (8008f74 <__libc_init_array+0x44>)
 8008f44:	f000 f83e 	bl	8008fc4 <_init>
 8008f48:	1b64      	subs	r4, r4, r5
 8008f4a:	10a4      	asrs	r4, r4, #2
 8008f4c:	2600      	movs	r6, #0
 8008f4e:	42a6      	cmp	r6, r4
 8008f50:	d105      	bne.n	8008f5e <__libc_init_array+0x2e>
 8008f52:	bd70      	pop	{r4, r5, r6, pc}
 8008f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f58:	4798      	blx	r3
 8008f5a:	3601      	adds	r6, #1
 8008f5c:	e7ee      	b.n	8008f3c <__libc_init_array+0xc>
 8008f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f62:	4798      	blx	r3
 8008f64:	3601      	adds	r6, #1
 8008f66:	e7f2      	b.n	8008f4e <__libc_init_array+0x1e>
 8008f68:	08009330 	.word	0x08009330
 8008f6c:	08009330 	.word	0x08009330
 8008f70:	08009330 	.word	0x08009330
 8008f74:	08009334 	.word	0x08009334

08008f78 <memcmp>:
 8008f78:	b510      	push	{r4, lr}
 8008f7a:	3901      	subs	r1, #1
 8008f7c:	4402      	add	r2, r0
 8008f7e:	4290      	cmp	r0, r2
 8008f80:	d101      	bne.n	8008f86 <memcmp+0xe>
 8008f82:	2000      	movs	r0, #0
 8008f84:	e005      	b.n	8008f92 <memcmp+0x1a>
 8008f86:	7803      	ldrb	r3, [r0, #0]
 8008f88:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008f8c:	42a3      	cmp	r3, r4
 8008f8e:	d001      	beq.n	8008f94 <memcmp+0x1c>
 8008f90:	1b18      	subs	r0, r3, r4
 8008f92:	bd10      	pop	{r4, pc}
 8008f94:	3001      	adds	r0, #1
 8008f96:	e7f2      	b.n	8008f7e <memcmp+0x6>

08008f98 <memcpy>:
 8008f98:	440a      	add	r2, r1
 8008f9a:	4291      	cmp	r1, r2
 8008f9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008fa0:	d100      	bne.n	8008fa4 <memcpy+0xc>
 8008fa2:	4770      	bx	lr
 8008fa4:	b510      	push	{r4, lr}
 8008fa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008faa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fae:	4291      	cmp	r1, r2
 8008fb0:	d1f9      	bne.n	8008fa6 <memcpy+0xe>
 8008fb2:	bd10      	pop	{r4, pc}

08008fb4 <memset>:
 8008fb4:	4402      	add	r2, r0
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d100      	bne.n	8008fbe <memset+0xa>
 8008fbc:	4770      	bx	lr
 8008fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8008fc2:	e7f9      	b.n	8008fb8 <memset+0x4>

08008fc4 <_init>:
 8008fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fc6:	bf00      	nop
 8008fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fca:	bc08      	pop	{r3}
 8008fcc:	469e      	mov	lr, r3
 8008fce:	4770      	bx	lr

08008fd0 <_fini>:
 8008fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fd2:	bf00      	nop
 8008fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fd6:	bc08      	pop	{r3}
 8008fd8:	469e      	mov	lr, r3
 8008fda:	4770      	bx	lr
