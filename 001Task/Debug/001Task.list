
001Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076a8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08007858  08007858  00017858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079fc  080079fc  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080079fc  080079fc  000179fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a04  08007a04  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a04  08007a04  00017a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a08  08007a08  00017a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007a0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          0001449c  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20014514  20014514  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014400  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d26  00000000  00000000  000344a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012e8  00000000  00000000  000371d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001170  00000000  00000000  000384b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f624  00000000  00000000  00039628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00006480  00000000  00000000  00048c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0004f0cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000531c  00000000  00000000  0004f11c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007840 	.word	0x08007840

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08007840 	.word	0x08007840

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20012e88 	.word	0x20012e88
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295
 8000340:	f04f 30ff 	movne.w	r0, #4294967295
 8000344:	f000 b974 	b.w	8000630 <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9d08      	ldr	r5, [sp, #32]
 8000366:	4604      	mov	r4, r0
 8000368:	468e      	mov	lr, r1
 800036a:	2b00      	cmp	r3, #0
 800036c:	d14d      	bne.n	800040a <__udivmoddi4+0xaa>
 800036e:	428a      	cmp	r2, r1
 8000370:	4694      	mov	ip, r2
 8000372:	d969      	bls.n	8000448 <__udivmoddi4+0xe8>
 8000374:	fab2 f282 	clz	r2, r2
 8000378:	b152      	cbz	r2, 8000390 <__udivmoddi4+0x30>
 800037a:	fa01 f302 	lsl.w	r3, r1, r2
 800037e:	f1c2 0120 	rsb	r1, r2, #32
 8000382:	fa20 f101 	lsr.w	r1, r0, r1
 8000386:	fa0c fc02 	lsl.w	ip, ip, r2
 800038a:	ea41 0e03 	orr.w	lr, r1, r3
 800038e:	4094      	lsls	r4, r2
 8000390:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000394:	0c21      	lsrs	r1, r4, #16
 8000396:	fbbe f6f8 	udiv	r6, lr, r8
 800039a:	fa1f f78c 	uxth.w	r7, ip
 800039e:	fb08 e316 	mls	r3, r8, r6, lr
 80003a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003a6:	fb06 f107 	mul.w	r1, r6, r7
 80003aa:	4299      	cmp	r1, r3
 80003ac:	d90a      	bls.n	80003c4 <__udivmoddi4+0x64>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003b6:	f080 811f 	bcs.w	80005f8 <__udivmoddi4+0x298>
 80003ba:	4299      	cmp	r1, r3
 80003bc:	f240 811c 	bls.w	80005f8 <__udivmoddi4+0x298>
 80003c0:	3e02      	subs	r6, #2
 80003c2:	4463      	add	r3, ip
 80003c4:	1a5b      	subs	r3, r3, r1
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003cc:	fb08 3310 	mls	r3, r8, r0, r3
 80003d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003d4:	fb00 f707 	mul.w	r7, r0, r7
 80003d8:	42a7      	cmp	r7, r4
 80003da:	d90a      	bls.n	80003f2 <__udivmoddi4+0x92>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e4:	f080 810a 	bcs.w	80005fc <__udivmoddi4+0x29c>
 80003e8:	42a7      	cmp	r7, r4
 80003ea:	f240 8107 	bls.w	80005fc <__udivmoddi4+0x29c>
 80003ee:	4464      	add	r4, ip
 80003f0:	3802      	subs	r0, #2
 80003f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f6:	1be4      	subs	r4, r4, r7
 80003f8:	2600      	movs	r6, #0
 80003fa:	b11d      	cbz	r5, 8000404 <__udivmoddi4+0xa4>
 80003fc:	40d4      	lsrs	r4, r2
 80003fe:	2300      	movs	r3, #0
 8000400:	e9c5 4300 	strd	r4, r3, [r5]
 8000404:	4631      	mov	r1, r6
 8000406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040a:	428b      	cmp	r3, r1
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0xc2>
 800040e:	2d00      	cmp	r5, #0
 8000410:	f000 80ef 	beq.w	80005f2 <__udivmoddi4+0x292>
 8000414:	2600      	movs	r6, #0
 8000416:	e9c5 0100 	strd	r0, r1, [r5]
 800041a:	4630      	mov	r0, r6
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	fab3 f683 	clz	r6, r3
 8000426:	2e00      	cmp	r6, #0
 8000428:	d14a      	bne.n	80004c0 <__udivmoddi4+0x160>
 800042a:	428b      	cmp	r3, r1
 800042c:	d302      	bcc.n	8000434 <__udivmoddi4+0xd4>
 800042e:	4282      	cmp	r2, r0
 8000430:	f200 80f9 	bhi.w	8000626 <__udivmoddi4+0x2c6>
 8000434:	1a84      	subs	r4, r0, r2
 8000436:	eb61 0303 	sbc.w	r3, r1, r3
 800043a:	2001      	movs	r0, #1
 800043c:	469e      	mov	lr, r3
 800043e:	2d00      	cmp	r5, #0
 8000440:	d0e0      	beq.n	8000404 <__udivmoddi4+0xa4>
 8000442:	e9c5 4e00 	strd	r4, lr, [r5]
 8000446:	e7dd      	b.n	8000404 <__udivmoddi4+0xa4>
 8000448:	b902      	cbnz	r2, 800044c <__udivmoddi4+0xec>
 800044a:	deff      	udf	#255	; 0xff
 800044c:	fab2 f282 	clz	r2, r2
 8000450:	2a00      	cmp	r2, #0
 8000452:	f040 8092 	bne.w	800057a <__udivmoddi4+0x21a>
 8000456:	eba1 010c 	sub.w	r1, r1, ip
 800045a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045e:	fa1f fe8c 	uxth.w	lr, ip
 8000462:	2601      	movs	r6, #1
 8000464:	0c20      	lsrs	r0, r4, #16
 8000466:	fbb1 f3f7 	udiv	r3, r1, r7
 800046a:	fb07 1113 	mls	r1, r7, r3, r1
 800046e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000472:	fb0e f003 	mul.w	r0, lr, r3
 8000476:	4288      	cmp	r0, r1
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x12c>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x12a>
 8000484:	4288      	cmp	r0, r1
 8000486:	f200 80cb 	bhi.w	8000620 <__udivmoddi4+0x2c0>
 800048a:	4643      	mov	r3, r8
 800048c:	1a09      	subs	r1, r1, r0
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb1 f0f7 	udiv	r0, r1, r7
 8000494:	fb07 1110 	mls	r1, r7, r0, r1
 8000498:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800049c:	fb0e fe00 	mul.w	lr, lr, r0
 80004a0:	45a6      	cmp	lr, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x156>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004ac:	d202      	bcs.n	80004b4 <__udivmoddi4+0x154>
 80004ae:	45a6      	cmp	lr, r4
 80004b0:	f200 80bb 	bhi.w	800062a <__udivmoddi4+0x2ca>
 80004b4:	4608      	mov	r0, r1
 80004b6:	eba4 040e 	sub.w	r4, r4, lr
 80004ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004be:	e79c      	b.n	80003fa <__udivmoddi4+0x9a>
 80004c0:	f1c6 0720 	rsb	r7, r6, #32
 80004c4:	40b3      	lsls	r3, r6
 80004c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ce:	fa20 f407 	lsr.w	r4, r0, r7
 80004d2:	fa01 f306 	lsl.w	r3, r1, r6
 80004d6:	431c      	orrs	r4, r3
 80004d8:	40f9      	lsrs	r1, r7
 80004da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004de:	fa00 f306 	lsl.w	r3, r0, r6
 80004e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004e6:	0c20      	lsrs	r0, r4, #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fb09 1118 	mls	r1, r9, r8, r1
 80004f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f4:	fb08 f00e 	mul.w	r0, r8, lr
 80004f8:	4288      	cmp	r0, r1
 80004fa:	fa02 f206 	lsl.w	r2, r2, r6
 80004fe:	d90b      	bls.n	8000518 <__udivmoddi4+0x1b8>
 8000500:	eb1c 0101 	adds.w	r1, ip, r1
 8000504:	f108 3aff 	add.w	sl, r8, #4294967295
 8000508:	f080 8088 	bcs.w	800061c <__udivmoddi4+0x2bc>
 800050c:	4288      	cmp	r0, r1
 800050e:	f240 8085 	bls.w	800061c <__udivmoddi4+0x2bc>
 8000512:	f1a8 0802 	sub.w	r8, r8, #2
 8000516:	4461      	add	r1, ip
 8000518:	1a09      	subs	r1, r1, r0
 800051a:	b2a4      	uxth	r4, r4
 800051c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000520:	fb09 1110 	mls	r1, r9, r0, r1
 8000524:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000528:	fb00 fe0e 	mul.w	lr, r0, lr
 800052c:	458e      	cmp	lr, r1
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x1e2>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f100 34ff 	add.w	r4, r0, #4294967295
 8000538:	d26c      	bcs.n	8000614 <__udivmoddi4+0x2b4>
 800053a:	458e      	cmp	lr, r1
 800053c:	d96a      	bls.n	8000614 <__udivmoddi4+0x2b4>
 800053e:	3802      	subs	r0, #2
 8000540:	4461      	add	r1, ip
 8000542:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000546:	fba0 9402 	umull	r9, r4, r0, r2
 800054a:	eba1 010e 	sub.w	r1, r1, lr
 800054e:	42a1      	cmp	r1, r4
 8000550:	46c8      	mov	r8, r9
 8000552:	46a6      	mov	lr, r4
 8000554:	d356      	bcc.n	8000604 <__udivmoddi4+0x2a4>
 8000556:	d053      	beq.n	8000600 <__udivmoddi4+0x2a0>
 8000558:	b15d      	cbz	r5, 8000572 <__udivmoddi4+0x212>
 800055a:	ebb3 0208 	subs.w	r2, r3, r8
 800055e:	eb61 010e 	sbc.w	r1, r1, lr
 8000562:	fa01 f707 	lsl.w	r7, r1, r7
 8000566:	fa22 f306 	lsr.w	r3, r2, r6
 800056a:	40f1      	lsrs	r1, r6
 800056c:	431f      	orrs	r7, r3
 800056e:	e9c5 7100 	strd	r7, r1, [r5]
 8000572:	2600      	movs	r6, #0
 8000574:	4631      	mov	r1, r6
 8000576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	40d8      	lsrs	r0, r3
 8000580:	fa0c fc02 	lsl.w	ip, ip, r2
 8000584:	fa21 f303 	lsr.w	r3, r1, r3
 8000588:	4091      	lsls	r1, r2
 800058a:	4301      	orrs	r1, r0
 800058c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000590:	fa1f fe8c 	uxth.w	lr, ip
 8000594:	fbb3 f0f7 	udiv	r0, r3, r7
 8000598:	fb07 3610 	mls	r6, r7, r0, r3
 800059c:	0c0b      	lsrs	r3, r1, #16
 800059e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005a2:	fb00 f60e 	mul.w	r6, r0, lr
 80005a6:	429e      	cmp	r6, r3
 80005a8:	fa04 f402 	lsl.w	r4, r4, r2
 80005ac:	d908      	bls.n	80005c0 <__udivmoddi4+0x260>
 80005ae:	eb1c 0303 	adds.w	r3, ip, r3
 80005b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005b6:	d22f      	bcs.n	8000618 <__udivmoddi4+0x2b8>
 80005b8:	429e      	cmp	r6, r3
 80005ba:	d92d      	bls.n	8000618 <__udivmoddi4+0x2b8>
 80005bc:	3802      	subs	r0, #2
 80005be:	4463      	add	r3, ip
 80005c0:	1b9b      	subs	r3, r3, r6
 80005c2:	b289      	uxth	r1, r1
 80005c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005c8:	fb07 3316 	mls	r3, r7, r6, r3
 80005cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005d0:	fb06 f30e 	mul.w	r3, r6, lr
 80005d4:	428b      	cmp	r3, r1
 80005d6:	d908      	bls.n	80005ea <__udivmoddi4+0x28a>
 80005d8:	eb1c 0101 	adds.w	r1, ip, r1
 80005dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005e0:	d216      	bcs.n	8000610 <__udivmoddi4+0x2b0>
 80005e2:	428b      	cmp	r3, r1
 80005e4:	d914      	bls.n	8000610 <__udivmoddi4+0x2b0>
 80005e6:	3e02      	subs	r6, #2
 80005e8:	4461      	add	r1, ip
 80005ea:	1ac9      	subs	r1, r1, r3
 80005ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005f0:	e738      	b.n	8000464 <__udivmoddi4+0x104>
 80005f2:	462e      	mov	r6, r5
 80005f4:	4628      	mov	r0, r5
 80005f6:	e705      	b.n	8000404 <__udivmoddi4+0xa4>
 80005f8:	4606      	mov	r6, r0
 80005fa:	e6e3      	b.n	80003c4 <__udivmoddi4+0x64>
 80005fc:	4618      	mov	r0, r3
 80005fe:	e6f8      	b.n	80003f2 <__udivmoddi4+0x92>
 8000600:	454b      	cmp	r3, r9
 8000602:	d2a9      	bcs.n	8000558 <__udivmoddi4+0x1f8>
 8000604:	ebb9 0802 	subs.w	r8, r9, r2
 8000608:	eb64 0e0c 	sbc.w	lr, r4, ip
 800060c:	3801      	subs	r0, #1
 800060e:	e7a3      	b.n	8000558 <__udivmoddi4+0x1f8>
 8000610:	4646      	mov	r6, r8
 8000612:	e7ea      	b.n	80005ea <__udivmoddi4+0x28a>
 8000614:	4620      	mov	r0, r4
 8000616:	e794      	b.n	8000542 <__udivmoddi4+0x1e2>
 8000618:	4640      	mov	r0, r8
 800061a:	e7d1      	b.n	80005c0 <__udivmoddi4+0x260>
 800061c:	46d0      	mov	r8, sl
 800061e:	e77b      	b.n	8000518 <__udivmoddi4+0x1b8>
 8000620:	3b02      	subs	r3, #2
 8000622:	4461      	add	r1, ip
 8000624:	e732      	b.n	800048c <__udivmoddi4+0x12c>
 8000626:	4630      	mov	r0, r6
 8000628:	e709      	b.n	800043e <__udivmoddi4+0xde>
 800062a:	4464      	add	r4, ip
 800062c:	3802      	subs	r0, #2
 800062e:	e742      	b.n	80004b6 <__udivmoddi4+0x156>

08000630 <__aeabi_idiv0>:
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop

08000634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b088      	sub	sp, #32
 8000638:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063a:	f000 fc7b 	bl	8000f34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063e:	f000 f851 	bl	80006e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000642:	f000 f8bb 	bl	80007bc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  DWT_CTRL |= (1 << 0);
 8000646:	4b20      	ldr	r3, [pc, #128]	; (80006c8 <main+0x94>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a1f      	ldr	r2, [pc, #124]	; (80006c8 <main+0x94>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000652:	f006 fafd 	bl	8006c50 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000656:	f005 fd0d 	bl	8006074 <SEGGER_SYSVIEW_Start>

 status = xTaskCreate(Task1, "Task-1", 200, "Hello World from Task-1\n", 2, &task1_Handle);
 800065a:	f107 0308 	add.w	r3, r7, #8
 800065e:	9301      	str	r3, [sp, #4]
 8000660:	2302      	movs	r3, #2
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	4b19      	ldr	r3, [pc, #100]	; (80006cc <main+0x98>)
 8000666:	22c8      	movs	r2, #200	; 0xc8
 8000668:	4919      	ldr	r1, [pc, #100]	; (80006d0 <main+0x9c>)
 800066a:	481a      	ldr	r0, [pc, #104]	; (80006d4 <main+0xa0>)
 800066c:	f002 fc90 	bl	8002f90 <xTaskCreate>
 8000670:	6178      	str	r0, [r7, #20]
 configASSERT(status == pdPASS);
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	2b01      	cmp	r3, #1
 8000676:	d00a      	beq.n	800068e <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800067c:	f383 8811 	msr	BASEPRI, r3
 8000680:	f3bf 8f6f 	isb	sy
 8000684:	f3bf 8f4f 	dsb	sy
 8000688:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800068a:	bf00      	nop
 800068c:	e7fe      	b.n	800068c <main+0x58>

 status = xTaskCreate(Task2, "Task-2", 200, "Hello World from Task-2\n", 2, &task2_Handle);
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2302      	movs	r3, #2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <main+0xa4>)
 8000698:	22c8      	movs	r2, #200	; 0xc8
 800069a:	4910      	ldr	r1, [pc, #64]	; (80006dc <main+0xa8>)
 800069c:	4810      	ldr	r0, [pc, #64]	; (80006e0 <main+0xac>)
 800069e:	f002 fc77 	bl	8002f90 <xTaskCreate>
 80006a2:	6178      	str	r0, [r7, #20]
 configASSERT(status == pdPASS);
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d00a      	beq.n	80006c0 <main+0x8c>
        __asm volatile
 80006aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006ae:	f383 8811 	msr	BASEPRI, r3
 80006b2:	f3bf 8f6f 	isb	sy
 80006b6:	f3bf 8f4f 	dsb	sy
 80006ba:	60fb      	str	r3, [r7, #12]
    }
 80006bc:	bf00      	nop
 80006be:	e7fe      	b.n	80006be <main+0x8a>

  /* WE START THE SCHEDULER HERE*/
 vTaskStartScheduler();
 80006c0:	f002 fdbc 	bl	800323c <vTaskStartScheduler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <main+0x90>
 80006c6:	bf00      	nop
 80006c8:	e0001000 	.word	0xe0001000
 80006cc:	08007858 	.word	0x08007858
 80006d0:	08007874 	.word	0x08007874
 80006d4:	08000c95 	.word	0x08000c95
 80006d8:	0800787c 	.word	0x0800787c
 80006dc:	08007898 	.word	0x08007898
 80006e0:	08000ccd 	.word	0x08000ccd

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b094      	sub	sp, #80	; 0x50
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	f107 0320 	add.w	r3, r7, #32
 80006ee:	2230      	movs	r2, #48	; 0x30
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f006 fc1a 	bl	8006f2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000708:	2300      	movs	r3, #0
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	4b29      	ldr	r3, [pc, #164]	; (80007b4 <SystemClock_Config+0xd0>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	4a28      	ldr	r2, [pc, #160]	; (80007b4 <SystemClock_Config+0xd0>)
 8000712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000716:	6413      	str	r3, [r2, #64]	; 0x40
 8000718:	4b26      	ldr	r3, [pc, #152]	; (80007b4 <SystemClock_Config+0xd0>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000724:	2300      	movs	r3, #0
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	4b23      	ldr	r3, [pc, #140]	; (80007b8 <SystemClock_Config+0xd4>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000730:	4a21      	ldr	r2, [pc, #132]	; (80007b8 <SystemClock_Config+0xd4>)
 8000732:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000736:	6013      	str	r3, [r2, #0]
 8000738:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <SystemClock_Config+0xd4>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000744:	2302      	movs	r3, #2
 8000746:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000748:	2301      	movs	r3, #1
 800074a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074c:	2310      	movs	r3, #16
 800074e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000750:	2302      	movs	r3, #2
 8000752:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000754:	2300      	movs	r3, #0
 8000756:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000758:	2308      	movs	r3, #8
 800075a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800075c:	2332      	movs	r3, #50	; 0x32
 800075e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000760:	2304      	movs	r3, #4
 8000762:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000764:	2307      	movs	r3, #7
 8000766:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000768:	f107 0320 	add.w	r3, r7, #32
 800076c:	4618      	mov	r0, r3
 800076e:	f000 fecb 	bl	8001508 <HAL_RCC_OscConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000778:	f000 fad6 	bl	8000d28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077c:	230f      	movs	r3, #15
 800077e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000780:	2302      	movs	r3, #2
 8000782:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000788:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800078c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800078e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000792:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f001 f92c 	bl	80019f8 <HAL_RCC_ClockConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007a6:	f000 fabf 	bl	8000d28 <Error_Handler>
  }
}
 80007aa:	bf00      	nop
 80007ac:	3750      	adds	r7, #80	; 0x50
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40007000 	.word	0x40007000

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08e      	sub	sp, #56	; 0x38
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	623b      	str	r3, [r7, #32]
 80007d6:	4bb2      	ldr	r3, [pc, #712]	; (8000aa0 <MX_GPIO_Init+0x2e4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4ab1      	ldr	r2, [pc, #708]	; (8000aa0 <MX_GPIO_Init+0x2e4>)
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4baf      	ldr	r3, [pc, #700]	; (8000aa0 <MX_GPIO_Init+0x2e4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0304 	and.w	r3, r3, #4
 80007ea:	623b      	str	r3, [r7, #32]
 80007ec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]
 80007f2:	4bab      	ldr	r3, [pc, #684]	; (8000aa0 <MX_GPIO_Init+0x2e4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4aaa      	ldr	r2, [pc, #680]	; (8000aa0 <MX_GPIO_Init+0x2e4>)
 80007f8:	f043 0320 	orr.w	r3, r3, #32
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4ba8      	ldr	r3, [pc, #672]	; (8000aa0 <MX_GPIO_Init+0x2e4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0320 	and.w	r3, r3, #32
 8000806:	61fb      	str	r3, [r7, #28]
 8000808:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]
 800080e:	4ba4      	ldr	r3, [pc, #656]	; (8000aa0 <MX_GPIO_Init+0x2e4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4aa3      	ldr	r2, [pc, #652]	; (8000aa0 <MX_GPIO_Init+0x2e4>)
 8000814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4ba1      	ldr	r3, [pc, #644]	; (8000aa0 <MX_GPIO_Init+0x2e4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000822:	61bb      	str	r3, [r7, #24]
 8000824:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
 800082a:	4b9d      	ldr	r3, [pc, #628]	; (8000aa0 <MX_GPIO_Init+0x2e4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a9c      	ldr	r2, [pc, #624]	; (8000aa0 <MX_GPIO_Init+0x2e4>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b9a      	ldr	r3, [pc, #616]	; (8000aa0 <MX_GPIO_Init+0x2e4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
 8000846:	4b96      	ldr	r3, [pc, #600]	; (8000aa0 <MX_GPIO_Init+0x2e4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a95      	ldr	r2, [pc, #596]	; (8000aa0 <MX_GPIO_Init+0x2e4>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b93      	ldr	r3, [pc, #588]	; (8000aa0 <MX_GPIO_Init+0x2e4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	4b8f      	ldr	r3, [pc, #572]	; (8000aa0 <MX_GPIO_Init+0x2e4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a8e      	ldr	r2, [pc, #568]	; (8000aa0 <MX_GPIO_Init+0x2e4>)
 8000868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b8c      	ldr	r3, [pc, #560]	; (8000aa0 <MX_GPIO_Init+0x2e4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	4b88      	ldr	r3, [pc, #544]	; (8000aa0 <MX_GPIO_Init+0x2e4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a87      	ldr	r2, [pc, #540]	; (8000aa0 <MX_GPIO_Init+0x2e4>)
 8000884:	f043 0310 	orr.w	r3, r3, #16
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b85      	ldr	r3, [pc, #532]	; (8000aa0 <MX_GPIO_Init+0x2e4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0310 	and.w	r3, r3, #16
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	4b81      	ldr	r3, [pc, #516]	; (8000aa0 <MX_GPIO_Init+0x2e4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a80      	ldr	r2, [pc, #512]	; (8000aa0 <MX_GPIO_Init+0x2e4>)
 80008a0:	f043 0308 	orr.w	r3, r3, #8
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b7e      	ldr	r3, [pc, #504]	; (8000aa0 <MX_GPIO_Init+0x2e4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0308 	and.w	r3, r3, #8
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2116      	movs	r1, #22
 80008b6:	487b      	ldr	r0, [pc, #492]	; (8000aa4 <MX_GPIO_Init+0x2e8>)
 80008b8:	f000 fe0c 	bl	80014d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	2180      	movs	r1, #128	; 0x80
 80008c0:	4879      	ldr	r0, [pc, #484]	; (8000aa8 <MX_GPIO_Init+0x2ec>)
 80008c2:	f000 fe07 	bl	80014d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80008cc:	4877      	ldr	r0, [pc, #476]	; (8000aac <MX_GPIO_Init+0x2f0>)
 80008ce:	f000 fe01 	bl	80014d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80008d8:	4875      	ldr	r0, [pc, #468]	; (8000ab0 <MX_GPIO_Init+0x2f4>)
 80008da:	f000 fdfb 	bl	80014d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80008de:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	2302      	movs	r3, #2
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ec:	2303      	movs	r3, #3
 80008ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008f0:	230c      	movs	r3, #12
 80008f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f8:	4619      	mov	r1, r3
 80008fa:	486e      	ldr	r0, [pc, #440]	; (8000ab4 <MX_GPIO_Init+0x2f8>)
 80008fc:	f000 fc3e 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000900:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000912:	2305      	movs	r3, #5
 8000914:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091a:	4619      	mov	r1, r3
 800091c:	4865      	ldr	r0, [pc, #404]	; (8000ab4 <MX_GPIO_Init+0x2f8>)
 800091e:	f000 fc2d 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000934:	230e      	movs	r3, #14
 8000936:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093c:	4619      	mov	r1, r3
 800093e:	485d      	ldr	r0, [pc, #372]	; (8000ab4 <MX_GPIO_Init+0x2f8>)
 8000940:	f000 fc1c 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000944:	2301      	movs	r3, #1
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	2302      	movs	r3, #2
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000950:	2303      	movs	r3, #3
 8000952:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000954:	230c      	movs	r3, #12
 8000956:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095c:	4619      	mov	r1, r3
 800095e:	4851      	ldr	r0, [pc, #324]	; (8000aa4 <MX_GPIO_Init+0x2e8>)
 8000960:	f000 fc0c 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000964:	2316      	movs	r3, #22
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	2301      	movs	r3, #1
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000978:	4619      	mov	r1, r3
 800097a:	484a      	ldr	r0, [pc, #296]	; (8000aa4 <MX_GPIO_Init+0x2e8>)
 800097c:	f000 fbfe 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000980:	f248 0307 	movw	r3, #32775	; 0x8007
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000986:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000994:	4619      	mov	r1, r3
 8000996:	4844      	ldr	r0, [pc, #272]	; (8000aa8 <MX_GPIO_Init+0x2ec>)
 8000998:	f000 fbf0 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800099c:	f641 0358 	movw	r3, #6232	; 0x1858
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009ae:	230e      	movs	r3, #14
 80009b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b6:	4619      	mov	r1, r3
 80009b8:	483b      	ldr	r0, [pc, #236]	; (8000aa8 <MX_GPIO_Init+0x2ec>)
 80009ba:	f000 fbdf 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80009be:	2380      	movs	r3, #128	; 0x80
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d2:	4619      	mov	r1, r3
 80009d4:	4834      	ldr	r0, [pc, #208]	; (8000aa8 <MX_GPIO_Init+0x2ec>)
 80009d6:	f000 fbd1 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80009da:	2320      	movs	r3, #32
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009de:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ec:	4619      	mov	r1, r3
 80009ee:	482d      	ldr	r0, [pc, #180]	; (8000aa4 <MX_GPIO_Init+0x2e8>)
 80009f0:	f000 fbc4 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80009f4:	2303      	movs	r3, #3
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	2302      	movs	r3, #2
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2300      	movs	r3, #0
 8000a02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a04:	2309      	movs	r3, #9
 8000a06:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	482a      	ldr	r0, [pc, #168]	; (8000ab8 <MX_GPIO_Init+0x2fc>)
 8000a10:	f000 fbb4 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a14:	2304      	movs	r3, #4
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a24:	4619      	mov	r1, r3
 8000a26:	4824      	ldr	r0, [pc, #144]	; (8000ab8 <MX_GPIO_Init+0x2fc>)
 8000a28:	f000 fba8 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000a2c:	f248 1333 	movw	r3, #33075	; 0x8133
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a3e:	230c      	movs	r3, #12
 8000a40:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a46:	4619      	mov	r1, r3
 8000a48:	4819      	ldr	r0, [pc, #100]	; (8000ab0 <MX_GPIO_Init+0x2f4>)
 8000a4a:	f000 fb97 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000a4e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a60:	230c      	movs	r3, #12
 8000a62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4814      	ldr	r0, [pc, #80]	; (8000abc <MX_GPIO_Init+0x300>)
 8000a6c:	f000 fb86 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000a70:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a82:	230e      	movs	r3, #14
 8000a84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	480a      	ldr	r0, [pc, #40]	; (8000ab8 <MX_GPIO_Init+0x2fc>)
 8000a8e:	f000 fb75 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000a92:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a9c:	e010      	b.n	8000ac0 <MX_GPIO_Init+0x304>
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40020800 	.word	0x40020800
 8000aa8:	40020000 	.word	0x40020000
 8000aac:	40020c00 	.word	0x40020c00
 8000ab0:	40021800 	.word	0x40021800
 8000ab4:	40021400 	.word	0x40021400
 8000ab8:	40020400 	.word	0x40020400
 8000abc:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000ac8:	230c      	movs	r3, #12
 8000aca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	486b      	ldr	r0, [pc, #428]	; (8000c80 <MX_GPIO_Init+0x4c4>)
 8000ad4:	f000 fb52 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000ad8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aea:	4619      	mov	r1, r3
 8000aec:	4864      	ldr	r0, [pc, #400]	; (8000c80 <MX_GPIO_Init+0x4c4>)
 8000aee:	f000 fb45 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000af2:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af8:	2302      	movs	r3, #2
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b00:	2303      	movs	r3, #3
 8000b02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b04:	230c      	movs	r3, #12
 8000b06:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	485d      	ldr	r0, [pc, #372]	; (8000c84 <MX_GPIO_Init+0x4c8>)
 8000b10:	f000 fb34 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000b14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b26:	4619      	mov	r1, r3
 8000b28:	4856      	ldr	r0, [pc, #344]	; (8000c84 <MX_GPIO_Init+0x4c8>)
 8000b2a:	f000 fb27 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000b2e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b44:	4619      	mov	r1, r3
 8000b46:	484f      	ldr	r0, [pc, #316]	; (8000c84 <MX_GPIO_Init+0x4c8>)
 8000b48:	f000 fb18 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000b4c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b5e:	230e      	movs	r3, #14
 8000b60:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b66:	4619      	mov	r1, r3
 8000b68:	4847      	ldr	r0, [pc, #284]	; (8000c88 <MX_GPIO_Init+0x4cc>)
 8000b6a:	f000 fb07 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000b6e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b80:	230e      	movs	r3, #14
 8000b82:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4840      	ldr	r0, [pc, #256]	; (8000c8c <MX_GPIO_Init+0x4d0>)
 8000b8c:	f000 faf6 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000b90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b96:	2312      	movs	r3, #18
 8000b98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ba2:	2304      	movs	r3, #4
 8000ba4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000baa:	4619      	mov	r1, r3
 8000bac:	4837      	ldr	r0, [pc, #220]	; (8000c8c <MX_GPIO_Init+0x4d0>)
 8000bae:	f000 fae5 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000bb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bb8:	2312      	movs	r3, #18
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bc4:	2304      	movs	r3, #4
 8000bc6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4830      	ldr	r0, [pc, #192]	; (8000c90 <MX_GPIO_Init+0x4d4>)
 8000bd0:	f000 fad4 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000bd4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be2:	2303      	movs	r3, #3
 8000be4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000be6:	2307      	movs	r3, #7
 8000be8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4827      	ldr	r0, [pc, #156]	; (8000c90 <MX_GPIO_Init+0x4d4>)
 8000bf2:	f000 fac3 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000bf6:	2348      	movs	r3, #72	; 0x48
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c06:	230e      	movs	r3, #14
 8000c08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0e:	4619      	mov	r1, r3
 8000c10:	481c      	ldr	r0, [pc, #112]	; (8000c84 <MX_GPIO_Init+0x4c8>)
 8000c12:	f000 fab3 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000c16:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c28:	2309      	movs	r3, #9
 8000c2a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c30:	4619      	mov	r1, r3
 8000c32:	4815      	ldr	r0, [pc, #84]	; (8000c88 <MX_GPIO_Init+0x4cc>)
 8000c34:	f000 faa2 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000c38:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4e:	4619      	mov	r1, r3
 8000c50:	480d      	ldr	r0, [pc, #52]	; (8000c88 <MX_GPIO_Init+0x4cc>)
 8000c52:	f000 fa93 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000c56:	2360      	movs	r3, #96	; 0x60
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c62:	2303      	movs	r3, #3
 8000c64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c66:	230c      	movs	r3, #12
 8000c68:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4803      	ldr	r0, [pc, #12]	; (8000c80 <MX_GPIO_Init+0x4c4>)
 8000c72:	f000 fa83 	bl	800117c <HAL_GPIO_Init>

}
 8000c76:	bf00      	nop
 8000c78:	3738      	adds	r7, #56	; 0x38
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40020400 	.word	0x40020400
 8000c84:	40020c00 	.word	0x40020c00
 8000c88:	40021800 	.word	0x40021800
 8000c8c:	40020800 	.word	0x40020800
 8000c90:	40020000 	.word	0x40020000

08000c94 <Task1>:

/* USER CODE BEGIN 4 */
static void Task1(void* parameters)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b09c      	sub	sp, #112	; 0x70
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
	char mess[100];
	while(1)
	{
		//printf("%s\n",(char*)parameters);

		snprintf(mess, 100, (char*)parameters);
 8000c9c:	f107 030c 	add.w	r3, r7, #12
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	2164      	movs	r1, #100	; 0x64
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f006 f949 	bl	8006f3c <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(mess);
 8000caa:	f107 030c 	add.w	r3, r7, #12
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f005 ff50 	bl	8006b54 <SEGGER_SYSVIEW_PrintfTarget>

		taskYIELD();
 8000cb4:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <Task1+0x34>)
 8000cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	f3bf 8f4f 	dsb	sy
 8000cc0:	f3bf 8f6f 	isb	sy
		snprintf(mess, 100, (char*)parameters);
 8000cc4:	e7ea      	b.n	8000c9c <Task1+0x8>
 8000cc6:	bf00      	nop
 8000cc8:	e000ed04 	.word	0xe000ed04

08000ccc <Task2>:




static void Task2(void* parameters)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b09c      	sub	sp, #112	; 0x70
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	char mess[100];

	while(1)
		{
		snprintf(mess, 100, (char*)parameters);
 8000cd4:	f107 030c 	add.w	r3, r7, #12
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	2164      	movs	r1, #100	; 0x64
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f006 f92d 	bl	8006f3c <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(mess);
 8000ce2:	f107 030c 	add.w	r3, r7, #12
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f005 ff34 	bl	8006b54 <SEGGER_SYSVIEW_PrintfTarget>


		taskYIELD();
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <Task2+0x34>)
 8000cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	f3bf 8f4f 	dsb	sy
 8000cf8:	f3bf 8f6f 	isb	sy
		snprintf(mess, 100, (char*)parameters);
 8000cfc:	e7ea      	b.n	8000cd4 <Task2+0x8>
 8000cfe:	bf00      	nop
 8000d00:	e000ed04 	.word	0xe000ed04

08000d04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d101      	bne.n	8000d1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d16:	f000 f92f 	bl	8000f78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40001000 	.word	0x40001000

08000d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d2c:	b672      	cpsid	i
}
 8000d2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <Error_Handler+0x8>
	...

08000d34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <HAL_MspInit+0x4c>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	4a0f      	ldr	r2, [pc, #60]	; (8000d80 <HAL_MspInit+0x4c>)
 8000d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d48:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <HAL_MspInit+0x4c>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	603b      	str	r3, [r7, #0]
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <HAL_MspInit+0x4c>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	4a08      	ldr	r2, [pc, #32]	; (8000d80 <HAL_MspInit+0x4c>)
 8000d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d64:	6413      	str	r3, [r2, #64]	; 0x40
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_MspInit+0x4c>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000d72:	f003 fbd1 	bl	8004518 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800

08000d84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08e      	sub	sp, #56	; 0x38
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d94:	2300      	movs	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	4b33      	ldr	r3, [pc, #204]	; (8000e68 <HAL_InitTick+0xe4>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	4a32      	ldr	r2, [pc, #200]	; (8000e68 <HAL_InitTick+0xe4>)
 8000d9e:	f043 0310 	orr.w	r3, r3, #16
 8000da2:	6413      	str	r3, [r2, #64]	; 0x40
 8000da4:	4b30      	ldr	r3, [pc, #192]	; (8000e68 <HAL_InitTick+0xe4>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	f003 0310 	and.w	r3, r3, #16
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000db0:	f107 0210 	add.w	r2, r7, #16
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	4611      	mov	r1, r2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f001 f828 	bl	8001e10 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000dc0:	6a3b      	ldr	r3, [r7, #32]
 8000dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d103      	bne.n	8000dd2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000dca:	f001 f80d 	bl	8001de8 <HAL_RCC_GetPCLK1Freq>
 8000dce:	6378      	str	r0, [r7, #52]	; 0x34
 8000dd0:	e004      	b.n	8000ddc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000dd2:	f001 f809 	bl	8001de8 <HAL_RCC_GetPCLK1Freq>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dde:	4a23      	ldr	r2, [pc, #140]	; (8000e6c <HAL_InitTick+0xe8>)
 8000de0:	fba2 2303 	umull	r2, r3, r2, r3
 8000de4:	0c9b      	lsrs	r3, r3, #18
 8000de6:	3b01      	subs	r3, #1
 8000de8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000dea:	4b21      	ldr	r3, [pc, #132]	; (8000e70 <HAL_InitTick+0xec>)
 8000dec:	4a21      	ldr	r2, [pc, #132]	; (8000e74 <HAL_InitTick+0xf0>)
 8000dee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000df0:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <HAL_InitTick+0xec>)
 8000df2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000df6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000df8:	4a1d      	ldr	r2, [pc, #116]	; (8000e70 <HAL_InitTick+0xec>)
 8000dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dfc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000dfe:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <HAL_InitTick+0xec>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e04:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <HAL_InitTick+0xec>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e0a:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <HAL_InitTick+0xec>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e10:	4817      	ldr	r0, [pc, #92]	; (8000e70 <HAL_InitTick+0xec>)
 8000e12:	f001 f82f 	bl	8001e74 <HAL_TIM_Base_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000e1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d11b      	bne.n	8000e5c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e24:	4812      	ldr	r0, [pc, #72]	; (8000e70 <HAL_InitTick+0xec>)
 8000e26:	f001 f87f 	bl	8001f28 <HAL_TIM_Base_Start_IT>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000e30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d111      	bne.n	8000e5c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e38:	2036      	movs	r0, #54	; 0x36
 8000e3a:	f000 f991 	bl	8001160 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2b0f      	cmp	r3, #15
 8000e42:	d808      	bhi.n	8000e56 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e44:	2200      	movs	r2, #0
 8000e46:	6879      	ldr	r1, [r7, #4]
 8000e48:	2036      	movs	r0, #54	; 0x36
 8000e4a:	f000 f96d 	bl	8001128 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <HAL_InitTick+0xf4>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	e002      	b.n	8000e5c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3738      	adds	r7, #56	; 0x38
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	431bde83 	.word	0x431bde83
 8000e70:	20000094 	.word	0x20000094
 8000e74:	40001000 	.word	0x40001000
 8000e78:	20000004 	.word	0x20000004

08000e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <NMI_Handler+0x4>

08000e82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <HardFault_Handler+0x4>

08000e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <MemManage_Handler+0x4>

08000e8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e92:	e7fe      	b.n	8000e92 <BusFault_Handler+0x4>

08000e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <UsageFault_Handler+0x4>

08000e9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000eac:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <TIM6_DAC_IRQHandler+0x10>)
 8000eae:	f001 f8ab 	bl	8002008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000094 	.word	0x20000094

08000ebc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <SystemInit+0x20>)
 8000ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ec6:	4a05      	ldr	r2, [pc, #20]	; (8000edc <SystemInit+0x20>)
 8000ec8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ecc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ee0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f18 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ee4:	480d      	ldr	r0, [pc, #52]	; (8000f1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ee6:	490e      	ldr	r1, [pc, #56]	; (8000f20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ee8:	4a0e      	ldr	r2, [pc, #56]	; (8000f24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eec:	e002      	b.n	8000ef4 <LoopCopyDataInit>

08000eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef2:	3304      	adds	r3, #4

08000ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef8:	d3f9      	bcc.n	8000eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efa:	4a0b      	ldr	r2, [pc, #44]	; (8000f28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000efc:	4c0b      	ldr	r4, [pc, #44]	; (8000f2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f00:	e001      	b.n	8000f06 <LoopFillZerobss>

08000f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f04:	3204      	adds	r2, #4

08000f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f08:	d3fb      	bcc.n	8000f02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f0a:	f7ff ffd7 	bl	8000ebc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f0e:	f005 ffcb 	bl	8006ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f12:	f7ff fb8f 	bl	8000634 <main>
  bx  lr    
 8000f16:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f18:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f20:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000f24:	08007a0c 	.word	0x08007a0c
  ldr r2, =_sbss
 8000f28:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000f2c:	20014514 	.word	0x20014514

08000f30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f30:	e7fe      	b.n	8000f30 <ADC_IRQHandler>
	...

08000f34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f38:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <HAL_Init+0x40>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a0d      	ldr	r2, [pc, #52]	; (8000f74 <HAL_Init+0x40>)
 8000f3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f44:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <HAL_Init+0x40>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <HAL_Init+0x40>)
 8000f4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f50:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <HAL_Init+0x40>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a07      	ldr	r2, [pc, #28]	; (8000f74 <HAL_Init+0x40>)
 8000f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f5c:	2003      	movs	r0, #3
 8000f5e:	f000 f8d8 	bl	8001112 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f62:	2000      	movs	r0, #0
 8000f64:	f7ff ff0e 	bl	8000d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f68:	f7ff fee4 	bl	8000d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40023c00 	.word	0x40023c00

08000f78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_IncTick+0x20>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_IncTick+0x24>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4413      	add	r3, r2
 8000f88:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <HAL_IncTick+0x24>)
 8000f8a:	6013      	str	r3, [r2, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000008 	.word	0x20000008
 8000f9c:	200000dc 	.word	0x200000dc

08000fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa4:	4b03      	ldr	r3, [pc, #12]	; (8000fb4 <HAL_GetTick+0x14>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	200000dc 	.word	0x200000dc

08000fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fea:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	60d3      	str	r3, [r2, #12]
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <__NVIC_GetPriorityGrouping+0x18>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	0a1b      	lsrs	r3, r3, #8
 800100a:	f003 0307 	and.w	r3, r3, #7
}
 800100e:	4618      	mov	r0, r3
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	2b00      	cmp	r3, #0
 800102c:	db0b      	blt.n	8001046 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	f003 021f 	and.w	r2, r3, #31
 8001034:	4907      	ldr	r1, [pc, #28]	; (8001054 <__NVIC_EnableIRQ+0x38>)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	095b      	lsrs	r3, r3, #5
 800103c:	2001      	movs	r0, #1
 800103e:	fa00 f202 	lsl.w	r2, r0, r2
 8001042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000e100 	.word	0xe000e100

08001058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	6039      	str	r1, [r7, #0]
 8001062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001068:	2b00      	cmp	r3, #0
 800106a:	db0a      	blt.n	8001082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	b2da      	uxtb	r2, r3
 8001070:	490c      	ldr	r1, [pc, #48]	; (80010a4 <__NVIC_SetPriority+0x4c>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	0112      	lsls	r2, r2, #4
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	440b      	add	r3, r1
 800107c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001080:	e00a      	b.n	8001098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4908      	ldr	r1, [pc, #32]	; (80010a8 <__NVIC_SetPriority+0x50>)
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	f003 030f 	and.w	r3, r3, #15
 800108e:	3b04      	subs	r3, #4
 8001090:	0112      	lsls	r2, r2, #4
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	440b      	add	r3, r1
 8001096:	761a      	strb	r2, [r3, #24]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000e100 	.word	0xe000e100
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	; 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f1c3 0307 	rsb	r3, r3, #7
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	bf28      	it	cs
 80010ca:	2304      	movcs	r3, #4
 80010cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3304      	adds	r3, #4
 80010d2:	2b06      	cmp	r3, #6
 80010d4:	d902      	bls.n	80010dc <NVIC_EncodePriority+0x30>
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3b03      	subs	r3, #3
 80010da:	e000      	b.n	80010de <NVIC_EncodePriority+0x32>
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	f04f 32ff 	mov.w	r2, #4294967295
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43da      	mvns	r2, r3
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	401a      	ands	r2, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f4:	f04f 31ff 	mov.w	r1, #4294967295
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	43d9      	mvns	r1, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	4313      	orrs	r3, r2
         );
}
 8001106:	4618      	mov	r0, r3
 8001108:	3724      	adds	r7, #36	; 0x24
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ff4c 	bl	8000fb8 <__NVIC_SetPriorityGrouping>
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
 8001134:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800113a:	f7ff ff61 	bl	8001000 <__NVIC_GetPriorityGrouping>
 800113e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	68b9      	ldr	r1, [r7, #8]
 8001144:	6978      	ldr	r0, [r7, #20]
 8001146:	f7ff ffb1 	bl	80010ac <NVIC_EncodePriority>
 800114a:	4602      	mov	r2, r0
 800114c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001150:	4611      	mov	r1, r2
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff ff80 	bl	8001058 <__NVIC_SetPriority>
}
 8001158:	bf00      	nop
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff54 	bl	800101c <__NVIC_EnableIRQ>
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800117c:	b480      	push	{r7}
 800117e:	b089      	sub	sp, #36	; 0x24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800118e:	2300      	movs	r3, #0
 8001190:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
 8001196:	e177      	b.n	8001488 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001198:	2201      	movs	r2, #1
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	4013      	ands	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	f040 8166 	bne.w	8001482 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 0303 	and.w	r3, r3, #3
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d005      	beq.n	80011ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d130      	bne.n	8001230 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	2203      	movs	r2, #3
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43db      	mvns	r3, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4013      	ands	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	68da      	ldr	r2, [r3, #12]
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001204:	2201      	movs	r2, #1
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	091b      	lsrs	r3, r3, #4
 800121a:	f003 0201 	and.w	r2, r3, #1
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	2b03      	cmp	r3, #3
 800123a:	d017      	beq.n	800126c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	2203      	movs	r2, #3
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0303 	and.w	r3, r3, #3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d123      	bne.n	80012c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	08da      	lsrs	r2, r3, #3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3208      	adds	r2, #8
 8001280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001284:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	f003 0307 	and.w	r3, r3, #7
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	220f      	movs	r2, #15
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	691a      	ldr	r2, [r3, #16]
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	08da      	lsrs	r2, r3, #3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	3208      	adds	r2, #8
 80012ba:	69b9      	ldr	r1, [r7, #24]
 80012bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	2203      	movs	r2, #3
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 0203 	and.w	r2, r3, #3
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 80c0 	beq.w	8001482 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	4b66      	ldr	r3, [pc, #408]	; (80014a0 <HAL_GPIO_Init+0x324>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	4a65      	ldr	r2, [pc, #404]	; (80014a0 <HAL_GPIO_Init+0x324>)
 800130c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001310:	6453      	str	r3, [r2, #68]	; 0x44
 8001312:	4b63      	ldr	r3, [pc, #396]	; (80014a0 <HAL_GPIO_Init+0x324>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800131e:	4a61      	ldr	r2, [pc, #388]	; (80014a4 <HAL_GPIO_Init+0x328>)
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	089b      	lsrs	r3, r3, #2
 8001324:	3302      	adds	r3, #2
 8001326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	220f      	movs	r2, #15
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a58      	ldr	r2, [pc, #352]	; (80014a8 <HAL_GPIO_Init+0x32c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d037      	beq.n	80013ba <HAL_GPIO_Init+0x23e>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a57      	ldr	r2, [pc, #348]	; (80014ac <HAL_GPIO_Init+0x330>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d031      	beq.n	80013b6 <HAL_GPIO_Init+0x23a>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a56      	ldr	r2, [pc, #344]	; (80014b0 <HAL_GPIO_Init+0x334>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d02b      	beq.n	80013b2 <HAL_GPIO_Init+0x236>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a55      	ldr	r2, [pc, #340]	; (80014b4 <HAL_GPIO_Init+0x338>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d025      	beq.n	80013ae <HAL_GPIO_Init+0x232>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a54      	ldr	r2, [pc, #336]	; (80014b8 <HAL_GPIO_Init+0x33c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d01f      	beq.n	80013aa <HAL_GPIO_Init+0x22e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a53      	ldr	r2, [pc, #332]	; (80014bc <HAL_GPIO_Init+0x340>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d019      	beq.n	80013a6 <HAL_GPIO_Init+0x22a>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a52      	ldr	r2, [pc, #328]	; (80014c0 <HAL_GPIO_Init+0x344>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d013      	beq.n	80013a2 <HAL_GPIO_Init+0x226>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a51      	ldr	r2, [pc, #324]	; (80014c4 <HAL_GPIO_Init+0x348>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d00d      	beq.n	800139e <HAL_GPIO_Init+0x222>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a50      	ldr	r2, [pc, #320]	; (80014c8 <HAL_GPIO_Init+0x34c>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d007      	beq.n	800139a <HAL_GPIO_Init+0x21e>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4f      	ldr	r2, [pc, #316]	; (80014cc <HAL_GPIO_Init+0x350>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d101      	bne.n	8001396 <HAL_GPIO_Init+0x21a>
 8001392:	2309      	movs	r3, #9
 8001394:	e012      	b.n	80013bc <HAL_GPIO_Init+0x240>
 8001396:	230a      	movs	r3, #10
 8001398:	e010      	b.n	80013bc <HAL_GPIO_Init+0x240>
 800139a:	2308      	movs	r3, #8
 800139c:	e00e      	b.n	80013bc <HAL_GPIO_Init+0x240>
 800139e:	2307      	movs	r3, #7
 80013a0:	e00c      	b.n	80013bc <HAL_GPIO_Init+0x240>
 80013a2:	2306      	movs	r3, #6
 80013a4:	e00a      	b.n	80013bc <HAL_GPIO_Init+0x240>
 80013a6:	2305      	movs	r3, #5
 80013a8:	e008      	b.n	80013bc <HAL_GPIO_Init+0x240>
 80013aa:	2304      	movs	r3, #4
 80013ac:	e006      	b.n	80013bc <HAL_GPIO_Init+0x240>
 80013ae:	2303      	movs	r3, #3
 80013b0:	e004      	b.n	80013bc <HAL_GPIO_Init+0x240>
 80013b2:	2302      	movs	r3, #2
 80013b4:	e002      	b.n	80013bc <HAL_GPIO_Init+0x240>
 80013b6:	2301      	movs	r3, #1
 80013b8:	e000      	b.n	80013bc <HAL_GPIO_Init+0x240>
 80013ba:	2300      	movs	r3, #0
 80013bc:	69fa      	ldr	r2, [r7, #28]
 80013be:	f002 0203 	and.w	r2, r2, #3
 80013c2:	0092      	lsls	r2, r2, #2
 80013c4:	4093      	lsls	r3, r2
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013cc:	4935      	ldr	r1, [pc, #212]	; (80014a4 <HAL_GPIO_Init+0x328>)
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	089b      	lsrs	r3, r3, #2
 80013d2:	3302      	adds	r3, #2
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013da:	4b3d      	ldr	r3, [pc, #244]	; (80014d0 <HAL_GPIO_Init+0x354>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013fe:	4a34      	ldr	r2, [pc, #208]	; (80014d0 <HAL_GPIO_Init+0x354>)
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001404:	4b32      	ldr	r3, [pc, #200]	; (80014d0 <HAL_GPIO_Init+0x354>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001428:	4a29      	ldr	r2, [pc, #164]	; (80014d0 <HAL_GPIO_Init+0x354>)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800142e:	4b28      	ldr	r3, [pc, #160]	; (80014d0 <HAL_GPIO_Init+0x354>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	43db      	mvns	r3, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4013      	ands	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001452:	4a1f      	ldr	r2, [pc, #124]	; (80014d0 <HAL_GPIO_Init+0x354>)
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001458:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <HAL_GPIO_Init+0x354>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800147c:	4a14      	ldr	r2, [pc, #80]	; (80014d0 <HAL_GPIO_Init+0x354>)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3301      	adds	r3, #1
 8001486:	61fb      	str	r3, [r7, #28]
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	2b0f      	cmp	r3, #15
 800148c:	f67f ae84 	bls.w	8001198 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	3724      	adds	r7, #36	; 0x24
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40013800 	.word	0x40013800
 80014a8:	40020000 	.word	0x40020000
 80014ac:	40020400 	.word	0x40020400
 80014b0:	40020800 	.word	0x40020800
 80014b4:	40020c00 	.word	0x40020c00
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40021400 	.word	0x40021400
 80014c0:	40021800 	.word	0x40021800
 80014c4:	40021c00 	.word	0x40021c00
 80014c8:	40022000 	.word	0x40022000
 80014cc:	40022400 	.word	0x40022400
 80014d0:	40013c00 	.word	0x40013c00

080014d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	807b      	strh	r3, [r7, #2]
 80014e0:	4613      	mov	r3, r2
 80014e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014e4:	787b      	ldrb	r3, [r7, #1]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ea:	887a      	ldrh	r2, [r7, #2]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014f0:	e003      	b.n	80014fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014f2:	887b      	ldrh	r3, [r7, #2]
 80014f4:	041a      	lsls	r2, r3, #16
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	619a      	str	r2, [r3, #24]
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
	...

08001508 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e267      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b00      	cmp	r3, #0
 8001524:	d075      	beq.n	8001612 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001526:	4b88      	ldr	r3, [pc, #544]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 030c 	and.w	r3, r3, #12
 800152e:	2b04      	cmp	r3, #4
 8001530:	d00c      	beq.n	800154c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001532:	4b85      	ldr	r3, [pc, #532]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800153a:	2b08      	cmp	r3, #8
 800153c:	d112      	bne.n	8001564 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800153e:	4b82      	ldr	r3, [pc, #520]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001546:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800154a:	d10b      	bne.n	8001564 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800154c:	4b7e      	ldr	r3, [pc, #504]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d05b      	beq.n	8001610 <HAL_RCC_OscConfig+0x108>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d157      	bne.n	8001610 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e242      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800156c:	d106      	bne.n	800157c <HAL_RCC_OscConfig+0x74>
 800156e:	4b76      	ldr	r3, [pc, #472]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a75      	ldr	r2, [pc, #468]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 8001574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	e01d      	b.n	80015b8 <HAL_RCC_OscConfig+0xb0>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001584:	d10c      	bne.n	80015a0 <HAL_RCC_OscConfig+0x98>
 8001586:	4b70      	ldr	r3, [pc, #448]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a6f      	ldr	r2, [pc, #444]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 800158c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	4b6d      	ldr	r3, [pc, #436]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a6c      	ldr	r2, [pc, #432]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 8001598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	e00b      	b.n	80015b8 <HAL_RCC_OscConfig+0xb0>
 80015a0:	4b69      	ldr	r3, [pc, #420]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a68      	ldr	r2, [pc, #416]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 80015a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	4b66      	ldr	r3, [pc, #408]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a65      	ldr	r2, [pc, #404]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 80015b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d013      	beq.n	80015e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c0:	f7ff fcee 	bl	8000fa0 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015c8:	f7ff fcea 	bl	8000fa0 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b64      	cmp	r3, #100	; 0x64
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e207      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015da:	4b5b      	ldr	r3, [pc, #364]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d0f0      	beq.n	80015c8 <HAL_RCC_OscConfig+0xc0>
 80015e6:	e014      	b.n	8001612 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e8:	f7ff fcda 	bl	8000fa0 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015f0:	f7ff fcd6 	bl	8000fa0 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b64      	cmp	r3, #100	; 0x64
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e1f3      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001602:	4b51      	ldr	r3, [pc, #324]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f0      	bne.n	80015f0 <HAL_RCC_OscConfig+0xe8>
 800160e:	e000      	b.n	8001612 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d063      	beq.n	80016e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800161e:	4b4a      	ldr	r3, [pc, #296]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 030c 	and.w	r3, r3, #12
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00b      	beq.n	8001642 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800162a:	4b47      	ldr	r3, [pc, #284]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001632:	2b08      	cmp	r3, #8
 8001634:	d11c      	bne.n	8001670 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001636:	4b44      	ldr	r3, [pc, #272]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d116      	bne.n	8001670 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001642:	4b41      	ldr	r3, [pc, #260]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d005      	beq.n	800165a <HAL_RCC_OscConfig+0x152>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d001      	beq.n	800165a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e1c7      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165a:	4b3b      	ldr	r3, [pc, #236]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	4937      	ldr	r1, [pc, #220]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 800166a:	4313      	orrs	r3, r2
 800166c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800166e:	e03a      	b.n	80016e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d020      	beq.n	80016ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001678:	4b34      	ldr	r3, [pc, #208]	; (800174c <HAL_RCC_OscConfig+0x244>)
 800167a:	2201      	movs	r2, #1
 800167c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167e:	f7ff fc8f 	bl	8000fa0 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001686:	f7ff fc8b 	bl	8000fa0 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e1a8      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001698:	4b2b      	ldr	r3, [pc, #172]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0f0      	beq.n	8001686 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a4:	4b28      	ldr	r3, [pc, #160]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	4925      	ldr	r1, [pc, #148]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	600b      	str	r3, [r1, #0]
 80016b8:	e015      	b.n	80016e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ba:	4b24      	ldr	r3, [pc, #144]	; (800174c <HAL_RCC_OscConfig+0x244>)
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c0:	f7ff fc6e 	bl	8000fa0 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016c8:	f7ff fc6a 	bl	8000fa0 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e187      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016da:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f0      	bne.n	80016c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0308 	and.w	r3, r3, #8
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d036      	beq.n	8001760 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d016      	beq.n	8001728 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <HAL_RCC_OscConfig+0x248>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001700:	f7ff fc4e 	bl	8000fa0 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001708:	f7ff fc4a 	bl	8000fa0 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e167      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 800171c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0f0      	beq.n	8001708 <HAL_RCC_OscConfig+0x200>
 8001726:	e01b      	b.n	8001760 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001728:	4b09      	ldr	r3, [pc, #36]	; (8001750 <HAL_RCC_OscConfig+0x248>)
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800172e:	f7ff fc37 	bl	8000fa0 <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001734:	e00e      	b.n	8001754 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001736:	f7ff fc33 	bl	8000fa0 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d907      	bls.n	8001754 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e150      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
 8001748:	40023800 	.word	0x40023800
 800174c:	42470000 	.word	0x42470000
 8001750:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001754:	4b88      	ldr	r3, [pc, #544]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 8001756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1ea      	bne.n	8001736 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 8097 	beq.w	800189c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800176e:	2300      	movs	r3, #0
 8001770:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001772:	4b81      	ldr	r3, [pc, #516]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10f      	bne.n	800179e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	4b7d      	ldr	r3, [pc, #500]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	4a7c      	ldr	r2, [pc, #496]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 8001788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800178c:	6413      	str	r3, [r2, #64]	; 0x40
 800178e:	4b7a      	ldr	r3, [pc, #488]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800179a:	2301      	movs	r3, #1
 800179c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179e:	4b77      	ldr	r3, [pc, #476]	; (800197c <HAL_RCC_OscConfig+0x474>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d118      	bne.n	80017dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017aa:	4b74      	ldr	r3, [pc, #464]	; (800197c <HAL_RCC_OscConfig+0x474>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a73      	ldr	r2, [pc, #460]	; (800197c <HAL_RCC_OscConfig+0x474>)
 80017b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017b6:	f7ff fbf3 	bl	8000fa0 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017be:	f7ff fbef 	bl	8000fa0 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e10c      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d0:	4b6a      	ldr	r3, [pc, #424]	; (800197c <HAL_RCC_OscConfig+0x474>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0f0      	beq.n	80017be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d106      	bne.n	80017f2 <HAL_RCC_OscConfig+0x2ea>
 80017e4:	4b64      	ldr	r3, [pc, #400]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 80017e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e8:	4a63      	ldr	r2, [pc, #396]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	6713      	str	r3, [r2, #112]	; 0x70
 80017f0:	e01c      	b.n	800182c <HAL_RCC_OscConfig+0x324>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	2b05      	cmp	r3, #5
 80017f8:	d10c      	bne.n	8001814 <HAL_RCC_OscConfig+0x30c>
 80017fa:	4b5f      	ldr	r3, [pc, #380]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 80017fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017fe:	4a5e      	ldr	r2, [pc, #376]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 8001800:	f043 0304 	orr.w	r3, r3, #4
 8001804:	6713      	str	r3, [r2, #112]	; 0x70
 8001806:	4b5c      	ldr	r3, [pc, #368]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 8001808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180a:	4a5b      	ldr	r2, [pc, #364]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6713      	str	r3, [r2, #112]	; 0x70
 8001812:	e00b      	b.n	800182c <HAL_RCC_OscConfig+0x324>
 8001814:	4b58      	ldr	r3, [pc, #352]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 8001816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001818:	4a57      	ldr	r2, [pc, #348]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 800181a:	f023 0301 	bic.w	r3, r3, #1
 800181e:	6713      	str	r3, [r2, #112]	; 0x70
 8001820:	4b55      	ldr	r3, [pc, #340]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 8001822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001824:	4a54      	ldr	r2, [pc, #336]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 8001826:	f023 0304 	bic.w	r3, r3, #4
 800182a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d015      	beq.n	8001860 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001834:	f7ff fbb4 	bl	8000fa0 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800183a:	e00a      	b.n	8001852 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800183c:	f7ff fbb0 	bl	8000fa0 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	f241 3288 	movw	r2, #5000	; 0x1388
 800184a:	4293      	cmp	r3, r2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e0cb      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001852:	4b49      	ldr	r3, [pc, #292]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 8001854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0ee      	beq.n	800183c <HAL_RCC_OscConfig+0x334>
 800185e:	e014      	b.n	800188a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001860:	f7ff fb9e 	bl	8000fa0 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001866:	e00a      	b.n	800187e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001868:	f7ff fb9a 	bl	8000fa0 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	f241 3288 	movw	r2, #5000	; 0x1388
 8001876:	4293      	cmp	r3, r2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e0b5      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800187e:	4b3e      	ldr	r3, [pc, #248]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 8001880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1ee      	bne.n	8001868 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800188a:	7dfb      	ldrb	r3, [r7, #23]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d105      	bne.n	800189c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001890:	4b39      	ldr	r3, [pc, #228]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	4a38      	ldr	r2, [pc, #224]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 8001896:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800189a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 80a1 	beq.w	80019e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018a6:	4b34      	ldr	r3, [pc, #208]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 030c 	and.w	r3, r3, #12
 80018ae:	2b08      	cmp	r3, #8
 80018b0:	d05c      	beq.n	800196c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d141      	bne.n	800193e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ba:	4b31      	ldr	r3, [pc, #196]	; (8001980 <HAL_RCC_OscConfig+0x478>)
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c0:	f7ff fb6e 	bl	8000fa0 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c8:	f7ff fb6a 	bl	8000fa0 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e087      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018da:	4b27      	ldr	r3, [pc, #156]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f0      	bne.n	80018c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69da      	ldr	r2, [r3, #28]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f4:	019b      	lsls	r3, r3, #6
 80018f6:	431a      	orrs	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fc:	085b      	lsrs	r3, r3, #1
 80018fe:	3b01      	subs	r3, #1
 8001900:	041b      	lsls	r3, r3, #16
 8001902:	431a      	orrs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001908:	061b      	lsls	r3, r3, #24
 800190a:	491b      	ldr	r1, [pc, #108]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 800190c:	4313      	orrs	r3, r2
 800190e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001910:	4b1b      	ldr	r3, [pc, #108]	; (8001980 <HAL_RCC_OscConfig+0x478>)
 8001912:	2201      	movs	r2, #1
 8001914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001916:	f7ff fb43 	bl	8000fa0 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800191e:	f7ff fb3f 	bl	8000fa0 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e05c      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001930:	4b11      	ldr	r3, [pc, #68]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0f0      	beq.n	800191e <HAL_RCC_OscConfig+0x416>
 800193c:	e054      	b.n	80019e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <HAL_RCC_OscConfig+0x478>)
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001944:	f7ff fb2c 	bl	8000fa0 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800194c:	f7ff fb28 	bl	8000fa0 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e045      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800195e:	4b06      	ldr	r3, [pc, #24]	; (8001978 <HAL_RCC_OscConfig+0x470>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x444>
 800196a:	e03d      	b.n	80019e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d107      	bne.n	8001984 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e038      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
 8001978:	40023800 	.word	0x40023800
 800197c:	40007000 	.word	0x40007000
 8001980:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001984:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <HAL_RCC_OscConfig+0x4ec>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d028      	beq.n	80019e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800199c:	429a      	cmp	r2, r3
 800199e:	d121      	bne.n	80019e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d11a      	bne.n	80019e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019b4:	4013      	ands	r3, r2
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019bc:	4293      	cmp	r3, r2
 80019be:	d111      	bne.n	80019e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ca:	085b      	lsrs	r3, r3, #1
 80019cc:	3b01      	subs	r3, #1
 80019ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d107      	bne.n	80019e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d001      	beq.n	80019e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e000      	b.n	80019ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40023800 	.word	0x40023800

080019f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e0cc      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a0c:	4b68      	ldr	r3, [pc, #416]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 030f 	and.w	r3, r3, #15
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d90c      	bls.n	8001a34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1a:	4b65      	ldr	r3, [pc, #404]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a22:	4b63      	ldr	r3, [pc, #396]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d001      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e0b8      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d020      	beq.n	8001a82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d005      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a4c:	4b59      	ldr	r3, [pc, #356]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	4a58      	ldr	r2, [pc, #352]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0308 	and.w	r3, r3, #8
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a64:	4b53      	ldr	r3, [pc, #332]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	4a52      	ldr	r2, [pc, #328]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a70:	4b50      	ldr	r3, [pc, #320]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	494d      	ldr	r1, [pc, #308]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d044      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d107      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a96:	4b47      	ldr	r3, [pc, #284]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d119      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e07f      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d003      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	d107      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ab6:	4b3f      	ldr	r3, [pc, #252]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d109      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e06f      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac6:	4b3b      	ldr	r3, [pc, #236]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e067      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ad6:	4b37      	ldr	r3, [pc, #220]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f023 0203 	bic.w	r2, r3, #3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	4934      	ldr	r1, [pc, #208]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ae8:	f7ff fa5a 	bl	8000fa0 <HAL_GetTick>
 8001aec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aee:	e00a      	b.n	8001b06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af0:	f7ff fa56 	bl	8000fa0 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e04f      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b06:	4b2b      	ldr	r3, [pc, #172]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 020c 	and.w	r2, r3, #12
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d1eb      	bne.n	8001af0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b18:	4b25      	ldr	r3, [pc, #148]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 030f 	and.w	r3, r3, #15
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d20c      	bcs.n	8001b40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b26:	4b22      	ldr	r3, [pc, #136]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2e:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d001      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e032      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d008      	beq.n	8001b5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b4c:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	4916      	ldr	r1, [pc, #88]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d009      	beq.n	8001b7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b6a:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	490e      	ldr	r1, [pc, #56]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b7e:	f000 f821 	bl	8001bc4 <HAL_RCC_GetSysClockFreq>
 8001b82:	4602      	mov	r2, r0
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	091b      	lsrs	r3, r3, #4
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	490a      	ldr	r1, [pc, #40]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b90:	5ccb      	ldrb	r3, [r1, r3]
 8001b92:	fa22 f303 	lsr.w	r3, r2, r3
 8001b96:	4a09      	ldr	r2, [pc, #36]	; (8001bbc <HAL_RCC_ClockConfig+0x1c4>)
 8001b98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff f8f0 	bl	8000d84 <HAL_InitTick>

  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40023c00 	.word	0x40023c00
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	08007978 	.word	0x08007978
 8001bbc:	20000000 	.word	0x20000000
 8001bc0:	20000004 	.word	0x20000004

08001bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bc8:	b094      	sub	sp, #80	; 0x50
 8001bca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	647b      	str	r3, [r7, #68]	; 0x44
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bdc:	4b79      	ldr	r3, [pc, #484]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 030c 	and.w	r3, r3, #12
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	d00d      	beq.n	8001c04 <HAL_RCC_GetSysClockFreq+0x40>
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	f200 80e1 	bhi.w	8001db0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d002      	beq.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x34>
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d003      	beq.n	8001bfe <HAL_RCC_GetSysClockFreq+0x3a>
 8001bf6:	e0db      	b.n	8001db0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bf8:	4b73      	ldr	r3, [pc, #460]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bfa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001bfc:	e0db      	b.n	8001db6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bfe:	4b73      	ldr	r3, [pc, #460]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x208>)
 8001c00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c02:	e0d8      	b.n	8001db6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c04:	4b6f      	ldr	r3, [pc, #444]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c0c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c0e:	4b6d      	ldr	r3, [pc, #436]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d063      	beq.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c1a:	4b6a      	ldr	r3, [pc, #424]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	099b      	lsrs	r3, r3, #6
 8001c20:	2200      	movs	r2, #0
 8001c22:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c2c:	633b      	str	r3, [r7, #48]	; 0x30
 8001c2e:	2300      	movs	r3, #0
 8001c30:	637b      	str	r3, [r7, #52]	; 0x34
 8001c32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c36:	4622      	mov	r2, r4
 8001c38:	462b      	mov	r3, r5
 8001c3a:	f04f 0000 	mov.w	r0, #0
 8001c3e:	f04f 0100 	mov.w	r1, #0
 8001c42:	0159      	lsls	r1, r3, #5
 8001c44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c48:	0150      	lsls	r0, r2, #5
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4621      	mov	r1, r4
 8001c50:	1a51      	subs	r1, r2, r1
 8001c52:	6139      	str	r1, [r7, #16]
 8001c54:	4629      	mov	r1, r5
 8001c56:	eb63 0301 	sbc.w	r3, r3, r1
 8001c5a:	617b      	str	r3, [r7, #20]
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	f04f 0300 	mov.w	r3, #0
 8001c64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c68:	4659      	mov	r1, fp
 8001c6a:	018b      	lsls	r3, r1, #6
 8001c6c:	4651      	mov	r1, sl
 8001c6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c72:	4651      	mov	r1, sl
 8001c74:	018a      	lsls	r2, r1, #6
 8001c76:	4651      	mov	r1, sl
 8001c78:	ebb2 0801 	subs.w	r8, r2, r1
 8001c7c:	4659      	mov	r1, fp
 8001c7e:	eb63 0901 	sbc.w	r9, r3, r1
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	f04f 0300 	mov.w	r3, #0
 8001c8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c96:	4690      	mov	r8, r2
 8001c98:	4699      	mov	r9, r3
 8001c9a:	4623      	mov	r3, r4
 8001c9c:	eb18 0303 	adds.w	r3, r8, r3
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	462b      	mov	r3, r5
 8001ca4:	eb49 0303 	adc.w	r3, r9, r3
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	f04f 0300 	mov.w	r3, #0
 8001cb2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cb6:	4629      	mov	r1, r5
 8001cb8:	024b      	lsls	r3, r1, #9
 8001cba:	4621      	mov	r1, r4
 8001cbc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cc0:	4621      	mov	r1, r4
 8001cc2:	024a      	lsls	r2, r1, #9
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cca:	2200      	movs	r2, #0
 8001ccc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001cd4:	f7fe fb2c 	bl	8000330 <__aeabi_uldivmod>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4613      	mov	r3, r2
 8001cde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ce0:	e058      	b.n	8001d94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ce2:	4b38      	ldr	r3, [pc, #224]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	099b      	lsrs	r3, r3, #6
 8001ce8:	2200      	movs	r2, #0
 8001cea:	4618      	mov	r0, r3
 8001cec:	4611      	mov	r1, r2
 8001cee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001cf2:	623b      	str	r3, [r7, #32]
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001cfc:	4642      	mov	r2, r8
 8001cfe:	464b      	mov	r3, r9
 8001d00:	f04f 0000 	mov.w	r0, #0
 8001d04:	f04f 0100 	mov.w	r1, #0
 8001d08:	0159      	lsls	r1, r3, #5
 8001d0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d0e:	0150      	lsls	r0, r2, #5
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4641      	mov	r1, r8
 8001d16:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d1a:	4649      	mov	r1, r9
 8001d1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	f04f 0300 	mov.w	r3, #0
 8001d28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d34:	ebb2 040a 	subs.w	r4, r2, sl
 8001d38:	eb63 050b 	sbc.w	r5, r3, fp
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	f04f 0300 	mov.w	r3, #0
 8001d44:	00eb      	lsls	r3, r5, #3
 8001d46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d4a:	00e2      	lsls	r2, r4, #3
 8001d4c:	4614      	mov	r4, r2
 8001d4e:	461d      	mov	r5, r3
 8001d50:	4643      	mov	r3, r8
 8001d52:	18e3      	adds	r3, r4, r3
 8001d54:	603b      	str	r3, [r7, #0]
 8001d56:	464b      	mov	r3, r9
 8001d58:	eb45 0303 	adc.w	r3, r5, r3
 8001d5c:	607b      	str	r3, [r7, #4]
 8001d5e:	f04f 0200 	mov.w	r2, #0
 8001d62:	f04f 0300 	mov.w	r3, #0
 8001d66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d6a:	4629      	mov	r1, r5
 8001d6c:	028b      	lsls	r3, r1, #10
 8001d6e:	4621      	mov	r1, r4
 8001d70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d74:	4621      	mov	r1, r4
 8001d76:	028a      	lsls	r2, r1, #10
 8001d78:	4610      	mov	r0, r2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d7e:	2200      	movs	r2, #0
 8001d80:	61bb      	str	r3, [r7, #24]
 8001d82:	61fa      	str	r2, [r7, #28]
 8001d84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d88:	f7fe fad2 	bl	8000330 <__aeabi_uldivmod>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4613      	mov	r3, r2
 8001d92:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	0c1b      	lsrs	r3, r3, #16
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	3301      	adds	r3, #1
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001da4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dae:	e002      	b.n	8001db6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001db0:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001db2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001db4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001db6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3750      	adds	r7, #80	; 0x50
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	00f42400 	.word	0x00f42400
 8001dcc:	007a1200 	.word	0x007a1200

08001dd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dd4:	4b03      	ldr	r3, [pc, #12]	; (8001de4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	20000000 	.word	0x20000000

08001de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001dec:	f7ff fff0 	bl	8001dd0 <HAL_RCC_GetHCLKFreq>
 8001df0:	4602      	mov	r2, r0
 8001df2:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	0a9b      	lsrs	r3, r3, #10
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	4903      	ldr	r1, [pc, #12]	; (8001e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dfe:	5ccb      	ldrb	r3, [r1, r3]
 8001e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	08007988 	.word	0x08007988

08001e10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	220f      	movs	r2, #15
 8001e1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e20:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <HAL_RCC_GetClockConfig+0x5c>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 0203 	and.w	r2, r3, #3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e2c:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <HAL_RCC_GetClockConfig+0x5c>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e38:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <HAL_RCC_GetClockConfig+0x5c>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e44:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <HAL_RCC_GetClockConfig+0x5c>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	08db      	lsrs	r3, r3, #3
 8001e4a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e52:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <HAL_RCC_GetClockConfig+0x60>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 020f 	and.w	r2, r3, #15
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	601a      	str	r2, [r3, #0]
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40023c00 	.word	0x40023c00

08001e74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e041      	b.n	8001f0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d106      	bne.n	8001ea0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f839 	bl	8001f12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3304      	adds	r3, #4
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4610      	mov	r0, r2
 8001eb4:	f000 f9d8 	bl	8002268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
	...

08001f28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d001      	beq.n	8001f40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e04e      	b.n	8001fde <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2202      	movs	r2, #2
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0201 	orr.w	r2, r2, #1
 8001f56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a23      	ldr	r2, [pc, #140]	; (8001fec <HAL_TIM_Base_Start_IT+0xc4>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d022      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f6a:	d01d      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a1f      	ldr	r2, [pc, #124]	; (8001ff0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d018      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a1e      	ldr	r2, [pc, #120]	; (8001ff4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d013      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a1c      	ldr	r2, [pc, #112]	; (8001ff8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d00e      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a1b      	ldr	r2, [pc, #108]	; (8001ffc <HAL_TIM_Base_Start_IT+0xd4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d009      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a19      	ldr	r2, [pc, #100]	; (8002000 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d004      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a18      	ldr	r2, [pc, #96]	; (8002004 <HAL_TIM_Base_Start_IT+0xdc>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d111      	bne.n	8001fcc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2b06      	cmp	r3, #6
 8001fb8:	d010      	beq.n	8001fdc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f042 0201 	orr.w	r2, r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fca:	e007      	b.n	8001fdc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0201 	orr.w	r2, r2, #1
 8001fda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40010000 	.word	0x40010000
 8001ff0:	40000400 	.word	0x40000400
 8001ff4:	40000800 	.word	0x40000800
 8001ff8:	40000c00 	.word	0x40000c00
 8001ffc:	40010400 	.word	0x40010400
 8002000:	40014000 	.word	0x40014000
 8002004:	40001800 	.word	0x40001800

08002008 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b02      	cmp	r3, #2
 800201c:	d122      	bne.n	8002064 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b02      	cmp	r3, #2
 800202a:	d11b      	bne.n	8002064 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 0202 	mvn.w	r2, #2
 8002034:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f8ee 	bl	800222c <HAL_TIM_IC_CaptureCallback>
 8002050:	e005      	b.n	800205e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f8e0 	bl	8002218 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f8f1 	bl	8002240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	f003 0304 	and.w	r3, r3, #4
 800206e:	2b04      	cmp	r3, #4
 8002070:	d122      	bne.n	80020b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b04      	cmp	r3, #4
 800207e:	d11b      	bne.n	80020b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f06f 0204 	mvn.w	r2, #4
 8002088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2202      	movs	r2, #2
 800208e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f8c4 	bl	800222c <HAL_TIM_IC_CaptureCallback>
 80020a4:	e005      	b.n	80020b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f8b6 	bl	8002218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f8c7 	bl	8002240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	d122      	bne.n	800210c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d11b      	bne.n	800210c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f06f 0208 	mvn.w	r2, #8
 80020dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2204      	movs	r2, #4
 80020e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f89a 	bl	800222c <HAL_TIM_IC_CaptureCallback>
 80020f8:	e005      	b.n	8002106 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f88c 	bl	8002218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 f89d 	bl	8002240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	f003 0310 	and.w	r3, r3, #16
 8002116:	2b10      	cmp	r3, #16
 8002118:	d122      	bne.n	8002160 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f003 0310 	and.w	r3, r3, #16
 8002124:	2b10      	cmp	r3, #16
 8002126:	d11b      	bne.n	8002160 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f06f 0210 	mvn.w	r2, #16
 8002130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2208      	movs	r2, #8
 8002136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f870 	bl	800222c <HAL_TIM_IC_CaptureCallback>
 800214c:	e005      	b.n	800215a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f862 	bl	8002218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 f873 	bl	8002240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b01      	cmp	r3, #1
 800216c:	d10e      	bne.n	800218c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b01      	cmp	r3, #1
 800217a:	d107      	bne.n	800218c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f06f 0201 	mvn.w	r2, #1
 8002184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7fe fdbc 	bl	8000d04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002196:	2b80      	cmp	r3, #128	; 0x80
 8002198:	d10e      	bne.n	80021b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a4:	2b80      	cmp	r3, #128	; 0x80
 80021a6:	d107      	bne.n	80021b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f902 	bl	80023bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c2:	2b40      	cmp	r3, #64	; 0x40
 80021c4:	d10e      	bne.n	80021e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d0:	2b40      	cmp	r3, #64	; 0x40
 80021d2:	d107      	bne.n	80021e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f838 	bl	8002254 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	f003 0320 	and.w	r3, r3, #32
 80021ee:	2b20      	cmp	r3, #32
 80021f0:	d10e      	bne.n	8002210 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f003 0320 	and.w	r3, r3, #32
 80021fc:	2b20      	cmp	r3, #32
 80021fe:	d107      	bne.n	8002210 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f06f 0220 	mvn.w	r2, #32
 8002208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f8cc 	bl	80023a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002210:	bf00      	nop
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a40      	ldr	r2, [pc, #256]	; (800237c <TIM_Base_SetConfig+0x114>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d013      	beq.n	80022a8 <TIM_Base_SetConfig+0x40>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002286:	d00f      	beq.n	80022a8 <TIM_Base_SetConfig+0x40>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a3d      	ldr	r2, [pc, #244]	; (8002380 <TIM_Base_SetConfig+0x118>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d00b      	beq.n	80022a8 <TIM_Base_SetConfig+0x40>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a3c      	ldr	r2, [pc, #240]	; (8002384 <TIM_Base_SetConfig+0x11c>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d007      	beq.n	80022a8 <TIM_Base_SetConfig+0x40>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a3b      	ldr	r2, [pc, #236]	; (8002388 <TIM_Base_SetConfig+0x120>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d003      	beq.n	80022a8 <TIM_Base_SetConfig+0x40>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a3a      	ldr	r2, [pc, #232]	; (800238c <TIM_Base_SetConfig+0x124>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d108      	bne.n	80022ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a2f      	ldr	r2, [pc, #188]	; (800237c <TIM_Base_SetConfig+0x114>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d02b      	beq.n	800231a <TIM_Base_SetConfig+0xb2>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c8:	d027      	beq.n	800231a <TIM_Base_SetConfig+0xb2>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a2c      	ldr	r2, [pc, #176]	; (8002380 <TIM_Base_SetConfig+0x118>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d023      	beq.n	800231a <TIM_Base_SetConfig+0xb2>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a2b      	ldr	r2, [pc, #172]	; (8002384 <TIM_Base_SetConfig+0x11c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d01f      	beq.n	800231a <TIM_Base_SetConfig+0xb2>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a2a      	ldr	r2, [pc, #168]	; (8002388 <TIM_Base_SetConfig+0x120>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d01b      	beq.n	800231a <TIM_Base_SetConfig+0xb2>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a29      	ldr	r2, [pc, #164]	; (800238c <TIM_Base_SetConfig+0x124>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d017      	beq.n	800231a <TIM_Base_SetConfig+0xb2>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a28      	ldr	r2, [pc, #160]	; (8002390 <TIM_Base_SetConfig+0x128>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d013      	beq.n	800231a <TIM_Base_SetConfig+0xb2>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a27      	ldr	r2, [pc, #156]	; (8002394 <TIM_Base_SetConfig+0x12c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d00f      	beq.n	800231a <TIM_Base_SetConfig+0xb2>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a26      	ldr	r2, [pc, #152]	; (8002398 <TIM_Base_SetConfig+0x130>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d00b      	beq.n	800231a <TIM_Base_SetConfig+0xb2>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a25      	ldr	r2, [pc, #148]	; (800239c <TIM_Base_SetConfig+0x134>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d007      	beq.n	800231a <TIM_Base_SetConfig+0xb2>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a24      	ldr	r2, [pc, #144]	; (80023a0 <TIM_Base_SetConfig+0x138>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d003      	beq.n	800231a <TIM_Base_SetConfig+0xb2>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a23      	ldr	r2, [pc, #140]	; (80023a4 <TIM_Base_SetConfig+0x13c>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d108      	bne.n	800232c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002320:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	4313      	orrs	r3, r2
 800232a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	4313      	orrs	r3, r2
 8002338:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a0a      	ldr	r2, [pc, #40]	; (800237c <TIM_Base_SetConfig+0x114>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d003      	beq.n	8002360 <TIM_Base_SetConfig+0xf8>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a0c      	ldr	r2, [pc, #48]	; (800238c <TIM_Base_SetConfig+0x124>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d103      	bne.n	8002368 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	691a      	ldr	r2, [r3, #16]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	615a      	str	r2, [r3, #20]
}
 800236e:	bf00      	nop
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	40010000 	.word	0x40010000
 8002380:	40000400 	.word	0x40000400
 8002384:	40000800 	.word	0x40000800
 8002388:	40000c00 	.word	0x40000c00
 800238c:	40010400 	.word	0x40010400
 8002390:	40014000 	.word	0x40014000
 8002394:	40014400 	.word	0x40014400
 8002398:	40014800 	.word	0x40014800
 800239c:	40001800 	.word	0x40001800
 80023a0:	40001c00 	.word	0x40001c00
 80023a4:	40002000 	.word	0x40002000

080023a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f103 0208 	add.w	r2, r3, #8
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f04f 32ff 	mov.w	r2, #4294967295
 80023e8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f103 0208 	add.w	r2, r3, #8
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f103 0208 	add.w	r2, r3, #8
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800242a:	b480      	push	{r7}
 800242c:	b085      	sub	sp, #20
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
 8002432:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	1c5a      	adds	r2, r3, #1
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	601a      	str	r2, [r3, #0]
}
 8002466:	bf00      	nop
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002472:	b480      	push	{r7}
 8002474:	b085      	sub	sp, #20
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
 800247a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002488:	d103      	bne.n	8002492 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	e00c      	b.n	80024ac <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3308      	adds	r3, #8
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	e002      	b.n	80024a0 <vListInsert+0x2e>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d2f6      	bcs.n	800249a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	1c5a      	adds	r2, r3, #1
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	601a      	str	r2, [r3, #0]
}
 80024d8:	bf00      	nop
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6892      	ldr	r2, [r2, #8]
 80024fa:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	6852      	ldr	r2, [r2, #4]
 8002504:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	429a      	cmp	r2, r3
 800250e:	d103      	bne.n	8002518 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	1e5a      	subs	r2, r3, #1
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
}
 800252c:	4618      	mov	r0, r3
 800252e:	3714      	adds	r7, #20
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10a      	bne.n	8002562 <xQueueGenericReset+0x2a>
        __asm volatile
 800254c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002550:	f383 8811 	msr	BASEPRI, r3
 8002554:	f3bf 8f6f 	isb	sy
 8002558:	f3bf 8f4f 	dsb	sy
 800255c:	60bb      	str	r3, [r7, #8]
    }
 800255e:	bf00      	nop
 8002560:	e7fe      	b.n	8002560 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002562:	f002 f857 	bl	8004614 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256e:	68f9      	ldr	r1, [r7, #12]
 8002570:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002572:	fb01 f303 	mul.w	r3, r1, r3
 8002576:	441a      	add	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002592:	3b01      	subs	r3, #1
 8002594:	68f9      	ldr	r1, [r7, #12]
 8002596:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002598:	fb01 f303 	mul.w	r3, r1, r3
 800259c:	441a      	add	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	22ff      	movs	r2, #255	; 0xff
 80025a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	22ff      	movs	r2, #255	; 0xff
 80025ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d109      	bne.n	80025cc <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00f      	beq.n	80025e0 <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	3310      	adds	r3, #16
 80025c4:	4618      	mov	r0, r3
 80025c6:	f001 f8b3 	bl	8003730 <xTaskRemoveFromEventList>
 80025ca:	e009      	b.n	80025e0 <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	3310      	adds	r3, #16
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff fefd 	bl	80023d0 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	3324      	adds	r3, #36	; 0x24
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff fef8 	bl	80023d0 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80025e0:	f002 f848 	bl	8004674 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80025e4:	2301      	movs	r3, #1
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b08c      	sub	sp, #48	; 0x30
 80025f2:	af02      	add	r7, sp, #8
 80025f4:	60f8      	str	r0, [r7, #12]
 80025f6:	60b9      	str	r1, [r7, #8]
 80025f8:	4613      	mov	r3, r2
 80025fa:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10a      	bne.n	8002618 <xQueueGenericCreate+0x2a>
        __asm volatile
 8002602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002606:	f383 8811 	msr	BASEPRI, r3
 800260a:	f3bf 8f6f 	isb	sy
 800260e:	f3bf 8f4f 	dsb	sy
 8002612:	61bb      	str	r3, [r7, #24]
    }
 8002614:	bf00      	nop
 8002616:	e7fe      	b.n	8002616 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	fb02 f303 	mul.w	r3, r2, r3
 8002620:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d006      	beq.n	8002636 <xQueueGenericCreate+0x48>
 8002628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	429a      	cmp	r2, r3
 8002634:	d101      	bne.n	800263a <xQueueGenericCreate+0x4c>
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <xQueueGenericCreate+0x4e>
 800263a:	2300      	movs	r3, #0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10a      	bne.n	8002656 <xQueueGenericCreate+0x68>
        __asm volatile
 8002640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002644:	f383 8811 	msr	BASEPRI, r3
 8002648:	f3bf 8f6f 	isb	sy
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	617b      	str	r3, [r7, #20]
    }
 8002652:	bf00      	nop
 8002654:	e7fe      	b.n	8002654 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800265c:	d90a      	bls.n	8002674 <xQueueGenericCreate+0x86>
        __asm volatile
 800265e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002662:	f383 8811 	msr	BASEPRI, r3
 8002666:	f3bf 8f6f 	isb	sy
 800266a:	f3bf 8f4f 	dsb	sy
 800266e:	613b      	str	r3, [r7, #16]
    }
 8002670:	bf00      	nop
 8002672:	e7fe      	b.n	8002672 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	3350      	adds	r3, #80	; 0x50
 8002678:	4618      	mov	r0, r3
 800267a:	f002 f8f7 	bl	800486c <pvPortMalloc>
 800267e:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00d      	beq.n	80026a2 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002686:	6a3b      	ldr	r3, [r7, #32]
 8002688:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3350      	adds	r3, #80	; 0x50
 800268e:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002690:	79fa      	ldrb	r2, [r7, #7]
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	4613      	mov	r3, r2
 8002698:	69fa      	ldr	r2, [r7, #28]
 800269a:	68b9      	ldr	r1, [r7, #8]
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 f805 	bl	80026ac <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80026a2:	6a3b      	ldr	r3, [r7, #32]
    }
 80026a4:	4618      	mov	r0, r3
 80026a6:	3728      	adds	r7, #40	; 0x28
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
 80026b8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d103      	bne.n	80026c8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	e002      	b.n	80026ce <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80026da:	2101      	movs	r1, #1
 80026dc:	69b8      	ldr	r0, [r7, #24]
 80026de:	f7ff ff2b 	bl	8002538 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	78fa      	ldrb	r2, [r7, #3]
 80026e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80026ea:	78fb      	ldrb	r3, [r7, #3]
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	68f9      	ldr	r1, [r7, #12]
 80026f0:	2073      	movs	r0, #115	; 0x73
 80026f2:	f003 fbb7 	bl	8005e64 <SEGGER_SYSVIEW_RecordU32x3>
}
 80026f6:	bf00      	nop
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b090      	sub	sp, #64	; 0x40
 8002704:	af02      	add	r7, sp, #8
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
 800270c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800270e:	2300      	movs	r3, #0
 8002710:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10a      	bne.n	8002732 <xQueueGenericSend+0x32>
        __asm volatile
 800271c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002720:	f383 8811 	msr	BASEPRI, r3
 8002724:	f3bf 8f6f 	isb	sy
 8002728:	f3bf 8f4f 	dsb	sy
 800272c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800272e:	bf00      	nop
 8002730:	e7fe      	b.n	8002730 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d103      	bne.n	8002740 <xQueueGenericSend+0x40>
 8002738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <xQueueGenericSend+0x44>
 8002740:	2301      	movs	r3, #1
 8002742:	e000      	b.n	8002746 <xQueueGenericSend+0x46>
 8002744:	2300      	movs	r3, #0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10a      	bne.n	8002760 <xQueueGenericSend+0x60>
        __asm volatile
 800274a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800274e:	f383 8811 	msr	BASEPRI, r3
 8002752:	f3bf 8f6f 	isb	sy
 8002756:	f3bf 8f4f 	dsb	sy
 800275a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800275c:	bf00      	nop
 800275e:	e7fe      	b.n	800275e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d103      	bne.n	800276e <xQueueGenericSend+0x6e>
 8002766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276a:	2b01      	cmp	r3, #1
 800276c:	d101      	bne.n	8002772 <xQueueGenericSend+0x72>
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <xQueueGenericSend+0x74>
 8002772:	2300      	movs	r3, #0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10a      	bne.n	800278e <xQueueGenericSend+0x8e>
        __asm volatile
 8002778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277c:	f383 8811 	msr	BASEPRI, r3
 8002780:	f3bf 8f6f 	isb	sy
 8002784:	f3bf 8f4f 	dsb	sy
 8002788:	623b      	str	r3, [r7, #32]
    }
 800278a:	bf00      	nop
 800278c:	e7fe      	b.n	800278c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800278e:	f001 f969 	bl	8003a64 <xTaskGetSchedulerState>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d102      	bne.n	800279e <xQueueGenericSend+0x9e>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <xQueueGenericSend+0xa2>
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <xQueueGenericSend+0xa4>
 80027a2:	2300      	movs	r3, #0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10a      	bne.n	80027be <xQueueGenericSend+0xbe>
        __asm volatile
 80027a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ac:	f383 8811 	msr	BASEPRI, r3
 80027b0:	f3bf 8f6f 	isb	sy
 80027b4:	f3bf 8f4f 	dsb	sy
 80027b8:	61fb      	str	r3, [r7, #28]
    }
 80027ba:	bf00      	nop
 80027bc:	e7fe      	b.n	80027bc <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80027be:	f001 ff29 	bl	8004614 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d302      	bcc.n	80027d4 <xQueueGenericSend+0xd4>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d11f      	bne.n	8002814 <xQueueGenericSend+0x114>
            {
                traceQUEUE_SEND( pxQueue );
 80027d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d6:	4618      	mov	r0, r3
 80027d8:	f004 f8d0 	bl	800697c <SEGGER_SYSVIEW_ShrinkId>
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	460b      	mov	r3, r1
 80027e6:	4601      	mov	r1, r0
 80027e8:	205a      	movs	r0, #90	; 0x5a
 80027ea:	f003 fbb1 	bl	8005f50 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	68b9      	ldr	r1, [r7, #8]
 80027f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027f4:	f000 fa56 	bl	8002ca4 <prvCopyDataToQueue>
 80027f8:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d004      	beq.n	800280c <xQueueGenericSend+0x10c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002804:	3324      	adds	r3, #36	; 0x24
 8002806:	4618      	mov	r0, r3
 8002808:	f000 ff92 	bl	8003730 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800280c:	f001 ff32 	bl	8004674 <vPortExitCritical>
                return pdPASS;
 8002810:	2301      	movs	r3, #1
 8002812:	e07d      	b.n	8002910 <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d110      	bne.n	800283c <xQueueGenericSend+0x13c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800281a:	f001 ff2b 	bl	8004674 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 800281e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002820:	4618      	mov	r0, r3
 8002822:	f004 f8ab 	bl	800697c <SEGGER_SYSVIEW_ShrinkId>
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	460b      	mov	r3, r1
 8002830:	4601      	mov	r1, r0
 8002832:	205a      	movs	r0, #90	; 0x5a
 8002834:	f003 fb8c 	bl	8005f50 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002838:	2300      	movs	r3, #0
 800283a:	e069      	b.n	8002910 <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 800283c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800283e:	2b00      	cmp	r3, #0
 8002840:	d106      	bne.n	8002850 <xQueueGenericSend+0x150>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002842:	f107 0314 	add.w	r3, r7, #20
 8002846:	4618      	mov	r0, r3
 8002848:	f000 ffd8 	bl	80037fc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800284c:	2301      	movs	r3, #1
 800284e:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002850:	f001 ff10 	bl	8004674 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002854:	f000 fd54 	bl	8003300 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002858:	f001 fedc 	bl	8004614 <vPortEnterCritical>
 800285c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002862:	b25b      	sxtb	r3, r3
 8002864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002868:	d103      	bne.n	8002872 <xQueueGenericSend+0x172>
 800286a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002874:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002878:	b25b      	sxtb	r3, r3
 800287a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800287e:	d103      	bne.n	8002888 <xQueueGenericSend+0x188>
 8002880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002888:	f001 fef4 	bl	8004674 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800288c:	1d3a      	adds	r2, r7, #4
 800288e:	f107 0314 	add.w	r3, r7, #20
 8002892:	4611      	mov	r1, r2
 8002894:	4618      	mov	r0, r3
 8002896:	f000 ffc7 	bl	8003828 <xTaskCheckForTimeOut>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d124      	bne.n	80028ea <xQueueGenericSend+0x1ea>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80028a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028a2:	f000 faf7 	bl	8002e94 <prvIsQueueFull>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d018      	beq.n	80028de <xQueueGenericSend+0x1de>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80028ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ae:	3310      	adds	r3, #16
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	4611      	mov	r1, r2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 fee9 	bl	800368c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80028ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028bc:	f000 fa82 	bl	8002dc4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80028c0:	f000 fd2c 	bl	800331c <xTaskResumeAll>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f47f af79 	bne.w	80027be <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80028cc:	4b12      	ldr	r3, [pc, #72]	; (8002918 <xQueueGenericSend+0x218>)
 80028ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	f3bf 8f4f 	dsb	sy
 80028d8:	f3bf 8f6f 	isb	sy
 80028dc:	e76f      	b.n	80027be <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80028de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028e0:	f000 fa70 	bl	8002dc4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80028e4:	f000 fd1a 	bl	800331c <xTaskResumeAll>
 80028e8:	e769      	b.n	80027be <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80028ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028ec:	f000 fa6a 	bl	8002dc4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80028f0:	f000 fd14 	bl	800331c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80028f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f6:	4618      	mov	r0, r3
 80028f8:	f004 f840 	bl	800697c <SEGGER_SYSVIEW_ShrinkId>
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	460b      	mov	r3, r1
 8002906:	4601      	mov	r1, r0
 8002908:	205a      	movs	r0, #90	; 0x5a
 800290a:	f003 fb21 	bl	8005f50 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 800290e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002910:	4618      	mov	r0, r3
 8002912:	3738      	adds	r7, #56	; 0x38
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	e000ed04 	.word	0xe000ed04

0800291c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b090      	sub	sp, #64	; 0x40
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
 8002928:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800292e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10a      	bne.n	800294a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002938:	f383 8811 	msr	BASEPRI, r3
 800293c:	f3bf 8f6f 	isb	sy
 8002940:	f3bf 8f4f 	dsb	sy
 8002944:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002946:	bf00      	nop
 8002948:	e7fe      	b.n	8002948 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d103      	bne.n	8002958 <xQueueGenericSendFromISR+0x3c>
 8002950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <xQueueGenericSendFromISR+0x40>
 8002958:	2301      	movs	r3, #1
 800295a:	e000      	b.n	800295e <xQueueGenericSendFromISR+0x42>
 800295c:	2300      	movs	r3, #0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10a      	bne.n	8002978 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002966:	f383 8811 	msr	BASEPRI, r3
 800296a:	f3bf 8f6f 	isb	sy
 800296e:	f3bf 8f4f 	dsb	sy
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002974:	bf00      	nop
 8002976:	e7fe      	b.n	8002976 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	2b02      	cmp	r3, #2
 800297c:	d103      	bne.n	8002986 <xQueueGenericSendFromISR+0x6a>
 800297e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002982:	2b01      	cmp	r3, #1
 8002984:	d101      	bne.n	800298a <xQueueGenericSendFromISR+0x6e>
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <xQueueGenericSendFromISR+0x70>
 800298a:	2300      	movs	r3, #0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10a      	bne.n	80029a6 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002994:	f383 8811 	msr	BASEPRI, r3
 8002998:	f3bf 8f6f 	isb	sy
 800299c:	f3bf 8f4f 	dsb	sy
 80029a0:	623b      	str	r3, [r7, #32]
    }
 80029a2:	bf00      	nop
 80029a4:	e7fe      	b.n	80029a4 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80029a6:	f001 ff21 	bl	80047ec <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80029aa:	f3ef 8211 	mrs	r2, BASEPRI
 80029ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b2:	f383 8811 	msr	BASEPRI, r3
 80029b6:	f3bf 8f6f 	isb	sy
 80029ba:	f3bf 8f4f 	dsb	sy
 80029be:	61fa      	str	r2, [r7, #28]
 80029c0:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80029c2:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80029c4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80029c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d302      	bcc.n	80029d8 <xQueueGenericSendFromISR+0xbc>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d148      	bne.n	8002a6a <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80029d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e6:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80029e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ea:	4618      	mov	r0, r3
 80029ec:	f003 ffc6 	bl	800697c <SEGGER_SYSVIEW_ShrinkId>
 80029f0:	4601      	mov	r1, r0
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	461a      	mov	r2, r3
 80029f6:	2060      	movs	r0, #96	; 0x60
 80029f8:	f003 f9da 	bl	8005db0 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	68b9      	ldr	r1, [r7, #8]
 8002a00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a02:	f000 f94f 	bl	8002ca4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002a06:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0e:	d112      	bne.n	8002a36 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d025      	beq.n	8002a64 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1a:	3324      	adds	r3, #36	; 0x24
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 fe87 	bl	8003730 <xTaskRemoveFromEventList>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d01d      	beq.n	8002a64 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d01a      	beq.n	8002a64 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	e016      	b.n	8002a64 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002a36:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002a3a:	2b7f      	cmp	r3, #127	; 0x7f
 8002a3c:	d10a      	bne.n	8002a54 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a42:	f383 8811 	msr	BASEPRI, r3
 8002a46:	f3bf 8f6f 	isb	sy
 8002a4a:	f3bf 8f4f 	dsb	sy
 8002a4e:	617b      	str	r3, [r7, #20]
    }
 8002a50:	bf00      	nop
 8002a52:	e7fe      	b.n	8002a52 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002a54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a58:	3301      	adds	r3, #1
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	b25a      	sxtb	r2, r3
 8002a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002a64:	2301      	movs	r3, #1
 8002a66:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002a68:	e00b      	b.n	8002a82 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f003 ff85 	bl	800697c <SEGGER_SYSVIEW_ShrinkId>
 8002a72:	4601      	mov	r1, r0
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	461a      	mov	r2, r3
 8002a78:	2060      	movs	r0, #96	; 0x60
 8002a7a:	f003 f999 	bl	8005db0 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a84:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002a8c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3740      	adds	r7, #64	; 0x40
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002a98:	b590      	push	{r4, r7, lr}
 8002a9a:	b08f      	sub	sp, #60	; 0x3c
 8002a9c:	af02      	add	r7, sp, #8
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10a      	bne.n	8002ac8 <xQueueReceive+0x30>
        __asm volatile
 8002ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab6:	f383 8811 	msr	BASEPRI, r3
 8002aba:	f3bf 8f6f 	isb	sy
 8002abe:	f3bf 8f4f 	dsb	sy
 8002ac2:	623b      	str	r3, [r7, #32]
    }
 8002ac4:	bf00      	nop
 8002ac6:	e7fe      	b.n	8002ac6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d103      	bne.n	8002ad6 <xQueueReceive+0x3e>
 8002ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <xQueueReceive+0x42>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <xQueueReceive+0x44>
 8002ada:	2300      	movs	r3, #0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10a      	bne.n	8002af6 <xQueueReceive+0x5e>
        __asm volatile
 8002ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae4:	f383 8811 	msr	BASEPRI, r3
 8002ae8:	f3bf 8f6f 	isb	sy
 8002aec:	f3bf 8f4f 	dsb	sy
 8002af0:	61fb      	str	r3, [r7, #28]
    }
 8002af2:	bf00      	nop
 8002af4:	e7fe      	b.n	8002af4 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002af6:	f000 ffb5 	bl	8003a64 <xTaskGetSchedulerState>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d102      	bne.n	8002b06 <xQueueReceive+0x6e>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <xQueueReceive+0x72>
 8002b06:	2301      	movs	r3, #1
 8002b08:	e000      	b.n	8002b0c <xQueueReceive+0x74>
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d10a      	bne.n	8002b26 <xQueueReceive+0x8e>
        __asm volatile
 8002b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b14:	f383 8811 	msr	BASEPRI, r3
 8002b18:	f3bf 8f6f 	isb	sy
 8002b1c:	f3bf 8f4f 	dsb	sy
 8002b20:	61bb      	str	r3, [r7, #24]
    }
 8002b22:	bf00      	nop
 8002b24:	e7fe      	b.n	8002b24 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002b26:	f001 fd75 	bl	8004614 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d024      	beq.n	8002b80 <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b36:	68b9      	ldr	r1, [r7, #8]
 8002b38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b3a:	f000 f91d 	bl	8002d78 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b40:	4618      	mov	r0, r3
 8002b42:	f003 ff1b 	bl	800697c <SEGGER_SYSVIEW_ShrinkId>
 8002b46:	4604      	mov	r4, r0
 8002b48:	2000      	movs	r0, #0
 8002b4a:	f003 ff17 	bl	800697c <SEGGER_SYSVIEW_ShrinkId>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2101      	movs	r1, #1
 8002b54:	9100      	str	r1, [sp, #0]
 8002b56:	4621      	mov	r1, r4
 8002b58:	205c      	movs	r0, #92	; 0x5c
 8002b5a:	f003 f9f9 	bl	8005f50 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	1e5a      	subs	r2, r3, #1
 8002b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b64:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d004      	beq.n	8002b78 <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b70:	3310      	adds	r3, #16
 8002b72:	4618      	mov	r0, r3
 8002b74:	f000 fddc 	bl	8003730 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002b78:	f001 fd7c 	bl	8004674 <vPortExitCritical>
                return pdPASS;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e08a      	b.n	8002c96 <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d113      	bne.n	8002bae <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002b86:	f001 fd75 	bl	8004674 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f003 fef5 	bl	800697c <SEGGER_SYSVIEW_ShrinkId>
 8002b92:	4604      	mov	r4, r0
 8002b94:	2000      	movs	r0, #0
 8002b96:	f003 fef1 	bl	800697c <SEGGER_SYSVIEW_ShrinkId>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	9100      	str	r1, [sp, #0]
 8002ba2:	4621      	mov	r1, r4
 8002ba4:	205c      	movs	r0, #92	; 0x5c
 8002ba6:	f003 f9d3 	bl	8005f50 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002baa:	2300      	movs	r3, #0
 8002bac:	e073      	b.n	8002c96 <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d106      	bne.n	8002bc2 <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002bb4:	f107 0310 	add.w	r3, r7, #16
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 fe1f 	bl	80037fc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002bc2:	f001 fd57 	bl	8004674 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002bc6:	f000 fb9b 	bl	8003300 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002bca:	f001 fd23 	bl	8004614 <vPortEnterCritical>
 8002bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bd4:	b25b      	sxtb	r3, r3
 8002bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bda:	d103      	bne.n	8002be4 <xQueueReceive+0x14c>
 8002bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bea:	b25b      	sxtb	r3, r3
 8002bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf0:	d103      	bne.n	8002bfa <xQueueReceive+0x162>
 8002bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bfa:	f001 fd3b 	bl	8004674 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002bfe:	1d3a      	adds	r2, r7, #4
 8002c00:	f107 0310 	add.w	r3, r7, #16
 8002c04:	4611      	mov	r1, r2
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 fe0e 	bl	8003828 <xTaskCheckForTimeOut>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d124      	bne.n	8002c5c <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c14:	f000 f928 	bl	8002e68 <prvIsQueueEmpty>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d018      	beq.n	8002c50 <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c20:	3324      	adds	r3, #36	; 0x24
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	4611      	mov	r1, r2
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 fd30 	bl	800368c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002c2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c2e:	f000 f8c9 	bl	8002dc4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002c32:	f000 fb73 	bl	800331c <xTaskResumeAll>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f47f af74 	bne.w	8002b26 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002c3e:	4b18      	ldr	r3, [pc, #96]	; (8002ca0 <xQueueReceive+0x208>)
 8002c40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	f3bf 8f4f 	dsb	sy
 8002c4a:	f3bf 8f6f 	isb	sy
 8002c4e:	e76a      	b.n	8002b26 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002c50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c52:	f000 f8b7 	bl	8002dc4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002c56:	f000 fb61 	bl	800331c <xTaskResumeAll>
 8002c5a:	e764      	b.n	8002b26 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002c5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c5e:	f000 f8b1 	bl	8002dc4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002c62:	f000 fb5b 	bl	800331c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c68:	f000 f8fe 	bl	8002e68 <prvIsQueueEmpty>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f43f af59 	beq.w	8002b26 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c76:	4618      	mov	r0, r3
 8002c78:	f003 fe80 	bl	800697c <SEGGER_SYSVIEW_ShrinkId>
 8002c7c:	4604      	mov	r4, r0
 8002c7e:	2000      	movs	r0, #0
 8002c80:	f003 fe7c 	bl	800697c <SEGGER_SYSVIEW_ShrinkId>
 8002c84:	4602      	mov	r2, r0
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2101      	movs	r1, #1
 8002c8a:	9100      	str	r1, [sp, #0]
 8002c8c:	4621      	mov	r1, r4
 8002c8e:	205c      	movs	r0, #92	; 0x5c
 8002c90:	f003 f95e 	bl	8005f50 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002c94:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3734      	adds	r7, #52	; 0x34
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd90      	pop	{r4, r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	e000ed04 	.word	0xe000ed04

08002ca4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10d      	bne.n	8002cde <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d14d      	bne.n	8002d66 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 fee6 	bl	8003aa0 <xTaskPriorityDisinherit>
 8002cd4:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	609a      	str	r2, [r3, #8]
 8002cdc:	e043      	b.n	8002d66 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d119      	bne.n	8002d18 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6858      	ldr	r0, [r3, #4]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	461a      	mov	r2, r3
 8002cee:	68b9      	ldr	r1, [r7, #8]
 8002cf0:	f004 f90e 	bl	8006f10 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	441a      	add	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d32b      	bcc.n	8002d66 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	605a      	str	r2, [r3, #4]
 8002d16:	e026      	b.n	8002d66 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	68d8      	ldr	r0, [r3, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	461a      	mov	r2, r3
 8002d22:	68b9      	ldr	r1, [r7, #8]
 8002d24:	f004 f8f4 	bl	8006f10 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	68da      	ldr	r2, [r3, #12]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	425b      	negs	r3, r3
 8002d32:	441a      	add	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d207      	bcs.n	8002d54 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4c:	425b      	negs	r3, r3
 8002d4e:	441a      	add	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d105      	bne.n	8002d66 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d002      	beq.n	8002d66 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1c5a      	adds	r2, r3, #1
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002d6e:	697b      	ldr	r3, [r7, #20]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3718      	adds	r7, #24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d018      	beq.n	8002dbc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68da      	ldr	r2, [r3, #12]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	441a      	add	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d303      	bcc.n	8002dac <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68d9      	ldr	r1, [r3, #12]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db4:	461a      	mov	r2, r3
 8002db6:	6838      	ldr	r0, [r7, #0]
 8002db8:	f004 f8aa 	bl	8006f10 <memcpy>
    }
}
 8002dbc:	bf00      	nop
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002dcc:	f001 fc22 	bl	8004614 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dd6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002dd8:	e011      	b.n	8002dfe <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d012      	beq.n	8002e08 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3324      	adds	r3, #36	; 0x24
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 fca2 	bl	8003730 <xTaskRemoveFromEventList>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002df2:	f000 fd7f 	bl	80038f4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	dce9      	bgt.n	8002dda <prvUnlockQueue+0x16>
 8002e06:	e000      	b.n	8002e0a <prvUnlockQueue+0x46>
                        break;
 8002e08:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	22ff      	movs	r2, #255	; 0xff
 8002e0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002e12:	f001 fc2f 	bl	8004674 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002e16:	f001 fbfd 	bl	8004614 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e20:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e22:	e011      	b.n	8002e48 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d012      	beq.n	8002e52 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3310      	adds	r3, #16
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 fc7d 	bl	8003730 <xTaskRemoveFromEventList>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002e3c:	f000 fd5a 	bl	80038f4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002e40:	7bbb      	ldrb	r3, [r7, #14]
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	dce9      	bgt.n	8002e24 <prvUnlockQueue+0x60>
 8002e50:	e000      	b.n	8002e54 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002e52:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	22ff      	movs	r2, #255	; 0xff
 8002e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002e5c:	f001 fc0a 	bl	8004674 <vPortExitCritical>
}
 8002e60:	bf00      	nop
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002e70:	f001 fbd0 	bl	8004614 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d102      	bne.n	8002e82 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	e001      	b.n	8002e86 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002e82:	2300      	movs	r3, #0
 8002e84:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002e86:	f001 fbf5 	bl	8004674 <vPortExitCritical>

    return xReturn;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002e9c:	f001 fbba 	bl	8004614 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d102      	bne.n	8002eb2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002eac:	2301      	movs	r3, #1
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	e001      	b.n	8002eb6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002eb6:	f001 fbdd 	bl	8004674 <vPortExitCritical>

    return xReturn;
 8002eba:	68fb      	ldr	r3, [r7, #12]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	e01e      	b.n	8002f12 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002ed4:	4a13      	ldr	r2, [pc, #76]	; (8002f24 <vQueueAddToRegistry+0x60>)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d115      	bne.n	8002f0c <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002ee0:	4910      	ldr	r1, [pc, #64]	; (8002f24 <vQueueAddToRegistry+0x60>)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002eea:	4a0e      	ldr	r2, [pc, #56]	; (8002f24 <vQueueAddToRegistry+0x60>)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f003 fd3f 	bl	800697c <SEGGER_SYSVIEW_ShrinkId>
 8002efe:	4601      	mov	r1, r0
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	461a      	mov	r2, r3
 8002f04:	2071      	movs	r0, #113	; 0x71
 8002f06:	f002 ff53 	bl	8005db0 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002f0a:	e006      	b.n	8002f1a <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2b07      	cmp	r3, #7
 8002f16:	d9dd      	bls.n	8002ed4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002f18:	bf00      	nop
 8002f1a:	bf00      	nop
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	200000e0 	.word	0x200000e0

08002f28 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002f38:	f001 fb6c 	bl	8004614 <vPortEnterCritical>
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f42:	b25b      	sxtb	r3, r3
 8002f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f48:	d103      	bne.n	8002f52 <vQueueWaitForMessageRestricted+0x2a>
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f58:	b25b      	sxtb	r3, r3
 8002f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5e:	d103      	bne.n	8002f68 <vQueueWaitForMessageRestricted+0x40>
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f68:	f001 fb84 	bl	8004674 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d106      	bne.n	8002f82 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	3324      	adds	r3, #36	; 0x24
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	68b9      	ldr	r1, [r7, #8]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 fba9 	bl	80036d4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002f82:	6978      	ldr	r0, [r7, #20]
 8002f84:	f7ff ff1e 	bl	8002dc4 <prvUnlockQueue>
    }
 8002f88:	bf00      	nop
 8002f8a:	3718      	adds	r7, #24
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b08c      	sub	sp, #48	; 0x30
 8002f94:	af04      	add	r7, sp, #16
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	603b      	str	r3, [r7, #0]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002fa0:	88fb      	ldrh	r3, [r7, #6]
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f001 fc61 	bl	800486c <pvPortMalloc>
 8002faa:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00e      	beq.n	8002fd0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002fb2:	2058      	movs	r0, #88	; 0x58
 8002fb4:	f001 fc5a 	bl	800486c <pvPortMalloc>
 8002fb8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	631a      	str	r2, [r3, #48]	; 0x30
 8002fc6:	e005      	b.n	8002fd4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002fc8:	6978      	ldr	r0, [r7, #20]
 8002fca:	f001 fd2f 	bl	8004a2c <vPortFree>
 8002fce:	e001      	b.n	8002fd4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d013      	beq.n	8003002 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002fda:	88fa      	ldrh	r2, [r7, #6]
 8002fdc:	2300      	movs	r3, #0
 8002fde:	9303      	str	r3, [sp, #12]
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	9302      	str	r3, [sp, #8]
 8002fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe6:	9301      	str	r3, [sp, #4]
 8002fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	68b9      	ldr	r1, [r7, #8]
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 f80e 	bl	8003012 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002ff6:	69f8      	ldr	r0, [r7, #28]
 8002ff8:	f000 f8a2 	bl	8003140 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	61bb      	str	r3, [r7, #24]
 8003000:	e002      	b.n	8003008 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003002:	f04f 33ff 	mov.w	r3, #4294967295
 8003006:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003008:	69bb      	ldr	r3, [r7, #24]
    }
 800300a:	4618      	mov	r0, r3
 800300c:	3720      	adds	r7, #32
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b088      	sub	sp, #32
 8003016:	af00      	add	r7, sp, #0
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	607a      	str	r2, [r7, #4]
 800301e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003022:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	461a      	mov	r2, r3
 800302a:	21a5      	movs	r1, #165	; 0xa5
 800302c:	f003 ff7e 	bl	8006f2c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003032:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800303a:	3b01      	subs	r3, #1
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	f023 0307 	bic.w	r3, r3, #7
 8003048:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00a      	beq.n	800306a <prvInitialiseNewTask+0x58>
        __asm volatile
 8003054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003058:	f383 8811 	msr	BASEPRI, r3
 800305c:	f3bf 8f6f 	isb	sy
 8003060:	f3bf 8f4f 	dsb	sy
 8003064:	617b      	str	r3, [r7, #20]
    }
 8003066:	bf00      	nop
 8003068:	e7fe      	b.n	8003068 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d01f      	beq.n	80030b0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003070:	2300      	movs	r3, #0
 8003072:	61fb      	str	r3, [r7, #28]
 8003074:	e012      	b.n	800309c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	4413      	add	r3, r2
 800307c:	7819      	ldrb	r1, [r3, #0]
 800307e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	4413      	add	r3, r2
 8003084:	3334      	adds	r3, #52	; 0x34
 8003086:	460a      	mov	r2, r1
 8003088:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	4413      	add	r3, r2
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d006      	beq.n	80030a4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	3301      	adds	r3, #1
 800309a:	61fb      	str	r3, [r7, #28]
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	2b09      	cmp	r3, #9
 80030a0:	d9e9      	bls.n	8003076 <prvInitialiseNewTask+0x64>
 80030a2:	e000      	b.n	80030a6 <prvInitialiseNewTask+0x94>
            {
                break;
 80030a4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80030a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80030ae:	e003      	b.n	80030b8 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80030b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80030b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	d901      	bls.n	80030c2 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80030be:	2304      	movs	r3, #4
 80030c0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80030c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030c6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80030c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030cc:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80030ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d0:	2200      	movs	r2, #0
 80030d2:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80030d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d6:	3304      	adds	r3, #4
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff f999 	bl	8002410 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80030de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e0:	3318      	adds	r3, #24
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff f994 	bl	8002410 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80030e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ec:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f0:	f1c3 0205 	rsb	r2, r3, #5
 80030f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80030f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030fc:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80030fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003100:	3350      	adds	r3, #80	; 0x50
 8003102:	2204      	movs	r2, #4
 8003104:	2100      	movs	r1, #0
 8003106:	4618      	mov	r0, r3
 8003108:	f003 ff10 	bl	8006f2c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800310c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310e:	3354      	adds	r3, #84	; 0x54
 8003110:	2201      	movs	r2, #1
 8003112:	2100      	movs	r1, #0
 8003114:	4618      	mov	r0, r3
 8003116:	f003 ff09 	bl	8006f2c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	68f9      	ldr	r1, [r7, #12]
 800311e:	69b8      	ldr	r0, [r7, #24]
 8003120:	f001 f8c8 	bl	80042b4 <pxPortInitialiseStack>
 8003124:	4602      	mov	r2, r0
 8003126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003128:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800312a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312c:	2b00      	cmp	r3, #0
 800312e:	d002      	beq.n	8003136 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003134:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003136:	bf00      	nop
 8003138:	3720      	adds	r7, #32
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003140:	b5b0      	push	{r4, r5, r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af02      	add	r7, sp, #8
 8003146:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003148:	f001 fa64 	bl	8004614 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800314c:	4b35      	ldr	r3, [pc, #212]	; (8003224 <prvAddNewTaskToReadyList+0xe4>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	3301      	adds	r3, #1
 8003152:	4a34      	ldr	r2, [pc, #208]	; (8003224 <prvAddNewTaskToReadyList+0xe4>)
 8003154:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003156:	4b34      	ldr	r3, [pc, #208]	; (8003228 <prvAddNewTaskToReadyList+0xe8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d109      	bne.n	8003172 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800315e:	4a32      	ldr	r2, [pc, #200]	; (8003228 <prvAddNewTaskToReadyList+0xe8>)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003164:	4b2f      	ldr	r3, [pc, #188]	; (8003224 <prvAddNewTaskToReadyList+0xe4>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d110      	bne.n	800318e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800316c:	f000 fbe0 	bl	8003930 <prvInitialiseTaskLists>
 8003170:	e00d      	b.n	800318e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003172:	4b2e      	ldr	r3, [pc, #184]	; (800322c <prvAddNewTaskToReadyList+0xec>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d109      	bne.n	800318e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800317a:	4b2b      	ldr	r3, [pc, #172]	; (8003228 <prvAddNewTaskToReadyList+0xe8>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003184:	429a      	cmp	r2, r3
 8003186:	d802      	bhi.n	800318e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003188:	4a27      	ldr	r2, [pc, #156]	; (8003228 <prvAddNewTaskToReadyList+0xe8>)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800318e:	4b28      	ldr	r3, [pc, #160]	; (8003230 <prvAddNewTaskToReadyList+0xf0>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	3301      	adds	r3, #1
 8003194:	4a26      	ldr	r2, [pc, #152]	; (8003230 <prvAddNewTaskToReadyList+0xf0>)
 8003196:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003198:	4b25      	ldr	r3, [pc, #148]	; (8003230 <prvAddNewTaskToReadyList+0xf0>)
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d016      	beq.n	80031d4 <prvAddNewTaskToReadyList+0x94>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f003 fac1 	bl	8006730 <SEGGER_SYSVIEW_OnTaskCreate>
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031be:	461d      	mov	r5, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	461c      	mov	r4, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	1ae3      	subs	r3, r4, r3
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	462b      	mov	r3, r5
 80031d0:	f003 fde0 	bl	8006d94 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f003 fb2e 	bl	8006838 <SEGGER_SYSVIEW_OnTaskStartReady>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e0:	2201      	movs	r2, #1
 80031e2:	409a      	lsls	r2, r3
 80031e4:	4b13      	ldr	r3, [pc, #76]	; (8003234 <prvAddNewTaskToReadyList+0xf4>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	4a12      	ldr	r2, [pc, #72]	; (8003234 <prvAddNewTaskToReadyList+0xf4>)
 80031ec:	6013      	str	r3, [r2, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f2:	4613      	mov	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4a0f      	ldr	r2, [pc, #60]	; (8003238 <prvAddNewTaskToReadyList+0xf8>)
 80031fc:	441a      	add	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	3304      	adds	r3, #4
 8003202:	4619      	mov	r1, r3
 8003204:	4610      	mov	r0, r2
 8003206:	f7ff f910 	bl	800242a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800320a:	f001 fa33 	bl	8004674 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800320e:	4b07      	ldr	r3, [pc, #28]	; (800322c <prvAddNewTaskToReadyList+0xec>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003216:	4b04      	ldr	r3, [pc, #16]	; (8003228 <prvAddNewTaskToReadyList+0xe8>)
 8003218:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bdb0      	pop	{r4, r5, r7, pc}
 8003222:	bf00      	nop
 8003224:	200001f8 	.word	0x200001f8
 8003228:	20000120 	.word	0x20000120
 800322c:	20000204 	.word	0x20000204
 8003230:	20000214 	.word	0x20000214
 8003234:	20000200 	.word	0x20000200
 8003238:	20000124 	.word	0x20000124

0800323c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003242:	4b27      	ldr	r3, [pc, #156]	; (80032e0 <vTaskStartScheduler+0xa4>)
 8003244:	9301      	str	r3, [sp, #4]
 8003246:	2300      	movs	r3, #0
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	2300      	movs	r3, #0
 800324c:	2282      	movs	r2, #130	; 0x82
 800324e:	4925      	ldr	r1, [pc, #148]	; (80032e4 <vTaskStartScheduler+0xa8>)
 8003250:	4825      	ldr	r0, [pc, #148]	; (80032e8 <vTaskStartScheduler+0xac>)
 8003252:	f7ff fe9d 	bl	8002f90 <xTaskCreate>
 8003256:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d102      	bne.n	8003264 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800325e:	f000 fd17 	bl	8003c90 <xTimerCreateTimerTask>
 8003262:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d124      	bne.n	80032b4 <vTaskStartScheduler+0x78>
        __asm volatile
 800326a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326e:	f383 8811 	msr	BASEPRI, r3
 8003272:	f3bf 8f6f 	isb	sy
 8003276:	f3bf 8f4f 	dsb	sy
 800327a:	60bb      	str	r3, [r7, #8]
    }
 800327c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800327e:	4b1b      	ldr	r3, [pc, #108]	; (80032ec <vTaskStartScheduler+0xb0>)
 8003280:	f04f 32ff 	mov.w	r2, #4294967295
 8003284:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003286:	4b1a      	ldr	r3, [pc, #104]	; (80032f0 <vTaskStartScheduler+0xb4>)
 8003288:	2201      	movs	r2, #1
 800328a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800328c:	4b19      	ldr	r3, [pc, #100]	; (80032f4 <vTaskStartScheduler+0xb8>)
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003292:	4b19      	ldr	r3, [pc, #100]	; (80032f8 <vTaskStartScheduler+0xbc>)
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	4b12      	ldr	r3, [pc, #72]	; (80032e0 <vTaskStartScheduler+0xa4>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d102      	bne.n	80032a4 <vTaskStartScheduler+0x68>
 800329e:	f003 fa2b 	bl	80066f8 <SEGGER_SYSVIEW_OnIdle>
 80032a2:	e004      	b.n	80032ae <vTaskStartScheduler+0x72>
 80032a4:	4b14      	ldr	r3, [pc, #80]	; (80032f8 <vTaskStartScheduler+0xbc>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f003 fa83 	bl	80067b4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80032ae:	f001 f891 	bl	80043d4 <xPortStartScheduler>
 80032b2:	e00e      	b.n	80032d2 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ba:	d10a      	bne.n	80032d2 <vTaskStartScheduler+0x96>
        __asm volatile
 80032bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c0:	f383 8811 	msr	BASEPRI, r3
 80032c4:	f3bf 8f6f 	isb	sy
 80032c8:	f3bf 8f4f 	dsb	sy
 80032cc:	607b      	str	r3, [r7, #4]
    }
 80032ce:	bf00      	nop
 80032d0:	e7fe      	b.n	80032d0 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80032d2:	4b0a      	ldr	r3, [pc, #40]	; (80032fc <vTaskStartScheduler+0xc0>)
 80032d4:	681b      	ldr	r3, [r3, #0]
}
 80032d6:	bf00      	nop
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	2000021c 	.word	0x2000021c
 80032e4:	080078a0 	.word	0x080078a0
 80032e8:	0800390d 	.word	0x0800390d
 80032ec:	20000218 	.word	0x20000218
 80032f0:	20000204 	.word	0x20000204
 80032f4:	200001fc 	.word	0x200001fc
 80032f8:	20000120 	.word	0x20000120
 80032fc:	2000000c 	.word	0x2000000c

08003300 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003304:	4b04      	ldr	r3, [pc, #16]	; (8003318 <vTaskSuspendAll+0x18>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	3301      	adds	r3, #1
 800330a:	4a03      	ldr	r2, [pc, #12]	; (8003318 <vTaskSuspendAll+0x18>)
 800330c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800330e:	bf00      	nop
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	20000220 	.word	0x20000220

0800331c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003322:	2300      	movs	r3, #0
 8003324:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003326:	2300      	movs	r3, #0
 8003328:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800332a:	4b3d      	ldr	r3, [pc, #244]	; (8003420 <xTaskResumeAll+0x104>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10a      	bne.n	8003348 <xTaskResumeAll+0x2c>
        __asm volatile
 8003332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003336:	f383 8811 	msr	BASEPRI, r3
 800333a:	f3bf 8f6f 	isb	sy
 800333e:	f3bf 8f4f 	dsb	sy
 8003342:	603b      	str	r3, [r7, #0]
    }
 8003344:	bf00      	nop
 8003346:	e7fe      	b.n	8003346 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003348:	f001 f964 	bl	8004614 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800334c:	4b34      	ldr	r3, [pc, #208]	; (8003420 <xTaskResumeAll+0x104>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	3b01      	subs	r3, #1
 8003352:	4a33      	ldr	r2, [pc, #204]	; (8003420 <xTaskResumeAll+0x104>)
 8003354:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003356:	4b32      	ldr	r3, [pc, #200]	; (8003420 <xTaskResumeAll+0x104>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d159      	bne.n	8003412 <xTaskResumeAll+0xf6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800335e:	4b31      	ldr	r3, [pc, #196]	; (8003424 <xTaskResumeAll+0x108>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d055      	beq.n	8003412 <xTaskResumeAll+0xf6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003366:	e032      	b.n	80033ce <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003368:	4b2f      	ldr	r3, [pc, #188]	; (8003428 <xTaskResumeAll+0x10c>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	3318      	adds	r3, #24
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff f8b5 	bl	80024e4 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	3304      	adds	r3, #4
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff f8b0 	bl	80024e4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4618      	mov	r0, r3
 8003388:	f003 fa56 	bl	8006838 <SEGGER_SYSVIEW_OnTaskStartReady>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003390:	2201      	movs	r2, #1
 8003392:	409a      	lsls	r2, r3
 8003394:	4b25      	ldr	r3, [pc, #148]	; (800342c <xTaskResumeAll+0x110>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4313      	orrs	r3, r2
 800339a:	4a24      	ldr	r2, [pc, #144]	; (800342c <xTaskResumeAll+0x110>)
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a2:	4613      	mov	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4a21      	ldr	r2, [pc, #132]	; (8003430 <xTaskResumeAll+0x114>)
 80033ac:	441a      	add	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	3304      	adds	r3, #4
 80033b2:	4619      	mov	r1, r3
 80033b4:	4610      	mov	r0, r2
 80033b6:	f7ff f838 	bl	800242a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033be:	4b1d      	ldr	r3, [pc, #116]	; (8003434 <xTaskResumeAll+0x118>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d302      	bcc.n	80033ce <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80033c8:	4b1b      	ldr	r3, [pc, #108]	; (8003438 <xTaskResumeAll+0x11c>)
 80033ca:	2201      	movs	r2, #1
 80033cc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033ce:	4b16      	ldr	r3, [pc, #88]	; (8003428 <xTaskResumeAll+0x10c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1c8      	bne.n	8003368 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80033dc:	f000 fb26 	bl	8003a2c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80033e0:	4b16      	ldr	r3, [pc, #88]	; (800343c <xTaskResumeAll+0x120>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d010      	beq.n	800340e <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80033ec:	f000 f84a 	bl	8003484 <xTaskIncrementTick>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80033f6:	4b10      	ldr	r3, [pc, #64]	; (8003438 <xTaskResumeAll+0x11c>)
 80033f8:	2201      	movs	r2, #1
 80033fa:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	3b01      	subs	r3, #1
 8003400:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1f1      	bne.n	80033ec <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8003408:	4b0c      	ldr	r3, [pc, #48]	; (800343c <xTaskResumeAll+0x120>)
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800340e:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <xTaskResumeAll+0x11c>)
 8003410:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003412:	f001 f92f 	bl	8004674 <vPortExitCritical>

    return xAlreadyYielded;
 8003416:	687b      	ldr	r3, [r7, #4]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	20000220 	.word	0x20000220
 8003424:	200001f8 	.word	0x200001f8
 8003428:	200001b8 	.word	0x200001b8
 800342c:	20000200 	.word	0x20000200
 8003430:	20000124 	.word	0x20000124
 8003434:	20000120 	.word	0x20000120
 8003438:	2000020c 	.word	0x2000020c
 800343c:	20000208 	.word	0x20000208

08003440 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003446:	4b05      	ldr	r3, [pc, #20]	; (800345c <xTaskGetTickCount+0x1c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800344c:	687b      	ldr	r3, [r7, #4]
}
 800344e:	4618      	mov	r0, r3
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	200001fc 	.word	0x200001fc

08003460 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003466:	f001 f9c1 	bl	80047ec <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800346a:	2300      	movs	r3, #0
 800346c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800346e:	4b04      	ldr	r3, [pc, #16]	; (8003480 <xTaskGetTickCountFromISR+0x20>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003474:	683b      	ldr	r3, [r7, #0]
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	200001fc 	.word	0x200001fc

08003484 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800348a:	2300      	movs	r3, #0
 800348c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800348e:	4b41      	ldr	r3, [pc, #260]	; (8003594 <xTaskIncrementTick+0x110>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d173      	bne.n	800357e <xTaskIncrementTick+0xfa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003496:	4b40      	ldr	r3, [pc, #256]	; (8003598 <xTaskIncrementTick+0x114>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	3301      	adds	r3, #1
 800349c:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800349e:	4a3e      	ldr	r2, [pc, #248]	; (8003598 <xTaskIncrementTick+0x114>)
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d120      	bne.n	80034ec <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 80034aa:	4b3c      	ldr	r3, [pc, #240]	; (800359c <xTaskIncrementTick+0x118>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00a      	beq.n	80034ca <xTaskIncrementTick+0x46>
        __asm volatile
 80034b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b8:	f383 8811 	msr	BASEPRI, r3
 80034bc:	f3bf 8f6f 	isb	sy
 80034c0:	f3bf 8f4f 	dsb	sy
 80034c4:	603b      	str	r3, [r7, #0]
    }
 80034c6:	bf00      	nop
 80034c8:	e7fe      	b.n	80034c8 <xTaskIncrementTick+0x44>
 80034ca:	4b34      	ldr	r3, [pc, #208]	; (800359c <xTaskIncrementTick+0x118>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	4b33      	ldr	r3, [pc, #204]	; (80035a0 <xTaskIncrementTick+0x11c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a31      	ldr	r2, [pc, #196]	; (800359c <xTaskIncrementTick+0x118>)
 80034d6:	6013      	str	r3, [r2, #0]
 80034d8:	4a31      	ldr	r2, [pc, #196]	; (80035a0 <xTaskIncrementTick+0x11c>)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6013      	str	r3, [r2, #0]
 80034de:	4b31      	ldr	r3, [pc, #196]	; (80035a4 <xTaskIncrementTick+0x120>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	3301      	adds	r3, #1
 80034e4:	4a2f      	ldr	r2, [pc, #188]	; (80035a4 <xTaskIncrementTick+0x120>)
 80034e6:	6013      	str	r3, [r2, #0]
 80034e8:	f000 faa0 	bl	8003a2c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80034ec:	4b2e      	ldr	r3, [pc, #184]	; (80035a8 <xTaskIncrementTick+0x124>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d348      	bcc.n	8003588 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034f6:	4b29      	ldr	r3, [pc, #164]	; (800359c <xTaskIncrementTick+0x118>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d104      	bne.n	800350a <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003500:	4b29      	ldr	r3, [pc, #164]	; (80035a8 <xTaskIncrementTick+0x124>)
 8003502:	f04f 32ff 	mov.w	r2, #4294967295
 8003506:	601a      	str	r2, [r3, #0]
                    break;
 8003508:	e03e      	b.n	8003588 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800350a:	4b24      	ldr	r3, [pc, #144]	; (800359c <xTaskIncrementTick+0x118>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	429a      	cmp	r2, r3
 8003520:	d203      	bcs.n	800352a <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003522:	4a21      	ldr	r2, [pc, #132]	; (80035a8 <xTaskIncrementTick+0x124>)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003528:	e02e      	b.n	8003588 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	3304      	adds	r3, #4
 800352e:	4618      	mov	r0, r3
 8003530:	f7fe ffd8 	bl	80024e4 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003538:	2b00      	cmp	r3, #0
 800353a:	d004      	beq.n	8003546 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	3318      	adds	r3, #24
 8003540:	4618      	mov	r0, r3
 8003542:	f7fe ffcf 	bl	80024e4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	4618      	mov	r0, r3
 800354a:	f003 f975 	bl	8006838 <SEGGER_SYSVIEW_OnTaskStartReady>
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003552:	2201      	movs	r2, #1
 8003554:	409a      	lsls	r2, r3
 8003556:	4b15      	ldr	r3, [pc, #84]	; (80035ac <xTaskIncrementTick+0x128>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4313      	orrs	r3, r2
 800355c:	4a13      	ldr	r2, [pc, #76]	; (80035ac <xTaskIncrementTick+0x128>)
 800355e:	6013      	str	r3, [r2, #0]
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003564:	4613      	mov	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4a10      	ldr	r2, [pc, #64]	; (80035b0 <xTaskIncrementTick+0x12c>)
 800356e:	441a      	add	r2, r3
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	3304      	adds	r3, #4
 8003574:	4619      	mov	r1, r3
 8003576:	4610      	mov	r0, r2
 8003578:	f7fe ff57 	bl	800242a <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800357c:	e7bb      	b.n	80034f6 <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800357e:	4b0d      	ldr	r3, [pc, #52]	; (80035b4 <xTaskIncrementTick+0x130>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	3301      	adds	r3, #1
 8003584:	4a0b      	ldr	r2, [pc, #44]	; (80035b4 <xTaskIncrementTick+0x130>)
 8003586:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003588:	697b      	ldr	r3, [r7, #20]
}
 800358a:	4618      	mov	r0, r3
 800358c:	3718      	adds	r7, #24
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	20000220 	.word	0x20000220
 8003598:	200001fc 	.word	0x200001fc
 800359c:	200001b0 	.word	0x200001b0
 80035a0:	200001b4 	.word	0x200001b4
 80035a4:	20000210 	.word	0x20000210
 80035a8:	20000218 	.word	0x20000218
 80035ac:	20000200 	.word	0x20000200
 80035b0:	20000124 	.word	0x20000124
 80035b4:	20000208 	.word	0x20000208

080035b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80035be:	4b2d      	ldr	r3, [pc, #180]	; (8003674 <vTaskSwitchContext+0xbc>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80035c6:	4b2c      	ldr	r3, [pc, #176]	; (8003678 <vTaskSwitchContext+0xc0>)
 80035c8:	2201      	movs	r2, #1
 80035ca:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80035cc:	e04d      	b.n	800366a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80035ce:	4b2a      	ldr	r3, [pc, #168]	; (8003678 <vTaskSwitchContext+0xc0>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035d4:	4b29      	ldr	r3, [pc, #164]	; (800367c <vTaskSwitchContext+0xc4>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	fab3 f383 	clz	r3, r3
 80035e0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80035e2:	7afb      	ldrb	r3, [r7, #11]
 80035e4:	f1c3 031f 	rsb	r3, r3, #31
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	4925      	ldr	r1, [pc, #148]	; (8003680 <vTaskSwitchContext+0xc8>)
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	4613      	mov	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10a      	bne.n	8003614 <vTaskSwitchContext+0x5c>
        __asm volatile
 80035fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003602:	f383 8811 	msr	BASEPRI, r3
 8003606:	f3bf 8f6f 	isb	sy
 800360a:	f3bf 8f4f 	dsb	sy
 800360e:	607b      	str	r3, [r7, #4]
    }
 8003610:	bf00      	nop
 8003612:	e7fe      	b.n	8003612 <vTaskSwitchContext+0x5a>
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	4613      	mov	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4a18      	ldr	r2, [pc, #96]	; (8003680 <vTaskSwitchContext+0xc8>)
 8003620:	4413      	add	r3, r2
 8003622:	613b      	str	r3, [r7, #16]
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	3308      	adds	r3, #8
 8003636:	429a      	cmp	r2, r3
 8003638:	d104      	bne.n	8003644 <vTaskSwitchContext+0x8c>
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	605a      	str	r2, [r3, #4]
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	4a0e      	ldr	r2, [pc, #56]	; (8003684 <vTaskSwitchContext+0xcc>)
 800364c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800364e:	4b0d      	ldr	r3, [pc, #52]	; (8003684 <vTaskSwitchContext+0xcc>)
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	4b0d      	ldr	r3, [pc, #52]	; (8003688 <vTaskSwitchContext+0xd0>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d102      	bne.n	8003660 <vTaskSwitchContext+0xa8>
 800365a:	f003 f84d 	bl	80066f8 <SEGGER_SYSVIEW_OnIdle>
}
 800365e:	e004      	b.n	800366a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003660:	4b08      	ldr	r3, [pc, #32]	; (8003684 <vTaskSwitchContext+0xcc>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f003 f8a5 	bl	80067b4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800366a:	bf00      	nop
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	20000220 	.word	0x20000220
 8003678:	2000020c 	.word	0x2000020c
 800367c:	20000200 	.word	0x20000200
 8003680:	20000124 	.word	0x20000124
 8003684:	20000120 	.word	0x20000120
 8003688:	2000021c 	.word	0x2000021c

0800368c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10a      	bne.n	80036b2 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800369c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a0:	f383 8811 	msr	BASEPRI, r3
 80036a4:	f3bf 8f6f 	isb	sy
 80036a8:	f3bf 8f4f 	dsb	sy
 80036ac:	60fb      	str	r3, [r7, #12]
    }
 80036ae:	bf00      	nop
 80036b0:	e7fe      	b.n	80036b0 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036b2:	4b07      	ldr	r3, [pc, #28]	; (80036d0 <vTaskPlaceOnEventList+0x44>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	3318      	adds	r3, #24
 80036b8:	4619      	mov	r1, r3
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7fe fed9 	bl	8002472 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80036c0:	2101      	movs	r1, #1
 80036c2:	6838      	ldr	r0, [r7, #0]
 80036c4:	f000 fa6c 	bl	8003ba0 <prvAddCurrentTaskToDelayedList>
}
 80036c8:	bf00      	nop
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	20000120 	.word	0x20000120

080036d4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10a      	bne.n	80036fc <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80036e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ea:	f383 8811 	msr	BASEPRI, r3
 80036ee:	f3bf 8f6f 	isb	sy
 80036f2:	f3bf 8f4f 	dsb	sy
 80036f6:	617b      	str	r3, [r7, #20]
    }
 80036f8:	bf00      	nop
 80036fa:	e7fe      	b.n	80036fa <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036fc:	4b0b      	ldr	r3, [pc, #44]	; (800372c <vTaskPlaceOnEventListRestricted+0x58>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	3318      	adds	r3, #24
 8003702:	4619      	mov	r1, r3
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f7fe fe90 	bl	800242a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d002      	beq.n	8003716 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003710:	f04f 33ff 	mov.w	r3, #4294967295
 8003714:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003716:	2024      	movs	r0, #36	; 0x24
 8003718:	f002 faf0 	bl	8005cfc <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	68b8      	ldr	r0, [r7, #8]
 8003720:	f000 fa3e 	bl	8003ba0 <prvAddCurrentTaskToDelayedList>
    }
 8003724:	bf00      	nop
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	20000120 	.word	0x20000120

08003730 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10a      	bne.n	800375c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374a:	f383 8811 	msr	BASEPRI, r3
 800374e:	f3bf 8f6f 	isb	sy
 8003752:	f3bf 8f4f 	dsb	sy
 8003756:	60fb      	str	r3, [r7, #12]
    }
 8003758:	bf00      	nop
 800375a:	e7fe      	b.n	800375a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	3318      	adds	r3, #24
 8003760:	4618      	mov	r0, r3
 8003762:	f7fe febf 	bl	80024e4 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003766:	4b1f      	ldr	r3, [pc, #124]	; (80037e4 <xTaskRemoveFromEventList+0xb4>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d120      	bne.n	80037b0 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	3304      	adds	r3, #4
 8003772:	4618      	mov	r0, r3
 8003774:	f7fe feb6 	bl	80024e4 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	4618      	mov	r0, r3
 800377c:	f003 f85c 	bl	8006838 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003784:	2201      	movs	r2, #1
 8003786:	409a      	lsls	r2, r3
 8003788:	4b17      	ldr	r3, [pc, #92]	; (80037e8 <xTaskRemoveFromEventList+0xb8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4313      	orrs	r3, r2
 800378e:	4a16      	ldr	r2, [pc, #88]	; (80037e8 <xTaskRemoveFromEventList+0xb8>)
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003796:	4613      	mov	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4a13      	ldr	r2, [pc, #76]	; (80037ec <xTaskRemoveFromEventList+0xbc>)
 80037a0:	441a      	add	r2, r3
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	3304      	adds	r3, #4
 80037a6:	4619      	mov	r1, r3
 80037a8:	4610      	mov	r0, r2
 80037aa:	f7fe fe3e 	bl	800242a <vListInsertEnd>
 80037ae:	e005      	b.n	80037bc <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	3318      	adds	r3, #24
 80037b4:	4619      	mov	r1, r3
 80037b6:	480e      	ldr	r0, [pc, #56]	; (80037f0 <xTaskRemoveFromEventList+0xc0>)
 80037b8:	f7fe fe37 	bl	800242a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c0:	4b0c      	ldr	r3, [pc, #48]	; (80037f4 <xTaskRemoveFromEventList+0xc4>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d905      	bls.n	80037d6 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80037ca:	2301      	movs	r3, #1
 80037cc:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80037ce:	4b0a      	ldr	r3, [pc, #40]	; (80037f8 <xTaskRemoveFromEventList+0xc8>)
 80037d0:	2201      	movs	r2, #1
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	e001      	b.n	80037da <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 80037d6:	2300      	movs	r3, #0
 80037d8:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80037da:	697b      	ldr	r3, [r7, #20]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3718      	adds	r7, #24
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	20000220 	.word	0x20000220
 80037e8:	20000200 	.word	0x20000200
 80037ec:	20000124 	.word	0x20000124
 80037f0:	200001b8 	.word	0x200001b8
 80037f4:	20000120 	.word	0x20000120
 80037f8:	2000020c 	.word	0x2000020c

080037fc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003804:	4b06      	ldr	r3, [pc, #24]	; (8003820 <vTaskInternalSetTimeOutState+0x24>)
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800380c:	4b05      	ldr	r3, [pc, #20]	; (8003824 <vTaskInternalSetTimeOutState+0x28>)
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	605a      	str	r2, [r3, #4]
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	20000210 	.word	0x20000210
 8003824:	200001fc 	.word	0x200001fc

08003828 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b088      	sub	sp, #32
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10a      	bne.n	800384e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383c:	f383 8811 	msr	BASEPRI, r3
 8003840:	f3bf 8f6f 	isb	sy
 8003844:	f3bf 8f4f 	dsb	sy
 8003848:	613b      	str	r3, [r7, #16]
    }
 800384a:	bf00      	nop
 800384c:	e7fe      	b.n	800384c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10a      	bne.n	800386a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	60fb      	str	r3, [r7, #12]
    }
 8003866:	bf00      	nop
 8003868:	e7fe      	b.n	8003868 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800386a:	f000 fed3 	bl	8004614 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800386e:	4b1f      	ldr	r3, [pc, #124]	; (80038ec <xTaskCheckForTimeOut+0xc4>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003886:	d102      	bne.n	800388e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003888:	2300      	movs	r3, #0
 800388a:	61fb      	str	r3, [r7, #28]
 800388c:	e026      	b.n	80038dc <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	4b17      	ldr	r3, [pc, #92]	; (80038f0 <xTaskCheckForTimeOut+0xc8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	d00a      	beq.n	80038b0 <xTaskCheckForTimeOut+0x88>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d305      	bcc.n	80038b0 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80038a4:	2301      	movs	r3, #1
 80038a6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	e015      	b.n	80038dc <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d20b      	bcs.n	80038d2 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	1ad2      	subs	r2, r2, r3
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7ff ff98 	bl	80037fc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80038cc:	2300      	movs	r3, #0
 80038ce:	61fb      	str	r3, [r7, #28]
 80038d0:	e004      	b.n	80038dc <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80038d8:	2301      	movs	r3, #1
 80038da:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80038dc:	f000 feca 	bl	8004674 <vPortExitCritical>

    return xReturn;
 80038e0:	69fb      	ldr	r3, [r7, #28]
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3720      	adds	r7, #32
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	200001fc 	.word	0x200001fc
 80038f0:	20000210 	.word	0x20000210

080038f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80038f8:	4b03      	ldr	r3, [pc, #12]	; (8003908 <vTaskMissedYield+0x14>)
 80038fa:	2201      	movs	r2, #1
 80038fc:	601a      	str	r2, [r3, #0]
}
 80038fe:	bf00      	nop
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	2000020c 	.word	0x2000020c

0800390c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003914:	f000 f84c 	bl	80039b0 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8003918:	4b04      	ldr	r3, [pc, #16]	; (800392c <prvIdleTask+0x20>)
 800391a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	f3bf 8f4f 	dsb	sy
 8003924:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003928:	e7f4      	b.n	8003914 <prvIdleTask+0x8>
 800392a:	bf00      	nop
 800392c:	e000ed04 	.word	0xe000ed04

08003930 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003936:	2300      	movs	r3, #0
 8003938:	607b      	str	r3, [r7, #4]
 800393a:	e00c      	b.n	8003956 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	4613      	mov	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	4413      	add	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4a12      	ldr	r2, [pc, #72]	; (8003990 <prvInitialiseTaskLists+0x60>)
 8003948:	4413      	add	r3, r2
 800394a:	4618      	mov	r0, r3
 800394c:	f7fe fd40 	bl	80023d0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3301      	adds	r3, #1
 8003954:	607b      	str	r3, [r7, #4]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b04      	cmp	r3, #4
 800395a:	d9ef      	bls.n	800393c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800395c:	480d      	ldr	r0, [pc, #52]	; (8003994 <prvInitialiseTaskLists+0x64>)
 800395e:	f7fe fd37 	bl	80023d0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003962:	480d      	ldr	r0, [pc, #52]	; (8003998 <prvInitialiseTaskLists+0x68>)
 8003964:	f7fe fd34 	bl	80023d0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003968:	480c      	ldr	r0, [pc, #48]	; (800399c <prvInitialiseTaskLists+0x6c>)
 800396a:	f7fe fd31 	bl	80023d0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800396e:	480c      	ldr	r0, [pc, #48]	; (80039a0 <prvInitialiseTaskLists+0x70>)
 8003970:	f7fe fd2e 	bl	80023d0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003974:	480b      	ldr	r0, [pc, #44]	; (80039a4 <prvInitialiseTaskLists+0x74>)
 8003976:	f7fe fd2b 	bl	80023d0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800397a:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <prvInitialiseTaskLists+0x78>)
 800397c:	4a05      	ldr	r2, [pc, #20]	; (8003994 <prvInitialiseTaskLists+0x64>)
 800397e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003980:	4b0a      	ldr	r3, [pc, #40]	; (80039ac <prvInitialiseTaskLists+0x7c>)
 8003982:	4a05      	ldr	r2, [pc, #20]	; (8003998 <prvInitialiseTaskLists+0x68>)
 8003984:	601a      	str	r2, [r3, #0]
}
 8003986:	bf00      	nop
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20000124 	.word	0x20000124
 8003994:	20000188 	.word	0x20000188
 8003998:	2000019c 	.word	0x2000019c
 800399c:	200001b8 	.word	0x200001b8
 80039a0:	200001cc 	.word	0x200001cc
 80039a4:	200001e4 	.word	0x200001e4
 80039a8:	200001b0 	.word	0x200001b0
 80039ac:	200001b4 	.word	0x200001b4

080039b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039b6:	e019      	b.n	80039ec <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80039b8:	f000 fe2c 	bl	8004614 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039bc:	4b10      	ldr	r3, [pc, #64]	; (8003a00 <prvCheckTasksWaitingTermination+0x50>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3304      	adds	r3, #4
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fe fd8b 	bl	80024e4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80039ce:	4b0d      	ldr	r3, [pc, #52]	; (8003a04 <prvCheckTasksWaitingTermination+0x54>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3b01      	subs	r3, #1
 80039d4:	4a0b      	ldr	r2, [pc, #44]	; (8003a04 <prvCheckTasksWaitingTermination+0x54>)
 80039d6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80039d8:	4b0b      	ldr	r3, [pc, #44]	; (8003a08 <prvCheckTasksWaitingTermination+0x58>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3b01      	subs	r3, #1
 80039de:	4a0a      	ldr	r2, [pc, #40]	; (8003a08 <prvCheckTasksWaitingTermination+0x58>)
 80039e0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80039e2:	f000 fe47 	bl	8004674 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f810 	bl	8003a0c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039ec:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <prvCheckTasksWaitingTermination+0x58>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1e1      	bne.n	80039b8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80039f4:	bf00      	nop
 80039f6:	bf00      	nop
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	200001cc 	.word	0x200001cc
 8003a04:	200001f8 	.word	0x200001f8
 8003a08:	200001e0 	.word	0x200001e0

08003a0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f001 f807 	bl	8004a2c <vPortFree>
                vPortFree( pxTCB );
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f001 f804 	bl	8004a2c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003a24:	bf00      	nop
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a30:	4b0a      	ldr	r3, [pc, #40]	; (8003a5c <prvResetNextTaskUnblockTime+0x30>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d104      	bne.n	8003a44 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003a3a:	4b09      	ldr	r3, [pc, #36]	; (8003a60 <prvResetNextTaskUnblockTime+0x34>)
 8003a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a40:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003a42:	e005      	b.n	8003a50 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a44:	4b05      	ldr	r3, [pc, #20]	; (8003a5c <prvResetNextTaskUnblockTime+0x30>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a04      	ldr	r2, [pc, #16]	; (8003a60 <prvResetNextTaskUnblockTime+0x34>)
 8003a4e:	6013      	str	r3, [r2, #0]
}
 8003a50:	bf00      	nop
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	200001b0 	.word	0x200001b0
 8003a60:	20000218 	.word	0x20000218

08003a64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003a6a:	4b0b      	ldr	r3, [pc, #44]	; (8003a98 <xTaskGetSchedulerState+0x34>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d102      	bne.n	8003a78 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003a72:	2301      	movs	r3, #1
 8003a74:	607b      	str	r3, [r7, #4]
 8003a76:	e008      	b.n	8003a8a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a78:	4b08      	ldr	r3, [pc, #32]	; (8003a9c <xTaskGetSchedulerState+0x38>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d102      	bne.n	8003a86 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003a80:	2302      	movs	r3, #2
 8003a82:	607b      	str	r3, [r7, #4]
 8003a84:	e001      	b.n	8003a8a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003a86:	2300      	movs	r3, #0
 8003a88:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003a8a:	687b      	ldr	r3, [r7, #4]
    }
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	20000204 	.word	0x20000204
 8003a9c:	20000220 	.word	0x20000220

08003aa0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003aac:	2300      	movs	r3, #0
 8003aae:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d068      	beq.n	8003b88 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003ab6:	4b37      	ldr	r3, [pc, #220]	; (8003b94 <xTaskPriorityDisinherit+0xf4>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d00a      	beq.n	8003ad6 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac4:	f383 8811 	msr	BASEPRI, r3
 8003ac8:	f3bf 8f6f 	isb	sy
 8003acc:	f3bf 8f4f 	dsb	sy
 8003ad0:	60fb      	str	r3, [r7, #12]
    }
 8003ad2:	bf00      	nop
 8003ad4:	e7fe      	b.n	8003ad4 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10a      	bne.n	8003af4 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae2:	f383 8811 	msr	BASEPRI, r3
 8003ae6:	f3bf 8f6f 	isb	sy
 8003aea:	f3bf 8f4f 	dsb	sy
 8003aee:	60bb      	str	r3, [r7, #8]
    }
 8003af0:	bf00      	nop
 8003af2:	e7fe      	b.n	8003af2 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af8:	1e5a      	subs	r2, r3, #1
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d03e      	beq.n	8003b88 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d13a      	bne.n	8003b88 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	3304      	adds	r3, #4
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fe fce4 	bl	80024e4 <uxListRemove>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10a      	bne.n	8003b38 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b26:	2201      	movs	r2, #1
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	43da      	mvns	r2, r3
 8003b2e:	4b1a      	ldr	r3, [pc, #104]	; (8003b98 <xTaskPriorityDisinherit+0xf8>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4013      	ands	r3, r2
 8003b34:	4a18      	ldr	r2, [pc, #96]	; (8003b98 <xTaskPriorityDisinherit+0xf8>)
 8003b36:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	204a      	movs	r0, #74	; 0x4a
 8003b3e:	f002 f8fb 	bl	8005d38 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4e:	f1c3 0205 	rsb	r2, r3, #5
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	409a      	lsls	r2, r3
 8003b5e:	4b0e      	ldr	r3, [pc, #56]	; (8003b98 <xTaskPriorityDisinherit+0xf8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	4a0c      	ldr	r2, [pc, #48]	; (8003b98 <xTaskPriorityDisinherit+0xf8>)
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4a09      	ldr	r2, [pc, #36]	; (8003b9c <xTaskPriorityDisinherit+0xfc>)
 8003b76:	441a      	add	r2, r3
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	3304      	adds	r3, #4
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	4610      	mov	r0, r2
 8003b80:	f7fe fc53 	bl	800242a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003b84:	2301      	movs	r3, #1
 8003b86:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003b88:	697b      	ldr	r3, [r7, #20]
    }
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	20000120 	.word	0x20000120
 8003b98:	20000200 	.word	0x20000200
 8003b9c:	20000124 	.word	0x20000124

08003ba0 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003baa:	4b32      	ldr	r3, [pc, #200]	; (8003c74 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bb0:	4b31      	ldr	r3, [pc, #196]	; (8003c78 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	3304      	adds	r3, #4
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fe fc94 	bl	80024e4 <uxListRemove>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10b      	bne.n	8003bda <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003bc2:	4b2d      	ldr	r3, [pc, #180]	; (8003c78 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc8:	2201      	movs	r2, #1
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	43da      	mvns	r2, r3
 8003bd0:	4b2a      	ldr	r3, [pc, #168]	; (8003c7c <prvAddCurrentTaskToDelayedList+0xdc>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	4a29      	ldr	r2, [pc, #164]	; (8003c7c <prvAddCurrentTaskToDelayedList+0xdc>)
 8003bd8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be0:	d110      	bne.n	8003c04 <prvAddCurrentTaskToDelayedList+0x64>
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00d      	beq.n	8003c04 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003be8:	4b23      	ldr	r3, [pc, #140]	; (8003c78 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	211b      	movs	r1, #27
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f002 fe64 	bl	80068bc <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bf4:	4b20      	ldr	r3, [pc, #128]	; (8003c78 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4820      	ldr	r0, [pc, #128]	; (8003c80 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003bfe:	f7fe fc14 	bl	800242a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003c02:	e032      	b.n	8003c6a <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4413      	add	r3, r2
 8003c0a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c0c:	4b1a      	ldr	r3, [pc, #104]	; (8003c78 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68ba      	ldr	r2, [r7, #8]
 8003c12:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d20f      	bcs.n	8003c3c <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003c1c:	4b16      	ldr	r3, [pc, #88]	; (8003c78 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2104      	movs	r1, #4
 8003c22:	4618      	mov	r0, r3
 8003c24:	f002 fe4a 	bl	80068bc <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c28:	4b16      	ldr	r3, [pc, #88]	; (8003c84 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	4b12      	ldr	r3, [pc, #72]	; (8003c78 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3304      	adds	r3, #4
 8003c32:	4619      	mov	r1, r3
 8003c34:	4610      	mov	r0, r2
 8003c36:	f7fe fc1c 	bl	8002472 <vListInsert>
}
 8003c3a:	e016      	b.n	8003c6a <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003c3c:	4b0e      	ldr	r3, [pc, #56]	; (8003c78 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2104      	movs	r1, #4
 8003c42:	4618      	mov	r0, r3
 8003c44:	f002 fe3a 	bl	80068bc <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c48:	4b0f      	ldr	r3, [pc, #60]	; (8003c88 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	4b0a      	ldr	r3, [pc, #40]	; (8003c78 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	3304      	adds	r3, #4
 8003c52:	4619      	mov	r1, r3
 8003c54:	4610      	mov	r0, r2
 8003c56:	f7fe fc0c 	bl	8002472 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003c5a:	4b0c      	ldr	r3, [pc, #48]	; (8003c8c <prvAddCurrentTaskToDelayedList+0xec>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d202      	bcs.n	8003c6a <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003c64:	4a09      	ldr	r2, [pc, #36]	; (8003c8c <prvAddCurrentTaskToDelayedList+0xec>)
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	6013      	str	r3, [r2, #0]
}
 8003c6a:	bf00      	nop
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	200001fc 	.word	0x200001fc
 8003c78:	20000120 	.word	0x20000120
 8003c7c:	20000200 	.word	0x20000200
 8003c80:	200001e4 	.word	0x200001e4
 8003c84:	200001b4 	.word	0x200001b4
 8003c88:	200001b0 	.word	0x200001b0
 8003c8c:	20000218 	.word	0x20000218

08003c90 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003c96:	2300      	movs	r3, #0
 8003c98:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003c9a:	f000 fad5 	bl	8004248 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003c9e:	4b11      	ldr	r3, [pc, #68]	; (8003ce4 <xTimerCreateTimerTask+0x54>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00b      	beq.n	8003cbe <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003ca6:	4b10      	ldr	r3, [pc, #64]	; (8003ce8 <xTimerCreateTimerTask+0x58>)
 8003ca8:	9301      	str	r3, [sp, #4]
 8003caa:	2302      	movs	r3, #2
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	2300      	movs	r3, #0
 8003cb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003cb4:	490d      	ldr	r1, [pc, #52]	; (8003cec <xTimerCreateTimerTask+0x5c>)
 8003cb6:	480e      	ldr	r0, [pc, #56]	; (8003cf0 <xTimerCreateTimerTask+0x60>)
 8003cb8:	f7ff f96a 	bl	8002f90 <xTaskCreate>
 8003cbc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10a      	bne.n	8003cda <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc8:	f383 8811 	msr	BASEPRI, r3
 8003ccc:	f3bf 8f6f 	isb	sy
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	603b      	str	r3, [r7, #0]
    }
 8003cd6:	bf00      	nop
 8003cd8:	e7fe      	b.n	8003cd8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003cda:	687b      	ldr	r3, [r7, #4]
    }
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	20000254 	.word	0x20000254
 8003ce8:	20000258 	.word	0x20000258
 8003cec:	080078a8 	.word	0x080078a8
 8003cf0:	08003e29 	.word	0x08003e29

08003cf4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b08a      	sub	sp, #40	; 0x28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003d02:	2300      	movs	r3, #0
 8003d04:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10a      	bne.n	8003d22 <xTimerGenericCommand+0x2e>
        __asm volatile
 8003d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d10:	f383 8811 	msr	BASEPRI, r3
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	f3bf 8f4f 	dsb	sy
 8003d1c:	623b      	str	r3, [r7, #32]
    }
 8003d1e:	bf00      	nop
 8003d20:	e7fe      	b.n	8003d20 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003d22:	4b1a      	ldr	r3, [pc, #104]	; (8003d8c <xTimerGenericCommand+0x98>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d02a      	beq.n	8003d80 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2b05      	cmp	r3, #5
 8003d3a:	dc18      	bgt.n	8003d6e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003d3c:	f7ff fe92 	bl	8003a64 <xTaskGetSchedulerState>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d109      	bne.n	8003d5a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003d46:	4b11      	ldr	r3, [pc, #68]	; (8003d8c <xTimerGenericCommand+0x98>)
 8003d48:	6818      	ldr	r0, [r3, #0]
 8003d4a:	f107 0114 	add.w	r1, r7, #20
 8003d4e:	2300      	movs	r3, #0
 8003d50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d52:	f7fe fcd5 	bl	8002700 <xQueueGenericSend>
 8003d56:	6278      	str	r0, [r7, #36]	; 0x24
 8003d58:	e012      	b.n	8003d80 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003d5a:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <xTimerGenericCommand+0x98>)
 8003d5c:	6818      	ldr	r0, [r3, #0]
 8003d5e:	f107 0114 	add.w	r1, r7, #20
 8003d62:	2300      	movs	r3, #0
 8003d64:	2200      	movs	r2, #0
 8003d66:	f7fe fccb 	bl	8002700 <xQueueGenericSend>
 8003d6a:	6278      	str	r0, [r7, #36]	; 0x24
 8003d6c:	e008      	b.n	8003d80 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003d6e:	4b07      	ldr	r3, [pc, #28]	; (8003d8c <xTimerGenericCommand+0x98>)
 8003d70:	6818      	ldr	r0, [r3, #0]
 8003d72:	f107 0114 	add.w	r1, r7, #20
 8003d76:	2300      	movs	r3, #0
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	f7fe fdcf 	bl	800291c <xQueueGenericSendFromISR>
 8003d7e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003d82:	4618      	mov	r0, r3
 8003d84:	3728      	adds	r7, #40	; 0x28
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	20000254 	.word	0x20000254

08003d90 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af02      	add	r7, sp, #8
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d9a:	4b22      	ldr	r3, [pc, #136]	; (8003e24 <prvProcessExpiredTimer+0x94>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	3304      	adds	r3, #4
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7fe fb9b 	bl	80024e4 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d022      	beq.n	8003e02 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	699a      	ldr	r2, [r3, #24]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	18d1      	adds	r1, r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	6978      	ldr	r0, [r7, #20]
 8003dca:	f000 f8d1 	bl	8003f70 <prvInsertTimerInActiveList>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d01f      	beq.n	8003e14 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	2300      	movs	r3, #0
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	2100      	movs	r1, #0
 8003dde:	6978      	ldr	r0, [r7, #20]
 8003de0:	f7ff ff88 	bl	8003cf4 <xTimerGenericCommand>
 8003de4:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d113      	bne.n	8003e14 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df0:	f383 8811 	msr	BASEPRI, r3
 8003df4:	f3bf 8f6f 	isb	sy
 8003df8:	f3bf 8f4f 	dsb	sy
 8003dfc:	60fb      	str	r3, [r7, #12]
    }
 8003dfe:	bf00      	nop
 8003e00:	e7fe      	b.n	8003e00 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e08:	f023 0301 	bic.w	r3, r3, #1
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	6978      	ldr	r0, [r7, #20]
 8003e1a:	4798      	blx	r3
    }
 8003e1c:	bf00      	nop
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	2000024c 	.word	0x2000024c

08003e28 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e30:	f107 0308 	add.w	r3, r7, #8
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 f857 	bl	8003ee8 <prvGetNextExpireTime>
 8003e3a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	4619      	mov	r1, r3
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f000 f803 	bl	8003e4c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003e46:	f000 f8d5 	bl	8003ff4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e4a:	e7f1      	b.n	8003e30 <prvTimerTask+0x8>

08003e4c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003e56:	f7ff fa53 	bl	8003300 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e5a:	f107 0308 	add.w	r3, r7, #8
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 f866 	bl	8003f30 <prvSampleTimeNow>
 8003e64:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d130      	bne.n	8003ece <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10a      	bne.n	8003e88 <prvProcessTimerOrBlockTask+0x3c>
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d806      	bhi.n	8003e88 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003e7a:	f7ff fa4f 	bl	800331c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003e7e:	68f9      	ldr	r1, [r7, #12]
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7ff ff85 	bl	8003d90 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003e86:	e024      	b.n	8003ed2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d008      	beq.n	8003ea0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003e8e:	4b13      	ldr	r3, [pc, #76]	; (8003edc <prvProcessTimerOrBlockTask+0x90>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <prvProcessTimerOrBlockTask+0x50>
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e000      	b.n	8003e9e <prvProcessTimerOrBlockTask+0x52>
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003ea0:	4b0f      	ldr	r3, [pc, #60]	; (8003ee0 <prvProcessTimerOrBlockTask+0x94>)
 8003ea2:	6818      	ldr	r0, [r3, #0]
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	4619      	mov	r1, r3
 8003eae:	f7ff f83b 	bl	8002f28 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003eb2:	f7ff fa33 	bl	800331c <xTaskResumeAll>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10a      	bne.n	8003ed2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003ebc:	4b09      	ldr	r3, [pc, #36]	; (8003ee4 <prvProcessTimerOrBlockTask+0x98>)
 8003ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	f3bf 8f4f 	dsb	sy
 8003ec8:	f3bf 8f6f 	isb	sy
    }
 8003ecc:	e001      	b.n	8003ed2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003ece:	f7ff fa25 	bl	800331c <xTaskResumeAll>
    }
 8003ed2:	bf00      	nop
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	20000250 	.word	0x20000250
 8003ee0:	20000254 	.word	0x20000254
 8003ee4:	e000ed04 	.word	0xe000ed04

08003ee8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003ef0:	4b0e      	ldr	r3, [pc, #56]	; (8003f2c <prvGetNextExpireTime+0x44>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <prvGetNextExpireTime+0x16>
 8003efa:	2201      	movs	r2, #1
 8003efc:	e000      	b.n	8003f00 <prvGetNextExpireTime+0x18>
 8003efe:	2200      	movs	r2, #0
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d105      	bne.n	8003f18 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f0c:	4b07      	ldr	r3, [pc, #28]	; (8003f2c <prvGetNextExpireTime+0x44>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	60fb      	str	r3, [r7, #12]
 8003f16:	e001      	b.n	8003f1c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
    }
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	2000024c 	.word	0x2000024c

08003f30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003f38:	f7ff fa82 	bl	8003440 <xTaskGetTickCount>
 8003f3c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003f3e:	4b0b      	ldr	r3, [pc, #44]	; (8003f6c <prvSampleTimeNow+0x3c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d205      	bcs.n	8003f54 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003f48:	f000 f91a 	bl	8004180 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	e002      	b.n	8003f5a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003f5a:	4a04      	ldr	r2, [pc, #16]	; (8003f6c <prvSampleTimeNow+0x3c>)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003f60:	68fb      	ldr	r3, [r7, #12]
    }
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	2000025c 	.word	0x2000025c

08003f70 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
 8003f7c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d812      	bhi.n	8003fbc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	1ad2      	subs	r2, r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d302      	bcc.n	8003faa <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	e01b      	b.n	8003fe2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003faa:	4b10      	ldr	r3, [pc, #64]	; (8003fec <prvInsertTimerInActiveList+0x7c>)
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	4610      	mov	r0, r2
 8003fb6:	f7fe fa5c 	bl	8002472 <vListInsert>
 8003fba:	e012      	b.n	8003fe2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d206      	bcs.n	8003fd2 <prvInsertTimerInActiveList+0x62>
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d302      	bcc.n	8003fd2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	617b      	str	r3, [r7, #20]
 8003fd0:	e007      	b.n	8003fe2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003fd2:	4b07      	ldr	r3, [pc, #28]	; (8003ff0 <prvInsertTimerInActiveList+0x80>)
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	3304      	adds	r3, #4
 8003fda:	4619      	mov	r1, r3
 8003fdc:	4610      	mov	r0, r2
 8003fde:	f7fe fa48 	bl	8002472 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003fe2:	697b      	ldr	r3, [r7, #20]
    }
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3718      	adds	r7, #24
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	20000250 	.word	0x20000250
 8003ff0:	2000024c 	.word	0x2000024c

08003ff4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b08c      	sub	sp, #48	; 0x30
 8003ff8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ffa:	e0ae      	b.n	800415a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f2c0 80aa 	blt.w	8004158 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d004      	beq.n	800401a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	3304      	adds	r3, #4
 8004014:	4618      	mov	r0, r3
 8004016:	f7fe fa65 	bl	80024e4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800401a:	1d3b      	adds	r3, r7, #4
 800401c:	4618      	mov	r0, r3
 800401e:	f7ff ff87 	bl	8003f30 <prvSampleTimeNow>
 8004022:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	2b09      	cmp	r3, #9
 8004028:	f200 8097 	bhi.w	800415a <prvProcessReceivedCommands+0x166>
 800402c:	a201      	add	r2, pc, #4	; (adr r2, 8004034 <prvProcessReceivedCommands+0x40>)
 800402e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004032:	bf00      	nop
 8004034:	0800405d 	.word	0x0800405d
 8004038:	0800405d 	.word	0x0800405d
 800403c:	0800405d 	.word	0x0800405d
 8004040:	080040d1 	.word	0x080040d1
 8004044:	080040e5 	.word	0x080040e5
 8004048:	0800412f 	.word	0x0800412f
 800404c:	0800405d 	.word	0x0800405d
 8004050:	0800405d 	.word	0x0800405d
 8004054:	080040d1 	.word	0x080040d1
 8004058:	080040e5 	.word	0x080040e5
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004062:	f043 0301 	orr.w	r3, r3, #1
 8004066:	b2da      	uxtb	r2, r3
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	18d1      	adds	r1, r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6a3a      	ldr	r2, [r7, #32]
 800407a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800407c:	f7ff ff78 	bl	8003f70 <prvInsertTimerInActiveList>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d069      	beq.n	800415a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800408c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b00      	cmp	r3, #0
 800409a:	d05e      	beq.n	800415a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	441a      	add	r2, r3
 80040a4:	2300      	movs	r3, #0
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	2300      	movs	r3, #0
 80040aa:	2100      	movs	r1, #0
 80040ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040ae:	f7ff fe21 	bl	8003cf4 <xTimerGenericCommand>
 80040b2:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d14f      	bne.n	800415a <prvProcessReceivedCommands+0x166>
        __asm volatile
 80040ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040be:	f383 8811 	msr	BASEPRI, r3
 80040c2:	f3bf 8f6f 	isb	sy
 80040c6:	f3bf 8f4f 	dsb	sy
 80040ca:	61bb      	str	r3, [r7, #24]
    }
 80040cc:	bf00      	nop
 80040ce:	e7fe      	b.n	80040ce <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040d6:	f023 0301 	bic.w	r3, r3, #1
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80040e2:	e03a      	b.n	800415a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040ea:	f043 0301 	orr.w	r3, r3, #1
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10a      	bne.n	800411a <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004108:	f383 8811 	msr	BASEPRI, r3
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	617b      	str	r3, [r7, #20]
    }
 8004116:	bf00      	nop
 8004118:	e7fe      	b.n	8004118 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411c:	699a      	ldr	r2, [r3, #24]
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	18d1      	adds	r1, r2, r3
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	6a3a      	ldr	r2, [r7, #32]
 8004126:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004128:	f7ff ff22 	bl	8003f70 <prvInsertTimerInActiveList>
                        break;
 800412c:	e015      	b.n	800415a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d103      	bne.n	8004144 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 800413c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800413e:	f000 fc75 	bl	8004a2c <vPortFree>
 8004142:	e00a      	b.n	800415a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004146:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800414a:	f023 0301 	bic.w	r3, r3, #1
 800414e:	b2da      	uxtb	r2, r3
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004156:	e000      	b.n	800415a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004158:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800415a:	4b08      	ldr	r3, [pc, #32]	; (800417c <prvProcessReceivedCommands+0x188>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f107 0108 	add.w	r1, r7, #8
 8004162:	2200      	movs	r2, #0
 8004164:	4618      	mov	r0, r3
 8004166:	f7fe fc97 	bl	8002a98 <xQueueReceive>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	f47f af45 	bne.w	8003ffc <prvProcessReceivedCommands+0x8>
        }
    }
 8004172:	bf00      	nop
 8004174:	bf00      	nop
 8004176:	3728      	adds	r7, #40	; 0x28
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	20000254 	.word	0x20000254

08004180 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004180:	b580      	push	{r7, lr}
 8004182:	b088      	sub	sp, #32
 8004184:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004186:	e048      	b.n	800421a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004188:	4b2d      	ldr	r3, [pc, #180]	; (8004240 <prvSwitchTimerLists+0xc0>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004192:	4b2b      	ldr	r3, [pc, #172]	; (8004240 <prvSwitchTimerLists+0xc0>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	3304      	adds	r3, #4
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7fe f99f 	bl	80024e4 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041b4:	f003 0304 	and.w	r3, r3, #4
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d02e      	beq.n	800421a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	4413      	add	r3, r2
 80041c4:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d90e      	bls.n	80041ec <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80041da:	4b19      	ldr	r3, [pc, #100]	; (8004240 <prvSwitchTimerLists+0xc0>)
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	3304      	adds	r3, #4
 80041e2:	4619      	mov	r1, r3
 80041e4:	4610      	mov	r0, r2
 80041e6:	f7fe f944 	bl	8002472 <vListInsert>
 80041ea:	e016      	b.n	800421a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80041ec:	2300      	movs	r3, #0
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	2300      	movs	r3, #0
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	2100      	movs	r1, #0
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f7ff fd7c 	bl	8003cf4 <xTimerGenericCommand>
 80041fc:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10a      	bne.n	800421a <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	603b      	str	r3, [r7, #0]
    }
 8004216:	bf00      	nop
 8004218:	e7fe      	b.n	8004218 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800421a:	4b09      	ldr	r3, [pc, #36]	; (8004240 <prvSwitchTimerLists+0xc0>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1b1      	bne.n	8004188 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004224:	4b06      	ldr	r3, [pc, #24]	; (8004240 <prvSwitchTimerLists+0xc0>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800422a:	4b06      	ldr	r3, [pc, #24]	; (8004244 <prvSwitchTimerLists+0xc4>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a04      	ldr	r2, [pc, #16]	; (8004240 <prvSwitchTimerLists+0xc0>)
 8004230:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004232:	4a04      	ldr	r2, [pc, #16]	; (8004244 <prvSwitchTimerLists+0xc4>)
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	6013      	str	r3, [r2, #0]
    }
 8004238:	bf00      	nop
 800423a:	3718      	adds	r7, #24
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	2000024c 	.word	0x2000024c
 8004244:	20000250 	.word	0x20000250

08004248 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800424c:	f000 f9e2 	bl	8004614 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004250:	4b12      	ldr	r3, [pc, #72]	; (800429c <prvCheckForValidListAndQueue+0x54>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d11d      	bne.n	8004294 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004258:	4811      	ldr	r0, [pc, #68]	; (80042a0 <prvCheckForValidListAndQueue+0x58>)
 800425a:	f7fe f8b9 	bl	80023d0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800425e:	4811      	ldr	r0, [pc, #68]	; (80042a4 <prvCheckForValidListAndQueue+0x5c>)
 8004260:	f7fe f8b6 	bl	80023d0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004264:	4b10      	ldr	r3, [pc, #64]	; (80042a8 <prvCheckForValidListAndQueue+0x60>)
 8004266:	4a0e      	ldr	r2, [pc, #56]	; (80042a0 <prvCheckForValidListAndQueue+0x58>)
 8004268:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800426a:	4b10      	ldr	r3, [pc, #64]	; (80042ac <prvCheckForValidListAndQueue+0x64>)
 800426c:	4a0d      	ldr	r2, [pc, #52]	; (80042a4 <prvCheckForValidListAndQueue+0x5c>)
 800426e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004270:	2200      	movs	r2, #0
 8004272:	210c      	movs	r1, #12
 8004274:	200a      	movs	r0, #10
 8004276:	f7fe f9ba 	bl	80025ee <xQueueGenericCreate>
 800427a:	4603      	mov	r3, r0
 800427c:	4a07      	ldr	r2, [pc, #28]	; (800429c <prvCheckForValidListAndQueue+0x54>)
 800427e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004280:	4b06      	ldr	r3, [pc, #24]	; (800429c <prvCheckForValidListAndQueue+0x54>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d005      	beq.n	8004294 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004288:	4b04      	ldr	r3, [pc, #16]	; (800429c <prvCheckForValidListAndQueue+0x54>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4908      	ldr	r1, [pc, #32]	; (80042b0 <prvCheckForValidListAndQueue+0x68>)
 800428e:	4618      	mov	r0, r3
 8004290:	f7fe fe18 	bl	8002ec4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004294:	f000 f9ee 	bl	8004674 <vPortExitCritical>
    }
 8004298:	bf00      	nop
 800429a:	bd80      	pop	{r7, pc}
 800429c:	20000254 	.word	0x20000254
 80042a0:	20000224 	.word	0x20000224
 80042a4:	20000238 	.word	0x20000238
 80042a8:	2000024c 	.word	0x2000024c
 80042ac:	20000250 	.word	0x20000250
 80042b0:	080078b0 	.word	0x080078b0

080042b4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	3b04      	subs	r3, #4
 80042c4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80042cc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	3b04      	subs	r3, #4
 80042d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	f023 0201 	bic.w	r2, r3, #1
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	3b04      	subs	r3, #4
 80042e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80042e4:	4a0c      	ldr	r2, [pc, #48]	; (8004318 <pxPortInitialiseStack+0x64>)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	3b14      	subs	r3, #20
 80042ee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	3b04      	subs	r3, #4
 80042fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f06f 0202 	mvn.w	r2, #2
 8004302:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	3b20      	subs	r3, #32
 8004308:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800430a:	68fb      	ldr	r3, [r7, #12]
}
 800430c:	4618      	mov	r0, r3
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	0800431d 	.word	0x0800431d

0800431c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004322:	2300      	movs	r3, #0
 8004324:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004326:	4b12      	ldr	r3, [pc, #72]	; (8004370 <prvTaskExitError+0x54>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432e:	d00a      	beq.n	8004346 <prvTaskExitError+0x2a>
        __asm volatile
 8004330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004334:	f383 8811 	msr	BASEPRI, r3
 8004338:	f3bf 8f6f 	isb	sy
 800433c:	f3bf 8f4f 	dsb	sy
 8004340:	60fb      	str	r3, [r7, #12]
    }
 8004342:	bf00      	nop
 8004344:	e7fe      	b.n	8004344 <prvTaskExitError+0x28>
        __asm volatile
 8004346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434a:	f383 8811 	msr	BASEPRI, r3
 800434e:	f3bf 8f6f 	isb	sy
 8004352:	f3bf 8f4f 	dsb	sy
 8004356:	60bb      	str	r3, [r7, #8]
    }
 8004358:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800435a:	bf00      	nop
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0fc      	beq.n	800435c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004362:	bf00      	nop
 8004364:	bf00      	nop
 8004366:	3714      	adds	r7, #20
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	20000010 	.word	0x20000010
	...

08004380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004380:	4b07      	ldr	r3, [pc, #28]	; (80043a0 <pxCurrentTCBConst2>)
 8004382:	6819      	ldr	r1, [r3, #0]
 8004384:	6808      	ldr	r0, [r1, #0]
 8004386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800438a:	f380 8809 	msr	PSP, r0
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	f04f 0000 	mov.w	r0, #0
 8004396:	f380 8811 	msr	BASEPRI, r0
 800439a:	4770      	bx	lr
 800439c:	f3af 8000 	nop.w

080043a0 <pxCurrentTCBConst2>:
 80043a0:	20000120 	.word	0x20000120
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80043a4:	bf00      	nop
 80043a6:	bf00      	nop

080043a8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80043a8:	4808      	ldr	r0, [pc, #32]	; (80043cc <prvPortStartFirstTask+0x24>)
 80043aa:	6800      	ldr	r0, [r0, #0]
 80043ac:	6800      	ldr	r0, [r0, #0]
 80043ae:	f380 8808 	msr	MSP, r0
 80043b2:	f04f 0000 	mov.w	r0, #0
 80043b6:	f380 8814 	msr	CONTROL, r0
 80043ba:	b662      	cpsie	i
 80043bc:	b661      	cpsie	f
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	df00      	svc	0
 80043c8:	bf00      	nop
 80043ca:	0000      	.short	0x0000
 80043cc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80043d0:	bf00      	nop
 80043d2:	bf00      	nop

080043d4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80043da:	4b46      	ldr	r3, [pc, #280]	; (80044f4 <xPortStartScheduler+0x120>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a46      	ldr	r2, [pc, #280]	; (80044f8 <xPortStartScheduler+0x124>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d10a      	bne.n	80043fa <xPortStartScheduler+0x26>
        __asm volatile
 80043e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e8:	f383 8811 	msr	BASEPRI, r3
 80043ec:	f3bf 8f6f 	isb	sy
 80043f0:	f3bf 8f4f 	dsb	sy
 80043f4:	613b      	str	r3, [r7, #16]
    }
 80043f6:	bf00      	nop
 80043f8:	e7fe      	b.n	80043f8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80043fa:	4b3e      	ldr	r3, [pc, #248]	; (80044f4 <xPortStartScheduler+0x120>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a3f      	ldr	r2, [pc, #252]	; (80044fc <xPortStartScheduler+0x128>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d10a      	bne.n	800441a <xPortStartScheduler+0x46>
        __asm volatile
 8004404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004408:	f383 8811 	msr	BASEPRI, r3
 800440c:	f3bf 8f6f 	isb	sy
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	60fb      	str	r3, [r7, #12]
    }
 8004416:	bf00      	nop
 8004418:	e7fe      	b.n	8004418 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800441a:	4b39      	ldr	r3, [pc, #228]	; (8004500 <xPortStartScheduler+0x12c>)
 800441c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	b2db      	uxtb	r3, r3
 8004424:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	22ff      	movs	r2, #255	; 0xff
 800442a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	b2db      	uxtb	r3, r3
 8004432:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004434:	78fb      	ldrb	r3, [r7, #3]
 8004436:	b2db      	uxtb	r3, r3
 8004438:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800443c:	b2da      	uxtb	r2, r3
 800443e:	4b31      	ldr	r3, [pc, #196]	; (8004504 <xPortStartScheduler+0x130>)
 8004440:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004442:	4b31      	ldr	r3, [pc, #196]	; (8004508 <xPortStartScheduler+0x134>)
 8004444:	2207      	movs	r2, #7
 8004446:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004448:	e009      	b.n	800445e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800444a:	4b2f      	ldr	r3, [pc, #188]	; (8004508 <xPortStartScheduler+0x134>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3b01      	subs	r3, #1
 8004450:	4a2d      	ldr	r2, [pc, #180]	; (8004508 <xPortStartScheduler+0x134>)
 8004452:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004454:	78fb      	ldrb	r3, [r7, #3]
 8004456:	b2db      	uxtb	r3, r3
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	b2db      	uxtb	r3, r3
 800445c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800445e:	78fb      	ldrb	r3, [r7, #3]
 8004460:	b2db      	uxtb	r3, r3
 8004462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004466:	2b80      	cmp	r3, #128	; 0x80
 8004468:	d0ef      	beq.n	800444a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800446a:	4b27      	ldr	r3, [pc, #156]	; (8004508 <xPortStartScheduler+0x134>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f1c3 0307 	rsb	r3, r3, #7
 8004472:	2b04      	cmp	r3, #4
 8004474:	d00a      	beq.n	800448c <xPortStartScheduler+0xb8>
        __asm volatile
 8004476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447a:	f383 8811 	msr	BASEPRI, r3
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	60bb      	str	r3, [r7, #8]
    }
 8004488:	bf00      	nop
 800448a:	e7fe      	b.n	800448a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800448c:	4b1e      	ldr	r3, [pc, #120]	; (8004508 <xPortStartScheduler+0x134>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	021b      	lsls	r3, r3, #8
 8004492:	4a1d      	ldr	r2, [pc, #116]	; (8004508 <xPortStartScheduler+0x134>)
 8004494:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004496:	4b1c      	ldr	r3, [pc, #112]	; (8004508 <xPortStartScheduler+0x134>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800449e:	4a1a      	ldr	r2, [pc, #104]	; (8004508 <xPortStartScheduler+0x134>)
 80044a0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80044aa:	4b18      	ldr	r3, [pc, #96]	; (800450c <xPortStartScheduler+0x138>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a17      	ldr	r2, [pc, #92]	; (800450c <xPortStartScheduler+0x138>)
 80044b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044b4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80044b6:	4b15      	ldr	r3, [pc, #84]	; (800450c <xPortStartScheduler+0x138>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a14      	ldr	r2, [pc, #80]	; (800450c <xPortStartScheduler+0x138>)
 80044bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80044c0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80044c2:	f000 f963 	bl	800478c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80044c6:	4b12      	ldr	r3, [pc, #72]	; (8004510 <xPortStartScheduler+0x13c>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80044cc:	f000 f982 	bl	80047d4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80044d0:	4b10      	ldr	r3, [pc, #64]	; (8004514 <xPortStartScheduler+0x140>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a0f      	ldr	r2, [pc, #60]	; (8004514 <xPortStartScheduler+0x140>)
 80044d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80044da:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80044dc:	f7ff ff64 	bl	80043a8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80044e0:	f7ff f86a 	bl	80035b8 <vTaskSwitchContext>
    prvTaskExitError();
 80044e4:	f7ff ff1a 	bl	800431c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3718      	adds	r7, #24
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	e000ed00 	.word	0xe000ed00
 80044f8:	410fc271 	.word	0x410fc271
 80044fc:	410fc270 	.word	0x410fc270
 8004500:	e000e400 	.word	0xe000e400
 8004504:	20000260 	.word	0x20000260
 8004508:	20000264 	.word	0x20000264
 800450c:	e000ed20 	.word	0xe000ed20
 8004510:	20000010 	.word	0x20000010
 8004514:	e000ef34 	.word	0xe000ef34

08004518 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800451e:	4b37      	ldr	r3, [pc, #220]	; (80045fc <vInitPrioGroupValue+0xe4>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a37      	ldr	r2, [pc, #220]	; (8004600 <vInitPrioGroupValue+0xe8>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d10a      	bne.n	800453e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452c:	f383 8811 	msr	BASEPRI, r3
 8004530:	f3bf 8f6f 	isb	sy
 8004534:	f3bf 8f4f 	dsb	sy
 8004538:	613b      	str	r3, [r7, #16]
    }
 800453a:	bf00      	nop
 800453c:	e7fe      	b.n	800453c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800453e:	4b2f      	ldr	r3, [pc, #188]	; (80045fc <vInitPrioGroupValue+0xe4>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a30      	ldr	r2, [pc, #192]	; (8004604 <vInitPrioGroupValue+0xec>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d10a      	bne.n	800455e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454c:	f383 8811 	msr	BASEPRI, r3
 8004550:	f3bf 8f6f 	isb	sy
 8004554:	f3bf 8f4f 	dsb	sy
 8004558:	60fb      	str	r3, [r7, #12]
    }
 800455a:	bf00      	nop
 800455c:	e7fe      	b.n	800455c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800455e:	4b2a      	ldr	r3, [pc, #168]	; (8004608 <vInitPrioGroupValue+0xf0>)
 8004560:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	b2db      	uxtb	r3, r3
 8004568:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	22ff      	movs	r2, #255	; 0xff
 800456e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	b2db      	uxtb	r3, r3
 8004576:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004578:	78fb      	ldrb	r3, [r7, #3]
 800457a:	b2db      	uxtb	r3, r3
 800457c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004580:	b2da      	uxtb	r2, r3
 8004582:	4b22      	ldr	r3, [pc, #136]	; (800460c <vInitPrioGroupValue+0xf4>)
 8004584:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004586:	4b22      	ldr	r3, [pc, #136]	; (8004610 <vInitPrioGroupValue+0xf8>)
 8004588:	2207      	movs	r2, #7
 800458a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800458c:	e009      	b.n	80045a2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800458e:	4b20      	ldr	r3, [pc, #128]	; (8004610 <vInitPrioGroupValue+0xf8>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	3b01      	subs	r3, #1
 8004594:	4a1e      	ldr	r2, [pc, #120]	; (8004610 <vInitPrioGroupValue+0xf8>)
 8004596:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004598:	78fb      	ldrb	r3, [r7, #3]
 800459a:	b2db      	uxtb	r3, r3
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045a2:	78fb      	ldrb	r3, [r7, #3]
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045aa:	2b80      	cmp	r3, #128	; 0x80
 80045ac:	d0ef      	beq.n	800458e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80045ae:	4b18      	ldr	r3, [pc, #96]	; (8004610 <vInitPrioGroupValue+0xf8>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f1c3 0307 	rsb	r3, r3, #7
 80045b6:	2b04      	cmp	r3, #4
 80045b8:	d00a      	beq.n	80045d0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80045ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045be:	f383 8811 	msr	BASEPRI, r3
 80045c2:	f3bf 8f6f 	isb	sy
 80045c6:	f3bf 8f4f 	dsb	sy
 80045ca:	60bb      	str	r3, [r7, #8]
    }
 80045cc:	bf00      	nop
 80045ce:	e7fe      	b.n	80045ce <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80045d0:	4b0f      	ldr	r3, [pc, #60]	; (8004610 <vInitPrioGroupValue+0xf8>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	021b      	lsls	r3, r3, #8
 80045d6:	4a0e      	ldr	r2, [pc, #56]	; (8004610 <vInitPrioGroupValue+0xf8>)
 80045d8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80045da:	4b0d      	ldr	r3, [pc, #52]	; (8004610 <vInitPrioGroupValue+0xf8>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045e2:	4a0b      	ldr	r2, [pc, #44]	; (8004610 <vInitPrioGroupValue+0xf8>)
 80045e4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80045ee:	bf00      	nop
 80045f0:	371c      	adds	r7, #28
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	e000ed00 	.word	0xe000ed00
 8004600:	410fc271 	.word	0x410fc271
 8004604:	410fc270 	.word	0x410fc270
 8004608:	e000e400 	.word	0xe000e400
 800460c:	20000260 	.word	0x20000260
 8004610:	20000264 	.word	0x20000264

08004614 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
        __asm volatile
 800461a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461e:	f383 8811 	msr	BASEPRI, r3
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	f3bf 8f4f 	dsb	sy
 800462a:	607b      	str	r3, [r7, #4]
    }
 800462c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800462e:	4b0f      	ldr	r3, [pc, #60]	; (800466c <vPortEnterCritical+0x58>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	3301      	adds	r3, #1
 8004634:	4a0d      	ldr	r2, [pc, #52]	; (800466c <vPortEnterCritical+0x58>)
 8004636:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004638:	4b0c      	ldr	r3, [pc, #48]	; (800466c <vPortEnterCritical+0x58>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d10f      	bne.n	8004660 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004640:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <vPortEnterCritical+0x5c>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <vPortEnterCritical+0x4c>
        __asm volatile
 800464a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	603b      	str	r3, [r7, #0]
    }
 800465c:	bf00      	nop
 800465e:	e7fe      	b.n	800465e <vPortEnterCritical+0x4a>
    }
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	20000010 	.word	0x20000010
 8004670:	e000ed04 	.word	0xe000ed04

08004674 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800467a:	4b12      	ldr	r3, [pc, #72]	; (80046c4 <vPortExitCritical+0x50>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10a      	bne.n	8004698 <vPortExitCritical+0x24>
        __asm volatile
 8004682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004686:	f383 8811 	msr	BASEPRI, r3
 800468a:	f3bf 8f6f 	isb	sy
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	607b      	str	r3, [r7, #4]
    }
 8004694:	bf00      	nop
 8004696:	e7fe      	b.n	8004696 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004698:	4b0a      	ldr	r3, [pc, #40]	; (80046c4 <vPortExitCritical+0x50>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3b01      	subs	r3, #1
 800469e:	4a09      	ldr	r2, [pc, #36]	; (80046c4 <vPortExitCritical+0x50>)
 80046a0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80046a2:	4b08      	ldr	r3, [pc, #32]	; (80046c4 <vPortExitCritical+0x50>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d105      	bne.n	80046b6 <vPortExitCritical+0x42>
 80046aa:	2300      	movs	r3, #0
 80046ac:	603b      	str	r3, [r7, #0]
        __asm volatile
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	f383 8811 	msr	BASEPRI, r3
    }
 80046b4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	20000010 	.word	0x20000010
	...

080046d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80046d0:	f3ef 8009 	mrs	r0, PSP
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	4b15      	ldr	r3, [pc, #84]	; (8004730 <pxCurrentTCBConst>)
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	f01e 0f10 	tst.w	lr, #16
 80046e0:	bf08      	it	eq
 80046e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80046e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ea:	6010      	str	r0, [r2, #0]
 80046ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80046f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80046f4:	f380 8811 	msr	BASEPRI, r0
 80046f8:	f3bf 8f4f 	dsb	sy
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f7fe ff5a 	bl	80035b8 <vTaskSwitchContext>
 8004704:	f04f 0000 	mov.w	r0, #0
 8004708:	f380 8811 	msr	BASEPRI, r0
 800470c:	bc09      	pop	{r0, r3}
 800470e:	6819      	ldr	r1, [r3, #0]
 8004710:	6808      	ldr	r0, [r1, #0]
 8004712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004716:	f01e 0f10 	tst.w	lr, #16
 800471a:	bf08      	it	eq
 800471c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004720:	f380 8809 	msr	PSP, r0
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	f3af 8000 	nop.w

08004730 <pxCurrentTCBConst>:
 8004730:	20000120 	.word	0x20000120
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004734:	bf00      	nop
 8004736:	bf00      	nop

08004738 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
        __asm volatile
 800473e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004742:	f383 8811 	msr	BASEPRI, r3
 8004746:	f3bf 8f6f 	isb	sy
 800474a:	f3bf 8f4f 	dsb	sy
 800474e:	607b      	str	r3, [r7, #4]
    }
 8004750:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004752:	f001 ff57 	bl	8006604 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004756:	f7fe fe95 	bl	8003484 <xTaskIncrementTick>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d006      	beq.n	800476e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004760:	f001 ffae 	bl	80066c0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004764:	4b08      	ldr	r3, [pc, #32]	; (8004788 <SysTick_Handler+0x50>)
 8004766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	e001      	b.n	8004772 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800476e:	f001 ff8b 	bl	8006688 <SEGGER_SYSVIEW_RecordExitISR>
 8004772:	2300      	movs	r3, #0
 8004774:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	f383 8811 	msr	BASEPRI, r3
    }
 800477c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800477e:	bf00      	nop
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	e000ed04 	.word	0xe000ed04

0800478c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004790:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <vPortSetupTimerInterrupt+0x34>)
 8004792:	2200      	movs	r2, #0
 8004794:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004796:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <vPortSetupTimerInterrupt+0x38>)
 8004798:	2200      	movs	r2, #0
 800479a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800479c:	4b0a      	ldr	r3, [pc, #40]	; (80047c8 <vPortSetupTimerInterrupt+0x3c>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a0a      	ldr	r2, [pc, #40]	; (80047cc <vPortSetupTimerInterrupt+0x40>)
 80047a2:	fba2 2303 	umull	r2, r3, r2, r3
 80047a6:	099b      	lsrs	r3, r3, #6
 80047a8:	4a09      	ldr	r2, [pc, #36]	; (80047d0 <vPortSetupTimerInterrupt+0x44>)
 80047aa:	3b01      	subs	r3, #1
 80047ac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80047ae:	4b04      	ldr	r3, [pc, #16]	; (80047c0 <vPortSetupTimerInterrupt+0x34>)
 80047b0:	2207      	movs	r2, #7
 80047b2:	601a      	str	r2, [r3, #0]
}
 80047b4:	bf00      	nop
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	e000e010 	.word	0xe000e010
 80047c4:	e000e018 	.word	0xe000e018
 80047c8:	20000000 	.word	0x20000000
 80047cc:	10624dd3 	.word	0x10624dd3
 80047d0:	e000e014 	.word	0xe000e014

080047d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80047d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80047e4 <vPortEnableVFP+0x10>
 80047d8:	6801      	ldr	r1, [r0, #0]
 80047da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80047de:	6001      	str	r1, [r0, #0]
 80047e0:	4770      	bx	lr
 80047e2:	0000      	.short	0x0000
 80047e4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80047e8:	bf00      	nop
 80047ea:	bf00      	nop

080047ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80047f2:	f3ef 8305 	mrs	r3, IPSR
 80047f6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2b0f      	cmp	r3, #15
 80047fc:	d914      	bls.n	8004828 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80047fe:	4a17      	ldr	r2, [pc, #92]	; (800485c <vPortValidateInterruptPriority+0x70>)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4413      	add	r3, r2
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004808:	4b15      	ldr	r3, [pc, #84]	; (8004860 <vPortValidateInterruptPriority+0x74>)
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	7afa      	ldrb	r2, [r7, #11]
 800480e:	429a      	cmp	r2, r3
 8004810:	d20a      	bcs.n	8004828 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	607b      	str	r3, [r7, #4]
    }
 8004824:	bf00      	nop
 8004826:	e7fe      	b.n	8004826 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004828:	4b0e      	ldr	r3, [pc, #56]	; (8004864 <vPortValidateInterruptPriority+0x78>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004830:	4b0d      	ldr	r3, [pc, #52]	; (8004868 <vPortValidateInterruptPriority+0x7c>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	429a      	cmp	r2, r3
 8004836:	d90a      	bls.n	800484e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483c:	f383 8811 	msr	BASEPRI, r3
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	603b      	str	r3, [r7, #0]
    }
 800484a:	bf00      	nop
 800484c:	e7fe      	b.n	800484c <vPortValidateInterruptPriority+0x60>
    }
 800484e:	bf00      	nop
 8004850:	3714      	adds	r7, #20
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	e000e3f0 	.word	0xe000e3f0
 8004860:	20000260 	.word	0x20000260
 8004864:	e000ed0c 	.word	0xe000ed0c
 8004868:	20000264 	.word	0x20000264

0800486c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b08a      	sub	sp, #40	; 0x28
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004874:	2300      	movs	r3, #0
 8004876:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004878:	f7fe fd42 	bl	8003300 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800487c:	4b65      	ldr	r3, [pc, #404]	; (8004a14 <pvPortMalloc+0x1a8>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004884:	f000 f934 	bl	8004af0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004888:	4b63      	ldr	r3, [pc, #396]	; (8004a18 <pvPortMalloc+0x1ac>)
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4013      	ands	r3, r2
 8004890:	2b00      	cmp	r3, #0
 8004892:	f040 80a7 	bne.w	80049e4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d02d      	beq.n	80048f8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800489c:	2208      	movs	r2, #8
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d227      	bcs.n	80048f8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80048a8:	2208      	movs	r2, #8
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4413      	add	r3, r2
 80048ae:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d021      	beq.n	80048fe <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f023 0307 	bic.w	r3, r3, #7
 80048c0:	3308      	adds	r3, #8
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d214      	bcs.n	80048f2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f023 0307 	bic.w	r3, r3, #7
 80048ce:	3308      	adds	r3, #8
 80048d0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d010      	beq.n	80048fe <pvPortMalloc+0x92>
        __asm volatile
 80048dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e0:	f383 8811 	msr	BASEPRI, r3
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	f3bf 8f4f 	dsb	sy
 80048ec:	617b      	str	r3, [r7, #20]
    }
 80048ee:	bf00      	nop
 80048f0:	e7fe      	b.n	80048f0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80048f2:	2300      	movs	r3, #0
 80048f4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80048f6:	e002      	b.n	80048fe <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80048f8:	2300      	movs	r3, #0
 80048fa:	607b      	str	r3, [r7, #4]
 80048fc:	e000      	b.n	8004900 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80048fe:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d06e      	beq.n	80049e4 <pvPortMalloc+0x178>
 8004906:	4b45      	ldr	r3, [pc, #276]	; (8004a1c <pvPortMalloc+0x1b0>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	429a      	cmp	r2, r3
 800490e:	d869      	bhi.n	80049e4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004910:	4b43      	ldr	r3, [pc, #268]	; (8004a20 <pvPortMalloc+0x1b4>)
 8004912:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004914:	4b42      	ldr	r3, [pc, #264]	; (8004a20 <pvPortMalloc+0x1b4>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800491a:	e004      	b.n	8004926 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	429a      	cmp	r2, r3
 800492e:	d903      	bls.n	8004938 <pvPortMalloc+0xcc>
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1f1      	bne.n	800491c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004938:	4b36      	ldr	r3, [pc, #216]	; (8004a14 <pvPortMalloc+0x1a8>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800493e:	429a      	cmp	r2, r3
 8004940:	d050      	beq.n	80049e4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004942:	6a3b      	ldr	r3, [r7, #32]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2208      	movs	r2, #8
 8004948:	4413      	add	r3, r2
 800494a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800494c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	1ad2      	subs	r2, r2, r3
 800495c:	2308      	movs	r3, #8
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	429a      	cmp	r2, r3
 8004962:	d91f      	bls.n	80049a4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4413      	add	r3, r2
 800496a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	f003 0307 	and.w	r3, r3, #7
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00a      	beq.n	800498c <pvPortMalloc+0x120>
        __asm volatile
 8004976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497a:	f383 8811 	msr	BASEPRI, r3
 800497e:	f3bf 8f6f 	isb	sy
 8004982:	f3bf 8f4f 	dsb	sy
 8004986:	613b      	str	r3, [r7, #16]
    }
 8004988:	bf00      	nop
 800498a:	e7fe      	b.n	800498a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800498c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	1ad2      	subs	r2, r2, r3
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800499e:	69b8      	ldr	r0, [r7, #24]
 80049a0:	f000 f908 	bl	8004bb4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80049a4:	4b1d      	ldr	r3, [pc, #116]	; (8004a1c <pvPortMalloc+0x1b0>)
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	4a1b      	ldr	r2, [pc, #108]	; (8004a1c <pvPortMalloc+0x1b0>)
 80049b0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049b2:	4b1a      	ldr	r3, [pc, #104]	; (8004a1c <pvPortMalloc+0x1b0>)
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	4b1b      	ldr	r3, [pc, #108]	; (8004a24 <pvPortMalloc+0x1b8>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d203      	bcs.n	80049c6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80049be:	4b17      	ldr	r3, [pc, #92]	; (8004a1c <pvPortMalloc+0x1b0>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a18      	ldr	r2, [pc, #96]	; (8004a24 <pvPortMalloc+0x1b8>)
 80049c4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	4b13      	ldr	r3, [pc, #76]	; (8004a18 <pvPortMalloc+0x1ac>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	431a      	orrs	r2, r3
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80049d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d6:	2200      	movs	r2, #0
 80049d8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80049da:	4b13      	ldr	r3, [pc, #76]	; (8004a28 <pvPortMalloc+0x1bc>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	3301      	adds	r3, #1
 80049e0:	4a11      	ldr	r2, [pc, #68]	; (8004a28 <pvPortMalloc+0x1bc>)
 80049e2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80049e4:	f7fe fc9a 	bl	800331c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	f003 0307 	and.w	r3, r3, #7
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00a      	beq.n	8004a08 <pvPortMalloc+0x19c>
        __asm volatile
 80049f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f6:	f383 8811 	msr	BASEPRI, r3
 80049fa:	f3bf 8f6f 	isb	sy
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	60fb      	str	r3, [r7, #12]
    }
 8004a04:	bf00      	nop
 8004a06:	e7fe      	b.n	8004a06 <pvPortMalloc+0x19a>
    return pvReturn;
 8004a08:	69fb      	ldr	r3, [r7, #28]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3728      	adds	r7, #40	; 0x28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20012e70 	.word	0x20012e70
 8004a18:	20012e84 	.word	0x20012e84
 8004a1c:	20012e74 	.word	0x20012e74
 8004a20:	20012e68 	.word	0x20012e68
 8004a24:	20012e78 	.word	0x20012e78
 8004a28:	20012e7c 	.word	0x20012e7c

08004a2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d04d      	beq.n	8004ada <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004a3e:	2308      	movs	r3, #8
 8004a40:	425b      	negs	r3, r3
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	4413      	add	r3, r2
 8004a46:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	4b24      	ldr	r3, [pc, #144]	; (8004ae4 <vPortFree+0xb8>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4013      	ands	r3, r2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10a      	bne.n	8004a70 <vPortFree+0x44>
        __asm volatile
 8004a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	60fb      	str	r3, [r7, #12]
    }
 8004a6c:	bf00      	nop
 8004a6e:	e7fe      	b.n	8004a6e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00a      	beq.n	8004a8e <vPortFree+0x62>
        __asm volatile
 8004a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7c:	f383 8811 	msr	BASEPRI, r3
 8004a80:	f3bf 8f6f 	isb	sy
 8004a84:	f3bf 8f4f 	dsb	sy
 8004a88:	60bb      	str	r3, [r7, #8]
    }
 8004a8a:	bf00      	nop
 8004a8c:	e7fe      	b.n	8004a8c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	4b14      	ldr	r3, [pc, #80]	; (8004ae4 <vPortFree+0xb8>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4013      	ands	r3, r2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d01e      	beq.n	8004ada <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d11a      	bne.n	8004ada <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	4b0e      	ldr	r3, [pc, #56]	; (8004ae4 <vPortFree+0xb8>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	43db      	mvns	r3, r3
 8004aae:	401a      	ands	r2, r3
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004ab4:	f7fe fc24 	bl	8003300 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	4b0a      	ldr	r3, [pc, #40]	; (8004ae8 <vPortFree+0xbc>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	4a09      	ldr	r2, [pc, #36]	; (8004ae8 <vPortFree+0xbc>)
 8004ac4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004ac6:	6938      	ldr	r0, [r7, #16]
 8004ac8:	f000 f874 	bl	8004bb4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004acc:	4b07      	ldr	r3, [pc, #28]	; (8004aec <vPortFree+0xc0>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	4a06      	ldr	r2, [pc, #24]	; (8004aec <vPortFree+0xc0>)
 8004ad4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004ad6:	f7fe fc21 	bl	800331c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004ada:	bf00      	nop
 8004adc:	3718      	adds	r7, #24
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20012e84 	.word	0x20012e84
 8004ae8:	20012e74 	.word	0x20012e74
 8004aec:	20012e80 	.word	0x20012e80

08004af0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004af6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004afa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004afc:	4b27      	ldr	r3, [pc, #156]	; (8004b9c <prvHeapInit+0xac>)
 8004afe:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f003 0307 	and.w	r3, r3, #7
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00c      	beq.n	8004b24 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	3307      	adds	r3, #7
 8004b0e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f023 0307 	bic.w	r3, r3, #7
 8004b16:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	4a1f      	ldr	r2, [pc, #124]	; (8004b9c <prvHeapInit+0xac>)
 8004b20:	4413      	add	r3, r2
 8004b22:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b28:	4a1d      	ldr	r2, [pc, #116]	; (8004ba0 <prvHeapInit+0xb0>)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004b2e:	4b1c      	ldr	r3, [pc, #112]	; (8004ba0 <prvHeapInit+0xb0>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	4413      	add	r3, r2
 8004b3a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004b3c:	2208      	movs	r2, #8
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	1a9b      	subs	r3, r3, r2
 8004b42:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f023 0307 	bic.w	r3, r3, #7
 8004b4a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4a15      	ldr	r2, [pc, #84]	; (8004ba4 <prvHeapInit+0xb4>)
 8004b50:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004b52:	4b14      	ldr	r3, [pc, #80]	; (8004ba4 <prvHeapInit+0xb4>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2200      	movs	r2, #0
 8004b58:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004b5a:	4b12      	ldr	r3, [pc, #72]	; (8004ba4 <prvHeapInit+0xb4>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	1ad2      	subs	r2, r2, r3
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b70:	4b0c      	ldr	r3, [pc, #48]	; (8004ba4 <prvHeapInit+0xb4>)
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	4a0a      	ldr	r2, [pc, #40]	; (8004ba8 <prvHeapInit+0xb8>)
 8004b7e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	4a09      	ldr	r2, [pc, #36]	; (8004bac <prvHeapInit+0xbc>)
 8004b86:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b88:	4b09      	ldr	r3, [pc, #36]	; (8004bb0 <prvHeapInit+0xc0>)
 8004b8a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004b8e:	601a      	str	r2, [r3, #0]
}
 8004b90:	bf00      	nop
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	20000268 	.word	0x20000268
 8004ba0:	20012e68 	.word	0x20012e68
 8004ba4:	20012e70 	.word	0x20012e70
 8004ba8:	20012e78 	.word	0x20012e78
 8004bac:	20012e74 	.word	0x20012e74
 8004bb0:	20012e84 	.word	0x20012e84

08004bb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004bbc:	4b28      	ldr	r3, [pc, #160]	; (8004c60 <prvInsertBlockIntoFreeList+0xac>)
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	e002      	b.n	8004bc8 <prvInsertBlockIntoFreeList+0x14>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d8f7      	bhi.n	8004bc2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	4413      	add	r3, r2
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d108      	bne.n	8004bf6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	441a      	add	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	441a      	add	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d118      	bne.n	8004c3c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	4b15      	ldr	r3, [pc, #84]	; (8004c64 <prvInsertBlockIntoFreeList+0xb0>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d00d      	beq.n	8004c32 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	441a      	add	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	e008      	b.n	8004c44 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c32:	4b0c      	ldr	r3, [pc, #48]	; (8004c64 <prvInsertBlockIntoFreeList+0xb0>)
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	601a      	str	r2, [r3, #0]
 8004c3a:	e003      	b.n	8004c44 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d002      	beq.n	8004c52 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004c52:	bf00      	nop
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	20012e68 	.word	0x20012e68
 8004c64:	20012e70 	.word	0x20012e70

08004c68 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004c6e:	4b26      	ldr	r3, [pc, #152]	; (8004d08 <_DoInit+0xa0>)
 8004c70:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004c72:	22a8      	movs	r2, #168	; 0xa8
 8004c74:	2100      	movs	r1, #0
 8004c76:	6838      	ldr	r0, [r7, #0]
 8004c78:	f002 f958 	bl	8006f2c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	2203      	movs	r2, #3
 8004c80:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2203      	movs	r2, #3
 8004c86:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	4a20      	ldr	r2, [pc, #128]	; (8004d0c <_DoInit+0xa4>)
 8004c8c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	4a1f      	ldr	r2, [pc, #124]	; (8004d10 <_DoInit+0xa8>)
 8004c92:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c9a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	2200      	movs	r2, #0
 8004cac:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	4a16      	ldr	r2, [pc, #88]	; (8004d0c <_DoInit+0xa4>)
 8004cb2:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	4a17      	ldr	r2, [pc, #92]	; (8004d14 <_DoInit+0xac>)
 8004cb8:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2210      	movs	r2, #16
 8004cbe:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004cd2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	607b      	str	r3, [r7, #4]
 8004cda:	e00c      	b.n	8004cf6 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f1c3 030f 	rsb	r3, r3, #15
 8004ce2:	4a0d      	ldr	r2, [pc, #52]	; (8004d18 <_DoInit+0xb0>)
 8004ce4:	5cd1      	ldrb	r1, [r2, r3]
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4413      	add	r3, r2
 8004cec:	460a      	mov	r2, r1
 8004cee:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	607b      	str	r3, [r7, #4]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b0f      	cmp	r3, #15
 8004cfa:	d9ef      	bls.n	8004cdc <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004cfc:	f3bf 8f5f 	dmb	sy
}
 8004d00:	bf00      	nop
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	20012e88 	.word	0x20012e88
 8004d0c:	080078b8 	.word	0x080078b8
 8004d10:	20012f30 	.word	0x20012f30
 8004d14:	20013330 	.word	0x20013330
 8004d18:	08007990 	.word	0x08007990

08004d1c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b08c      	sub	sp, #48	; 0x30
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004d28:	4b3e      	ldr	r3, [pc, #248]	; (8004e24 <SEGGER_RTT_ReadNoLock+0x108>)
 8004d2a:	623b      	str	r3, [r7, #32]
 8004d2c:	6a3b      	ldr	r3, [r7, #32]
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <SEGGER_RTT_ReadNoLock+0x1e>
 8004d36:	f7ff ff97 	bl	8004c68 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	4413      	add	r3, r2
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	3360      	adds	r3, #96	; 0x60
 8004d46:	4a37      	ldr	r2, [pc, #220]	; (8004e24 <SEGGER_RTT_ReadNoLock+0x108>)
 8004d48:	4413      	add	r3, r2
 8004d4a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004d60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d92b      	bls.n	8004dc0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4293      	cmp	r3, r2
 8004d78:	bf28      	it	cs
 8004d7a:	4613      	movcs	r3, r2
 8004d7c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d84:	4413      	add	r3, r2
 8004d86:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	6939      	ldr	r1, [r7, #16]
 8004d8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d8e:	f002 f8bf 	bl	8006f10 <memcpy>
    NumBytesRead += NumBytesRem;
 8004d92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	4413      	add	r3, r2
 8004d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	4413      	add	r3, r2
 8004da0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004daa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	4413      	add	r3, r2
 8004db0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d101      	bne.n	8004dc0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	bf28      	it	cs
 8004dd0:	4613      	movcs	r3, r2
 8004dd2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d019      	beq.n	8004e0e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de0:	4413      	add	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	6939      	ldr	r1, [r7, #16]
 8004de8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004dea:	f002 f891 	bl	8006f10 <memcpy>
    NumBytesRead += NumBytesRem;
 8004dee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	4413      	add	r3, r2
 8004df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004e06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d002      	beq.n	8004e1a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e18:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3730      	adds	r7, #48	; 0x30
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	20012e88 	.word	0x20012e88

08004e28 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b088      	sub	sp, #32
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
 8004e34:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004e36:	4b3d      	ldr	r3, [pc, #244]	; (8004f2c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004e38:	61bb      	str	r3, [r7, #24]
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004e44:	f7ff ff10 	bl	8004c68 <_DoInit>
  SEGGER_RTT_LOCK();
 8004e48:	f3ef 8311 	mrs	r3, BASEPRI
 8004e4c:	f04f 0120 	mov.w	r1, #32
 8004e50:	f381 8811 	msr	BASEPRI, r1
 8004e54:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004e56:	4b35      	ldr	r3, [pc, #212]	; (8004f2c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004e58:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004e5e:	6939      	ldr	r1, [r7, #16]
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	1c5a      	adds	r2, r3, #1
 8004e64:	4613      	mov	r3, r2
 8004e66:	005b      	lsls	r3, r3, #1
 8004e68:	4413      	add	r3, r2
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	440b      	add	r3, r1
 8004e6e:	3304      	adds	r3, #4
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d008      	beq.n	8004e88 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	69fa      	ldr	r2, [r7, #28]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	dbeb      	blt.n	8004e5e <SEGGER_RTT_AllocUpBuffer+0x36>
 8004e86:	e000      	b.n	8004e8a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004e88:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	69fa      	ldr	r2, [r7, #28]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	da3f      	bge.n	8004f14 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004e94:	6939      	ldr	r1, [r7, #16]
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	1c5a      	adds	r2, r3, #1
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	4413      	add	r3, r2
 8004ea0:	00db      	lsls	r3, r3, #3
 8004ea2:	440b      	add	r3, r1
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004ea8:	6939      	ldr	r1, [r7, #16]
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	1c5a      	adds	r2, r3, #1
 8004eae:	4613      	mov	r3, r2
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	4413      	add	r3, r2
 8004eb4:	00db      	lsls	r3, r3, #3
 8004eb6:	440b      	add	r3, r1
 8004eb8:	3304      	adds	r3, #4
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004ebe:	6939      	ldr	r1, [r7, #16]
 8004ec0:	69fa      	ldr	r2, [r7, #28]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	4413      	add	r3, r2
 8004ec8:	00db      	lsls	r3, r3, #3
 8004eca:	440b      	add	r3, r1
 8004ecc:	3320      	adds	r3, #32
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004ed2:	6939      	ldr	r1, [r7, #16]
 8004ed4:	69fa      	ldr	r2, [r7, #28]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	4413      	add	r3, r2
 8004edc:	00db      	lsls	r3, r3, #3
 8004ede:	440b      	add	r3, r1
 8004ee0:	3328      	adds	r3, #40	; 0x28
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004ee6:	6939      	ldr	r1, [r7, #16]
 8004ee8:	69fa      	ldr	r2, [r7, #28]
 8004eea:	4613      	mov	r3, r2
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	4413      	add	r3, r2
 8004ef0:	00db      	lsls	r3, r3, #3
 8004ef2:	440b      	add	r3, r1
 8004ef4:	3324      	adds	r3, #36	; 0x24
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004efa:	6939      	ldr	r1, [r7, #16]
 8004efc:	69fa      	ldr	r2, [r7, #28]
 8004efe:	4613      	mov	r3, r2
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	4413      	add	r3, r2
 8004f04:	00db      	lsls	r3, r3, #3
 8004f06:	440b      	add	r3, r1
 8004f08:	332c      	adds	r3, #44	; 0x2c
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004f0e:	f3bf 8f5f 	dmb	sy
 8004f12:	e002      	b.n	8004f1a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004f14:	f04f 33ff 	mov.w	r3, #4294967295
 8004f18:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004f20:	69fb      	ldr	r3, [r7, #28]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3720      	adds	r7, #32
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	20012e88 	.word	0x20012e88

08004f30 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b08a      	sub	sp, #40	; 0x28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
 8004f3c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004f3e:	4b21      	ldr	r3, [pc, #132]	; (8004fc4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004f40:	623b      	str	r3, [r7, #32]
 8004f42:	6a3b      	ldr	r3, [r7, #32]
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d101      	bne.n	8004f50 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004f4c:	f7ff fe8c 	bl	8004c68 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004f50:	4b1c      	ldr	r3, [pc, #112]	; (8004fc4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004f52:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d82c      	bhi.n	8004fb4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004f5a:	f3ef 8311 	mrs	r3, BASEPRI
 8004f5e:	f04f 0120 	mov.w	r1, #32
 8004f62:	f381 8811 	msr	BASEPRI, r1
 8004f66:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	005b      	lsls	r3, r3, #1
 8004f6e:	4413      	add	r3, r2
 8004f70:	00db      	lsls	r3, r3, #3
 8004f72:	3360      	adds	r3, #96	; 0x60
 8004f74:	69fa      	ldr	r2, [r7, #28]
 8004f76:	4413      	add	r3, r2
 8004f78:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00e      	beq.n	8004f9e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	2200      	movs	r2, #0
 8004f96:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fa2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004fa4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fb2:	e002      	b.n	8004fba <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8004fb8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3728      	adds	r7, #40	; 0x28
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	20012e88 	.word	0x20012e88

08004fc8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004fc8:	b480      	push	{r7}
 8004fca:	b087      	sub	sp, #28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00f      	beq.n	8004ffe <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8004fde:	e002      	b.n	8004fe6 <_EncodeStr+0x1e>
      Len++;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	4413      	add	r3, r2
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1f6      	bne.n	8004fe0 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d901      	bls.n	8004ffe <_EncodeStr+0x36>
      Len = Limit;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	2bfe      	cmp	r3, #254	; 0xfe
 8005002:	d806      	bhi.n	8005012 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	1c5a      	adds	r2, r3, #1
 8005008:	60fa      	str	r2, [r7, #12]
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	b2d2      	uxtb	r2, r2
 800500e:	701a      	strb	r2, [r3, #0]
 8005010:	e011      	b.n	8005036 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	1c5a      	adds	r2, r3, #1
 8005016:	60fa      	str	r2, [r7, #12]
 8005018:	22ff      	movs	r2, #255	; 0xff
 800501a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	1c5a      	adds	r2, r3, #1
 8005020:	60fa      	str	r2, [r7, #12]
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	b2d2      	uxtb	r2, r2
 8005026:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	0a19      	lsrs	r1, r3, #8
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	1c5a      	adds	r2, r3, #1
 8005030:	60fa      	str	r2, [r7, #12]
 8005032:	b2ca      	uxtb	r2, r1
 8005034:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005036:	2300      	movs	r3, #0
 8005038:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800503a:	e00a      	b.n	8005052 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	1c53      	adds	r3, r2, #1
 8005040:	60bb      	str	r3, [r7, #8]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	1c59      	adds	r1, r3, #1
 8005046:	60f9      	str	r1, [r7, #12]
 8005048:	7812      	ldrb	r2, [r2, #0]
 800504a:	701a      	strb	r2, [r3, #0]
    n++;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	3301      	adds	r3, #1
 8005050:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	429a      	cmp	r2, r3
 8005058:	d3f0      	bcc.n	800503c <_EncodeStr+0x74>
  }
  return pPayload;
 800505a:	68fb      	ldr	r3, [r7, #12]
}
 800505c:	4618      	mov	r0, r3
 800505e:	371c      	adds	r7, #28
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	3307      	adds	r3, #7
}
 8005074:	4618      	mov	r0, r3
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005086:	4b35      	ldr	r3, [pc, #212]	; (800515c <_HandleIncomingPacket+0xdc>)
 8005088:	7e1b      	ldrb	r3, [r3, #24]
 800508a:	4618      	mov	r0, r3
 800508c:	1cfb      	adds	r3, r7, #3
 800508e:	2201      	movs	r2, #1
 8005090:	4619      	mov	r1, r3
 8005092:	f7ff fe43 	bl	8004d1c <SEGGER_RTT_ReadNoLock>
 8005096:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d052      	beq.n	8005144 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 800509e:	78fb      	ldrb	r3, [r7, #3]
 80050a0:	2b80      	cmp	r3, #128	; 0x80
 80050a2:	d031      	beq.n	8005108 <_HandleIncomingPacket+0x88>
 80050a4:	2b80      	cmp	r3, #128	; 0x80
 80050a6:	dc40      	bgt.n	800512a <_HandleIncomingPacket+0xaa>
 80050a8:	2b07      	cmp	r3, #7
 80050aa:	dc15      	bgt.n	80050d8 <_HandleIncomingPacket+0x58>
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	dd3c      	ble.n	800512a <_HandleIncomingPacket+0xaa>
 80050b0:	3b01      	subs	r3, #1
 80050b2:	2b06      	cmp	r3, #6
 80050b4:	d839      	bhi.n	800512a <_HandleIncomingPacket+0xaa>
 80050b6:	a201      	add	r2, pc, #4	; (adr r2, 80050bc <_HandleIncomingPacket+0x3c>)
 80050b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050bc:	080050df 	.word	0x080050df
 80050c0:	080050e5 	.word	0x080050e5
 80050c4:	080050eb 	.word	0x080050eb
 80050c8:	080050f1 	.word	0x080050f1
 80050cc:	080050f7 	.word	0x080050f7
 80050d0:	080050fd 	.word	0x080050fd
 80050d4:	08005103 	.word	0x08005103
 80050d8:	2b7f      	cmp	r3, #127	; 0x7f
 80050da:	d035      	beq.n	8005148 <_HandleIncomingPacket+0xc8>
 80050dc:	e025      	b.n	800512a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80050de:	f000 ffc9 	bl	8006074 <SEGGER_SYSVIEW_Start>
      break;
 80050e2:	e036      	b.n	8005152 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80050e4:	f001 f880 	bl	80061e8 <SEGGER_SYSVIEW_Stop>
      break;
 80050e8:	e033      	b.n	8005152 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80050ea:	f001 fa59 	bl	80065a0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80050ee:	e030      	b.n	8005152 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80050f0:	f001 fa1e 	bl	8006530 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80050f4:	e02d      	b.n	8005152 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80050f6:	f001 f89d 	bl	8006234 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80050fa:	e02a      	b.n	8005152 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80050fc:	f001 fcec 	bl	8006ad8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005100:	e027      	b.n	8005152 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005102:	f001 fccb 	bl	8006a9c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005106:	e024      	b.n	8005152 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005108:	4b14      	ldr	r3, [pc, #80]	; (800515c <_HandleIncomingPacket+0xdc>)
 800510a:	7e1b      	ldrb	r3, [r3, #24]
 800510c:	4618      	mov	r0, r3
 800510e:	1cfb      	adds	r3, r7, #3
 8005110:	2201      	movs	r2, #1
 8005112:	4619      	mov	r1, r3
 8005114:	f7ff fe02 	bl	8004d1c <SEGGER_RTT_ReadNoLock>
 8005118:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d015      	beq.n	800514c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005120:	78fb      	ldrb	r3, [r7, #3]
 8005122:	4618      	mov	r0, r3
 8005124:	f001 fc3a 	bl	800699c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005128:	e010      	b.n	800514c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800512a:	78fb      	ldrb	r3, [r7, #3]
 800512c:	b25b      	sxtb	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	da0e      	bge.n	8005150 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005132:	4b0a      	ldr	r3, [pc, #40]	; (800515c <_HandleIncomingPacket+0xdc>)
 8005134:	7e1b      	ldrb	r3, [r3, #24]
 8005136:	4618      	mov	r0, r3
 8005138:	1cfb      	adds	r3, r7, #3
 800513a:	2201      	movs	r2, #1
 800513c:	4619      	mov	r1, r3
 800513e:	f7ff fded 	bl	8004d1c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005142:	e005      	b.n	8005150 <_HandleIncomingPacket+0xd0>
    }
  }
 8005144:	bf00      	nop
 8005146:	e004      	b.n	8005152 <_HandleIncomingPacket+0xd2>
      break;
 8005148:	bf00      	nop
 800514a:	e002      	b.n	8005152 <_HandleIncomingPacket+0xd2>
      break;
 800514c:	bf00      	nop
 800514e:	e000      	b.n	8005152 <_HandleIncomingPacket+0xd2>
      break;
 8005150:	bf00      	nop
}
 8005152:	bf00      	nop
 8005154:	3708      	adds	r7, #8
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	20014348 	.word	0x20014348

08005160 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005160:	b580      	push	{r7, lr}
 8005162:	b08c      	sub	sp, #48	; 0x30
 8005164:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005166:	2301      	movs	r3, #1
 8005168:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800516a:	1d3b      	adds	r3, r7, #4
 800516c:	3301      	adds	r3, #1
 800516e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005174:	4b31      	ldr	r3, [pc, #196]	; (800523c <_TrySendOverflowPacket+0xdc>)
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	62bb      	str	r3, [r7, #40]	; 0x28
 800517a:	e00b      	b.n	8005194 <_TrySendOverflowPacket+0x34>
 800517c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517e:	b2da      	uxtb	r2, r3
 8005180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005182:	1c59      	adds	r1, r3, #1
 8005184:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005186:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800518a:	b2d2      	uxtb	r2, r2
 800518c:	701a      	strb	r2, [r3, #0]
 800518e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005190:	09db      	lsrs	r3, r3, #7
 8005192:	62bb      	str	r3, [r7, #40]	; 0x28
 8005194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005196:	2b7f      	cmp	r3, #127	; 0x7f
 8005198:	d8f0      	bhi.n	800517c <_TrySendOverflowPacket+0x1c>
 800519a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519c:	1c5a      	adds	r2, r3, #1
 800519e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051a2:	b2d2      	uxtb	r2, r2
 80051a4:	701a      	strb	r2, [r3, #0]
 80051a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80051aa:	4b25      	ldr	r3, [pc, #148]	; (8005240 <_TrySendOverflowPacket+0xe0>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80051b0:	4b22      	ldr	r3, [pc, #136]	; (800523c <_TrySendOverflowPacket+0xdc>)
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	69ba      	ldr	r2, [r7, #24]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	627b      	str	r3, [r7, #36]	; 0x24
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	623b      	str	r3, [r7, #32]
 80051c2:	e00b      	b.n	80051dc <_TrySendOverflowPacket+0x7c>
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	1c59      	adds	r1, r3, #1
 80051cc:	6279      	str	r1, [r7, #36]	; 0x24
 80051ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051d2:	b2d2      	uxtb	r2, r2
 80051d4:	701a      	strb	r2, [r3, #0]
 80051d6:	6a3b      	ldr	r3, [r7, #32]
 80051d8:	09db      	lsrs	r3, r3, #7
 80051da:	623b      	str	r3, [r7, #32]
 80051dc:	6a3b      	ldr	r3, [r7, #32]
 80051de:	2b7f      	cmp	r3, #127	; 0x7f
 80051e0:	d8f0      	bhi.n	80051c4 <_TrySendOverflowPacket+0x64>
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	1c5a      	adds	r2, r3, #1
 80051e6:	627a      	str	r2, [r7, #36]	; 0x24
 80051e8:	6a3a      	ldr	r2, [r7, #32]
 80051ea:	b2d2      	uxtb	r2, r2
 80051ec:	701a      	strb	r2, [r3, #0]
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80051f2:	4b12      	ldr	r3, [pc, #72]	; (800523c <_TrySendOverflowPacket+0xdc>)
 80051f4:	785b      	ldrb	r3, [r3, #1]
 80051f6:	4618      	mov	r0, r3
 80051f8:	1d3b      	adds	r3, r7, #4
 80051fa:	69fa      	ldr	r2, [r7, #28]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	461a      	mov	r2, r3
 8005200:	1d3b      	adds	r3, r7, #4
 8005202:	4619      	mov	r1, r3
 8005204:	f7fa fff4 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005208:	4603      	mov	r3, r0
 800520a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d009      	beq.n	8005226 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005212:	4a0a      	ldr	r2, [pc, #40]	; (800523c <_TrySendOverflowPacket+0xdc>)
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005218:	4b08      	ldr	r3, [pc, #32]	; (800523c <_TrySendOverflowPacket+0xdc>)
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	3b01      	subs	r3, #1
 800521e:	b2da      	uxtb	r2, r3
 8005220:	4b06      	ldr	r3, [pc, #24]	; (800523c <_TrySendOverflowPacket+0xdc>)
 8005222:	701a      	strb	r2, [r3, #0]
 8005224:	e004      	b.n	8005230 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005226:	4b05      	ldr	r3, [pc, #20]	; (800523c <_TrySendOverflowPacket+0xdc>)
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	3301      	adds	r3, #1
 800522c:	4a03      	ldr	r2, [pc, #12]	; (800523c <_TrySendOverflowPacket+0xdc>)
 800522e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005230:	693b      	ldr	r3, [r7, #16]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3730      	adds	r7, #48	; 0x30
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	20014348 	.word	0x20014348
 8005240:	e0001004 	.word	0xe0001004

08005244 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005244:	b580      	push	{r7, lr}
 8005246:	b08a      	sub	sp, #40	; 0x28
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005250:	4b98      	ldr	r3, [pc, #608]	; (80054b4 <_SendPacket+0x270>)
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d010      	beq.n	800527a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005258:	4b96      	ldr	r3, [pc, #600]	; (80054b4 <_SendPacket+0x270>)
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	f000 812d 	beq.w	80054bc <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005262:	4b94      	ldr	r3, [pc, #592]	; (80054b4 <_SendPacket+0x270>)
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	2b02      	cmp	r3, #2
 8005268:	d109      	bne.n	800527e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800526a:	f7ff ff79 	bl	8005160 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800526e:	4b91      	ldr	r3, [pc, #580]	; (80054b4 <_SendPacket+0x270>)
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	2b01      	cmp	r3, #1
 8005274:	f040 8124 	bne.w	80054c0 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8005278:	e001      	b.n	800527e <_SendPacket+0x3a>
    goto Send;
 800527a:	bf00      	nop
 800527c:	e000      	b.n	8005280 <_SendPacket+0x3c>
Send:
 800527e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b1f      	cmp	r3, #31
 8005284:	d809      	bhi.n	800529a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005286:	4b8b      	ldr	r3, [pc, #556]	; (80054b4 <_SendPacket+0x270>)
 8005288:	69da      	ldr	r2, [r3, #28]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	fa22 f303 	lsr.w	r3, r2, r3
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	f040 8115 	bne.w	80054c4 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b17      	cmp	r3, #23
 800529e:	d807      	bhi.n	80052b0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	3b01      	subs	r3, #1
 80052a4:	60fb      	str	r3, [r7, #12]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	701a      	strb	r2, [r3, #0]
 80052ae:	e0c4      	b.n	800543a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	2b7f      	cmp	r3, #127	; 0x7f
 80052bc:	d912      	bls.n	80052e4 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	09da      	lsrs	r2, r3, #7
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	3b01      	subs	r3, #1
 80052c6:	60fb      	str	r3, [r7, #12]
 80052c8:	b2d2      	uxtb	r2, r2
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	3a01      	subs	r2, #1
 80052d6:	60fa      	str	r2, [r7, #12]
 80052d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	701a      	strb	r2, [r3, #0]
 80052e2:	e006      	b.n	80052f2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	3b01      	subs	r3, #1
 80052e8:	60fb      	str	r3, [r7, #12]
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2b7e      	cmp	r3, #126	; 0x7e
 80052f6:	d807      	bhi.n	8005308 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	3b01      	subs	r3, #1
 80052fc:	60fb      	str	r3, [r7, #12]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	b2da      	uxtb	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	701a      	strb	r2, [r3, #0]
 8005306:	e098      	b.n	800543a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800530e:	d212      	bcs.n	8005336 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	09da      	lsrs	r2, r3, #7
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	3b01      	subs	r3, #1
 8005318:	60fb      	str	r3, [r7, #12]
 800531a:	b2d2      	uxtb	r2, r2
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	b2db      	uxtb	r3, r3
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	3a01      	subs	r2, #1
 8005328:	60fa      	str	r2, [r7, #12]
 800532a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800532e:	b2da      	uxtb	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	701a      	strb	r2, [r3, #0]
 8005334:	e081      	b.n	800543a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800533c:	d21d      	bcs.n	800537a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	0b9a      	lsrs	r2, r3, #14
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	3b01      	subs	r3, #1
 8005346:	60fb      	str	r3, [r7, #12]
 8005348:	b2d2      	uxtb	r2, r2
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	09db      	lsrs	r3, r3, #7
 8005352:	b2db      	uxtb	r3, r3
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	3a01      	subs	r2, #1
 8005358:	60fa      	str	r2, [r7, #12]
 800535a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800535e:	b2da      	uxtb	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	b2db      	uxtb	r3, r3
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	3a01      	subs	r2, #1
 800536c:	60fa      	str	r2, [r7, #12]
 800536e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005372:	b2da      	uxtb	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	701a      	strb	r2, [r3, #0]
 8005378:	e05f      	b.n	800543a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005380:	d228      	bcs.n	80053d4 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	0d5a      	lsrs	r2, r3, #21
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	3b01      	subs	r3, #1
 800538a:	60fb      	str	r3, [r7, #12]
 800538c:	b2d2      	uxtb	r2, r2
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	0b9b      	lsrs	r3, r3, #14
 8005396:	b2db      	uxtb	r3, r3
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	3a01      	subs	r2, #1
 800539c:	60fa      	str	r2, [r7, #12]
 800539e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	09db      	lsrs	r3, r3, #7
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	3a01      	subs	r2, #1
 80053b2:	60fa      	str	r2, [r7, #12]
 80053b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	3a01      	subs	r2, #1
 80053c6:	60fa      	str	r2, [r7, #12]
 80053c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80053cc:	b2da      	uxtb	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	701a      	strb	r2, [r3, #0]
 80053d2:	e032      	b.n	800543a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	0f1a      	lsrs	r2, r3, #28
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	3b01      	subs	r3, #1
 80053dc:	60fb      	str	r3, [r7, #12]
 80053de:	b2d2      	uxtb	r2, r2
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	0d5b      	lsrs	r3, r3, #21
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	3a01      	subs	r2, #1
 80053ee:	60fa      	str	r2, [r7, #12]
 80053f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80053f4:	b2da      	uxtb	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	0b9b      	lsrs	r3, r3, #14
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	3a01      	subs	r2, #1
 8005404:	60fa      	str	r2, [r7, #12]
 8005406:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800540a:	b2da      	uxtb	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	09db      	lsrs	r3, r3, #7
 8005414:	b2db      	uxtb	r3, r3
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	3a01      	subs	r2, #1
 800541a:	60fa      	str	r2, [r7, #12]
 800541c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005420:	b2da      	uxtb	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	b2db      	uxtb	r3, r3
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	3a01      	subs	r2, #1
 800542e:	60fa      	str	r2, [r7, #12]
 8005430:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005434:	b2da      	uxtb	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800543a:	4b1f      	ldr	r3, [pc, #124]	; (80054b8 <_SendPacket+0x274>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005440:	4b1c      	ldr	r3, [pc, #112]	; (80054b4 <_SendPacket+0x270>)
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	627b      	str	r3, [r7, #36]	; 0x24
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	623b      	str	r3, [r7, #32]
 8005452:	e00b      	b.n	800546c <_SendPacket+0x228>
 8005454:	6a3b      	ldr	r3, [r7, #32]
 8005456:	b2da      	uxtb	r2, r3
 8005458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545a:	1c59      	adds	r1, r3, #1
 800545c:	6279      	str	r1, [r7, #36]	; 0x24
 800545e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005462:	b2d2      	uxtb	r2, r2
 8005464:	701a      	strb	r2, [r3, #0]
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	09db      	lsrs	r3, r3, #7
 800546a:	623b      	str	r3, [r7, #32]
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	2b7f      	cmp	r3, #127	; 0x7f
 8005470:	d8f0      	bhi.n	8005454 <_SendPacket+0x210>
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	1c5a      	adds	r2, r3, #1
 8005476:	627a      	str	r2, [r7, #36]	; 0x24
 8005478:	6a3a      	ldr	r2, [r7, #32]
 800547a:	b2d2      	uxtb	r2, r2
 800547c:	701a      	strb	r2, [r3, #0]
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005482:	4b0c      	ldr	r3, [pc, #48]	; (80054b4 <_SendPacket+0x270>)
 8005484:	785b      	ldrb	r3, [r3, #1]
 8005486:	4618      	mov	r0, r3
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	461a      	mov	r2, r3
 8005490:	68f9      	ldr	r1, [r7, #12]
 8005492:	f7fa fead 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005496:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800549e:	4a05      	ldr	r2, [pc, #20]	; (80054b4 <_SendPacket+0x270>)
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	60d3      	str	r3, [r2, #12]
 80054a4:	e00f      	b.n	80054c6 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80054a6:	4b03      	ldr	r3, [pc, #12]	; (80054b4 <_SendPacket+0x270>)
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	3301      	adds	r3, #1
 80054ac:	b2da      	uxtb	r2, r3
 80054ae:	4b01      	ldr	r3, [pc, #4]	; (80054b4 <_SendPacket+0x270>)
 80054b0:	701a      	strb	r2, [r3, #0]
 80054b2:	e008      	b.n	80054c6 <_SendPacket+0x282>
 80054b4:	20014348 	.word	0x20014348
 80054b8:	e0001004 	.word	0xe0001004
    goto SendDone;
 80054bc:	bf00      	nop
 80054be:	e002      	b.n	80054c6 <_SendPacket+0x282>
      goto SendDone;
 80054c0:	bf00      	nop
 80054c2:	e000      	b.n	80054c6 <_SendPacket+0x282>
      goto SendDone;
 80054c4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80054c6:	4b14      	ldr	r3, [pc, #80]	; (8005518 <_SendPacket+0x2d4>)
 80054c8:	7e1b      	ldrb	r3, [r3, #24]
 80054ca:	4619      	mov	r1, r3
 80054cc:	4a13      	ldr	r2, [pc, #76]	; (800551c <_SendPacket+0x2d8>)
 80054ce:	460b      	mov	r3, r1
 80054d0:	005b      	lsls	r3, r3, #1
 80054d2:	440b      	add	r3, r1
 80054d4:	00db      	lsls	r3, r3, #3
 80054d6:	4413      	add	r3, r2
 80054d8:	336c      	adds	r3, #108	; 0x6c
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	4b0e      	ldr	r3, [pc, #56]	; (8005518 <_SendPacket+0x2d4>)
 80054de:	7e1b      	ldrb	r3, [r3, #24]
 80054e0:	4618      	mov	r0, r3
 80054e2:	490e      	ldr	r1, [pc, #56]	; (800551c <_SendPacket+0x2d8>)
 80054e4:	4603      	mov	r3, r0
 80054e6:	005b      	lsls	r3, r3, #1
 80054e8:	4403      	add	r3, r0
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	440b      	add	r3, r1
 80054ee:	3370      	adds	r3, #112	; 0x70
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d00b      	beq.n	800550e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80054f6:	4b08      	ldr	r3, [pc, #32]	; (8005518 <_SendPacket+0x2d4>)
 80054f8:	789b      	ldrb	r3, [r3, #2]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d107      	bne.n	800550e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80054fe:	4b06      	ldr	r3, [pc, #24]	; (8005518 <_SendPacket+0x2d4>)
 8005500:	2201      	movs	r2, #1
 8005502:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005504:	f7ff fdbc 	bl	8005080 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005508:	4b03      	ldr	r3, [pc, #12]	; (8005518 <_SendPacket+0x2d4>)
 800550a:	2200      	movs	r2, #0
 800550c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800550e:	bf00      	nop
 8005510:	3728      	adds	r7, #40	; 0x28
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	20014348 	.word	0x20014348
 800551c:	20012e88 	.word	0x20012e88

08005520 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005520:	b580      	push	{r7, lr}
 8005522:	b08a      	sub	sp, #40	; 0x28
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	460b      	mov	r3, r1
 800552a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	3301      	adds	r3, #1
 8005536:	2b80      	cmp	r3, #128	; 0x80
 8005538:	d80a      	bhi.n	8005550 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	1c59      	adds	r1, r3, #1
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	6051      	str	r1, [r2, #4]
 8005544:	78fa      	ldrb	r2, [r7, #3]
 8005546:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	1c5a      	adds	r2, r3, #1
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	2b80      	cmp	r3, #128	; 0x80
 8005556:	d15a      	bne.n	800560e <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691a      	ldr	r2, [r3, #16]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	b2d2      	uxtb	r2, r2
 8005562:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	627b      	str	r3, [r7, #36]	; 0x24
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	623b      	str	r3, [r7, #32]
 8005578:	e00b      	b.n	8005592 <_StoreChar+0x72>
 800557a:	6a3b      	ldr	r3, [r7, #32]
 800557c:	b2da      	uxtb	r2, r3
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005580:	1c59      	adds	r1, r3, #1
 8005582:	6279      	str	r1, [r7, #36]	; 0x24
 8005584:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005588:	b2d2      	uxtb	r2, r2
 800558a:	701a      	strb	r2, [r3, #0]
 800558c:	6a3b      	ldr	r3, [r7, #32]
 800558e:	09db      	lsrs	r3, r3, #7
 8005590:	623b      	str	r3, [r7, #32]
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	2b7f      	cmp	r3, #127	; 0x7f
 8005596:	d8f0      	bhi.n	800557a <_StoreChar+0x5a>
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	1c5a      	adds	r2, r3, #1
 800559c:	627a      	str	r2, [r7, #36]	; 0x24
 800559e:	6a3a      	ldr	r2, [r7, #32]
 80055a0:	b2d2      	uxtb	r2, r2
 80055a2:	701a      	strb	r2, [r3, #0]
 80055a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a6:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	61fb      	str	r3, [r7, #28]
 80055ac:	2300      	movs	r3, #0
 80055ae:	61bb      	str	r3, [r7, #24]
 80055b0:	e00b      	b.n	80055ca <_StoreChar+0xaa>
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	b2da      	uxtb	r2, r3
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	1c59      	adds	r1, r3, #1
 80055ba:	61f9      	str	r1, [r7, #28]
 80055bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055c0:	b2d2      	uxtb	r2, r2
 80055c2:	701a      	strb	r2, [r3, #0]
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	09db      	lsrs	r3, r3, #7
 80055c8:	61bb      	str	r3, [r7, #24]
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	2b7f      	cmp	r3, #127	; 0x7f
 80055ce:	d8f0      	bhi.n	80055b2 <_StoreChar+0x92>
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	1c5a      	adds	r2, r3, #1
 80055d4:	61fa      	str	r2, [r7, #28]
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	b2d2      	uxtb	r2, r2
 80055da:	701a      	strb	r2, [r3, #0]
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	221a      	movs	r2, #26
 80055e6:	6939      	ldr	r1, [r7, #16]
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7ff fe2b 	bl	8005244 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7ff fd38 	bl	8005068 <_PreparePacket>
 80055f8:	4602      	mov	r2, r0
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	1c5a      	adds	r2, r3, #1
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	611a      	str	r2, [r3, #16]
  }
}
 800560e:	bf00      	nop
 8005610:	3728      	adds	r7, #40	; 0x28
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
	...

08005618 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005618:	b580      	push	{r7, lr}
 800561a:	b08a      	sub	sp, #40	; 0x28
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
 8005624:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800562a:	2301      	movs	r3, #1
 800562c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800562e:	2301      	movs	r3, #1
 8005630:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005632:	e007      	b.n	8005644 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005634:	6a3a      	ldr	r2, [r7, #32]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	fbb2 f3f3 	udiv	r3, r2, r3
 800563c:	623b      	str	r3, [r7, #32]
    Width++;
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	3301      	adds	r3, #1
 8005642:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005644:	6a3a      	ldr	r2, [r7, #32]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	429a      	cmp	r2, r3
 800564a:	d2f3      	bcs.n	8005634 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	429a      	cmp	r2, r3
 8005652:	d901      	bls.n	8005658 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	2b00      	cmp	r3, #0
 8005660:	d11f      	bne.n	80056a2 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005664:	2b00      	cmp	r3, #0
 8005666:	d01c      	beq.n	80056a2 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566a:	f003 0302 	and.w	r3, r3, #2
 800566e:	2b00      	cmp	r3, #0
 8005670:	d005      	beq.n	800567e <_PrintUnsigned+0x66>
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d102      	bne.n	800567e <_PrintUnsigned+0x66>
        c = '0';
 8005678:	2330      	movs	r3, #48	; 0x30
 800567a:	76fb      	strb	r3, [r7, #27]
 800567c:	e001      	b.n	8005682 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800567e:	2320      	movs	r3, #32
 8005680:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005682:	e007      	b.n	8005694 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005686:	3b01      	subs	r3, #1
 8005688:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800568a:	7efb      	ldrb	r3, [r7, #27]
 800568c:	4619      	mov	r1, r3
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f7ff ff46 	bl	8005520 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005696:	2b00      	cmp	r3, #0
 8005698:	d003      	beq.n	80056a2 <_PrintUnsigned+0x8a>
 800569a:	69fa      	ldr	r2, [r7, #28]
 800569c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569e:	429a      	cmp	r2, r3
 80056a0:	d3f0      	bcc.n	8005684 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d903      	bls.n	80056b0 <_PrintUnsigned+0x98>
      NumDigits--;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	3b01      	subs	r3, #1
 80056ac:	603b      	str	r3, [r7, #0]
 80056ae:	e009      	b.n	80056c4 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b8:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d200      	bcs.n	80056c4 <_PrintUnsigned+0xac>
        break;
 80056c2:	e005      	b.n	80056d0 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	fb02 f303 	mul.w	r3, r2, r3
 80056cc:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80056ce:	e7e8      	b.n	80056a2 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d8:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056de:	fb02 f303 	mul.w	r3, r2, r3
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80056e8:	4a15      	ldr	r2, [pc, #84]	; (8005740 <_PrintUnsigned+0x128>)
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	4413      	add	r3, r2
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	4619      	mov	r1, r3
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f7ff ff14 	bl	8005520 <_StoreChar>
    Digit /= Base;
 80056f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005700:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1e3      	bne.n	80056d0 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b00      	cmp	r3, #0
 8005710:	d011      	beq.n	8005736 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00e      	beq.n	8005736 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005718:	e006      	b.n	8005728 <_PrintUnsigned+0x110>
        FieldWidth--;
 800571a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571c:	3b01      	subs	r3, #1
 800571e:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005720:	2120      	movs	r1, #32
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f7ff fefc 	bl	8005520 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572a:	2b00      	cmp	r3, #0
 800572c:	d003      	beq.n	8005736 <_PrintUnsigned+0x11e>
 800572e:	69fa      	ldr	r2, [r7, #28]
 8005730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005732:	429a      	cmp	r2, r3
 8005734:	d3f1      	bcc.n	800571a <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005736:	bf00      	nop
 8005738:	3728      	adds	r7, #40	; 0x28
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	080079b0 	.word	0x080079b0

08005744 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005744:	b580      	push	{r7, lr}
 8005746:	b088      	sub	sp, #32
 8005748:	af02      	add	r7, sp, #8
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
 8005750:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2b00      	cmp	r3, #0
 8005756:	bfb8      	it	lt
 8005758:	425b      	neglt	r3, r3
 800575a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800575c:	2301      	movs	r3, #1
 800575e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005760:	e007      	b.n	8005772 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	fb92 f3f3 	sdiv	r3, r2, r3
 800576a:	613b      	str	r3, [r7, #16]
    Width++;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	3301      	adds	r3, #1
 8005770:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	429a      	cmp	r2, r3
 8005778:	daf3      	bge.n	8005762 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	429a      	cmp	r2, r3
 8005780:	d901      	bls.n	8005786 <_PrintInt+0x42>
    Width = NumDigits;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005786:	6a3b      	ldr	r3, [r7, #32]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00a      	beq.n	80057a2 <_PrintInt+0x5e>
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	db04      	blt.n	800579c <_PrintInt+0x58>
 8005792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005794:	f003 0304 	and.w	r3, r3, #4
 8005798:	2b00      	cmp	r3, #0
 800579a:	d002      	beq.n	80057a2 <_PrintInt+0x5e>
    FieldWidth--;
 800579c:	6a3b      	ldr	r3, [r7, #32]
 800579e:	3b01      	subs	r3, #1
 80057a0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80057a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a4:	f003 0302 	and.w	r3, r3, #2
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <_PrintInt+0x6e>
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d016      	beq.n	80057e0 <_PrintInt+0x9c>
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d111      	bne.n	80057e0 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00e      	beq.n	80057e0 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80057c2:	e006      	b.n	80057d2 <_PrintInt+0x8e>
        FieldWidth--;
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	3b01      	subs	r3, #1
 80057c8:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80057ca:	2120      	movs	r1, #32
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f7ff fea7 	bl	8005520 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80057d2:	6a3b      	ldr	r3, [r7, #32]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d003      	beq.n	80057e0 <_PrintInt+0x9c>
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d3f1      	bcc.n	80057c4 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	da07      	bge.n	80057f6 <_PrintInt+0xb2>
    v = -v;
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	425b      	negs	r3, r3
 80057ea:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80057ec:	212d      	movs	r1, #45	; 0x2d
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f7ff fe96 	bl	8005520 <_StoreChar>
 80057f4:	e008      	b.n	8005808 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d003      	beq.n	8005808 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005800:	212b      	movs	r1, #43	; 0x2b
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f7ff fe8c 	bl	8005520 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b00      	cmp	r3, #0
 8005810:	d019      	beq.n	8005846 <_PrintInt+0x102>
 8005812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b00      	cmp	r3, #0
 800581a:	d114      	bne.n	8005846 <_PrintInt+0x102>
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d111      	bne.n	8005846 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00e      	beq.n	8005846 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005828:	e006      	b.n	8005838 <_PrintInt+0xf4>
        FieldWidth--;
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	3b01      	subs	r3, #1
 800582e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005830:	2130      	movs	r1, #48	; 0x30
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f7ff fe74 	bl	8005520 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <_PrintInt+0x102>
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	6a3b      	ldr	r3, [r7, #32]
 8005842:	429a      	cmp	r2, r3
 8005844:	d3f1      	bcc.n	800582a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005846:	68b9      	ldr	r1, [r7, #8]
 8005848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584a:	9301      	str	r3, [sp, #4]
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f7ff fedf 	bl	8005618 <_PrintUnsigned>
}
 800585a:	bf00      	nop
 800585c:	3718      	adds	r7, #24
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
	...

08005864 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005864:	b580      	push	{r7, lr}
 8005866:	b098      	sub	sp, #96	; 0x60
 8005868:	af02      	add	r7, sp, #8
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005870:	f3ef 8311 	mrs	r3, BASEPRI
 8005874:	f04f 0120 	mov.w	r1, #32
 8005878:	f381 8811 	msr	BASEPRI, r1
 800587c:	633b      	str	r3, [r7, #48]	; 0x30
 800587e:	48b7      	ldr	r0, [pc, #732]	; (8005b5c <_VPrintTarget+0x2f8>)
 8005880:	f7ff fbf2 	bl	8005068 <_PreparePacket>
 8005884:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005886:	4bb5      	ldr	r3, [pc, #724]	; (8005b5c <_VPrintTarget+0x2f8>)
 8005888:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800588a:	2300      	movs	r3, #0
 800588c:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 800588e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005890:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	3301      	adds	r3, #1
 8005896:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	3301      	adds	r3, #1
 80058a8:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80058aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f000 8183 	beq.w	8005bba <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 80058b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058b8:	2b25      	cmp	r3, #37	; 0x25
 80058ba:	f040 8170 	bne.w	8005b9e <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80058be:	2300      	movs	r3, #0
 80058c0:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 80058c2:	2301      	movs	r3, #1
 80058c4:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80058ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058d2:	3b23      	subs	r3, #35	; 0x23
 80058d4:	2b0d      	cmp	r3, #13
 80058d6:	d83f      	bhi.n	8005958 <_VPrintTarget+0xf4>
 80058d8:	a201      	add	r2, pc, #4	; (adr r2, 80058e0 <_VPrintTarget+0x7c>)
 80058da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058de:	bf00      	nop
 80058e0:	08005949 	.word	0x08005949
 80058e4:	08005959 	.word	0x08005959
 80058e8:	08005959 	.word	0x08005959
 80058ec:	08005959 	.word	0x08005959
 80058f0:	08005959 	.word	0x08005959
 80058f4:	08005959 	.word	0x08005959
 80058f8:	08005959 	.word	0x08005959
 80058fc:	08005959 	.word	0x08005959
 8005900:	08005939 	.word	0x08005939
 8005904:	08005959 	.word	0x08005959
 8005908:	08005919 	.word	0x08005919
 800590c:	08005959 	.word	0x08005959
 8005910:	08005959 	.word	0x08005959
 8005914:	08005929 	.word	0x08005929
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800591a:	f043 0301 	orr.w	r3, r3, #1
 800591e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	3301      	adds	r3, #1
 8005924:	60fb      	str	r3, [r7, #12]
 8005926:	e01a      	b.n	800595e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800592a:	f043 0302 	orr.w	r3, r3, #2
 800592e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	3301      	adds	r3, #1
 8005934:	60fb      	str	r3, [r7, #12]
 8005936:	e012      	b.n	800595e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800593a:	f043 0304 	orr.w	r3, r3, #4
 800593e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	3301      	adds	r3, #1
 8005944:	60fb      	str	r3, [r7, #12]
 8005946:	e00a      	b.n	800595e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800594a:	f043 0308 	orr.w	r3, r3, #8
 800594e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	3301      	adds	r3, #1
 8005954:	60fb      	str	r3, [r7, #12]
 8005956:	e002      	b.n	800595e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005958:	2300      	movs	r3, #0
 800595a:	653b      	str	r3, [r7, #80]	; 0x50
 800595c:	bf00      	nop
        }
      } while (v);
 800595e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1b0      	bne.n	80058c6 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005964:	2300      	movs	r3, #0
 8005966:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005970:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005974:	2b2f      	cmp	r3, #47	; 0x2f
 8005976:	d912      	bls.n	800599e <_VPrintTarget+0x13a>
 8005978:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800597c:	2b39      	cmp	r3, #57	; 0x39
 800597e:	d80e      	bhi.n	800599e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	3301      	adds	r3, #1
 8005984:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005986:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005988:	4613      	mov	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4413      	add	r3, r2
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	461a      	mov	r2, r3
 8005992:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005996:	4413      	add	r3, r2
 8005998:	3b30      	subs	r3, #48	; 0x30
 800599a:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 800599c:	e7e4      	b.n	8005968 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800599e:	2300      	movs	r3, #0
 80059a0:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80059aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059ae:	2b2e      	cmp	r3, #46	; 0x2e
 80059b0:	d11d      	bne.n	80059ee <_VPrintTarget+0x18a>
        sFormat++;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	3301      	adds	r3, #1
 80059b6:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 80059c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059c4:	2b2f      	cmp	r3, #47	; 0x2f
 80059c6:	d912      	bls.n	80059ee <_VPrintTarget+0x18a>
 80059c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059cc:	2b39      	cmp	r3, #57	; 0x39
 80059ce:	d80e      	bhi.n	80059ee <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	3301      	adds	r3, #1
 80059d4:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80059d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059d8:	4613      	mov	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	461a      	mov	r2, r3
 80059e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059e6:	4413      	add	r3, r2
 80059e8:	3b30      	subs	r3, #48	; 0x30
 80059ea:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80059ec:	e7e4      	b.n	80059b8 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80059f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059fa:	2b6c      	cmp	r3, #108	; 0x6c
 80059fc:	d003      	beq.n	8005a06 <_VPrintTarget+0x1a2>
 80059fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a02:	2b68      	cmp	r3, #104	; 0x68
 8005a04:	d107      	bne.n	8005a16 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	3301      	adds	r3, #1
 8005a12:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005a14:	e7ef      	b.n	80059f6 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005a16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a1a:	2b25      	cmp	r3, #37	; 0x25
 8005a1c:	f000 80b3 	beq.w	8005b86 <_VPrintTarget+0x322>
 8005a20:	2b25      	cmp	r3, #37	; 0x25
 8005a22:	f2c0 80b7 	blt.w	8005b94 <_VPrintTarget+0x330>
 8005a26:	2b78      	cmp	r3, #120	; 0x78
 8005a28:	f300 80b4 	bgt.w	8005b94 <_VPrintTarget+0x330>
 8005a2c:	2b58      	cmp	r3, #88	; 0x58
 8005a2e:	f2c0 80b1 	blt.w	8005b94 <_VPrintTarget+0x330>
 8005a32:	3b58      	subs	r3, #88	; 0x58
 8005a34:	2b20      	cmp	r3, #32
 8005a36:	f200 80ad 	bhi.w	8005b94 <_VPrintTarget+0x330>
 8005a3a:	a201      	add	r2, pc, #4	; (adr r2, 8005a40 <_VPrintTarget+0x1dc>)
 8005a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a40:	08005b37 	.word	0x08005b37
 8005a44:	08005b95 	.word	0x08005b95
 8005a48:	08005b95 	.word	0x08005b95
 8005a4c:	08005b95 	.word	0x08005b95
 8005a50:	08005b95 	.word	0x08005b95
 8005a54:	08005b95 	.word	0x08005b95
 8005a58:	08005b95 	.word	0x08005b95
 8005a5c:	08005b95 	.word	0x08005b95
 8005a60:	08005b95 	.word	0x08005b95
 8005a64:	08005b95 	.word	0x08005b95
 8005a68:	08005b95 	.word	0x08005b95
 8005a6c:	08005ac5 	.word	0x08005ac5
 8005a70:	08005aeb 	.word	0x08005aeb
 8005a74:	08005b95 	.word	0x08005b95
 8005a78:	08005b95 	.word	0x08005b95
 8005a7c:	08005b95 	.word	0x08005b95
 8005a80:	08005b95 	.word	0x08005b95
 8005a84:	08005b95 	.word	0x08005b95
 8005a88:	08005b95 	.word	0x08005b95
 8005a8c:	08005b95 	.word	0x08005b95
 8005a90:	08005b95 	.word	0x08005b95
 8005a94:	08005b95 	.word	0x08005b95
 8005a98:	08005b95 	.word	0x08005b95
 8005a9c:	08005b95 	.word	0x08005b95
 8005aa0:	08005b61 	.word	0x08005b61
 8005aa4:	08005b95 	.word	0x08005b95
 8005aa8:	08005b95 	.word	0x08005b95
 8005aac:	08005b95 	.word	0x08005b95
 8005ab0:	08005b95 	.word	0x08005b95
 8005ab4:	08005b11 	.word	0x08005b11
 8005ab8:	08005b95 	.word	0x08005b95
 8005abc:	08005b95 	.word	0x08005b95
 8005ac0:	08005b37 	.word	0x08005b37
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	1d19      	adds	r1, r3, #4
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	6011      	str	r1, [r2, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ad4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8005ad8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005adc:	f107 0314 	add.w	r3, r7, #20
 8005ae0:	4611      	mov	r1, r2
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7ff fd1c 	bl	8005520 <_StoreChar>
        break;
 8005ae8:	e055      	b.n	8005b96 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	1d19      	adds	r1, r3, #4
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	6011      	str	r1, [r2, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005af8:	f107 0014 	add.w	r0, r7, #20
 8005afc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005afe:	9301      	str	r3, [sp, #4]
 8005b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b02:	9300      	str	r3, [sp, #0]
 8005b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b06:	220a      	movs	r2, #10
 8005b08:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005b0a:	f7ff fe1b 	bl	8005744 <_PrintInt>
        break;
 8005b0e:	e042      	b.n	8005b96 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	1d19      	adds	r1, r3, #4
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	6011      	str	r1, [r2, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005b1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005b20:	f107 0014 	add.w	r0, r7, #20
 8005b24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b26:	9301      	str	r3, [sp, #4]
 8005b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b2e:	220a      	movs	r2, #10
 8005b30:	f7ff fd72 	bl	8005618 <_PrintUnsigned>
        break;
 8005b34:	e02f      	b.n	8005b96 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	1d19      	adds	r1, r3, #4
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	6011      	str	r1, [r2, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005b44:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005b46:	f107 0014 	add.w	r0, r7, #20
 8005b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b4c:	9301      	str	r3, [sp, #4]
 8005b4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b54:	2210      	movs	r2, #16
 8005b56:	f7ff fd5f 	bl	8005618 <_PrintUnsigned>
        break;
 8005b5a:	e01c      	b.n	8005b96 <_VPrintTarget+0x332>
 8005b5c:	20014378 	.word	0x20014378
      case 'p':
        v = va_arg(*pParamList, int);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	1d19      	adds	r1, r3, #4
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	6011      	str	r1, [r2, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005b6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005b70:	f107 0014 	add.w	r0, r7, #20
 8005b74:	2300      	movs	r3, #0
 8005b76:	9301      	str	r3, [sp, #4]
 8005b78:	2308      	movs	r3, #8
 8005b7a:	9300      	str	r3, [sp, #0]
 8005b7c:	2308      	movs	r3, #8
 8005b7e:	2210      	movs	r2, #16
 8005b80:	f7ff fd4a 	bl	8005618 <_PrintUnsigned>
        break;
 8005b84:	e007      	b.n	8005b96 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005b86:	f107 0314 	add.w	r3, r7, #20
 8005b8a:	2125      	movs	r1, #37	; 0x25
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7ff fcc7 	bl	8005520 <_StoreChar>
        break;
 8005b92:	e000      	b.n	8005b96 <_VPrintTarget+0x332>
      default:
        break;
 8005b94:	bf00      	nop
      }
      sFormat++;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	60fb      	str	r3, [r7, #12]
 8005b9c:	e007      	b.n	8005bae <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005b9e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005ba2:	f107 0314 	add.w	r3, r7, #20
 8005ba6:	4611      	mov	r1, r2
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7ff fcb9 	bl	8005520 <_StoreChar>
    }
  } while (*sFormat);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f47f ae72 	bne.w	800589c <_VPrintTarget+0x38>
 8005bb8:	e000      	b.n	8005bbc <_VPrintTarget+0x358>
      break;
 8005bba:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d041      	beq.n	8005c46 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8005bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	b2d2      	uxtb	r2, r2
 8005bc8:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	643b      	str	r3, [r7, #64]	; 0x40
 8005bce:	6a3b      	ldr	r3, [r7, #32]
 8005bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bd2:	e00b      	b.n	8005bec <_VPrintTarget+0x388>
 8005bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bd6:	b2da      	uxtb	r2, r3
 8005bd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bda:	1c59      	adds	r1, r3, #1
 8005bdc:	6439      	str	r1, [r7, #64]	; 0x40
 8005bde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005be2:	b2d2      	uxtb	r2, r2
 8005be4:	701a      	strb	r2, [r3, #0]
 8005be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005be8:	09db      	lsrs	r3, r3, #7
 8005bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bee:	2b7f      	cmp	r3, #127	; 0x7f
 8005bf0:	d8f0      	bhi.n	8005bd4 <_VPrintTarget+0x370>
 8005bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bf4:	1c5a      	adds	r2, r3, #1
 8005bf6:	643a      	str	r2, [r7, #64]	; 0x40
 8005bf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bfa:	b2d2      	uxtb	r2, r2
 8005bfc:	701a      	strb	r2, [r3, #0]
 8005bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c00:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c06:	2300      	movs	r3, #0
 8005c08:	637b      	str	r3, [r7, #52]	; 0x34
 8005c0a:	e00b      	b.n	8005c24 <_VPrintTarget+0x3c0>
 8005c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c0e:	b2da      	uxtb	r2, r3
 8005c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c12:	1c59      	adds	r1, r3, #1
 8005c14:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c1a:	b2d2      	uxtb	r2, r2
 8005c1c:	701a      	strb	r2, [r3, #0]
 8005c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c20:	09db      	lsrs	r3, r3, #7
 8005c22:	637b      	str	r3, [r7, #52]	; 0x34
 8005c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c26:	2b7f      	cmp	r3, #127	; 0x7f
 8005c28:	d8f0      	bhi.n	8005c0c <_VPrintTarget+0x3a8>
 8005c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2c:	1c5a      	adds	r2, r3, #1
 8005c2e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005c30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c32:	b2d2      	uxtb	r2, r2
 8005c34:	701a      	strb	r2, [r3, #0]
 8005c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c38:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	69b9      	ldr	r1, [r7, #24]
 8005c3e:	221a      	movs	r2, #26
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7ff faff 	bl	8005244 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c48:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005c4c:	bf00      	nop
 8005c4e:	3758      	adds	r7, #88	; 0x58
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af02      	add	r7, sp, #8
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
 8005c60:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005c62:	2300      	movs	r3, #0
 8005c64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005c68:	4917      	ldr	r1, [pc, #92]	; (8005cc8 <SEGGER_SYSVIEW_Init+0x74>)
 8005c6a:	4818      	ldr	r0, [pc, #96]	; (8005ccc <SEGGER_SYSVIEW_Init+0x78>)
 8005c6c:	f7ff f8dc 	bl	8004e28 <SEGGER_RTT_AllocUpBuffer>
 8005c70:	4603      	mov	r3, r0
 8005c72:	b2da      	uxtb	r2, r3
 8005c74:	4b16      	ldr	r3, [pc, #88]	; (8005cd0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c76:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005c78:	4b15      	ldr	r3, [pc, #84]	; (8005cd0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c7a:	785a      	ldrb	r2, [r3, #1]
 8005c7c:	4b14      	ldr	r3, [pc, #80]	; (8005cd0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c7e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005c80:	4b13      	ldr	r3, [pc, #76]	; (8005cd0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c82:	7e1b      	ldrb	r3, [r3, #24]
 8005c84:	4618      	mov	r0, r3
 8005c86:	2300      	movs	r3, #0
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	2308      	movs	r3, #8
 8005c8c:	4a11      	ldr	r2, [pc, #68]	; (8005cd4 <SEGGER_SYSVIEW_Init+0x80>)
 8005c8e:	490f      	ldr	r1, [pc, #60]	; (8005ccc <SEGGER_SYSVIEW_Init+0x78>)
 8005c90:	f7ff f94e 	bl	8004f30 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005c94:	4b0e      	ldr	r3, [pc, #56]	; (8005cd0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c96:	2200      	movs	r2, #0
 8005c98:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005c9a:	4b0f      	ldr	r3, [pc, #60]	; (8005cd8 <SEGGER_SYSVIEW_Init+0x84>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a0c      	ldr	r2, [pc, #48]	; (8005cd0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ca0:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005ca2:	4a0b      	ldr	r2, [pc, #44]	; (8005cd0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005ca8:	4a09      	ldr	r2, [pc, #36]	; (8005cd0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005cae:	4a08      	ldr	r2, [pc, #32]	; (8005cd0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005cb4:	4a06      	ldr	r2, [pc, #24]	; (8005cd0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005cba:	4b05      	ldr	r3, [pc, #20]	; (8005cd0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005cc0:	bf00      	nop
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	20013340 	.word	0x20013340
 8005ccc:	080078c4 	.word	0x080078c4
 8005cd0:	20014348 	.word	0x20014348
 8005cd4:	20014340 	.word	0x20014340
 8005cd8:	e0001004 	.word	0xe0001004

08005cdc <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005ce4:	4a04      	ldr	r2, [pc, #16]	; (8005cf8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6113      	str	r3, [r2, #16]
}
 8005cea:	bf00      	nop
 8005cec:	370c      	adds	r7, #12
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	20014348 	.word	0x20014348

08005cfc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005d04:	f3ef 8311 	mrs	r3, BASEPRI
 8005d08:	f04f 0120 	mov.w	r1, #32
 8005d0c:	f381 8811 	msr	BASEPRI, r1
 8005d10:	60fb      	str	r3, [r7, #12]
 8005d12:	4808      	ldr	r0, [pc, #32]	; (8005d34 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005d14:	f7ff f9a8 	bl	8005068 <_PreparePacket>
 8005d18:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	68b9      	ldr	r1, [r7, #8]
 8005d1e:	68b8      	ldr	r0, [r7, #8]
 8005d20:	f7ff fa90 	bl	8005244 <_SendPacket>
  RECORD_END();
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f383 8811 	msr	BASEPRI, r3
}
 8005d2a:	bf00      	nop
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	20014378 	.word	0x20014378

08005d38 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b088      	sub	sp, #32
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005d42:	f3ef 8311 	mrs	r3, BASEPRI
 8005d46:	f04f 0120 	mov.w	r1, #32
 8005d4a:	f381 8811 	msr	BASEPRI, r1
 8005d4e:	617b      	str	r3, [r7, #20]
 8005d50:	4816      	ldr	r0, [pc, #88]	; (8005dac <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005d52:	f7ff f989 	bl	8005068 <_PreparePacket>
 8005d56:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	61fb      	str	r3, [r7, #28]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	61bb      	str	r3, [r7, #24]
 8005d64:	e00b      	b.n	8005d7e <SEGGER_SYSVIEW_RecordU32+0x46>
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	1c59      	adds	r1, r3, #1
 8005d6e:	61f9      	str	r1, [r7, #28]
 8005d70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d74:	b2d2      	uxtb	r2, r2
 8005d76:	701a      	strb	r2, [r3, #0]
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	09db      	lsrs	r3, r3, #7
 8005d7c:	61bb      	str	r3, [r7, #24]
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	2b7f      	cmp	r3, #127	; 0x7f
 8005d82:	d8f0      	bhi.n	8005d66 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	1c5a      	adds	r2, r3, #1
 8005d88:	61fa      	str	r2, [r7, #28]
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	b2d2      	uxtb	r2, r2
 8005d8e:	701a      	strb	r2, [r3, #0]
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	68f9      	ldr	r1, [r7, #12]
 8005d98:	6938      	ldr	r0, [r7, #16]
 8005d9a:	f7ff fa53 	bl	8005244 <_SendPacket>
  RECORD_END();
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f383 8811 	msr	BASEPRI, r3
}
 8005da4:	bf00      	nop
 8005da6:	3720      	adds	r7, #32
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	20014378 	.word	0x20014378

08005db0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b08c      	sub	sp, #48	; 0x30
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005dbc:	f3ef 8311 	mrs	r3, BASEPRI
 8005dc0:	f04f 0120 	mov.w	r1, #32
 8005dc4:	f381 8811 	msr	BASEPRI, r1
 8005dc8:	61fb      	str	r3, [r7, #28]
 8005dca:	4825      	ldr	r0, [pc, #148]	; (8005e60 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005dcc:	f7ff f94c 	bl	8005068 <_PreparePacket>
 8005dd0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dde:	e00b      	b.n	8005df8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de2:	b2da      	uxtb	r2, r3
 8005de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de6:	1c59      	adds	r1, r3, #1
 8005de8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005dea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dee:	b2d2      	uxtb	r2, r2
 8005df0:	701a      	strb	r2, [r3, #0]
 8005df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df4:	09db      	lsrs	r3, r3, #7
 8005df6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfa:	2b7f      	cmp	r3, #127	; 0x7f
 8005dfc:	d8f0      	bhi.n	8005de0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e00:	1c5a      	adds	r2, r3, #1
 8005e02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e06:	b2d2      	uxtb	r2, r2
 8005e08:	701a      	strb	r2, [r3, #0]
 8005e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	627b      	str	r3, [r7, #36]	; 0x24
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	623b      	str	r3, [r7, #32]
 8005e16:	e00b      	b.n	8005e30 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005e18:	6a3b      	ldr	r3, [r7, #32]
 8005e1a:	b2da      	uxtb	r2, r3
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1e:	1c59      	adds	r1, r3, #1
 8005e20:	6279      	str	r1, [r7, #36]	; 0x24
 8005e22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e26:	b2d2      	uxtb	r2, r2
 8005e28:	701a      	strb	r2, [r3, #0]
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	09db      	lsrs	r3, r3, #7
 8005e2e:	623b      	str	r3, [r7, #32]
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	2b7f      	cmp	r3, #127	; 0x7f
 8005e34:	d8f0      	bhi.n	8005e18 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	1c5a      	adds	r2, r3, #1
 8005e3a:	627a      	str	r2, [r7, #36]	; 0x24
 8005e3c:	6a3a      	ldr	r2, [r7, #32]
 8005e3e:	b2d2      	uxtb	r2, r2
 8005e40:	701a      	strb	r2, [r3, #0]
 8005e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e44:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	6979      	ldr	r1, [r7, #20]
 8005e4a:	69b8      	ldr	r0, [r7, #24]
 8005e4c:	f7ff f9fa 	bl	8005244 <_SendPacket>
  RECORD_END();
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	f383 8811 	msr	BASEPRI, r3
}
 8005e56:	bf00      	nop
 8005e58:	3730      	adds	r7, #48	; 0x30
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	20014378 	.word	0x20014378

08005e64 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b08e      	sub	sp, #56	; 0x38
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
 8005e70:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005e72:	f3ef 8311 	mrs	r3, BASEPRI
 8005e76:	f04f 0120 	mov.w	r1, #32
 8005e7a:	f381 8811 	msr	BASEPRI, r1
 8005e7e:	61fb      	str	r3, [r7, #28]
 8005e80:	4832      	ldr	r0, [pc, #200]	; (8005f4c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005e82:	f7ff f8f1 	bl	8005068 <_PreparePacket>
 8005e86:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	637b      	str	r3, [r7, #52]	; 0x34
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	633b      	str	r3, [r7, #48]	; 0x30
 8005e94:	e00b      	b.n	8005eae <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e98:	b2da      	uxtb	r2, r3
 8005e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e9c:	1c59      	adds	r1, r3, #1
 8005e9e:	6379      	str	r1, [r7, #52]	; 0x34
 8005ea0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ea4:	b2d2      	uxtb	r2, r2
 8005ea6:	701a      	strb	r2, [r3, #0]
 8005ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eaa:	09db      	lsrs	r3, r3, #7
 8005eac:	633b      	str	r3, [r7, #48]	; 0x30
 8005eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb0:	2b7f      	cmp	r3, #127	; 0x7f
 8005eb2:	d8f0      	bhi.n	8005e96 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb6:	1c5a      	adds	r2, r3, #1
 8005eb8:	637a      	str	r2, [r7, #52]	; 0x34
 8005eba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ebc:	b2d2      	uxtb	r2, r2
 8005ebe:	701a      	strb	r2, [r3, #0]
 8005ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ecc:	e00b      	b.n	8005ee6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed0:	b2da      	uxtb	r2, r3
 8005ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed4:	1c59      	adds	r1, r3, #1
 8005ed6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ed8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005edc:	b2d2      	uxtb	r2, r2
 8005ede:	701a      	strb	r2, [r3, #0]
 8005ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee2:	09db      	lsrs	r3, r3, #7
 8005ee4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee8:	2b7f      	cmp	r3, #127	; 0x7f
 8005eea:	d8f0      	bhi.n	8005ece <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eee:	1c5a      	adds	r2, r3, #1
 8005ef0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ef2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ef4:	b2d2      	uxtb	r2, r2
 8005ef6:	701a      	strb	r2, [r3, #0]
 8005ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	627b      	str	r3, [r7, #36]	; 0x24
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	623b      	str	r3, [r7, #32]
 8005f04:	e00b      	b.n	8005f1e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005f06:	6a3b      	ldr	r3, [r7, #32]
 8005f08:	b2da      	uxtb	r2, r3
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	1c59      	adds	r1, r3, #1
 8005f0e:	6279      	str	r1, [r7, #36]	; 0x24
 8005f10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f14:	b2d2      	uxtb	r2, r2
 8005f16:	701a      	strb	r2, [r3, #0]
 8005f18:	6a3b      	ldr	r3, [r7, #32]
 8005f1a:	09db      	lsrs	r3, r3, #7
 8005f1c:	623b      	str	r3, [r7, #32]
 8005f1e:	6a3b      	ldr	r3, [r7, #32]
 8005f20:	2b7f      	cmp	r3, #127	; 0x7f
 8005f22:	d8f0      	bhi.n	8005f06 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	1c5a      	adds	r2, r3, #1
 8005f28:	627a      	str	r2, [r7, #36]	; 0x24
 8005f2a:	6a3a      	ldr	r2, [r7, #32]
 8005f2c:	b2d2      	uxtb	r2, r2
 8005f2e:	701a      	strb	r2, [r3, #0]
 8005f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f32:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	6979      	ldr	r1, [r7, #20]
 8005f38:	69b8      	ldr	r0, [r7, #24]
 8005f3a:	f7ff f983 	bl	8005244 <_SendPacket>
  RECORD_END();
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	f383 8811 	msr	BASEPRI, r3
}
 8005f44:	bf00      	nop
 8005f46:	3738      	adds	r7, #56	; 0x38
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	20014378 	.word	0x20014378

08005f50 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b090      	sub	sp, #64	; 0x40
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
 8005f5c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f5e:	f3ef 8311 	mrs	r3, BASEPRI
 8005f62:	f04f 0120 	mov.w	r1, #32
 8005f66:	f381 8811 	msr	BASEPRI, r1
 8005f6a:	61fb      	str	r3, [r7, #28]
 8005f6c:	4840      	ldr	r0, [pc, #256]	; (8006070 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005f6e:	f7ff f87b 	bl	8005068 <_PreparePacket>
 8005f72:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f80:	e00b      	b.n	8005f9a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f84:	b2da      	uxtb	r2, r3
 8005f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f88:	1c59      	adds	r1, r3, #1
 8005f8a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005f8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f90:	b2d2      	uxtb	r2, r2
 8005f92:	701a      	strb	r2, [r3, #0]
 8005f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f96:	09db      	lsrs	r3, r3, #7
 8005f98:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9c:	2b7f      	cmp	r3, #127	; 0x7f
 8005f9e:	d8f0      	bhi.n	8005f82 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fa2:	1c5a      	adds	r2, r3, #1
 8005fa4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005fa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fa8:	b2d2      	uxtb	r2, r2
 8005faa:	701a      	strb	r2, [r3, #0]
 8005fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	633b      	str	r3, [r7, #48]	; 0x30
 8005fb8:	e00b      	b.n	8005fd2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbc:	b2da      	uxtb	r2, r3
 8005fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fc0:	1c59      	adds	r1, r3, #1
 8005fc2:	6379      	str	r1, [r7, #52]	; 0x34
 8005fc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fc8:	b2d2      	uxtb	r2, r2
 8005fca:	701a      	strb	r2, [r3, #0]
 8005fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fce:	09db      	lsrs	r3, r3, #7
 8005fd0:	633b      	str	r3, [r7, #48]	; 0x30
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd4:	2b7f      	cmp	r3, #127	; 0x7f
 8005fd6:	d8f0      	bhi.n	8005fba <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fda:	1c5a      	adds	r2, r3, #1
 8005fdc:	637a      	str	r2, [r7, #52]	; 0x34
 8005fde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fe0:	b2d2      	uxtb	r2, r2
 8005fe2:	701a      	strb	r2, [r3, #0]
 8005fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ff0:	e00b      	b.n	800600a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff4:	b2da      	uxtb	r2, r3
 8005ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff8:	1c59      	adds	r1, r3, #1
 8005ffa:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ffc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006000:	b2d2      	uxtb	r2, r2
 8006002:	701a      	strb	r2, [r3, #0]
 8006004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006006:	09db      	lsrs	r3, r3, #7
 8006008:	62bb      	str	r3, [r7, #40]	; 0x28
 800600a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600c:	2b7f      	cmp	r3, #127	; 0x7f
 800600e:	d8f0      	bhi.n	8005ff2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006012:	1c5a      	adds	r2, r3, #1
 8006014:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006016:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006018:	b2d2      	uxtb	r2, r2
 800601a:	701a      	strb	r2, [r3, #0]
 800601c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	627b      	str	r3, [r7, #36]	; 0x24
 8006024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006026:	623b      	str	r3, [r7, #32]
 8006028:	e00b      	b.n	8006042 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	b2da      	uxtb	r2, r3
 800602e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006030:	1c59      	adds	r1, r3, #1
 8006032:	6279      	str	r1, [r7, #36]	; 0x24
 8006034:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006038:	b2d2      	uxtb	r2, r2
 800603a:	701a      	strb	r2, [r3, #0]
 800603c:	6a3b      	ldr	r3, [r7, #32]
 800603e:	09db      	lsrs	r3, r3, #7
 8006040:	623b      	str	r3, [r7, #32]
 8006042:	6a3b      	ldr	r3, [r7, #32]
 8006044:	2b7f      	cmp	r3, #127	; 0x7f
 8006046:	d8f0      	bhi.n	800602a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604a:	1c5a      	adds	r2, r3, #1
 800604c:	627a      	str	r2, [r7, #36]	; 0x24
 800604e:	6a3a      	ldr	r2, [r7, #32]
 8006050:	b2d2      	uxtb	r2, r2
 8006052:	701a      	strb	r2, [r3, #0]
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	6979      	ldr	r1, [r7, #20]
 800605c:	69b8      	ldr	r0, [r7, #24]
 800605e:	f7ff f8f1 	bl	8005244 <_SendPacket>
  RECORD_END();
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	f383 8811 	msr	BASEPRI, r3
}
 8006068:	bf00      	nop
 800606a:	3740      	adds	r7, #64	; 0x40
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	20014378 	.word	0x20014378

08006074 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006074:	b580      	push	{r7, lr}
 8006076:	b08c      	sub	sp, #48	; 0x30
 8006078:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800607a:	4b58      	ldr	r3, [pc, #352]	; (80061dc <SEGGER_SYSVIEW_Start+0x168>)
 800607c:	2201      	movs	r2, #1
 800607e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006080:	f3ef 8311 	mrs	r3, BASEPRI
 8006084:	f04f 0120 	mov.w	r1, #32
 8006088:	f381 8811 	msr	BASEPRI, r1
 800608c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800608e:	4b53      	ldr	r3, [pc, #332]	; (80061dc <SEGGER_SYSVIEW_Start+0x168>)
 8006090:	785b      	ldrb	r3, [r3, #1]
 8006092:	220a      	movs	r2, #10
 8006094:	4952      	ldr	r1, [pc, #328]	; (80061e0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006096:	4618      	mov	r0, r3
 8006098:	f7fa f8aa 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80060a2:	200a      	movs	r0, #10
 80060a4:	f7ff fe2a 	bl	8005cfc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80060a8:	f3ef 8311 	mrs	r3, BASEPRI
 80060ac:	f04f 0120 	mov.w	r1, #32
 80060b0:	f381 8811 	msr	BASEPRI, r1
 80060b4:	60bb      	str	r3, [r7, #8]
 80060b6:	484b      	ldr	r0, [pc, #300]	; (80061e4 <SEGGER_SYSVIEW_Start+0x170>)
 80060b8:	f7fe ffd6 	bl	8005068 <_PreparePacket>
 80060bc:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060c6:	4b45      	ldr	r3, [pc, #276]	; (80061dc <SEGGER_SYSVIEW_Start+0x168>)
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80060cc:	e00b      	b.n	80060e6 <SEGGER_SYSVIEW_Start+0x72>
 80060ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d0:	b2da      	uxtb	r2, r3
 80060d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d4:	1c59      	adds	r1, r3, #1
 80060d6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80060d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060dc:	b2d2      	uxtb	r2, r2
 80060de:	701a      	strb	r2, [r3, #0]
 80060e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e2:	09db      	lsrs	r3, r3, #7
 80060e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80060e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e8:	2b7f      	cmp	r3, #127	; 0x7f
 80060ea:	d8f0      	bhi.n	80060ce <SEGGER_SYSVIEW_Start+0x5a>
 80060ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ee:	1c5a      	adds	r2, r3, #1
 80060f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060f4:	b2d2      	uxtb	r2, r2
 80060f6:	701a      	strb	r2, [r3, #0]
 80060f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006100:	4b36      	ldr	r3, [pc, #216]	; (80061dc <SEGGER_SYSVIEW_Start+0x168>)
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	623b      	str	r3, [r7, #32]
 8006106:	e00b      	b.n	8006120 <SEGGER_SYSVIEW_Start+0xac>
 8006108:	6a3b      	ldr	r3, [r7, #32]
 800610a:	b2da      	uxtb	r2, r3
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	1c59      	adds	r1, r3, #1
 8006110:	6279      	str	r1, [r7, #36]	; 0x24
 8006112:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006116:	b2d2      	uxtb	r2, r2
 8006118:	701a      	strb	r2, [r3, #0]
 800611a:	6a3b      	ldr	r3, [r7, #32]
 800611c:	09db      	lsrs	r3, r3, #7
 800611e:	623b      	str	r3, [r7, #32]
 8006120:	6a3b      	ldr	r3, [r7, #32]
 8006122:	2b7f      	cmp	r3, #127	; 0x7f
 8006124:	d8f0      	bhi.n	8006108 <SEGGER_SYSVIEW_Start+0x94>
 8006126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006128:	1c5a      	adds	r2, r3, #1
 800612a:	627a      	str	r2, [r7, #36]	; 0x24
 800612c:	6a3a      	ldr	r2, [r7, #32]
 800612e:	b2d2      	uxtb	r2, r2
 8006130:	701a      	strb	r2, [r3, #0]
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	61fb      	str	r3, [r7, #28]
 800613a:	4b28      	ldr	r3, [pc, #160]	; (80061dc <SEGGER_SYSVIEW_Start+0x168>)
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	61bb      	str	r3, [r7, #24]
 8006140:	e00b      	b.n	800615a <SEGGER_SYSVIEW_Start+0xe6>
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	b2da      	uxtb	r2, r3
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	1c59      	adds	r1, r3, #1
 800614a:	61f9      	str	r1, [r7, #28]
 800614c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006150:	b2d2      	uxtb	r2, r2
 8006152:	701a      	strb	r2, [r3, #0]
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	09db      	lsrs	r3, r3, #7
 8006158:	61bb      	str	r3, [r7, #24]
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	2b7f      	cmp	r3, #127	; 0x7f
 800615e:	d8f0      	bhi.n	8006142 <SEGGER_SYSVIEW_Start+0xce>
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	1c5a      	adds	r2, r3, #1
 8006164:	61fa      	str	r2, [r7, #28]
 8006166:	69ba      	ldr	r2, [r7, #24]
 8006168:	b2d2      	uxtb	r2, r2
 800616a:	701a      	strb	r2, [r3, #0]
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	617b      	str	r3, [r7, #20]
 8006174:	2300      	movs	r3, #0
 8006176:	613b      	str	r3, [r7, #16]
 8006178:	e00b      	b.n	8006192 <SEGGER_SYSVIEW_Start+0x11e>
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	b2da      	uxtb	r2, r3
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	1c59      	adds	r1, r3, #1
 8006182:	6179      	str	r1, [r7, #20]
 8006184:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006188:	b2d2      	uxtb	r2, r2
 800618a:	701a      	strb	r2, [r3, #0]
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	09db      	lsrs	r3, r3, #7
 8006190:	613b      	str	r3, [r7, #16]
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	2b7f      	cmp	r3, #127	; 0x7f
 8006196:	d8f0      	bhi.n	800617a <SEGGER_SYSVIEW_Start+0x106>
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	1c5a      	adds	r2, r3, #1
 800619c:	617a      	str	r2, [r7, #20]
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	b2d2      	uxtb	r2, r2
 80061a2:	701a      	strb	r2, [r3, #0]
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80061a8:	2218      	movs	r2, #24
 80061aa:	6839      	ldr	r1, [r7, #0]
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f7ff f849 	bl	8005244 <_SendPacket>
      RECORD_END();
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80061b8:	4b08      	ldr	r3, [pc, #32]	; (80061dc <SEGGER_SYSVIEW_Start+0x168>)
 80061ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d002      	beq.n	80061c6 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80061c0:	4b06      	ldr	r3, [pc, #24]	; (80061dc <SEGGER_SYSVIEW_Start+0x168>)
 80061c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80061c6:	f000 f9eb 	bl	80065a0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80061ca:	f000 f9b1 	bl	8006530 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80061ce:	f000 fc83 	bl	8006ad8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80061d2:	bf00      	nop
 80061d4:	3730      	adds	r7, #48	; 0x30
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	20014348 	.word	0x20014348
 80061e0:	080079a4 	.word	0x080079a4
 80061e4:	20014378 	.word	0x20014378

080061e8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80061ee:	f3ef 8311 	mrs	r3, BASEPRI
 80061f2:	f04f 0120 	mov.w	r1, #32
 80061f6:	f381 8811 	msr	BASEPRI, r1
 80061fa:	607b      	str	r3, [r7, #4]
 80061fc:	480b      	ldr	r0, [pc, #44]	; (800622c <SEGGER_SYSVIEW_Stop+0x44>)
 80061fe:	f7fe ff33 	bl	8005068 <_PreparePacket>
 8006202:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006204:	4b0a      	ldr	r3, [pc, #40]	; (8006230 <SEGGER_SYSVIEW_Stop+0x48>)
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d007      	beq.n	800621c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800620c:	220b      	movs	r2, #11
 800620e:	6839      	ldr	r1, [r7, #0]
 8006210:	6838      	ldr	r0, [r7, #0]
 8006212:	f7ff f817 	bl	8005244 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006216:	4b06      	ldr	r3, [pc, #24]	; (8006230 <SEGGER_SYSVIEW_Stop+0x48>)
 8006218:	2200      	movs	r2, #0
 800621a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f383 8811 	msr	BASEPRI, r3
}
 8006222:	bf00      	nop
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	20014378 	.word	0x20014378
 8006230:	20014348 	.word	0x20014348

08006234 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006234:	b580      	push	{r7, lr}
 8006236:	b08c      	sub	sp, #48	; 0x30
 8006238:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800623a:	f3ef 8311 	mrs	r3, BASEPRI
 800623e:	f04f 0120 	mov.w	r1, #32
 8006242:	f381 8811 	msr	BASEPRI, r1
 8006246:	60fb      	str	r3, [r7, #12]
 8006248:	4845      	ldr	r0, [pc, #276]	; (8006360 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800624a:	f7fe ff0d 	bl	8005068 <_PreparePacket>
 800624e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006258:	4b42      	ldr	r3, [pc, #264]	; (8006364 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	62bb      	str	r3, [r7, #40]	; 0x28
 800625e:	e00b      	b.n	8006278 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006262:	b2da      	uxtb	r2, r3
 8006264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006266:	1c59      	adds	r1, r3, #1
 8006268:	62f9      	str	r1, [r7, #44]	; 0x2c
 800626a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800626e:	b2d2      	uxtb	r2, r2
 8006270:	701a      	strb	r2, [r3, #0]
 8006272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006274:	09db      	lsrs	r3, r3, #7
 8006276:	62bb      	str	r3, [r7, #40]	; 0x28
 8006278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627a:	2b7f      	cmp	r3, #127	; 0x7f
 800627c:	d8f0      	bhi.n	8006260 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800627e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006280:	1c5a      	adds	r2, r3, #1
 8006282:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006284:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006286:	b2d2      	uxtb	r2, r2
 8006288:	701a      	strb	r2, [r3, #0]
 800628a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	627b      	str	r3, [r7, #36]	; 0x24
 8006292:	4b34      	ldr	r3, [pc, #208]	; (8006364 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	623b      	str	r3, [r7, #32]
 8006298:	e00b      	b.n	80062b2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800629a:	6a3b      	ldr	r3, [r7, #32]
 800629c:	b2da      	uxtb	r2, r3
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	1c59      	adds	r1, r3, #1
 80062a2:	6279      	str	r1, [r7, #36]	; 0x24
 80062a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062a8:	b2d2      	uxtb	r2, r2
 80062aa:	701a      	strb	r2, [r3, #0]
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	09db      	lsrs	r3, r3, #7
 80062b0:	623b      	str	r3, [r7, #32]
 80062b2:	6a3b      	ldr	r3, [r7, #32]
 80062b4:	2b7f      	cmp	r3, #127	; 0x7f
 80062b6:	d8f0      	bhi.n	800629a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80062b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	627a      	str	r2, [r7, #36]	; 0x24
 80062be:	6a3a      	ldr	r2, [r7, #32]
 80062c0:	b2d2      	uxtb	r2, r2
 80062c2:	701a      	strb	r2, [r3, #0]
 80062c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	61fb      	str	r3, [r7, #28]
 80062cc:	4b25      	ldr	r3, [pc, #148]	; (8006364 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	61bb      	str	r3, [r7, #24]
 80062d2:	e00b      	b.n	80062ec <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	1c59      	adds	r1, r3, #1
 80062dc:	61f9      	str	r1, [r7, #28]
 80062de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062e2:	b2d2      	uxtb	r2, r2
 80062e4:	701a      	strb	r2, [r3, #0]
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	09db      	lsrs	r3, r3, #7
 80062ea:	61bb      	str	r3, [r7, #24]
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	2b7f      	cmp	r3, #127	; 0x7f
 80062f0:	d8f0      	bhi.n	80062d4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	1c5a      	adds	r2, r3, #1
 80062f6:	61fa      	str	r2, [r7, #28]
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	b2d2      	uxtb	r2, r2
 80062fc:	701a      	strb	r2, [r3, #0]
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	617b      	str	r3, [r7, #20]
 8006306:	2300      	movs	r3, #0
 8006308:	613b      	str	r3, [r7, #16]
 800630a:	e00b      	b.n	8006324 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	b2da      	uxtb	r2, r3
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	1c59      	adds	r1, r3, #1
 8006314:	6179      	str	r1, [r7, #20]
 8006316:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800631a:	b2d2      	uxtb	r2, r2
 800631c:	701a      	strb	r2, [r3, #0]
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	09db      	lsrs	r3, r3, #7
 8006322:	613b      	str	r3, [r7, #16]
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	2b7f      	cmp	r3, #127	; 0x7f
 8006328:	d8f0      	bhi.n	800630c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	1c5a      	adds	r2, r3, #1
 800632e:	617a      	str	r2, [r7, #20]
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	b2d2      	uxtb	r2, r2
 8006334:	701a      	strb	r2, [r3, #0]
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800633a:	2218      	movs	r2, #24
 800633c:	6879      	ldr	r1, [r7, #4]
 800633e:	68b8      	ldr	r0, [r7, #8]
 8006340:	f7fe ff80 	bl	8005244 <_SendPacket>
  RECORD_END();
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800634a:	4b06      	ldr	r3, [pc, #24]	; (8006364 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800634c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634e:	2b00      	cmp	r3, #0
 8006350:	d002      	beq.n	8006358 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006352:	4b04      	ldr	r3, [pc, #16]	; (8006364 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006356:	4798      	blx	r3
  }
}
 8006358:	bf00      	nop
 800635a:	3730      	adds	r7, #48	; 0x30
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	20014378 	.word	0x20014378
 8006364:	20014348 	.word	0x20014348

08006368 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006368:	b580      	push	{r7, lr}
 800636a:	b092      	sub	sp, #72	; 0x48
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006370:	f3ef 8311 	mrs	r3, BASEPRI
 8006374:	f04f 0120 	mov.w	r1, #32
 8006378:	f381 8811 	msr	BASEPRI, r1
 800637c:	617b      	str	r3, [r7, #20]
 800637e:	486a      	ldr	r0, [pc, #424]	; (8006528 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006380:	f7fe fe72 	bl	8005068 <_PreparePacket>
 8006384:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	647b      	str	r3, [r7, #68]	; 0x44
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	4b66      	ldr	r3, [pc, #408]	; (800652c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	643b      	str	r3, [r7, #64]	; 0x40
 800639a:	e00b      	b.n	80063b4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800639c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800639e:	b2da      	uxtb	r2, r3
 80063a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063a2:	1c59      	adds	r1, r3, #1
 80063a4:	6479      	str	r1, [r7, #68]	; 0x44
 80063a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063aa:	b2d2      	uxtb	r2, r2
 80063ac:	701a      	strb	r2, [r3, #0]
 80063ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063b0:	09db      	lsrs	r3, r3, #7
 80063b2:	643b      	str	r3, [r7, #64]	; 0x40
 80063b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063b6:	2b7f      	cmp	r3, #127	; 0x7f
 80063b8:	d8f0      	bhi.n	800639c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80063ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063bc:	1c5a      	adds	r2, r3, #1
 80063be:	647a      	str	r2, [r7, #68]	; 0x44
 80063c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063c2:	b2d2      	uxtb	r2, r2
 80063c4:	701a      	strb	r2, [r3, #0]
 80063c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80063d4:	e00b      	b.n	80063ee <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80063d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063dc:	1c59      	adds	r1, r3, #1
 80063de:	63f9      	str	r1, [r7, #60]	; 0x3c
 80063e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063e4:	b2d2      	uxtb	r2, r2
 80063e6:	701a      	strb	r2, [r3, #0]
 80063e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ea:	09db      	lsrs	r3, r3, #7
 80063ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80063ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f0:	2b7f      	cmp	r3, #127	; 0x7f
 80063f2:	d8f0      	bhi.n	80063d6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80063f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063f6:	1c5a      	adds	r2, r3, #1
 80063f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80063fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063fc:	b2d2      	uxtb	r2, r2
 80063fe:	701a      	strb	r2, [r3, #0]
 8006400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006402:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	2220      	movs	r2, #32
 800640a:	4619      	mov	r1, r3
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f7fe fddb 	bl	8004fc8 <_EncodeStr>
 8006412:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006414:	2209      	movs	r2, #9
 8006416:	68f9      	ldr	r1, [r7, #12]
 8006418:	6938      	ldr	r0, [r7, #16]
 800641a:	f7fe ff13 	bl	8005244 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	637b      	str	r3, [r7, #52]	; 0x34
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	4b40      	ldr	r3, [pc, #256]	; (800652c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	633b      	str	r3, [r7, #48]	; 0x30
 8006432:	e00b      	b.n	800644c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006436:	b2da      	uxtb	r2, r3
 8006438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800643a:	1c59      	adds	r1, r3, #1
 800643c:	6379      	str	r1, [r7, #52]	; 0x34
 800643e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006442:	b2d2      	uxtb	r2, r2
 8006444:	701a      	strb	r2, [r3, #0]
 8006446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006448:	09db      	lsrs	r3, r3, #7
 800644a:	633b      	str	r3, [r7, #48]	; 0x30
 800644c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644e:	2b7f      	cmp	r3, #127	; 0x7f
 8006450:	d8f0      	bhi.n	8006434 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006454:	1c5a      	adds	r2, r3, #1
 8006456:	637a      	str	r2, [r7, #52]	; 0x34
 8006458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800645a:	b2d2      	uxtb	r2, r2
 800645c:	701a      	strb	r2, [r3, #0]
 800645e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006460:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	62bb      	str	r3, [r7, #40]	; 0x28
 800646c:	e00b      	b.n	8006486 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800646e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006470:	b2da      	uxtb	r2, r3
 8006472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006474:	1c59      	adds	r1, r3, #1
 8006476:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006478:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800647c:	b2d2      	uxtb	r2, r2
 800647e:	701a      	strb	r2, [r3, #0]
 8006480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006482:	09db      	lsrs	r3, r3, #7
 8006484:	62bb      	str	r3, [r7, #40]	; 0x28
 8006486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006488:	2b7f      	cmp	r3, #127	; 0x7f
 800648a:	d8f0      	bhi.n	800646e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800648c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648e:	1c5a      	adds	r2, r3, #1
 8006490:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006492:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006494:	b2d2      	uxtb	r2, r2
 8006496:	701a      	strb	r2, [r3, #0]
 8006498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	627b      	str	r3, [r7, #36]	; 0x24
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	623b      	str	r3, [r7, #32]
 80064a6:	e00b      	b.n	80064c0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80064a8:	6a3b      	ldr	r3, [r7, #32]
 80064aa:	b2da      	uxtb	r2, r3
 80064ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ae:	1c59      	adds	r1, r3, #1
 80064b0:	6279      	str	r1, [r7, #36]	; 0x24
 80064b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064b6:	b2d2      	uxtb	r2, r2
 80064b8:	701a      	strb	r2, [r3, #0]
 80064ba:	6a3b      	ldr	r3, [r7, #32]
 80064bc:	09db      	lsrs	r3, r3, #7
 80064be:	623b      	str	r3, [r7, #32]
 80064c0:	6a3b      	ldr	r3, [r7, #32]
 80064c2:	2b7f      	cmp	r3, #127	; 0x7f
 80064c4:	d8f0      	bhi.n	80064a8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80064c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c8:	1c5a      	adds	r2, r3, #1
 80064ca:	627a      	str	r2, [r7, #36]	; 0x24
 80064cc:	6a3a      	ldr	r2, [r7, #32]
 80064ce:	b2d2      	uxtb	r2, r2
 80064d0:	701a      	strb	r2, [r3, #0]
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	61fb      	str	r3, [r7, #28]
 80064da:	2300      	movs	r3, #0
 80064dc:	61bb      	str	r3, [r7, #24]
 80064de:	e00b      	b.n	80064f8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	b2da      	uxtb	r2, r3
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	1c59      	adds	r1, r3, #1
 80064e8:	61f9      	str	r1, [r7, #28]
 80064ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064ee:	b2d2      	uxtb	r2, r2
 80064f0:	701a      	strb	r2, [r3, #0]
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	09db      	lsrs	r3, r3, #7
 80064f6:	61bb      	str	r3, [r7, #24]
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	2b7f      	cmp	r3, #127	; 0x7f
 80064fc:	d8f0      	bhi.n	80064e0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	1c5a      	adds	r2, r3, #1
 8006502:	61fa      	str	r2, [r7, #28]
 8006504:	69ba      	ldr	r2, [r7, #24]
 8006506:	b2d2      	uxtb	r2, r2
 8006508:	701a      	strb	r2, [r3, #0]
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800650e:	2215      	movs	r2, #21
 8006510:	68f9      	ldr	r1, [r7, #12]
 8006512:	6938      	ldr	r0, [r7, #16]
 8006514:	f7fe fe96 	bl	8005244 <_SendPacket>
  RECORD_END();
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f383 8811 	msr	BASEPRI, r3
}
 800651e:	bf00      	nop
 8006520:	3748      	adds	r7, #72	; 0x48
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	20014378 	.word	0x20014378
 800652c:	20014348 	.word	0x20014348

08006530 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006530:	b580      	push	{r7, lr}
 8006532:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006534:	4b07      	ldr	r3, [pc, #28]	; (8006554 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006536:	6a1b      	ldr	r3, [r3, #32]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d008      	beq.n	800654e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800653c:	4b05      	ldr	r3, [pc, #20]	; (8006554 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800653e:	6a1b      	ldr	r3, [r3, #32]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006546:	4b03      	ldr	r3, [pc, #12]	; (8006554 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	4798      	blx	r3
  }
}
 800654e:	bf00      	nop
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	20014348 	.word	0x20014348

08006558 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006558:	b580      	push	{r7, lr}
 800655a:	b086      	sub	sp, #24
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006560:	f3ef 8311 	mrs	r3, BASEPRI
 8006564:	f04f 0120 	mov.w	r1, #32
 8006568:	f381 8811 	msr	BASEPRI, r1
 800656c:	617b      	str	r3, [r7, #20]
 800656e:	480b      	ldr	r0, [pc, #44]	; (800659c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006570:	f7fe fd7a 	bl	8005068 <_PreparePacket>
 8006574:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006576:	2280      	movs	r2, #128	; 0x80
 8006578:	6879      	ldr	r1, [r7, #4]
 800657a:	6938      	ldr	r0, [r7, #16]
 800657c:	f7fe fd24 	bl	8004fc8 <_EncodeStr>
 8006580:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006582:	220e      	movs	r2, #14
 8006584:	68f9      	ldr	r1, [r7, #12]
 8006586:	6938      	ldr	r0, [r7, #16]
 8006588:	f7fe fe5c 	bl	8005244 <_SendPacket>
  RECORD_END();
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	f383 8811 	msr	BASEPRI, r3
}
 8006592:	bf00      	nop
 8006594:	3718      	adds	r7, #24
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	20014378 	.word	0x20014378

080065a0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80065a0:	b590      	push	{r4, r7, lr}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80065a6:	4b15      	ldr	r3, [pc, #84]	; (80065fc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d01a      	beq.n	80065e4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80065ae:	4b13      	ldr	r3, [pc, #76]	; (80065fc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d015      	beq.n	80065e4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80065b8:	4b10      	ldr	r3, [pc, #64]	; (80065fc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80065ba:	6a1b      	ldr	r3, [r3, #32]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4798      	blx	r3
 80065c0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80065c4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80065c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065ca:	f04f 0200 	mov.w	r2, #0
 80065ce:	f04f 0300 	mov.w	r3, #0
 80065d2:	000a      	movs	r2, r1
 80065d4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80065d6:	4613      	mov	r3, r2
 80065d8:	461a      	mov	r2, r3
 80065da:	4621      	mov	r1, r4
 80065dc:	200d      	movs	r0, #13
 80065de:	f7ff fbe7 	bl	8005db0 <SEGGER_SYSVIEW_RecordU32x2>
 80065e2:	e006      	b.n	80065f2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80065e4:	4b06      	ldr	r3, [pc, #24]	; (8006600 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4619      	mov	r1, r3
 80065ea:	200c      	movs	r0, #12
 80065ec:	f7ff fba4 	bl	8005d38 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80065f0:	bf00      	nop
 80065f2:	bf00      	nop
 80065f4:	370c      	adds	r7, #12
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd90      	pop	{r4, r7, pc}
 80065fa:	bf00      	nop
 80065fc:	20014348 	.word	0x20014348
 8006600:	e0001004 	.word	0xe0001004

08006604 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006604:	b580      	push	{r7, lr}
 8006606:	b086      	sub	sp, #24
 8006608:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800660a:	f3ef 8311 	mrs	r3, BASEPRI
 800660e:	f04f 0120 	mov.w	r1, #32
 8006612:	f381 8811 	msr	BASEPRI, r1
 8006616:	60fb      	str	r3, [r7, #12]
 8006618:	4819      	ldr	r0, [pc, #100]	; (8006680 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800661a:	f7fe fd25 	bl	8005068 <_PreparePacket>
 800661e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006624:	4b17      	ldr	r3, [pc, #92]	; (8006684 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800662c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	617b      	str	r3, [r7, #20]
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	613b      	str	r3, [r7, #16]
 8006636:	e00b      	b.n	8006650 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	b2da      	uxtb	r2, r3
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	1c59      	adds	r1, r3, #1
 8006640:	6179      	str	r1, [r7, #20]
 8006642:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006646:	b2d2      	uxtb	r2, r2
 8006648:	701a      	strb	r2, [r3, #0]
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	09db      	lsrs	r3, r3, #7
 800664e:	613b      	str	r3, [r7, #16]
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	2b7f      	cmp	r3, #127	; 0x7f
 8006654:	d8f0      	bhi.n	8006638 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	1c5a      	adds	r2, r3, #1
 800665a:	617a      	str	r2, [r7, #20]
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	b2d2      	uxtb	r2, r2
 8006660:	701a      	strb	r2, [r3, #0]
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006666:	2202      	movs	r2, #2
 8006668:	6879      	ldr	r1, [r7, #4]
 800666a:	68b8      	ldr	r0, [r7, #8]
 800666c:	f7fe fdea 	bl	8005244 <_SendPacket>
  RECORD_END();
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f383 8811 	msr	BASEPRI, r3
}
 8006676:	bf00      	nop
 8006678:	3718      	adds	r7, #24
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	20014378 	.word	0x20014378
 8006684:	e000ed04 	.word	0xe000ed04

08006688 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800668e:	f3ef 8311 	mrs	r3, BASEPRI
 8006692:	f04f 0120 	mov.w	r1, #32
 8006696:	f381 8811 	msr	BASEPRI, r1
 800669a:	607b      	str	r3, [r7, #4]
 800669c:	4807      	ldr	r0, [pc, #28]	; (80066bc <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800669e:	f7fe fce3 	bl	8005068 <_PreparePacket>
 80066a2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80066a4:	2203      	movs	r2, #3
 80066a6:	6839      	ldr	r1, [r7, #0]
 80066a8:	6838      	ldr	r0, [r7, #0]
 80066aa:	f7fe fdcb 	bl	8005244 <_SendPacket>
  RECORD_END();
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f383 8811 	msr	BASEPRI, r3
}
 80066b4:	bf00      	nop
 80066b6:	3708      	adds	r7, #8
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	20014378 	.word	0x20014378

080066c0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80066c6:	f3ef 8311 	mrs	r3, BASEPRI
 80066ca:	f04f 0120 	mov.w	r1, #32
 80066ce:	f381 8811 	msr	BASEPRI, r1
 80066d2:	607b      	str	r3, [r7, #4]
 80066d4:	4807      	ldr	r0, [pc, #28]	; (80066f4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80066d6:	f7fe fcc7 	bl	8005068 <_PreparePacket>
 80066da:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80066dc:	2212      	movs	r2, #18
 80066de:	6839      	ldr	r1, [r7, #0]
 80066e0:	6838      	ldr	r0, [r7, #0]
 80066e2:	f7fe fdaf 	bl	8005244 <_SendPacket>
  RECORD_END();
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f383 8811 	msr	BASEPRI, r3
}
 80066ec:	bf00      	nop
 80066ee:	3708      	adds	r7, #8
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	20014378 	.word	0x20014378

080066f8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80066fe:	f3ef 8311 	mrs	r3, BASEPRI
 8006702:	f04f 0120 	mov.w	r1, #32
 8006706:	f381 8811 	msr	BASEPRI, r1
 800670a:	607b      	str	r3, [r7, #4]
 800670c:	4807      	ldr	r0, [pc, #28]	; (800672c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800670e:	f7fe fcab 	bl	8005068 <_PreparePacket>
 8006712:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006714:	2211      	movs	r2, #17
 8006716:	6839      	ldr	r1, [r7, #0]
 8006718:	6838      	ldr	r0, [r7, #0]
 800671a:	f7fe fd93 	bl	8005244 <_SendPacket>
  RECORD_END();
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f383 8811 	msr	BASEPRI, r3
}
 8006724:	bf00      	nop
 8006726:	3708      	adds	r7, #8
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	20014378 	.word	0x20014378

08006730 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006730:	b580      	push	{r7, lr}
 8006732:	b088      	sub	sp, #32
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006738:	f3ef 8311 	mrs	r3, BASEPRI
 800673c:	f04f 0120 	mov.w	r1, #32
 8006740:	f381 8811 	msr	BASEPRI, r1
 8006744:	617b      	str	r3, [r7, #20]
 8006746:	4819      	ldr	r0, [pc, #100]	; (80067ac <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006748:	f7fe fc8e 	bl	8005068 <_PreparePacket>
 800674c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006752:	4b17      	ldr	r3, [pc, #92]	; (80067b0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	61fb      	str	r3, [r7, #28]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	61bb      	str	r3, [r7, #24]
 8006764:	e00b      	b.n	800677e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	b2da      	uxtb	r2, r3
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	1c59      	adds	r1, r3, #1
 800676e:	61f9      	str	r1, [r7, #28]
 8006770:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006774:	b2d2      	uxtb	r2, r2
 8006776:	701a      	strb	r2, [r3, #0]
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	09db      	lsrs	r3, r3, #7
 800677c:	61bb      	str	r3, [r7, #24]
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	2b7f      	cmp	r3, #127	; 0x7f
 8006782:	d8f0      	bhi.n	8006766 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	1c5a      	adds	r2, r3, #1
 8006788:	61fa      	str	r2, [r7, #28]
 800678a:	69ba      	ldr	r2, [r7, #24]
 800678c:	b2d2      	uxtb	r2, r2
 800678e:	701a      	strb	r2, [r3, #0]
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006794:	2208      	movs	r2, #8
 8006796:	68f9      	ldr	r1, [r7, #12]
 8006798:	6938      	ldr	r0, [r7, #16]
 800679a:	f7fe fd53 	bl	8005244 <_SendPacket>
  RECORD_END();
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f383 8811 	msr	BASEPRI, r3
}
 80067a4:	bf00      	nop
 80067a6:	3720      	adds	r7, #32
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	20014378 	.word	0x20014378
 80067b0:	20014348 	.word	0x20014348

080067b4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b088      	sub	sp, #32
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80067bc:	f3ef 8311 	mrs	r3, BASEPRI
 80067c0:	f04f 0120 	mov.w	r1, #32
 80067c4:	f381 8811 	msr	BASEPRI, r1
 80067c8:	617b      	str	r3, [r7, #20]
 80067ca:	4819      	ldr	r0, [pc, #100]	; (8006830 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80067cc:	f7fe fc4c 	bl	8005068 <_PreparePacket>
 80067d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80067d6:	4b17      	ldr	r3, [pc, #92]	; (8006834 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	61fb      	str	r3, [r7, #28]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	61bb      	str	r3, [r7, #24]
 80067e8:	e00b      	b.n	8006802 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	b2da      	uxtb	r2, r3
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	1c59      	adds	r1, r3, #1
 80067f2:	61f9      	str	r1, [r7, #28]
 80067f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067f8:	b2d2      	uxtb	r2, r2
 80067fa:	701a      	strb	r2, [r3, #0]
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	09db      	lsrs	r3, r3, #7
 8006800:	61bb      	str	r3, [r7, #24]
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	2b7f      	cmp	r3, #127	; 0x7f
 8006806:	d8f0      	bhi.n	80067ea <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	61fa      	str	r2, [r7, #28]
 800680e:	69ba      	ldr	r2, [r7, #24]
 8006810:	b2d2      	uxtb	r2, r2
 8006812:	701a      	strb	r2, [r3, #0]
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006818:	2204      	movs	r2, #4
 800681a:	68f9      	ldr	r1, [r7, #12]
 800681c:	6938      	ldr	r0, [r7, #16]
 800681e:	f7fe fd11 	bl	8005244 <_SendPacket>
  RECORD_END();
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f383 8811 	msr	BASEPRI, r3
}
 8006828:	bf00      	nop
 800682a:	3720      	adds	r7, #32
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	20014378 	.word	0x20014378
 8006834:	20014348 	.word	0x20014348

08006838 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006838:	b580      	push	{r7, lr}
 800683a:	b088      	sub	sp, #32
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006840:	f3ef 8311 	mrs	r3, BASEPRI
 8006844:	f04f 0120 	mov.w	r1, #32
 8006848:	f381 8811 	msr	BASEPRI, r1
 800684c:	617b      	str	r3, [r7, #20]
 800684e:	4819      	ldr	r0, [pc, #100]	; (80068b4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006850:	f7fe fc0a 	bl	8005068 <_PreparePacket>
 8006854:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800685a:	4b17      	ldr	r3, [pc, #92]	; (80068b8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	61fb      	str	r3, [r7, #28]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	61bb      	str	r3, [r7, #24]
 800686c:	e00b      	b.n	8006886 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	b2da      	uxtb	r2, r3
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	1c59      	adds	r1, r3, #1
 8006876:	61f9      	str	r1, [r7, #28]
 8006878:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800687c:	b2d2      	uxtb	r2, r2
 800687e:	701a      	strb	r2, [r3, #0]
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	09db      	lsrs	r3, r3, #7
 8006884:	61bb      	str	r3, [r7, #24]
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	2b7f      	cmp	r3, #127	; 0x7f
 800688a:	d8f0      	bhi.n	800686e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	1c5a      	adds	r2, r3, #1
 8006890:	61fa      	str	r2, [r7, #28]
 8006892:	69ba      	ldr	r2, [r7, #24]
 8006894:	b2d2      	uxtb	r2, r2
 8006896:	701a      	strb	r2, [r3, #0]
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800689c:	2206      	movs	r2, #6
 800689e:	68f9      	ldr	r1, [r7, #12]
 80068a0:	6938      	ldr	r0, [r7, #16]
 80068a2:	f7fe fccf 	bl	8005244 <_SendPacket>
  RECORD_END();
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f383 8811 	msr	BASEPRI, r3
}
 80068ac:	bf00      	nop
 80068ae:	3720      	adds	r7, #32
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	20014378 	.word	0x20014378
 80068b8:	20014348 	.word	0x20014348

080068bc <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80068bc:	b580      	push	{r7, lr}
 80068be:	b08a      	sub	sp, #40	; 0x28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80068c6:	f3ef 8311 	mrs	r3, BASEPRI
 80068ca:	f04f 0120 	mov.w	r1, #32
 80068ce:	f381 8811 	msr	BASEPRI, r1
 80068d2:	617b      	str	r3, [r7, #20]
 80068d4:	4827      	ldr	r0, [pc, #156]	; (8006974 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80068d6:	f7fe fbc7 	bl	8005068 <_PreparePacket>
 80068da:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80068e0:	4b25      	ldr	r3, [pc, #148]	; (8006978 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	627b      	str	r3, [r7, #36]	; 0x24
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	623b      	str	r3, [r7, #32]
 80068f2:	e00b      	b.n	800690c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	b2da      	uxtb	r2, r3
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	1c59      	adds	r1, r3, #1
 80068fc:	6279      	str	r1, [r7, #36]	; 0x24
 80068fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006902:	b2d2      	uxtb	r2, r2
 8006904:	701a      	strb	r2, [r3, #0]
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	09db      	lsrs	r3, r3, #7
 800690a:	623b      	str	r3, [r7, #32]
 800690c:	6a3b      	ldr	r3, [r7, #32]
 800690e:	2b7f      	cmp	r3, #127	; 0x7f
 8006910:	d8f0      	bhi.n	80068f4 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006914:	1c5a      	adds	r2, r3, #1
 8006916:	627a      	str	r2, [r7, #36]	; 0x24
 8006918:	6a3a      	ldr	r2, [r7, #32]
 800691a:	b2d2      	uxtb	r2, r2
 800691c:	701a      	strb	r2, [r3, #0]
 800691e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006920:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	61fb      	str	r3, [r7, #28]
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	61bb      	str	r3, [r7, #24]
 800692a:	e00b      	b.n	8006944 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	b2da      	uxtb	r2, r3
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	1c59      	adds	r1, r3, #1
 8006934:	61f9      	str	r1, [r7, #28]
 8006936:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800693a:	b2d2      	uxtb	r2, r2
 800693c:	701a      	strb	r2, [r3, #0]
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	09db      	lsrs	r3, r3, #7
 8006942:	61bb      	str	r3, [r7, #24]
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	2b7f      	cmp	r3, #127	; 0x7f
 8006948:	d8f0      	bhi.n	800692c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	1c5a      	adds	r2, r3, #1
 800694e:	61fa      	str	r2, [r7, #28]
 8006950:	69ba      	ldr	r2, [r7, #24]
 8006952:	b2d2      	uxtb	r2, r2
 8006954:	701a      	strb	r2, [r3, #0]
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800695a:	2207      	movs	r2, #7
 800695c:	68f9      	ldr	r1, [r7, #12]
 800695e:	6938      	ldr	r0, [r7, #16]
 8006960:	f7fe fc70 	bl	8005244 <_SendPacket>
  RECORD_END();
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	f383 8811 	msr	BASEPRI, r3
}
 800696a:	bf00      	nop
 800696c:	3728      	adds	r7, #40	; 0x28
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	20014378 	.word	0x20014378
 8006978:	20014348 	.word	0x20014348

0800697c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006984:	4b04      	ldr	r3, [pc, #16]	; (8006998 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	1ad3      	subs	r3, r2, r3
}
 800698c:	4618      	mov	r0, r3
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr
 8006998:	20014348 	.word	0x20014348

0800699c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800699c:	b580      	push	{r7, lr}
 800699e:	b08c      	sub	sp, #48	; 0x30
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	4603      	mov	r3, r0
 80069a4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80069a6:	4b3b      	ldr	r3, [pc, #236]	; (8006a94 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d06d      	beq.n	8006a8a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80069ae:	4b39      	ldr	r3, [pc, #228]	; (8006a94 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80069b4:	2300      	movs	r3, #0
 80069b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80069b8:	e008      	b.n	80069cc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80069ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80069c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d007      	beq.n	80069d6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80069c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c8:	3301      	adds	r3, #1
 80069ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80069cc:	79fb      	ldrb	r3, [r7, #7]
 80069ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d3f2      	bcc.n	80069ba <SEGGER_SYSVIEW_SendModule+0x1e>
 80069d4:	e000      	b.n	80069d8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80069d6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80069d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d055      	beq.n	8006a8a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80069de:	f3ef 8311 	mrs	r3, BASEPRI
 80069e2:	f04f 0120 	mov.w	r1, #32
 80069e6:	f381 8811 	msr	BASEPRI, r1
 80069ea:	617b      	str	r3, [r7, #20]
 80069ec:	482a      	ldr	r0, [pc, #168]	; (8006a98 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80069ee:	f7fe fb3b 	bl	8005068 <_PreparePacket>
 80069f2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	627b      	str	r3, [r7, #36]	; 0x24
 80069fc:	79fb      	ldrb	r3, [r7, #7]
 80069fe:	623b      	str	r3, [r7, #32]
 8006a00:	e00b      	b.n	8006a1a <SEGGER_SYSVIEW_SendModule+0x7e>
 8006a02:	6a3b      	ldr	r3, [r7, #32]
 8006a04:	b2da      	uxtb	r2, r3
 8006a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a08:	1c59      	adds	r1, r3, #1
 8006a0a:	6279      	str	r1, [r7, #36]	; 0x24
 8006a0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a10:	b2d2      	uxtb	r2, r2
 8006a12:	701a      	strb	r2, [r3, #0]
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	09db      	lsrs	r3, r3, #7
 8006a18:	623b      	str	r3, [r7, #32]
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	2b7f      	cmp	r3, #127	; 0x7f
 8006a1e:	d8f0      	bhi.n	8006a02 <SEGGER_SYSVIEW_SendModule+0x66>
 8006a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a22:	1c5a      	adds	r2, r3, #1
 8006a24:	627a      	str	r2, [r7, #36]	; 0x24
 8006a26:	6a3a      	ldr	r2, [r7, #32]
 8006a28:	b2d2      	uxtb	r2, r2
 8006a2a:	701a      	strb	r2, [r3, #0]
 8006a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	61fb      	str	r3, [r7, #28]
 8006a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	61bb      	str	r3, [r7, #24]
 8006a3a:	e00b      	b.n	8006a54 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	b2da      	uxtb	r2, r3
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	1c59      	adds	r1, r3, #1
 8006a44:	61f9      	str	r1, [r7, #28]
 8006a46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a4a:	b2d2      	uxtb	r2, r2
 8006a4c:	701a      	strb	r2, [r3, #0]
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	09db      	lsrs	r3, r3, #7
 8006a52:	61bb      	str	r3, [r7, #24]
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	2b7f      	cmp	r3, #127	; 0x7f
 8006a58:	d8f0      	bhi.n	8006a3c <SEGGER_SYSVIEW_SendModule+0xa0>
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	1c5a      	adds	r2, r3, #1
 8006a5e:	61fa      	str	r2, [r7, #28]
 8006a60:	69ba      	ldr	r2, [r7, #24]
 8006a62:	b2d2      	uxtb	r2, r2
 8006a64:	701a      	strb	r2, [r3, #0]
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2280      	movs	r2, #128	; 0x80
 8006a70:	4619      	mov	r1, r3
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f7fe faa8 	bl	8004fc8 <_EncodeStr>
 8006a78:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006a7a:	2216      	movs	r2, #22
 8006a7c:	68f9      	ldr	r1, [r7, #12]
 8006a7e:	6938      	ldr	r0, [r7, #16]
 8006a80:	f7fe fbe0 	bl	8005244 <_SendPacket>
      RECORD_END();
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006a8a:	bf00      	nop
 8006a8c:	3730      	adds	r7, #48	; 0x30
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	20014370 	.word	0x20014370
 8006a98:	20014378 	.word	0x20014378

08006a9c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006aa2:	4b0c      	ldr	r3, [pc, #48]	; (8006ad4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00f      	beq.n	8006aca <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006aaa:	4b0a      	ldr	r3, [pc, #40]	; (8006ad4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d002      	beq.n	8006abe <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1f2      	bne.n	8006ab0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006aca:	bf00      	nop
 8006acc:	3708      	adds	r7, #8
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	20014370 	.word	0x20014370

08006ad8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006ade:	f3ef 8311 	mrs	r3, BASEPRI
 8006ae2:	f04f 0120 	mov.w	r1, #32
 8006ae6:	f381 8811 	msr	BASEPRI, r1
 8006aea:	60fb      	str	r3, [r7, #12]
 8006aec:	4817      	ldr	r0, [pc, #92]	; (8006b4c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006aee:	f7fe fabb 	bl	8005068 <_PreparePacket>
 8006af2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	617b      	str	r3, [r7, #20]
 8006afc:	4b14      	ldr	r3, [pc, #80]	; (8006b50 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	613b      	str	r3, [r7, #16]
 8006b02:	e00b      	b.n	8006b1c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	b2da      	uxtb	r2, r3
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	1c59      	adds	r1, r3, #1
 8006b0c:	6179      	str	r1, [r7, #20]
 8006b0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b12:	b2d2      	uxtb	r2, r2
 8006b14:	701a      	strb	r2, [r3, #0]
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	09db      	lsrs	r3, r3, #7
 8006b1a:	613b      	str	r3, [r7, #16]
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	2b7f      	cmp	r3, #127	; 0x7f
 8006b20:	d8f0      	bhi.n	8006b04 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	1c5a      	adds	r2, r3, #1
 8006b26:	617a      	str	r2, [r7, #20]
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	b2d2      	uxtb	r2, r2
 8006b2c:	701a      	strb	r2, [r3, #0]
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006b32:	221b      	movs	r2, #27
 8006b34:	6879      	ldr	r1, [r7, #4]
 8006b36:	68b8      	ldr	r0, [r7, #8]
 8006b38:	f7fe fb84 	bl	8005244 <_SendPacket>
  RECORD_END();
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f383 8811 	msr	BASEPRI, r3
}
 8006b42:	bf00      	nop
 8006b44:	3718      	adds	r7, #24
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	20014378 	.word	0x20014378
 8006b50:	20014374 	.word	0x20014374

08006b54 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006b54:	b40f      	push	{r0, r1, r2, r3}
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b082      	sub	sp, #8
 8006b5a:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006b5c:	f107 0314 	add.w	r3, r7, #20
 8006b60:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006b62:	1d3b      	adds	r3, r7, #4
 8006b64:	461a      	mov	r2, r3
 8006b66:	2100      	movs	r1, #0
 8006b68:	6938      	ldr	r0, [r7, #16]
 8006b6a:	f7fe fe7b 	bl	8005864 <_VPrintTarget>
  va_end(ParamList);
}
 8006b6e:	bf00      	nop
 8006b70:	3708      	adds	r7, #8
 8006b72:	46bd      	mov	sp, r7
 8006b74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b78:	b004      	add	sp, #16
 8006b7a:	4770      	bx	lr

08006b7c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b08a      	sub	sp, #40	; 0x28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b84:	f3ef 8311 	mrs	r3, BASEPRI
 8006b88:	f04f 0120 	mov.w	r1, #32
 8006b8c:	f381 8811 	msr	BASEPRI, r1
 8006b90:	617b      	str	r3, [r7, #20]
 8006b92:	4827      	ldr	r0, [pc, #156]	; (8006c30 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006b94:	f7fe fa68 	bl	8005068 <_PreparePacket>
 8006b98:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b9a:	2280      	movs	r2, #128	; 0x80
 8006b9c:	6879      	ldr	r1, [r7, #4]
 8006b9e:	6938      	ldr	r0, [r7, #16]
 8006ba0:	f7fe fa12 	bl	8004fc8 <_EncodeStr>
 8006ba4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8006baa:	2301      	movs	r3, #1
 8006bac:	623b      	str	r3, [r7, #32]
 8006bae:	e00b      	b.n	8006bc8 <SEGGER_SYSVIEW_Warn+0x4c>
 8006bb0:	6a3b      	ldr	r3, [r7, #32]
 8006bb2:	b2da      	uxtb	r2, r3
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb6:	1c59      	adds	r1, r3, #1
 8006bb8:	6279      	str	r1, [r7, #36]	; 0x24
 8006bba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bbe:	b2d2      	uxtb	r2, r2
 8006bc0:	701a      	strb	r2, [r3, #0]
 8006bc2:	6a3b      	ldr	r3, [r7, #32]
 8006bc4:	09db      	lsrs	r3, r3, #7
 8006bc6:	623b      	str	r3, [r7, #32]
 8006bc8:	6a3b      	ldr	r3, [r7, #32]
 8006bca:	2b7f      	cmp	r3, #127	; 0x7f
 8006bcc:	d8f0      	bhi.n	8006bb0 <SEGGER_SYSVIEW_Warn+0x34>
 8006bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd0:	1c5a      	adds	r2, r3, #1
 8006bd2:	627a      	str	r2, [r7, #36]	; 0x24
 8006bd4:	6a3a      	ldr	r2, [r7, #32]
 8006bd6:	b2d2      	uxtb	r2, r2
 8006bd8:	701a      	strb	r2, [r3, #0]
 8006bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bdc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	61fb      	str	r3, [r7, #28]
 8006be2:	2300      	movs	r3, #0
 8006be4:	61bb      	str	r3, [r7, #24]
 8006be6:	e00b      	b.n	8006c00 <SEGGER_SYSVIEW_Warn+0x84>
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	b2da      	uxtb	r2, r3
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	1c59      	adds	r1, r3, #1
 8006bf0:	61f9      	str	r1, [r7, #28]
 8006bf2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bf6:	b2d2      	uxtb	r2, r2
 8006bf8:	701a      	strb	r2, [r3, #0]
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	09db      	lsrs	r3, r3, #7
 8006bfe:	61bb      	str	r3, [r7, #24]
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	2b7f      	cmp	r3, #127	; 0x7f
 8006c04:	d8f0      	bhi.n	8006be8 <SEGGER_SYSVIEW_Warn+0x6c>
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	1c5a      	adds	r2, r3, #1
 8006c0a:	61fa      	str	r2, [r7, #28]
 8006c0c:	69ba      	ldr	r2, [r7, #24]
 8006c0e:	b2d2      	uxtb	r2, r2
 8006c10:	701a      	strb	r2, [r3, #0]
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006c16:	221a      	movs	r2, #26
 8006c18:	68f9      	ldr	r1, [r7, #12]
 8006c1a:	6938      	ldr	r0, [r7, #16]
 8006c1c:	f7fe fb12 	bl	8005244 <_SendPacket>
  RECORD_END();
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	f383 8811 	msr	BASEPRI, r3
}
 8006c26:	bf00      	nop
 8006c28:	3728      	adds	r7, #40	; 0x28
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	20014378 	.word	0x20014378

08006c34 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8006c34:	b580      	push	{r7, lr}
 8006c36:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8006c38:	4803      	ldr	r0, [pc, #12]	; (8006c48 <_cbSendSystemDesc+0x14>)
 8006c3a:	f7ff fc8d 	bl	8006558 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8006c3e:	4803      	ldr	r0, [pc, #12]	; (8006c4c <_cbSendSystemDesc+0x18>)
 8006c40:	f7ff fc8a 	bl	8006558 <SEGGER_SYSVIEW_SendSysDesc>
}
 8006c44:	bf00      	nop
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	080078cc 	.word	0x080078cc
 8006c4c:	08007910 	.word	0x08007910

08006c50 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8006c50:	b580      	push	{r7, lr}
 8006c52:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8006c54:	4b06      	ldr	r3, [pc, #24]	; (8006c70 <SEGGER_SYSVIEW_Conf+0x20>)
 8006c56:	6818      	ldr	r0, [r3, #0]
 8006c58:	4b05      	ldr	r3, [pc, #20]	; (8006c70 <SEGGER_SYSVIEW_Conf+0x20>)
 8006c5a:	6819      	ldr	r1, [r3, #0]
 8006c5c:	4b05      	ldr	r3, [pc, #20]	; (8006c74 <SEGGER_SYSVIEW_Conf+0x24>)
 8006c5e:	4a06      	ldr	r2, [pc, #24]	; (8006c78 <SEGGER_SYSVIEW_Conf+0x28>)
 8006c60:	f7fe fff8 	bl	8005c54 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8006c64:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8006c68:	f7ff f838 	bl	8005cdc <SEGGER_SYSVIEW_SetRAMBase>
}
 8006c6c:	bf00      	nop
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	20000000 	.word	0x20000000
 8006c74:	08006c35 	.word	0x08006c35
 8006c78:	080079c0 	.word	0x080079c0

08006c7c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8006c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8006c82:	2300      	movs	r3, #0
 8006c84:	607b      	str	r3, [r7, #4]
 8006c86:	e033      	b.n	8006cf0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8006c88:	491e      	ldr	r1, [pc, #120]	; (8006d04 <_cbSendTaskList+0x88>)
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4413      	add	r3, r2
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	440b      	add	r3, r1
 8006c96:	6818      	ldr	r0, [r3, #0]
 8006c98:	491a      	ldr	r1, [pc, #104]	; (8006d04 <_cbSendTaskList+0x88>)
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4413      	add	r3, r2
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	440b      	add	r3, r1
 8006ca6:	3304      	adds	r3, #4
 8006ca8:	6819      	ldr	r1, [r3, #0]
 8006caa:	4c16      	ldr	r4, [pc, #88]	; (8006d04 <_cbSendTaskList+0x88>)
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4423      	add	r3, r4
 8006cb8:	3308      	adds	r3, #8
 8006cba:	681c      	ldr	r4, [r3, #0]
 8006cbc:	4d11      	ldr	r5, [pc, #68]	; (8006d04 <_cbSendTaskList+0x88>)
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	442b      	add	r3, r5
 8006cca:	330c      	adds	r3, #12
 8006ccc:	681d      	ldr	r5, [r3, #0]
 8006cce:	4e0d      	ldr	r6, [pc, #52]	; (8006d04 <_cbSendTaskList+0x88>)
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4433      	add	r3, r6
 8006cdc:	3310      	adds	r3, #16
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	9300      	str	r3, [sp, #0]
 8006ce2:	462b      	mov	r3, r5
 8006ce4:	4622      	mov	r2, r4
 8006ce6:	f000 f8bd 	bl	8006e64 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	3301      	adds	r3, #1
 8006cee:	607b      	str	r3, [r7, #4]
 8006cf0:	4b05      	ldr	r3, [pc, #20]	; (8006d08 <_cbSendTaskList+0x8c>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d3c6      	bcc.n	8006c88 <_cbSendTaskList+0xc>
  }
}
 8006cfa:	bf00      	nop
 8006cfc:	bf00      	nop
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d04:	2001445c 	.word	0x2001445c
 8006d08:	200144fc 	.word	0x200144fc

08006d0c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8006d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d10:	b082      	sub	sp, #8
 8006d12:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8006d14:	f7fc fba4 	bl	8003460 <xTaskGetTickCountFromISR>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	469a      	mov	sl, r3
 8006d1e:	4693      	mov	fp, r2
 8006d20:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8006d24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d28:	4602      	mov	r2, r0
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	f04f 0a00 	mov.w	sl, #0
 8006d30:	f04f 0b00 	mov.w	fp, #0
 8006d34:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8006d38:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8006d3c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8006d40:	4652      	mov	r2, sl
 8006d42:	465b      	mov	r3, fp
 8006d44:	1a14      	subs	r4, r2, r0
 8006d46:	eb63 0501 	sbc.w	r5, r3, r1
 8006d4a:	f04f 0200 	mov.w	r2, #0
 8006d4e:	f04f 0300 	mov.w	r3, #0
 8006d52:	00ab      	lsls	r3, r5, #2
 8006d54:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8006d58:	00a2      	lsls	r2, r4, #2
 8006d5a:	4614      	mov	r4, r2
 8006d5c:	461d      	mov	r5, r3
 8006d5e:	eb14 0800 	adds.w	r8, r4, r0
 8006d62:	eb45 0901 	adc.w	r9, r5, r1
 8006d66:	f04f 0200 	mov.w	r2, #0
 8006d6a:	f04f 0300 	mov.w	r3, #0
 8006d6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d7a:	4690      	mov	r8, r2
 8006d7c:	4699      	mov	r9, r3
 8006d7e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8006d82:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8006d86:	4610      	mov	r0, r2
 8006d88:	4619      	mov	r1, r3
 8006d8a:	3708      	adds	r7, #8
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08006d94 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b086      	sub	sp, #24
 8006d98:	af02      	add	r7, sp, #8
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	607a      	str	r2, [r7, #4]
 8006da0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8006da2:	2205      	movs	r2, #5
 8006da4:	492b      	ldr	r1, [pc, #172]	; (8006e54 <SYSVIEW_AddTask+0xc0>)
 8006da6:	68b8      	ldr	r0, [r7, #8]
 8006da8:	f000 f8a2 	bl	8006ef0 <memcmp>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d04b      	beq.n	8006e4a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8006db2:	4b29      	ldr	r3, [pc, #164]	; (8006e58 <SYSVIEW_AddTask+0xc4>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2b07      	cmp	r3, #7
 8006db8:	d903      	bls.n	8006dc2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8006dba:	4828      	ldr	r0, [pc, #160]	; (8006e5c <SYSVIEW_AddTask+0xc8>)
 8006dbc:	f7ff fede 	bl	8006b7c <SEGGER_SYSVIEW_Warn>
    return;
 8006dc0:	e044      	b.n	8006e4c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8006dc2:	4b25      	ldr	r3, [pc, #148]	; (8006e58 <SYSVIEW_AddTask+0xc4>)
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	4926      	ldr	r1, [pc, #152]	; (8006e60 <SYSVIEW_AddTask+0xcc>)
 8006dc8:	4613      	mov	r3, r2
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	4413      	add	r3, r2
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	440b      	add	r3, r1
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8006dd6:	4b20      	ldr	r3, [pc, #128]	; (8006e58 <SYSVIEW_AddTask+0xc4>)
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	4921      	ldr	r1, [pc, #132]	; (8006e60 <SYSVIEW_AddTask+0xcc>)
 8006ddc:	4613      	mov	r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	4413      	add	r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	440b      	add	r3, r1
 8006de6:	3304      	adds	r3, #4
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8006dec:	4b1a      	ldr	r3, [pc, #104]	; (8006e58 <SYSVIEW_AddTask+0xc4>)
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	491b      	ldr	r1, [pc, #108]	; (8006e60 <SYSVIEW_AddTask+0xcc>)
 8006df2:	4613      	mov	r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	4413      	add	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	440b      	add	r3, r1
 8006dfc:	3308      	adds	r3, #8
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8006e02:	4b15      	ldr	r3, [pc, #84]	; (8006e58 <SYSVIEW_AddTask+0xc4>)
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	4916      	ldr	r1, [pc, #88]	; (8006e60 <SYSVIEW_AddTask+0xcc>)
 8006e08:	4613      	mov	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4413      	add	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	440b      	add	r3, r1
 8006e12:	330c      	adds	r3, #12
 8006e14:	683a      	ldr	r2, [r7, #0]
 8006e16:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8006e18:	4b0f      	ldr	r3, [pc, #60]	; (8006e58 <SYSVIEW_AddTask+0xc4>)
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	4910      	ldr	r1, [pc, #64]	; (8006e60 <SYSVIEW_AddTask+0xcc>)
 8006e1e:	4613      	mov	r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4413      	add	r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	440b      	add	r3, r1
 8006e28:	3310      	adds	r3, #16
 8006e2a:	69ba      	ldr	r2, [r7, #24]
 8006e2c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8006e2e:	4b0a      	ldr	r3, [pc, #40]	; (8006e58 <SYSVIEW_AddTask+0xc4>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	3301      	adds	r3, #1
 8006e34:	4a08      	ldr	r2, [pc, #32]	; (8006e58 <SYSVIEW_AddTask+0xc4>)
 8006e36:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	9300      	str	r3, [sp, #0]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	68b9      	ldr	r1, [r7, #8]
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f000 f80e 	bl	8006e64 <SYSVIEW_SendTaskInfo>
 8006e48:	e000      	b.n	8006e4c <SYSVIEW_AddTask+0xb8>
    return;
 8006e4a:	bf00      	nop

}
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	08007920 	.word	0x08007920
 8006e58:	200144fc 	.word	0x200144fc
 8006e5c:	08007928 	.word	0x08007928
 8006e60:	2001445c 	.word	0x2001445c

08006e64 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b08a      	sub	sp, #40	; 0x28
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	607a      	str	r2, [r7, #4]
 8006e70:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8006e72:	f107 0314 	add.w	r3, r7, #20
 8006e76:	2214      	movs	r2, #20
 8006e78:	2100      	movs	r1, #0
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f000 f856 	bl	8006f2c <memset>
  TaskInfo.TaskID     = TaskID;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8006e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e92:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8006e94:	f107 0314 	add.w	r3, r7, #20
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7ff fa65 	bl	8006368 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8006e9e:	bf00      	nop
 8006ea0:	3728      	adds	r7, #40	; 0x28
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
	...

08006ea8 <__libc_init_array>:
 8006ea8:	b570      	push	{r4, r5, r6, lr}
 8006eaa:	4d0d      	ldr	r5, [pc, #52]	; (8006ee0 <__libc_init_array+0x38>)
 8006eac:	4c0d      	ldr	r4, [pc, #52]	; (8006ee4 <__libc_init_array+0x3c>)
 8006eae:	1b64      	subs	r4, r4, r5
 8006eb0:	10a4      	asrs	r4, r4, #2
 8006eb2:	2600      	movs	r6, #0
 8006eb4:	42a6      	cmp	r6, r4
 8006eb6:	d109      	bne.n	8006ecc <__libc_init_array+0x24>
 8006eb8:	4d0b      	ldr	r5, [pc, #44]	; (8006ee8 <__libc_init_array+0x40>)
 8006eba:	4c0c      	ldr	r4, [pc, #48]	; (8006eec <__libc_init_array+0x44>)
 8006ebc:	f000 fcc0 	bl	8007840 <_init>
 8006ec0:	1b64      	subs	r4, r4, r5
 8006ec2:	10a4      	asrs	r4, r4, #2
 8006ec4:	2600      	movs	r6, #0
 8006ec6:	42a6      	cmp	r6, r4
 8006ec8:	d105      	bne.n	8006ed6 <__libc_init_array+0x2e>
 8006eca:	bd70      	pop	{r4, r5, r6, pc}
 8006ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ed0:	4798      	blx	r3
 8006ed2:	3601      	adds	r6, #1
 8006ed4:	e7ee      	b.n	8006eb4 <__libc_init_array+0xc>
 8006ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eda:	4798      	blx	r3
 8006edc:	3601      	adds	r6, #1
 8006ede:	e7f2      	b.n	8006ec6 <__libc_init_array+0x1e>
 8006ee0:	08007a04 	.word	0x08007a04
 8006ee4:	08007a04 	.word	0x08007a04
 8006ee8:	08007a04 	.word	0x08007a04
 8006eec:	08007a08 	.word	0x08007a08

08006ef0 <memcmp>:
 8006ef0:	b510      	push	{r4, lr}
 8006ef2:	3901      	subs	r1, #1
 8006ef4:	4402      	add	r2, r0
 8006ef6:	4290      	cmp	r0, r2
 8006ef8:	d101      	bne.n	8006efe <memcmp+0xe>
 8006efa:	2000      	movs	r0, #0
 8006efc:	e005      	b.n	8006f0a <memcmp+0x1a>
 8006efe:	7803      	ldrb	r3, [r0, #0]
 8006f00:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006f04:	42a3      	cmp	r3, r4
 8006f06:	d001      	beq.n	8006f0c <memcmp+0x1c>
 8006f08:	1b18      	subs	r0, r3, r4
 8006f0a:	bd10      	pop	{r4, pc}
 8006f0c:	3001      	adds	r0, #1
 8006f0e:	e7f2      	b.n	8006ef6 <memcmp+0x6>

08006f10 <memcpy>:
 8006f10:	440a      	add	r2, r1
 8006f12:	4291      	cmp	r1, r2
 8006f14:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f18:	d100      	bne.n	8006f1c <memcpy+0xc>
 8006f1a:	4770      	bx	lr
 8006f1c:	b510      	push	{r4, lr}
 8006f1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f26:	4291      	cmp	r1, r2
 8006f28:	d1f9      	bne.n	8006f1e <memcpy+0xe>
 8006f2a:	bd10      	pop	{r4, pc}

08006f2c <memset>:
 8006f2c:	4402      	add	r2, r0
 8006f2e:	4603      	mov	r3, r0
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d100      	bne.n	8006f36 <memset+0xa>
 8006f34:	4770      	bx	lr
 8006f36:	f803 1b01 	strb.w	r1, [r3], #1
 8006f3a:	e7f9      	b.n	8006f30 <memset+0x4>

08006f3c <sniprintf>:
 8006f3c:	b40c      	push	{r2, r3}
 8006f3e:	b530      	push	{r4, r5, lr}
 8006f40:	4b17      	ldr	r3, [pc, #92]	; (8006fa0 <sniprintf+0x64>)
 8006f42:	1e0c      	subs	r4, r1, #0
 8006f44:	681d      	ldr	r5, [r3, #0]
 8006f46:	b09d      	sub	sp, #116	; 0x74
 8006f48:	da08      	bge.n	8006f5c <sniprintf+0x20>
 8006f4a:	238b      	movs	r3, #139	; 0x8b
 8006f4c:	602b      	str	r3, [r5, #0]
 8006f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f52:	b01d      	add	sp, #116	; 0x74
 8006f54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f58:	b002      	add	sp, #8
 8006f5a:	4770      	bx	lr
 8006f5c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006f60:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006f64:	bf14      	ite	ne
 8006f66:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006f6a:	4623      	moveq	r3, r4
 8006f6c:	9304      	str	r3, [sp, #16]
 8006f6e:	9307      	str	r3, [sp, #28]
 8006f70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f74:	9002      	str	r0, [sp, #8]
 8006f76:	9006      	str	r0, [sp, #24]
 8006f78:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006f7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006f7e:	ab21      	add	r3, sp, #132	; 0x84
 8006f80:	a902      	add	r1, sp, #8
 8006f82:	4628      	mov	r0, r5
 8006f84:	9301      	str	r3, [sp, #4]
 8006f86:	f000 f869 	bl	800705c <_svfiprintf_r>
 8006f8a:	1c43      	adds	r3, r0, #1
 8006f8c:	bfbc      	itt	lt
 8006f8e:	238b      	movlt	r3, #139	; 0x8b
 8006f90:	602b      	strlt	r3, [r5, #0]
 8006f92:	2c00      	cmp	r4, #0
 8006f94:	d0dd      	beq.n	8006f52 <sniprintf+0x16>
 8006f96:	9b02      	ldr	r3, [sp, #8]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	701a      	strb	r2, [r3, #0]
 8006f9c:	e7d9      	b.n	8006f52 <sniprintf+0x16>
 8006f9e:	bf00      	nop
 8006fa0:	20000014 	.word	0x20000014

08006fa4 <__ssputs_r>:
 8006fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa8:	688e      	ldr	r6, [r1, #8]
 8006faa:	429e      	cmp	r6, r3
 8006fac:	4682      	mov	sl, r0
 8006fae:	460c      	mov	r4, r1
 8006fb0:	4690      	mov	r8, r2
 8006fb2:	461f      	mov	r7, r3
 8006fb4:	d838      	bhi.n	8007028 <__ssputs_r+0x84>
 8006fb6:	898a      	ldrh	r2, [r1, #12]
 8006fb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006fbc:	d032      	beq.n	8007024 <__ssputs_r+0x80>
 8006fbe:	6825      	ldr	r5, [r4, #0]
 8006fc0:	6909      	ldr	r1, [r1, #16]
 8006fc2:	eba5 0901 	sub.w	r9, r5, r1
 8006fc6:	6965      	ldr	r5, [r4, #20]
 8006fc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	444b      	add	r3, r9
 8006fd4:	106d      	asrs	r5, r5, #1
 8006fd6:	429d      	cmp	r5, r3
 8006fd8:	bf38      	it	cc
 8006fda:	461d      	movcc	r5, r3
 8006fdc:	0553      	lsls	r3, r2, #21
 8006fde:	d531      	bpl.n	8007044 <__ssputs_r+0xa0>
 8006fe0:	4629      	mov	r1, r5
 8006fe2:	f000 fb55 	bl	8007690 <_malloc_r>
 8006fe6:	4606      	mov	r6, r0
 8006fe8:	b950      	cbnz	r0, 8007000 <__ssputs_r+0x5c>
 8006fea:	230c      	movs	r3, #12
 8006fec:	f8ca 3000 	str.w	r3, [sl]
 8006ff0:	89a3      	ldrh	r3, [r4, #12]
 8006ff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ff6:	81a3      	strh	r3, [r4, #12]
 8006ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007000:	6921      	ldr	r1, [r4, #16]
 8007002:	464a      	mov	r2, r9
 8007004:	f7ff ff84 	bl	8006f10 <memcpy>
 8007008:	89a3      	ldrh	r3, [r4, #12]
 800700a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800700e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007012:	81a3      	strh	r3, [r4, #12]
 8007014:	6126      	str	r6, [r4, #16]
 8007016:	6165      	str	r5, [r4, #20]
 8007018:	444e      	add	r6, r9
 800701a:	eba5 0509 	sub.w	r5, r5, r9
 800701e:	6026      	str	r6, [r4, #0]
 8007020:	60a5      	str	r5, [r4, #8]
 8007022:	463e      	mov	r6, r7
 8007024:	42be      	cmp	r6, r7
 8007026:	d900      	bls.n	800702a <__ssputs_r+0x86>
 8007028:	463e      	mov	r6, r7
 800702a:	6820      	ldr	r0, [r4, #0]
 800702c:	4632      	mov	r2, r6
 800702e:	4641      	mov	r1, r8
 8007030:	f000 faa8 	bl	8007584 <memmove>
 8007034:	68a3      	ldr	r3, [r4, #8]
 8007036:	1b9b      	subs	r3, r3, r6
 8007038:	60a3      	str	r3, [r4, #8]
 800703a:	6823      	ldr	r3, [r4, #0]
 800703c:	4433      	add	r3, r6
 800703e:	6023      	str	r3, [r4, #0]
 8007040:	2000      	movs	r0, #0
 8007042:	e7db      	b.n	8006ffc <__ssputs_r+0x58>
 8007044:	462a      	mov	r2, r5
 8007046:	f000 fb97 	bl	8007778 <_realloc_r>
 800704a:	4606      	mov	r6, r0
 800704c:	2800      	cmp	r0, #0
 800704e:	d1e1      	bne.n	8007014 <__ssputs_r+0x70>
 8007050:	6921      	ldr	r1, [r4, #16]
 8007052:	4650      	mov	r0, sl
 8007054:	f000 fab0 	bl	80075b8 <_free_r>
 8007058:	e7c7      	b.n	8006fea <__ssputs_r+0x46>
	...

0800705c <_svfiprintf_r>:
 800705c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007060:	4698      	mov	r8, r3
 8007062:	898b      	ldrh	r3, [r1, #12]
 8007064:	061b      	lsls	r3, r3, #24
 8007066:	b09d      	sub	sp, #116	; 0x74
 8007068:	4607      	mov	r7, r0
 800706a:	460d      	mov	r5, r1
 800706c:	4614      	mov	r4, r2
 800706e:	d50e      	bpl.n	800708e <_svfiprintf_r+0x32>
 8007070:	690b      	ldr	r3, [r1, #16]
 8007072:	b963      	cbnz	r3, 800708e <_svfiprintf_r+0x32>
 8007074:	2140      	movs	r1, #64	; 0x40
 8007076:	f000 fb0b 	bl	8007690 <_malloc_r>
 800707a:	6028      	str	r0, [r5, #0]
 800707c:	6128      	str	r0, [r5, #16]
 800707e:	b920      	cbnz	r0, 800708a <_svfiprintf_r+0x2e>
 8007080:	230c      	movs	r3, #12
 8007082:	603b      	str	r3, [r7, #0]
 8007084:	f04f 30ff 	mov.w	r0, #4294967295
 8007088:	e0d1      	b.n	800722e <_svfiprintf_r+0x1d2>
 800708a:	2340      	movs	r3, #64	; 0x40
 800708c:	616b      	str	r3, [r5, #20]
 800708e:	2300      	movs	r3, #0
 8007090:	9309      	str	r3, [sp, #36]	; 0x24
 8007092:	2320      	movs	r3, #32
 8007094:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007098:	f8cd 800c 	str.w	r8, [sp, #12]
 800709c:	2330      	movs	r3, #48	; 0x30
 800709e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007248 <_svfiprintf_r+0x1ec>
 80070a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070a6:	f04f 0901 	mov.w	r9, #1
 80070aa:	4623      	mov	r3, r4
 80070ac:	469a      	mov	sl, r3
 80070ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070b2:	b10a      	cbz	r2, 80070b8 <_svfiprintf_r+0x5c>
 80070b4:	2a25      	cmp	r2, #37	; 0x25
 80070b6:	d1f9      	bne.n	80070ac <_svfiprintf_r+0x50>
 80070b8:	ebba 0b04 	subs.w	fp, sl, r4
 80070bc:	d00b      	beq.n	80070d6 <_svfiprintf_r+0x7a>
 80070be:	465b      	mov	r3, fp
 80070c0:	4622      	mov	r2, r4
 80070c2:	4629      	mov	r1, r5
 80070c4:	4638      	mov	r0, r7
 80070c6:	f7ff ff6d 	bl	8006fa4 <__ssputs_r>
 80070ca:	3001      	adds	r0, #1
 80070cc:	f000 80aa 	beq.w	8007224 <_svfiprintf_r+0x1c8>
 80070d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070d2:	445a      	add	r2, fp
 80070d4:	9209      	str	r2, [sp, #36]	; 0x24
 80070d6:	f89a 3000 	ldrb.w	r3, [sl]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	f000 80a2 	beq.w	8007224 <_svfiprintf_r+0x1c8>
 80070e0:	2300      	movs	r3, #0
 80070e2:	f04f 32ff 	mov.w	r2, #4294967295
 80070e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070ea:	f10a 0a01 	add.w	sl, sl, #1
 80070ee:	9304      	str	r3, [sp, #16]
 80070f0:	9307      	str	r3, [sp, #28]
 80070f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070f6:	931a      	str	r3, [sp, #104]	; 0x68
 80070f8:	4654      	mov	r4, sl
 80070fa:	2205      	movs	r2, #5
 80070fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007100:	4851      	ldr	r0, [pc, #324]	; (8007248 <_svfiprintf_r+0x1ec>)
 8007102:	f7f9 f8c5 	bl	8000290 <memchr>
 8007106:	9a04      	ldr	r2, [sp, #16]
 8007108:	b9d8      	cbnz	r0, 8007142 <_svfiprintf_r+0xe6>
 800710a:	06d0      	lsls	r0, r2, #27
 800710c:	bf44      	itt	mi
 800710e:	2320      	movmi	r3, #32
 8007110:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007114:	0711      	lsls	r1, r2, #28
 8007116:	bf44      	itt	mi
 8007118:	232b      	movmi	r3, #43	; 0x2b
 800711a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800711e:	f89a 3000 	ldrb.w	r3, [sl]
 8007122:	2b2a      	cmp	r3, #42	; 0x2a
 8007124:	d015      	beq.n	8007152 <_svfiprintf_r+0xf6>
 8007126:	9a07      	ldr	r2, [sp, #28]
 8007128:	4654      	mov	r4, sl
 800712a:	2000      	movs	r0, #0
 800712c:	f04f 0c0a 	mov.w	ip, #10
 8007130:	4621      	mov	r1, r4
 8007132:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007136:	3b30      	subs	r3, #48	; 0x30
 8007138:	2b09      	cmp	r3, #9
 800713a:	d94e      	bls.n	80071da <_svfiprintf_r+0x17e>
 800713c:	b1b0      	cbz	r0, 800716c <_svfiprintf_r+0x110>
 800713e:	9207      	str	r2, [sp, #28]
 8007140:	e014      	b.n	800716c <_svfiprintf_r+0x110>
 8007142:	eba0 0308 	sub.w	r3, r0, r8
 8007146:	fa09 f303 	lsl.w	r3, r9, r3
 800714a:	4313      	orrs	r3, r2
 800714c:	9304      	str	r3, [sp, #16]
 800714e:	46a2      	mov	sl, r4
 8007150:	e7d2      	b.n	80070f8 <_svfiprintf_r+0x9c>
 8007152:	9b03      	ldr	r3, [sp, #12]
 8007154:	1d19      	adds	r1, r3, #4
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	9103      	str	r1, [sp, #12]
 800715a:	2b00      	cmp	r3, #0
 800715c:	bfbb      	ittet	lt
 800715e:	425b      	neglt	r3, r3
 8007160:	f042 0202 	orrlt.w	r2, r2, #2
 8007164:	9307      	strge	r3, [sp, #28]
 8007166:	9307      	strlt	r3, [sp, #28]
 8007168:	bfb8      	it	lt
 800716a:	9204      	strlt	r2, [sp, #16]
 800716c:	7823      	ldrb	r3, [r4, #0]
 800716e:	2b2e      	cmp	r3, #46	; 0x2e
 8007170:	d10c      	bne.n	800718c <_svfiprintf_r+0x130>
 8007172:	7863      	ldrb	r3, [r4, #1]
 8007174:	2b2a      	cmp	r3, #42	; 0x2a
 8007176:	d135      	bne.n	80071e4 <_svfiprintf_r+0x188>
 8007178:	9b03      	ldr	r3, [sp, #12]
 800717a:	1d1a      	adds	r2, r3, #4
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	9203      	str	r2, [sp, #12]
 8007180:	2b00      	cmp	r3, #0
 8007182:	bfb8      	it	lt
 8007184:	f04f 33ff 	movlt.w	r3, #4294967295
 8007188:	3402      	adds	r4, #2
 800718a:	9305      	str	r3, [sp, #20]
 800718c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007258 <_svfiprintf_r+0x1fc>
 8007190:	7821      	ldrb	r1, [r4, #0]
 8007192:	2203      	movs	r2, #3
 8007194:	4650      	mov	r0, sl
 8007196:	f7f9 f87b 	bl	8000290 <memchr>
 800719a:	b140      	cbz	r0, 80071ae <_svfiprintf_r+0x152>
 800719c:	2340      	movs	r3, #64	; 0x40
 800719e:	eba0 000a 	sub.w	r0, r0, sl
 80071a2:	fa03 f000 	lsl.w	r0, r3, r0
 80071a6:	9b04      	ldr	r3, [sp, #16]
 80071a8:	4303      	orrs	r3, r0
 80071aa:	3401      	adds	r4, #1
 80071ac:	9304      	str	r3, [sp, #16]
 80071ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071b2:	4826      	ldr	r0, [pc, #152]	; (800724c <_svfiprintf_r+0x1f0>)
 80071b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071b8:	2206      	movs	r2, #6
 80071ba:	f7f9 f869 	bl	8000290 <memchr>
 80071be:	2800      	cmp	r0, #0
 80071c0:	d038      	beq.n	8007234 <_svfiprintf_r+0x1d8>
 80071c2:	4b23      	ldr	r3, [pc, #140]	; (8007250 <_svfiprintf_r+0x1f4>)
 80071c4:	bb1b      	cbnz	r3, 800720e <_svfiprintf_r+0x1b2>
 80071c6:	9b03      	ldr	r3, [sp, #12]
 80071c8:	3307      	adds	r3, #7
 80071ca:	f023 0307 	bic.w	r3, r3, #7
 80071ce:	3308      	adds	r3, #8
 80071d0:	9303      	str	r3, [sp, #12]
 80071d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071d4:	4433      	add	r3, r6
 80071d6:	9309      	str	r3, [sp, #36]	; 0x24
 80071d8:	e767      	b.n	80070aa <_svfiprintf_r+0x4e>
 80071da:	fb0c 3202 	mla	r2, ip, r2, r3
 80071de:	460c      	mov	r4, r1
 80071e0:	2001      	movs	r0, #1
 80071e2:	e7a5      	b.n	8007130 <_svfiprintf_r+0xd4>
 80071e4:	2300      	movs	r3, #0
 80071e6:	3401      	adds	r4, #1
 80071e8:	9305      	str	r3, [sp, #20]
 80071ea:	4619      	mov	r1, r3
 80071ec:	f04f 0c0a 	mov.w	ip, #10
 80071f0:	4620      	mov	r0, r4
 80071f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071f6:	3a30      	subs	r2, #48	; 0x30
 80071f8:	2a09      	cmp	r2, #9
 80071fa:	d903      	bls.n	8007204 <_svfiprintf_r+0x1a8>
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d0c5      	beq.n	800718c <_svfiprintf_r+0x130>
 8007200:	9105      	str	r1, [sp, #20]
 8007202:	e7c3      	b.n	800718c <_svfiprintf_r+0x130>
 8007204:	fb0c 2101 	mla	r1, ip, r1, r2
 8007208:	4604      	mov	r4, r0
 800720a:	2301      	movs	r3, #1
 800720c:	e7f0      	b.n	80071f0 <_svfiprintf_r+0x194>
 800720e:	ab03      	add	r3, sp, #12
 8007210:	9300      	str	r3, [sp, #0]
 8007212:	462a      	mov	r2, r5
 8007214:	4b0f      	ldr	r3, [pc, #60]	; (8007254 <_svfiprintf_r+0x1f8>)
 8007216:	a904      	add	r1, sp, #16
 8007218:	4638      	mov	r0, r7
 800721a:	f3af 8000 	nop.w
 800721e:	1c42      	adds	r2, r0, #1
 8007220:	4606      	mov	r6, r0
 8007222:	d1d6      	bne.n	80071d2 <_svfiprintf_r+0x176>
 8007224:	89ab      	ldrh	r3, [r5, #12]
 8007226:	065b      	lsls	r3, r3, #25
 8007228:	f53f af2c 	bmi.w	8007084 <_svfiprintf_r+0x28>
 800722c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800722e:	b01d      	add	sp, #116	; 0x74
 8007230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007234:	ab03      	add	r3, sp, #12
 8007236:	9300      	str	r3, [sp, #0]
 8007238:	462a      	mov	r2, r5
 800723a:	4b06      	ldr	r3, [pc, #24]	; (8007254 <_svfiprintf_r+0x1f8>)
 800723c:	a904      	add	r1, sp, #16
 800723e:	4638      	mov	r0, r7
 8007240:	f000 f87a 	bl	8007338 <_printf_i>
 8007244:	e7eb      	b.n	800721e <_svfiprintf_r+0x1c2>
 8007246:	bf00      	nop
 8007248:	080079c8 	.word	0x080079c8
 800724c:	080079d2 	.word	0x080079d2
 8007250:	00000000 	.word	0x00000000
 8007254:	08006fa5 	.word	0x08006fa5
 8007258:	080079ce 	.word	0x080079ce

0800725c <_printf_common>:
 800725c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007260:	4616      	mov	r6, r2
 8007262:	4699      	mov	r9, r3
 8007264:	688a      	ldr	r2, [r1, #8]
 8007266:	690b      	ldr	r3, [r1, #16]
 8007268:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800726c:	4293      	cmp	r3, r2
 800726e:	bfb8      	it	lt
 8007270:	4613      	movlt	r3, r2
 8007272:	6033      	str	r3, [r6, #0]
 8007274:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007278:	4607      	mov	r7, r0
 800727a:	460c      	mov	r4, r1
 800727c:	b10a      	cbz	r2, 8007282 <_printf_common+0x26>
 800727e:	3301      	adds	r3, #1
 8007280:	6033      	str	r3, [r6, #0]
 8007282:	6823      	ldr	r3, [r4, #0]
 8007284:	0699      	lsls	r1, r3, #26
 8007286:	bf42      	ittt	mi
 8007288:	6833      	ldrmi	r3, [r6, #0]
 800728a:	3302      	addmi	r3, #2
 800728c:	6033      	strmi	r3, [r6, #0]
 800728e:	6825      	ldr	r5, [r4, #0]
 8007290:	f015 0506 	ands.w	r5, r5, #6
 8007294:	d106      	bne.n	80072a4 <_printf_common+0x48>
 8007296:	f104 0a19 	add.w	sl, r4, #25
 800729a:	68e3      	ldr	r3, [r4, #12]
 800729c:	6832      	ldr	r2, [r6, #0]
 800729e:	1a9b      	subs	r3, r3, r2
 80072a0:	42ab      	cmp	r3, r5
 80072a2:	dc26      	bgt.n	80072f2 <_printf_common+0x96>
 80072a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072a8:	1e13      	subs	r3, r2, #0
 80072aa:	6822      	ldr	r2, [r4, #0]
 80072ac:	bf18      	it	ne
 80072ae:	2301      	movne	r3, #1
 80072b0:	0692      	lsls	r2, r2, #26
 80072b2:	d42b      	bmi.n	800730c <_printf_common+0xb0>
 80072b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072b8:	4649      	mov	r1, r9
 80072ba:	4638      	mov	r0, r7
 80072bc:	47c0      	blx	r8
 80072be:	3001      	adds	r0, #1
 80072c0:	d01e      	beq.n	8007300 <_printf_common+0xa4>
 80072c2:	6823      	ldr	r3, [r4, #0]
 80072c4:	68e5      	ldr	r5, [r4, #12]
 80072c6:	6832      	ldr	r2, [r6, #0]
 80072c8:	f003 0306 	and.w	r3, r3, #6
 80072cc:	2b04      	cmp	r3, #4
 80072ce:	bf08      	it	eq
 80072d0:	1aad      	subeq	r5, r5, r2
 80072d2:	68a3      	ldr	r3, [r4, #8]
 80072d4:	6922      	ldr	r2, [r4, #16]
 80072d6:	bf0c      	ite	eq
 80072d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072dc:	2500      	movne	r5, #0
 80072de:	4293      	cmp	r3, r2
 80072e0:	bfc4      	itt	gt
 80072e2:	1a9b      	subgt	r3, r3, r2
 80072e4:	18ed      	addgt	r5, r5, r3
 80072e6:	2600      	movs	r6, #0
 80072e8:	341a      	adds	r4, #26
 80072ea:	42b5      	cmp	r5, r6
 80072ec:	d11a      	bne.n	8007324 <_printf_common+0xc8>
 80072ee:	2000      	movs	r0, #0
 80072f0:	e008      	b.n	8007304 <_printf_common+0xa8>
 80072f2:	2301      	movs	r3, #1
 80072f4:	4652      	mov	r2, sl
 80072f6:	4649      	mov	r1, r9
 80072f8:	4638      	mov	r0, r7
 80072fa:	47c0      	blx	r8
 80072fc:	3001      	adds	r0, #1
 80072fe:	d103      	bne.n	8007308 <_printf_common+0xac>
 8007300:	f04f 30ff 	mov.w	r0, #4294967295
 8007304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007308:	3501      	adds	r5, #1
 800730a:	e7c6      	b.n	800729a <_printf_common+0x3e>
 800730c:	18e1      	adds	r1, r4, r3
 800730e:	1c5a      	adds	r2, r3, #1
 8007310:	2030      	movs	r0, #48	; 0x30
 8007312:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007316:	4422      	add	r2, r4
 8007318:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800731c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007320:	3302      	adds	r3, #2
 8007322:	e7c7      	b.n	80072b4 <_printf_common+0x58>
 8007324:	2301      	movs	r3, #1
 8007326:	4622      	mov	r2, r4
 8007328:	4649      	mov	r1, r9
 800732a:	4638      	mov	r0, r7
 800732c:	47c0      	blx	r8
 800732e:	3001      	adds	r0, #1
 8007330:	d0e6      	beq.n	8007300 <_printf_common+0xa4>
 8007332:	3601      	adds	r6, #1
 8007334:	e7d9      	b.n	80072ea <_printf_common+0x8e>
	...

08007338 <_printf_i>:
 8007338:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800733c:	7e0f      	ldrb	r7, [r1, #24]
 800733e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007340:	2f78      	cmp	r7, #120	; 0x78
 8007342:	4691      	mov	r9, r2
 8007344:	4680      	mov	r8, r0
 8007346:	460c      	mov	r4, r1
 8007348:	469a      	mov	sl, r3
 800734a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800734e:	d807      	bhi.n	8007360 <_printf_i+0x28>
 8007350:	2f62      	cmp	r7, #98	; 0x62
 8007352:	d80a      	bhi.n	800736a <_printf_i+0x32>
 8007354:	2f00      	cmp	r7, #0
 8007356:	f000 80d8 	beq.w	800750a <_printf_i+0x1d2>
 800735a:	2f58      	cmp	r7, #88	; 0x58
 800735c:	f000 80a3 	beq.w	80074a6 <_printf_i+0x16e>
 8007360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007364:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007368:	e03a      	b.n	80073e0 <_printf_i+0xa8>
 800736a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800736e:	2b15      	cmp	r3, #21
 8007370:	d8f6      	bhi.n	8007360 <_printf_i+0x28>
 8007372:	a101      	add	r1, pc, #4	; (adr r1, 8007378 <_printf_i+0x40>)
 8007374:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007378:	080073d1 	.word	0x080073d1
 800737c:	080073e5 	.word	0x080073e5
 8007380:	08007361 	.word	0x08007361
 8007384:	08007361 	.word	0x08007361
 8007388:	08007361 	.word	0x08007361
 800738c:	08007361 	.word	0x08007361
 8007390:	080073e5 	.word	0x080073e5
 8007394:	08007361 	.word	0x08007361
 8007398:	08007361 	.word	0x08007361
 800739c:	08007361 	.word	0x08007361
 80073a0:	08007361 	.word	0x08007361
 80073a4:	080074f1 	.word	0x080074f1
 80073a8:	08007415 	.word	0x08007415
 80073ac:	080074d3 	.word	0x080074d3
 80073b0:	08007361 	.word	0x08007361
 80073b4:	08007361 	.word	0x08007361
 80073b8:	08007513 	.word	0x08007513
 80073bc:	08007361 	.word	0x08007361
 80073c0:	08007415 	.word	0x08007415
 80073c4:	08007361 	.word	0x08007361
 80073c8:	08007361 	.word	0x08007361
 80073cc:	080074db 	.word	0x080074db
 80073d0:	682b      	ldr	r3, [r5, #0]
 80073d2:	1d1a      	adds	r2, r3, #4
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	602a      	str	r2, [r5, #0]
 80073d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073e0:	2301      	movs	r3, #1
 80073e2:	e0a3      	b.n	800752c <_printf_i+0x1f4>
 80073e4:	6820      	ldr	r0, [r4, #0]
 80073e6:	6829      	ldr	r1, [r5, #0]
 80073e8:	0606      	lsls	r6, r0, #24
 80073ea:	f101 0304 	add.w	r3, r1, #4
 80073ee:	d50a      	bpl.n	8007406 <_printf_i+0xce>
 80073f0:	680e      	ldr	r6, [r1, #0]
 80073f2:	602b      	str	r3, [r5, #0]
 80073f4:	2e00      	cmp	r6, #0
 80073f6:	da03      	bge.n	8007400 <_printf_i+0xc8>
 80073f8:	232d      	movs	r3, #45	; 0x2d
 80073fa:	4276      	negs	r6, r6
 80073fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007400:	485e      	ldr	r0, [pc, #376]	; (800757c <_printf_i+0x244>)
 8007402:	230a      	movs	r3, #10
 8007404:	e019      	b.n	800743a <_printf_i+0x102>
 8007406:	680e      	ldr	r6, [r1, #0]
 8007408:	602b      	str	r3, [r5, #0]
 800740a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800740e:	bf18      	it	ne
 8007410:	b236      	sxthne	r6, r6
 8007412:	e7ef      	b.n	80073f4 <_printf_i+0xbc>
 8007414:	682b      	ldr	r3, [r5, #0]
 8007416:	6820      	ldr	r0, [r4, #0]
 8007418:	1d19      	adds	r1, r3, #4
 800741a:	6029      	str	r1, [r5, #0]
 800741c:	0601      	lsls	r1, r0, #24
 800741e:	d501      	bpl.n	8007424 <_printf_i+0xec>
 8007420:	681e      	ldr	r6, [r3, #0]
 8007422:	e002      	b.n	800742a <_printf_i+0xf2>
 8007424:	0646      	lsls	r6, r0, #25
 8007426:	d5fb      	bpl.n	8007420 <_printf_i+0xe8>
 8007428:	881e      	ldrh	r6, [r3, #0]
 800742a:	4854      	ldr	r0, [pc, #336]	; (800757c <_printf_i+0x244>)
 800742c:	2f6f      	cmp	r7, #111	; 0x6f
 800742e:	bf0c      	ite	eq
 8007430:	2308      	moveq	r3, #8
 8007432:	230a      	movne	r3, #10
 8007434:	2100      	movs	r1, #0
 8007436:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800743a:	6865      	ldr	r5, [r4, #4]
 800743c:	60a5      	str	r5, [r4, #8]
 800743e:	2d00      	cmp	r5, #0
 8007440:	bfa2      	ittt	ge
 8007442:	6821      	ldrge	r1, [r4, #0]
 8007444:	f021 0104 	bicge.w	r1, r1, #4
 8007448:	6021      	strge	r1, [r4, #0]
 800744a:	b90e      	cbnz	r6, 8007450 <_printf_i+0x118>
 800744c:	2d00      	cmp	r5, #0
 800744e:	d04d      	beq.n	80074ec <_printf_i+0x1b4>
 8007450:	4615      	mov	r5, r2
 8007452:	fbb6 f1f3 	udiv	r1, r6, r3
 8007456:	fb03 6711 	mls	r7, r3, r1, r6
 800745a:	5dc7      	ldrb	r7, [r0, r7]
 800745c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007460:	4637      	mov	r7, r6
 8007462:	42bb      	cmp	r3, r7
 8007464:	460e      	mov	r6, r1
 8007466:	d9f4      	bls.n	8007452 <_printf_i+0x11a>
 8007468:	2b08      	cmp	r3, #8
 800746a:	d10b      	bne.n	8007484 <_printf_i+0x14c>
 800746c:	6823      	ldr	r3, [r4, #0]
 800746e:	07de      	lsls	r6, r3, #31
 8007470:	d508      	bpl.n	8007484 <_printf_i+0x14c>
 8007472:	6923      	ldr	r3, [r4, #16]
 8007474:	6861      	ldr	r1, [r4, #4]
 8007476:	4299      	cmp	r1, r3
 8007478:	bfde      	ittt	le
 800747a:	2330      	movle	r3, #48	; 0x30
 800747c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007480:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007484:	1b52      	subs	r2, r2, r5
 8007486:	6122      	str	r2, [r4, #16]
 8007488:	f8cd a000 	str.w	sl, [sp]
 800748c:	464b      	mov	r3, r9
 800748e:	aa03      	add	r2, sp, #12
 8007490:	4621      	mov	r1, r4
 8007492:	4640      	mov	r0, r8
 8007494:	f7ff fee2 	bl	800725c <_printf_common>
 8007498:	3001      	adds	r0, #1
 800749a:	d14c      	bne.n	8007536 <_printf_i+0x1fe>
 800749c:	f04f 30ff 	mov.w	r0, #4294967295
 80074a0:	b004      	add	sp, #16
 80074a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074a6:	4835      	ldr	r0, [pc, #212]	; (800757c <_printf_i+0x244>)
 80074a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80074ac:	6829      	ldr	r1, [r5, #0]
 80074ae:	6823      	ldr	r3, [r4, #0]
 80074b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80074b4:	6029      	str	r1, [r5, #0]
 80074b6:	061d      	lsls	r5, r3, #24
 80074b8:	d514      	bpl.n	80074e4 <_printf_i+0x1ac>
 80074ba:	07df      	lsls	r7, r3, #31
 80074bc:	bf44      	itt	mi
 80074be:	f043 0320 	orrmi.w	r3, r3, #32
 80074c2:	6023      	strmi	r3, [r4, #0]
 80074c4:	b91e      	cbnz	r6, 80074ce <_printf_i+0x196>
 80074c6:	6823      	ldr	r3, [r4, #0]
 80074c8:	f023 0320 	bic.w	r3, r3, #32
 80074cc:	6023      	str	r3, [r4, #0]
 80074ce:	2310      	movs	r3, #16
 80074d0:	e7b0      	b.n	8007434 <_printf_i+0xfc>
 80074d2:	6823      	ldr	r3, [r4, #0]
 80074d4:	f043 0320 	orr.w	r3, r3, #32
 80074d8:	6023      	str	r3, [r4, #0]
 80074da:	2378      	movs	r3, #120	; 0x78
 80074dc:	4828      	ldr	r0, [pc, #160]	; (8007580 <_printf_i+0x248>)
 80074de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074e2:	e7e3      	b.n	80074ac <_printf_i+0x174>
 80074e4:	0659      	lsls	r1, r3, #25
 80074e6:	bf48      	it	mi
 80074e8:	b2b6      	uxthmi	r6, r6
 80074ea:	e7e6      	b.n	80074ba <_printf_i+0x182>
 80074ec:	4615      	mov	r5, r2
 80074ee:	e7bb      	b.n	8007468 <_printf_i+0x130>
 80074f0:	682b      	ldr	r3, [r5, #0]
 80074f2:	6826      	ldr	r6, [r4, #0]
 80074f4:	6961      	ldr	r1, [r4, #20]
 80074f6:	1d18      	adds	r0, r3, #4
 80074f8:	6028      	str	r0, [r5, #0]
 80074fa:	0635      	lsls	r5, r6, #24
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	d501      	bpl.n	8007504 <_printf_i+0x1cc>
 8007500:	6019      	str	r1, [r3, #0]
 8007502:	e002      	b.n	800750a <_printf_i+0x1d2>
 8007504:	0670      	lsls	r0, r6, #25
 8007506:	d5fb      	bpl.n	8007500 <_printf_i+0x1c8>
 8007508:	8019      	strh	r1, [r3, #0]
 800750a:	2300      	movs	r3, #0
 800750c:	6123      	str	r3, [r4, #16]
 800750e:	4615      	mov	r5, r2
 8007510:	e7ba      	b.n	8007488 <_printf_i+0x150>
 8007512:	682b      	ldr	r3, [r5, #0]
 8007514:	1d1a      	adds	r2, r3, #4
 8007516:	602a      	str	r2, [r5, #0]
 8007518:	681d      	ldr	r5, [r3, #0]
 800751a:	6862      	ldr	r2, [r4, #4]
 800751c:	2100      	movs	r1, #0
 800751e:	4628      	mov	r0, r5
 8007520:	f7f8 feb6 	bl	8000290 <memchr>
 8007524:	b108      	cbz	r0, 800752a <_printf_i+0x1f2>
 8007526:	1b40      	subs	r0, r0, r5
 8007528:	6060      	str	r0, [r4, #4]
 800752a:	6863      	ldr	r3, [r4, #4]
 800752c:	6123      	str	r3, [r4, #16]
 800752e:	2300      	movs	r3, #0
 8007530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007534:	e7a8      	b.n	8007488 <_printf_i+0x150>
 8007536:	6923      	ldr	r3, [r4, #16]
 8007538:	462a      	mov	r2, r5
 800753a:	4649      	mov	r1, r9
 800753c:	4640      	mov	r0, r8
 800753e:	47d0      	blx	sl
 8007540:	3001      	adds	r0, #1
 8007542:	d0ab      	beq.n	800749c <_printf_i+0x164>
 8007544:	6823      	ldr	r3, [r4, #0]
 8007546:	079b      	lsls	r3, r3, #30
 8007548:	d413      	bmi.n	8007572 <_printf_i+0x23a>
 800754a:	68e0      	ldr	r0, [r4, #12]
 800754c:	9b03      	ldr	r3, [sp, #12]
 800754e:	4298      	cmp	r0, r3
 8007550:	bfb8      	it	lt
 8007552:	4618      	movlt	r0, r3
 8007554:	e7a4      	b.n	80074a0 <_printf_i+0x168>
 8007556:	2301      	movs	r3, #1
 8007558:	4632      	mov	r2, r6
 800755a:	4649      	mov	r1, r9
 800755c:	4640      	mov	r0, r8
 800755e:	47d0      	blx	sl
 8007560:	3001      	adds	r0, #1
 8007562:	d09b      	beq.n	800749c <_printf_i+0x164>
 8007564:	3501      	adds	r5, #1
 8007566:	68e3      	ldr	r3, [r4, #12]
 8007568:	9903      	ldr	r1, [sp, #12]
 800756a:	1a5b      	subs	r3, r3, r1
 800756c:	42ab      	cmp	r3, r5
 800756e:	dcf2      	bgt.n	8007556 <_printf_i+0x21e>
 8007570:	e7eb      	b.n	800754a <_printf_i+0x212>
 8007572:	2500      	movs	r5, #0
 8007574:	f104 0619 	add.w	r6, r4, #25
 8007578:	e7f5      	b.n	8007566 <_printf_i+0x22e>
 800757a:	bf00      	nop
 800757c:	080079d9 	.word	0x080079d9
 8007580:	080079ea 	.word	0x080079ea

08007584 <memmove>:
 8007584:	4288      	cmp	r0, r1
 8007586:	b510      	push	{r4, lr}
 8007588:	eb01 0402 	add.w	r4, r1, r2
 800758c:	d902      	bls.n	8007594 <memmove+0x10>
 800758e:	4284      	cmp	r4, r0
 8007590:	4623      	mov	r3, r4
 8007592:	d807      	bhi.n	80075a4 <memmove+0x20>
 8007594:	1e43      	subs	r3, r0, #1
 8007596:	42a1      	cmp	r1, r4
 8007598:	d008      	beq.n	80075ac <memmove+0x28>
 800759a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800759e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80075a2:	e7f8      	b.n	8007596 <memmove+0x12>
 80075a4:	4402      	add	r2, r0
 80075a6:	4601      	mov	r1, r0
 80075a8:	428a      	cmp	r2, r1
 80075aa:	d100      	bne.n	80075ae <memmove+0x2a>
 80075ac:	bd10      	pop	{r4, pc}
 80075ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80075b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80075b6:	e7f7      	b.n	80075a8 <memmove+0x24>

080075b8 <_free_r>:
 80075b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075ba:	2900      	cmp	r1, #0
 80075bc:	d044      	beq.n	8007648 <_free_r+0x90>
 80075be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075c2:	9001      	str	r0, [sp, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f1a1 0404 	sub.w	r4, r1, #4
 80075ca:	bfb8      	it	lt
 80075cc:	18e4      	addlt	r4, r4, r3
 80075ce:	f000 f913 	bl	80077f8 <__malloc_lock>
 80075d2:	4a1e      	ldr	r2, [pc, #120]	; (800764c <_free_r+0x94>)
 80075d4:	9801      	ldr	r0, [sp, #4]
 80075d6:	6813      	ldr	r3, [r2, #0]
 80075d8:	b933      	cbnz	r3, 80075e8 <_free_r+0x30>
 80075da:	6063      	str	r3, [r4, #4]
 80075dc:	6014      	str	r4, [r2, #0]
 80075de:	b003      	add	sp, #12
 80075e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075e4:	f000 b90e 	b.w	8007804 <__malloc_unlock>
 80075e8:	42a3      	cmp	r3, r4
 80075ea:	d908      	bls.n	80075fe <_free_r+0x46>
 80075ec:	6825      	ldr	r5, [r4, #0]
 80075ee:	1961      	adds	r1, r4, r5
 80075f0:	428b      	cmp	r3, r1
 80075f2:	bf01      	itttt	eq
 80075f4:	6819      	ldreq	r1, [r3, #0]
 80075f6:	685b      	ldreq	r3, [r3, #4]
 80075f8:	1949      	addeq	r1, r1, r5
 80075fa:	6021      	streq	r1, [r4, #0]
 80075fc:	e7ed      	b.n	80075da <_free_r+0x22>
 80075fe:	461a      	mov	r2, r3
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	b10b      	cbz	r3, 8007608 <_free_r+0x50>
 8007604:	42a3      	cmp	r3, r4
 8007606:	d9fa      	bls.n	80075fe <_free_r+0x46>
 8007608:	6811      	ldr	r1, [r2, #0]
 800760a:	1855      	adds	r5, r2, r1
 800760c:	42a5      	cmp	r5, r4
 800760e:	d10b      	bne.n	8007628 <_free_r+0x70>
 8007610:	6824      	ldr	r4, [r4, #0]
 8007612:	4421      	add	r1, r4
 8007614:	1854      	adds	r4, r2, r1
 8007616:	42a3      	cmp	r3, r4
 8007618:	6011      	str	r1, [r2, #0]
 800761a:	d1e0      	bne.n	80075de <_free_r+0x26>
 800761c:	681c      	ldr	r4, [r3, #0]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	6053      	str	r3, [r2, #4]
 8007622:	4421      	add	r1, r4
 8007624:	6011      	str	r1, [r2, #0]
 8007626:	e7da      	b.n	80075de <_free_r+0x26>
 8007628:	d902      	bls.n	8007630 <_free_r+0x78>
 800762a:	230c      	movs	r3, #12
 800762c:	6003      	str	r3, [r0, #0]
 800762e:	e7d6      	b.n	80075de <_free_r+0x26>
 8007630:	6825      	ldr	r5, [r4, #0]
 8007632:	1961      	adds	r1, r4, r5
 8007634:	428b      	cmp	r3, r1
 8007636:	bf04      	itt	eq
 8007638:	6819      	ldreq	r1, [r3, #0]
 800763a:	685b      	ldreq	r3, [r3, #4]
 800763c:	6063      	str	r3, [r4, #4]
 800763e:	bf04      	itt	eq
 8007640:	1949      	addeq	r1, r1, r5
 8007642:	6021      	streq	r1, [r4, #0]
 8007644:	6054      	str	r4, [r2, #4]
 8007646:	e7ca      	b.n	80075de <_free_r+0x26>
 8007648:	b003      	add	sp, #12
 800764a:	bd30      	pop	{r4, r5, pc}
 800764c:	20014500 	.word	0x20014500

08007650 <sbrk_aligned>:
 8007650:	b570      	push	{r4, r5, r6, lr}
 8007652:	4e0e      	ldr	r6, [pc, #56]	; (800768c <sbrk_aligned+0x3c>)
 8007654:	460c      	mov	r4, r1
 8007656:	6831      	ldr	r1, [r6, #0]
 8007658:	4605      	mov	r5, r0
 800765a:	b911      	cbnz	r1, 8007662 <sbrk_aligned+0x12>
 800765c:	f000 f8bc 	bl	80077d8 <_sbrk_r>
 8007660:	6030      	str	r0, [r6, #0]
 8007662:	4621      	mov	r1, r4
 8007664:	4628      	mov	r0, r5
 8007666:	f000 f8b7 	bl	80077d8 <_sbrk_r>
 800766a:	1c43      	adds	r3, r0, #1
 800766c:	d00a      	beq.n	8007684 <sbrk_aligned+0x34>
 800766e:	1cc4      	adds	r4, r0, #3
 8007670:	f024 0403 	bic.w	r4, r4, #3
 8007674:	42a0      	cmp	r0, r4
 8007676:	d007      	beq.n	8007688 <sbrk_aligned+0x38>
 8007678:	1a21      	subs	r1, r4, r0
 800767a:	4628      	mov	r0, r5
 800767c:	f000 f8ac 	bl	80077d8 <_sbrk_r>
 8007680:	3001      	adds	r0, #1
 8007682:	d101      	bne.n	8007688 <sbrk_aligned+0x38>
 8007684:	f04f 34ff 	mov.w	r4, #4294967295
 8007688:	4620      	mov	r0, r4
 800768a:	bd70      	pop	{r4, r5, r6, pc}
 800768c:	20014504 	.word	0x20014504

08007690 <_malloc_r>:
 8007690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007694:	1ccd      	adds	r5, r1, #3
 8007696:	f025 0503 	bic.w	r5, r5, #3
 800769a:	3508      	adds	r5, #8
 800769c:	2d0c      	cmp	r5, #12
 800769e:	bf38      	it	cc
 80076a0:	250c      	movcc	r5, #12
 80076a2:	2d00      	cmp	r5, #0
 80076a4:	4607      	mov	r7, r0
 80076a6:	db01      	blt.n	80076ac <_malloc_r+0x1c>
 80076a8:	42a9      	cmp	r1, r5
 80076aa:	d905      	bls.n	80076b8 <_malloc_r+0x28>
 80076ac:	230c      	movs	r3, #12
 80076ae:	603b      	str	r3, [r7, #0]
 80076b0:	2600      	movs	r6, #0
 80076b2:	4630      	mov	r0, r6
 80076b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076b8:	4e2e      	ldr	r6, [pc, #184]	; (8007774 <_malloc_r+0xe4>)
 80076ba:	f000 f89d 	bl	80077f8 <__malloc_lock>
 80076be:	6833      	ldr	r3, [r6, #0]
 80076c0:	461c      	mov	r4, r3
 80076c2:	bb34      	cbnz	r4, 8007712 <_malloc_r+0x82>
 80076c4:	4629      	mov	r1, r5
 80076c6:	4638      	mov	r0, r7
 80076c8:	f7ff ffc2 	bl	8007650 <sbrk_aligned>
 80076cc:	1c43      	adds	r3, r0, #1
 80076ce:	4604      	mov	r4, r0
 80076d0:	d14d      	bne.n	800776e <_malloc_r+0xde>
 80076d2:	6834      	ldr	r4, [r6, #0]
 80076d4:	4626      	mov	r6, r4
 80076d6:	2e00      	cmp	r6, #0
 80076d8:	d140      	bne.n	800775c <_malloc_r+0xcc>
 80076da:	6823      	ldr	r3, [r4, #0]
 80076dc:	4631      	mov	r1, r6
 80076de:	4638      	mov	r0, r7
 80076e0:	eb04 0803 	add.w	r8, r4, r3
 80076e4:	f000 f878 	bl	80077d8 <_sbrk_r>
 80076e8:	4580      	cmp	r8, r0
 80076ea:	d13a      	bne.n	8007762 <_malloc_r+0xd2>
 80076ec:	6821      	ldr	r1, [r4, #0]
 80076ee:	3503      	adds	r5, #3
 80076f0:	1a6d      	subs	r5, r5, r1
 80076f2:	f025 0503 	bic.w	r5, r5, #3
 80076f6:	3508      	adds	r5, #8
 80076f8:	2d0c      	cmp	r5, #12
 80076fa:	bf38      	it	cc
 80076fc:	250c      	movcc	r5, #12
 80076fe:	4629      	mov	r1, r5
 8007700:	4638      	mov	r0, r7
 8007702:	f7ff ffa5 	bl	8007650 <sbrk_aligned>
 8007706:	3001      	adds	r0, #1
 8007708:	d02b      	beq.n	8007762 <_malloc_r+0xd2>
 800770a:	6823      	ldr	r3, [r4, #0]
 800770c:	442b      	add	r3, r5
 800770e:	6023      	str	r3, [r4, #0]
 8007710:	e00e      	b.n	8007730 <_malloc_r+0xa0>
 8007712:	6822      	ldr	r2, [r4, #0]
 8007714:	1b52      	subs	r2, r2, r5
 8007716:	d41e      	bmi.n	8007756 <_malloc_r+0xc6>
 8007718:	2a0b      	cmp	r2, #11
 800771a:	d916      	bls.n	800774a <_malloc_r+0xba>
 800771c:	1961      	adds	r1, r4, r5
 800771e:	42a3      	cmp	r3, r4
 8007720:	6025      	str	r5, [r4, #0]
 8007722:	bf18      	it	ne
 8007724:	6059      	strne	r1, [r3, #4]
 8007726:	6863      	ldr	r3, [r4, #4]
 8007728:	bf08      	it	eq
 800772a:	6031      	streq	r1, [r6, #0]
 800772c:	5162      	str	r2, [r4, r5]
 800772e:	604b      	str	r3, [r1, #4]
 8007730:	4638      	mov	r0, r7
 8007732:	f104 060b 	add.w	r6, r4, #11
 8007736:	f000 f865 	bl	8007804 <__malloc_unlock>
 800773a:	f026 0607 	bic.w	r6, r6, #7
 800773e:	1d23      	adds	r3, r4, #4
 8007740:	1af2      	subs	r2, r6, r3
 8007742:	d0b6      	beq.n	80076b2 <_malloc_r+0x22>
 8007744:	1b9b      	subs	r3, r3, r6
 8007746:	50a3      	str	r3, [r4, r2]
 8007748:	e7b3      	b.n	80076b2 <_malloc_r+0x22>
 800774a:	6862      	ldr	r2, [r4, #4]
 800774c:	42a3      	cmp	r3, r4
 800774e:	bf0c      	ite	eq
 8007750:	6032      	streq	r2, [r6, #0]
 8007752:	605a      	strne	r2, [r3, #4]
 8007754:	e7ec      	b.n	8007730 <_malloc_r+0xa0>
 8007756:	4623      	mov	r3, r4
 8007758:	6864      	ldr	r4, [r4, #4]
 800775a:	e7b2      	b.n	80076c2 <_malloc_r+0x32>
 800775c:	4634      	mov	r4, r6
 800775e:	6876      	ldr	r6, [r6, #4]
 8007760:	e7b9      	b.n	80076d6 <_malloc_r+0x46>
 8007762:	230c      	movs	r3, #12
 8007764:	603b      	str	r3, [r7, #0]
 8007766:	4638      	mov	r0, r7
 8007768:	f000 f84c 	bl	8007804 <__malloc_unlock>
 800776c:	e7a1      	b.n	80076b2 <_malloc_r+0x22>
 800776e:	6025      	str	r5, [r4, #0]
 8007770:	e7de      	b.n	8007730 <_malloc_r+0xa0>
 8007772:	bf00      	nop
 8007774:	20014500 	.word	0x20014500

08007778 <_realloc_r>:
 8007778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800777c:	4680      	mov	r8, r0
 800777e:	4614      	mov	r4, r2
 8007780:	460e      	mov	r6, r1
 8007782:	b921      	cbnz	r1, 800778e <_realloc_r+0x16>
 8007784:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007788:	4611      	mov	r1, r2
 800778a:	f7ff bf81 	b.w	8007690 <_malloc_r>
 800778e:	b92a      	cbnz	r2, 800779c <_realloc_r+0x24>
 8007790:	f7ff ff12 	bl	80075b8 <_free_r>
 8007794:	4625      	mov	r5, r4
 8007796:	4628      	mov	r0, r5
 8007798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800779c:	f000 f838 	bl	8007810 <_malloc_usable_size_r>
 80077a0:	4284      	cmp	r4, r0
 80077a2:	4607      	mov	r7, r0
 80077a4:	d802      	bhi.n	80077ac <_realloc_r+0x34>
 80077a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80077aa:	d812      	bhi.n	80077d2 <_realloc_r+0x5a>
 80077ac:	4621      	mov	r1, r4
 80077ae:	4640      	mov	r0, r8
 80077b0:	f7ff ff6e 	bl	8007690 <_malloc_r>
 80077b4:	4605      	mov	r5, r0
 80077b6:	2800      	cmp	r0, #0
 80077b8:	d0ed      	beq.n	8007796 <_realloc_r+0x1e>
 80077ba:	42bc      	cmp	r4, r7
 80077bc:	4622      	mov	r2, r4
 80077be:	4631      	mov	r1, r6
 80077c0:	bf28      	it	cs
 80077c2:	463a      	movcs	r2, r7
 80077c4:	f7ff fba4 	bl	8006f10 <memcpy>
 80077c8:	4631      	mov	r1, r6
 80077ca:	4640      	mov	r0, r8
 80077cc:	f7ff fef4 	bl	80075b8 <_free_r>
 80077d0:	e7e1      	b.n	8007796 <_realloc_r+0x1e>
 80077d2:	4635      	mov	r5, r6
 80077d4:	e7df      	b.n	8007796 <_realloc_r+0x1e>
	...

080077d8 <_sbrk_r>:
 80077d8:	b538      	push	{r3, r4, r5, lr}
 80077da:	4d06      	ldr	r5, [pc, #24]	; (80077f4 <_sbrk_r+0x1c>)
 80077dc:	2300      	movs	r3, #0
 80077de:	4604      	mov	r4, r0
 80077e0:	4608      	mov	r0, r1
 80077e2:	602b      	str	r3, [r5, #0]
 80077e4:	f000 f81e 	bl	8007824 <_sbrk>
 80077e8:	1c43      	adds	r3, r0, #1
 80077ea:	d102      	bne.n	80077f2 <_sbrk_r+0x1a>
 80077ec:	682b      	ldr	r3, [r5, #0]
 80077ee:	b103      	cbz	r3, 80077f2 <_sbrk_r+0x1a>
 80077f0:	6023      	str	r3, [r4, #0]
 80077f2:	bd38      	pop	{r3, r4, r5, pc}
 80077f4:	20014508 	.word	0x20014508

080077f8 <__malloc_lock>:
 80077f8:	4801      	ldr	r0, [pc, #4]	; (8007800 <__malloc_lock+0x8>)
 80077fa:	f000 b811 	b.w	8007820 <__retarget_lock_acquire_recursive>
 80077fe:	bf00      	nop
 8007800:	2001450c 	.word	0x2001450c

08007804 <__malloc_unlock>:
 8007804:	4801      	ldr	r0, [pc, #4]	; (800780c <__malloc_unlock+0x8>)
 8007806:	f000 b80c 	b.w	8007822 <__retarget_lock_release_recursive>
 800780a:	bf00      	nop
 800780c:	2001450c 	.word	0x2001450c

08007810 <_malloc_usable_size_r>:
 8007810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007814:	1f18      	subs	r0, r3, #4
 8007816:	2b00      	cmp	r3, #0
 8007818:	bfbc      	itt	lt
 800781a:	580b      	ldrlt	r3, [r1, r0]
 800781c:	18c0      	addlt	r0, r0, r3
 800781e:	4770      	bx	lr

08007820 <__retarget_lock_acquire_recursive>:
 8007820:	4770      	bx	lr

08007822 <__retarget_lock_release_recursive>:
 8007822:	4770      	bx	lr

08007824 <_sbrk>:
 8007824:	4a04      	ldr	r2, [pc, #16]	; (8007838 <_sbrk+0x14>)
 8007826:	6811      	ldr	r1, [r2, #0]
 8007828:	4603      	mov	r3, r0
 800782a:	b909      	cbnz	r1, 8007830 <_sbrk+0xc>
 800782c:	4903      	ldr	r1, [pc, #12]	; (800783c <_sbrk+0x18>)
 800782e:	6011      	str	r1, [r2, #0]
 8007830:	6810      	ldr	r0, [r2, #0]
 8007832:	4403      	add	r3, r0
 8007834:	6013      	str	r3, [r2, #0]
 8007836:	4770      	bx	lr
 8007838:	20014510 	.word	0x20014510
 800783c:	20014518 	.word	0x20014518

08007840 <_init>:
 8007840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007842:	bf00      	nop
 8007844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007846:	bc08      	pop	{r3}
 8007848:	469e      	mov	lr, r3
 800784a:	4770      	bx	lr

0800784c <_fini>:
 800784c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800784e:	bf00      	nop
 8007850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007852:	bc08      	pop	{r3}
 8007854:	469e      	mov	lr, r3
 8007856:	4770      	bx	lr
