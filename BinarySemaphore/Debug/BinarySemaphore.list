
BinarySemaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d3c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08006eec  08006eec  00016eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800708c  0800708c  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  0800708c  0800708c  0001708c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007094  08007094  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007094  08007094  00017094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007098  08007098  00017098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800709c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          0001448c  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200144b0  200144b0  00020024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014854  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f28  00000000  00000000  000348a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001338  00000000  00000000  000377d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011b0  00000000  00000000  00038b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025d22  00000000  00000000  00039cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015518  00000000  00000000  0005f9da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6a19  00000000  00000000  00074ef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015b90b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ff4  00000000  00000000  0015b95c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000024 	.word	0x20000024
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006ed4 	.word	0x08006ed4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000028 	.word	0x20000028
 80001ec:	08006ed4 	.word	0x08006ed4

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20012e38 	.word	0x20012e38

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b974 	b.w	8000584 <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9d08      	ldr	r5, [sp, #32]
 80002ba:	4604      	mov	r4, r0
 80002bc:	468e      	mov	lr, r1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d14d      	bne.n	800035e <__udivmoddi4+0xaa>
 80002c2:	428a      	cmp	r2, r1
 80002c4:	4694      	mov	ip, r2
 80002c6:	d969      	bls.n	800039c <__udivmoddi4+0xe8>
 80002c8:	fab2 f282 	clz	r2, r2
 80002cc:	b152      	cbz	r2, 80002e4 <__udivmoddi4+0x30>
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	f1c2 0120 	rsb	r1, r2, #32
 80002d6:	fa20 f101 	lsr.w	r1, r0, r1
 80002da:	fa0c fc02 	lsl.w	ip, ip, r2
 80002de:	ea41 0e03 	orr.w	lr, r1, r3
 80002e2:	4094      	lsls	r4, r2
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	0c21      	lsrs	r1, r4, #16
 80002ea:	fbbe f6f8 	udiv	r6, lr, r8
 80002ee:	fa1f f78c 	uxth.w	r7, ip
 80002f2:	fb08 e316 	mls	r3, r8, r6, lr
 80002f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002fa:	fb06 f107 	mul.w	r1, r6, r7
 80002fe:	4299      	cmp	r1, r3
 8000300:	d90a      	bls.n	8000318 <__udivmoddi4+0x64>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 30ff 	add.w	r0, r6, #4294967295
 800030a:	f080 811f 	bcs.w	800054c <__udivmoddi4+0x298>
 800030e:	4299      	cmp	r1, r3
 8000310:	f240 811c 	bls.w	800054c <__udivmoddi4+0x298>
 8000314:	3e02      	subs	r6, #2
 8000316:	4463      	add	r3, ip
 8000318:	1a5b      	subs	r3, r3, r1
 800031a:	b2a4      	uxth	r4, r4
 800031c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000320:	fb08 3310 	mls	r3, r8, r0, r3
 8000324:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000328:	fb00 f707 	mul.w	r7, r0, r7
 800032c:	42a7      	cmp	r7, r4
 800032e:	d90a      	bls.n	8000346 <__udivmoddi4+0x92>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	f080 810a 	bcs.w	8000550 <__udivmoddi4+0x29c>
 800033c:	42a7      	cmp	r7, r4
 800033e:	f240 8107 	bls.w	8000550 <__udivmoddi4+0x29c>
 8000342:	4464      	add	r4, ip
 8000344:	3802      	subs	r0, #2
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	1be4      	subs	r4, r4, r7
 800034c:	2600      	movs	r6, #0
 800034e:	b11d      	cbz	r5, 8000358 <__udivmoddi4+0xa4>
 8000350:	40d4      	lsrs	r4, r2
 8000352:	2300      	movs	r3, #0
 8000354:	e9c5 4300 	strd	r4, r3, [r5]
 8000358:	4631      	mov	r1, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0xc2>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80ef 	beq.w	8000546 <__udivmoddi4+0x292>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x160>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xd4>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80f9 	bhi.w	800057a <__udivmoddi4+0x2c6>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0303 	sbc.w	r3, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	469e      	mov	lr, r3
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e0      	beq.n	8000358 <__udivmoddi4+0xa4>
 8000396:	e9c5 4e00 	strd	r4, lr, [r5]
 800039a:	e7dd      	b.n	8000358 <__udivmoddi4+0xa4>
 800039c:	b902      	cbnz	r2, 80003a0 <__udivmoddi4+0xec>
 800039e:	deff      	udf	#255	; 0xff
 80003a0:	fab2 f282 	clz	r2, r2
 80003a4:	2a00      	cmp	r2, #0
 80003a6:	f040 8092 	bne.w	80004ce <__udivmoddi4+0x21a>
 80003aa:	eba1 010c 	sub.w	r1, r1, ip
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	2601      	movs	r6, #1
 80003b8:	0c20      	lsrs	r0, r4, #16
 80003ba:	fbb1 f3f7 	udiv	r3, r1, r7
 80003be:	fb07 1113 	mls	r1, r7, r3, r1
 80003c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c6:	fb0e f003 	mul.w	r0, lr, r3
 80003ca:	4288      	cmp	r0, r1
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x12c>
 80003ce:	eb1c 0101 	adds.w	r1, ip, r1
 80003d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x12a>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f200 80cb 	bhi.w	8000574 <__udivmoddi4+0x2c0>
 80003de:	4643      	mov	r3, r8
 80003e0:	1a09      	subs	r1, r1, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e8:	fb07 1110 	mls	r1, r7, r0, r1
 80003ec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003f0:	fb0e fe00 	mul.w	lr, lr, r0
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x156>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x154>
 8000402:	45a6      	cmp	lr, r4
 8000404:	f200 80bb 	bhi.w	800057e <__udivmoddi4+0x2ca>
 8000408:	4608      	mov	r0, r1
 800040a:	eba4 040e 	sub.w	r4, r4, lr
 800040e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000412:	e79c      	b.n	800034e <__udivmoddi4+0x9a>
 8000414:	f1c6 0720 	rsb	r7, r6, #32
 8000418:	40b3      	lsls	r3, r6
 800041a:	fa22 fc07 	lsr.w	ip, r2, r7
 800041e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000422:	fa20 f407 	lsr.w	r4, r0, r7
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	431c      	orrs	r4, r3
 800042c:	40f9      	lsrs	r1, r7
 800042e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000432:	fa00 f306 	lsl.w	r3, r0, r6
 8000436:	fbb1 f8f9 	udiv	r8, r1, r9
 800043a:	0c20      	lsrs	r0, r4, #16
 800043c:	fa1f fe8c 	uxth.w	lr, ip
 8000440:	fb09 1118 	mls	r1, r9, r8, r1
 8000444:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000448:	fb08 f00e 	mul.w	r0, r8, lr
 800044c:	4288      	cmp	r0, r1
 800044e:	fa02 f206 	lsl.w	r2, r2, r6
 8000452:	d90b      	bls.n	800046c <__udivmoddi4+0x1b8>
 8000454:	eb1c 0101 	adds.w	r1, ip, r1
 8000458:	f108 3aff 	add.w	sl, r8, #4294967295
 800045c:	f080 8088 	bcs.w	8000570 <__udivmoddi4+0x2bc>
 8000460:	4288      	cmp	r0, r1
 8000462:	f240 8085 	bls.w	8000570 <__udivmoddi4+0x2bc>
 8000466:	f1a8 0802 	sub.w	r8, r8, #2
 800046a:	4461      	add	r1, ip
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f9 	udiv	r0, r1, r9
 8000474:	fb09 1110 	mls	r1, r9, r0, r1
 8000478:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800047c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000480:	458e      	cmp	lr, r1
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x1e2>
 8000484:	eb1c 0101 	adds.w	r1, ip, r1
 8000488:	f100 34ff 	add.w	r4, r0, #4294967295
 800048c:	d26c      	bcs.n	8000568 <__udivmoddi4+0x2b4>
 800048e:	458e      	cmp	lr, r1
 8000490:	d96a      	bls.n	8000568 <__udivmoddi4+0x2b4>
 8000492:	3802      	subs	r0, #2
 8000494:	4461      	add	r1, ip
 8000496:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800049a:	fba0 9402 	umull	r9, r4, r0, r2
 800049e:	eba1 010e 	sub.w	r1, r1, lr
 80004a2:	42a1      	cmp	r1, r4
 80004a4:	46c8      	mov	r8, r9
 80004a6:	46a6      	mov	lr, r4
 80004a8:	d356      	bcc.n	8000558 <__udivmoddi4+0x2a4>
 80004aa:	d053      	beq.n	8000554 <__udivmoddi4+0x2a0>
 80004ac:	b15d      	cbz	r5, 80004c6 <__udivmoddi4+0x212>
 80004ae:	ebb3 0208 	subs.w	r2, r3, r8
 80004b2:	eb61 010e 	sbc.w	r1, r1, lr
 80004b6:	fa01 f707 	lsl.w	r7, r1, r7
 80004ba:	fa22 f306 	lsr.w	r3, r2, r6
 80004be:	40f1      	lsrs	r1, r6
 80004c0:	431f      	orrs	r7, r3
 80004c2:	e9c5 7100 	strd	r7, r1, [r5]
 80004c6:	2600      	movs	r6, #0
 80004c8:	4631      	mov	r1, r6
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	40d8      	lsrs	r0, r3
 80004d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d8:	fa21 f303 	lsr.w	r3, r1, r3
 80004dc:	4091      	lsls	r1, r2
 80004de:	4301      	orrs	r1, r0
 80004e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e4:	fa1f fe8c 	uxth.w	lr, ip
 80004e8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004ec:	fb07 3610 	mls	r6, r7, r0, r3
 80004f0:	0c0b      	lsrs	r3, r1, #16
 80004f2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f6:	fb00 f60e 	mul.w	r6, r0, lr
 80004fa:	429e      	cmp	r6, r3
 80004fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x260>
 8000502:	eb1c 0303 	adds.w	r3, ip, r3
 8000506:	f100 38ff 	add.w	r8, r0, #4294967295
 800050a:	d22f      	bcs.n	800056c <__udivmoddi4+0x2b8>
 800050c:	429e      	cmp	r6, r3
 800050e:	d92d      	bls.n	800056c <__udivmoddi4+0x2b8>
 8000510:	3802      	subs	r0, #2
 8000512:	4463      	add	r3, ip
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	b289      	uxth	r1, r1
 8000518:	fbb3 f6f7 	udiv	r6, r3, r7
 800051c:	fb07 3316 	mls	r3, r7, r6, r3
 8000520:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000524:	fb06 f30e 	mul.w	r3, r6, lr
 8000528:	428b      	cmp	r3, r1
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x28a>
 800052c:	eb1c 0101 	adds.w	r1, ip, r1
 8000530:	f106 38ff 	add.w	r8, r6, #4294967295
 8000534:	d216      	bcs.n	8000564 <__udivmoddi4+0x2b0>
 8000536:	428b      	cmp	r3, r1
 8000538:	d914      	bls.n	8000564 <__udivmoddi4+0x2b0>
 800053a:	3e02      	subs	r6, #2
 800053c:	4461      	add	r1, ip
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000544:	e738      	b.n	80003b8 <__udivmoddi4+0x104>
 8000546:	462e      	mov	r6, r5
 8000548:	4628      	mov	r0, r5
 800054a:	e705      	b.n	8000358 <__udivmoddi4+0xa4>
 800054c:	4606      	mov	r6, r0
 800054e:	e6e3      	b.n	8000318 <__udivmoddi4+0x64>
 8000550:	4618      	mov	r0, r3
 8000552:	e6f8      	b.n	8000346 <__udivmoddi4+0x92>
 8000554:	454b      	cmp	r3, r9
 8000556:	d2a9      	bcs.n	80004ac <__udivmoddi4+0x1f8>
 8000558:	ebb9 0802 	subs.w	r8, r9, r2
 800055c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000560:	3801      	subs	r0, #1
 8000562:	e7a3      	b.n	80004ac <__udivmoddi4+0x1f8>
 8000564:	4646      	mov	r6, r8
 8000566:	e7ea      	b.n	800053e <__udivmoddi4+0x28a>
 8000568:	4620      	mov	r0, r4
 800056a:	e794      	b.n	8000496 <__udivmoddi4+0x1e2>
 800056c:	4640      	mov	r0, r8
 800056e:	e7d1      	b.n	8000514 <__udivmoddi4+0x260>
 8000570:	46d0      	mov	r8, sl
 8000572:	e77b      	b.n	800046c <__udivmoddi4+0x1b8>
 8000574:	3b02      	subs	r3, #2
 8000576:	4461      	add	r1, ip
 8000578:	e732      	b.n	80003e0 <__udivmoddi4+0x12c>
 800057a:	4630      	mov	r0, r6
 800057c:	e709      	b.n	8000392 <__udivmoddi4+0xde>
 800057e:	4464      	add	r4, ip
 8000580:	3802      	subs	r0, #2
 8000582:	e742      	b.n	800040a <__udivmoddi4+0x156>

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <GreenOn>:
#include "STM32_Disc1_Gpio.h"
#include "main.h"



void GreenOn ( void ) { HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);}
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
 800058c:	2201      	movs	r2, #1
 800058e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000592:	4802      	ldr	r0, [pc, #8]	; (800059c <GreenOn+0x14>)
 8000594:	f000 ffa8 	bl	80014e8 <HAL_GPIO_WritePin>
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40021800 	.word	0x40021800

080005a0 <GreenOff>:
void GreenOff ( void ) { HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);}
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	2200      	movs	r2, #0
 80005a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005aa:	4802      	ldr	r0, [pc, #8]	; (80005b4 <GreenOff+0x14>)
 80005ac:	f000 ff9c 	bl	80014e8 <HAL_GPIO_WritePin>
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40021800 	.word	0x40021800

080005b8 <BlueOn>:
LED GreenLed = { GreenOn, GreenOff };   // initialize the GreenLed struct




void BlueOn ( void ) { HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET);}
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c2:	4802      	ldr	r0, [pc, #8]	; (80005cc <BlueOn+0x14>)
 80005c4:	f000 ff90 	bl	80014e8 <HAL_GPIO_WritePin>
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40021800 	.word	0x40021800

080005d0 <BlueOff>:
void BlueOff ( void ) { HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);}
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	2200      	movs	r2, #0
 80005d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005da:	4802      	ldr	r0, [pc, #8]	; (80005e4 <BlueOff+0x14>)
 80005dc:	f000 ff84 	bl	80014e8 <HAL_GPIO_WritePin>
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40021800 	.word	0x40021800

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f000 fcab 	bl	8000f48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f85b 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 f8c5 	bl	8000784 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_SYSVIEW_Conf();
 80005fa:	f006 faf5 	bl	8006be8 <SEGGER_SYSVIEW_Conf>
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);	//ensure proper priority grouping for freeRTOS
 80005fe:	2003      	movs	r0, #3
 8000600:	f000 fd91 	bl	8001126 <HAL_NVIC_SetPriorityGrouping>


  //create a semaphore using the FreeRTOS Heap
  semPtr = xSemaphoreCreateBinary();
 8000604:	2203      	movs	r2, #3
 8000606:	2100      	movs	r1, #0
 8000608:	2001      	movs	r0, #1
 800060a:	f002 f807 	bl	800261c <xQueueGenericCreate>
 800060e:	4603      	mov	r3, r0
 8000610:	4a21      	ldr	r2, [pc, #132]	; (8000698 <main+0xb0>)
 8000612:	6013      	str	r3, [r2, #0]
  configASSERT(semPtr != NULL);
 8000614:	4b20      	ldr	r3, [pc, #128]	; (8000698 <main+0xb0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d10a      	bne.n	8000632 <main+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800061c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000620:	f383 8811 	msr	BASEPRI, r3
 8000624:	f3bf 8f6f 	isb	sy
 8000628:	f3bf 8f4f 	dsb	sy
 800062c:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800062e:	bf00      	nop
 8000630:	e7fe      	b.n	8000630 <main+0x48>


  //create TaskA as a higher priority than TaskB.  In this example, this isn't strictly necessary since the tasks
  //spend nearly all of their time blocked
  configASSERT(xTaskCreate(GreenTaskA, "GreenTaskA", STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL) == pdPASS);
 8000632:	2300      	movs	r3, #0
 8000634:	9301      	str	r3, [sp, #4]
 8000636:	2302      	movs	r3, #2
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2300      	movs	r3, #0
 800063c:	2280      	movs	r2, #128	; 0x80
 800063e:	4917      	ldr	r1, [pc, #92]	; (800069c <main+0xb4>)
 8000640:	4817      	ldr	r0, [pc, #92]	; (80006a0 <main+0xb8>)
 8000642:	f002 fe31 	bl	80032a8 <xTaskCreate>
 8000646:	4603      	mov	r3, r0
 8000648:	2b01      	cmp	r3, #1
 800064a:	d00a      	beq.n	8000662 <main+0x7a>
        __asm volatile
 800064c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000650:	f383 8811 	msr	BASEPRI, r3
 8000654:	f3bf 8f6f 	isb	sy
 8000658:	f3bf 8f4f 	dsb	sy
 800065c:	60bb      	str	r3, [r7, #8]
    }
 800065e:	bf00      	nop
 8000660:	e7fe      	b.n	8000660 <main+0x78>


  //using an assert to ensure proper task creation
  configASSERT(xTaskCreate(BlueTaskB, "BlueTaskB", STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL) == pdPASS);
 8000662:	2300      	movs	r3, #0
 8000664:	9301      	str	r3, [sp, #4]
 8000666:	2301      	movs	r3, #1
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	2300      	movs	r3, #0
 800066c:	2280      	movs	r2, #128	; 0x80
 800066e:	490d      	ldr	r1, [pc, #52]	; (80006a4 <main+0xbc>)
 8000670:	480d      	ldr	r0, [pc, #52]	; (80006a8 <main+0xc0>)
 8000672:	f002 fe19 	bl	80032a8 <xTaskCreate>
 8000676:	4603      	mov	r3, r0
 8000678:	2b01      	cmp	r3, #1
 800067a:	d00a      	beq.n	8000692 <main+0xaa>
        __asm volatile
 800067c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000680:	f383 8811 	msr	BASEPRI, r3
 8000684:	f3bf 8f6f 	isb	sy
 8000688:	f3bf 8f4f 	dsb	sy
 800068c:	607b      	str	r3, [r7, #4]
    }
 800068e:	bf00      	nop
 8000690:	e7fe      	b.n	8000690 <main+0xa8>


  //start the scheduler - shouldn't return unless there's a problem
  vTaskStartScheduler();
 8000692:	f002 ffa5 	bl	80035e0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000696:	e7fe      	b.n	8000696 <main+0xae>
 8000698:	20000040 	.word	0x20000040
 800069c:	08006eec 	.word	0x08006eec
 80006a0:	08000c5d 	.word	0x08000c5d
 80006a4:	08006ef8 	.word	0x08006ef8
 80006a8:	08000cb5 	.word	0x08000cb5

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b094      	sub	sp, #80	; 0x50
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 0320 	add.w	r3, r7, #32
 80006b6:	2230      	movs	r2, #48	; 0x30
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f006 fc02 	bl	8006ec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d0:	2300      	movs	r3, #0
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	4b29      	ldr	r3, [pc, #164]	; (800077c <SystemClock_Config+0xd0>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	4a28      	ldr	r2, [pc, #160]	; (800077c <SystemClock_Config+0xd0>)
 80006da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006de:	6413      	str	r3, [r2, #64]	; 0x40
 80006e0:	4b26      	ldr	r3, [pc, #152]	; (800077c <SystemClock_Config+0xd0>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006ec:	2300      	movs	r3, #0
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	4b23      	ldr	r3, [pc, #140]	; (8000780 <SystemClock_Config+0xd4>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006f8:	4a21      	ldr	r2, [pc, #132]	; (8000780 <SystemClock_Config+0xd4>)
 80006fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <SystemClock_Config+0xd4>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800070c:	2302      	movs	r3, #2
 800070e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000710:	2301      	movs	r3, #1
 8000712:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000714:	2310      	movs	r3, #16
 8000716:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000718:	2302      	movs	r3, #2
 800071a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800071c:	2300      	movs	r3, #0
 800071e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000720:	2308      	movs	r3, #8
 8000722:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000724:	2332      	movs	r3, #50	; 0x32
 8000726:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000728:	2304      	movs	r3, #4
 800072a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800072c:	2307      	movs	r3, #7
 800072e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	f107 0320 	add.w	r3, r7, #32
 8000734:	4618      	mov	r0, r3
 8000736:	f000 fef1 	bl	800151c <HAL_RCC_OscConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000740:	f000 fafc 	bl	8000d3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000744:	230f      	movs	r3, #15
 8000746:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000748:	2302      	movs	r3, #2
 800074a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000750:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000754:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000756:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800075a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f001 f952 	bl	8001a0c <HAL_RCC_ClockConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800076e:	f000 fae5 	bl	8000d3c <Error_Handler>
  }
}
 8000772:	bf00      	nop
 8000774:	3750      	adds	r7, #80	; 0x50
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800
 8000780:	40007000 	.word	0x40007000

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08e      	sub	sp, #56	; 0x38
 8000788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	623b      	str	r3, [r7, #32]
 800079e:	4bb2      	ldr	r3, [pc, #712]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4ab1      	ldr	r2, [pc, #708]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4baf      	ldr	r3, [pc, #700]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	623b      	str	r3, [r7, #32]
 80007b4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
 80007ba:	4bab      	ldr	r3, [pc, #684]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4aaa      	ldr	r2, [pc, #680]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 80007c0:	f043 0320 	orr.w	r3, r3, #32
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4ba8      	ldr	r3, [pc, #672]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0320 	and.w	r3, r3, #32
 80007ce:	61fb      	str	r3, [r7, #28]
 80007d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	61bb      	str	r3, [r7, #24]
 80007d6:	4ba4      	ldr	r3, [pc, #656]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4aa3      	ldr	r2, [pc, #652]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 80007dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4ba1      	ldr	r3, [pc, #644]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ea:	61bb      	str	r3, [r7, #24]
 80007ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
 80007f2:	4b9d      	ldr	r3, [pc, #628]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a9c      	ldr	r2, [pc, #624]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b9a      	ldr	r3, [pc, #616]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	4b96      	ldr	r3, [pc, #600]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a95      	ldr	r2, [pc, #596]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b93      	ldr	r3, [pc, #588]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	4b8f      	ldr	r3, [pc, #572]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a8e      	ldr	r2, [pc, #568]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 8000830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b8c      	ldr	r3, [pc, #560]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	4b88      	ldr	r3, [pc, #544]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a87      	ldr	r2, [pc, #540]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 800084c:	f043 0310 	orr.w	r3, r3, #16
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b85      	ldr	r3, [pc, #532]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0310 	and.w	r3, r3, #16
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b81      	ldr	r3, [pc, #516]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a80      	ldr	r2, [pc, #512]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 8000868:	f043 0308 	orr.w	r3, r3, #8
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b7e      	ldr	r3, [pc, #504]	; (8000a68 <MX_GPIO_Init+0x2e4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0308 	and.w	r3, r3, #8
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2116      	movs	r1, #22
 800087e:	487b      	ldr	r0, [pc, #492]	; (8000a6c <MX_GPIO_Init+0x2e8>)
 8000880:	f000 fe32 	bl	80014e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	2180      	movs	r1, #128	; 0x80
 8000888:	4879      	ldr	r0, [pc, #484]	; (8000a70 <MX_GPIO_Init+0x2ec>)
 800088a:	f000 fe2d 	bl	80014e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000894:	4877      	ldr	r0, [pc, #476]	; (8000a74 <MX_GPIO_Init+0x2f0>)
 8000896:	f000 fe27 	bl	80014e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD2_Pin|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80008a0:	4875      	ldr	r0, [pc, #468]	; (8000a78 <MX_GPIO_Init+0x2f4>)
 80008a2:	f000 fe21 	bl	80014e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80008a6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b4:	2303      	movs	r3, #3
 80008b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008b8:	230c      	movs	r3, #12
 80008ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c0:	4619      	mov	r1, r3
 80008c2:	486e      	ldr	r0, [pc, #440]	; (8000a7c <MX_GPIO_Init+0x2f8>)
 80008c4:	f000 fc64 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80008c8:	f44f 7360 	mov.w	r3, #896	; 0x380
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	2302      	movs	r3, #2
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80008da:	2305      	movs	r3, #5
 80008dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e2:	4619      	mov	r1, r3
 80008e4:	4865      	ldr	r0, [pc, #404]	; (8000a7c <MX_GPIO_Init+0x2f8>)
 80008e6:	f000 fc53 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 80008ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80008fc:	230e      	movs	r3, #14
 80008fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000904:	4619      	mov	r1, r3
 8000906:	485d      	ldr	r0, [pc, #372]	; (8000a7c <MX_GPIO_Init+0x2f8>)
 8000908:	f000 fc42 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800090c:	2301      	movs	r3, #1
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	2302      	movs	r3, #2
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000918:	2303      	movs	r3, #3
 800091a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800091c:	230c      	movs	r3, #12
 800091e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000924:	4619      	mov	r1, r3
 8000926:	4851      	ldr	r0, [pc, #324]	; (8000a6c <MX_GPIO_Init+0x2e8>)
 8000928:	f000 fc32 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800092c:	2316      	movs	r3, #22
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	2301      	movs	r3, #1
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2300      	movs	r3, #0
 800093a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800093c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000940:	4619      	mov	r1, r3
 8000942:	484a      	ldr	r0, [pc, #296]	; (8000a6c <MX_GPIO_Init+0x2e8>)
 8000944:	f000 fc24 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000948:	f248 0307 	movw	r3, #32775	; 0x8007
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800094e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095c:	4619      	mov	r1, r3
 800095e:	4844      	ldr	r0, [pc, #272]	; (8000a70 <MX_GPIO_Init+0x2ec>)
 8000960:	f000 fc16 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000964:	f641 0358 	movw	r3, #6232	; 0x1858
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000976:	230e      	movs	r3, #14
 8000978:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097e:	4619      	mov	r1, r3
 8000980:	483b      	ldr	r0, [pc, #236]	; (8000a70 <MX_GPIO_Init+0x2ec>)
 8000982:	f000 fc05 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000986:	2380      	movs	r3, #128	; 0x80
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099a:	4619      	mov	r1, r3
 800099c:	4834      	ldr	r0, [pc, #208]	; (8000a70 <MX_GPIO_Init+0x2ec>)
 800099e:	f000 fbf7 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80009a2:	2320      	movs	r3, #32
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009a6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b4:	4619      	mov	r1, r3
 80009b6:	482d      	ldr	r0, [pc, #180]	; (8000a6c <MX_GPIO_Init+0x2e8>)
 80009b8:	f000 fbea 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80009bc:	2303      	movs	r3, #3
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c0:	2302      	movs	r3, #2
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80009cc:	2309      	movs	r3, #9
 80009ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d4:	4619      	mov	r1, r3
 80009d6:	482a      	ldr	r0, [pc, #168]	; (8000a80 <MX_GPIO_Init+0x2fc>)
 80009d8:	f000 fbda 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009dc:	2304      	movs	r3, #4
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ec:	4619      	mov	r1, r3
 80009ee:	4824      	ldr	r0, [pc, #144]	; (8000a80 <MX_GPIO_Init+0x2fc>)
 80009f0:	f000 fbce 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80009f4:	f248 1333 	movw	r3, #33075	; 0x8133
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a02:	2303      	movs	r3, #3
 8000a04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a06:	230c      	movs	r3, #12
 8000a08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4819      	ldr	r0, [pc, #100]	; (8000a78 <MX_GPIO_Init+0x2f4>)
 8000a12:	f000 fbbd 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000a16:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a24:	2303      	movs	r3, #3
 8000a26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a28:	230c      	movs	r3, #12
 8000a2a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a30:	4619      	mov	r1, r3
 8000a32:	4814      	ldr	r0, [pc, #80]	; (8000a84 <MX_GPIO_Init+0x300>)
 8000a34:	f000 fbac 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000a38:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a4a:	230e      	movs	r3, #14
 8000a4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a52:	4619      	mov	r1, r3
 8000a54:	480a      	ldr	r0, [pc, #40]	; (8000a80 <MX_GPIO_Init+0x2fc>)
 8000a56:	f000 fb9b 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000a5a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a64:	e010      	b.n	8000a88 <MX_GPIO_Init+0x304>
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40020800 	.word	0x40020800
 8000a70:	40020000 	.word	0x40020000
 8000a74:	40020c00 	.word	0x40020c00
 8000a78:	40021800 	.word	0x40021800
 8000a7c:	40021400 	.word	0x40021400
 8000a80:	40020400 	.word	0x40020400
 8000a84:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000a90:	230c      	movs	r3, #12
 8000a92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a98:	4619      	mov	r1, r3
 8000a9a:	486b      	ldr	r0, [pc, #428]	; (8000c48 <MX_GPIO_Init+0x4c4>)
 8000a9c:	f000 fb78 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000aa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4864      	ldr	r0, [pc, #400]	; (8000c48 <MX_GPIO_Init+0x4c4>)
 8000ab6:	f000 fb6b 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000aba:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000acc:	230c      	movs	r3, #12
 8000ace:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	485d      	ldr	r0, [pc, #372]	; (8000c4c <MX_GPIO_Init+0x4c8>)
 8000ad8:	f000 fb5a 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000adc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aee:	4619      	mov	r1, r3
 8000af0:	4856      	ldr	r0, [pc, #344]	; (8000c4c <MX_GPIO_Init+0x4c8>)
 8000af2:	f000 fb4d 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000af6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	2301      	movs	r3, #1
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	484f      	ldr	r0, [pc, #316]	; (8000c4c <MX_GPIO_Init+0x4c8>)
 8000b10:	f000 fb3e 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000b14:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b26:	230e      	movs	r3, #14
 8000b28:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4847      	ldr	r0, [pc, #284]	; (8000c50 <MX_GPIO_Init+0x4cc>)
 8000b32:	f000 fb2d 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000b36:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b48:	230e      	movs	r3, #14
 8000b4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b50:	4619      	mov	r1, r3
 8000b52:	4840      	ldr	r0, [pc, #256]	; (8000c54 <MX_GPIO_Init+0x4d0>)
 8000b54:	f000 fb1c 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000b58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b5e:	2312      	movs	r3, #18
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b6a:	2304      	movs	r3, #4
 8000b6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b72:	4619      	mov	r1, r3
 8000b74:	4837      	ldr	r0, [pc, #220]	; (8000c54 <MX_GPIO_Init+0x4d0>)
 8000b76:	f000 fb0b 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000b7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b80:	2312      	movs	r3, #18
 8000b82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b8c:	2304      	movs	r3, #4
 8000b8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b94:	4619      	mov	r1, r3
 8000b96:	4830      	ldr	r0, [pc, #192]	; (8000c58 <MX_GPIO_Init+0x4d4>)
 8000b98:	f000 fafa 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000b9c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bae:	2307      	movs	r3, #7
 8000bb0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4827      	ldr	r0, [pc, #156]	; (8000c58 <MX_GPIO_Init+0x4d4>)
 8000bba:	f000 fae9 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000bbe:	2348      	movs	r3, #72	; 0x48
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bce:	230e      	movs	r3, #14
 8000bd0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	481c      	ldr	r0, [pc, #112]	; (8000c4c <MX_GPIO_Init+0x4c8>)
 8000bda:	f000 fad9 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pin : G3_Pin */
  GPIO_InitStruct.Pin = G3_Pin;
 8000bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000bf0:	2309      	movs	r3, #9
 8000bf2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(G3_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4815      	ldr	r0, [pc, #84]	; (8000c50 <MX_GPIO_Init+0x4cc>)
 8000bfc:	f000 fac8 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD4_Pin;
 8000c00:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c06:	2301      	movs	r3, #1
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c16:	4619      	mov	r1, r3
 8000c18:	480d      	ldr	r0, [pc, #52]	; (8000c50 <MX_GPIO_Init+0x4cc>)
 8000c1a:	f000 fab9 	bl	8001190 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000c1e:	2360      	movs	r3, #96	; 0x60
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c2e:	230c      	movs	r3, #12
 8000c30:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c36:	4619      	mov	r1, r3
 8000c38:	4803      	ldr	r0, [pc, #12]	; (8000c48 <MX_GPIO_Init+0x4c4>)
 8000c3a:	f000 faa9 	bl	8001190 <HAL_GPIO_Init>

}
 8000c3e:	bf00      	nop
 8000c40:	3738      	adds	r7, #56	; 0x38
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40020400 	.word	0x40020400
 8000c4c:	40020c00 	.word	0x40020c00
 8000c50:	40021800 	.word	0x40021800
 8000c54:	40020800 	.word	0x40020800
 8000c58:	40020000 	.word	0x40020000

08000c5c <GreenTaskA>:
/* USER CODE BEGIN 4 */



void GreenTaskA( void* argument )
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	uint_fast8_t count = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		//every 5 times through the loop, give the semaphore
		if(++count >= 5)
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	2b04      	cmp	r3, #4
 8000c72:	d90b      	bls.n	8000c8c <GreenTaskA+0x30>
		{
			count = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	60fb      	str	r3, [r7, #12]
			SEGGER_SYSVIEW_PrintfHost("Task A (green LED) gives semPtr");
 8000c78:	480b      	ldr	r0, [pc, #44]	; (8000ca8 <GreenTaskA+0x4c>)
 8000c7a:	f005 ff37 	bl	8006aec <SEGGER_SYSVIEW_PrintfHost>
			xSemaphoreGive(semPtr);
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <GreenTaskA+0x50>)
 8000c80:	6818      	ldr	r0, [r3, #0]
 8000c82:	2300      	movs	r3, #0
 8000c84:	2200      	movs	r2, #0
 8000c86:	2100      	movs	r1, #0
 8000c88:	f001 fd50 	bl	800272c <xQueueGenericSend>
		}
		GreenLed.On();
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <GreenTaskA+0x54>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4798      	blx	r3
		vTaskDelay(pdMS_TO_TICKS(100));
 8000c92:	2064      	movs	r0, #100	; 0x64
 8000c94:	f002 fc6c 	bl	8003570 <vTaskDelay>
		GreenLed.Off();
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <GreenTaskA+0x54>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	4798      	blx	r3
		vTaskDelay(100/portTICK_PERIOD_MS);
 8000c9e:	2064      	movs	r0, #100	; 0x64
 8000ca0:	f002 fc66 	bl	8003570 <vTaskDelay>
		if(++count >= 5)
 8000ca4:	e7e0      	b.n	8000c68 <GreenTaskA+0xc>
 8000ca6:	bf00      	nop
 8000ca8:	08006f04 	.word	0x08006f04
 8000cac:	20000040 	.word	0x20000040
 8000cb0:	20000000 	.word	0x20000000

08000cb4 <BlueTaskB>:

/**
 * wait to receive semPtr and triple blink the Blue LED
 */
void BlueTaskB( void* argument )
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//'take' the semaphore with a really long timeout
		SEGGER_SYSVIEW_PrintfHost("Task B (Blue LED) attempts to take semPtr");
 8000cbc:	4812      	ldr	r0, [pc, #72]	; (8000d08 <BlueTaskB+0x54>)
 8000cbe:	f005 ff15 	bl	8006aec <SEGGER_SYSVIEW_PrintfHost>
		if(xSemaphoreTake(semPtr, portMAX_DELAY) == pdPASS)
 8000cc2:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <BlueTaskB+0x58>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f04f 31ff 	mov.w	r1, #4294967295
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f002 f822 	bl	8002d14 <xQueueSemaphoreTake>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d1f2      	bne.n	8000cbc <BlueTaskB+0x8>
		{
			SEGGER_SYSVIEW_PrintfHost("Task B (Blue LED) received semPtr");
 8000cd6:	480e      	ldr	r0, [pc, #56]	; (8000d10 <BlueTaskB+0x5c>)
 8000cd8:	f005 ff08 	bl	8006aec <SEGGER_SYSVIEW_PrintfHost>
			//triple blink the Blue LED
			for(uint_fast8_t i = 0; i < 3; i++)
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	e00e      	b.n	8000d00 <BlueTaskB+0x4c>
			{
				BlueLed.On();
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <BlueTaskB+0x60>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4798      	blx	r3
				vTaskDelay(50/portTICK_PERIOD_MS);
 8000ce8:	2032      	movs	r0, #50	; 0x32
 8000cea:	f002 fc41 	bl	8003570 <vTaskDelay>
				BlueLed.Off();
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <BlueTaskB+0x60>)
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	4798      	blx	r3
				vTaskDelay(50/portTICK_PERIOD_MS);
 8000cf4:	2032      	movs	r0, #50	; 0x32
 8000cf6:	f002 fc3b 	bl	8003570 <vTaskDelay>
			for(uint_fast8_t i = 0; i < 3; i++)
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d9ed      	bls.n	8000ce2 <BlueTaskB+0x2e>
		SEGGER_SYSVIEW_PrintfHost("Task B (Blue LED) attempts to take semPtr");
 8000d06:	e7d9      	b.n	8000cbc <BlueTaskB+0x8>
 8000d08:	08006f24 	.word	0x08006f24
 8000d0c:	20000040 	.word	0x20000040
 8000d10:	08006f50 	.word	0x08006f50
 8000d14:	20000008 	.word	0x20000008

08000d18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d101      	bne.n	8000d2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d2a:	f000 f92f 	bl	8000f8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40001000 	.word	0x40001000

08000d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d40:	b672      	cpsid	i
}
 8000d42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <Error_Handler+0x8>
	...

08000d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	4a0f      	ldr	r2, [pc, #60]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5e:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	603b      	str	r3, [r7, #0]
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	4a08      	ldr	r2, [pc, #32]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d78:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d86:	2007      	movs	r0, #7
 8000d88:	f000 f9cd 	bl	8001126 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40023800 	.word	0x40023800

08000d98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08e      	sub	sp, #56	; 0x38
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000da0:	2300      	movs	r3, #0
 8000da2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000da8:	2300      	movs	r3, #0
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	4b33      	ldr	r3, [pc, #204]	; (8000e7c <HAL_InitTick+0xe4>)
 8000dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db0:	4a32      	ldr	r2, [pc, #200]	; (8000e7c <HAL_InitTick+0xe4>)
 8000db2:	f043 0310 	orr.w	r3, r3, #16
 8000db6:	6413      	str	r3, [r2, #64]	; 0x40
 8000db8:	4b30      	ldr	r3, [pc, #192]	; (8000e7c <HAL_InitTick+0xe4>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbc:	f003 0310 	and.w	r3, r3, #16
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dc4:	f107 0210 	add.w	r2, r7, #16
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4611      	mov	r1, r2
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f001 f828 	bl	8001e24 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000dd4:	6a3b      	ldr	r3, [r7, #32]
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d103      	bne.n	8000de6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000dde:	f001 f80d 	bl	8001dfc <HAL_RCC_GetPCLK1Freq>
 8000de2:	6378      	str	r0, [r7, #52]	; 0x34
 8000de4:	e004      	b.n	8000df0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000de6:	f001 f809 	bl	8001dfc <HAL_RCC_GetPCLK1Freq>
 8000dea:	4603      	mov	r3, r0
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000df2:	4a23      	ldr	r2, [pc, #140]	; (8000e80 <HAL_InitTick+0xe8>)
 8000df4:	fba2 2303 	umull	r2, r3, r2, r3
 8000df8:	0c9b      	lsrs	r3, r3, #18
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000dfe:	4b21      	ldr	r3, [pc, #132]	; (8000e84 <HAL_InitTick+0xec>)
 8000e00:	4a21      	ldr	r2, [pc, #132]	; (8000e88 <HAL_InitTick+0xf0>)
 8000e02:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e04:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <HAL_InitTick+0xec>)
 8000e06:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e0a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e0c:	4a1d      	ldr	r2, [pc, #116]	; (8000e84 <HAL_InitTick+0xec>)
 8000e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e10:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e12:	4b1c      	ldr	r3, [pc, #112]	; (8000e84 <HAL_InitTick+0xec>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e18:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <HAL_InitTick+0xec>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1e:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <HAL_InitTick+0xec>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e24:	4817      	ldr	r0, [pc, #92]	; (8000e84 <HAL_InitTick+0xec>)
 8000e26:	f001 f82f 	bl	8001e88 <HAL_TIM_Base_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000e30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d11b      	bne.n	8000e70 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e38:	4812      	ldr	r0, [pc, #72]	; (8000e84 <HAL_InitTick+0xec>)
 8000e3a:	f001 f87f 	bl	8001f3c <HAL_TIM_Base_Start_IT>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000e44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d111      	bne.n	8000e70 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e4c:	2036      	movs	r0, #54	; 0x36
 8000e4e:	f000 f991 	bl	8001174 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b0f      	cmp	r3, #15
 8000e56:	d808      	bhi.n	8000e6a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	2036      	movs	r0, #54	; 0x36
 8000e5e:	f000 f96d 	bl	800113c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e62:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <HAL_InitTick+0xf4>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6013      	str	r3, [r2, #0]
 8000e68:	e002      	b.n	8000e70 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3738      	adds	r7, #56	; 0x38
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	431bde83 	.word	0x431bde83
 8000e84:	20000044 	.word	0x20000044
 8000e88:	40001000 	.word	0x40001000
 8000e8c:	20000014 	.word	0x20000014

08000e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <NMI_Handler+0x4>

08000e96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <HardFault_Handler+0x4>

08000e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <MemManage_Handler+0x4>

08000ea2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <BusFault_Handler+0x4>

08000ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <UsageFault_Handler+0x4>

08000eae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ec0:	4802      	ldr	r0, [pc, #8]	; (8000ecc <TIM6_DAC_IRQHandler+0x10>)
 8000ec2:	f001 f8ab 	bl	800201c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000044 	.word	0x20000044

08000ed0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <SystemInit+0x20>)
 8000ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <SystemInit+0x20>)
 8000edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ef4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f2c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ef8:	480d      	ldr	r0, [pc, #52]	; (8000f30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000efa:	490e      	ldr	r1, [pc, #56]	; (8000f34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000efc:	4a0e      	ldr	r2, [pc, #56]	; (8000f38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f00:	e002      	b.n	8000f08 <LoopCopyDataInit>

08000f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f06:	3304      	adds	r3, #4

08000f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f0c:	d3f9      	bcc.n	8000f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0e:	4a0b      	ldr	r2, [pc, #44]	; (8000f3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f10:	4c0b      	ldr	r4, [pc, #44]	; (8000f40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f14:	e001      	b.n	8000f1a <LoopFillZerobss>

08000f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f18:	3204      	adds	r2, #4

08000f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f1c:	d3fb      	bcc.n	8000f16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f1e:	f7ff ffd7 	bl	8000ed0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f22:	f005 ff8d 	bl	8006e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f26:	f7ff fb5f 	bl	80005e8 <main>
  bx  lr    
 8000f2a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f2c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f34:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000f38:	0800709c 	.word	0x0800709c
  ldr r2, =_sbss
 8000f3c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000f40:	200144b0 	.word	0x200144b0

08000f44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f44:	e7fe      	b.n	8000f44 <ADC_IRQHandler>
	...

08000f48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <HAL_Init+0x40>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <HAL_Init+0x40>)
 8000f52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f58:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <HAL_Init+0x40>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <HAL_Init+0x40>)
 8000f5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <HAL_Init+0x40>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a07      	ldr	r2, [pc, #28]	; (8000f88 <HAL_Init+0x40>)
 8000f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f70:	2003      	movs	r0, #3
 8000f72:	f000 f8d8 	bl	8001126 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f76:	2000      	movs	r0, #0
 8000f78:	f7ff ff0e 	bl	8000d98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f7c:	f7ff fee4 	bl	8000d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40023c00 	.word	0x40023c00

08000f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_IncTick+0x20>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f9e:	6013      	str	r3, [r2, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20000018 	.word	0x20000018
 8000fb0:	2000008c 	.word	0x2000008c

08000fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <HAL_GetTick+0x14>)
 8000fba:	681b      	ldr	r3, [r3, #0]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	2000008c 	.word	0x2000008c

08000fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffe:	4a04      	ldr	r2, [pc, #16]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	60d3      	str	r3, [r2, #12]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001018:	4b04      	ldr	r3, [pc, #16]	; (800102c <__NVIC_GetPriorityGrouping+0x18>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	f003 0307 	and.w	r3, r3, #7
}
 8001022:	4618      	mov	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	2b00      	cmp	r3, #0
 8001040:	db0b      	blt.n	800105a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	f003 021f 	and.w	r2, r3, #31
 8001048:	4907      	ldr	r1, [pc, #28]	; (8001068 <__NVIC_EnableIRQ+0x38>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	095b      	lsrs	r3, r3, #5
 8001050:	2001      	movs	r0, #1
 8001052:	fa00 f202 	lsl.w	r2, r0, r2
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000e100 	.word	0xe000e100

0800106c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	2b00      	cmp	r3, #0
 800107e:	db0a      	blt.n	8001096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	b2da      	uxtb	r2, r3
 8001084:	490c      	ldr	r1, [pc, #48]	; (80010b8 <__NVIC_SetPriority+0x4c>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	0112      	lsls	r2, r2, #4
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	440b      	add	r3, r1
 8001090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001094:	e00a      	b.n	80010ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4908      	ldr	r1, [pc, #32]	; (80010bc <__NVIC_SetPriority+0x50>)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	3b04      	subs	r3, #4
 80010a4:	0112      	lsls	r2, r2, #4
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	440b      	add	r3, r1
 80010aa:	761a      	strb	r2, [r3, #24]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000e100 	.word	0xe000e100
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b089      	sub	sp, #36	; 0x24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f1c3 0307 	rsb	r3, r3, #7
 80010da:	2b04      	cmp	r3, #4
 80010dc:	bf28      	it	cs
 80010de:	2304      	movcs	r3, #4
 80010e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3304      	adds	r3, #4
 80010e6:	2b06      	cmp	r3, #6
 80010e8:	d902      	bls.n	80010f0 <NVIC_EncodePriority+0x30>
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3b03      	subs	r3, #3
 80010ee:	e000      	b.n	80010f2 <NVIC_EncodePriority+0x32>
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	f04f 32ff 	mov.w	r2, #4294967295
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43da      	mvns	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	401a      	ands	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001108:	f04f 31ff 	mov.w	r1, #4294967295
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa01 f303 	lsl.w	r3, r1, r3
 8001112:	43d9      	mvns	r1, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	4313      	orrs	r3, r2
         );
}
 800111a:	4618      	mov	r0, r3
 800111c:	3724      	adds	r7, #36	; 0x24
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ff4c 	bl	8000fcc <__NVIC_SetPriorityGrouping>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
 8001148:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800114e:	f7ff ff61 	bl	8001014 <__NVIC_GetPriorityGrouping>
 8001152:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	68b9      	ldr	r1, [r7, #8]
 8001158:	6978      	ldr	r0, [r7, #20]
 800115a:	f7ff ffb1 	bl	80010c0 <NVIC_EncodePriority>
 800115e:	4602      	mov	r2, r0
 8001160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001164:	4611      	mov	r1, r2
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff80 	bl	800106c <__NVIC_SetPriority>
}
 800116c:	bf00      	nop
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff ff54 	bl	8001030 <__NVIC_EnableIRQ>
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	; 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
 80011aa:	e177      	b.n	800149c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011ac:	2201      	movs	r2, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	f040 8166 	bne.w	8001496 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 0303 	and.w	r3, r3, #3
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d005      	beq.n	80011e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d130      	bne.n	8001244 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	2203      	movs	r2, #3
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	68da      	ldr	r2, [r3, #12]
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001218:	2201      	movs	r2, #1
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	091b      	lsrs	r3, r3, #4
 800122e:	f003 0201 	and.w	r2, r3, #1
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	2b03      	cmp	r3, #3
 800124e:	d017      	beq.n	8001280 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	2203      	movs	r2, #3
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d123      	bne.n	80012d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	08da      	lsrs	r2, r3, #3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3208      	adds	r2, #8
 8001294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	f003 0307 	and.w	r3, r3, #7
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	220f      	movs	r2, #15
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	691a      	ldr	r2, [r3, #16]
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	08da      	lsrs	r2, r3, #3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3208      	adds	r2, #8
 80012ce:	69b9      	ldr	r1, [r7, #24]
 80012d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	2203      	movs	r2, #3
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0203 	and.w	r2, r3, #3
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 80c0 	beq.w	8001496 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b66      	ldr	r3, [pc, #408]	; (80014b4 <HAL_GPIO_Init+0x324>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	4a65      	ldr	r2, [pc, #404]	; (80014b4 <HAL_GPIO_Init+0x324>)
 8001320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001324:	6453      	str	r3, [r2, #68]	; 0x44
 8001326:	4b63      	ldr	r3, [pc, #396]	; (80014b4 <HAL_GPIO_Init+0x324>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001332:	4a61      	ldr	r2, [pc, #388]	; (80014b8 <HAL_GPIO_Init+0x328>)
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	089b      	lsrs	r3, r3, #2
 8001338:	3302      	adds	r3, #2
 800133a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	220f      	movs	r2, #15
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a58      	ldr	r2, [pc, #352]	; (80014bc <HAL_GPIO_Init+0x32c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d037      	beq.n	80013ce <HAL_GPIO_Init+0x23e>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a57      	ldr	r2, [pc, #348]	; (80014c0 <HAL_GPIO_Init+0x330>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d031      	beq.n	80013ca <HAL_GPIO_Init+0x23a>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a56      	ldr	r2, [pc, #344]	; (80014c4 <HAL_GPIO_Init+0x334>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d02b      	beq.n	80013c6 <HAL_GPIO_Init+0x236>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a55      	ldr	r2, [pc, #340]	; (80014c8 <HAL_GPIO_Init+0x338>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d025      	beq.n	80013c2 <HAL_GPIO_Init+0x232>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a54      	ldr	r2, [pc, #336]	; (80014cc <HAL_GPIO_Init+0x33c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d01f      	beq.n	80013be <HAL_GPIO_Init+0x22e>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a53      	ldr	r2, [pc, #332]	; (80014d0 <HAL_GPIO_Init+0x340>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d019      	beq.n	80013ba <HAL_GPIO_Init+0x22a>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a52      	ldr	r2, [pc, #328]	; (80014d4 <HAL_GPIO_Init+0x344>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d013      	beq.n	80013b6 <HAL_GPIO_Init+0x226>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a51      	ldr	r2, [pc, #324]	; (80014d8 <HAL_GPIO_Init+0x348>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d00d      	beq.n	80013b2 <HAL_GPIO_Init+0x222>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a50      	ldr	r2, [pc, #320]	; (80014dc <HAL_GPIO_Init+0x34c>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d007      	beq.n	80013ae <HAL_GPIO_Init+0x21e>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a4f      	ldr	r2, [pc, #316]	; (80014e0 <HAL_GPIO_Init+0x350>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d101      	bne.n	80013aa <HAL_GPIO_Init+0x21a>
 80013a6:	2309      	movs	r3, #9
 80013a8:	e012      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013aa:	230a      	movs	r3, #10
 80013ac:	e010      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013ae:	2308      	movs	r3, #8
 80013b0:	e00e      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013b2:	2307      	movs	r3, #7
 80013b4:	e00c      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013b6:	2306      	movs	r3, #6
 80013b8:	e00a      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013ba:	2305      	movs	r3, #5
 80013bc:	e008      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013be:	2304      	movs	r3, #4
 80013c0:	e006      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013c2:	2303      	movs	r3, #3
 80013c4:	e004      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013c6:	2302      	movs	r3, #2
 80013c8:	e002      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013ca:	2301      	movs	r3, #1
 80013cc:	e000      	b.n	80013d0 <HAL_GPIO_Init+0x240>
 80013ce:	2300      	movs	r3, #0
 80013d0:	69fa      	ldr	r2, [r7, #28]
 80013d2:	f002 0203 	and.w	r2, r2, #3
 80013d6:	0092      	lsls	r2, r2, #2
 80013d8:	4093      	lsls	r3, r2
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013e0:	4935      	ldr	r1, [pc, #212]	; (80014b8 <HAL_GPIO_Init+0x328>)
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	089b      	lsrs	r3, r3, #2
 80013e6:	3302      	adds	r3, #2
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ee:	4b3d      	ldr	r3, [pc, #244]	; (80014e4 <HAL_GPIO_Init+0x354>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001412:	4a34      	ldr	r2, [pc, #208]	; (80014e4 <HAL_GPIO_Init+0x354>)
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001418:	4b32      	ldr	r3, [pc, #200]	; (80014e4 <HAL_GPIO_Init+0x354>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800143c:	4a29      	ldr	r2, [pc, #164]	; (80014e4 <HAL_GPIO_Init+0x354>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001442:	4b28      	ldr	r3, [pc, #160]	; (80014e4 <HAL_GPIO_Init+0x354>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	43db      	mvns	r3, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4013      	ands	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001466:	4a1f      	ldr	r2, [pc, #124]	; (80014e4 <HAL_GPIO_Init+0x354>)
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800146c:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <HAL_GPIO_Init+0x354>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d003      	beq.n	8001490 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001490:	4a14      	ldr	r2, [pc, #80]	; (80014e4 <HAL_GPIO_Init+0x354>)
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3301      	adds	r3, #1
 800149a:	61fb      	str	r3, [r7, #28]
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	2b0f      	cmp	r3, #15
 80014a0:	f67f ae84 	bls.w	80011ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	3724      	adds	r7, #36	; 0x24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40013800 	.word	0x40013800
 80014bc:	40020000 	.word	0x40020000
 80014c0:	40020400 	.word	0x40020400
 80014c4:	40020800 	.word	0x40020800
 80014c8:	40020c00 	.word	0x40020c00
 80014cc:	40021000 	.word	0x40021000
 80014d0:	40021400 	.word	0x40021400
 80014d4:	40021800 	.word	0x40021800
 80014d8:	40021c00 	.word	0x40021c00
 80014dc:	40022000 	.word	0x40022000
 80014e0:	40022400 	.word	0x40022400
 80014e4:	40013c00 	.word	0x40013c00

080014e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	807b      	strh	r3, [r7, #2]
 80014f4:	4613      	mov	r3, r2
 80014f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014f8:	787b      	ldrb	r3, [r7, #1]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014fe:	887a      	ldrh	r2, [r7, #2]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001504:	e003      	b.n	800150e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001506:	887b      	ldrh	r3, [r7, #2]
 8001508:	041a      	lsls	r2, r3, #16
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	619a      	str	r2, [r3, #24]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e267      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d075      	beq.n	8001626 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800153a:	4b88      	ldr	r3, [pc, #544]	; (800175c <HAL_RCC_OscConfig+0x240>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 030c 	and.w	r3, r3, #12
 8001542:	2b04      	cmp	r3, #4
 8001544:	d00c      	beq.n	8001560 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001546:	4b85      	ldr	r3, [pc, #532]	; (800175c <HAL_RCC_OscConfig+0x240>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800154e:	2b08      	cmp	r3, #8
 8001550:	d112      	bne.n	8001578 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001552:	4b82      	ldr	r3, [pc, #520]	; (800175c <HAL_RCC_OscConfig+0x240>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800155a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800155e:	d10b      	bne.n	8001578 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001560:	4b7e      	ldr	r3, [pc, #504]	; (800175c <HAL_RCC_OscConfig+0x240>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d05b      	beq.n	8001624 <HAL_RCC_OscConfig+0x108>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d157      	bne.n	8001624 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e242      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001580:	d106      	bne.n	8001590 <HAL_RCC_OscConfig+0x74>
 8001582:	4b76      	ldr	r3, [pc, #472]	; (800175c <HAL_RCC_OscConfig+0x240>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a75      	ldr	r2, [pc, #468]	; (800175c <HAL_RCC_OscConfig+0x240>)
 8001588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	e01d      	b.n	80015cc <HAL_RCC_OscConfig+0xb0>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001598:	d10c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x98>
 800159a:	4b70      	ldr	r3, [pc, #448]	; (800175c <HAL_RCC_OscConfig+0x240>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a6f      	ldr	r2, [pc, #444]	; (800175c <HAL_RCC_OscConfig+0x240>)
 80015a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	4b6d      	ldr	r3, [pc, #436]	; (800175c <HAL_RCC_OscConfig+0x240>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a6c      	ldr	r2, [pc, #432]	; (800175c <HAL_RCC_OscConfig+0x240>)
 80015ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	e00b      	b.n	80015cc <HAL_RCC_OscConfig+0xb0>
 80015b4:	4b69      	ldr	r3, [pc, #420]	; (800175c <HAL_RCC_OscConfig+0x240>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a68      	ldr	r2, [pc, #416]	; (800175c <HAL_RCC_OscConfig+0x240>)
 80015ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	4b66      	ldr	r3, [pc, #408]	; (800175c <HAL_RCC_OscConfig+0x240>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a65      	ldr	r2, [pc, #404]	; (800175c <HAL_RCC_OscConfig+0x240>)
 80015c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d013      	beq.n	80015fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d4:	f7ff fcee 	bl	8000fb4 <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015dc:	f7ff fcea 	bl	8000fb4 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b64      	cmp	r3, #100	; 0x64
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e207      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ee:	4b5b      	ldr	r3, [pc, #364]	; (800175c <HAL_RCC_OscConfig+0x240>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0f0      	beq.n	80015dc <HAL_RCC_OscConfig+0xc0>
 80015fa:	e014      	b.n	8001626 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fc:	f7ff fcda 	bl	8000fb4 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001604:	f7ff fcd6 	bl	8000fb4 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b64      	cmp	r3, #100	; 0x64
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e1f3      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001616:	4b51      	ldr	r3, [pc, #324]	; (800175c <HAL_RCC_OscConfig+0x240>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f0      	bne.n	8001604 <HAL_RCC_OscConfig+0xe8>
 8001622:	e000      	b.n	8001626 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d063      	beq.n	80016fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001632:	4b4a      	ldr	r3, [pc, #296]	; (800175c <HAL_RCC_OscConfig+0x240>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 030c 	and.w	r3, r3, #12
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00b      	beq.n	8001656 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800163e:	4b47      	ldr	r3, [pc, #284]	; (800175c <HAL_RCC_OscConfig+0x240>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001646:	2b08      	cmp	r3, #8
 8001648:	d11c      	bne.n	8001684 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800164a:	4b44      	ldr	r3, [pc, #272]	; (800175c <HAL_RCC_OscConfig+0x240>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d116      	bne.n	8001684 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001656:	4b41      	ldr	r3, [pc, #260]	; (800175c <HAL_RCC_OscConfig+0x240>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d005      	beq.n	800166e <HAL_RCC_OscConfig+0x152>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d001      	beq.n	800166e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e1c7      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166e:	4b3b      	ldr	r3, [pc, #236]	; (800175c <HAL_RCC_OscConfig+0x240>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	4937      	ldr	r1, [pc, #220]	; (800175c <HAL_RCC_OscConfig+0x240>)
 800167e:	4313      	orrs	r3, r2
 8001680:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001682:	e03a      	b.n	80016fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d020      	beq.n	80016ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800168c:	4b34      	ldr	r3, [pc, #208]	; (8001760 <HAL_RCC_OscConfig+0x244>)
 800168e:	2201      	movs	r2, #1
 8001690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001692:	f7ff fc8f 	bl	8000fb4 <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800169a:	f7ff fc8b 	bl	8000fb4 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e1a8      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ac:	4b2b      	ldr	r3, [pc, #172]	; (800175c <HAL_RCC_OscConfig+0x240>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d0f0      	beq.n	800169a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b8:	4b28      	ldr	r3, [pc, #160]	; (800175c <HAL_RCC_OscConfig+0x240>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	4925      	ldr	r1, [pc, #148]	; (800175c <HAL_RCC_OscConfig+0x240>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	600b      	str	r3, [r1, #0]
 80016cc:	e015      	b.n	80016fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ce:	4b24      	ldr	r3, [pc, #144]	; (8001760 <HAL_RCC_OscConfig+0x244>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d4:	f7ff fc6e 	bl	8000fb4 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016dc:	f7ff fc6a 	bl	8000fb4 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e187      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ee:	4b1b      	ldr	r3, [pc, #108]	; (800175c <HAL_RCC_OscConfig+0x240>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1f0      	bne.n	80016dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	2b00      	cmp	r3, #0
 8001704:	d036      	beq.n	8001774 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d016      	beq.n	800173c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <HAL_RCC_OscConfig+0x248>)
 8001710:	2201      	movs	r2, #1
 8001712:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001714:	f7ff fc4e 	bl	8000fb4 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800171c:	f7ff fc4a 	bl	8000fb4 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e167      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172e:	4b0b      	ldr	r3, [pc, #44]	; (800175c <HAL_RCC_OscConfig+0x240>)
 8001730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0f0      	beq.n	800171c <HAL_RCC_OscConfig+0x200>
 800173a:	e01b      	b.n	8001774 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <HAL_RCC_OscConfig+0x248>)
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001742:	f7ff fc37 	bl	8000fb4 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001748:	e00e      	b.n	8001768 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800174a:	f7ff fc33 	bl	8000fb4 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d907      	bls.n	8001768 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e150      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
 800175c:	40023800 	.word	0x40023800
 8001760:	42470000 	.word	0x42470000
 8001764:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001768:	4b88      	ldr	r3, [pc, #544]	; (800198c <HAL_RCC_OscConfig+0x470>)
 800176a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1ea      	bne.n	800174a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b00      	cmp	r3, #0
 800177e:	f000 8097 	beq.w	80018b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001782:	2300      	movs	r3, #0
 8001784:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001786:	4b81      	ldr	r3, [pc, #516]	; (800198c <HAL_RCC_OscConfig+0x470>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10f      	bne.n	80017b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	4b7d      	ldr	r3, [pc, #500]	; (800198c <HAL_RCC_OscConfig+0x470>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	4a7c      	ldr	r2, [pc, #496]	; (800198c <HAL_RCC_OscConfig+0x470>)
 800179c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a0:	6413      	str	r3, [r2, #64]	; 0x40
 80017a2:	4b7a      	ldr	r3, [pc, #488]	; (800198c <HAL_RCC_OscConfig+0x470>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ae:	2301      	movs	r3, #1
 80017b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b2:	4b77      	ldr	r3, [pc, #476]	; (8001990 <HAL_RCC_OscConfig+0x474>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d118      	bne.n	80017f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017be:	4b74      	ldr	r3, [pc, #464]	; (8001990 <HAL_RCC_OscConfig+0x474>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a73      	ldr	r2, [pc, #460]	; (8001990 <HAL_RCC_OscConfig+0x474>)
 80017c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ca:	f7ff fbf3 	bl	8000fb4 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017d2:	f7ff fbef 	bl	8000fb4 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e10c      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e4:	4b6a      	ldr	r3, [pc, #424]	; (8001990 <HAL_RCC_OscConfig+0x474>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0f0      	beq.n	80017d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d106      	bne.n	8001806 <HAL_RCC_OscConfig+0x2ea>
 80017f8:	4b64      	ldr	r3, [pc, #400]	; (800198c <HAL_RCC_OscConfig+0x470>)
 80017fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017fc:	4a63      	ldr	r2, [pc, #396]	; (800198c <HAL_RCC_OscConfig+0x470>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	6713      	str	r3, [r2, #112]	; 0x70
 8001804:	e01c      	b.n	8001840 <HAL_RCC_OscConfig+0x324>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	2b05      	cmp	r3, #5
 800180c:	d10c      	bne.n	8001828 <HAL_RCC_OscConfig+0x30c>
 800180e:	4b5f      	ldr	r3, [pc, #380]	; (800198c <HAL_RCC_OscConfig+0x470>)
 8001810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001812:	4a5e      	ldr	r2, [pc, #376]	; (800198c <HAL_RCC_OscConfig+0x470>)
 8001814:	f043 0304 	orr.w	r3, r3, #4
 8001818:	6713      	str	r3, [r2, #112]	; 0x70
 800181a:	4b5c      	ldr	r3, [pc, #368]	; (800198c <HAL_RCC_OscConfig+0x470>)
 800181c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181e:	4a5b      	ldr	r2, [pc, #364]	; (800198c <HAL_RCC_OscConfig+0x470>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6713      	str	r3, [r2, #112]	; 0x70
 8001826:	e00b      	b.n	8001840 <HAL_RCC_OscConfig+0x324>
 8001828:	4b58      	ldr	r3, [pc, #352]	; (800198c <HAL_RCC_OscConfig+0x470>)
 800182a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182c:	4a57      	ldr	r2, [pc, #348]	; (800198c <HAL_RCC_OscConfig+0x470>)
 800182e:	f023 0301 	bic.w	r3, r3, #1
 8001832:	6713      	str	r3, [r2, #112]	; 0x70
 8001834:	4b55      	ldr	r3, [pc, #340]	; (800198c <HAL_RCC_OscConfig+0x470>)
 8001836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001838:	4a54      	ldr	r2, [pc, #336]	; (800198c <HAL_RCC_OscConfig+0x470>)
 800183a:	f023 0304 	bic.w	r3, r3, #4
 800183e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d015      	beq.n	8001874 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001848:	f7ff fbb4 	bl	8000fb4 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800184e:	e00a      	b.n	8001866 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001850:	f7ff fbb0 	bl	8000fb4 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	f241 3288 	movw	r2, #5000	; 0x1388
 800185e:	4293      	cmp	r3, r2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e0cb      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001866:	4b49      	ldr	r3, [pc, #292]	; (800198c <HAL_RCC_OscConfig+0x470>)
 8001868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0ee      	beq.n	8001850 <HAL_RCC_OscConfig+0x334>
 8001872:	e014      	b.n	800189e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001874:	f7ff fb9e 	bl	8000fb4 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800187a:	e00a      	b.n	8001892 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800187c:	f7ff fb9a 	bl	8000fb4 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	f241 3288 	movw	r2, #5000	; 0x1388
 800188a:	4293      	cmp	r3, r2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e0b5      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001892:	4b3e      	ldr	r3, [pc, #248]	; (800198c <HAL_RCC_OscConfig+0x470>)
 8001894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1ee      	bne.n	800187c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800189e:	7dfb      	ldrb	r3, [r7, #23]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d105      	bne.n	80018b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a4:	4b39      	ldr	r3, [pc, #228]	; (800198c <HAL_RCC_OscConfig+0x470>)
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	4a38      	ldr	r2, [pc, #224]	; (800198c <HAL_RCC_OscConfig+0x470>)
 80018aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 80a1 	beq.w	80019fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018ba:	4b34      	ldr	r3, [pc, #208]	; (800198c <HAL_RCC_OscConfig+0x470>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 030c 	and.w	r3, r3, #12
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	d05c      	beq.n	8001980 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d141      	bne.n	8001952 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ce:	4b31      	ldr	r3, [pc, #196]	; (8001994 <HAL_RCC_OscConfig+0x478>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d4:	f7ff fb6e 	bl	8000fb4 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018dc:	f7ff fb6a 	bl	8000fb4 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e087      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ee:	4b27      	ldr	r3, [pc, #156]	; (800198c <HAL_RCC_OscConfig+0x470>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f0      	bne.n	80018dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69da      	ldr	r2, [r3, #28]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	431a      	orrs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001908:	019b      	lsls	r3, r3, #6
 800190a:	431a      	orrs	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001910:	085b      	lsrs	r3, r3, #1
 8001912:	3b01      	subs	r3, #1
 8001914:	041b      	lsls	r3, r3, #16
 8001916:	431a      	orrs	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191c:	061b      	lsls	r3, r3, #24
 800191e:	491b      	ldr	r1, [pc, #108]	; (800198c <HAL_RCC_OscConfig+0x470>)
 8001920:	4313      	orrs	r3, r2
 8001922:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001924:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <HAL_RCC_OscConfig+0x478>)
 8001926:	2201      	movs	r2, #1
 8001928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192a:	f7ff fb43 	bl	8000fb4 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001932:	f7ff fb3f 	bl	8000fb4 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e05c      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001944:	4b11      	ldr	r3, [pc, #68]	; (800198c <HAL_RCC_OscConfig+0x470>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0f0      	beq.n	8001932 <HAL_RCC_OscConfig+0x416>
 8001950:	e054      	b.n	80019fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001952:	4b10      	ldr	r3, [pc, #64]	; (8001994 <HAL_RCC_OscConfig+0x478>)
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001958:	f7ff fb2c 	bl	8000fb4 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001960:	f7ff fb28 	bl	8000fb4 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e045      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <HAL_RCC_OscConfig+0x470>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1f0      	bne.n	8001960 <HAL_RCC_OscConfig+0x444>
 800197e:	e03d      	b.n	80019fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d107      	bne.n	8001998 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e038      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
 800198c:	40023800 	.word	0x40023800
 8001990:	40007000 	.word	0x40007000
 8001994:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001998:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <HAL_RCC_OscConfig+0x4ec>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d028      	beq.n	80019f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d121      	bne.n	80019f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019be:	429a      	cmp	r2, r3
 80019c0:	d11a      	bne.n	80019f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019c8:	4013      	ands	r3, r2
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d111      	bne.n	80019f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019de:	085b      	lsrs	r3, r3, #1
 80019e0:	3b01      	subs	r3, #1
 80019e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d107      	bne.n	80019f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d001      	beq.n	80019fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e000      	b.n	80019fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40023800 	.word	0x40023800

08001a0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e0cc      	b.n	8001bba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a20:	4b68      	ldr	r3, [pc, #416]	; (8001bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 030f 	and.w	r3, r3, #15
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d90c      	bls.n	8001a48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2e:	4b65      	ldr	r3, [pc, #404]	; (8001bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a36:	4b63      	ldr	r3, [pc, #396]	; (8001bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d001      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e0b8      	b.n	8001bba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d020      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d005      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a60:	4b59      	ldr	r3, [pc, #356]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	4a58      	ldr	r2, [pc, #352]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0308 	and.w	r3, r3, #8
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d005      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a78:	4b53      	ldr	r3, [pc, #332]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	4a52      	ldr	r2, [pc, #328]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a84:	4b50      	ldr	r3, [pc, #320]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	494d      	ldr	r1, [pc, #308]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d044      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d107      	bne.n	8001aba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aaa:	4b47      	ldr	r3, [pc, #284]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d119      	bne.n	8001aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e07f      	b.n	8001bba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d003      	beq.n	8001aca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ac6:	2b03      	cmp	r3, #3
 8001ac8:	d107      	bne.n	8001ada <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aca:	4b3f      	ldr	r3, [pc, #252]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d109      	bne.n	8001aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e06f      	b.n	8001bba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ada:	4b3b      	ldr	r3, [pc, #236]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e067      	b.n	8001bba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aea:	4b37      	ldr	r3, [pc, #220]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f023 0203 	bic.w	r2, r3, #3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	4934      	ldr	r1, [pc, #208]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001afc:	f7ff fa5a 	bl	8000fb4 <HAL_GetTick>
 8001b00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b02:	e00a      	b.n	8001b1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b04:	f7ff fa56 	bl	8000fb4 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e04f      	b.n	8001bba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1a:	4b2b      	ldr	r3, [pc, #172]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 020c 	and.w	r2, r3, #12
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d1eb      	bne.n	8001b04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b2c:	4b25      	ldr	r3, [pc, #148]	; (8001bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 030f 	and.w	r3, r3, #15
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d20c      	bcs.n	8001b54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3a:	4b22      	ldr	r3, [pc, #136]	; (8001bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b42:	4b20      	ldr	r3, [pc, #128]	; (8001bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d001      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e032      	b.n	8001bba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d008      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b60:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	4916      	ldr	r1, [pc, #88]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d009      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b7e:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	490e      	ldr	r1, [pc, #56]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b92:	f000 f821 	bl	8001bd8 <HAL_RCC_GetSysClockFreq>
 8001b96:	4602      	mov	r2, r0
 8001b98:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	091b      	lsrs	r3, r3, #4
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	490a      	ldr	r1, [pc, #40]	; (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001ba4:	5ccb      	ldrb	r3, [r1, r3]
 8001ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8001baa:	4a09      	ldr	r2, [pc, #36]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bae:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff f8f0 	bl	8000d98 <HAL_InitTick>

  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40023c00 	.word	0x40023c00
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	0800704c 	.word	0x0800704c
 8001bd0:	20000010 	.word	0x20000010
 8001bd4:	20000014 	.word	0x20000014

08001bd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bdc:	b094      	sub	sp, #80	; 0x50
 8001bde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001be0:	2300      	movs	r3, #0
 8001be2:	647b      	str	r3, [r7, #68]	; 0x44
 8001be4:	2300      	movs	r3, #0
 8001be6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001be8:	2300      	movs	r3, #0
 8001bea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bf0:	4b79      	ldr	r3, [pc, #484]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 030c 	and.w	r3, r3, #12
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d00d      	beq.n	8001c18 <HAL_RCC_GetSysClockFreq+0x40>
 8001bfc:	2b08      	cmp	r3, #8
 8001bfe:	f200 80e1 	bhi.w	8001dc4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d002      	beq.n	8001c0c <HAL_RCC_GetSysClockFreq+0x34>
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d003      	beq.n	8001c12 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c0a:	e0db      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c0c:	4b73      	ldr	r3, [pc, #460]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x204>)
 8001c0e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c10:	e0db      	b.n	8001dca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c12:	4b73      	ldr	r3, [pc, #460]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c16:	e0d8      	b.n	8001dca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c18:	4b6f      	ldr	r3, [pc, #444]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c20:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c22:	4b6d      	ldr	r3, [pc, #436]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d063      	beq.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c2e:	4b6a      	ldr	r3, [pc, #424]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	099b      	lsrs	r3, r3, #6
 8001c34:	2200      	movs	r2, #0
 8001c36:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c40:	633b      	str	r3, [r7, #48]	; 0x30
 8001c42:	2300      	movs	r3, #0
 8001c44:	637b      	str	r3, [r7, #52]	; 0x34
 8001c46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c4a:	4622      	mov	r2, r4
 8001c4c:	462b      	mov	r3, r5
 8001c4e:	f04f 0000 	mov.w	r0, #0
 8001c52:	f04f 0100 	mov.w	r1, #0
 8001c56:	0159      	lsls	r1, r3, #5
 8001c58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c5c:	0150      	lsls	r0, r2, #5
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	4621      	mov	r1, r4
 8001c64:	1a51      	subs	r1, r2, r1
 8001c66:	6139      	str	r1, [r7, #16]
 8001c68:	4629      	mov	r1, r5
 8001c6a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	f04f 0200 	mov.w	r2, #0
 8001c74:	f04f 0300 	mov.w	r3, #0
 8001c78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c7c:	4659      	mov	r1, fp
 8001c7e:	018b      	lsls	r3, r1, #6
 8001c80:	4651      	mov	r1, sl
 8001c82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c86:	4651      	mov	r1, sl
 8001c88:	018a      	lsls	r2, r1, #6
 8001c8a:	4651      	mov	r1, sl
 8001c8c:	ebb2 0801 	subs.w	r8, r2, r1
 8001c90:	4659      	mov	r1, fp
 8001c92:	eb63 0901 	sbc.w	r9, r3, r1
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	f04f 0300 	mov.w	r3, #0
 8001c9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ca2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ca6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001caa:	4690      	mov	r8, r2
 8001cac:	4699      	mov	r9, r3
 8001cae:	4623      	mov	r3, r4
 8001cb0:	eb18 0303 	adds.w	r3, r8, r3
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	462b      	mov	r3, r5
 8001cb8:	eb49 0303 	adc.w	r3, r9, r3
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	f04f 0300 	mov.w	r3, #0
 8001cc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cca:	4629      	mov	r1, r5
 8001ccc:	024b      	lsls	r3, r1, #9
 8001cce:	4621      	mov	r1, r4
 8001cd0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cd4:	4621      	mov	r1, r4
 8001cd6:	024a      	lsls	r2, r1, #9
 8001cd8:	4610      	mov	r0, r2
 8001cda:	4619      	mov	r1, r3
 8001cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cde:	2200      	movs	r2, #0
 8001ce0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ce2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ce4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ce8:	f7fe facc 	bl	8000284 <__aeabi_uldivmod>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cf4:	e058      	b.n	8001da8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cf6:	4b38      	ldr	r3, [pc, #224]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	099b      	lsrs	r3, r3, #6
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	4618      	mov	r0, r3
 8001d00:	4611      	mov	r1, r2
 8001d02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d06:	623b      	str	r3, [r7, #32]
 8001d08:	2300      	movs	r3, #0
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d10:	4642      	mov	r2, r8
 8001d12:	464b      	mov	r3, r9
 8001d14:	f04f 0000 	mov.w	r0, #0
 8001d18:	f04f 0100 	mov.w	r1, #0
 8001d1c:	0159      	lsls	r1, r3, #5
 8001d1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d22:	0150      	lsls	r0, r2, #5
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4641      	mov	r1, r8
 8001d2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d2e:	4649      	mov	r1, r9
 8001d30:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d34:	f04f 0200 	mov.w	r2, #0
 8001d38:	f04f 0300 	mov.w	r3, #0
 8001d3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d48:	ebb2 040a 	subs.w	r4, r2, sl
 8001d4c:	eb63 050b 	sbc.w	r5, r3, fp
 8001d50:	f04f 0200 	mov.w	r2, #0
 8001d54:	f04f 0300 	mov.w	r3, #0
 8001d58:	00eb      	lsls	r3, r5, #3
 8001d5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d5e:	00e2      	lsls	r2, r4, #3
 8001d60:	4614      	mov	r4, r2
 8001d62:	461d      	mov	r5, r3
 8001d64:	4643      	mov	r3, r8
 8001d66:	18e3      	adds	r3, r4, r3
 8001d68:	603b      	str	r3, [r7, #0]
 8001d6a:	464b      	mov	r3, r9
 8001d6c:	eb45 0303 	adc.w	r3, r5, r3
 8001d70:	607b      	str	r3, [r7, #4]
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	f04f 0300 	mov.w	r3, #0
 8001d7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d7e:	4629      	mov	r1, r5
 8001d80:	028b      	lsls	r3, r1, #10
 8001d82:	4621      	mov	r1, r4
 8001d84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d88:	4621      	mov	r1, r4
 8001d8a:	028a      	lsls	r2, r1, #10
 8001d8c:	4610      	mov	r0, r2
 8001d8e:	4619      	mov	r1, r3
 8001d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d92:	2200      	movs	r2, #0
 8001d94:	61bb      	str	r3, [r7, #24]
 8001d96:	61fa      	str	r2, [r7, #28]
 8001d98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d9c:	f7fe fa72 	bl	8000284 <__aeabi_uldivmod>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4613      	mov	r3, r2
 8001da6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001da8:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	0c1b      	lsrs	r3, r3, #16
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	3301      	adds	r3, #1
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001db8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dc2:	e002      	b.n	8001dca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x204>)
 8001dc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3750      	adds	r7, #80	; 0x50
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	00f42400 	.word	0x00f42400
 8001de0:	007a1200 	.word	0x007a1200

08001de4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001de8:	4b03      	ldr	r3, [pc, #12]	; (8001df8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dea:	681b      	ldr	r3, [r3, #0]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	20000010 	.word	0x20000010

08001dfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e00:	f7ff fff0 	bl	8001de4 <HAL_RCC_GetHCLKFreq>
 8001e04:	4602      	mov	r2, r0
 8001e06:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	0a9b      	lsrs	r3, r3, #10
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	4903      	ldr	r1, [pc, #12]	; (8001e20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e12:	5ccb      	ldrb	r3, [r1, r3]
 8001e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	0800705c 	.word	0x0800705c

08001e24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	220f      	movs	r2, #15
 8001e32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e34:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <HAL_RCC_GetClockConfig+0x5c>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f003 0203 	and.w	r2, r3, #3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e40:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <HAL_RCC_GetClockConfig+0x5c>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <HAL_RCC_GetClockConfig+0x5c>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e58:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <HAL_RCC_GetClockConfig+0x5c>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	08db      	lsrs	r3, r3, #3
 8001e5e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e66:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <HAL_RCC_GetClockConfig+0x60>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 020f 	and.w	r2, r3, #15
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	601a      	str	r2, [r3, #0]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40023c00 	.word	0x40023c00

08001e88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e041      	b.n	8001f1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d106      	bne.n	8001eb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f839 	bl	8001f26 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	f000 f9d8 	bl	800227c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
	...

08001f3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d001      	beq.n	8001f54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e04e      	b.n	8001ff2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2202      	movs	r2, #2
 8001f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68da      	ldr	r2, [r3, #12]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0201 	orr.w	r2, r2, #1
 8001f6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a23      	ldr	r2, [pc, #140]	; (8002000 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d022      	beq.n	8001fbc <HAL_TIM_Base_Start_IT+0x80>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f7e:	d01d      	beq.n	8001fbc <HAL_TIM_Base_Start_IT+0x80>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a1f      	ldr	r2, [pc, #124]	; (8002004 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d018      	beq.n	8001fbc <HAL_TIM_Base_Start_IT+0x80>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a1e      	ldr	r2, [pc, #120]	; (8002008 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d013      	beq.n	8001fbc <HAL_TIM_Base_Start_IT+0x80>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a1c      	ldr	r2, [pc, #112]	; (800200c <HAL_TIM_Base_Start_IT+0xd0>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d00e      	beq.n	8001fbc <HAL_TIM_Base_Start_IT+0x80>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a1b      	ldr	r2, [pc, #108]	; (8002010 <HAL_TIM_Base_Start_IT+0xd4>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d009      	beq.n	8001fbc <HAL_TIM_Base_Start_IT+0x80>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a19      	ldr	r2, [pc, #100]	; (8002014 <HAL_TIM_Base_Start_IT+0xd8>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d004      	beq.n	8001fbc <HAL_TIM_Base_Start_IT+0x80>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a18      	ldr	r2, [pc, #96]	; (8002018 <HAL_TIM_Base_Start_IT+0xdc>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d111      	bne.n	8001fe0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2b06      	cmp	r3, #6
 8001fcc:	d010      	beq.n	8001ff0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f042 0201 	orr.w	r2, r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fde:	e007      	b.n	8001ff0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f042 0201 	orr.w	r2, r2, #1
 8001fee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40010000 	.word	0x40010000
 8002004:	40000400 	.word	0x40000400
 8002008:	40000800 	.word	0x40000800
 800200c:	40000c00 	.word	0x40000c00
 8002010:	40010400 	.word	0x40010400
 8002014:	40014000 	.word	0x40014000
 8002018:	40001800 	.word	0x40001800

0800201c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b02      	cmp	r3, #2
 8002030:	d122      	bne.n	8002078 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b02      	cmp	r3, #2
 800203e:	d11b      	bne.n	8002078 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f06f 0202 	mvn.w	r2, #2
 8002048:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f8ee 	bl	8002240 <HAL_TIM_IC_CaptureCallback>
 8002064:	e005      	b.n	8002072 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f8e0 	bl	800222c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f8f1 	bl	8002254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	2b04      	cmp	r3, #4
 8002084:	d122      	bne.n	80020cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	2b04      	cmp	r3, #4
 8002092:	d11b      	bne.n	80020cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f06f 0204 	mvn.w	r2, #4
 800209c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2202      	movs	r2, #2
 80020a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f8c4 	bl	8002240 <HAL_TIM_IC_CaptureCallback>
 80020b8:	e005      	b.n	80020c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f8b6 	bl	800222c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 f8c7 	bl	8002254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	f003 0308 	and.w	r3, r3, #8
 80020d6:	2b08      	cmp	r3, #8
 80020d8:	d122      	bne.n	8002120 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d11b      	bne.n	8002120 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f06f 0208 	mvn.w	r2, #8
 80020f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2204      	movs	r2, #4
 80020f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f89a 	bl	8002240 <HAL_TIM_IC_CaptureCallback>
 800210c:	e005      	b.n	800211a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f88c 	bl	800222c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f89d 	bl	8002254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	f003 0310 	and.w	r3, r3, #16
 800212a:	2b10      	cmp	r3, #16
 800212c:	d122      	bne.n	8002174 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	2b10      	cmp	r3, #16
 800213a:	d11b      	bne.n	8002174 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f06f 0210 	mvn.w	r2, #16
 8002144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2208      	movs	r2, #8
 800214a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f870 	bl	8002240 <HAL_TIM_IC_CaptureCallback>
 8002160:	e005      	b.n	800216e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f862 	bl	800222c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f873 	bl	8002254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b01      	cmp	r3, #1
 8002180:	d10e      	bne.n	80021a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b01      	cmp	r3, #1
 800218e:	d107      	bne.n	80021a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f06f 0201 	mvn.w	r2, #1
 8002198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7fe fdbc 	bl	8000d18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021aa:	2b80      	cmp	r3, #128	; 0x80
 80021ac:	d10e      	bne.n	80021cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b8:	2b80      	cmp	r3, #128	; 0x80
 80021ba:	d107      	bne.n	80021cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f902 	bl	80023d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d6:	2b40      	cmp	r3, #64	; 0x40
 80021d8:	d10e      	bne.n	80021f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e4:	2b40      	cmp	r3, #64	; 0x40
 80021e6:	d107      	bne.n	80021f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f838 	bl	8002268 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	f003 0320 	and.w	r3, r3, #32
 8002202:	2b20      	cmp	r3, #32
 8002204:	d10e      	bne.n	8002224 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	f003 0320 	and.w	r3, r3, #32
 8002210:	2b20      	cmp	r3, #32
 8002212:	d107      	bne.n	8002224 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f06f 0220 	mvn.w	r2, #32
 800221c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f8cc 	bl	80023bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002224:	bf00      	nop
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a40      	ldr	r2, [pc, #256]	; (8002390 <TIM_Base_SetConfig+0x114>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d013      	beq.n	80022bc <TIM_Base_SetConfig+0x40>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800229a:	d00f      	beq.n	80022bc <TIM_Base_SetConfig+0x40>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a3d      	ldr	r2, [pc, #244]	; (8002394 <TIM_Base_SetConfig+0x118>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d00b      	beq.n	80022bc <TIM_Base_SetConfig+0x40>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a3c      	ldr	r2, [pc, #240]	; (8002398 <TIM_Base_SetConfig+0x11c>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d007      	beq.n	80022bc <TIM_Base_SetConfig+0x40>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a3b      	ldr	r2, [pc, #236]	; (800239c <TIM_Base_SetConfig+0x120>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d003      	beq.n	80022bc <TIM_Base_SetConfig+0x40>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a3a      	ldr	r2, [pc, #232]	; (80023a0 <TIM_Base_SetConfig+0x124>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d108      	bne.n	80022ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a2f      	ldr	r2, [pc, #188]	; (8002390 <TIM_Base_SetConfig+0x114>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d02b      	beq.n	800232e <TIM_Base_SetConfig+0xb2>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022dc:	d027      	beq.n	800232e <TIM_Base_SetConfig+0xb2>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a2c      	ldr	r2, [pc, #176]	; (8002394 <TIM_Base_SetConfig+0x118>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d023      	beq.n	800232e <TIM_Base_SetConfig+0xb2>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a2b      	ldr	r2, [pc, #172]	; (8002398 <TIM_Base_SetConfig+0x11c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d01f      	beq.n	800232e <TIM_Base_SetConfig+0xb2>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a2a      	ldr	r2, [pc, #168]	; (800239c <TIM_Base_SetConfig+0x120>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d01b      	beq.n	800232e <TIM_Base_SetConfig+0xb2>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a29      	ldr	r2, [pc, #164]	; (80023a0 <TIM_Base_SetConfig+0x124>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d017      	beq.n	800232e <TIM_Base_SetConfig+0xb2>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a28      	ldr	r2, [pc, #160]	; (80023a4 <TIM_Base_SetConfig+0x128>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d013      	beq.n	800232e <TIM_Base_SetConfig+0xb2>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a27      	ldr	r2, [pc, #156]	; (80023a8 <TIM_Base_SetConfig+0x12c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d00f      	beq.n	800232e <TIM_Base_SetConfig+0xb2>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a26      	ldr	r2, [pc, #152]	; (80023ac <TIM_Base_SetConfig+0x130>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d00b      	beq.n	800232e <TIM_Base_SetConfig+0xb2>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a25      	ldr	r2, [pc, #148]	; (80023b0 <TIM_Base_SetConfig+0x134>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d007      	beq.n	800232e <TIM_Base_SetConfig+0xb2>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a24      	ldr	r2, [pc, #144]	; (80023b4 <TIM_Base_SetConfig+0x138>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d003      	beq.n	800232e <TIM_Base_SetConfig+0xb2>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a23      	ldr	r2, [pc, #140]	; (80023b8 <TIM_Base_SetConfig+0x13c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d108      	bne.n	8002340 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	4313      	orrs	r3, r2
 800233e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	4313      	orrs	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a0a      	ldr	r2, [pc, #40]	; (8002390 <TIM_Base_SetConfig+0x114>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d003      	beq.n	8002374 <TIM_Base_SetConfig+0xf8>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a0c      	ldr	r2, [pc, #48]	; (80023a0 <TIM_Base_SetConfig+0x124>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d103      	bne.n	800237c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	691a      	ldr	r2, [r3, #16]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	615a      	str	r2, [r3, #20]
}
 8002382:	bf00      	nop
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	40010000 	.word	0x40010000
 8002394:	40000400 	.word	0x40000400
 8002398:	40000800 	.word	0x40000800
 800239c:	40000c00 	.word	0x40000c00
 80023a0:	40010400 	.word	0x40010400
 80023a4:	40014000 	.word	0x40014000
 80023a8:	40014400 	.word	0x40014400
 80023ac:	40014800 	.word	0x40014800
 80023b0:	40001800 	.word	0x40001800
 80023b4:	40001c00 	.word	0x40001c00
 80023b8:	40002000 	.word	0x40002000

080023bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f103 0208 	add.w	r2, r3, #8
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f04f 32ff 	mov.w	r2, #4294967295
 80023fc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f103 0208 	add.w	r2, r3, #8
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f103 0208 	add.w	r2, r3, #8
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800243e:	b480      	push	{r7}
 8002440:	b085      	sub	sp, #20
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
 8002446:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	1c5a      	adds	r2, r3, #1
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	601a      	str	r2, [r3, #0]
}
 800247a:	bf00      	nop
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002486:	b480      	push	{r7}
 8002488:	b085      	sub	sp, #20
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
 800248e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800249c:	d103      	bne.n	80024a6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	e00c      	b.n	80024c0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3308      	adds	r3, #8
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	e002      	b.n	80024b4 <vListInsert+0x2e>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d2f6      	bcs.n	80024ae <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	601a      	str	r2, [r3, #0]
}
 80024ec:	bf00      	nop
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6892      	ldr	r2, [r2, #8]
 800250e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	6852      	ldr	r2, [r2, #4]
 8002518:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	429a      	cmp	r2, r3
 8002522:	d103      	bne.n	800252c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	1e5a      	subs	r2, r3, #1
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10a      	bne.n	8002576 <xQueueGenericReset+0x2a>
        __asm volatile
 8002560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002564:	f383 8811 	msr	BASEPRI, r3
 8002568:	f3bf 8f6f 	isb	sy
 800256c:	f3bf 8f4f 	dsb	sy
 8002570:	60bb      	str	r3, [r7, #8]
    }
 8002572:	bf00      	nop
 8002574:	e7fe      	b.n	8002574 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002576:	f002 faf7 	bl	8004b68 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002582:	68f9      	ldr	r1, [r7, #12]
 8002584:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002586:	fb01 f303 	mul.w	r3, r1, r3
 800258a:	441a      	add	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a6:	3b01      	subs	r3, #1
 80025a8:	68f9      	ldr	r1, [r7, #12]
 80025aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025ac:	fb01 f303 	mul.w	r3, r1, r3
 80025b0:	441a      	add	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	22ff      	movs	r2, #255	; 0xff
 80025ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	22ff      	movs	r2, #255	; 0xff
 80025c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d114      	bne.n	80025f6 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d01a      	beq.n	800260a <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	3310      	adds	r3, #16
 80025d8:	4618      	mov	r0, r3
 80025da:	f001 faab 	bl	8003b34 <xTaskRemoveFromEventList>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d012      	beq.n	800260a <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80025e4:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <xQueueGenericReset+0xcc>)
 80025e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	f3bf 8f4f 	dsb	sy
 80025f0:	f3bf 8f6f 	isb	sy
 80025f4:	e009      	b.n	800260a <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	3310      	adds	r3, #16
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff fef2 	bl	80023e4 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	3324      	adds	r3, #36	; 0x24
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff feed 	bl	80023e4 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800260a:	f002 fadd 	bl	8004bc8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800260e:	2301      	movs	r3, #1
}
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	e000ed04 	.word	0xe000ed04

0800261c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800261c:	b580      	push	{r7, lr}
 800261e:	b08c      	sub	sp, #48	; 0x30
 8002620:	af02      	add	r7, sp, #8
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	4613      	mov	r3, r2
 8002628:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10a      	bne.n	8002646 <xQueueGenericCreate+0x2a>
        __asm volatile
 8002630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002634:	f383 8811 	msr	BASEPRI, r3
 8002638:	f3bf 8f6f 	isb	sy
 800263c:	f3bf 8f4f 	dsb	sy
 8002640:	61bb      	str	r3, [r7, #24]
    }
 8002642:	bf00      	nop
 8002644:	e7fe      	b.n	8002644 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	68ba      	ldr	r2, [r7, #8]
 800264a:	fb02 f303 	mul.w	r3, r2, r3
 800264e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d006      	beq.n	8002664 <xQueueGenericCreate+0x48>
 8002656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	fbb2 f3f3 	udiv	r3, r2, r3
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	429a      	cmp	r2, r3
 8002662:	d101      	bne.n	8002668 <xQueueGenericCreate+0x4c>
 8002664:	2301      	movs	r3, #1
 8002666:	e000      	b.n	800266a <xQueueGenericCreate+0x4e>
 8002668:	2300      	movs	r3, #0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10a      	bne.n	8002684 <xQueueGenericCreate+0x68>
        __asm volatile
 800266e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002672:	f383 8811 	msr	BASEPRI, r3
 8002676:	f3bf 8f6f 	isb	sy
 800267a:	f3bf 8f4f 	dsb	sy
 800267e:	617b      	str	r3, [r7, #20]
    }
 8002680:	bf00      	nop
 8002682:	e7fe      	b.n	8002682 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800268a:	d90a      	bls.n	80026a2 <xQueueGenericCreate+0x86>
        __asm volatile
 800268c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002690:	f383 8811 	msr	BASEPRI, r3
 8002694:	f3bf 8f6f 	isb	sy
 8002698:	f3bf 8f4f 	dsb	sy
 800269c:	613b      	str	r3, [r7, #16]
    }
 800269e:	bf00      	nop
 80026a0:	e7fe      	b.n	80026a0 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	3350      	adds	r3, #80	; 0x50
 80026a6:	4618      	mov	r0, r3
 80026a8:	f002 fb88 	bl	8004dbc <pvPortMalloc>
 80026ac:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00d      	beq.n	80026d0 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80026b4:	6a3b      	ldr	r3, [r7, #32]
 80026b6:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	3350      	adds	r3, #80	; 0x50
 80026bc:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80026be:	79fa      	ldrb	r2, [r7, #7]
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	4613      	mov	r3, r2
 80026c6:	69fa      	ldr	r2, [r7, #28]
 80026c8:	68b9      	ldr	r1, [r7, #8]
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 f805 	bl	80026da <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80026d0:	6a3b      	ldr	r3, [r7, #32]
    }
 80026d2:	4618      	mov	r0, r3
 80026d4:	3728      	adds	r7, #40	; 0x28
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b084      	sub	sp, #16
 80026de:	af00      	add	r7, sp, #0
 80026e0:	60f8      	str	r0, [r7, #12]
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	607a      	str	r2, [r7, #4]
 80026e6:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d103      	bne.n	80026f6 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	e002      	b.n	80026fc <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002708:	2101      	movs	r1, #1
 800270a:	69b8      	ldr	r0, [r7, #24]
 800270c:	f7ff ff1e 	bl	800254c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	78fa      	ldrb	r2, [r7, #3]
 8002714:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002718:	78fb      	ldrb	r3, [r7, #3]
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	68f9      	ldr	r1, [r7, #12]
 800271e:	2073      	movs	r0, #115	; 0x73
 8002720:	f003 fb6c 	bl	8005dfc <SEGGER_SYSVIEW_RecordU32x3>
}
 8002724:	bf00      	nop
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b090      	sub	sp, #64	; 0x40
 8002730:	af02      	add	r7, sp, #8
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
 8002738:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800273a:	2300      	movs	r3, #0
 800273c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10a      	bne.n	800275e <xQueueGenericSend+0x32>
        __asm volatile
 8002748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800274c:	f383 8811 	msr	BASEPRI, r3
 8002750:	f3bf 8f6f 	isb	sy
 8002754:	f3bf 8f4f 	dsb	sy
 8002758:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800275a:	bf00      	nop
 800275c:	e7fe      	b.n	800275c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d103      	bne.n	800276c <xQueueGenericSend+0x40>
 8002764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <xQueueGenericSend+0x44>
 800276c:	2301      	movs	r3, #1
 800276e:	e000      	b.n	8002772 <xQueueGenericSend+0x46>
 8002770:	2300      	movs	r3, #0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10a      	bne.n	800278c <xQueueGenericSend+0x60>
        __asm volatile
 8002776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277a:	f383 8811 	msr	BASEPRI, r3
 800277e:	f3bf 8f6f 	isb	sy
 8002782:	f3bf 8f4f 	dsb	sy
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002788:	bf00      	nop
 800278a:	e7fe      	b.n	800278a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d103      	bne.n	800279a <xQueueGenericSend+0x6e>
 8002792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <xQueueGenericSend+0x72>
 800279a:	2301      	movs	r3, #1
 800279c:	e000      	b.n	80027a0 <xQueueGenericSend+0x74>
 800279e:	2300      	movs	r3, #0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10a      	bne.n	80027ba <xQueueGenericSend+0x8e>
        __asm volatile
 80027a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a8:	f383 8811 	msr	BASEPRI, r3
 80027ac:	f3bf 8f6f 	isb	sy
 80027b0:	f3bf 8f4f 	dsb	sy
 80027b4:	623b      	str	r3, [r7, #32]
    }
 80027b6:	bf00      	nop
 80027b8:	e7fe      	b.n	80027b8 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027ba:	f001 fb5b 	bl	8003e74 <xTaskGetSchedulerState>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d102      	bne.n	80027ca <xQueueGenericSend+0x9e>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <xQueueGenericSend+0xa2>
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <xQueueGenericSend+0xa4>
 80027ce:	2300      	movs	r3, #0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10a      	bne.n	80027ea <xQueueGenericSend+0xbe>
        __asm volatile
 80027d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d8:	f383 8811 	msr	BASEPRI, r3
 80027dc:	f3bf 8f6f 	isb	sy
 80027e0:	f3bf 8f4f 	dsb	sy
 80027e4:	61fb      	str	r3, [r7, #28]
    }
 80027e6:	bf00      	nop
 80027e8:	e7fe      	b.n	80027e8 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80027ea:	f002 f9bd 	bl	8004b68 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d302      	bcc.n	8002800 <xQueueGenericSend+0xd4>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d136      	bne.n	800286e <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8002800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002802:	4618      	mov	r0, r3
 8002804:	f004 f886 	bl	8006914 <SEGGER_SYSVIEW_ShrinkId>
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	460b      	mov	r3, r1
 8002812:	4601      	mov	r1, r0
 8002814:	205a      	movs	r0, #90	; 0x5a
 8002816:	f003 fb67 	bl	8005ee8 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	68b9      	ldr	r1, [r7, #8]
 800281e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002820:	f000 fbcc 	bl	8002fbc <prvCopyDataToQueue>
 8002824:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	2b00      	cmp	r3, #0
 800282c:	d010      	beq.n	8002850 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800282e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002830:	3324      	adds	r3, #36	; 0x24
 8002832:	4618      	mov	r0, r3
 8002834:	f001 f97e 	bl	8003b34 <xTaskRemoveFromEventList>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d013      	beq.n	8002866 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800283e:	4b4d      	ldr	r3, [pc, #308]	; (8002974 <xQueueGenericSend+0x248>)
 8002840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	f3bf 8f4f 	dsb	sy
 800284a:	f3bf 8f6f 	isb	sy
 800284e:	e00a      	b.n	8002866 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002852:	2b00      	cmp	r3, #0
 8002854:	d007      	beq.n	8002866 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002856:	4b47      	ldr	r3, [pc, #284]	; (8002974 <xQueueGenericSend+0x248>)
 8002858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	f3bf 8f4f 	dsb	sy
 8002862:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002866:	f002 f9af 	bl	8004bc8 <vPortExitCritical>
                return pdPASS;
 800286a:	2301      	movs	r3, #1
 800286c:	e07d      	b.n	800296a <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d110      	bne.n	8002896 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002874:	f002 f9a8 	bl	8004bc8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800287a:	4618      	mov	r0, r3
 800287c:	f004 f84a 	bl	8006914 <SEGGER_SYSVIEW_ShrinkId>
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	460b      	mov	r3, r1
 800288a:	4601      	mov	r1, r0
 800288c:	205a      	movs	r0, #90	; 0x5a
 800288e:	f003 fb2b 	bl	8005ee8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002892:	2300      	movs	r3, #0
 8002894:	e069      	b.n	800296a <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002898:	2b00      	cmp	r3, #0
 800289a:	d106      	bne.n	80028aa <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800289c:	f107 0314 	add.w	r3, r7, #20
 80028a0:	4618      	mov	r0, r3
 80028a2:	f001 f9ad 	bl	8003c00 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80028a6:	2301      	movs	r3, #1
 80028a8:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80028aa:	f002 f98d 	bl	8004bc8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80028ae:	f000 fef9 	bl	80036a4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80028b2:	f002 f959 	bl	8004b68 <vPortEnterCritical>
 80028b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028bc:	b25b      	sxtb	r3, r3
 80028be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c2:	d103      	bne.n	80028cc <xQueueGenericSend+0x1a0>
 80028c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028d2:	b25b      	sxtb	r3, r3
 80028d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d8:	d103      	bne.n	80028e2 <xQueueGenericSend+0x1b6>
 80028da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028e2:	f002 f971 	bl	8004bc8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028e6:	1d3a      	adds	r2, r7, #4
 80028e8:	f107 0314 	add.w	r3, r7, #20
 80028ec:	4611      	mov	r1, r2
 80028ee:	4618      	mov	r0, r3
 80028f0:	f001 f99c 	bl	8003c2c <xTaskCheckForTimeOut>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d124      	bne.n	8002944 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80028fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028fc:	f000 fc56 	bl	80031ac <prvIsQueueFull>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d018      	beq.n	8002938 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002908:	3310      	adds	r3, #16
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	4611      	mov	r1, r2
 800290e:	4618      	mov	r0, r3
 8002910:	f001 f8be 	bl	8003a90 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002914:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002916:	f000 fbe1 	bl	80030dc <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800291a:	f000 fed1 	bl	80036c0 <xTaskResumeAll>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	f47f af62 	bne.w	80027ea <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002926:	4b13      	ldr	r3, [pc, #76]	; (8002974 <xQueueGenericSend+0x248>)
 8002928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	f3bf 8f4f 	dsb	sy
 8002932:	f3bf 8f6f 	isb	sy
 8002936:	e758      	b.n	80027ea <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002938:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800293a:	f000 fbcf 	bl	80030dc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800293e:	f000 febf 	bl	80036c0 <xTaskResumeAll>
 8002942:	e752      	b.n	80027ea <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002944:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002946:	f000 fbc9 	bl	80030dc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800294a:	f000 feb9 	bl	80036c0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 800294e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002950:	4618      	mov	r0, r3
 8002952:	f003 ffdf 	bl	8006914 <SEGGER_SYSVIEW_ShrinkId>
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	460b      	mov	r3, r1
 8002960:	4601      	mov	r1, r0
 8002962:	205a      	movs	r0, #90	; 0x5a
 8002964:	f003 fac0 	bl	8005ee8 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002968:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800296a:	4618      	mov	r0, r3
 800296c:	3738      	adds	r7, #56	; 0x38
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	e000ed04 	.word	0xe000ed04

08002978 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b090      	sub	sp, #64	; 0x40
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
 8002984:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800298a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10a      	bne.n	80029a6 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002994:	f383 8811 	msr	BASEPRI, r3
 8002998:	f3bf 8f6f 	isb	sy
 800299c:	f3bf 8f4f 	dsb	sy
 80029a0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80029a2:	bf00      	nop
 80029a4:	e7fe      	b.n	80029a4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d103      	bne.n	80029b4 <xQueueGenericSendFromISR+0x3c>
 80029ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <xQueueGenericSendFromISR+0x40>
 80029b4:	2301      	movs	r3, #1
 80029b6:	e000      	b.n	80029ba <xQueueGenericSendFromISR+0x42>
 80029b8:	2300      	movs	r3, #0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10a      	bne.n	80029d4 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80029be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c2:	f383 8811 	msr	BASEPRI, r3
 80029c6:	f3bf 8f6f 	isb	sy
 80029ca:	f3bf 8f4f 	dsb	sy
 80029ce:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80029d0:	bf00      	nop
 80029d2:	e7fe      	b.n	80029d2 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d103      	bne.n	80029e2 <xQueueGenericSendFromISR+0x6a>
 80029da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d101      	bne.n	80029e6 <xQueueGenericSendFromISR+0x6e>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <xQueueGenericSendFromISR+0x70>
 80029e6:	2300      	movs	r3, #0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10a      	bne.n	8002a02 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80029ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f0:	f383 8811 	msr	BASEPRI, r3
 80029f4:	f3bf 8f6f 	isb	sy
 80029f8:	f3bf 8f4f 	dsb	sy
 80029fc:	623b      	str	r3, [r7, #32]
    }
 80029fe:	bf00      	nop
 8002a00:	e7fe      	b.n	8002a00 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a02:	f002 f99b 	bl	8004d3c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002a06:	f3ef 8211 	mrs	r2, BASEPRI
 8002a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a0e:	f383 8811 	msr	BASEPRI, r3
 8002a12:	f3bf 8f6f 	isb	sy
 8002a16:	f3bf 8f4f 	dsb	sy
 8002a1a:	61fa      	str	r2, [r7, #28]
 8002a1c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002a1e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a20:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d302      	bcc.n	8002a34 <xQueueGenericSendFromISR+0xbc>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d148      	bne.n	8002ac6 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a42:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a46:	4618      	mov	r0, r3
 8002a48:	f003 ff64 	bl	8006914 <SEGGER_SYSVIEW_ShrinkId>
 8002a4c:	4601      	mov	r1, r0
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	461a      	mov	r2, r3
 8002a52:	2060      	movs	r0, #96	; 0x60
 8002a54:	f003 f978 	bl	8005d48 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	68b9      	ldr	r1, [r7, #8]
 8002a5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a5e:	f000 faad 	bl	8002fbc <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002a62:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6a:	d112      	bne.n	8002a92 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d025      	beq.n	8002ac0 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a76:	3324      	adds	r3, #36	; 0x24
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f001 f85b 	bl	8003b34 <xTaskRemoveFromEventList>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d01d      	beq.n	8002ac0 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d01a      	beq.n	8002ac0 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	e016      	b.n	8002ac0 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002a92:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002a96:	2b7f      	cmp	r3, #127	; 0x7f
 8002a98:	d10a      	bne.n	8002ab0 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9e:	f383 8811 	msr	BASEPRI, r3
 8002aa2:	f3bf 8f6f 	isb	sy
 8002aa6:	f3bf 8f4f 	dsb	sy
 8002aaa:	617b      	str	r3, [r7, #20]
    }
 8002aac:	bf00      	nop
 8002aae:	e7fe      	b.n	8002aae <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002ab0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	b25a      	sxtb	r2, r3
 8002aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002ac4:	e00b      	b.n	8002ade <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f003 ff23 	bl	8006914 <SEGGER_SYSVIEW_ShrinkId>
 8002ace:	4601      	mov	r1, r0
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	2060      	movs	r0, #96	; 0x60
 8002ad6:	f003 f937 	bl	8005d48 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae0:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002ae8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3740      	adds	r7, #64	; 0x40
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002af4:	b590      	push	{r4, r7, lr}
 8002af6:	b08f      	sub	sp, #60	; 0x3c
 8002af8:	af02      	add	r7, sp, #8
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002b00:	2300      	movs	r3, #0
 8002b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10a      	bne.n	8002b24 <xQueueReceive+0x30>
        __asm volatile
 8002b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b12:	f383 8811 	msr	BASEPRI, r3
 8002b16:	f3bf 8f6f 	isb	sy
 8002b1a:	f3bf 8f4f 	dsb	sy
 8002b1e:	623b      	str	r3, [r7, #32]
    }
 8002b20:	bf00      	nop
 8002b22:	e7fe      	b.n	8002b22 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d103      	bne.n	8002b32 <xQueueReceive+0x3e>
 8002b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <xQueueReceive+0x42>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <xQueueReceive+0x44>
 8002b36:	2300      	movs	r3, #0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10a      	bne.n	8002b52 <xQueueReceive+0x5e>
        __asm volatile
 8002b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b40:	f383 8811 	msr	BASEPRI, r3
 8002b44:	f3bf 8f6f 	isb	sy
 8002b48:	f3bf 8f4f 	dsb	sy
 8002b4c:	61fb      	str	r3, [r7, #28]
    }
 8002b4e:	bf00      	nop
 8002b50:	e7fe      	b.n	8002b50 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b52:	f001 f98f 	bl	8003e74 <xTaskGetSchedulerState>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d102      	bne.n	8002b62 <xQueueReceive+0x6e>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <xQueueReceive+0x72>
 8002b62:	2301      	movs	r3, #1
 8002b64:	e000      	b.n	8002b68 <xQueueReceive+0x74>
 8002b66:	2300      	movs	r3, #0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10a      	bne.n	8002b82 <xQueueReceive+0x8e>
        __asm volatile
 8002b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b70:	f383 8811 	msr	BASEPRI, r3
 8002b74:	f3bf 8f6f 	isb	sy
 8002b78:	f3bf 8f4f 	dsb	sy
 8002b7c:	61bb      	str	r3, [r7, #24]
    }
 8002b7e:	bf00      	nop
 8002b80:	e7fe      	b.n	8002b80 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002b82:	f001 fff1 	bl	8004b68 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d02f      	beq.n	8002bf2 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b92:	68b9      	ldr	r1, [r7, #8]
 8002b94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b96:	f000 fa7b 	bl	8003090 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f003 feb9 	bl	8006914 <SEGGER_SYSVIEW_ShrinkId>
 8002ba2:	4604      	mov	r4, r0
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	f003 feb5 	bl	8006914 <SEGGER_SYSVIEW_ShrinkId>
 8002baa:	4602      	mov	r2, r0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2101      	movs	r1, #1
 8002bb0:	9100      	str	r1, [sp, #0]
 8002bb2:	4621      	mov	r1, r4
 8002bb4:	205c      	movs	r0, #92	; 0x5c
 8002bb6:	f003 f997 	bl	8005ee8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	1e5a      	subs	r2, r3, #1
 8002bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00f      	beq.n	8002bea <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bcc:	3310      	adds	r3, #16
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f000 ffb0 	bl	8003b34 <xTaskRemoveFromEventList>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d007      	beq.n	8002bea <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002bda:	4b4d      	ldr	r3, [pc, #308]	; (8002d10 <xQueueReceive+0x21c>)
 8002bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	f3bf 8f4f 	dsb	sy
 8002be6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002bea:	f001 ffed 	bl	8004bc8 <vPortExitCritical>
                return pdPASS;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e08a      	b.n	8002d08 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d113      	bne.n	8002c20 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002bf8:	f001 ffe6 	bl	8004bc8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f003 fe88 	bl	8006914 <SEGGER_SYSVIEW_ShrinkId>
 8002c04:	4604      	mov	r4, r0
 8002c06:	2000      	movs	r0, #0
 8002c08:	f003 fe84 	bl	8006914 <SEGGER_SYSVIEW_ShrinkId>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2101      	movs	r1, #1
 8002c12:	9100      	str	r1, [sp, #0]
 8002c14:	4621      	mov	r1, r4
 8002c16:	205c      	movs	r0, #92	; 0x5c
 8002c18:	f003 f966 	bl	8005ee8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	e073      	b.n	8002d08 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d106      	bne.n	8002c34 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002c26:	f107 0310 	add.w	r3, r7, #16
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 ffe8 	bl	8003c00 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002c30:	2301      	movs	r3, #1
 8002c32:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002c34:	f001 ffc8 	bl	8004bc8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002c38:	f000 fd34 	bl	80036a4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002c3c:	f001 ff94 	bl	8004b68 <vPortEnterCritical>
 8002c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c46:	b25b      	sxtb	r3, r3
 8002c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4c:	d103      	bne.n	8002c56 <xQueueReceive+0x162>
 8002c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c5c:	b25b      	sxtb	r3, r3
 8002c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c62:	d103      	bne.n	8002c6c <xQueueReceive+0x178>
 8002c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c6c:	f001 ffac 	bl	8004bc8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c70:	1d3a      	adds	r2, r7, #4
 8002c72:	f107 0310 	add.w	r3, r7, #16
 8002c76:	4611      	mov	r1, r2
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 ffd7 	bl	8003c2c <xTaskCheckForTimeOut>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d124      	bne.n	8002cce <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c86:	f000 fa7b 	bl	8003180 <prvIsQueueEmpty>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d018      	beq.n	8002cc2 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c92:	3324      	adds	r3, #36	; 0x24
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	4611      	mov	r1, r2
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f000 fef9 	bl	8003a90 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002c9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ca0:	f000 fa1c 	bl	80030dc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002ca4:	f000 fd0c 	bl	80036c0 <xTaskResumeAll>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f47f af69 	bne.w	8002b82 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002cb0:	4b17      	ldr	r3, [pc, #92]	; (8002d10 <xQueueReceive+0x21c>)
 8002cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	f3bf 8f6f 	isb	sy
 8002cc0:	e75f      	b.n	8002b82 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002cc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cc4:	f000 fa0a 	bl	80030dc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002cc8:	f000 fcfa 	bl	80036c0 <xTaskResumeAll>
 8002ccc:	e759      	b.n	8002b82 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002cce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cd0:	f000 fa04 	bl	80030dc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002cd4:	f000 fcf4 	bl	80036c0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002cd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cda:	f000 fa51 	bl	8003180 <prvIsQueueEmpty>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f43f af4e 	beq.w	8002b82 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f003 fe13 	bl	8006914 <SEGGER_SYSVIEW_ShrinkId>
 8002cee:	4604      	mov	r4, r0
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	f003 fe0f 	bl	8006914 <SEGGER_SYSVIEW_ShrinkId>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	9100      	str	r1, [sp, #0]
 8002cfe:	4621      	mov	r1, r4
 8002d00:	205c      	movs	r0, #92	; 0x5c
 8002d02:	f003 f8f1 	bl	8005ee8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002d06:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3734      	adds	r7, #52	; 0x34
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd90      	pop	{r4, r7, pc}
 8002d10:	e000ed04 	.word	0xe000ed04

08002d14 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8002d14:	b590      	push	{r4, r7, lr}
 8002d16:	b091      	sub	sp, #68	; 0x44
 8002d18:	af02      	add	r7, sp, #8
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8002d26:	2300      	movs	r3, #0
 8002d28:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10a      	bne.n	8002d46 <xQueueSemaphoreTake+0x32>
        __asm volatile
 8002d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d34:	f383 8811 	msr	BASEPRI, r3
 8002d38:	f3bf 8f6f 	isb	sy
 8002d3c:	f3bf 8f4f 	dsb	sy
 8002d40:	623b      	str	r3, [r7, #32]
    }
 8002d42:	bf00      	nop
 8002d44:	e7fe      	b.n	8002d44 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8002d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00a      	beq.n	8002d64 <xQueueSemaphoreTake+0x50>
        __asm volatile
 8002d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d52:	f383 8811 	msr	BASEPRI, r3
 8002d56:	f3bf 8f6f 	isb	sy
 8002d5a:	f3bf 8f4f 	dsb	sy
 8002d5e:	61fb      	str	r3, [r7, #28]
    }
 8002d60:	bf00      	nop
 8002d62:	e7fe      	b.n	8002d62 <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d64:	f001 f886 	bl	8003e74 <xTaskGetSchedulerState>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d102      	bne.n	8002d74 <xQueueSemaphoreTake+0x60>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <xQueueSemaphoreTake+0x64>
 8002d74:	2301      	movs	r3, #1
 8002d76:	e000      	b.n	8002d7a <xQueueSemaphoreTake+0x66>
 8002d78:	2300      	movs	r3, #0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10a      	bne.n	8002d94 <xQueueSemaphoreTake+0x80>
        __asm volatile
 8002d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d82:	f383 8811 	msr	BASEPRI, r3
 8002d86:	f3bf 8f6f 	isb	sy
 8002d8a:	f3bf 8f4f 	dsb	sy
 8002d8e:	61bb      	str	r3, [r7, #24]
    }
 8002d90:	bf00      	nop
 8002d92:	e7fe      	b.n	8002d92 <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002d94:	f001 fee8 	bl	8004b68 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9c:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d034      	beq.n	8002e0e <xQueueSemaphoreTake+0xfa>
            {
                traceQUEUE_RECEIVE( pxQueue );
 8002da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da6:	4618      	mov	r0, r3
 8002da8:	f003 fdb4 	bl	8006914 <SEGGER_SYSVIEW_ShrinkId>
 8002dac:	4604      	mov	r4, r0
 8002dae:	2000      	movs	r0, #0
 8002db0:	f003 fdb0 	bl	8006914 <SEGGER_SYSVIEW_ShrinkId>
 8002db4:	4602      	mov	r2, r0
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2101      	movs	r1, #1
 8002dba:	9100      	str	r1, [sp, #0]
 8002dbc:	4621      	mov	r1, r4
 8002dbe:	205c      	movs	r0, #92	; 0x5c
 8002dc0:	f003 f892 	bl	8005ee8 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc6:	1e5a      	subs	r2, r3, #1
 8002dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dca:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d104      	bne.n	8002dde <xQueueSemaphoreTake+0xca>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002dd4:	f001 f9fe 	bl	80041d4 <pvTaskIncrementMutexHeldCount>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ddc:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00f      	beq.n	8002e06 <xQueueSemaphoreTake+0xf2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de8:	3310      	adds	r3, #16
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 fea2 	bl	8003b34 <xTaskRemoveFromEventList>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d007      	beq.n	8002e06 <xQueueSemaphoreTake+0xf2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002df6:	4b64      	ldr	r3, [pc, #400]	; (8002f88 <xQueueSemaphoreTake+0x274>)
 8002df8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	f3bf 8f4f 	dsb	sy
 8002e02:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002e06:	f001 fedf 	bl	8004bc8 <vPortExitCritical>
                return pdPASS;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e0b7      	b.n	8002f7e <xQueueSemaphoreTake+0x26a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d121      	bne.n	8002e58 <xQueueSemaphoreTake+0x144>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8002e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00a      	beq.n	8002e30 <xQueueSemaphoreTake+0x11c>
        __asm volatile
 8002e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1e:	f383 8811 	msr	BASEPRI, r3
 8002e22:	f3bf 8f6f 	isb	sy
 8002e26:	f3bf 8f4f 	dsb	sy
 8002e2a:	617b      	str	r3, [r7, #20]
    }
 8002e2c:	bf00      	nop
 8002e2e:	e7fe      	b.n	8002e2e <xQueueSemaphoreTake+0x11a>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8002e30:	f001 feca 	bl	8004bc8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e36:	4618      	mov	r0, r3
 8002e38:	f003 fd6c 	bl	8006914 <SEGGER_SYSVIEW_ShrinkId>
 8002e3c:	4604      	mov	r4, r0
 8002e3e:	2000      	movs	r0, #0
 8002e40:	f003 fd68 	bl	8006914 <SEGGER_SYSVIEW_ShrinkId>
 8002e44:	4602      	mov	r2, r0
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2101      	movs	r1, #1
 8002e4a:	9100      	str	r1, [sp, #0]
 8002e4c:	4621      	mov	r1, r4
 8002e4e:	205c      	movs	r0, #92	; 0x5c
 8002e50:	f003 f84a 	bl	8005ee8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002e54:	2300      	movs	r3, #0
 8002e56:	e092      	b.n	8002f7e <xQueueSemaphoreTake+0x26a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d106      	bne.n	8002e6c <xQueueSemaphoreTake+0x158>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002e5e:	f107 030c 	add.w	r3, r7, #12
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 fecc 	bl	8003c00 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002e6c:	f001 feac 	bl	8004bc8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002e70:	f000 fc18 	bl	80036a4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002e74:	f001 fe78 	bl	8004b68 <vPortEnterCritical>
 8002e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e7e:	b25b      	sxtb	r3, r3
 8002e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e84:	d103      	bne.n	8002e8e <xQueueSemaphoreTake+0x17a>
 8002e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e94:	b25b      	sxtb	r3, r3
 8002e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9a:	d103      	bne.n	8002ea4 <xQueueSemaphoreTake+0x190>
 8002e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ea4:	f001 fe90 	bl	8004bc8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ea8:	463a      	mov	r2, r7
 8002eaa:	f107 030c 	add.w	r3, r7, #12
 8002eae:	4611      	mov	r1, r2
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f000 febb 	bl	8003c2c <xTaskCheckForTimeOut>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d132      	bne.n	8002f22 <xQueueSemaphoreTake+0x20e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ebc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ebe:	f000 f95f 	bl	8003180 <prvIsQueueEmpty>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d026      	beq.n	8002f16 <xQueueSemaphoreTake+0x202>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d109      	bne.n	8002ee4 <xQueueSemaphoreTake+0x1d0>
                        {
                            taskENTER_CRITICAL();
 8002ed0:	f001 fe4a 	bl	8004b68 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 ffe9 	bl	8003eb0 <xTaskPriorityInherit>
 8002ede:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8002ee0:	f001 fe72 	bl	8004bc8 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee6:	3324      	adds	r3, #36	; 0x24
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	4611      	mov	r1, r2
 8002eec:	4618      	mov	r0, r3
 8002eee:	f000 fdcf 	bl	8003a90 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002ef2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ef4:	f000 f8f2 	bl	80030dc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002ef8:	f000 fbe2 	bl	80036c0 <xTaskResumeAll>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f47f af48 	bne.w	8002d94 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8002f04:	4b20      	ldr	r3, [pc, #128]	; (8002f88 <xQueueSemaphoreTake+0x274>)
 8002f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	f3bf 8f4f 	dsb	sy
 8002f10:	f3bf 8f6f 	isb	sy
 8002f14:	e73e      	b.n	8002d94 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8002f16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f18:	f000 f8e0 	bl	80030dc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002f1c:	f000 fbd0 	bl	80036c0 <xTaskResumeAll>
 8002f20:	e738      	b.n	8002d94 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8002f22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f24:	f000 f8da 	bl	80030dc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002f28:	f000 fbca 	bl	80036c0 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f2e:	f000 f927 	bl	8003180 <prvIsQueueEmpty>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f43f af2d 	beq.w	8002d94 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8002f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00d      	beq.n	8002f5c <xQueueSemaphoreTake+0x248>
                        {
                            taskENTER_CRITICAL();
 8002f40:	f001 fe12 	bl	8004b68 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002f44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f46:	f000 f821 	bl	8002f8c <prvGetDisinheritPriorityAfterTimeout>
 8002f4a:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f52:	4618      	mov	r0, r3
 8002f54:	f001 f8a6 	bl	80040a4 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8002f58:	f001 fe36 	bl	8004bc8 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f003 fcd8 	bl	8006914 <SEGGER_SYSVIEW_ShrinkId>
 8002f64:	4604      	mov	r4, r0
 8002f66:	2000      	movs	r0, #0
 8002f68:	f003 fcd4 	bl	8006914 <SEGGER_SYSVIEW_ShrinkId>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2101      	movs	r1, #1
 8002f72:	9100      	str	r1, [sp, #0]
 8002f74:	4621      	mov	r1, r4
 8002f76:	205c      	movs	r0, #92	; 0x5c
 8002f78:	f002 ffb6 	bl	8005ee8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002f7c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	373c      	adds	r7, #60	; 0x3c
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd90      	pop	{r4, r7, pc}
 8002f86:	bf00      	nop
 8002f88:	e000ed04 	.word	0xe000ed04

08002f8c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d006      	beq.n	8002faa <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f1c3 0305 	rsb	r3, r3, #5
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	e001      	b.n	8002fae <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002faa:	2300      	movs	r3, #0
 8002fac:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8002fae:	68fb      	ldr	r3, [r7, #12]
    }
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10d      	bne.n	8002ff6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d14d      	bne.n	800307e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 ffdc 	bl	8003fa4 <xTaskPriorityDisinherit>
 8002fec:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	609a      	str	r2, [r3, #8]
 8002ff4:	e043      	b.n	800307e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d119      	bne.n	8003030 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6858      	ldr	r0, [r3, #4]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003004:	461a      	mov	r2, r3
 8003006:	68b9      	ldr	r1, [r7, #8]
 8003008:	f003 ff4e 	bl	8006ea8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	441a      	add	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	429a      	cmp	r2, r3
 8003024:	d32b      	bcc.n	800307e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	e026      	b.n	800307e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	68d8      	ldr	r0, [r3, #12]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	461a      	mov	r2, r3
 800303a:	68b9      	ldr	r1, [r7, #8]
 800303c:	f003 ff34 	bl	8006ea8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003048:	425b      	negs	r3, r3
 800304a:	441a      	add	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d207      	bcs.n	800306c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	425b      	negs	r3, r3
 8003066:	441a      	add	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b02      	cmp	r3, #2
 8003070:	d105      	bne.n	800307e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d002      	beq.n	800307e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	3b01      	subs	r3, #1
 800307c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1c5a      	adds	r2, r3, #1
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003086:	697b      	ldr	r3, [r7, #20]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d018      	beq.n	80030d4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	441a      	add	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68da      	ldr	r2, [r3, #12]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d303      	bcc.n	80030c4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68d9      	ldr	r1, [r3, #12]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	461a      	mov	r2, r3
 80030ce:	6838      	ldr	r0, [r7, #0]
 80030d0:	f003 feea 	bl	8006ea8 <memcpy>
    }
}
 80030d4:	bf00      	nop
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80030e4:	f001 fd40 	bl	8004b68 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030ee:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80030f0:	e011      	b.n	8003116 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d012      	beq.n	8003120 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	3324      	adds	r3, #36	; 0x24
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 fd18 	bl	8003b34 <xTaskRemoveFromEventList>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800310a:	f000 fdf5 	bl	8003cf8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800310e:	7bfb      	ldrb	r3, [r7, #15]
 8003110:	3b01      	subs	r3, #1
 8003112:	b2db      	uxtb	r3, r3
 8003114:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800311a:	2b00      	cmp	r3, #0
 800311c:	dce9      	bgt.n	80030f2 <prvUnlockQueue+0x16>
 800311e:	e000      	b.n	8003122 <prvUnlockQueue+0x46>
                        break;
 8003120:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	22ff      	movs	r2, #255	; 0xff
 8003126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800312a:	f001 fd4d 	bl	8004bc8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800312e:	f001 fd1b 	bl	8004b68 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003138:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800313a:	e011      	b.n	8003160 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d012      	beq.n	800316a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3310      	adds	r3, #16
 8003148:	4618      	mov	r0, r3
 800314a:	f000 fcf3 	bl	8003b34 <xTaskRemoveFromEventList>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003154:	f000 fdd0 	bl	8003cf8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003158:	7bbb      	ldrb	r3, [r7, #14]
 800315a:	3b01      	subs	r3, #1
 800315c:	b2db      	uxtb	r3, r3
 800315e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003160:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003164:	2b00      	cmp	r3, #0
 8003166:	dce9      	bgt.n	800313c <prvUnlockQueue+0x60>
 8003168:	e000      	b.n	800316c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800316a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	22ff      	movs	r2, #255	; 0xff
 8003170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003174:	f001 fd28 	bl	8004bc8 <vPortExitCritical>
}
 8003178:	bf00      	nop
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003188:	f001 fcee 	bl	8004b68 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003190:	2b00      	cmp	r3, #0
 8003192:	d102      	bne.n	800319a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003194:	2301      	movs	r3, #1
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	e001      	b.n	800319e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800319a:	2300      	movs	r3, #0
 800319c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800319e:	f001 fd13 	bl	8004bc8 <vPortExitCritical>

    return xReturn;
 80031a2:	68fb      	ldr	r3, [r7, #12]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80031b4:	f001 fcd8 	bl	8004b68 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d102      	bne.n	80031ca <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80031c4:	2301      	movs	r3, #1
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	e001      	b.n	80031ce <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80031ca:	2300      	movs	r3, #0
 80031cc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80031ce:	f001 fcfb 	bl	8004bc8 <vPortExitCritical>

    return xReturn;
 80031d2:	68fb      	ldr	r3, [r7, #12]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031e6:	2300      	movs	r3, #0
 80031e8:	60fb      	str	r3, [r7, #12]
 80031ea:	e01e      	b.n	800322a <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80031ec:	4a13      	ldr	r2, [pc, #76]	; (800323c <vQueueAddToRegistry+0x60>)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d115      	bne.n	8003224 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80031f8:	4910      	ldr	r1, [pc, #64]	; (800323c <vQueueAddToRegistry+0x60>)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8003202:	4a0e      	ldr	r2, [pc, #56]	; (800323c <vQueueAddToRegistry+0x60>)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	4413      	add	r3, r2
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4618      	mov	r0, r3
 8003212:	f003 fb7f 	bl	8006914 <SEGGER_SYSVIEW_ShrinkId>
 8003216:	4601      	mov	r1, r0
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	461a      	mov	r2, r3
 800321c:	2071      	movs	r0, #113	; 0x71
 800321e:	f002 fd93 	bl	8005d48 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8003222:	e006      	b.n	8003232 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	3301      	adds	r3, #1
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2b07      	cmp	r3, #7
 800322e:	d9dd      	bls.n	80031ec <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003230:	bf00      	nop
 8003232:	bf00      	nop
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	20000090 	.word	0x20000090

08003240 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003250:	f001 fc8a 	bl	8004b68 <vPortEnterCritical>
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800325a:	b25b      	sxtb	r3, r3
 800325c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003260:	d103      	bne.n	800326a <vQueueWaitForMessageRestricted+0x2a>
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003270:	b25b      	sxtb	r3, r3
 8003272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003276:	d103      	bne.n	8003280 <vQueueWaitForMessageRestricted+0x40>
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003280:	f001 fca2 	bl	8004bc8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003288:	2b00      	cmp	r3, #0
 800328a:	d106      	bne.n	800329a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	3324      	adds	r3, #36	; 0x24
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	68b9      	ldr	r1, [r7, #8]
 8003294:	4618      	mov	r0, r3
 8003296:	f000 fc1f 	bl	8003ad8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800329a:	6978      	ldr	r0, [r7, #20]
 800329c:	f7ff ff1e 	bl	80030dc <prvUnlockQueue>
    }
 80032a0:	bf00      	nop
 80032a2:	3718      	adds	r7, #24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08c      	sub	sp, #48	; 0x30
 80032ac:	af04      	add	r7, sp, #16
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	603b      	str	r3, [r7, #0]
 80032b4:	4613      	mov	r3, r2
 80032b6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80032b8:	88fb      	ldrh	r3, [r7, #6]
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4618      	mov	r0, r3
 80032be:	f001 fd7d 	bl	8004dbc <pvPortMalloc>
 80032c2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00e      	beq.n	80032e8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80032ca:	2058      	movs	r0, #88	; 0x58
 80032cc:	f001 fd76 	bl	8004dbc <pvPortMalloc>
 80032d0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	631a      	str	r2, [r3, #48]	; 0x30
 80032de:	e005      	b.n	80032ec <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80032e0:	6978      	ldr	r0, [r7, #20]
 80032e2:	f001 fe4b 	bl	8004f7c <vPortFree>
 80032e6:	e001      	b.n	80032ec <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80032e8:	2300      	movs	r3, #0
 80032ea:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d013      	beq.n	800331a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80032f2:	88fa      	ldrh	r2, [r7, #6]
 80032f4:	2300      	movs	r3, #0
 80032f6:	9303      	str	r3, [sp, #12]
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	9302      	str	r3, [sp, #8]
 80032fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fe:	9301      	str	r3, [sp, #4]
 8003300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	68b9      	ldr	r1, [r7, #8]
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f000 f80e 	bl	800332a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800330e:	69f8      	ldr	r0, [r7, #28]
 8003310:	f000 f8a2 	bl	8003458 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003314:	2301      	movs	r3, #1
 8003316:	61bb      	str	r3, [r7, #24]
 8003318:	e002      	b.n	8003320 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800331a:	f04f 33ff 	mov.w	r3, #4294967295
 800331e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003320:	69bb      	ldr	r3, [r7, #24]
    }
 8003322:	4618      	mov	r0, r3
 8003324:	3720      	adds	r7, #32
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b088      	sub	sp, #32
 800332e:	af00      	add	r7, sp, #0
 8003330:	60f8      	str	r0, [r7, #12]
 8003332:	60b9      	str	r1, [r7, #8]
 8003334:	607a      	str	r2, [r7, #4]
 8003336:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	461a      	mov	r2, r3
 8003342:	21a5      	movs	r1, #165	; 0xa5
 8003344:	f003 fdbe 	bl	8006ec4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003352:	3b01      	subs	r3, #1
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	f023 0307 	bic.w	r3, r3, #7
 8003360:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00a      	beq.n	8003382 <prvInitialiseNewTask+0x58>
        __asm volatile
 800336c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003370:	f383 8811 	msr	BASEPRI, r3
 8003374:	f3bf 8f6f 	isb	sy
 8003378:	f3bf 8f4f 	dsb	sy
 800337c:	617b      	str	r3, [r7, #20]
    }
 800337e:	bf00      	nop
 8003380:	e7fe      	b.n	8003380 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d01f      	beq.n	80033c8 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003388:	2300      	movs	r3, #0
 800338a:	61fb      	str	r3, [r7, #28]
 800338c:	e012      	b.n	80033b4 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	4413      	add	r3, r2
 8003394:	7819      	ldrb	r1, [r3, #0]
 8003396:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	4413      	add	r3, r2
 800339c:	3334      	adds	r3, #52	; 0x34
 800339e:	460a      	mov	r2, r1
 80033a0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	4413      	add	r3, r2
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d006      	beq.n	80033bc <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	3301      	adds	r3, #1
 80033b2:	61fb      	str	r3, [r7, #28]
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	2b09      	cmp	r3, #9
 80033b8:	d9e9      	bls.n	800338e <prvInitialiseNewTask+0x64>
 80033ba:	e000      	b.n	80033be <prvInitialiseNewTask+0x94>
            {
                break;
 80033bc:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80033be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80033c6:	e003      	b.n	80033d0 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80033c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80033d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d901      	bls.n	80033da <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80033d6:	2304      	movs	r3, #4
 80033d8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80033da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033de:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80033e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033e4:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80033e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e8:	2200      	movs	r2, #0
 80033ea:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80033ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ee:	3304      	adds	r3, #4
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff f817 	bl	8002424 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80033f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f8:	3318      	adds	r3, #24
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff f812 	bl	8002424 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003402:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003404:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003408:	f1c3 0205 	rsb	r2, r3, #5
 800340c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003414:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003418:	3350      	adds	r3, #80	; 0x50
 800341a:	2204      	movs	r2, #4
 800341c:	2100      	movs	r1, #0
 800341e:	4618      	mov	r0, r3
 8003420:	f003 fd50 	bl	8006ec4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003426:	3354      	adds	r3, #84	; 0x54
 8003428:	2201      	movs	r2, #1
 800342a:	2100      	movs	r1, #0
 800342c:	4618      	mov	r0, r3
 800342e:	f003 fd49 	bl	8006ec4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	68f9      	ldr	r1, [r7, #12]
 8003436:	69b8      	ldr	r0, [r7, #24]
 8003438:	f001 fa6a 	bl	8004910 <pxPortInitialiseStack>
 800343c:	4602      	mov	r2, r0
 800343e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003440:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003444:	2b00      	cmp	r3, #0
 8003446:	d002      	beq.n	800344e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800344c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800344e:	bf00      	nop
 8003450:	3720      	adds	r7, #32
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
	...

08003458 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003458:	b5b0      	push	{r4, r5, r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af02      	add	r7, sp, #8
 800345e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003460:	f001 fb82 	bl	8004b68 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003464:	4b3b      	ldr	r3, [pc, #236]	; (8003554 <prvAddNewTaskToReadyList+0xfc>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	3301      	adds	r3, #1
 800346a:	4a3a      	ldr	r2, [pc, #232]	; (8003554 <prvAddNewTaskToReadyList+0xfc>)
 800346c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800346e:	4b3a      	ldr	r3, [pc, #232]	; (8003558 <prvAddNewTaskToReadyList+0x100>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d109      	bne.n	800348a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003476:	4a38      	ldr	r2, [pc, #224]	; (8003558 <prvAddNewTaskToReadyList+0x100>)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800347c:	4b35      	ldr	r3, [pc, #212]	; (8003554 <prvAddNewTaskToReadyList+0xfc>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d110      	bne.n	80034a6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003484:	f000 fc5c 	bl	8003d40 <prvInitialiseTaskLists>
 8003488:	e00d      	b.n	80034a6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800348a:	4b34      	ldr	r3, [pc, #208]	; (800355c <prvAddNewTaskToReadyList+0x104>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d109      	bne.n	80034a6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003492:	4b31      	ldr	r3, [pc, #196]	; (8003558 <prvAddNewTaskToReadyList+0x100>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349c:	429a      	cmp	r2, r3
 800349e:	d802      	bhi.n	80034a6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80034a0:	4a2d      	ldr	r2, [pc, #180]	; (8003558 <prvAddNewTaskToReadyList+0x100>)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80034a6:	4b2e      	ldr	r3, [pc, #184]	; (8003560 <prvAddNewTaskToReadyList+0x108>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	3301      	adds	r3, #1
 80034ac:	4a2c      	ldr	r2, [pc, #176]	; (8003560 <prvAddNewTaskToReadyList+0x108>)
 80034ae:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80034b0:	4b2b      	ldr	r3, [pc, #172]	; (8003560 <prvAddNewTaskToReadyList+0x108>)
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d016      	beq.n	80034ec <prvAddNewTaskToReadyList+0x94>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f003 f901 	bl	80066c8 <SEGGER_SYSVIEW_OnTaskCreate>
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	461d      	mov	r5, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	461c      	mov	r4, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	1ae3      	subs	r3, r4, r3
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	462b      	mov	r3, r5
 80034e8:	f003 fc20 	bl	8006d2c <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f003 f96e 	bl	80067d0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f8:	2201      	movs	r2, #1
 80034fa:	409a      	lsls	r2, r3
 80034fc:	4b19      	ldr	r3, [pc, #100]	; (8003564 <prvAddNewTaskToReadyList+0x10c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4313      	orrs	r3, r2
 8003502:	4a18      	ldr	r2, [pc, #96]	; (8003564 <prvAddNewTaskToReadyList+0x10c>)
 8003504:	6013      	str	r3, [r2, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800350a:	4613      	mov	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4a15      	ldr	r2, [pc, #84]	; (8003568 <prvAddNewTaskToReadyList+0x110>)
 8003514:	441a      	add	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	3304      	adds	r3, #4
 800351a:	4619      	mov	r1, r3
 800351c:	4610      	mov	r0, r2
 800351e:	f7fe ff8e 	bl	800243e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003522:	f001 fb51 	bl	8004bc8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003526:	4b0d      	ldr	r3, [pc, #52]	; (800355c <prvAddNewTaskToReadyList+0x104>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00e      	beq.n	800354c <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800352e:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <prvAddNewTaskToReadyList+0x100>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003538:	429a      	cmp	r2, r3
 800353a:	d207      	bcs.n	800354c <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800353c:	4b0b      	ldr	r3, [pc, #44]	; (800356c <prvAddNewTaskToReadyList+0x114>)
 800353e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	f3bf 8f4f 	dsb	sy
 8003548:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800354c:	bf00      	nop
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bdb0      	pop	{r4, r5, r7, pc}
 8003554:	200001a8 	.word	0x200001a8
 8003558:	200000d0 	.word	0x200000d0
 800355c:	200001b4 	.word	0x200001b4
 8003560:	200001c4 	.word	0x200001c4
 8003564:	200001b0 	.word	0x200001b0
 8003568:	200000d4 	.word	0x200000d4
 800356c:	e000ed04 	.word	0xe000ed04

08003570 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003578:	2300      	movs	r3, #0
 800357a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d01b      	beq.n	80035ba <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8003582:	4b15      	ldr	r3, [pc, #84]	; (80035d8 <vTaskDelay+0x68>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00a      	beq.n	80035a0 <vTaskDelay+0x30>
        __asm volatile
 800358a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800358e:	f383 8811 	msr	BASEPRI, r3
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	f3bf 8f4f 	dsb	sy
 800359a:	60bb      	str	r3, [r7, #8]
    }
 800359c:	bf00      	nop
 800359e:	e7fe      	b.n	800359e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80035a0:	f000 f880 	bl	80036a4 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	2023      	movs	r0, #35	; 0x23
 80035a8:	f002 fb92 	bl	8005cd0 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80035ac:	2100      	movs	r1, #0
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 fe24 	bl	80041fc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80035b4:	f000 f884 	bl	80036c0 <xTaskResumeAll>
 80035b8:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d107      	bne.n	80035d0 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 80035c0:	4b06      	ldr	r3, [pc, #24]	; (80035dc <vTaskDelay+0x6c>)
 80035c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	f3bf 8f4f 	dsb	sy
 80035cc:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80035d0:	bf00      	nop
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	200001d0 	.word	0x200001d0
 80035dc:	e000ed04 	.word	0xe000ed04

080035e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80035e6:	4b27      	ldr	r3, [pc, #156]	; (8003684 <vTaskStartScheduler+0xa4>)
 80035e8:	9301      	str	r3, [sp, #4]
 80035ea:	2300      	movs	r3, #0
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	2300      	movs	r3, #0
 80035f0:	2282      	movs	r2, #130	; 0x82
 80035f2:	4925      	ldr	r1, [pc, #148]	; (8003688 <vTaskStartScheduler+0xa8>)
 80035f4:	4825      	ldr	r0, [pc, #148]	; (800368c <vTaskStartScheduler+0xac>)
 80035f6:	f7ff fe57 	bl	80032a8 <xTaskCreate>
 80035fa:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d102      	bne.n	8003608 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003602:	f000 fe73 	bl	80042ec <xTimerCreateTimerTask>
 8003606:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d124      	bne.n	8003658 <vTaskStartScheduler+0x78>
        __asm volatile
 800360e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003612:	f383 8811 	msr	BASEPRI, r3
 8003616:	f3bf 8f6f 	isb	sy
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	60bb      	str	r3, [r7, #8]
    }
 8003620:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003622:	4b1b      	ldr	r3, [pc, #108]	; (8003690 <vTaskStartScheduler+0xb0>)
 8003624:	f04f 32ff 	mov.w	r2, #4294967295
 8003628:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800362a:	4b1a      	ldr	r3, [pc, #104]	; (8003694 <vTaskStartScheduler+0xb4>)
 800362c:	2201      	movs	r2, #1
 800362e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003630:	4b19      	ldr	r3, [pc, #100]	; (8003698 <vTaskStartScheduler+0xb8>)
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003636:	4b19      	ldr	r3, [pc, #100]	; (800369c <vTaskStartScheduler+0xbc>)
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	4b12      	ldr	r3, [pc, #72]	; (8003684 <vTaskStartScheduler+0xa4>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	429a      	cmp	r2, r3
 8003640:	d102      	bne.n	8003648 <vTaskStartScheduler+0x68>
 8003642:	f003 f825 	bl	8006690 <SEGGER_SYSVIEW_OnIdle>
 8003646:	e004      	b.n	8003652 <vTaskStartScheduler+0x72>
 8003648:	4b14      	ldr	r3, [pc, #80]	; (800369c <vTaskStartScheduler+0xbc>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f003 f87d 	bl	800674c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003652:	f001 f9e7 	bl	8004a24 <xPortStartScheduler>
 8003656:	e00e      	b.n	8003676 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365e:	d10a      	bne.n	8003676 <vTaskStartScheduler+0x96>
        __asm volatile
 8003660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003664:	f383 8811 	msr	BASEPRI, r3
 8003668:	f3bf 8f6f 	isb	sy
 800366c:	f3bf 8f4f 	dsb	sy
 8003670:	607b      	str	r3, [r7, #4]
    }
 8003672:	bf00      	nop
 8003674:	e7fe      	b.n	8003674 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003676:	4b0a      	ldr	r3, [pc, #40]	; (80036a0 <vTaskStartScheduler+0xc0>)
 8003678:	681b      	ldr	r3, [r3, #0]
}
 800367a:	bf00      	nop
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	200001cc 	.word	0x200001cc
 8003688:	08006f74 	.word	0x08006f74
 800368c:	08003d11 	.word	0x08003d11
 8003690:	200001c8 	.word	0x200001c8
 8003694:	200001b4 	.word	0x200001b4
 8003698:	200001ac 	.word	0x200001ac
 800369c:	200000d0 	.word	0x200000d0
 80036a0:	2000001c 	.word	0x2000001c

080036a4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80036a8:	4b04      	ldr	r3, [pc, #16]	; (80036bc <vTaskSuspendAll+0x18>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	3301      	adds	r3, #1
 80036ae:	4a03      	ldr	r2, [pc, #12]	; (80036bc <vTaskSuspendAll+0x18>)
 80036b0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80036b2:	bf00      	nop
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	200001d0 	.word	0x200001d0

080036c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80036c6:	2300      	movs	r3, #0
 80036c8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80036ca:	2300      	movs	r3, #0
 80036cc:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80036ce:	4b43      	ldr	r3, [pc, #268]	; (80037dc <xTaskResumeAll+0x11c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10a      	bne.n	80036ec <xTaskResumeAll+0x2c>
        __asm volatile
 80036d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036da:	f383 8811 	msr	BASEPRI, r3
 80036de:	f3bf 8f6f 	isb	sy
 80036e2:	f3bf 8f4f 	dsb	sy
 80036e6:	603b      	str	r3, [r7, #0]
    }
 80036e8:	bf00      	nop
 80036ea:	e7fe      	b.n	80036ea <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80036ec:	f001 fa3c 	bl	8004b68 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80036f0:	4b3a      	ldr	r3, [pc, #232]	; (80037dc <xTaskResumeAll+0x11c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	3b01      	subs	r3, #1
 80036f6:	4a39      	ldr	r2, [pc, #228]	; (80037dc <xTaskResumeAll+0x11c>)
 80036f8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036fa:	4b38      	ldr	r3, [pc, #224]	; (80037dc <xTaskResumeAll+0x11c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d165      	bne.n	80037ce <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003702:	4b37      	ldr	r3, [pc, #220]	; (80037e0 <xTaskResumeAll+0x120>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d061      	beq.n	80037ce <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800370a:	e032      	b.n	8003772 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800370c:	4b35      	ldr	r3, [pc, #212]	; (80037e4 <xTaskResumeAll+0x124>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	3318      	adds	r3, #24
 8003718:	4618      	mov	r0, r3
 800371a:	f7fe feed 	bl	80024f8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	3304      	adds	r3, #4
 8003722:	4618      	mov	r0, r3
 8003724:	f7fe fee8 	bl	80024f8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4618      	mov	r0, r3
 800372c:	f003 f850 	bl	80067d0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003734:	2201      	movs	r2, #1
 8003736:	409a      	lsls	r2, r3
 8003738:	4b2b      	ldr	r3, [pc, #172]	; (80037e8 <xTaskResumeAll+0x128>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4313      	orrs	r3, r2
 800373e:	4a2a      	ldr	r2, [pc, #168]	; (80037e8 <xTaskResumeAll+0x128>)
 8003740:	6013      	str	r3, [r2, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003746:	4613      	mov	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4413      	add	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4a27      	ldr	r2, [pc, #156]	; (80037ec <xTaskResumeAll+0x12c>)
 8003750:	441a      	add	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	3304      	adds	r3, #4
 8003756:	4619      	mov	r1, r3
 8003758:	4610      	mov	r0, r2
 800375a:	f7fe fe70 	bl	800243e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003762:	4b23      	ldr	r3, [pc, #140]	; (80037f0 <xTaskResumeAll+0x130>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	429a      	cmp	r2, r3
 800376a:	d302      	bcc.n	8003772 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 800376c:	4b21      	ldr	r3, [pc, #132]	; (80037f4 <xTaskResumeAll+0x134>)
 800376e:	2201      	movs	r2, #1
 8003770:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003772:	4b1c      	ldr	r3, [pc, #112]	; (80037e4 <xTaskResumeAll+0x124>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1c8      	bne.n	800370c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003780:	f000 fb5c 	bl	8003e3c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003784:	4b1c      	ldr	r3, [pc, #112]	; (80037f8 <xTaskResumeAll+0x138>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d010      	beq.n	80037b2 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003790:	f000 f858 	bl	8003844 <xTaskIncrementTick>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800379a:	4b16      	ldr	r3, [pc, #88]	; (80037f4 <xTaskResumeAll+0x134>)
 800379c:	2201      	movs	r2, #1
 800379e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	3b01      	subs	r3, #1
 80037a4:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1f1      	bne.n	8003790 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80037ac:	4b12      	ldr	r3, [pc, #72]	; (80037f8 <xTaskResumeAll+0x138>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80037b2:	4b10      	ldr	r3, [pc, #64]	; (80037f4 <xTaskResumeAll+0x134>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d009      	beq.n	80037ce <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80037ba:	2301      	movs	r3, #1
 80037bc:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80037be:	4b0f      	ldr	r3, [pc, #60]	; (80037fc <xTaskResumeAll+0x13c>)
 80037c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	f3bf 8f4f 	dsb	sy
 80037ca:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80037ce:	f001 f9fb 	bl	8004bc8 <vPortExitCritical>

    return xAlreadyYielded;
 80037d2:	68bb      	ldr	r3, [r7, #8]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	200001d0 	.word	0x200001d0
 80037e0:	200001a8 	.word	0x200001a8
 80037e4:	20000168 	.word	0x20000168
 80037e8:	200001b0 	.word	0x200001b0
 80037ec:	200000d4 	.word	0x200000d4
 80037f0:	200000d0 	.word	0x200000d0
 80037f4:	200001bc 	.word	0x200001bc
 80037f8:	200001b8 	.word	0x200001b8
 80037fc:	e000ed04 	.word	0xe000ed04

08003800 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003806:	4b05      	ldr	r3, [pc, #20]	; (800381c <xTaskGetTickCount+0x1c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800380c:	687b      	ldr	r3, [r7, #4]
}
 800380e:	4618      	mov	r0, r3
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	200001ac 	.word	0x200001ac

08003820 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003826:	f001 fa89 	bl	8004d3c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800382a:	2300      	movs	r3, #0
 800382c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800382e:	4b04      	ldr	r3, [pc, #16]	; (8003840 <xTaskGetTickCountFromISR+0x20>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003834:	683b      	ldr	r3, [r7, #0]
}
 8003836:	4618      	mov	r0, r3
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	200001ac 	.word	0x200001ac

08003844 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800384a:	2300      	movs	r3, #0
 800384c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800384e:	4b50      	ldr	r3, [pc, #320]	; (8003990 <xTaskIncrementTick+0x14c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	f040 8092 	bne.w	800397c <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003858:	4b4e      	ldr	r3, [pc, #312]	; (8003994 <xTaskIncrementTick+0x150>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3301      	adds	r3, #1
 800385e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003860:	4a4c      	ldr	r2, [pc, #304]	; (8003994 <xTaskIncrementTick+0x150>)
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d120      	bne.n	80038ae <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800386c:	4b4a      	ldr	r3, [pc, #296]	; (8003998 <xTaskIncrementTick+0x154>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <xTaskIncrementTick+0x48>
        __asm volatile
 8003876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387a:	f383 8811 	msr	BASEPRI, r3
 800387e:	f3bf 8f6f 	isb	sy
 8003882:	f3bf 8f4f 	dsb	sy
 8003886:	603b      	str	r3, [r7, #0]
    }
 8003888:	bf00      	nop
 800388a:	e7fe      	b.n	800388a <xTaskIncrementTick+0x46>
 800388c:	4b42      	ldr	r3, [pc, #264]	; (8003998 <xTaskIncrementTick+0x154>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	4b42      	ldr	r3, [pc, #264]	; (800399c <xTaskIncrementTick+0x158>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a40      	ldr	r2, [pc, #256]	; (8003998 <xTaskIncrementTick+0x154>)
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	4a40      	ldr	r2, [pc, #256]	; (800399c <xTaskIncrementTick+0x158>)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6013      	str	r3, [r2, #0]
 80038a0:	4b3f      	ldr	r3, [pc, #252]	; (80039a0 <xTaskIncrementTick+0x15c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	3301      	adds	r3, #1
 80038a6:	4a3e      	ldr	r2, [pc, #248]	; (80039a0 <xTaskIncrementTick+0x15c>)
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	f000 fac7 	bl	8003e3c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80038ae:	4b3d      	ldr	r3, [pc, #244]	; (80039a4 <xTaskIncrementTick+0x160>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d34c      	bcc.n	8003952 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038b8:	4b37      	ldr	r3, [pc, #220]	; (8003998 <xTaskIncrementTick+0x154>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d104      	bne.n	80038cc <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038c2:	4b38      	ldr	r3, [pc, #224]	; (80039a4 <xTaskIncrementTick+0x160>)
 80038c4:	f04f 32ff 	mov.w	r2, #4294967295
 80038c8:	601a      	str	r2, [r3, #0]
                    break;
 80038ca:	e042      	b.n	8003952 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038cc:	4b32      	ldr	r3, [pc, #200]	; (8003998 <xTaskIncrementTick+0x154>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d203      	bcs.n	80038ec <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80038e4:	4a2f      	ldr	r2, [pc, #188]	; (80039a4 <xTaskIncrementTick+0x160>)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80038ea:	e032      	b.n	8003952 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	3304      	adds	r3, #4
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7fe fe01 	bl	80024f8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d004      	beq.n	8003908 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	3318      	adds	r3, #24
 8003902:	4618      	mov	r0, r3
 8003904:	f7fe fdf8 	bl	80024f8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	4618      	mov	r0, r3
 800390c:	f002 ff60 	bl	80067d0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	2201      	movs	r2, #1
 8003916:	409a      	lsls	r2, r3
 8003918:	4b23      	ldr	r3, [pc, #140]	; (80039a8 <xTaskIncrementTick+0x164>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4313      	orrs	r3, r2
 800391e:	4a22      	ldr	r2, [pc, #136]	; (80039a8 <xTaskIncrementTick+0x164>)
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003926:	4613      	mov	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	4413      	add	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4a1f      	ldr	r2, [pc, #124]	; (80039ac <xTaskIncrementTick+0x168>)
 8003930:	441a      	add	r2, r3
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	3304      	adds	r3, #4
 8003936:	4619      	mov	r1, r3
 8003938:	4610      	mov	r0, r2
 800393a:	f7fe fd80 	bl	800243e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003942:	4b1b      	ldr	r3, [pc, #108]	; (80039b0 <xTaskIncrementTick+0x16c>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003948:	429a      	cmp	r2, r3
 800394a:	d3b5      	bcc.n	80038b8 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800394c:	2301      	movs	r3, #1
 800394e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003950:	e7b2      	b.n	80038b8 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003952:	4b17      	ldr	r3, [pc, #92]	; (80039b0 <xTaskIncrementTick+0x16c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003958:	4914      	ldr	r1, [pc, #80]	; (80039ac <xTaskIncrementTick+0x168>)
 800395a:	4613      	mov	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4413      	add	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d901      	bls.n	800396e <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 800396a:	2301      	movs	r3, #1
 800396c:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800396e:	4b11      	ldr	r3, [pc, #68]	; (80039b4 <xTaskIncrementTick+0x170>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d007      	beq.n	8003986 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8003976:	2301      	movs	r3, #1
 8003978:	617b      	str	r3, [r7, #20]
 800397a:	e004      	b.n	8003986 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800397c:	4b0e      	ldr	r3, [pc, #56]	; (80039b8 <xTaskIncrementTick+0x174>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	3301      	adds	r3, #1
 8003982:	4a0d      	ldr	r2, [pc, #52]	; (80039b8 <xTaskIncrementTick+0x174>)
 8003984:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003986:	697b      	ldr	r3, [r7, #20]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	200001d0 	.word	0x200001d0
 8003994:	200001ac 	.word	0x200001ac
 8003998:	20000160 	.word	0x20000160
 800399c:	20000164 	.word	0x20000164
 80039a0:	200001c0 	.word	0x200001c0
 80039a4:	200001c8 	.word	0x200001c8
 80039a8:	200001b0 	.word	0x200001b0
 80039ac:	200000d4 	.word	0x200000d4
 80039b0:	200000d0 	.word	0x200000d0
 80039b4:	200001bc 	.word	0x200001bc
 80039b8:	200001b8 	.word	0x200001b8

080039bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80039c2:	4b2d      	ldr	r3, [pc, #180]	; (8003a78 <vTaskSwitchContext+0xbc>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80039ca:	4b2c      	ldr	r3, [pc, #176]	; (8003a7c <vTaskSwitchContext+0xc0>)
 80039cc:	2201      	movs	r2, #1
 80039ce:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80039d0:	e04d      	b.n	8003a6e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80039d2:	4b2a      	ldr	r3, [pc, #168]	; (8003a7c <vTaskSwitchContext+0xc0>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039d8:	4b29      	ldr	r3, [pc, #164]	; (8003a80 <vTaskSwitchContext+0xc4>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	fab3 f383 	clz	r3, r3
 80039e4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80039e6:	7afb      	ldrb	r3, [r7, #11]
 80039e8:	f1c3 031f 	rsb	r3, r3, #31
 80039ec:	617b      	str	r3, [r7, #20]
 80039ee:	4925      	ldr	r1, [pc, #148]	; (8003a84 <vTaskSwitchContext+0xc8>)
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	4613      	mov	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4413      	add	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	440b      	add	r3, r1
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10a      	bne.n	8003a18 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a06:	f383 8811 	msr	BASEPRI, r3
 8003a0a:	f3bf 8f6f 	isb	sy
 8003a0e:	f3bf 8f4f 	dsb	sy
 8003a12:	607b      	str	r3, [r7, #4]
    }
 8003a14:	bf00      	nop
 8003a16:	e7fe      	b.n	8003a16 <vTaskSwitchContext+0x5a>
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4a18      	ldr	r2, [pc, #96]	; (8003a84 <vTaskSwitchContext+0xc8>)
 8003a24:	4413      	add	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	605a      	str	r2, [r3, #4]
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	3308      	adds	r3, #8
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d104      	bne.n	8003a48 <vTaskSwitchContext+0x8c>
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	605a      	str	r2, [r3, #4]
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	4a0e      	ldr	r2, [pc, #56]	; (8003a88 <vTaskSwitchContext+0xcc>)
 8003a50:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003a52:	4b0d      	ldr	r3, [pc, #52]	; (8003a88 <vTaskSwitchContext+0xcc>)
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	4b0d      	ldr	r3, [pc, #52]	; (8003a8c <vTaskSwitchContext+0xd0>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d102      	bne.n	8003a64 <vTaskSwitchContext+0xa8>
 8003a5e:	f002 fe17 	bl	8006690 <SEGGER_SYSVIEW_OnIdle>
}
 8003a62:	e004      	b.n	8003a6e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003a64:	4b08      	ldr	r3, [pc, #32]	; (8003a88 <vTaskSwitchContext+0xcc>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f002 fe6f 	bl	800674c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003a6e:	bf00      	nop
 8003a70:	3718      	adds	r7, #24
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	200001d0 	.word	0x200001d0
 8003a7c:	200001bc 	.word	0x200001bc
 8003a80:	200001b0 	.word	0x200001b0
 8003a84:	200000d4 	.word	0x200000d4
 8003a88:	200000d0 	.word	0x200000d0
 8003a8c:	200001cc 	.word	0x200001cc

08003a90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10a      	bne.n	8003ab6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa4:	f383 8811 	msr	BASEPRI, r3
 8003aa8:	f3bf 8f6f 	isb	sy
 8003aac:	f3bf 8f4f 	dsb	sy
 8003ab0:	60fb      	str	r3, [r7, #12]
    }
 8003ab2:	bf00      	nop
 8003ab4:	e7fe      	b.n	8003ab4 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ab6:	4b07      	ldr	r3, [pc, #28]	; (8003ad4 <vTaskPlaceOnEventList+0x44>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	3318      	adds	r3, #24
 8003abc:	4619      	mov	r1, r3
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7fe fce1 	bl	8002486 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	6838      	ldr	r0, [r7, #0]
 8003ac8:	f000 fb98 	bl	80041fc <prvAddCurrentTaskToDelayedList>
}
 8003acc:	bf00      	nop
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	200000d0 	.word	0x200000d0

08003ad8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10a      	bne.n	8003b00 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aee:	f383 8811 	msr	BASEPRI, r3
 8003af2:	f3bf 8f6f 	isb	sy
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	617b      	str	r3, [r7, #20]
    }
 8003afc:	bf00      	nop
 8003afe:	e7fe      	b.n	8003afe <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b00:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <vTaskPlaceOnEventListRestricted+0x58>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	3318      	adds	r3, #24
 8003b06:	4619      	mov	r1, r3
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f7fe fc98 	bl	800243e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003b14:	f04f 33ff 	mov.w	r3, #4294967295
 8003b18:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003b1a:	2024      	movs	r0, #36	; 0x24
 8003b1c:	f002 f8ba 	bl	8005c94 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	68b8      	ldr	r0, [r7, #8]
 8003b24:	f000 fb6a 	bl	80041fc <prvAddCurrentTaskToDelayedList>
    }
 8003b28:	bf00      	nop
 8003b2a:	3718      	adds	r7, #24
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	200000d0 	.word	0x200000d0

08003b34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10a      	bne.n	8003b60 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4e:	f383 8811 	msr	BASEPRI, r3
 8003b52:	f3bf 8f6f 	isb	sy
 8003b56:	f3bf 8f4f 	dsb	sy
 8003b5a:	60fb      	str	r3, [r7, #12]
    }
 8003b5c:	bf00      	nop
 8003b5e:	e7fe      	b.n	8003b5e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	3318      	adds	r3, #24
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7fe fcc7 	bl	80024f8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b6a:	4b1f      	ldr	r3, [pc, #124]	; (8003be8 <xTaskRemoveFromEventList+0xb4>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d120      	bne.n	8003bb4 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	3304      	adds	r3, #4
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fe fcbe 	bl	80024f8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f002 fe26 	bl	80067d0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b88:	2201      	movs	r2, #1
 8003b8a:	409a      	lsls	r2, r3
 8003b8c:	4b17      	ldr	r3, [pc, #92]	; (8003bec <xTaskRemoveFromEventList+0xb8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	4a16      	ldr	r2, [pc, #88]	; (8003bec <xTaskRemoveFromEventList+0xb8>)
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4a13      	ldr	r2, [pc, #76]	; (8003bf0 <xTaskRemoveFromEventList+0xbc>)
 8003ba4:	441a      	add	r2, r3
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	3304      	adds	r3, #4
 8003baa:	4619      	mov	r1, r3
 8003bac:	4610      	mov	r0, r2
 8003bae:	f7fe fc46 	bl	800243e <vListInsertEnd>
 8003bb2:	e005      	b.n	8003bc0 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	3318      	adds	r3, #24
 8003bb8:	4619      	mov	r1, r3
 8003bba:	480e      	ldr	r0, [pc, #56]	; (8003bf4 <xTaskRemoveFromEventList+0xc0>)
 8003bbc:	f7fe fc3f 	bl	800243e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc4:	4b0c      	ldr	r3, [pc, #48]	; (8003bf8 <xTaskRemoveFromEventList+0xc4>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d905      	bls.n	8003bda <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003bd2:	4b0a      	ldr	r3, [pc, #40]	; (8003bfc <xTaskRemoveFromEventList+0xc8>)
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	e001      	b.n	8003bde <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003bde:	697b      	ldr	r3, [r7, #20]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3718      	adds	r7, #24
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	200001d0 	.word	0x200001d0
 8003bec:	200001b0 	.word	0x200001b0
 8003bf0:	200000d4 	.word	0x200000d4
 8003bf4:	20000168 	.word	0x20000168
 8003bf8:	200000d0 	.word	0x200000d0
 8003bfc:	200001bc 	.word	0x200001bc

08003c00 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003c08:	4b06      	ldr	r3, [pc, #24]	; (8003c24 <vTaskInternalSetTimeOutState+0x24>)
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003c10:	4b05      	ldr	r3, [pc, #20]	; (8003c28 <vTaskInternalSetTimeOutState+0x28>)
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	605a      	str	r2, [r3, #4]
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	200001c0 	.word	0x200001c0
 8003c28:	200001ac 	.word	0x200001ac

08003c2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b088      	sub	sp, #32
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10a      	bne.n	8003c52 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c40:	f383 8811 	msr	BASEPRI, r3
 8003c44:	f3bf 8f6f 	isb	sy
 8003c48:	f3bf 8f4f 	dsb	sy
 8003c4c:	613b      	str	r3, [r7, #16]
    }
 8003c4e:	bf00      	nop
 8003c50:	e7fe      	b.n	8003c50 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10a      	bne.n	8003c6e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5c:	f383 8811 	msr	BASEPRI, r3
 8003c60:	f3bf 8f6f 	isb	sy
 8003c64:	f3bf 8f4f 	dsb	sy
 8003c68:	60fb      	str	r3, [r7, #12]
    }
 8003c6a:	bf00      	nop
 8003c6c:	e7fe      	b.n	8003c6c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003c6e:	f000 ff7b 	bl	8004b68 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003c72:	4b1f      	ldr	r3, [pc, #124]	; (8003cf0 <xTaskCheckForTimeOut+0xc4>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c8a:	d102      	bne.n	8003c92 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	61fb      	str	r3, [r7, #28]
 8003c90:	e026      	b.n	8003ce0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	4b17      	ldr	r3, [pc, #92]	; (8003cf4 <xTaskCheckForTimeOut+0xc8>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d00a      	beq.n	8003cb4 <xTaskCheckForTimeOut+0x88>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d305      	bcc.n	8003cb4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	e015      	b.n	8003ce0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d20b      	bcs.n	8003cd6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	1ad2      	subs	r2, r2, r3
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7ff ff98 	bl	8003c00 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	61fb      	str	r3, [r7, #28]
 8003cd4:	e004      	b.n	8003ce0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003ce0:	f000 ff72 	bl	8004bc8 <vPortExitCritical>

    return xReturn;
 8003ce4:	69fb      	ldr	r3, [r7, #28]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3720      	adds	r7, #32
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	200001ac 	.word	0x200001ac
 8003cf4:	200001c0 	.word	0x200001c0

08003cf8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003cfc:	4b03      	ldr	r3, [pc, #12]	; (8003d0c <vTaskMissedYield+0x14>)
 8003cfe:	2201      	movs	r2, #1
 8003d00:	601a      	str	r2, [r3, #0]
}
 8003d02:	bf00      	nop
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	200001bc 	.word	0x200001bc

08003d10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003d18:	f000 f852 	bl	8003dc0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d1c:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <prvIdleTask+0x28>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d9f9      	bls.n	8003d18 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003d24:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <prvIdleTask+0x2c>)
 8003d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d2a:	601a      	str	r2, [r3, #0]
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003d34:	e7f0      	b.n	8003d18 <prvIdleTask+0x8>
 8003d36:	bf00      	nop
 8003d38:	200000d4 	.word	0x200000d4
 8003d3c:	e000ed04 	.word	0xe000ed04

08003d40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d46:	2300      	movs	r3, #0
 8003d48:	607b      	str	r3, [r7, #4]
 8003d4a:	e00c      	b.n	8003d66 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4413      	add	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4a12      	ldr	r2, [pc, #72]	; (8003da0 <prvInitialiseTaskLists+0x60>)
 8003d58:	4413      	add	r3, r2
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fe fb42 	bl	80023e4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3301      	adds	r3, #1
 8003d64:	607b      	str	r3, [r7, #4]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b04      	cmp	r3, #4
 8003d6a:	d9ef      	bls.n	8003d4c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003d6c:	480d      	ldr	r0, [pc, #52]	; (8003da4 <prvInitialiseTaskLists+0x64>)
 8003d6e:	f7fe fb39 	bl	80023e4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003d72:	480d      	ldr	r0, [pc, #52]	; (8003da8 <prvInitialiseTaskLists+0x68>)
 8003d74:	f7fe fb36 	bl	80023e4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003d78:	480c      	ldr	r0, [pc, #48]	; (8003dac <prvInitialiseTaskLists+0x6c>)
 8003d7a:	f7fe fb33 	bl	80023e4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003d7e:	480c      	ldr	r0, [pc, #48]	; (8003db0 <prvInitialiseTaskLists+0x70>)
 8003d80:	f7fe fb30 	bl	80023e4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003d84:	480b      	ldr	r0, [pc, #44]	; (8003db4 <prvInitialiseTaskLists+0x74>)
 8003d86:	f7fe fb2d 	bl	80023e4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003d8a:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <prvInitialiseTaskLists+0x78>)
 8003d8c:	4a05      	ldr	r2, [pc, #20]	; (8003da4 <prvInitialiseTaskLists+0x64>)
 8003d8e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d90:	4b0a      	ldr	r3, [pc, #40]	; (8003dbc <prvInitialiseTaskLists+0x7c>)
 8003d92:	4a05      	ldr	r2, [pc, #20]	; (8003da8 <prvInitialiseTaskLists+0x68>)
 8003d94:	601a      	str	r2, [r3, #0]
}
 8003d96:	bf00      	nop
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	200000d4 	.word	0x200000d4
 8003da4:	20000138 	.word	0x20000138
 8003da8:	2000014c 	.word	0x2000014c
 8003dac:	20000168 	.word	0x20000168
 8003db0:	2000017c 	.word	0x2000017c
 8003db4:	20000194 	.word	0x20000194
 8003db8:	20000160 	.word	0x20000160
 8003dbc:	20000164 	.word	0x20000164

08003dc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003dc6:	e019      	b.n	8003dfc <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003dc8:	f000 fece 	bl	8004b68 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dcc:	4b10      	ldr	r3, [pc, #64]	; (8003e10 <prvCheckTasksWaitingTermination+0x50>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	3304      	adds	r3, #4
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7fe fb8d 	bl	80024f8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003dde:	4b0d      	ldr	r3, [pc, #52]	; (8003e14 <prvCheckTasksWaitingTermination+0x54>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	3b01      	subs	r3, #1
 8003de4:	4a0b      	ldr	r2, [pc, #44]	; (8003e14 <prvCheckTasksWaitingTermination+0x54>)
 8003de6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003de8:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <prvCheckTasksWaitingTermination+0x58>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	3b01      	subs	r3, #1
 8003dee:	4a0a      	ldr	r2, [pc, #40]	; (8003e18 <prvCheckTasksWaitingTermination+0x58>)
 8003df0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003df2:	f000 fee9 	bl	8004bc8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f810 	bl	8003e1c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003dfc:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <prvCheckTasksWaitingTermination+0x58>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1e1      	bne.n	8003dc8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003e04:	bf00      	nop
 8003e06:	bf00      	nop
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	2000017c 	.word	0x2000017c
 8003e14:	200001a8 	.word	0x200001a8
 8003e18:	20000190 	.word	0x20000190

08003e1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f001 f8a7 	bl	8004f7c <vPortFree>
                vPortFree( pxTCB );
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f001 f8a4 	bl	8004f7c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003e34:	bf00      	nop
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e40:	4b0a      	ldr	r3, [pc, #40]	; (8003e6c <prvResetNextTaskUnblockTime+0x30>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d104      	bne.n	8003e54 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003e4a:	4b09      	ldr	r3, [pc, #36]	; (8003e70 <prvResetNextTaskUnblockTime+0x34>)
 8003e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e50:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003e52:	e005      	b.n	8003e60 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003e54:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <prvResetNextTaskUnblockTime+0x30>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a04      	ldr	r2, [pc, #16]	; (8003e70 <prvResetNextTaskUnblockTime+0x34>)
 8003e5e:	6013      	str	r3, [r2, #0]
}
 8003e60:	bf00      	nop
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	20000160 	.word	0x20000160
 8003e70:	200001c8 	.word	0x200001c8

08003e74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003e7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <xTaskGetSchedulerState+0x34>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d102      	bne.n	8003e88 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003e82:	2301      	movs	r3, #1
 8003e84:	607b      	str	r3, [r7, #4]
 8003e86:	e008      	b.n	8003e9a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e88:	4b08      	ldr	r3, [pc, #32]	; (8003eac <xTaskGetSchedulerState+0x38>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d102      	bne.n	8003e96 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003e90:	2302      	movs	r3, #2
 8003e92:	607b      	str	r3, [r7, #4]
 8003e94:	e001      	b.n	8003e9a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003e96:	2300      	movs	r3, #0
 8003e98:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003e9a:	687b      	ldr	r3, [r7, #4]
    }
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	200001b4 	.word	0x200001b4
 8003eac:	200001d0 	.word	0x200001d0

08003eb0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d063      	beq.n	8003f8e <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eca:	4b33      	ldr	r3, [pc, #204]	; (8003f98 <xTaskPriorityInherit+0xe8>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d253      	bcs.n	8003f7c <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	db06      	blt.n	8003eea <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003edc:	4b2e      	ldr	r3, [pc, #184]	; (8003f98 <xTaskPriorityInherit+0xe8>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee2:	f1c3 0205 	rsb	r2, r3, #5
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	6959      	ldr	r1, [r3, #20]
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4a28      	ldr	r2, [pc, #160]	; (8003f9c <xTaskPriorityInherit+0xec>)
 8003efc:	4413      	add	r3, r2
 8003efe:	4299      	cmp	r1, r3
 8003f00:	d12f      	bne.n	8003f62 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	3304      	adds	r3, #4
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7fe faf6 	bl	80024f8 <uxListRemove>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10a      	bne.n	8003f28 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f16:	2201      	movs	r2, #1
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	43da      	mvns	r2, r3
 8003f1e:	4b20      	ldr	r3, [pc, #128]	; (8003fa0 <xTaskPriorityInherit+0xf0>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4013      	ands	r3, r2
 8003f24:	4a1e      	ldr	r2, [pc, #120]	; (8003fa0 <xTaskPriorityInherit+0xf0>)
 8003f26:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003f28:	4b1b      	ldr	r3, [pc, #108]	; (8003f98 <xTaskPriorityInherit+0xe8>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f36:	2201      	movs	r2, #1
 8003f38:	409a      	lsls	r2, r3
 8003f3a:	4b19      	ldr	r3, [pc, #100]	; (8003fa0 <xTaskPriorityInherit+0xf0>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	4a17      	ldr	r2, [pc, #92]	; (8003fa0 <xTaskPriorityInherit+0xf0>)
 8003f42:	6013      	str	r3, [r2, #0]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4a12      	ldr	r2, [pc, #72]	; (8003f9c <xTaskPriorityInherit+0xec>)
 8003f52:	441a      	add	r2, r3
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	3304      	adds	r3, #4
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4610      	mov	r0, r2
 8003f5c:	f7fe fa6f 	bl	800243e <vListInsertEnd>
 8003f60:	e004      	b.n	8003f6c <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003f62:	4b0d      	ldr	r3, [pc, #52]	; (8003f98 <xTaskPriorityInherit+0xe8>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4619      	mov	r1, r3
 8003f70:	2049      	movs	r0, #73	; 0x49
 8003f72:	f001 fead 	bl	8005cd0 <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8003f76:	2301      	movs	r3, #1
 8003f78:	60fb      	str	r3, [r7, #12]
 8003f7a:	e008      	b.n	8003f8e <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f80:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <xTaskPriorityInherit+0xe8>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d201      	bcs.n	8003f8e <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
    }
 8003f90:	4618      	mov	r0, r3
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	200000d0 	.word	0x200000d0
 8003f9c:	200000d4 	.word	0x200000d4
 8003fa0:	200001b0 	.word	0x200001b0

08003fa4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d068      	beq.n	800408c <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003fba:	4b37      	ldr	r3, [pc, #220]	; (8004098 <xTaskPriorityDisinherit+0xf4>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d00a      	beq.n	8003fda <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	60fb      	str	r3, [r7, #12]
    }
 8003fd6:	bf00      	nop
 8003fd8:	e7fe      	b.n	8003fd8 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10a      	bne.n	8003ff8 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe6:	f383 8811 	msr	BASEPRI, r3
 8003fea:	f3bf 8f6f 	isb	sy
 8003fee:	f3bf 8f4f 	dsb	sy
 8003ff2:	60bb      	str	r3, [r7, #8]
    }
 8003ff4:	bf00      	nop
 8003ff6:	e7fe      	b.n	8003ff6 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ffc:	1e5a      	subs	r2, r3, #1
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800400a:	429a      	cmp	r2, r3
 800400c:	d03e      	beq.n	800408c <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004012:	2b00      	cmp	r3, #0
 8004014:	d13a      	bne.n	800408c <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	3304      	adds	r3, #4
 800401a:	4618      	mov	r0, r3
 800401c:	f7fe fa6c 	bl	80024f8 <uxListRemove>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10a      	bne.n	800403c <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402a:	2201      	movs	r2, #1
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	43da      	mvns	r2, r3
 8004032:	4b1a      	ldr	r3, [pc, #104]	; (800409c <xTaskPriorityDisinherit+0xf8>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4013      	ands	r3, r2
 8004038:	4a18      	ldr	r2, [pc, #96]	; (800409c <xTaskPriorityDisinherit+0xf8>)
 800403a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4619      	mov	r1, r3
 8004040:	204a      	movs	r0, #74	; 0x4a
 8004042:	f001 fe45 	bl	8005cd0 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004052:	f1c3 0205 	rsb	r2, r3, #5
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405e:	2201      	movs	r2, #1
 8004060:	409a      	lsls	r2, r3
 8004062:	4b0e      	ldr	r3, [pc, #56]	; (800409c <xTaskPriorityDisinherit+0xf8>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4313      	orrs	r3, r2
 8004068:	4a0c      	ldr	r2, [pc, #48]	; (800409c <xTaskPriorityDisinherit+0xf8>)
 800406a:	6013      	str	r3, [r2, #0]
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004070:	4613      	mov	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	4413      	add	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4a09      	ldr	r2, [pc, #36]	; (80040a0 <xTaskPriorityDisinherit+0xfc>)
 800407a:	441a      	add	r2, r3
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	3304      	adds	r3, #4
 8004080:	4619      	mov	r1, r3
 8004082:	4610      	mov	r0, r2
 8004084:	f7fe f9db 	bl	800243e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004088:	2301      	movs	r3, #1
 800408a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800408c:	697b      	ldr	r3, [r7, #20]
    }
 800408e:	4618      	mov	r0, r3
 8004090:	3718      	adds	r7, #24
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	200000d0 	.word	0x200000d0
 800409c:	200001b0 	.word	0x200001b0
 80040a0:	200000d4 	.word	0x200000d4

080040a4 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b088      	sub	sp, #32
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80040b2:	2301      	movs	r3, #1
 80040b4:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 8081 	beq.w	80041c0 <vTaskPriorityDisinheritAfterTimeout+0x11c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10a      	bne.n	80040dc <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 80040c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ca:	f383 8811 	msr	BASEPRI, r3
 80040ce:	f3bf 8f6f 	isb	sy
 80040d2:	f3bf 8f4f 	dsb	sy
 80040d6:	60fb      	str	r3, [r7, #12]
    }
 80040d8:	bf00      	nop
 80040da:	e7fe      	b.n	80040da <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d902      	bls.n	80040ec <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	61fb      	str	r3, [r7, #28]
 80040ea:	e002      	b.n	80040f2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040f0:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f6:	69fa      	ldr	r2, [r7, #28]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d061      	beq.n	80041c0 <vTaskPriorityDisinheritAfterTimeout+0x11c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	429a      	cmp	r2, r3
 8004104:	d15c      	bne.n	80041c0 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8004106:	4b30      	ldr	r3, [pc, #192]	; (80041c8 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	429a      	cmp	r2, r3
 800410e:	d10a      	bne.n	8004126 <vTaskPriorityDisinheritAfterTimeout+0x82>
        __asm volatile
 8004110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004114:	f383 8811 	msr	BASEPRI, r3
 8004118:	f3bf 8f6f 	isb	sy
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	60bb      	str	r3, [r7, #8]
    }
 8004122:	bf00      	nop
 8004124:	e7fe      	b.n	8004124 <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4619      	mov	r1, r3
 800412a:	204a      	movs	r0, #74	; 0x4a
 800412c:	f001 fdd0 	bl	8005cd0 <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004134:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	69fa      	ldr	r2, [r7, #28]
 800413a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	2b00      	cmp	r3, #0
 8004142:	db04      	blt.n	800414e <vTaskPriorityDisinheritAfterTimeout+0xaa>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	f1c3 0205 	rsb	r2, r3, #5
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	6959      	ldr	r1, [r3, #20]
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	4613      	mov	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4a1b      	ldr	r2, [pc, #108]	; (80041cc <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800415e:	4413      	add	r3, r2
 8004160:	4299      	cmp	r1, r3
 8004162:	d12d      	bne.n	80041c0 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	3304      	adds	r3, #4
 8004168:	4618      	mov	r0, r3
 800416a:	f7fe f9c5 	bl	80024f8 <uxListRemove>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10a      	bne.n	800418a <vTaskPriorityDisinheritAfterTimeout+0xe6>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004178:	2201      	movs	r2, #1
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	43da      	mvns	r2, r3
 8004180:	4b13      	ldr	r3, [pc, #76]	; (80041d0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4013      	ands	r3, r2
 8004186:	4a12      	ldr	r2, [pc, #72]	; (80041d0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004188:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	4618      	mov	r0, r3
 800418e:	f002 fb1f 	bl	80067d0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004196:	2201      	movs	r2, #1
 8004198:	409a      	lsls	r2, r3
 800419a:	4b0d      	ldr	r3, [pc, #52]	; (80041d0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4313      	orrs	r3, r2
 80041a0:	4a0b      	ldr	r2, [pc, #44]	; (80041d0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a8:	4613      	mov	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4a06      	ldr	r2, [pc, #24]	; (80041cc <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80041b2:	441a      	add	r2, r3
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	3304      	adds	r3, #4
 80041b8:	4619      	mov	r1, r3
 80041ba:	4610      	mov	r0, r2
 80041bc:	f7fe f93f 	bl	800243e <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80041c0:	bf00      	nop
 80041c2:	3720      	adds	r7, #32
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	200000d0 	.word	0x200000d0
 80041cc:	200000d4 	.word	0x200000d4
 80041d0:	200001b0 	.word	0x200001b0

080041d4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 80041d8:	4b07      	ldr	r3, [pc, #28]	; (80041f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d004      	beq.n	80041ea <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 80041e0:	4b05      	ldr	r3, [pc, #20]	; (80041f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041e6:	3201      	adds	r2, #1
 80041e8:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 80041ea:	4b03      	ldr	r3, [pc, #12]	; (80041f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80041ec:	681b      	ldr	r3, [r3, #0]
    }
 80041ee:	4618      	mov	r0, r3
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	200000d0 	.word	0x200000d0

080041fc <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004206:	4b32      	ldr	r3, [pc, #200]	; (80042d0 <prvAddCurrentTaskToDelayedList+0xd4>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800420c:	4b31      	ldr	r3, [pc, #196]	; (80042d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	3304      	adds	r3, #4
 8004212:	4618      	mov	r0, r3
 8004214:	f7fe f970 	bl	80024f8 <uxListRemove>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10b      	bne.n	8004236 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800421e:	4b2d      	ldr	r3, [pc, #180]	; (80042d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004224:	2201      	movs	r2, #1
 8004226:	fa02 f303 	lsl.w	r3, r2, r3
 800422a:	43da      	mvns	r2, r3
 800422c:	4b2a      	ldr	r3, [pc, #168]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xdc>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4013      	ands	r3, r2
 8004232:	4a29      	ldr	r2, [pc, #164]	; (80042d8 <prvAddCurrentTaskToDelayedList+0xdc>)
 8004234:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423c:	d110      	bne.n	8004260 <prvAddCurrentTaskToDelayedList+0x64>
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00d      	beq.n	8004260 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8004244:	4b23      	ldr	r3, [pc, #140]	; (80042d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	211b      	movs	r1, #27
 800424a:	4618      	mov	r0, r3
 800424c:	f002 fb02 	bl	8006854 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004250:	4b20      	ldr	r3, [pc, #128]	; (80042d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	3304      	adds	r3, #4
 8004256:	4619      	mov	r1, r3
 8004258:	4820      	ldr	r0, [pc, #128]	; (80042dc <prvAddCurrentTaskToDelayedList+0xe0>)
 800425a:	f7fe f8f0 	bl	800243e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800425e:	e032      	b.n	80042c6 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4413      	add	r3, r2
 8004266:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004268:	4b1a      	ldr	r3, [pc, #104]	; (80042d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	429a      	cmp	r2, r3
 8004276:	d20f      	bcs.n	8004298 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004278:	4b16      	ldr	r3, [pc, #88]	; (80042d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2104      	movs	r1, #4
 800427e:	4618      	mov	r0, r3
 8004280:	f002 fae8 	bl	8006854 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004284:	4b16      	ldr	r3, [pc, #88]	; (80042e0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	4b12      	ldr	r3, [pc, #72]	; (80042d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3304      	adds	r3, #4
 800428e:	4619      	mov	r1, r3
 8004290:	4610      	mov	r0, r2
 8004292:	f7fe f8f8 	bl	8002486 <vListInsert>
}
 8004296:	e016      	b.n	80042c6 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8004298:	4b0e      	ldr	r3, [pc, #56]	; (80042d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2104      	movs	r1, #4
 800429e:	4618      	mov	r0, r3
 80042a0:	f002 fad8 	bl	8006854 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042a4:	4b0f      	ldr	r3, [pc, #60]	; (80042e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	4b0a      	ldr	r3, [pc, #40]	; (80042d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	3304      	adds	r3, #4
 80042ae:	4619      	mov	r1, r3
 80042b0:	4610      	mov	r0, r2
 80042b2:	f7fe f8e8 	bl	8002486 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80042b6:	4b0c      	ldr	r3, [pc, #48]	; (80042e8 <prvAddCurrentTaskToDelayedList+0xec>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d202      	bcs.n	80042c6 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80042c0:	4a09      	ldr	r2, [pc, #36]	; (80042e8 <prvAddCurrentTaskToDelayedList+0xec>)
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	6013      	str	r3, [r2, #0]
}
 80042c6:	bf00      	nop
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	200001ac 	.word	0x200001ac
 80042d4:	200000d0 	.word	0x200000d0
 80042d8:	200001b0 	.word	0x200001b0
 80042dc:	20000194 	.word	0x20000194
 80042e0:	20000164 	.word	0x20000164
 80042e4:	20000160 	.word	0x20000160
 80042e8:	200001c8 	.word	0x200001c8

080042ec <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80042f2:	2300      	movs	r3, #0
 80042f4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80042f6:	f000 fad5 	bl	80048a4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80042fa:	4b11      	ldr	r3, [pc, #68]	; (8004340 <xTimerCreateTimerTask+0x54>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00b      	beq.n	800431a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004302:	4b10      	ldr	r3, [pc, #64]	; (8004344 <xTimerCreateTimerTask+0x58>)
 8004304:	9301      	str	r3, [sp, #4]
 8004306:	2302      	movs	r3, #2
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	2300      	movs	r3, #0
 800430c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004310:	490d      	ldr	r1, [pc, #52]	; (8004348 <xTimerCreateTimerTask+0x5c>)
 8004312:	480e      	ldr	r0, [pc, #56]	; (800434c <xTimerCreateTimerTask+0x60>)
 8004314:	f7fe ffc8 	bl	80032a8 <xTaskCreate>
 8004318:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10a      	bne.n	8004336 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004324:	f383 8811 	msr	BASEPRI, r3
 8004328:	f3bf 8f6f 	isb	sy
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	603b      	str	r3, [r7, #0]
    }
 8004332:	bf00      	nop
 8004334:	e7fe      	b.n	8004334 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004336:	687b      	ldr	r3, [r7, #4]
    }
 8004338:	4618      	mov	r0, r3
 800433a:	3708      	adds	r7, #8
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	20000204 	.word	0x20000204
 8004344:	20000208 	.word	0x20000208
 8004348:	08006f7c 	.word	0x08006f7c
 800434c:	08004485 	.word	0x08004485

08004350 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8004350:	b580      	push	{r7, lr}
 8004352:	b08a      	sub	sp, #40	; 0x28
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
 800435c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800435e:	2300      	movs	r3, #0
 8004360:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10a      	bne.n	800437e <xTimerGenericCommand+0x2e>
        __asm volatile
 8004368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436c:	f383 8811 	msr	BASEPRI, r3
 8004370:	f3bf 8f6f 	isb	sy
 8004374:	f3bf 8f4f 	dsb	sy
 8004378:	623b      	str	r3, [r7, #32]
    }
 800437a:	bf00      	nop
 800437c:	e7fe      	b.n	800437c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800437e:	4b1a      	ldr	r3, [pc, #104]	; (80043e8 <xTimerGenericCommand+0x98>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d02a      	beq.n	80043dc <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	2b05      	cmp	r3, #5
 8004396:	dc18      	bgt.n	80043ca <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004398:	f7ff fd6c 	bl	8003e74 <xTaskGetSchedulerState>
 800439c:	4603      	mov	r3, r0
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d109      	bne.n	80043b6 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80043a2:	4b11      	ldr	r3, [pc, #68]	; (80043e8 <xTimerGenericCommand+0x98>)
 80043a4:	6818      	ldr	r0, [r3, #0]
 80043a6:	f107 0114 	add.w	r1, r7, #20
 80043aa:	2300      	movs	r3, #0
 80043ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043ae:	f7fe f9bd 	bl	800272c <xQueueGenericSend>
 80043b2:	6278      	str	r0, [r7, #36]	; 0x24
 80043b4:	e012      	b.n	80043dc <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80043b6:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <xTimerGenericCommand+0x98>)
 80043b8:	6818      	ldr	r0, [r3, #0]
 80043ba:	f107 0114 	add.w	r1, r7, #20
 80043be:	2300      	movs	r3, #0
 80043c0:	2200      	movs	r2, #0
 80043c2:	f7fe f9b3 	bl	800272c <xQueueGenericSend>
 80043c6:	6278      	str	r0, [r7, #36]	; 0x24
 80043c8:	e008      	b.n	80043dc <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80043ca:	4b07      	ldr	r3, [pc, #28]	; (80043e8 <xTimerGenericCommand+0x98>)
 80043cc:	6818      	ldr	r0, [r3, #0]
 80043ce:	f107 0114 	add.w	r1, r7, #20
 80043d2:	2300      	movs	r3, #0
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	f7fe facf 	bl	8002978 <xQueueGenericSendFromISR>
 80043da:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80043dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80043de:	4618      	mov	r0, r3
 80043e0:	3728      	adds	r7, #40	; 0x28
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	20000204 	.word	0x20000204

080043ec <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b088      	sub	sp, #32
 80043f0:	af02      	add	r7, sp, #8
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043f6:	4b22      	ldr	r3, [pc, #136]	; (8004480 <prvProcessExpiredTimer+0x94>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	3304      	adds	r3, #4
 8004404:	4618      	mov	r0, r3
 8004406:	f7fe f877 	bl	80024f8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004410:	f003 0304 	and.w	r3, r3, #4
 8004414:	2b00      	cmp	r3, #0
 8004416:	d022      	beq.n	800445e <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	699a      	ldr	r2, [r3, #24]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	18d1      	adds	r1, r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	6978      	ldr	r0, [r7, #20]
 8004426:	f000 f8d1 	bl	80045cc <prvInsertTimerInActiveList>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d01f      	beq.n	8004470 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004430:	2300      	movs	r3, #0
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	2300      	movs	r3, #0
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	2100      	movs	r1, #0
 800443a:	6978      	ldr	r0, [r7, #20]
 800443c:	f7ff ff88 	bl	8004350 <xTimerGenericCommand>
 8004440:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d113      	bne.n	8004470 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8004448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444c:	f383 8811 	msr	BASEPRI, r3
 8004450:	f3bf 8f6f 	isb	sy
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	60fb      	str	r3, [r7, #12]
    }
 800445a:	bf00      	nop
 800445c:	e7fe      	b.n	800445c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004464:	f023 0301 	bic.w	r3, r3, #1
 8004468:	b2da      	uxtb	r2, r3
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	6978      	ldr	r0, [r7, #20]
 8004476:	4798      	blx	r3
    }
 8004478:	bf00      	nop
 800447a:	3718      	adds	r7, #24
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	200001fc 	.word	0x200001fc

08004484 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800448c:	f107 0308 	add.w	r3, r7, #8
 8004490:	4618      	mov	r0, r3
 8004492:	f000 f857 	bl	8004544 <prvGetNextExpireTime>
 8004496:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	4619      	mov	r1, r3
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 f803 	bl	80044a8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80044a2:	f000 f8d5 	bl	8004650 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044a6:	e7f1      	b.n	800448c <prvTimerTask+0x8>

080044a8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80044b2:	f7ff f8f7 	bl	80036a4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80044b6:	f107 0308 	add.w	r3, r7, #8
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 f866 	bl	800458c <prvSampleTimeNow>
 80044c0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d130      	bne.n	800452a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10a      	bne.n	80044e4 <prvProcessTimerOrBlockTask+0x3c>
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d806      	bhi.n	80044e4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80044d6:	f7ff f8f3 	bl	80036c0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80044da:	68f9      	ldr	r1, [r7, #12]
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f7ff ff85 	bl	80043ec <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80044e2:	e024      	b.n	800452e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d008      	beq.n	80044fc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80044ea:	4b13      	ldr	r3, [pc, #76]	; (8004538 <prvProcessTimerOrBlockTask+0x90>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <prvProcessTimerOrBlockTask+0x50>
 80044f4:	2301      	movs	r3, #1
 80044f6:	e000      	b.n	80044fa <prvProcessTimerOrBlockTask+0x52>
 80044f8:	2300      	movs	r3, #0
 80044fa:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80044fc:	4b0f      	ldr	r3, [pc, #60]	; (800453c <prvProcessTimerOrBlockTask+0x94>)
 80044fe:	6818      	ldr	r0, [r3, #0]
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	4619      	mov	r1, r3
 800450a:	f7fe fe99 	bl	8003240 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800450e:	f7ff f8d7 	bl	80036c0 <xTaskResumeAll>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10a      	bne.n	800452e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004518:	4b09      	ldr	r3, [pc, #36]	; (8004540 <prvProcessTimerOrBlockTask+0x98>)
 800451a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800451e:	601a      	str	r2, [r3, #0]
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	f3bf 8f6f 	isb	sy
    }
 8004528:	e001      	b.n	800452e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800452a:	f7ff f8c9 	bl	80036c0 <xTaskResumeAll>
    }
 800452e:	bf00      	nop
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	20000200 	.word	0x20000200
 800453c:	20000204 	.word	0x20000204
 8004540:	e000ed04 	.word	0xe000ed04

08004544 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800454c:	4b0e      	ldr	r3, [pc, #56]	; (8004588 <prvGetNextExpireTime+0x44>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <prvGetNextExpireTime+0x16>
 8004556:	2201      	movs	r2, #1
 8004558:	e000      	b.n	800455c <prvGetNextExpireTime+0x18>
 800455a:	2200      	movs	r2, #0
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d105      	bne.n	8004574 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004568:	4b07      	ldr	r3, [pc, #28]	; (8004588 <prvGetNextExpireTime+0x44>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	e001      	b.n	8004578 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004574:	2300      	movs	r3, #0
 8004576:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004578:	68fb      	ldr	r3, [r7, #12]
    }
 800457a:	4618      	mov	r0, r3
 800457c:	3714      	adds	r7, #20
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	200001fc 	.word	0x200001fc

0800458c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004594:	f7ff f934 	bl	8003800 <xTaskGetTickCount>
 8004598:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800459a:	4b0b      	ldr	r3, [pc, #44]	; (80045c8 <prvSampleTimeNow+0x3c>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d205      	bcs.n	80045b0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80045a4:	f000 f91a 	bl	80047dc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	601a      	str	r2, [r3, #0]
 80045ae:	e002      	b.n	80045b6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80045b6:	4a04      	ldr	r2, [pc, #16]	; (80045c8 <prvSampleTimeNow+0x3c>)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80045bc:	68fb      	ldr	r3, [r7, #12]
    }
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	2000020c 	.word	0x2000020c

080045cc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
 80045d8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80045da:	2300      	movs	r3, #0
 80045dc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d812      	bhi.n	8004618 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	1ad2      	subs	r2, r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d302      	bcc.n	8004606 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004600:	2301      	movs	r3, #1
 8004602:	617b      	str	r3, [r7, #20]
 8004604:	e01b      	b.n	800463e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004606:	4b10      	ldr	r3, [pc, #64]	; (8004648 <prvInsertTimerInActiveList+0x7c>)
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	3304      	adds	r3, #4
 800460e:	4619      	mov	r1, r3
 8004610:	4610      	mov	r0, r2
 8004612:	f7fd ff38 	bl	8002486 <vListInsert>
 8004616:	e012      	b.n	800463e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	429a      	cmp	r2, r3
 800461e:	d206      	bcs.n	800462e <prvInsertTimerInActiveList+0x62>
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	429a      	cmp	r2, r3
 8004626:	d302      	bcc.n	800462e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004628:	2301      	movs	r3, #1
 800462a:	617b      	str	r3, [r7, #20]
 800462c:	e007      	b.n	800463e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800462e:	4b07      	ldr	r3, [pc, #28]	; (800464c <prvInsertTimerInActiveList+0x80>)
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	3304      	adds	r3, #4
 8004636:	4619      	mov	r1, r3
 8004638:	4610      	mov	r0, r2
 800463a:	f7fd ff24 	bl	8002486 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800463e:	697b      	ldr	r3, [r7, #20]
    }
 8004640:	4618      	mov	r0, r3
 8004642:	3718      	adds	r7, #24
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	20000200 	.word	0x20000200
 800464c:	200001fc 	.word	0x200001fc

08004650 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004650:	b580      	push	{r7, lr}
 8004652:	b08c      	sub	sp, #48	; 0x30
 8004654:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004656:	e0ae      	b.n	80047b6 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2b00      	cmp	r3, #0
 800465c:	f2c0 80aa 	blt.w	80047b4 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d004      	beq.n	8004676 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	3304      	adds	r3, #4
 8004670:	4618      	mov	r0, r3
 8004672:	f7fd ff41 	bl	80024f8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004676:	1d3b      	adds	r3, r7, #4
 8004678:	4618      	mov	r0, r3
 800467a:	f7ff ff87 	bl	800458c <prvSampleTimeNow>
 800467e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2b09      	cmp	r3, #9
 8004684:	f200 8097 	bhi.w	80047b6 <prvProcessReceivedCommands+0x166>
 8004688:	a201      	add	r2, pc, #4	; (adr r2, 8004690 <prvProcessReceivedCommands+0x40>)
 800468a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468e:	bf00      	nop
 8004690:	080046b9 	.word	0x080046b9
 8004694:	080046b9 	.word	0x080046b9
 8004698:	080046b9 	.word	0x080046b9
 800469c:	0800472d 	.word	0x0800472d
 80046a0:	08004741 	.word	0x08004741
 80046a4:	0800478b 	.word	0x0800478b
 80046a8:	080046b9 	.word	0x080046b9
 80046ac:	080046b9 	.word	0x080046b9
 80046b0:	0800472d 	.word	0x0800472d
 80046b4:	08004741 	.word	0x08004741
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80046b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046be:	f043 0301 	orr.w	r3, r3, #1
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	18d1      	adds	r1, r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6a3a      	ldr	r2, [r7, #32]
 80046d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046d8:	f7ff ff78 	bl	80045cc <prvInsertTimerInActiveList>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d069      	beq.n	80047b6 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046e8:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046f0:	f003 0304 	and.w	r3, r3, #4
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d05e      	beq.n	80047b6 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	441a      	add	r2, r3
 8004700:	2300      	movs	r3, #0
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	2300      	movs	r3, #0
 8004706:	2100      	movs	r1, #0
 8004708:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800470a:	f7ff fe21 	bl	8004350 <xTimerGenericCommand>
 800470e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d14f      	bne.n	80047b6 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8004716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471a:	f383 8811 	msr	BASEPRI, r3
 800471e:	f3bf 8f6f 	isb	sy
 8004722:	f3bf 8f4f 	dsb	sy
 8004726:	61bb      	str	r3, [r7, #24]
    }
 8004728:	bf00      	nop
 800472a:	e7fe      	b.n	800472a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004732:	f023 0301 	bic.w	r3, r3, #1
 8004736:	b2da      	uxtb	r2, r3
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800473e:	e03a      	b.n	80047b6 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004746:	f043 0301 	orr.w	r3, r3, #1
 800474a:	b2da      	uxtb	r2, r3
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10a      	bne.n	8004776 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004764:	f383 8811 	msr	BASEPRI, r3
 8004768:	f3bf 8f6f 	isb	sy
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	617b      	str	r3, [r7, #20]
    }
 8004772:	bf00      	nop
 8004774:	e7fe      	b.n	8004774 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	699a      	ldr	r2, [r3, #24]
 800477a:	6a3b      	ldr	r3, [r7, #32]
 800477c:	18d1      	adds	r1, r2, r3
 800477e:	6a3b      	ldr	r3, [r7, #32]
 8004780:	6a3a      	ldr	r2, [r7, #32]
 8004782:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004784:	f7ff ff22 	bl	80045cc <prvInsertTimerInActiveList>
                        break;
 8004788:	e015      	b.n	80047b6 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d103      	bne.n	80047a0 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8004798:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800479a:	f000 fbef 	bl	8004f7c <vPortFree>
 800479e:	e00a      	b.n	80047b6 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047a6:	f023 0301 	bic.w	r3, r3, #1
 80047aa:	b2da      	uxtb	r2, r3
 80047ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80047b2:	e000      	b.n	80047b6 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80047b4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047b6:	4b08      	ldr	r3, [pc, #32]	; (80047d8 <prvProcessReceivedCommands+0x188>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f107 0108 	add.w	r1, r7, #8
 80047be:	2200      	movs	r2, #0
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7fe f997 	bl	8002af4 <xQueueReceive>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f47f af45 	bne.w	8004658 <prvProcessReceivedCommands+0x8>
        }
    }
 80047ce:	bf00      	nop
 80047d0:	bf00      	nop
 80047d2:	3728      	adds	r7, #40	; 0x28
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	20000204 	.word	0x20000204

080047dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80047dc:	b580      	push	{r7, lr}
 80047de:	b088      	sub	sp, #32
 80047e0:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80047e2:	e048      	b.n	8004876 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047e4:	4b2d      	ldr	r3, [pc, #180]	; (800489c <prvSwitchTimerLists+0xc0>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047ee:	4b2b      	ldr	r3, [pc, #172]	; (800489c <prvSwitchTimerLists+0xc0>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	3304      	adds	r3, #4
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7fd fe7b 	bl	80024f8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b00      	cmp	r3, #0
 8004816:	d02e      	beq.n	8004876 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	4413      	add	r3, r2
 8004820:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	429a      	cmp	r2, r3
 8004828:	d90e      	bls.n	8004848 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004836:	4b19      	ldr	r3, [pc, #100]	; (800489c <prvSwitchTimerLists+0xc0>)
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	3304      	adds	r3, #4
 800483e:	4619      	mov	r1, r3
 8004840:	4610      	mov	r0, r2
 8004842:	f7fd fe20 	bl	8002486 <vListInsert>
 8004846:	e016      	b.n	8004876 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004848:	2300      	movs	r3, #0
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	2300      	movs	r3, #0
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	2100      	movs	r1, #0
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f7ff fd7c 	bl	8004350 <xTimerGenericCommand>
 8004858:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10a      	bne.n	8004876 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004864:	f383 8811 	msr	BASEPRI, r3
 8004868:	f3bf 8f6f 	isb	sy
 800486c:	f3bf 8f4f 	dsb	sy
 8004870:	603b      	str	r3, [r7, #0]
    }
 8004872:	bf00      	nop
 8004874:	e7fe      	b.n	8004874 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004876:	4b09      	ldr	r3, [pc, #36]	; (800489c <prvSwitchTimerLists+0xc0>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1b1      	bne.n	80047e4 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004880:	4b06      	ldr	r3, [pc, #24]	; (800489c <prvSwitchTimerLists+0xc0>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004886:	4b06      	ldr	r3, [pc, #24]	; (80048a0 <prvSwitchTimerLists+0xc4>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a04      	ldr	r2, [pc, #16]	; (800489c <prvSwitchTimerLists+0xc0>)
 800488c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800488e:	4a04      	ldr	r2, [pc, #16]	; (80048a0 <prvSwitchTimerLists+0xc4>)
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	6013      	str	r3, [r2, #0]
    }
 8004894:	bf00      	nop
 8004896:	3718      	adds	r7, #24
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	200001fc 	.word	0x200001fc
 80048a0:	20000200 	.word	0x20000200

080048a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80048a4:	b580      	push	{r7, lr}
 80048a6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80048a8:	f000 f95e 	bl	8004b68 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80048ac:	4b12      	ldr	r3, [pc, #72]	; (80048f8 <prvCheckForValidListAndQueue+0x54>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d11d      	bne.n	80048f0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80048b4:	4811      	ldr	r0, [pc, #68]	; (80048fc <prvCheckForValidListAndQueue+0x58>)
 80048b6:	f7fd fd95 	bl	80023e4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80048ba:	4811      	ldr	r0, [pc, #68]	; (8004900 <prvCheckForValidListAndQueue+0x5c>)
 80048bc:	f7fd fd92 	bl	80023e4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80048c0:	4b10      	ldr	r3, [pc, #64]	; (8004904 <prvCheckForValidListAndQueue+0x60>)
 80048c2:	4a0e      	ldr	r2, [pc, #56]	; (80048fc <prvCheckForValidListAndQueue+0x58>)
 80048c4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80048c6:	4b10      	ldr	r3, [pc, #64]	; (8004908 <prvCheckForValidListAndQueue+0x64>)
 80048c8:	4a0d      	ldr	r2, [pc, #52]	; (8004900 <prvCheckForValidListAndQueue+0x5c>)
 80048ca:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80048cc:	2200      	movs	r2, #0
 80048ce:	210c      	movs	r1, #12
 80048d0:	200a      	movs	r0, #10
 80048d2:	f7fd fea3 	bl	800261c <xQueueGenericCreate>
 80048d6:	4603      	mov	r3, r0
 80048d8:	4a07      	ldr	r2, [pc, #28]	; (80048f8 <prvCheckForValidListAndQueue+0x54>)
 80048da:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80048dc:	4b06      	ldr	r3, [pc, #24]	; (80048f8 <prvCheckForValidListAndQueue+0x54>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d005      	beq.n	80048f0 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80048e4:	4b04      	ldr	r3, [pc, #16]	; (80048f8 <prvCheckForValidListAndQueue+0x54>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4908      	ldr	r1, [pc, #32]	; (800490c <prvCheckForValidListAndQueue+0x68>)
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fe fc76 	bl	80031dc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80048f0:	f000 f96a 	bl	8004bc8 <vPortExitCritical>
    }
 80048f4:	bf00      	nop
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	20000204 	.word	0x20000204
 80048fc:	200001d4 	.word	0x200001d4
 8004900:	200001e8 	.word	0x200001e8
 8004904:	200001fc 	.word	0x200001fc
 8004908:	20000200 	.word	0x20000200
 800490c:	08006f84 	.word	0x08006f84

08004910 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	3b04      	subs	r3, #4
 8004920:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004928:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	3b04      	subs	r3, #4
 800492e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f023 0201 	bic.w	r2, r3, #1
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	3b04      	subs	r3, #4
 800493e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004940:	4a0c      	ldr	r2, [pc, #48]	; (8004974 <pxPortInitialiseStack+0x64>)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	3b14      	subs	r3, #20
 800494a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	3b04      	subs	r3, #4
 8004956:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f06f 0202 	mvn.w	r2, #2
 800495e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	3b20      	subs	r3, #32
 8004964:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004966:	68fb      	ldr	r3, [r7, #12]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr
 8004974:	08004979 	.word	0x08004979

08004978 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800497e:	2300      	movs	r3, #0
 8004980:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004982:	4b12      	ldr	r3, [pc, #72]	; (80049cc <prvTaskExitError+0x54>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498a:	d00a      	beq.n	80049a2 <prvTaskExitError+0x2a>
        __asm volatile
 800498c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	60fb      	str	r3, [r7, #12]
    }
 800499e:	bf00      	nop
 80049a0:	e7fe      	b.n	80049a0 <prvTaskExitError+0x28>
        __asm volatile
 80049a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a6:	f383 8811 	msr	BASEPRI, r3
 80049aa:	f3bf 8f6f 	isb	sy
 80049ae:	f3bf 8f4f 	dsb	sy
 80049b2:	60bb      	str	r3, [r7, #8]
    }
 80049b4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80049b6:	bf00      	nop
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d0fc      	beq.n	80049b8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80049be:	bf00      	nop
 80049c0:	bf00      	nop
 80049c2:	3714      	adds	r7, #20
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	20000020 	.word	0x20000020

080049d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80049d0:	4b07      	ldr	r3, [pc, #28]	; (80049f0 <pxCurrentTCBConst2>)
 80049d2:	6819      	ldr	r1, [r3, #0]
 80049d4:	6808      	ldr	r0, [r1, #0]
 80049d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049da:	f380 8809 	msr	PSP, r0
 80049de:	f3bf 8f6f 	isb	sy
 80049e2:	f04f 0000 	mov.w	r0, #0
 80049e6:	f380 8811 	msr	BASEPRI, r0
 80049ea:	4770      	bx	lr
 80049ec:	f3af 8000 	nop.w

080049f0 <pxCurrentTCBConst2>:
 80049f0:	200000d0 	.word	0x200000d0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80049f4:	bf00      	nop
 80049f6:	bf00      	nop

080049f8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80049f8:	4808      	ldr	r0, [pc, #32]	; (8004a1c <prvPortStartFirstTask+0x24>)
 80049fa:	6800      	ldr	r0, [r0, #0]
 80049fc:	6800      	ldr	r0, [r0, #0]
 80049fe:	f380 8808 	msr	MSP, r0
 8004a02:	f04f 0000 	mov.w	r0, #0
 8004a06:	f380 8814 	msr	CONTROL, r0
 8004a0a:	b662      	cpsie	i
 8004a0c:	b661      	cpsie	f
 8004a0e:	f3bf 8f4f 	dsb	sy
 8004a12:	f3bf 8f6f 	isb	sy
 8004a16:	df00      	svc	0
 8004a18:	bf00      	nop
 8004a1a:	0000      	.short	0x0000
 8004a1c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004a20:	bf00      	nop
 8004a22:	bf00      	nop

08004a24 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004a2a:	4b46      	ldr	r3, [pc, #280]	; (8004b44 <xPortStartScheduler+0x120>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a46      	ldr	r2, [pc, #280]	; (8004b48 <xPortStartScheduler+0x124>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d10a      	bne.n	8004a4a <xPortStartScheduler+0x26>
        __asm volatile
 8004a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a38:	f383 8811 	msr	BASEPRI, r3
 8004a3c:	f3bf 8f6f 	isb	sy
 8004a40:	f3bf 8f4f 	dsb	sy
 8004a44:	613b      	str	r3, [r7, #16]
    }
 8004a46:	bf00      	nop
 8004a48:	e7fe      	b.n	8004a48 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a4a:	4b3e      	ldr	r3, [pc, #248]	; (8004b44 <xPortStartScheduler+0x120>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a3f      	ldr	r2, [pc, #252]	; (8004b4c <xPortStartScheduler+0x128>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d10a      	bne.n	8004a6a <xPortStartScheduler+0x46>
        __asm volatile
 8004a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a58:	f383 8811 	msr	BASEPRI, r3
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	f3bf 8f4f 	dsb	sy
 8004a64:	60fb      	str	r3, [r7, #12]
    }
 8004a66:	bf00      	nop
 8004a68:	e7fe      	b.n	8004a68 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a6a:	4b39      	ldr	r3, [pc, #228]	; (8004b50 <xPortStartScheduler+0x12c>)
 8004a6c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	22ff      	movs	r2, #255	; 0xff
 8004a7a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a84:	78fb      	ldrb	r3, [r7, #3]
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a8c:	b2da      	uxtb	r2, r3
 8004a8e:	4b31      	ldr	r3, [pc, #196]	; (8004b54 <xPortStartScheduler+0x130>)
 8004a90:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a92:	4b31      	ldr	r3, [pc, #196]	; (8004b58 <xPortStartScheduler+0x134>)
 8004a94:	2207      	movs	r2, #7
 8004a96:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a98:	e009      	b.n	8004aae <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004a9a:	4b2f      	ldr	r3, [pc, #188]	; (8004b58 <xPortStartScheduler+0x134>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	4a2d      	ldr	r2, [pc, #180]	; (8004b58 <xPortStartScheduler+0x134>)
 8004aa2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004aa4:	78fb      	ldrb	r3, [r7, #3]
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004aae:	78fb      	ldrb	r3, [r7, #3]
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab6:	2b80      	cmp	r3, #128	; 0x80
 8004ab8:	d0ef      	beq.n	8004a9a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004aba:	4b27      	ldr	r3, [pc, #156]	; (8004b58 <xPortStartScheduler+0x134>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f1c3 0307 	rsb	r3, r3, #7
 8004ac2:	2b04      	cmp	r3, #4
 8004ac4:	d00a      	beq.n	8004adc <xPortStartScheduler+0xb8>
        __asm volatile
 8004ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aca:	f383 8811 	msr	BASEPRI, r3
 8004ace:	f3bf 8f6f 	isb	sy
 8004ad2:	f3bf 8f4f 	dsb	sy
 8004ad6:	60bb      	str	r3, [r7, #8]
    }
 8004ad8:	bf00      	nop
 8004ada:	e7fe      	b.n	8004ada <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004adc:	4b1e      	ldr	r3, [pc, #120]	; (8004b58 <xPortStartScheduler+0x134>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	021b      	lsls	r3, r3, #8
 8004ae2:	4a1d      	ldr	r2, [pc, #116]	; (8004b58 <xPortStartScheduler+0x134>)
 8004ae4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ae6:	4b1c      	ldr	r3, [pc, #112]	; (8004b58 <xPortStartScheduler+0x134>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004aee:	4a1a      	ldr	r2, [pc, #104]	; (8004b58 <xPortStartScheduler+0x134>)
 8004af0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004afa:	4b18      	ldr	r3, [pc, #96]	; (8004b5c <xPortStartScheduler+0x138>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a17      	ldr	r2, [pc, #92]	; (8004b5c <xPortStartScheduler+0x138>)
 8004b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b04:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004b06:	4b15      	ldr	r3, [pc, #84]	; (8004b5c <xPortStartScheduler+0x138>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a14      	ldr	r2, [pc, #80]	; (8004b5c <xPortStartScheduler+0x138>)
 8004b0c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004b10:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004b12:	f000 f8e3 	bl	8004cdc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004b16:	4b12      	ldr	r3, [pc, #72]	; (8004b60 <xPortStartScheduler+0x13c>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004b1c:	f000 f902 	bl	8004d24 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004b20:	4b10      	ldr	r3, [pc, #64]	; (8004b64 <xPortStartScheduler+0x140>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a0f      	ldr	r2, [pc, #60]	; (8004b64 <xPortStartScheduler+0x140>)
 8004b26:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004b2a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004b2c:	f7ff ff64 	bl	80049f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004b30:	f7fe ff44 	bl	80039bc <vTaskSwitchContext>
    prvTaskExitError();
 8004b34:	f7ff ff20 	bl	8004978 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3718      	adds	r7, #24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	e000ed00 	.word	0xe000ed00
 8004b48:	410fc271 	.word	0x410fc271
 8004b4c:	410fc270 	.word	0x410fc270
 8004b50:	e000e400 	.word	0xe000e400
 8004b54:	20000210 	.word	0x20000210
 8004b58:	20000214 	.word	0x20000214
 8004b5c:	e000ed20 	.word	0xe000ed20
 8004b60:	20000020 	.word	0x20000020
 8004b64:	e000ef34 	.word	0xe000ef34

08004b68 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
        __asm volatile
 8004b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b72:	f383 8811 	msr	BASEPRI, r3
 8004b76:	f3bf 8f6f 	isb	sy
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	607b      	str	r3, [r7, #4]
    }
 8004b80:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004b82:	4b0f      	ldr	r3, [pc, #60]	; (8004bc0 <vPortEnterCritical+0x58>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	3301      	adds	r3, #1
 8004b88:	4a0d      	ldr	r2, [pc, #52]	; (8004bc0 <vPortEnterCritical+0x58>)
 8004b8a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004b8c:	4b0c      	ldr	r3, [pc, #48]	; (8004bc0 <vPortEnterCritical+0x58>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d10f      	bne.n	8004bb4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b94:	4b0b      	ldr	r3, [pc, #44]	; (8004bc4 <vPortEnterCritical+0x5c>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00a      	beq.n	8004bb4 <vPortEnterCritical+0x4c>
        __asm volatile
 8004b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba2:	f383 8811 	msr	BASEPRI, r3
 8004ba6:	f3bf 8f6f 	isb	sy
 8004baa:	f3bf 8f4f 	dsb	sy
 8004bae:	603b      	str	r3, [r7, #0]
    }
 8004bb0:	bf00      	nop
 8004bb2:	e7fe      	b.n	8004bb2 <vPortEnterCritical+0x4a>
    }
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	20000020 	.word	0x20000020
 8004bc4:	e000ed04 	.word	0xe000ed04

08004bc8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004bce:	4b12      	ldr	r3, [pc, #72]	; (8004c18 <vPortExitCritical+0x50>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10a      	bne.n	8004bec <vPortExitCritical+0x24>
        __asm volatile
 8004bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bda:	f383 8811 	msr	BASEPRI, r3
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f3bf 8f4f 	dsb	sy
 8004be6:	607b      	str	r3, [r7, #4]
    }
 8004be8:	bf00      	nop
 8004bea:	e7fe      	b.n	8004bea <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004bec:	4b0a      	ldr	r3, [pc, #40]	; (8004c18 <vPortExitCritical+0x50>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	4a09      	ldr	r2, [pc, #36]	; (8004c18 <vPortExitCritical+0x50>)
 8004bf4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004bf6:	4b08      	ldr	r3, [pc, #32]	; (8004c18 <vPortExitCritical+0x50>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d105      	bne.n	8004c0a <vPortExitCritical+0x42>
 8004bfe:	2300      	movs	r3, #0
 8004c00:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	f383 8811 	msr	BASEPRI, r3
    }
 8004c08:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	20000020 	.word	0x20000020
 8004c1c:	00000000 	.word	0x00000000

08004c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004c20:	f3ef 8009 	mrs	r0, PSP
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	4b15      	ldr	r3, [pc, #84]	; (8004c80 <pxCurrentTCBConst>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	f01e 0f10 	tst.w	lr, #16
 8004c30:	bf08      	it	eq
 8004c32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c3a:	6010      	str	r0, [r2, #0]
 8004c3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004c44:	f380 8811 	msr	BASEPRI, r0
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	f3bf 8f6f 	isb	sy
 8004c50:	f7fe feb4 	bl	80039bc <vTaskSwitchContext>
 8004c54:	f04f 0000 	mov.w	r0, #0
 8004c58:	f380 8811 	msr	BASEPRI, r0
 8004c5c:	bc09      	pop	{r0, r3}
 8004c5e:	6819      	ldr	r1, [r3, #0]
 8004c60:	6808      	ldr	r0, [r1, #0]
 8004c62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c66:	f01e 0f10 	tst.w	lr, #16
 8004c6a:	bf08      	it	eq
 8004c6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004c70:	f380 8809 	msr	PSP, r0
 8004c74:	f3bf 8f6f 	isb	sy
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	f3af 8000 	nop.w

08004c80 <pxCurrentTCBConst>:
 8004c80:	200000d0 	.word	0x200000d0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004c84:	bf00      	nop
 8004c86:	bf00      	nop

08004c88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
        __asm volatile
 8004c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c92:	f383 8811 	msr	BASEPRI, r3
 8004c96:	f3bf 8f6f 	isb	sy
 8004c9a:	f3bf 8f4f 	dsb	sy
 8004c9e:	607b      	str	r3, [r7, #4]
    }
 8004ca0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004ca2:	f001 fc7b 	bl	800659c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004ca6:	f7fe fdcd 	bl	8003844 <xTaskIncrementTick>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d006      	beq.n	8004cbe <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004cb0:	f001 fcd2 	bl	8006658 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004cb4:	4b08      	ldr	r3, [pc, #32]	; (8004cd8 <SysTick_Handler+0x50>)
 8004cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	e001      	b.n	8004cc2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8004cbe:	f001 fcaf 	bl	8006620 <SEGGER_SYSVIEW_RecordExitISR>
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	f383 8811 	msr	BASEPRI, r3
    }
 8004ccc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8004cce:	bf00      	nop
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	e000ed04 	.word	0xe000ed04

08004cdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004cdc:	b480      	push	{r7}
 8004cde:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ce0:	4b0b      	ldr	r3, [pc, #44]	; (8004d10 <vPortSetupTimerInterrupt+0x34>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ce6:	4b0b      	ldr	r3, [pc, #44]	; (8004d14 <vPortSetupTimerInterrupt+0x38>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004cec:	4b0a      	ldr	r3, [pc, #40]	; (8004d18 <vPortSetupTimerInterrupt+0x3c>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a0a      	ldr	r2, [pc, #40]	; (8004d1c <vPortSetupTimerInterrupt+0x40>)
 8004cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf6:	099b      	lsrs	r3, r3, #6
 8004cf8:	4a09      	ldr	r2, [pc, #36]	; (8004d20 <vPortSetupTimerInterrupt+0x44>)
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004cfe:	4b04      	ldr	r3, [pc, #16]	; (8004d10 <vPortSetupTimerInterrupt+0x34>)
 8004d00:	2207      	movs	r2, #7
 8004d02:	601a      	str	r2, [r3, #0]
}
 8004d04:	bf00      	nop
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	e000e010 	.word	0xe000e010
 8004d14:	e000e018 	.word	0xe000e018
 8004d18:	20000010 	.word	0x20000010
 8004d1c:	10624dd3 	.word	0x10624dd3
 8004d20:	e000e014 	.word	0xe000e014

08004d24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004d24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004d34 <vPortEnableVFP+0x10>
 8004d28:	6801      	ldr	r1, [r0, #0]
 8004d2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004d2e:	6001      	str	r1, [r0, #0]
 8004d30:	4770      	bx	lr
 8004d32:	0000      	.short	0x0000
 8004d34:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004d38:	bf00      	nop
 8004d3a:	bf00      	nop

08004d3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004d42:	f3ef 8305 	mrs	r3, IPSR
 8004d46:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2b0f      	cmp	r3, #15
 8004d4c:	d914      	bls.n	8004d78 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d4e:	4a17      	ldr	r2, [pc, #92]	; (8004dac <vPortValidateInterruptPriority+0x70>)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	4413      	add	r3, r2
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004d58:	4b15      	ldr	r3, [pc, #84]	; (8004db0 <vPortValidateInterruptPriority+0x74>)
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	7afa      	ldrb	r2, [r7, #11]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d20a      	bcs.n	8004d78 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d66:	f383 8811 	msr	BASEPRI, r3
 8004d6a:	f3bf 8f6f 	isb	sy
 8004d6e:	f3bf 8f4f 	dsb	sy
 8004d72:	607b      	str	r3, [r7, #4]
    }
 8004d74:	bf00      	nop
 8004d76:	e7fe      	b.n	8004d76 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004d78:	4b0e      	ldr	r3, [pc, #56]	; (8004db4 <vPortValidateInterruptPriority+0x78>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d80:	4b0d      	ldr	r3, [pc, #52]	; (8004db8 <vPortValidateInterruptPriority+0x7c>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d90a      	bls.n	8004d9e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8c:	f383 8811 	msr	BASEPRI, r3
 8004d90:	f3bf 8f6f 	isb	sy
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	603b      	str	r3, [r7, #0]
    }
 8004d9a:	bf00      	nop
 8004d9c:	e7fe      	b.n	8004d9c <vPortValidateInterruptPriority+0x60>
    }
 8004d9e:	bf00      	nop
 8004da0:	3714      	adds	r7, #20
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	e000e3f0 	.word	0xe000e3f0
 8004db0:	20000210 	.word	0x20000210
 8004db4:	e000ed0c 	.word	0xe000ed0c
 8004db8:	20000214 	.word	0x20000214

08004dbc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b08a      	sub	sp, #40	; 0x28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004dc8:	f7fe fc6c 	bl	80036a4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004dcc:	4b65      	ldr	r3, [pc, #404]	; (8004f64 <pvPortMalloc+0x1a8>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004dd4:	f000 f934 	bl	8005040 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004dd8:	4b63      	ldr	r3, [pc, #396]	; (8004f68 <pvPortMalloc+0x1ac>)
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4013      	ands	r3, r2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f040 80a7 	bne.w	8004f34 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d02d      	beq.n	8004e48 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004dec:	2208      	movs	r2, #8
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d227      	bcs.n	8004e48 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004df8:	2208      	movs	r2, #8
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f003 0307 	and.w	r3, r3, #7
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d021      	beq.n	8004e4e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f023 0307 	bic.w	r3, r3, #7
 8004e10:	3308      	adds	r3, #8
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d214      	bcs.n	8004e42 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f023 0307 	bic.w	r3, r3, #7
 8004e1e:	3308      	adds	r3, #8
 8004e20:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f003 0307 	and.w	r3, r3, #7
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d010      	beq.n	8004e4e <pvPortMalloc+0x92>
        __asm volatile
 8004e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	617b      	str	r3, [r7, #20]
    }
 8004e3e:	bf00      	nop
 8004e40:	e7fe      	b.n	8004e40 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004e42:	2300      	movs	r3, #0
 8004e44:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e46:	e002      	b.n	8004e4e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	607b      	str	r3, [r7, #4]
 8004e4c:	e000      	b.n	8004e50 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e4e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d06e      	beq.n	8004f34 <pvPortMalloc+0x178>
 8004e56:	4b45      	ldr	r3, [pc, #276]	; (8004f6c <pvPortMalloc+0x1b0>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d869      	bhi.n	8004f34 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004e60:	4b43      	ldr	r3, [pc, #268]	; (8004f70 <pvPortMalloc+0x1b4>)
 8004e62:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004e64:	4b42      	ldr	r3, [pc, #264]	; (8004f70 <pvPortMalloc+0x1b4>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e6a:	e004      	b.n	8004e76 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d903      	bls.n	8004e88 <pvPortMalloc+0xcc>
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1f1      	bne.n	8004e6c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004e88:	4b36      	ldr	r3, [pc, #216]	; (8004f64 <pvPortMalloc+0x1a8>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d050      	beq.n	8004f34 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2208      	movs	r2, #8
 8004e98:	4413      	add	r3, r2
 8004e9a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	1ad2      	subs	r2, r2, r3
 8004eac:	2308      	movs	r3, #8
 8004eae:	005b      	lsls	r3, r3, #1
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d91f      	bls.n	8004ef4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4413      	add	r3, r2
 8004eba:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	f003 0307 	and.w	r3, r3, #7
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00a      	beq.n	8004edc <pvPortMalloc+0x120>
        __asm volatile
 8004ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eca:	f383 8811 	msr	BASEPRI, r3
 8004ece:	f3bf 8f6f 	isb	sy
 8004ed2:	f3bf 8f4f 	dsb	sy
 8004ed6:	613b      	str	r3, [r7, #16]
    }
 8004ed8:	bf00      	nop
 8004eda:	e7fe      	b.n	8004eda <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	1ad2      	subs	r2, r2, r3
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004eee:	69b8      	ldr	r0, [r7, #24]
 8004ef0:	f000 f908 	bl	8005104 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ef4:	4b1d      	ldr	r3, [pc, #116]	; (8004f6c <pvPortMalloc+0x1b0>)
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	4a1b      	ldr	r2, [pc, #108]	; (8004f6c <pvPortMalloc+0x1b0>)
 8004f00:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f02:	4b1a      	ldr	r3, [pc, #104]	; (8004f6c <pvPortMalloc+0x1b0>)
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	4b1b      	ldr	r3, [pc, #108]	; (8004f74 <pvPortMalloc+0x1b8>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d203      	bcs.n	8004f16 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f0e:	4b17      	ldr	r3, [pc, #92]	; (8004f6c <pvPortMalloc+0x1b0>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a18      	ldr	r2, [pc, #96]	; (8004f74 <pvPortMalloc+0x1b8>)
 8004f14:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	4b13      	ldr	r3, [pc, #76]	; (8004f68 <pvPortMalloc+0x1ac>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f22:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	2200      	movs	r2, #0
 8004f28:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004f2a:	4b13      	ldr	r3, [pc, #76]	; (8004f78 <pvPortMalloc+0x1bc>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	4a11      	ldr	r2, [pc, #68]	; (8004f78 <pvPortMalloc+0x1bc>)
 8004f32:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004f34:	f7fe fbc4 	bl	80036c0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	f003 0307 	and.w	r3, r3, #7
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00a      	beq.n	8004f58 <pvPortMalloc+0x19c>
        __asm volatile
 8004f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f46:	f383 8811 	msr	BASEPRI, r3
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	60fb      	str	r3, [r7, #12]
    }
 8004f54:	bf00      	nop
 8004f56:	e7fe      	b.n	8004f56 <pvPortMalloc+0x19a>
    return pvReturn;
 8004f58:	69fb      	ldr	r3, [r7, #28]
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3728      	adds	r7, #40	; 0x28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	20012e20 	.word	0x20012e20
 8004f68:	20012e34 	.word	0x20012e34
 8004f6c:	20012e24 	.word	0x20012e24
 8004f70:	20012e18 	.word	0x20012e18
 8004f74:	20012e28 	.word	0x20012e28
 8004f78:	20012e2c 	.word	0x20012e2c

08004f7c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d04d      	beq.n	800502a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004f8e:	2308      	movs	r3, #8
 8004f90:	425b      	negs	r3, r3
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	4413      	add	r3, r2
 8004f96:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	4b24      	ldr	r3, [pc, #144]	; (8005034 <vPortFree+0xb8>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10a      	bne.n	8004fc0 <vPortFree+0x44>
        __asm volatile
 8004faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fae:	f383 8811 	msr	BASEPRI, r3
 8004fb2:	f3bf 8f6f 	isb	sy
 8004fb6:	f3bf 8f4f 	dsb	sy
 8004fba:	60fb      	str	r3, [r7, #12]
    }
 8004fbc:	bf00      	nop
 8004fbe:	e7fe      	b.n	8004fbe <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00a      	beq.n	8004fde <vPortFree+0x62>
        __asm volatile
 8004fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fcc:	f383 8811 	msr	BASEPRI, r3
 8004fd0:	f3bf 8f6f 	isb	sy
 8004fd4:	f3bf 8f4f 	dsb	sy
 8004fd8:	60bb      	str	r3, [r7, #8]
    }
 8004fda:	bf00      	nop
 8004fdc:	e7fe      	b.n	8004fdc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	4b14      	ldr	r3, [pc, #80]	; (8005034 <vPortFree+0xb8>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d01e      	beq.n	800502a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d11a      	bne.n	800502a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	4b0e      	ldr	r3, [pc, #56]	; (8005034 <vPortFree+0xb8>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	43db      	mvns	r3, r3
 8004ffe:	401a      	ands	r2, r3
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005004:	f7fe fb4e 	bl	80036a4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	4b0a      	ldr	r3, [pc, #40]	; (8005038 <vPortFree+0xbc>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4413      	add	r3, r2
 8005012:	4a09      	ldr	r2, [pc, #36]	; (8005038 <vPortFree+0xbc>)
 8005014:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005016:	6938      	ldr	r0, [r7, #16]
 8005018:	f000 f874 	bl	8005104 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800501c:	4b07      	ldr	r3, [pc, #28]	; (800503c <vPortFree+0xc0>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3301      	adds	r3, #1
 8005022:	4a06      	ldr	r2, [pc, #24]	; (800503c <vPortFree+0xc0>)
 8005024:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005026:	f7fe fb4b 	bl	80036c0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800502a:	bf00      	nop
 800502c:	3718      	adds	r7, #24
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	20012e34 	.word	0x20012e34
 8005038:	20012e24 	.word	0x20012e24
 800503c:	20012e30 	.word	0x20012e30

08005040 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005046:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800504a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800504c:	4b27      	ldr	r3, [pc, #156]	; (80050ec <prvHeapInit+0xac>)
 800504e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f003 0307 	and.w	r3, r3, #7
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00c      	beq.n	8005074 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	3307      	adds	r3, #7
 800505e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f023 0307 	bic.w	r3, r3, #7
 8005066:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	4a1f      	ldr	r2, [pc, #124]	; (80050ec <prvHeapInit+0xac>)
 8005070:	4413      	add	r3, r2
 8005072:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005078:	4a1d      	ldr	r2, [pc, #116]	; (80050f0 <prvHeapInit+0xb0>)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800507e:	4b1c      	ldr	r3, [pc, #112]	; (80050f0 <prvHeapInit+0xb0>)
 8005080:	2200      	movs	r2, #0
 8005082:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	4413      	add	r3, r2
 800508a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800508c:	2208      	movs	r2, #8
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	1a9b      	subs	r3, r3, r2
 8005092:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f023 0307 	bic.w	r3, r3, #7
 800509a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4a15      	ldr	r2, [pc, #84]	; (80050f4 <prvHeapInit+0xb4>)
 80050a0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80050a2:	4b14      	ldr	r3, [pc, #80]	; (80050f4 <prvHeapInit+0xb4>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2200      	movs	r2, #0
 80050a8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80050aa:	4b12      	ldr	r3, [pc, #72]	; (80050f4 <prvHeapInit+0xb4>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2200      	movs	r2, #0
 80050b0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	1ad2      	subs	r2, r2, r3
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80050c0:	4b0c      	ldr	r3, [pc, #48]	; (80050f4 <prvHeapInit+0xb4>)
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	4a0a      	ldr	r2, [pc, #40]	; (80050f8 <prvHeapInit+0xb8>)
 80050ce:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	4a09      	ldr	r2, [pc, #36]	; (80050fc <prvHeapInit+0xbc>)
 80050d6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80050d8:	4b09      	ldr	r3, [pc, #36]	; (8005100 <prvHeapInit+0xc0>)
 80050da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80050de:	601a      	str	r2, [r3, #0]
}
 80050e0:	bf00      	nop
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	20000218 	.word	0x20000218
 80050f0:	20012e18 	.word	0x20012e18
 80050f4:	20012e20 	.word	0x20012e20
 80050f8:	20012e28 	.word	0x20012e28
 80050fc:	20012e24 	.word	0x20012e24
 8005100:	20012e34 	.word	0x20012e34

08005104 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800510c:	4b28      	ldr	r3, [pc, #160]	; (80051b0 <prvInsertBlockIntoFreeList+0xac>)
 800510e:	60fb      	str	r3, [r7, #12]
 8005110:	e002      	b.n	8005118 <prvInsertBlockIntoFreeList+0x14>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	60fb      	str	r3, [r7, #12]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	429a      	cmp	r2, r3
 8005120:	d8f7      	bhi.n	8005112 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	4413      	add	r3, r2
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	429a      	cmp	r2, r3
 8005132:	d108      	bne.n	8005146 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	685a      	ldr	r2, [r3, #4]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	441a      	add	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	441a      	add	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	429a      	cmp	r2, r3
 8005158:	d118      	bne.n	800518c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	4b15      	ldr	r3, [pc, #84]	; (80051b4 <prvInsertBlockIntoFreeList+0xb0>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	429a      	cmp	r2, r3
 8005164:	d00d      	beq.n	8005182 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	441a      	add	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	e008      	b.n	8005194 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005182:	4b0c      	ldr	r3, [pc, #48]	; (80051b4 <prvInsertBlockIntoFreeList+0xb0>)
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	601a      	str	r2, [r3, #0]
 800518a:	e003      	b.n	8005194 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	429a      	cmp	r2, r3
 800519a:	d002      	beq.n	80051a2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80051a2:	bf00      	nop
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	20012e18 	.word	0x20012e18
 80051b4:	20012e20 	.word	0x20012e20

080051b8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80051be:	4b26      	ldr	r3, [pc, #152]	; (8005258 <_DoInit+0xa0>)
 80051c0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80051c2:	22a8      	movs	r2, #168	; 0xa8
 80051c4:	2100      	movs	r1, #0
 80051c6:	6838      	ldr	r0, [r7, #0]
 80051c8:	f001 fe7c 	bl	8006ec4 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	2203      	movs	r2, #3
 80051d0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2203      	movs	r2, #3
 80051d6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	4a20      	ldr	r2, [pc, #128]	; (800525c <_DoInit+0xa4>)
 80051dc:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	4a1f      	ldr	r2, [pc, #124]	; (8005260 <_DoInit+0xa8>)
 80051e2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051ea:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	2200      	movs	r2, #0
 80051f0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2200      	movs	r2, #0
 80051f6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	2200      	movs	r2, #0
 80051fc:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	4a16      	ldr	r2, [pc, #88]	; (800525c <_DoInit+0xa4>)
 8005202:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	4a17      	ldr	r2, [pc, #92]	; (8005264 <_DoInit+0xac>)
 8005208:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2210      	movs	r2, #16
 800520e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	2200      	movs	r2, #0
 8005214:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2200      	movs	r2, #0
 800521a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	2200      	movs	r2, #0
 8005220:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005222:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005226:	2300      	movs	r3, #0
 8005228:	607b      	str	r3, [r7, #4]
 800522a:	e00c      	b.n	8005246 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f1c3 030f 	rsb	r3, r3, #15
 8005232:	4a0d      	ldr	r2, [pc, #52]	; (8005268 <_DoInit+0xb0>)
 8005234:	5cd1      	ldrb	r1, [r2, r3]
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4413      	add	r3, r2
 800523c:	460a      	mov	r2, r1
 800523e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	3301      	adds	r3, #1
 8005244:	607b      	str	r3, [r7, #4]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b0f      	cmp	r3, #15
 800524a:	d9ef      	bls.n	800522c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800524c:	f3bf 8f5f 	dmb	sy
}
 8005250:	bf00      	nop
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	20012e38 	.word	0x20012e38
 800525c:	08006f8c 	.word	0x08006f8c
 8005260:	20012ee0 	.word	0x20012ee0
 8005264:	200132e0 	.word	0x200132e0
 8005268:	08007064 	.word	0x08007064

0800526c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800526c:	b580      	push	{r7, lr}
 800526e:	b08c      	sub	sp, #48	; 0x30
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005278:	4b3e      	ldr	r3, [pc, #248]	; (8005374 <SEGGER_RTT_ReadNoLock+0x108>)
 800527a:	623b      	str	r3, [r7, #32]
 800527c:	6a3b      	ldr	r3, [r7, #32]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <SEGGER_RTT_ReadNoLock+0x1e>
 8005286:	f7ff ff97 	bl	80051b8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	4613      	mov	r3, r2
 800528e:	005b      	lsls	r3, r3, #1
 8005290:	4413      	add	r3, r2
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	3360      	adds	r3, #96	; 0x60
 8005296:	4a37      	ldr	r2, [pc, #220]	; (8005374 <SEGGER_RTT_ReadNoLock+0x108>)
 8005298:	4413      	add	r3, r2
 800529a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80052ac:	2300      	movs	r3, #0
 80052ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80052b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d92b      	bls.n	8005310 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	689a      	ldr	r2, [r3, #8]
 80052bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4293      	cmp	r3, r2
 80052c8:	bf28      	it	cs
 80052ca:	4613      	movcs	r3, r2
 80052cc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	685a      	ldr	r2, [r3, #4]
 80052d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d4:	4413      	add	r3, r2
 80052d6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	6939      	ldr	r1, [r7, #16]
 80052dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052de:	f001 fde3 	bl	8006ea8 <memcpy>
    NumBytesRead += NumBytesRem;
 80052e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	4413      	add	r3, r2
 80052e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80052ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	4413      	add	r3, r2
 80052f0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80052fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	4413      	add	r3, r2
 8005300:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005308:	429a      	cmp	r2, r3
 800530a:	d101      	bne.n	8005310 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800530c:	2300      	movs	r3, #0
 800530e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005310:	69ba      	ldr	r2, [r7, #24]
 8005312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4293      	cmp	r3, r2
 800531e:	bf28      	it	cs
 8005320:	4613      	movcs	r3, r2
 8005322:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d019      	beq.n	800535e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005330:	4413      	add	r3, r2
 8005332:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	6939      	ldr	r1, [r7, #16]
 8005338:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800533a:	f001 fdb5 	bl	8006ea8 <memcpy>
    NumBytesRead += NumBytesRem;
 800533e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	4413      	add	r3, r2
 8005344:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	4413      	add	r3, r2
 800534c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005356:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	4413      	add	r3, r2
 800535c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800535e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005360:	2b00      	cmp	r3, #0
 8005362:	d002      	beq.n	800536a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005368:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800536a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800536c:	4618      	mov	r0, r3
 800536e:	3730      	adds	r7, #48	; 0x30
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	20012e38 	.word	0x20012e38

08005378 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005378:	b580      	push	{r7, lr}
 800537a:	b088      	sub	sp, #32
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
 8005384:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005386:	4b3d      	ldr	r3, [pc, #244]	; (800547c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005388:	61bb      	str	r3, [r7, #24]
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	b2db      	uxtb	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005394:	f7ff ff10 	bl	80051b8 <_DoInit>
  SEGGER_RTT_LOCK();
 8005398:	f3ef 8311 	mrs	r3, BASEPRI
 800539c:	f04f 0120 	mov.w	r1, #32
 80053a0:	f381 8811 	msr	BASEPRI, r1
 80053a4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80053a6:	4b35      	ldr	r3, [pc, #212]	; (800547c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80053a8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80053aa:	2300      	movs	r3, #0
 80053ac:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80053ae:	6939      	ldr	r1, [r7, #16]
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	1c5a      	adds	r2, r3, #1
 80053b4:	4613      	mov	r3, r2
 80053b6:	005b      	lsls	r3, r3, #1
 80053b8:	4413      	add	r3, r2
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	440b      	add	r3, r1
 80053be:	3304      	adds	r3, #4
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d008      	beq.n	80053d8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	3301      	adds	r3, #1
 80053ca:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	69fa      	ldr	r2, [r7, #28]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	dbeb      	blt.n	80053ae <SEGGER_RTT_AllocUpBuffer+0x36>
 80053d6:	e000      	b.n	80053da <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80053d8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	69fa      	ldr	r2, [r7, #28]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	da3f      	bge.n	8005464 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80053e4:	6939      	ldr	r1, [r7, #16]
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	1c5a      	adds	r2, r3, #1
 80053ea:	4613      	mov	r3, r2
 80053ec:	005b      	lsls	r3, r3, #1
 80053ee:	4413      	add	r3, r2
 80053f0:	00db      	lsls	r3, r3, #3
 80053f2:	440b      	add	r3, r1
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80053f8:	6939      	ldr	r1, [r7, #16]
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	1c5a      	adds	r2, r3, #1
 80053fe:	4613      	mov	r3, r2
 8005400:	005b      	lsls	r3, r3, #1
 8005402:	4413      	add	r3, r2
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	440b      	add	r3, r1
 8005408:	3304      	adds	r3, #4
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800540e:	6939      	ldr	r1, [r7, #16]
 8005410:	69fa      	ldr	r2, [r7, #28]
 8005412:	4613      	mov	r3, r2
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	4413      	add	r3, r2
 8005418:	00db      	lsls	r3, r3, #3
 800541a:	440b      	add	r3, r1
 800541c:	3320      	adds	r3, #32
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005422:	6939      	ldr	r1, [r7, #16]
 8005424:	69fa      	ldr	r2, [r7, #28]
 8005426:	4613      	mov	r3, r2
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	4413      	add	r3, r2
 800542c:	00db      	lsls	r3, r3, #3
 800542e:	440b      	add	r3, r1
 8005430:	3328      	adds	r3, #40	; 0x28
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005436:	6939      	ldr	r1, [r7, #16]
 8005438:	69fa      	ldr	r2, [r7, #28]
 800543a:	4613      	mov	r3, r2
 800543c:	005b      	lsls	r3, r3, #1
 800543e:	4413      	add	r3, r2
 8005440:	00db      	lsls	r3, r3, #3
 8005442:	440b      	add	r3, r1
 8005444:	3324      	adds	r3, #36	; 0x24
 8005446:	2200      	movs	r2, #0
 8005448:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800544a:	6939      	ldr	r1, [r7, #16]
 800544c:	69fa      	ldr	r2, [r7, #28]
 800544e:	4613      	mov	r3, r2
 8005450:	005b      	lsls	r3, r3, #1
 8005452:	4413      	add	r3, r2
 8005454:	00db      	lsls	r3, r3, #3
 8005456:	440b      	add	r3, r1
 8005458:	332c      	adds	r3, #44	; 0x2c
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800545e:	f3bf 8f5f 	dmb	sy
 8005462:	e002      	b.n	800546a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005464:	f04f 33ff 	mov.w	r3, #4294967295
 8005468:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005470:	69fb      	ldr	r3, [r7, #28]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3720      	adds	r7, #32
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	20012e38 	.word	0x20012e38

08005480 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005480:	b580      	push	{r7, lr}
 8005482:	b08a      	sub	sp, #40	; 0x28
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
 800548c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800548e:	4b21      	ldr	r3, [pc, #132]	; (8005514 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005490:	623b      	str	r3, [r7, #32]
 8005492:	6a3b      	ldr	r3, [r7, #32]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	d101      	bne.n	80054a0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800549c:	f7ff fe8c 	bl	80051b8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80054a0:	4b1c      	ldr	r3, [pc, #112]	; (8005514 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80054a2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d82c      	bhi.n	8005504 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80054aa:	f3ef 8311 	mrs	r3, BASEPRI
 80054ae:	f04f 0120 	mov.w	r1, #32
 80054b2:	f381 8811 	msr	BASEPRI, r1
 80054b6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	4613      	mov	r3, r2
 80054bc:	005b      	lsls	r3, r3, #1
 80054be:	4413      	add	r3, r2
 80054c0:	00db      	lsls	r3, r3, #3
 80054c2:	3360      	adds	r3, #96	; 0x60
 80054c4:	69fa      	ldr	r2, [r7, #28]
 80054c6:	4413      	add	r3, r2
 80054c8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00e      	beq.n	80054ee <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	683a      	ldr	r2, [r7, #0]
 80054e0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	2200      	movs	r2, #0
 80054e6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	2200      	movs	r2, #0
 80054ec:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054f2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80054f4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80054fe:	2300      	movs	r3, #0
 8005500:	627b      	str	r3, [r7, #36]	; 0x24
 8005502:	e002      	b.n	800550a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005504:	f04f 33ff 	mov.w	r3, #4294967295
 8005508:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800550c:	4618      	mov	r0, r3
 800550e:	3728      	adds	r7, #40	; 0x28
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	20012e38 	.word	0x20012e38

08005518 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005518:	b480      	push	{r7}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005524:	2300      	movs	r3, #0
 8005526:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00f      	beq.n	800554e <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800552e:	e002      	b.n	8005536 <_EncodeStr+0x1e>
      Len++;
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	3301      	adds	r3, #1
 8005534:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	4413      	add	r3, r2
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1f6      	bne.n	8005530 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	429a      	cmp	r2, r3
 8005548:	d901      	bls.n	800554e <_EncodeStr+0x36>
      Len = Limit;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	2bfe      	cmp	r3, #254	; 0xfe
 8005552:	d806      	bhi.n	8005562 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	1c5a      	adds	r2, r3, #1
 8005558:	60fa      	str	r2, [r7, #12]
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	b2d2      	uxtb	r2, r2
 800555e:	701a      	strb	r2, [r3, #0]
 8005560:	e011      	b.n	8005586 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	1c5a      	adds	r2, r3, #1
 8005566:	60fa      	str	r2, [r7, #12]
 8005568:	22ff      	movs	r2, #255	; 0xff
 800556a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	1c5a      	adds	r2, r3, #1
 8005570:	60fa      	str	r2, [r7, #12]
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	b2d2      	uxtb	r2, r2
 8005576:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	0a19      	lsrs	r1, r3, #8
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	1c5a      	adds	r2, r3, #1
 8005580:	60fa      	str	r2, [r7, #12]
 8005582:	b2ca      	uxtb	r2, r1
 8005584:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005586:	2300      	movs	r3, #0
 8005588:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800558a:	e00a      	b.n	80055a2 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	1c53      	adds	r3, r2, #1
 8005590:	60bb      	str	r3, [r7, #8]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	1c59      	adds	r1, r3, #1
 8005596:	60f9      	str	r1, [r7, #12]
 8005598:	7812      	ldrb	r2, [r2, #0]
 800559a:	701a      	strb	r2, [r3, #0]
    n++;
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	3301      	adds	r3, #1
 80055a0:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d3f0      	bcc.n	800558c <_EncodeStr+0x74>
  }
  return pPayload;
 80055aa:	68fb      	ldr	r3, [r7, #12]
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	371c      	adds	r7, #28
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	3307      	adds	r3, #7
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80055d6:	4b35      	ldr	r3, [pc, #212]	; (80056ac <_HandleIncomingPacket+0xdc>)
 80055d8:	7e1b      	ldrb	r3, [r3, #24]
 80055da:	4618      	mov	r0, r3
 80055dc:	1cfb      	adds	r3, r7, #3
 80055de:	2201      	movs	r2, #1
 80055e0:	4619      	mov	r1, r3
 80055e2:	f7ff fe43 	bl	800526c <SEGGER_RTT_ReadNoLock>
 80055e6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d052      	beq.n	8005694 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80055ee:	78fb      	ldrb	r3, [r7, #3]
 80055f0:	2b80      	cmp	r3, #128	; 0x80
 80055f2:	d031      	beq.n	8005658 <_HandleIncomingPacket+0x88>
 80055f4:	2b80      	cmp	r3, #128	; 0x80
 80055f6:	dc40      	bgt.n	800567a <_HandleIncomingPacket+0xaa>
 80055f8:	2b07      	cmp	r3, #7
 80055fa:	dc15      	bgt.n	8005628 <_HandleIncomingPacket+0x58>
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	dd3c      	ble.n	800567a <_HandleIncomingPacket+0xaa>
 8005600:	3b01      	subs	r3, #1
 8005602:	2b06      	cmp	r3, #6
 8005604:	d839      	bhi.n	800567a <_HandleIncomingPacket+0xaa>
 8005606:	a201      	add	r2, pc, #4	; (adr r2, 800560c <_HandleIncomingPacket+0x3c>)
 8005608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800560c:	0800562f 	.word	0x0800562f
 8005610:	08005635 	.word	0x08005635
 8005614:	0800563b 	.word	0x0800563b
 8005618:	08005641 	.word	0x08005641
 800561c:	08005647 	.word	0x08005647
 8005620:	0800564d 	.word	0x0800564d
 8005624:	08005653 	.word	0x08005653
 8005628:	2b7f      	cmp	r3, #127	; 0x7f
 800562a:	d035      	beq.n	8005698 <_HandleIncomingPacket+0xc8>
 800562c:	e025      	b.n	800567a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800562e:	f000 fced 	bl	800600c <SEGGER_SYSVIEW_Start>
      break;
 8005632:	e036      	b.n	80056a2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005634:	f000 fda4 	bl	8006180 <SEGGER_SYSVIEW_Stop>
      break;
 8005638:	e033      	b.n	80056a2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800563a:	f000 ff7d 	bl	8006538 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800563e:	e030      	b.n	80056a2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005640:	f000 ff42 	bl	80064c8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005644:	e02d      	b.n	80056a2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005646:	f000 fdc1 	bl	80061cc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800564a:	e02a      	b.n	80056a2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800564c:	f001 fa10 	bl	8006a70 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005650:	e027      	b.n	80056a2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005652:	f001 f9ef 	bl	8006a34 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005656:	e024      	b.n	80056a2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005658:	4b14      	ldr	r3, [pc, #80]	; (80056ac <_HandleIncomingPacket+0xdc>)
 800565a:	7e1b      	ldrb	r3, [r3, #24]
 800565c:	4618      	mov	r0, r3
 800565e:	1cfb      	adds	r3, r7, #3
 8005660:	2201      	movs	r2, #1
 8005662:	4619      	mov	r1, r3
 8005664:	f7ff fe02 	bl	800526c <SEGGER_RTT_ReadNoLock>
 8005668:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d015      	beq.n	800569c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005670:	78fb      	ldrb	r3, [r7, #3]
 8005672:	4618      	mov	r0, r3
 8005674:	f001 f95e 	bl	8006934 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005678:	e010      	b.n	800569c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800567a:	78fb      	ldrb	r3, [r7, #3]
 800567c:	b25b      	sxtb	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	da0e      	bge.n	80056a0 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005682:	4b0a      	ldr	r3, [pc, #40]	; (80056ac <_HandleIncomingPacket+0xdc>)
 8005684:	7e1b      	ldrb	r3, [r3, #24]
 8005686:	4618      	mov	r0, r3
 8005688:	1cfb      	adds	r3, r7, #3
 800568a:	2201      	movs	r2, #1
 800568c:	4619      	mov	r1, r3
 800568e:	f7ff fded 	bl	800526c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005692:	e005      	b.n	80056a0 <_HandleIncomingPacket+0xd0>
    }
  }
 8005694:	bf00      	nop
 8005696:	e004      	b.n	80056a2 <_HandleIncomingPacket+0xd2>
      break;
 8005698:	bf00      	nop
 800569a:	e002      	b.n	80056a2 <_HandleIncomingPacket+0xd2>
      break;
 800569c:	bf00      	nop
 800569e:	e000      	b.n	80056a2 <_HandleIncomingPacket+0xd2>
      break;
 80056a0:	bf00      	nop
}
 80056a2:	bf00      	nop
 80056a4:	3708      	adds	r7, #8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	200142f8 	.word	0x200142f8

080056b0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b08c      	sub	sp, #48	; 0x30
 80056b4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80056b6:	2301      	movs	r3, #1
 80056b8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80056ba:	1d3b      	adds	r3, r7, #4
 80056bc:	3301      	adds	r3, #1
 80056be:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056c4:	4b31      	ldr	r3, [pc, #196]	; (800578c <_TrySendOverflowPacket+0xdc>)
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80056ca:	e00b      	b.n	80056e4 <_TrySendOverflowPacket+0x34>
 80056cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ce:	b2da      	uxtb	r2, r3
 80056d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d2:	1c59      	adds	r1, r3, #1
 80056d4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80056d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056da:	b2d2      	uxtb	r2, r2
 80056dc:	701a      	strb	r2, [r3, #0]
 80056de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e0:	09db      	lsrs	r3, r3, #7
 80056e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80056e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e6:	2b7f      	cmp	r3, #127	; 0x7f
 80056e8:	d8f0      	bhi.n	80056cc <_TrySendOverflowPacket+0x1c>
 80056ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ec:	1c5a      	adds	r2, r3, #1
 80056ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056f2:	b2d2      	uxtb	r2, r2
 80056f4:	701a      	strb	r2, [r3, #0]
 80056f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80056fa:	4b25      	ldr	r3, [pc, #148]	; (8005790 <_TrySendOverflowPacket+0xe0>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005700:	4b22      	ldr	r3, [pc, #136]	; (800578c <_TrySendOverflowPacket+0xdc>)
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	627b      	str	r3, [r7, #36]	; 0x24
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	623b      	str	r3, [r7, #32]
 8005712:	e00b      	b.n	800572c <_TrySendOverflowPacket+0x7c>
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	b2da      	uxtb	r2, r3
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	1c59      	adds	r1, r3, #1
 800571c:	6279      	str	r1, [r7, #36]	; 0x24
 800571e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005722:	b2d2      	uxtb	r2, r2
 8005724:	701a      	strb	r2, [r3, #0]
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	09db      	lsrs	r3, r3, #7
 800572a:	623b      	str	r3, [r7, #32]
 800572c:	6a3b      	ldr	r3, [r7, #32]
 800572e:	2b7f      	cmp	r3, #127	; 0x7f
 8005730:	d8f0      	bhi.n	8005714 <_TrySendOverflowPacket+0x64>
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	1c5a      	adds	r2, r3, #1
 8005736:	627a      	str	r2, [r7, #36]	; 0x24
 8005738:	6a3a      	ldr	r2, [r7, #32]
 800573a:	b2d2      	uxtb	r2, r2
 800573c:	701a      	strb	r2, [r3, #0]
 800573e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005740:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005742:	4b12      	ldr	r3, [pc, #72]	; (800578c <_TrySendOverflowPacket+0xdc>)
 8005744:	785b      	ldrb	r3, [r3, #1]
 8005746:	4618      	mov	r0, r3
 8005748:	1d3b      	adds	r3, r7, #4
 800574a:	69fa      	ldr	r2, [r7, #28]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	461a      	mov	r2, r3
 8005750:	1d3b      	adds	r3, r7, #4
 8005752:	4619      	mov	r1, r3
 8005754:	f7fa fd4c 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005758:	4603      	mov	r3, r0
 800575a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d009      	beq.n	8005776 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005762:	4a0a      	ldr	r2, [pc, #40]	; (800578c <_TrySendOverflowPacket+0xdc>)
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005768:	4b08      	ldr	r3, [pc, #32]	; (800578c <_TrySendOverflowPacket+0xdc>)
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	3b01      	subs	r3, #1
 800576e:	b2da      	uxtb	r2, r3
 8005770:	4b06      	ldr	r3, [pc, #24]	; (800578c <_TrySendOverflowPacket+0xdc>)
 8005772:	701a      	strb	r2, [r3, #0]
 8005774:	e004      	b.n	8005780 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005776:	4b05      	ldr	r3, [pc, #20]	; (800578c <_TrySendOverflowPacket+0xdc>)
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	3301      	adds	r3, #1
 800577c:	4a03      	ldr	r2, [pc, #12]	; (800578c <_TrySendOverflowPacket+0xdc>)
 800577e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005780:	693b      	ldr	r3, [r7, #16]
}
 8005782:	4618      	mov	r0, r3
 8005784:	3730      	adds	r7, #48	; 0x30
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	200142f8 	.word	0x200142f8
 8005790:	e0001004 	.word	0xe0001004

08005794 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005794:	b580      	push	{r7, lr}
 8005796:	b08a      	sub	sp, #40	; 0x28
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80057a0:	4b98      	ldr	r3, [pc, #608]	; (8005a04 <_SendPacket+0x270>)
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d010      	beq.n	80057ca <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80057a8:	4b96      	ldr	r3, [pc, #600]	; (8005a04 <_SendPacket+0x270>)
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 812d 	beq.w	8005a0c <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80057b2:	4b94      	ldr	r3, [pc, #592]	; (8005a04 <_SendPacket+0x270>)
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d109      	bne.n	80057ce <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80057ba:	f7ff ff79 	bl	80056b0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80057be:	4b91      	ldr	r3, [pc, #580]	; (8005a04 <_SendPacket+0x270>)
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	f040 8124 	bne.w	8005a10 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80057c8:	e001      	b.n	80057ce <_SendPacket+0x3a>
    goto Send;
 80057ca:	bf00      	nop
 80057cc:	e000      	b.n	80057d0 <_SendPacket+0x3c>
Send:
 80057ce:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b1f      	cmp	r3, #31
 80057d4:	d809      	bhi.n	80057ea <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80057d6:	4b8b      	ldr	r3, [pc, #556]	; (8005a04 <_SendPacket+0x270>)
 80057d8:	69da      	ldr	r2, [r3, #28]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	fa22 f303 	lsr.w	r3, r2, r3
 80057e0:	f003 0301 	and.w	r3, r3, #1
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f040 8115 	bne.w	8005a14 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2b17      	cmp	r3, #23
 80057ee:	d807      	bhi.n	8005800 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	3b01      	subs	r3, #1
 80057f4:	60fb      	str	r3, [r7, #12]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	b2da      	uxtb	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	701a      	strb	r2, [r3, #0]
 80057fe:	e0c4      	b.n	800598a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	2b7f      	cmp	r3, #127	; 0x7f
 800580c:	d912      	bls.n	8005834 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	09da      	lsrs	r2, r3, #7
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	3b01      	subs	r3, #1
 8005816:	60fb      	str	r3, [r7, #12]
 8005818:	b2d2      	uxtb	r2, r2
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	b2db      	uxtb	r3, r3
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	3a01      	subs	r2, #1
 8005826:	60fa      	str	r2, [r7, #12]
 8005828:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800582c:	b2da      	uxtb	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	701a      	strb	r2, [r3, #0]
 8005832:	e006      	b.n	8005842 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	3b01      	subs	r3, #1
 8005838:	60fb      	str	r3, [r7, #12]
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	b2da      	uxtb	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2b7e      	cmp	r3, #126	; 0x7e
 8005846:	d807      	bhi.n	8005858 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	3b01      	subs	r3, #1
 800584c:	60fb      	str	r3, [r7, #12]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	b2da      	uxtb	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	701a      	strb	r2, [r3, #0]
 8005856:	e098      	b.n	800598a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800585e:	d212      	bcs.n	8005886 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	09da      	lsrs	r2, r3, #7
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	3b01      	subs	r3, #1
 8005868:	60fb      	str	r3, [r7, #12]
 800586a:	b2d2      	uxtb	r2, r2
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	b2db      	uxtb	r3, r3
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	3a01      	subs	r2, #1
 8005878:	60fa      	str	r2, [r7, #12]
 800587a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800587e:	b2da      	uxtb	r2, r3
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	701a      	strb	r2, [r3, #0]
 8005884:	e081      	b.n	800598a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800588c:	d21d      	bcs.n	80058ca <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	0b9a      	lsrs	r2, r3, #14
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	3b01      	subs	r3, #1
 8005896:	60fb      	str	r3, [r7, #12]
 8005898:	b2d2      	uxtb	r2, r2
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	09db      	lsrs	r3, r3, #7
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	3a01      	subs	r2, #1
 80058a8:	60fa      	str	r2, [r7, #12]
 80058aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80058ae:	b2da      	uxtb	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	3a01      	subs	r2, #1
 80058bc:	60fa      	str	r2, [r7, #12]
 80058be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80058c2:	b2da      	uxtb	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	701a      	strb	r2, [r3, #0]
 80058c8:	e05f      	b.n	800598a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058d0:	d228      	bcs.n	8005924 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	0d5a      	lsrs	r2, r3, #21
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	3b01      	subs	r3, #1
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	b2d2      	uxtb	r2, r2
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	0b9b      	lsrs	r3, r3, #14
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	3a01      	subs	r2, #1
 80058ec:	60fa      	str	r2, [r7, #12]
 80058ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80058f2:	b2da      	uxtb	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	09db      	lsrs	r3, r3, #7
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	3a01      	subs	r2, #1
 8005902:	60fa      	str	r2, [r7, #12]
 8005904:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005908:	b2da      	uxtb	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	b2db      	uxtb	r3, r3
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	3a01      	subs	r2, #1
 8005916:	60fa      	str	r2, [r7, #12]
 8005918:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800591c:	b2da      	uxtb	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	701a      	strb	r2, [r3, #0]
 8005922:	e032      	b.n	800598a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	0f1a      	lsrs	r2, r3, #28
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	3b01      	subs	r3, #1
 800592c:	60fb      	str	r3, [r7, #12]
 800592e:	b2d2      	uxtb	r2, r2
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	0d5b      	lsrs	r3, r3, #21
 8005938:	b2db      	uxtb	r3, r3
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	3a01      	subs	r2, #1
 800593e:	60fa      	str	r2, [r7, #12]
 8005940:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005944:	b2da      	uxtb	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	0b9b      	lsrs	r3, r3, #14
 800594e:	b2db      	uxtb	r3, r3
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	3a01      	subs	r2, #1
 8005954:	60fa      	str	r2, [r7, #12]
 8005956:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800595a:	b2da      	uxtb	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	09db      	lsrs	r3, r3, #7
 8005964:	b2db      	uxtb	r3, r3
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	3a01      	subs	r2, #1
 800596a:	60fa      	str	r2, [r7, #12]
 800596c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005970:	b2da      	uxtb	r2, r3
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	b2db      	uxtb	r3, r3
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	3a01      	subs	r2, #1
 800597e:	60fa      	str	r2, [r7, #12]
 8005980:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005984:	b2da      	uxtb	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800598a:	4b1f      	ldr	r3, [pc, #124]	; (8005a08 <_SendPacket+0x274>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005990:	4b1c      	ldr	r3, [pc, #112]	; (8005a04 <_SendPacket+0x270>)
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	627b      	str	r3, [r7, #36]	; 0x24
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	623b      	str	r3, [r7, #32]
 80059a2:	e00b      	b.n	80059bc <_SendPacket+0x228>
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059aa:	1c59      	adds	r1, r3, #1
 80059ac:	6279      	str	r1, [r7, #36]	; 0x24
 80059ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059b2:	b2d2      	uxtb	r2, r2
 80059b4:	701a      	strb	r2, [r3, #0]
 80059b6:	6a3b      	ldr	r3, [r7, #32]
 80059b8:	09db      	lsrs	r3, r3, #7
 80059ba:	623b      	str	r3, [r7, #32]
 80059bc:	6a3b      	ldr	r3, [r7, #32]
 80059be:	2b7f      	cmp	r3, #127	; 0x7f
 80059c0:	d8f0      	bhi.n	80059a4 <_SendPacket+0x210>
 80059c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c4:	1c5a      	adds	r2, r3, #1
 80059c6:	627a      	str	r2, [r7, #36]	; 0x24
 80059c8:	6a3a      	ldr	r2, [r7, #32]
 80059ca:	b2d2      	uxtb	r2, r2
 80059cc:	701a      	strb	r2, [r3, #0]
 80059ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80059d2:	4b0c      	ldr	r3, [pc, #48]	; (8005a04 <_SendPacket+0x270>)
 80059d4:	785b      	ldrb	r3, [r3, #1]
 80059d6:	4618      	mov	r0, r3
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	461a      	mov	r2, r3
 80059e0:	68f9      	ldr	r1, [r7, #12]
 80059e2:	f7fa fc05 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80059e6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d003      	beq.n	80059f6 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80059ee:	4a05      	ldr	r2, [pc, #20]	; (8005a04 <_SendPacket+0x270>)
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	60d3      	str	r3, [r2, #12]
 80059f4:	e00f      	b.n	8005a16 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80059f6:	4b03      	ldr	r3, [pc, #12]	; (8005a04 <_SendPacket+0x270>)
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	3301      	adds	r3, #1
 80059fc:	b2da      	uxtb	r2, r3
 80059fe:	4b01      	ldr	r3, [pc, #4]	; (8005a04 <_SendPacket+0x270>)
 8005a00:	701a      	strb	r2, [r3, #0]
 8005a02:	e008      	b.n	8005a16 <_SendPacket+0x282>
 8005a04:	200142f8 	.word	0x200142f8
 8005a08:	e0001004 	.word	0xe0001004
    goto SendDone;
 8005a0c:	bf00      	nop
 8005a0e:	e002      	b.n	8005a16 <_SendPacket+0x282>
      goto SendDone;
 8005a10:	bf00      	nop
 8005a12:	e000      	b.n	8005a16 <_SendPacket+0x282>
      goto SendDone;
 8005a14:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005a16:	4b14      	ldr	r3, [pc, #80]	; (8005a68 <_SendPacket+0x2d4>)
 8005a18:	7e1b      	ldrb	r3, [r3, #24]
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	4a13      	ldr	r2, [pc, #76]	; (8005a6c <_SendPacket+0x2d8>)
 8005a1e:	460b      	mov	r3, r1
 8005a20:	005b      	lsls	r3, r3, #1
 8005a22:	440b      	add	r3, r1
 8005a24:	00db      	lsls	r3, r3, #3
 8005a26:	4413      	add	r3, r2
 8005a28:	336c      	adds	r3, #108	; 0x6c
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	4b0e      	ldr	r3, [pc, #56]	; (8005a68 <_SendPacket+0x2d4>)
 8005a2e:	7e1b      	ldrb	r3, [r3, #24]
 8005a30:	4618      	mov	r0, r3
 8005a32:	490e      	ldr	r1, [pc, #56]	; (8005a6c <_SendPacket+0x2d8>)
 8005a34:	4603      	mov	r3, r0
 8005a36:	005b      	lsls	r3, r3, #1
 8005a38:	4403      	add	r3, r0
 8005a3a:	00db      	lsls	r3, r3, #3
 8005a3c:	440b      	add	r3, r1
 8005a3e:	3370      	adds	r3, #112	; 0x70
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d00b      	beq.n	8005a5e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005a46:	4b08      	ldr	r3, [pc, #32]	; (8005a68 <_SendPacket+0x2d4>)
 8005a48:	789b      	ldrb	r3, [r3, #2]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d107      	bne.n	8005a5e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005a4e:	4b06      	ldr	r3, [pc, #24]	; (8005a68 <_SendPacket+0x2d4>)
 8005a50:	2201      	movs	r2, #1
 8005a52:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005a54:	f7ff fdbc 	bl	80055d0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005a58:	4b03      	ldr	r3, [pc, #12]	; (8005a68 <_SendPacket+0x2d4>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005a5e:	bf00      	nop
 8005a60:	3728      	adds	r7, #40	; 0x28
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	200142f8 	.word	0x200142f8
 8005a6c:	20012e38 	.word	0x20012e38

08005a70 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b0a2      	sub	sp, #136	; 0x88
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 8005a80:	2300      	movs	r3, #0
 8005a82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 8005a86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a88:	1c5a      	adds	r2, r3, #1
 8005a8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 8005a92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d01d      	beq.n	8005ad6 <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 8005a9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a9e:	2b25      	cmp	r3, #37	; 0x25
 8005aa0:	d1f1      	bne.n	8005a86 <_VPrintHost+0x16>
      c = *p;
 8005aa2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	1d19      	adds	r1, r3, #4
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	6011      	str	r1, [r2, #0]
 8005ab4:	6819      	ldr	r1, [r3, #0]
 8005ab6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005aba:	1c5a      	adds	r2, r3, #1
 8005abc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005ac0:	460a      	mov	r2, r1
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	3388      	adds	r3, #136	; 0x88
 8005ac6:	443b      	add	r3, r7
 8005ac8:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 8005acc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ad0:	2b10      	cmp	r3, #16
 8005ad2:	d002      	beq.n	8005ada <_VPrintHost+0x6a>
    c = *p++;
 8005ad4:	e7d7      	b.n	8005a86 <_VPrintHost+0x16>
      break;
 8005ad6:	bf00      	nop
 8005ad8:	e000      	b.n	8005adc <_VPrintHost+0x6c>
        break;
 8005ada:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 8005adc:	f3ef 8311 	mrs	r3, BASEPRI
 8005ae0:	f04f 0120 	mov.w	r1, #32
 8005ae4:	f381 8811 	msr	BASEPRI, r1
 8005ae8:	65bb      	str	r3, [r7, #88]	; 0x58
 8005aea:	483f      	ldr	r0, [pc, #252]	; (8005be8 <_VPrintHost+0x178>)
 8005aec:	f7ff fd64 	bl	80055b8 <_PreparePacket>
 8005af0:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005af2:	2280      	movs	r2, #128	; 0x80
 8005af4:	68f9      	ldr	r1, [r7, #12]
 8005af6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005af8:	f7ff fd0e 	bl	8005518 <_EncodeStr>
 8005afc:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 8005afe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b00:	677b      	str	r3, [r7, #116]	; 0x74
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	673b      	str	r3, [r7, #112]	; 0x70
 8005b06:	e00b      	b.n	8005b20 <_VPrintHost+0xb0>
 8005b08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b0a:	b2da      	uxtb	r2, r3
 8005b0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b0e:	1c59      	adds	r1, r3, #1
 8005b10:	6779      	str	r1, [r7, #116]	; 0x74
 8005b12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b16:	b2d2      	uxtb	r2, r2
 8005b18:	701a      	strb	r2, [r3, #0]
 8005b1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b1c:	09db      	lsrs	r3, r3, #7
 8005b1e:	673b      	str	r3, [r7, #112]	; 0x70
 8005b20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b22:	2b7f      	cmp	r3, #127	; 0x7f
 8005b24:	d8f0      	bhi.n	8005b08 <_VPrintHost+0x98>
 8005b26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b28:	1c5a      	adds	r2, r3, #1
 8005b2a:	677a      	str	r2, [r7, #116]	; 0x74
 8005b2c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005b2e:	b2d2      	uxtb	r2, r2
 8005b30:	701a      	strb	r2, [r3, #0]
 8005b32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b34:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 8005b36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b40:	e00b      	b.n	8005b5a <_VPrintHost+0xea>
 8005b42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b44:	b2da      	uxtb	r2, r3
 8005b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b48:	1c59      	adds	r1, r3, #1
 8005b4a:	66f9      	str	r1, [r7, #108]	; 0x6c
 8005b4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b50:	b2d2      	uxtb	r2, r2
 8005b52:	701a      	strb	r2, [r3, #0]
 8005b54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b56:	09db      	lsrs	r3, r3, #7
 8005b58:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b5c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b5e:	d8f0      	bhi.n	8005b42 <_VPrintHost+0xd2>
 8005b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b62:	1c5a      	adds	r2, r3, #1
 8005b64:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005b66:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b68:	b2d2      	uxtb	r2, r2
 8005b6a:	701a      	strb	r2, [r3, #0]
 8005b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b6e:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 8005b70:	f107 0314 	add.w	r3, r7, #20
 8005b74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8005b78:	e022      	b.n	8005bc0 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 8005b7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b7c:	667b      	str	r3, [r7, #100]	; 0x64
 8005b7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	663b      	str	r3, [r7, #96]	; 0x60
 8005b86:	e00b      	b.n	8005ba0 <_VPrintHost+0x130>
 8005b88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b8e:	1c59      	adds	r1, r3, #1
 8005b90:	6679      	str	r1, [r7, #100]	; 0x64
 8005b92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b96:	b2d2      	uxtb	r2, r2
 8005b98:	701a      	strb	r2, [r3, #0]
 8005b9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b9c:	09db      	lsrs	r3, r3, #7
 8005b9e:	663b      	str	r3, [r7, #96]	; 0x60
 8005ba0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ba2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ba4:	d8f0      	bhi.n	8005b88 <_VPrintHost+0x118>
 8005ba6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ba8:	1c5a      	adds	r2, r3, #1
 8005baa:	667a      	str	r2, [r7, #100]	; 0x64
 8005bac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005bae:	b2d2      	uxtb	r2, r2
 8005bb0:	701a      	strb	r2, [r3, #0]
 8005bb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bb4:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 8005bb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bba:	3304      	adds	r3, #4
 8005bbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8005bc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005bc4:	1e5a      	subs	r2, r3, #1
 8005bc6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1d5      	bne.n	8005b7a <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005bce:	221a      	movs	r2, #26
 8005bd0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8005bd2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005bd4:	f7ff fdde 	bl	8005794 <_SendPacket>
    RECORD_END();
 8005bd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bda:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3788      	adds	r7, #136	; 0x88
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	20014328 	.word	0x20014328

08005bec <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af02      	add	r7, sp, #8
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
 8005bf8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005c00:	4917      	ldr	r1, [pc, #92]	; (8005c60 <SEGGER_SYSVIEW_Init+0x74>)
 8005c02:	4818      	ldr	r0, [pc, #96]	; (8005c64 <SEGGER_SYSVIEW_Init+0x78>)
 8005c04:	f7ff fbb8 	bl	8005378 <SEGGER_RTT_AllocUpBuffer>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	b2da      	uxtb	r2, r3
 8005c0c:	4b16      	ldr	r3, [pc, #88]	; (8005c68 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c0e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005c10:	4b15      	ldr	r3, [pc, #84]	; (8005c68 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c12:	785a      	ldrb	r2, [r3, #1]
 8005c14:	4b14      	ldr	r3, [pc, #80]	; (8005c68 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c16:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005c18:	4b13      	ldr	r3, [pc, #76]	; (8005c68 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c1a:	7e1b      	ldrb	r3, [r3, #24]
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	2300      	movs	r3, #0
 8005c20:	9300      	str	r3, [sp, #0]
 8005c22:	2308      	movs	r3, #8
 8005c24:	4a11      	ldr	r2, [pc, #68]	; (8005c6c <SEGGER_SYSVIEW_Init+0x80>)
 8005c26:	490f      	ldr	r1, [pc, #60]	; (8005c64 <SEGGER_SYSVIEW_Init+0x78>)
 8005c28:	f7ff fc2a 	bl	8005480 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005c2c:	4b0e      	ldr	r3, [pc, #56]	; (8005c68 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005c32:	4b0f      	ldr	r3, [pc, #60]	; (8005c70 <SEGGER_SYSVIEW_Init+0x84>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a0c      	ldr	r2, [pc, #48]	; (8005c68 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c38:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005c3a:	4a0b      	ldr	r2, [pc, #44]	; (8005c68 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005c40:	4a09      	ldr	r2, [pc, #36]	; (8005c68 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005c46:	4a08      	ldr	r2, [pc, #32]	; (8005c68 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005c4c:	4a06      	ldr	r2, [pc, #24]	; (8005c68 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005c52:	4b05      	ldr	r3, [pc, #20]	; (8005c68 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005c58:	bf00      	nop
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	200132f0 	.word	0x200132f0
 8005c64:	08006f98 	.word	0x08006f98
 8005c68:	200142f8 	.word	0x200142f8
 8005c6c:	200142f0 	.word	0x200142f0
 8005c70:	e0001004 	.word	0xe0001004

08005c74 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005c7c:	4a04      	ldr	r2, [pc, #16]	; (8005c90 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6113      	str	r3, [r2, #16]
}
 8005c82:	bf00      	nop
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	200142f8 	.word	0x200142f8

08005c94 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005c9c:	f3ef 8311 	mrs	r3, BASEPRI
 8005ca0:	f04f 0120 	mov.w	r1, #32
 8005ca4:	f381 8811 	msr	BASEPRI, r1
 8005ca8:	60fb      	str	r3, [r7, #12]
 8005caa:	4808      	ldr	r0, [pc, #32]	; (8005ccc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005cac:	f7ff fc84 	bl	80055b8 <_PreparePacket>
 8005cb0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	68b9      	ldr	r1, [r7, #8]
 8005cb6:	68b8      	ldr	r0, [r7, #8]
 8005cb8:	f7ff fd6c 	bl	8005794 <_SendPacket>
  RECORD_END();
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f383 8811 	msr	BASEPRI, r3
}
 8005cc2:	bf00      	nop
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	20014328 	.word	0x20014328

08005cd0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b088      	sub	sp, #32
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005cda:	f3ef 8311 	mrs	r3, BASEPRI
 8005cde:	f04f 0120 	mov.w	r1, #32
 8005ce2:	f381 8811 	msr	BASEPRI, r1
 8005ce6:	617b      	str	r3, [r7, #20]
 8005ce8:	4816      	ldr	r0, [pc, #88]	; (8005d44 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005cea:	f7ff fc65 	bl	80055b8 <_PreparePacket>
 8005cee:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	61fb      	str	r3, [r7, #28]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	61bb      	str	r3, [r7, #24]
 8005cfc:	e00b      	b.n	8005d16 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	b2da      	uxtb	r2, r3
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	1c59      	adds	r1, r3, #1
 8005d06:	61f9      	str	r1, [r7, #28]
 8005d08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d0c:	b2d2      	uxtb	r2, r2
 8005d0e:	701a      	strb	r2, [r3, #0]
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	09db      	lsrs	r3, r3, #7
 8005d14:	61bb      	str	r3, [r7, #24]
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	2b7f      	cmp	r3, #127	; 0x7f
 8005d1a:	d8f0      	bhi.n	8005cfe <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	1c5a      	adds	r2, r3, #1
 8005d20:	61fa      	str	r2, [r7, #28]
 8005d22:	69ba      	ldr	r2, [r7, #24]
 8005d24:	b2d2      	uxtb	r2, r2
 8005d26:	701a      	strb	r2, [r3, #0]
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	68f9      	ldr	r1, [r7, #12]
 8005d30:	6938      	ldr	r0, [r7, #16]
 8005d32:	f7ff fd2f 	bl	8005794 <_SendPacket>
  RECORD_END();
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f383 8811 	msr	BASEPRI, r3
}
 8005d3c:	bf00      	nop
 8005d3e:	3720      	adds	r7, #32
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	20014328 	.word	0x20014328

08005d48 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b08c      	sub	sp, #48	; 0x30
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005d54:	f3ef 8311 	mrs	r3, BASEPRI
 8005d58:	f04f 0120 	mov.w	r1, #32
 8005d5c:	f381 8811 	msr	BASEPRI, r1
 8005d60:	61fb      	str	r3, [r7, #28]
 8005d62:	4825      	ldr	r0, [pc, #148]	; (8005df8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005d64:	f7ff fc28 	bl	80055b8 <_PreparePacket>
 8005d68:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d76:	e00b      	b.n	8005d90 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7a:	b2da      	uxtb	r2, r3
 8005d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7e:	1c59      	adds	r1, r3, #1
 8005d80:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005d82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d86:	b2d2      	uxtb	r2, r2
 8005d88:	701a      	strb	r2, [r3, #0]
 8005d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8c:	09db      	lsrs	r3, r3, #7
 8005d8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d92:	2b7f      	cmp	r3, #127	; 0x7f
 8005d94:	d8f0      	bhi.n	8005d78 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d98:	1c5a      	adds	r2, r3, #1
 8005d9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d9e:	b2d2      	uxtb	r2, r2
 8005da0:	701a      	strb	r2, [r3, #0]
 8005da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	627b      	str	r3, [r7, #36]	; 0x24
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	623b      	str	r3, [r7, #32]
 8005dae:	e00b      	b.n	8005dc8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005db0:	6a3b      	ldr	r3, [r7, #32]
 8005db2:	b2da      	uxtb	r2, r3
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	1c59      	adds	r1, r3, #1
 8005db8:	6279      	str	r1, [r7, #36]	; 0x24
 8005dba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dbe:	b2d2      	uxtb	r2, r2
 8005dc0:	701a      	strb	r2, [r3, #0]
 8005dc2:	6a3b      	ldr	r3, [r7, #32]
 8005dc4:	09db      	lsrs	r3, r3, #7
 8005dc6:	623b      	str	r3, [r7, #32]
 8005dc8:	6a3b      	ldr	r3, [r7, #32]
 8005dca:	2b7f      	cmp	r3, #127	; 0x7f
 8005dcc:	d8f0      	bhi.n	8005db0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd0:	1c5a      	adds	r2, r3, #1
 8005dd2:	627a      	str	r2, [r7, #36]	; 0x24
 8005dd4:	6a3a      	ldr	r2, [r7, #32]
 8005dd6:	b2d2      	uxtb	r2, r2
 8005dd8:	701a      	strb	r2, [r3, #0]
 8005dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ddc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	6979      	ldr	r1, [r7, #20]
 8005de2:	69b8      	ldr	r0, [r7, #24]
 8005de4:	f7ff fcd6 	bl	8005794 <_SendPacket>
  RECORD_END();
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	f383 8811 	msr	BASEPRI, r3
}
 8005dee:	bf00      	nop
 8005df0:	3730      	adds	r7, #48	; 0x30
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	20014328 	.word	0x20014328

08005dfc <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b08e      	sub	sp, #56	; 0x38
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
 8005e08:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005e0a:	f3ef 8311 	mrs	r3, BASEPRI
 8005e0e:	f04f 0120 	mov.w	r1, #32
 8005e12:	f381 8811 	msr	BASEPRI, r1
 8005e16:	61fb      	str	r3, [r7, #28]
 8005e18:	4832      	ldr	r0, [pc, #200]	; (8005ee4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005e1a:	f7ff fbcd 	bl	80055b8 <_PreparePacket>
 8005e1e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	637b      	str	r3, [r7, #52]	; 0x34
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	633b      	str	r3, [r7, #48]	; 0x30
 8005e2c:	e00b      	b.n	8005e46 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e34:	1c59      	adds	r1, r3, #1
 8005e36:	6379      	str	r1, [r7, #52]	; 0x34
 8005e38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e3c:	b2d2      	uxtb	r2, r2
 8005e3e:	701a      	strb	r2, [r3, #0]
 8005e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e42:	09db      	lsrs	r3, r3, #7
 8005e44:	633b      	str	r3, [r7, #48]	; 0x30
 8005e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e48:	2b7f      	cmp	r3, #127	; 0x7f
 8005e4a:	d8f0      	bhi.n	8005e2e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e4e:	1c5a      	adds	r2, r3, #1
 8005e50:	637a      	str	r2, [r7, #52]	; 0x34
 8005e52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e54:	b2d2      	uxtb	r2, r2
 8005e56:	701a      	strb	r2, [r3, #0]
 8005e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e5a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e64:	e00b      	b.n	8005e7e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6c:	1c59      	adds	r1, r3, #1
 8005e6e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005e70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e74:	b2d2      	uxtb	r2, r2
 8005e76:	701a      	strb	r2, [r3, #0]
 8005e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7a:	09db      	lsrs	r3, r3, #7
 8005e7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e80:	2b7f      	cmp	r3, #127	; 0x7f
 8005e82:	d8f0      	bhi.n	8005e66 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e86:	1c5a      	adds	r2, r3, #1
 8005e88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e8c:	b2d2      	uxtb	r2, r2
 8005e8e:	701a      	strb	r2, [r3, #0]
 8005e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e92:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	627b      	str	r3, [r7, #36]	; 0x24
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	623b      	str	r3, [r7, #32]
 8005e9c:	e00b      	b.n	8005eb6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005e9e:	6a3b      	ldr	r3, [r7, #32]
 8005ea0:	b2da      	uxtb	r2, r3
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea4:	1c59      	adds	r1, r3, #1
 8005ea6:	6279      	str	r1, [r7, #36]	; 0x24
 8005ea8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005eac:	b2d2      	uxtb	r2, r2
 8005eae:	701a      	strb	r2, [r3, #0]
 8005eb0:	6a3b      	ldr	r3, [r7, #32]
 8005eb2:	09db      	lsrs	r3, r3, #7
 8005eb4:	623b      	str	r3, [r7, #32]
 8005eb6:	6a3b      	ldr	r3, [r7, #32]
 8005eb8:	2b7f      	cmp	r3, #127	; 0x7f
 8005eba:	d8f0      	bhi.n	8005e9e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebe:	1c5a      	adds	r2, r3, #1
 8005ec0:	627a      	str	r2, [r7, #36]	; 0x24
 8005ec2:	6a3a      	ldr	r2, [r7, #32]
 8005ec4:	b2d2      	uxtb	r2, r2
 8005ec6:	701a      	strb	r2, [r3, #0]
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eca:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	6979      	ldr	r1, [r7, #20]
 8005ed0:	69b8      	ldr	r0, [r7, #24]
 8005ed2:	f7ff fc5f 	bl	8005794 <_SendPacket>
  RECORD_END();
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	f383 8811 	msr	BASEPRI, r3
}
 8005edc:	bf00      	nop
 8005ede:	3738      	adds	r7, #56	; 0x38
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	20014328 	.word	0x20014328

08005ee8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b090      	sub	sp, #64	; 0x40
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]
 8005ef4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ef6:	f3ef 8311 	mrs	r3, BASEPRI
 8005efa:	f04f 0120 	mov.w	r1, #32
 8005efe:	f381 8811 	msr	BASEPRI, r1
 8005f02:	61fb      	str	r3, [r7, #28]
 8005f04:	4840      	ldr	r0, [pc, #256]	; (8006008 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005f06:	f7ff fb57 	bl	80055b8 <_PreparePacket>
 8005f0a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f18:	e00b      	b.n	8005f32 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f20:	1c59      	adds	r1, r3, #1
 8005f22:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005f24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f28:	b2d2      	uxtb	r2, r2
 8005f2a:	701a      	strb	r2, [r3, #0]
 8005f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2e:	09db      	lsrs	r3, r3, #7
 8005f30:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f34:	2b7f      	cmp	r3, #127	; 0x7f
 8005f36:	d8f0      	bhi.n	8005f1a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f3a:	1c5a      	adds	r2, r3, #1
 8005f3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005f3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f40:	b2d2      	uxtb	r2, r2
 8005f42:	701a      	strb	r2, [r3, #0]
 8005f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f46:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	637b      	str	r3, [r7, #52]	; 0x34
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	633b      	str	r3, [r7, #48]	; 0x30
 8005f50:	e00b      	b.n	8005f6a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f54:	b2da      	uxtb	r2, r3
 8005f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f58:	1c59      	adds	r1, r3, #1
 8005f5a:	6379      	str	r1, [r7, #52]	; 0x34
 8005f5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f60:	b2d2      	uxtb	r2, r2
 8005f62:	701a      	strb	r2, [r3, #0]
 8005f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f66:	09db      	lsrs	r3, r3, #7
 8005f68:	633b      	str	r3, [r7, #48]	; 0x30
 8005f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6c:	2b7f      	cmp	r3, #127	; 0x7f
 8005f6e:	d8f0      	bhi.n	8005f52 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f72:	1c5a      	adds	r2, r3, #1
 8005f74:	637a      	str	r2, [r7, #52]	; 0x34
 8005f76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f78:	b2d2      	uxtb	r2, r2
 8005f7a:	701a      	strb	r2, [r3, #0]
 8005f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f7e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f88:	e00b      	b.n	8005fa2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f90:	1c59      	adds	r1, r3, #1
 8005f92:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005f94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f98:	b2d2      	uxtb	r2, r2
 8005f9a:	701a      	strb	r2, [r3, #0]
 8005f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9e:	09db      	lsrs	r3, r3, #7
 8005fa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa4:	2b7f      	cmp	r3, #127	; 0x7f
 8005fa6:	d8f0      	bhi.n	8005f8a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005faa:	1c5a      	adds	r2, r3, #1
 8005fac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fb0:	b2d2      	uxtb	r2, r2
 8005fb2:	701a      	strb	r2, [r3, #0]
 8005fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	627b      	str	r3, [r7, #36]	; 0x24
 8005fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fbe:	623b      	str	r3, [r7, #32]
 8005fc0:	e00b      	b.n	8005fda <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	b2da      	uxtb	r2, r3
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc8:	1c59      	adds	r1, r3, #1
 8005fca:	6279      	str	r1, [r7, #36]	; 0x24
 8005fcc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fd0:	b2d2      	uxtb	r2, r2
 8005fd2:	701a      	strb	r2, [r3, #0]
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	09db      	lsrs	r3, r3, #7
 8005fd8:	623b      	str	r3, [r7, #32]
 8005fda:	6a3b      	ldr	r3, [r7, #32]
 8005fdc:	2b7f      	cmp	r3, #127	; 0x7f
 8005fde:	d8f0      	bhi.n	8005fc2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	1c5a      	adds	r2, r3, #1
 8005fe4:	627a      	str	r2, [r7, #36]	; 0x24
 8005fe6:	6a3a      	ldr	r2, [r7, #32]
 8005fe8:	b2d2      	uxtb	r2, r2
 8005fea:	701a      	strb	r2, [r3, #0]
 8005fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fee:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	6979      	ldr	r1, [r7, #20]
 8005ff4:	69b8      	ldr	r0, [r7, #24]
 8005ff6:	f7ff fbcd 	bl	8005794 <_SendPacket>
  RECORD_END();
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	f383 8811 	msr	BASEPRI, r3
}
 8006000:	bf00      	nop
 8006002:	3740      	adds	r7, #64	; 0x40
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	20014328 	.word	0x20014328

0800600c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800600c:	b580      	push	{r7, lr}
 800600e:	b08c      	sub	sp, #48	; 0x30
 8006010:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006012:	4b58      	ldr	r3, [pc, #352]	; (8006174 <SEGGER_SYSVIEW_Start+0x168>)
 8006014:	2201      	movs	r2, #1
 8006016:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006018:	f3ef 8311 	mrs	r3, BASEPRI
 800601c:	f04f 0120 	mov.w	r1, #32
 8006020:	f381 8811 	msr	BASEPRI, r1
 8006024:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006026:	4b53      	ldr	r3, [pc, #332]	; (8006174 <SEGGER_SYSVIEW_Start+0x168>)
 8006028:	785b      	ldrb	r3, [r3, #1]
 800602a:	220a      	movs	r2, #10
 800602c:	4952      	ldr	r1, [pc, #328]	; (8006178 <SEGGER_SYSVIEW_Start+0x16c>)
 800602e:	4618      	mov	r0, r3
 8006030:	f7fa f8de 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800603a:	200a      	movs	r0, #10
 800603c:	f7ff fe2a 	bl	8005c94 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006040:	f3ef 8311 	mrs	r3, BASEPRI
 8006044:	f04f 0120 	mov.w	r1, #32
 8006048:	f381 8811 	msr	BASEPRI, r1
 800604c:	60bb      	str	r3, [r7, #8]
 800604e:	484b      	ldr	r0, [pc, #300]	; (800617c <SEGGER_SYSVIEW_Start+0x170>)
 8006050:	f7ff fab2 	bl	80055b8 <_PreparePacket>
 8006054:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800605e:	4b45      	ldr	r3, [pc, #276]	; (8006174 <SEGGER_SYSVIEW_Start+0x168>)
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	62bb      	str	r3, [r7, #40]	; 0x28
 8006064:	e00b      	b.n	800607e <SEGGER_SYSVIEW_Start+0x72>
 8006066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006068:	b2da      	uxtb	r2, r3
 800606a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800606c:	1c59      	adds	r1, r3, #1
 800606e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006070:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006074:	b2d2      	uxtb	r2, r2
 8006076:	701a      	strb	r2, [r3, #0]
 8006078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800607a:	09db      	lsrs	r3, r3, #7
 800607c:	62bb      	str	r3, [r7, #40]	; 0x28
 800607e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006080:	2b7f      	cmp	r3, #127	; 0x7f
 8006082:	d8f0      	bhi.n	8006066 <SEGGER_SYSVIEW_Start+0x5a>
 8006084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006086:	1c5a      	adds	r2, r3, #1
 8006088:	62fa      	str	r2, [r7, #44]	; 0x2c
 800608a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800608c:	b2d2      	uxtb	r2, r2
 800608e:	701a      	strb	r2, [r3, #0]
 8006090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006092:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	627b      	str	r3, [r7, #36]	; 0x24
 8006098:	4b36      	ldr	r3, [pc, #216]	; (8006174 <SEGGER_SYSVIEW_Start+0x168>)
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	623b      	str	r3, [r7, #32]
 800609e:	e00b      	b.n	80060b8 <SEGGER_SYSVIEW_Start+0xac>
 80060a0:	6a3b      	ldr	r3, [r7, #32]
 80060a2:	b2da      	uxtb	r2, r3
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	1c59      	adds	r1, r3, #1
 80060a8:	6279      	str	r1, [r7, #36]	; 0x24
 80060aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060ae:	b2d2      	uxtb	r2, r2
 80060b0:	701a      	strb	r2, [r3, #0]
 80060b2:	6a3b      	ldr	r3, [r7, #32]
 80060b4:	09db      	lsrs	r3, r3, #7
 80060b6:	623b      	str	r3, [r7, #32]
 80060b8:	6a3b      	ldr	r3, [r7, #32]
 80060ba:	2b7f      	cmp	r3, #127	; 0x7f
 80060bc:	d8f0      	bhi.n	80060a0 <SEGGER_SYSVIEW_Start+0x94>
 80060be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c0:	1c5a      	adds	r2, r3, #1
 80060c2:	627a      	str	r2, [r7, #36]	; 0x24
 80060c4:	6a3a      	ldr	r2, [r7, #32]
 80060c6:	b2d2      	uxtb	r2, r2
 80060c8:	701a      	strb	r2, [r3, #0]
 80060ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060cc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	61fb      	str	r3, [r7, #28]
 80060d2:	4b28      	ldr	r3, [pc, #160]	; (8006174 <SEGGER_SYSVIEW_Start+0x168>)
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	61bb      	str	r3, [r7, #24]
 80060d8:	e00b      	b.n	80060f2 <SEGGER_SYSVIEW_Start+0xe6>
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	b2da      	uxtb	r2, r3
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	1c59      	adds	r1, r3, #1
 80060e2:	61f9      	str	r1, [r7, #28]
 80060e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060e8:	b2d2      	uxtb	r2, r2
 80060ea:	701a      	strb	r2, [r3, #0]
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	09db      	lsrs	r3, r3, #7
 80060f0:	61bb      	str	r3, [r7, #24]
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	2b7f      	cmp	r3, #127	; 0x7f
 80060f6:	d8f0      	bhi.n	80060da <SEGGER_SYSVIEW_Start+0xce>
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	1c5a      	adds	r2, r3, #1
 80060fc:	61fa      	str	r2, [r7, #28]
 80060fe:	69ba      	ldr	r2, [r7, #24]
 8006100:	b2d2      	uxtb	r2, r2
 8006102:	701a      	strb	r2, [r3, #0]
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	617b      	str	r3, [r7, #20]
 800610c:	2300      	movs	r3, #0
 800610e:	613b      	str	r3, [r7, #16]
 8006110:	e00b      	b.n	800612a <SEGGER_SYSVIEW_Start+0x11e>
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	b2da      	uxtb	r2, r3
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	1c59      	adds	r1, r3, #1
 800611a:	6179      	str	r1, [r7, #20]
 800611c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006120:	b2d2      	uxtb	r2, r2
 8006122:	701a      	strb	r2, [r3, #0]
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	09db      	lsrs	r3, r3, #7
 8006128:	613b      	str	r3, [r7, #16]
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	2b7f      	cmp	r3, #127	; 0x7f
 800612e:	d8f0      	bhi.n	8006112 <SEGGER_SYSVIEW_Start+0x106>
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	1c5a      	adds	r2, r3, #1
 8006134:	617a      	str	r2, [r7, #20]
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	b2d2      	uxtb	r2, r2
 800613a:	701a      	strb	r2, [r3, #0]
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006140:	2218      	movs	r2, #24
 8006142:	6839      	ldr	r1, [r7, #0]
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f7ff fb25 	bl	8005794 <_SendPacket>
      RECORD_END();
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006150:	4b08      	ldr	r3, [pc, #32]	; (8006174 <SEGGER_SYSVIEW_Start+0x168>)
 8006152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006154:	2b00      	cmp	r3, #0
 8006156:	d002      	beq.n	800615e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006158:	4b06      	ldr	r3, [pc, #24]	; (8006174 <SEGGER_SYSVIEW_Start+0x168>)
 800615a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800615e:	f000 f9eb 	bl	8006538 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006162:	f000 f9b1 	bl	80064c8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006166:	f000 fc83 	bl	8006a70 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800616a:	bf00      	nop
 800616c:	3730      	adds	r7, #48	; 0x30
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	200142f8 	.word	0x200142f8
 8006178:	08007078 	.word	0x08007078
 800617c:	20014328 	.word	0x20014328

08006180 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006186:	f3ef 8311 	mrs	r3, BASEPRI
 800618a:	f04f 0120 	mov.w	r1, #32
 800618e:	f381 8811 	msr	BASEPRI, r1
 8006192:	607b      	str	r3, [r7, #4]
 8006194:	480b      	ldr	r0, [pc, #44]	; (80061c4 <SEGGER_SYSVIEW_Stop+0x44>)
 8006196:	f7ff fa0f 	bl	80055b8 <_PreparePacket>
 800619a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800619c:	4b0a      	ldr	r3, [pc, #40]	; (80061c8 <SEGGER_SYSVIEW_Stop+0x48>)
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d007      	beq.n	80061b4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80061a4:	220b      	movs	r2, #11
 80061a6:	6839      	ldr	r1, [r7, #0]
 80061a8:	6838      	ldr	r0, [r7, #0]
 80061aa:	f7ff faf3 	bl	8005794 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80061ae:	4b06      	ldr	r3, [pc, #24]	; (80061c8 <SEGGER_SYSVIEW_Stop+0x48>)
 80061b0:	2200      	movs	r2, #0
 80061b2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f383 8811 	msr	BASEPRI, r3
}
 80061ba:	bf00      	nop
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	20014328 	.word	0x20014328
 80061c8:	200142f8 	.word	0x200142f8

080061cc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b08c      	sub	sp, #48	; 0x30
 80061d0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80061d2:	f3ef 8311 	mrs	r3, BASEPRI
 80061d6:	f04f 0120 	mov.w	r1, #32
 80061da:	f381 8811 	msr	BASEPRI, r1
 80061de:	60fb      	str	r3, [r7, #12]
 80061e0:	4845      	ldr	r0, [pc, #276]	; (80062f8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80061e2:	f7ff f9e9 	bl	80055b8 <_PreparePacket>
 80061e6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061f0:	4b42      	ldr	r3, [pc, #264]	; (80062fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80061f6:	e00b      	b.n	8006210 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80061f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fa:	b2da      	uxtb	r2, r3
 80061fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fe:	1c59      	adds	r1, r3, #1
 8006200:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006202:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006206:	b2d2      	uxtb	r2, r2
 8006208:	701a      	strb	r2, [r3, #0]
 800620a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620c:	09db      	lsrs	r3, r3, #7
 800620e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006212:	2b7f      	cmp	r3, #127	; 0x7f
 8006214:	d8f0      	bhi.n	80061f8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006218:	1c5a      	adds	r2, r3, #1
 800621a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800621c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800621e:	b2d2      	uxtb	r2, r2
 8006220:	701a      	strb	r2, [r3, #0]
 8006222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006224:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	627b      	str	r3, [r7, #36]	; 0x24
 800622a:	4b34      	ldr	r3, [pc, #208]	; (80062fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	623b      	str	r3, [r7, #32]
 8006230:	e00b      	b.n	800624a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006232:	6a3b      	ldr	r3, [r7, #32]
 8006234:	b2da      	uxtb	r2, r3
 8006236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006238:	1c59      	adds	r1, r3, #1
 800623a:	6279      	str	r1, [r7, #36]	; 0x24
 800623c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006240:	b2d2      	uxtb	r2, r2
 8006242:	701a      	strb	r2, [r3, #0]
 8006244:	6a3b      	ldr	r3, [r7, #32]
 8006246:	09db      	lsrs	r3, r3, #7
 8006248:	623b      	str	r3, [r7, #32]
 800624a:	6a3b      	ldr	r3, [r7, #32]
 800624c:	2b7f      	cmp	r3, #127	; 0x7f
 800624e:	d8f0      	bhi.n	8006232 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	1c5a      	adds	r2, r3, #1
 8006254:	627a      	str	r2, [r7, #36]	; 0x24
 8006256:	6a3a      	ldr	r2, [r7, #32]
 8006258:	b2d2      	uxtb	r2, r2
 800625a:	701a      	strb	r2, [r3, #0]
 800625c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	61fb      	str	r3, [r7, #28]
 8006264:	4b25      	ldr	r3, [pc, #148]	; (80062fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	61bb      	str	r3, [r7, #24]
 800626a:	e00b      	b.n	8006284 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	b2da      	uxtb	r2, r3
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	1c59      	adds	r1, r3, #1
 8006274:	61f9      	str	r1, [r7, #28]
 8006276:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800627a:	b2d2      	uxtb	r2, r2
 800627c:	701a      	strb	r2, [r3, #0]
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	09db      	lsrs	r3, r3, #7
 8006282:	61bb      	str	r3, [r7, #24]
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	2b7f      	cmp	r3, #127	; 0x7f
 8006288:	d8f0      	bhi.n	800626c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	1c5a      	adds	r2, r3, #1
 800628e:	61fa      	str	r2, [r7, #28]
 8006290:	69ba      	ldr	r2, [r7, #24]
 8006292:	b2d2      	uxtb	r2, r2
 8006294:	701a      	strb	r2, [r3, #0]
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	617b      	str	r3, [r7, #20]
 800629e:	2300      	movs	r3, #0
 80062a0:	613b      	str	r3, [r7, #16]
 80062a2:	e00b      	b.n	80062bc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	b2da      	uxtb	r2, r3
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	1c59      	adds	r1, r3, #1
 80062ac:	6179      	str	r1, [r7, #20]
 80062ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062b2:	b2d2      	uxtb	r2, r2
 80062b4:	701a      	strb	r2, [r3, #0]
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	09db      	lsrs	r3, r3, #7
 80062ba:	613b      	str	r3, [r7, #16]
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	2b7f      	cmp	r3, #127	; 0x7f
 80062c0:	d8f0      	bhi.n	80062a4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	1c5a      	adds	r2, r3, #1
 80062c6:	617a      	str	r2, [r7, #20]
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	b2d2      	uxtb	r2, r2
 80062cc:	701a      	strb	r2, [r3, #0]
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80062d2:	2218      	movs	r2, #24
 80062d4:	6879      	ldr	r1, [r7, #4]
 80062d6:	68b8      	ldr	r0, [r7, #8]
 80062d8:	f7ff fa5c 	bl	8005794 <_SendPacket>
  RECORD_END();
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80062e2:	4b06      	ldr	r3, [pc, #24]	; (80062fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80062e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d002      	beq.n	80062f0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80062ea:	4b04      	ldr	r3, [pc, #16]	; (80062fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80062ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ee:	4798      	blx	r3
  }
}
 80062f0:	bf00      	nop
 80062f2:	3730      	adds	r7, #48	; 0x30
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	20014328 	.word	0x20014328
 80062fc:	200142f8 	.word	0x200142f8

08006300 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006300:	b580      	push	{r7, lr}
 8006302:	b092      	sub	sp, #72	; 0x48
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006308:	f3ef 8311 	mrs	r3, BASEPRI
 800630c:	f04f 0120 	mov.w	r1, #32
 8006310:	f381 8811 	msr	BASEPRI, r1
 8006314:	617b      	str	r3, [r7, #20]
 8006316:	486a      	ldr	r0, [pc, #424]	; (80064c0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006318:	f7ff f94e 	bl	80055b8 <_PreparePacket>
 800631c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	647b      	str	r3, [r7, #68]	; 0x44
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	4b66      	ldr	r3, [pc, #408]	; (80064c4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	643b      	str	r3, [r7, #64]	; 0x40
 8006332:	e00b      	b.n	800634c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006336:	b2da      	uxtb	r2, r3
 8006338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800633a:	1c59      	adds	r1, r3, #1
 800633c:	6479      	str	r1, [r7, #68]	; 0x44
 800633e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006342:	b2d2      	uxtb	r2, r2
 8006344:	701a      	strb	r2, [r3, #0]
 8006346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006348:	09db      	lsrs	r3, r3, #7
 800634a:	643b      	str	r3, [r7, #64]	; 0x40
 800634c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800634e:	2b7f      	cmp	r3, #127	; 0x7f
 8006350:	d8f0      	bhi.n	8006334 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006354:	1c5a      	adds	r2, r3, #1
 8006356:	647a      	str	r2, [r7, #68]	; 0x44
 8006358:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800635a:	b2d2      	uxtb	r2, r2
 800635c:	701a      	strb	r2, [r3, #0]
 800635e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006360:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	63bb      	str	r3, [r7, #56]	; 0x38
 800636c:	e00b      	b.n	8006386 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800636e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006370:	b2da      	uxtb	r2, r3
 8006372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006374:	1c59      	adds	r1, r3, #1
 8006376:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006378:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800637c:	b2d2      	uxtb	r2, r2
 800637e:	701a      	strb	r2, [r3, #0]
 8006380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006382:	09db      	lsrs	r3, r3, #7
 8006384:	63bb      	str	r3, [r7, #56]	; 0x38
 8006386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006388:	2b7f      	cmp	r3, #127	; 0x7f
 800638a:	d8f0      	bhi.n	800636e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800638c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006392:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006394:	b2d2      	uxtb	r2, r2
 8006396:	701a      	strb	r2, [r3, #0]
 8006398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800639a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	2220      	movs	r2, #32
 80063a2:	4619      	mov	r1, r3
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f7ff f8b7 	bl	8005518 <_EncodeStr>
 80063aa:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80063ac:	2209      	movs	r2, #9
 80063ae:	68f9      	ldr	r1, [r7, #12]
 80063b0:	6938      	ldr	r0, [r7, #16]
 80063b2:	f7ff f9ef 	bl	8005794 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	637b      	str	r3, [r7, #52]	; 0x34
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	4b40      	ldr	r3, [pc, #256]	; (80064c4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	633b      	str	r3, [r7, #48]	; 0x30
 80063ca:	e00b      	b.n	80063e4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80063cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ce:	b2da      	uxtb	r2, r3
 80063d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d2:	1c59      	adds	r1, r3, #1
 80063d4:	6379      	str	r1, [r7, #52]	; 0x34
 80063d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063da:	b2d2      	uxtb	r2, r2
 80063dc:	701a      	strb	r2, [r3, #0]
 80063de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e0:	09db      	lsrs	r3, r3, #7
 80063e2:	633b      	str	r3, [r7, #48]	; 0x30
 80063e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e6:	2b7f      	cmp	r3, #127	; 0x7f
 80063e8:	d8f0      	bhi.n	80063cc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80063ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ec:	1c5a      	adds	r2, r3, #1
 80063ee:	637a      	str	r2, [r7, #52]	; 0x34
 80063f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063f2:	b2d2      	uxtb	r2, r2
 80063f4:	701a      	strb	r2, [r3, #0]
 80063f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	62bb      	str	r3, [r7, #40]	; 0x28
 8006404:	e00b      	b.n	800641e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006408:	b2da      	uxtb	r2, r3
 800640a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640c:	1c59      	adds	r1, r3, #1
 800640e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006410:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006414:	b2d2      	uxtb	r2, r2
 8006416:	701a      	strb	r2, [r3, #0]
 8006418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641a:	09db      	lsrs	r3, r3, #7
 800641c:	62bb      	str	r3, [r7, #40]	; 0x28
 800641e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006420:	2b7f      	cmp	r3, #127	; 0x7f
 8006422:	d8f0      	bhi.n	8006406 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006426:	1c5a      	adds	r2, r3, #1
 8006428:	62fa      	str	r2, [r7, #44]	; 0x2c
 800642a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800642c:	b2d2      	uxtb	r2, r2
 800642e:	701a      	strb	r2, [r3, #0]
 8006430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006432:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	627b      	str	r3, [r7, #36]	; 0x24
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	623b      	str	r3, [r7, #32]
 800643e:	e00b      	b.n	8006458 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006440:	6a3b      	ldr	r3, [r7, #32]
 8006442:	b2da      	uxtb	r2, r3
 8006444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006446:	1c59      	adds	r1, r3, #1
 8006448:	6279      	str	r1, [r7, #36]	; 0x24
 800644a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800644e:	b2d2      	uxtb	r2, r2
 8006450:	701a      	strb	r2, [r3, #0]
 8006452:	6a3b      	ldr	r3, [r7, #32]
 8006454:	09db      	lsrs	r3, r3, #7
 8006456:	623b      	str	r3, [r7, #32]
 8006458:	6a3b      	ldr	r3, [r7, #32]
 800645a:	2b7f      	cmp	r3, #127	; 0x7f
 800645c:	d8f0      	bhi.n	8006440 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800645e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006460:	1c5a      	adds	r2, r3, #1
 8006462:	627a      	str	r2, [r7, #36]	; 0x24
 8006464:	6a3a      	ldr	r2, [r7, #32]
 8006466:	b2d2      	uxtb	r2, r2
 8006468:	701a      	strb	r2, [r3, #0]
 800646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	61fb      	str	r3, [r7, #28]
 8006472:	2300      	movs	r3, #0
 8006474:	61bb      	str	r3, [r7, #24]
 8006476:	e00b      	b.n	8006490 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	b2da      	uxtb	r2, r3
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	1c59      	adds	r1, r3, #1
 8006480:	61f9      	str	r1, [r7, #28]
 8006482:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006486:	b2d2      	uxtb	r2, r2
 8006488:	701a      	strb	r2, [r3, #0]
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	09db      	lsrs	r3, r3, #7
 800648e:	61bb      	str	r3, [r7, #24]
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	2b7f      	cmp	r3, #127	; 0x7f
 8006494:	d8f0      	bhi.n	8006478 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	1c5a      	adds	r2, r3, #1
 800649a:	61fa      	str	r2, [r7, #28]
 800649c:	69ba      	ldr	r2, [r7, #24]
 800649e:	b2d2      	uxtb	r2, r2
 80064a0:	701a      	strb	r2, [r3, #0]
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80064a6:	2215      	movs	r2, #21
 80064a8:	68f9      	ldr	r1, [r7, #12]
 80064aa:	6938      	ldr	r0, [r7, #16]
 80064ac:	f7ff f972 	bl	8005794 <_SendPacket>
  RECORD_END();
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	f383 8811 	msr	BASEPRI, r3
}
 80064b6:	bf00      	nop
 80064b8:	3748      	adds	r7, #72	; 0x48
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	20014328 	.word	0x20014328
 80064c4:	200142f8 	.word	0x200142f8

080064c8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80064c8:	b580      	push	{r7, lr}
 80064ca:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80064cc:	4b07      	ldr	r3, [pc, #28]	; (80064ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80064ce:	6a1b      	ldr	r3, [r3, #32]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d008      	beq.n	80064e6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80064d4:	4b05      	ldr	r3, [pc, #20]	; (80064ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80064d6:	6a1b      	ldr	r3, [r3, #32]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d003      	beq.n	80064e6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80064de:	4b03      	ldr	r3, [pc, #12]	; (80064ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	4798      	blx	r3
  }
}
 80064e6:	bf00      	nop
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	200142f8 	.word	0x200142f8

080064f0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80064f8:	f3ef 8311 	mrs	r3, BASEPRI
 80064fc:	f04f 0120 	mov.w	r1, #32
 8006500:	f381 8811 	msr	BASEPRI, r1
 8006504:	617b      	str	r3, [r7, #20]
 8006506:	480b      	ldr	r0, [pc, #44]	; (8006534 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006508:	f7ff f856 	bl	80055b8 <_PreparePacket>
 800650c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800650e:	2280      	movs	r2, #128	; 0x80
 8006510:	6879      	ldr	r1, [r7, #4]
 8006512:	6938      	ldr	r0, [r7, #16]
 8006514:	f7ff f800 	bl	8005518 <_EncodeStr>
 8006518:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800651a:	220e      	movs	r2, #14
 800651c:	68f9      	ldr	r1, [r7, #12]
 800651e:	6938      	ldr	r0, [r7, #16]
 8006520:	f7ff f938 	bl	8005794 <_SendPacket>
  RECORD_END();
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	f383 8811 	msr	BASEPRI, r3
}
 800652a:	bf00      	nop
 800652c:	3718      	adds	r7, #24
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	20014328 	.word	0x20014328

08006538 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006538:	b590      	push	{r4, r7, lr}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800653e:	4b15      	ldr	r3, [pc, #84]	; (8006594 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d01a      	beq.n	800657c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006546:	4b13      	ldr	r3, [pc, #76]	; (8006594 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d015      	beq.n	800657c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006550:	4b10      	ldr	r3, [pc, #64]	; (8006594 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4798      	blx	r3
 8006558:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800655c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800655e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006562:	f04f 0200 	mov.w	r2, #0
 8006566:	f04f 0300 	mov.w	r3, #0
 800656a:	000a      	movs	r2, r1
 800656c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800656e:	4613      	mov	r3, r2
 8006570:	461a      	mov	r2, r3
 8006572:	4621      	mov	r1, r4
 8006574:	200d      	movs	r0, #13
 8006576:	f7ff fbe7 	bl	8005d48 <SEGGER_SYSVIEW_RecordU32x2>
 800657a:	e006      	b.n	800658a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800657c:	4b06      	ldr	r3, [pc, #24]	; (8006598 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4619      	mov	r1, r3
 8006582:	200c      	movs	r0, #12
 8006584:	f7ff fba4 	bl	8005cd0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006588:	bf00      	nop
 800658a:	bf00      	nop
 800658c:	370c      	adds	r7, #12
 800658e:	46bd      	mov	sp, r7
 8006590:	bd90      	pop	{r4, r7, pc}
 8006592:	bf00      	nop
 8006594:	200142f8 	.word	0x200142f8
 8006598:	e0001004 	.word	0xe0001004

0800659c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80065a2:	f3ef 8311 	mrs	r3, BASEPRI
 80065a6:	f04f 0120 	mov.w	r1, #32
 80065aa:	f381 8811 	msr	BASEPRI, r1
 80065ae:	60fb      	str	r3, [r7, #12]
 80065b0:	4819      	ldr	r0, [pc, #100]	; (8006618 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80065b2:	f7ff f801 	bl	80055b8 <_PreparePacket>
 80065b6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80065bc:	4b17      	ldr	r3, [pc, #92]	; (800661c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065c4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	617b      	str	r3, [r7, #20]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	613b      	str	r3, [r7, #16]
 80065ce:	e00b      	b.n	80065e8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	b2da      	uxtb	r2, r3
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	1c59      	adds	r1, r3, #1
 80065d8:	6179      	str	r1, [r7, #20]
 80065da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065de:	b2d2      	uxtb	r2, r2
 80065e0:	701a      	strb	r2, [r3, #0]
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	09db      	lsrs	r3, r3, #7
 80065e6:	613b      	str	r3, [r7, #16]
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	2b7f      	cmp	r3, #127	; 0x7f
 80065ec:	d8f0      	bhi.n	80065d0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	1c5a      	adds	r2, r3, #1
 80065f2:	617a      	str	r2, [r7, #20]
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	b2d2      	uxtb	r2, r2
 80065f8:	701a      	strb	r2, [r3, #0]
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80065fe:	2202      	movs	r2, #2
 8006600:	6879      	ldr	r1, [r7, #4]
 8006602:	68b8      	ldr	r0, [r7, #8]
 8006604:	f7ff f8c6 	bl	8005794 <_SendPacket>
  RECORD_END();
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f383 8811 	msr	BASEPRI, r3
}
 800660e:	bf00      	nop
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	20014328 	.word	0x20014328
 800661c:	e000ed04 	.word	0xe000ed04

08006620 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006626:	f3ef 8311 	mrs	r3, BASEPRI
 800662a:	f04f 0120 	mov.w	r1, #32
 800662e:	f381 8811 	msr	BASEPRI, r1
 8006632:	607b      	str	r3, [r7, #4]
 8006634:	4807      	ldr	r0, [pc, #28]	; (8006654 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006636:	f7fe ffbf 	bl	80055b8 <_PreparePacket>
 800663a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800663c:	2203      	movs	r2, #3
 800663e:	6839      	ldr	r1, [r7, #0]
 8006640:	6838      	ldr	r0, [r7, #0]
 8006642:	f7ff f8a7 	bl	8005794 <_SendPacket>
  RECORD_END();
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f383 8811 	msr	BASEPRI, r3
}
 800664c:	bf00      	nop
 800664e:	3708      	adds	r7, #8
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	20014328 	.word	0x20014328

08006658 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800665e:	f3ef 8311 	mrs	r3, BASEPRI
 8006662:	f04f 0120 	mov.w	r1, #32
 8006666:	f381 8811 	msr	BASEPRI, r1
 800666a:	607b      	str	r3, [r7, #4]
 800666c:	4807      	ldr	r0, [pc, #28]	; (800668c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800666e:	f7fe ffa3 	bl	80055b8 <_PreparePacket>
 8006672:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006674:	2212      	movs	r2, #18
 8006676:	6839      	ldr	r1, [r7, #0]
 8006678:	6838      	ldr	r0, [r7, #0]
 800667a:	f7ff f88b 	bl	8005794 <_SendPacket>
  RECORD_END();
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f383 8811 	msr	BASEPRI, r3
}
 8006684:	bf00      	nop
 8006686:	3708      	adds	r7, #8
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	20014328 	.word	0x20014328

08006690 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006696:	f3ef 8311 	mrs	r3, BASEPRI
 800669a:	f04f 0120 	mov.w	r1, #32
 800669e:	f381 8811 	msr	BASEPRI, r1
 80066a2:	607b      	str	r3, [r7, #4]
 80066a4:	4807      	ldr	r0, [pc, #28]	; (80066c4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80066a6:	f7fe ff87 	bl	80055b8 <_PreparePacket>
 80066aa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80066ac:	2211      	movs	r2, #17
 80066ae:	6839      	ldr	r1, [r7, #0]
 80066b0:	6838      	ldr	r0, [r7, #0]
 80066b2:	f7ff f86f 	bl	8005794 <_SendPacket>
  RECORD_END();
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f383 8811 	msr	BASEPRI, r3
}
 80066bc:	bf00      	nop
 80066be:	3708      	adds	r7, #8
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	20014328 	.word	0x20014328

080066c8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b088      	sub	sp, #32
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80066d0:	f3ef 8311 	mrs	r3, BASEPRI
 80066d4:	f04f 0120 	mov.w	r1, #32
 80066d8:	f381 8811 	msr	BASEPRI, r1
 80066dc:	617b      	str	r3, [r7, #20]
 80066de:	4819      	ldr	r0, [pc, #100]	; (8006744 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80066e0:	f7fe ff6a 	bl	80055b8 <_PreparePacket>
 80066e4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80066ea:	4b17      	ldr	r3, [pc, #92]	; (8006748 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	61fb      	str	r3, [r7, #28]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	61bb      	str	r3, [r7, #24]
 80066fc:	e00b      	b.n	8006716 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	b2da      	uxtb	r2, r3
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	1c59      	adds	r1, r3, #1
 8006706:	61f9      	str	r1, [r7, #28]
 8006708:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800670c:	b2d2      	uxtb	r2, r2
 800670e:	701a      	strb	r2, [r3, #0]
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	09db      	lsrs	r3, r3, #7
 8006714:	61bb      	str	r3, [r7, #24]
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	2b7f      	cmp	r3, #127	; 0x7f
 800671a:	d8f0      	bhi.n	80066fe <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	1c5a      	adds	r2, r3, #1
 8006720:	61fa      	str	r2, [r7, #28]
 8006722:	69ba      	ldr	r2, [r7, #24]
 8006724:	b2d2      	uxtb	r2, r2
 8006726:	701a      	strb	r2, [r3, #0]
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800672c:	2208      	movs	r2, #8
 800672e:	68f9      	ldr	r1, [r7, #12]
 8006730:	6938      	ldr	r0, [r7, #16]
 8006732:	f7ff f82f 	bl	8005794 <_SendPacket>
  RECORD_END();
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	f383 8811 	msr	BASEPRI, r3
}
 800673c:	bf00      	nop
 800673e:	3720      	adds	r7, #32
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	20014328 	.word	0x20014328
 8006748:	200142f8 	.word	0x200142f8

0800674c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800674c:	b580      	push	{r7, lr}
 800674e:	b088      	sub	sp, #32
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006754:	f3ef 8311 	mrs	r3, BASEPRI
 8006758:	f04f 0120 	mov.w	r1, #32
 800675c:	f381 8811 	msr	BASEPRI, r1
 8006760:	617b      	str	r3, [r7, #20]
 8006762:	4819      	ldr	r0, [pc, #100]	; (80067c8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006764:	f7fe ff28 	bl	80055b8 <_PreparePacket>
 8006768:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800676e:	4b17      	ldr	r3, [pc, #92]	; (80067cc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	61fb      	str	r3, [r7, #28]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	61bb      	str	r3, [r7, #24]
 8006780:	e00b      	b.n	800679a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	b2da      	uxtb	r2, r3
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	1c59      	adds	r1, r3, #1
 800678a:	61f9      	str	r1, [r7, #28]
 800678c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006790:	b2d2      	uxtb	r2, r2
 8006792:	701a      	strb	r2, [r3, #0]
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	09db      	lsrs	r3, r3, #7
 8006798:	61bb      	str	r3, [r7, #24]
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	2b7f      	cmp	r3, #127	; 0x7f
 800679e:	d8f0      	bhi.n	8006782 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	1c5a      	adds	r2, r3, #1
 80067a4:	61fa      	str	r2, [r7, #28]
 80067a6:	69ba      	ldr	r2, [r7, #24]
 80067a8:	b2d2      	uxtb	r2, r2
 80067aa:	701a      	strb	r2, [r3, #0]
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80067b0:	2204      	movs	r2, #4
 80067b2:	68f9      	ldr	r1, [r7, #12]
 80067b4:	6938      	ldr	r0, [r7, #16]
 80067b6:	f7fe ffed 	bl	8005794 <_SendPacket>
  RECORD_END();
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	f383 8811 	msr	BASEPRI, r3
}
 80067c0:	bf00      	nop
 80067c2:	3720      	adds	r7, #32
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	20014328 	.word	0x20014328
 80067cc:	200142f8 	.word	0x200142f8

080067d0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b088      	sub	sp, #32
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80067d8:	f3ef 8311 	mrs	r3, BASEPRI
 80067dc:	f04f 0120 	mov.w	r1, #32
 80067e0:	f381 8811 	msr	BASEPRI, r1
 80067e4:	617b      	str	r3, [r7, #20]
 80067e6:	4819      	ldr	r0, [pc, #100]	; (800684c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80067e8:	f7fe fee6 	bl	80055b8 <_PreparePacket>
 80067ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80067f2:	4b17      	ldr	r3, [pc, #92]	; (8006850 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	61fb      	str	r3, [r7, #28]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	61bb      	str	r3, [r7, #24]
 8006804:	e00b      	b.n	800681e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	b2da      	uxtb	r2, r3
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	1c59      	adds	r1, r3, #1
 800680e:	61f9      	str	r1, [r7, #28]
 8006810:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006814:	b2d2      	uxtb	r2, r2
 8006816:	701a      	strb	r2, [r3, #0]
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	09db      	lsrs	r3, r3, #7
 800681c:	61bb      	str	r3, [r7, #24]
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	2b7f      	cmp	r3, #127	; 0x7f
 8006822:	d8f0      	bhi.n	8006806 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	1c5a      	adds	r2, r3, #1
 8006828:	61fa      	str	r2, [r7, #28]
 800682a:	69ba      	ldr	r2, [r7, #24]
 800682c:	b2d2      	uxtb	r2, r2
 800682e:	701a      	strb	r2, [r3, #0]
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006834:	2206      	movs	r2, #6
 8006836:	68f9      	ldr	r1, [r7, #12]
 8006838:	6938      	ldr	r0, [r7, #16]
 800683a:	f7fe ffab 	bl	8005794 <_SendPacket>
  RECORD_END();
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	f383 8811 	msr	BASEPRI, r3
}
 8006844:	bf00      	nop
 8006846:	3720      	adds	r7, #32
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	20014328 	.word	0x20014328
 8006850:	200142f8 	.word	0x200142f8

08006854 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006854:	b580      	push	{r7, lr}
 8006856:	b08a      	sub	sp, #40	; 0x28
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800685e:	f3ef 8311 	mrs	r3, BASEPRI
 8006862:	f04f 0120 	mov.w	r1, #32
 8006866:	f381 8811 	msr	BASEPRI, r1
 800686a:	617b      	str	r3, [r7, #20]
 800686c:	4827      	ldr	r0, [pc, #156]	; (800690c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800686e:	f7fe fea3 	bl	80055b8 <_PreparePacket>
 8006872:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006878:	4b25      	ldr	r3, [pc, #148]	; (8006910 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	627b      	str	r3, [r7, #36]	; 0x24
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	623b      	str	r3, [r7, #32]
 800688a:	e00b      	b.n	80068a4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800688c:	6a3b      	ldr	r3, [r7, #32]
 800688e:	b2da      	uxtb	r2, r3
 8006890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006892:	1c59      	adds	r1, r3, #1
 8006894:	6279      	str	r1, [r7, #36]	; 0x24
 8006896:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800689a:	b2d2      	uxtb	r2, r2
 800689c:	701a      	strb	r2, [r3, #0]
 800689e:	6a3b      	ldr	r3, [r7, #32]
 80068a0:	09db      	lsrs	r3, r3, #7
 80068a2:	623b      	str	r3, [r7, #32]
 80068a4:	6a3b      	ldr	r3, [r7, #32]
 80068a6:	2b7f      	cmp	r3, #127	; 0x7f
 80068a8:	d8f0      	bhi.n	800688c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80068aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ac:	1c5a      	adds	r2, r3, #1
 80068ae:	627a      	str	r2, [r7, #36]	; 0x24
 80068b0:	6a3a      	ldr	r2, [r7, #32]
 80068b2:	b2d2      	uxtb	r2, r2
 80068b4:	701a      	strb	r2, [r3, #0]
 80068b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	61fb      	str	r3, [r7, #28]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	61bb      	str	r3, [r7, #24]
 80068c2:	e00b      	b.n	80068dc <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	b2da      	uxtb	r2, r3
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	1c59      	adds	r1, r3, #1
 80068cc:	61f9      	str	r1, [r7, #28]
 80068ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068d2:	b2d2      	uxtb	r2, r2
 80068d4:	701a      	strb	r2, [r3, #0]
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	09db      	lsrs	r3, r3, #7
 80068da:	61bb      	str	r3, [r7, #24]
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	2b7f      	cmp	r3, #127	; 0x7f
 80068e0:	d8f0      	bhi.n	80068c4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	1c5a      	adds	r2, r3, #1
 80068e6:	61fa      	str	r2, [r7, #28]
 80068e8:	69ba      	ldr	r2, [r7, #24]
 80068ea:	b2d2      	uxtb	r2, r2
 80068ec:	701a      	strb	r2, [r3, #0]
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80068f2:	2207      	movs	r2, #7
 80068f4:	68f9      	ldr	r1, [r7, #12]
 80068f6:	6938      	ldr	r0, [r7, #16]
 80068f8:	f7fe ff4c 	bl	8005794 <_SendPacket>
  RECORD_END();
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	f383 8811 	msr	BASEPRI, r3
}
 8006902:	bf00      	nop
 8006904:	3728      	adds	r7, #40	; 0x28
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	20014328 	.word	0x20014328
 8006910:	200142f8 	.word	0x200142f8

08006914 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800691c:	4b04      	ldr	r3, [pc, #16]	; (8006930 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	1ad3      	subs	r3, r2, r3
}
 8006924:	4618      	mov	r0, r3
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr
 8006930:	200142f8 	.word	0x200142f8

08006934 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006934:	b580      	push	{r7, lr}
 8006936:	b08c      	sub	sp, #48	; 0x30
 8006938:	af00      	add	r7, sp, #0
 800693a:	4603      	mov	r3, r0
 800693c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800693e:	4b3b      	ldr	r3, [pc, #236]	; (8006a2c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d06d      	beq.n	8006a22 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006946:	4b39      	ldr	r3, [pc, #228]	; (8006a2c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800694c:	2300      	movs	r3, #0
 800694e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006950:	e008      	b.n	8006964 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695a:	2b00      	cmp	r3, #0
 800695c:	d007      	beq.n	800696e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800695e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006960:	3301      	adds	r3, #1
 8006962:	62bb      	str	r3, [r7, #40]	; 0x28
 8006964:	79fb      	ldrb	r3, [r7, #7]
 8006966:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006968:	429a      	cmp	r2, r3
 800696a:	d3f2      	bcc.n	8006952 <SEGGER_SYSVIEW_SendModule+0x1e>
 800696c:	e000      	b.n	8006970 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800696e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006972:	2b00      	cmp	r3, #0
 8006974:	d055      	beq.n	8006a22 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006976:	f3ef 8311 	mrs	r3, BASEPRI
 800697a:	f04f 0120 	mov.w	r1, #32
 800697e:	f381 8811 	msr	BASEPRI, r1
 8006982:	617b      	str	r3, [r7, #20]
 8006984:	482a      	ldr	r0, [pc, #168]	; (8006a30 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006986:	f7fe fe17 	bl	80055b8 <_PreparePacket>
 800698a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	627b      	str	r3, [r7, #36]	; 0x24
 8006994:	79fb      	ldrb	r3, [r7, #7]
 8006996:	623b      	str	r3, [r7, #32]
 8006998:	e00b      	b.n	80069b2 <SEGGER_SYSVIEW_SendModule+0x7e>
 800699a:	6a3b      	ldr	r3, [r7, #32]
 800699c:	b2da      	uxtb	r2, r3
 800699e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a0:	1c59      	adds	r1, r3, #1
 80069a2:	6279      	str	r1, [r7, #36]	; 0x24
 80069a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069a8:	b2d2      	uxtb	r2, r2
 80069aa:	701a      	strb	r2, [r3, #0]
 80069ac:	6a3b      	ldr	r3, [r7, #32]
 80069ae:	09db      	lsrs	r3, r3, #7
 80069b0:	623b      	str	r3, [r7, #32]
 80069b2:	6a3b      	ldr	r3, [r7, #32]
 80069b4:	2b7f      	cmp	r3, #127	; 0x7f
 80069b6:	d8f0      	bhi.n	800699a <SEGGER_SYSVIEW_SendModule+0x66>
 80069b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ba:	1c5a      	adds	r2, r3, #1
 80069bc:	627a      	str	r2, [r7, #36]	; 0x24
 80069be:	6a3a      	ldr	r2, [r7, #32]
 80069c0:	b2d2      	uxtb	r2, r2
 80069c2:	701a      	strb	r2, [r3, #0]
 80069c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	61fb      	str	r3, [r7, #28]
 80069cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	61bb      	str	r3, [r7, #24]
 80069d2:	e00b      	b.n	80069ec <SEGGER_SYSVIEW_SendModule+0xb8>
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	b2da      	uxtb	r2, r3
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	1c59      	adds	r1, r3, #1
 80069dc:	61f9      	str	r1, [r7, #28]
 80069de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069e2:	b2d2      	uxtb	r2, r2
 80069e4:	701a      	strb	r2, [r3, #0]
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	09db      	lsrs	r3, r3, #7
 80069ea:	61bb      	str	r3, [r7, #24]
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	2b7f      	cmp	r3, #127	; 0x7f
 80069f0:	d8f0      	bhi.n	80069d4 <SEGGER_SYSVIEW_SendModule+0xa0>
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	1c5a      	adds	r2, r3, #1
 80069f6:	61fa      	str	r2, [r7, #28]
 80069f8:	69ba      	ldr	r2, [r7, #24]
 80069fa:	b2d2      	uxtb	r2, r2
 80069fc:	701a      	strb	r2, [r3, #0]
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2280      	movs	r2, #128	; 0x80
 8006a08:	4619      	mov	r1, r3
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f7fe fd84 	bl	8005518 <_EncodeStr>
 8006a10:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006a12:	2216      	movs	r2, #22
 8006a14:	68f9      	ldr	r1, [r7, #12]
 8006a16:	6938      	ldr	r0, [r7, #16]
 8006a18:	f7fe febc 	bl	8005794 <_SendPacket>
      RECORD_END();
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006a22:	bf00      	nop
 8006a24:	3730      	adds	r7, #48	; 0x30
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	20014320 	.word	0x20014320
 8006a30:	20014328 	.word	0x20014328

08006a34 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006a3a:	4b0c      	ldr	r3, [pc, #48]	; (8006a6c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00f      	beq.n	8006a62 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006a42:	4b0a      	ldr	r3, [pc, #40]	; (8006a6c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d002      	beq.n	8006a56 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1f2      	bne.n	8006a48 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006a62:	bf00      	nop
 8006a64:	3708      	adds	r7, #8
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	20014320 	.word	0x20014320

08006a70 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b086      	sub	sp, #24
 8006a74:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006a76:	f3ef 8311 	mrs	r3, BASEPRI
 8006a7a:	f04f 0120 	mov.w	r1, #32
 8006a7e:	f381 8811 	msr	BASEPRI, r1
 8006a82:	60fb      	str	r3, [r7, #12]
 8006a84:	4817      	ldr	r0, [pc, #92]	; (8006ae4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006a86:	f7fe fd97 	bl	80055b8 <_PreparePacket>
 8006a8a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	617b      	str	r3, [r7, #20]
 8006a94:	4b14      	ldr	r3, [pc, #80]	; (8006ae8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	613b      	str	r3, [r7, #16]
 8006a9a:	e00b      	b.n	8006ab4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	b2da      	uxtb	r2, r3
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	1c59      	adds	r1, r3, #1
 8006aa4:	6179      	str	r1, [r7, #20]
 8006aa6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006aaa:	b2d2      	uxtb	r2, r2
 8006aac:	701a      	strb	r2, [r3, #0]
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	09db      	lsrs	r3, r3, #7
 8006ab2:	613b      	str	r3, [r7, #16]
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	2b7f      	cmp	r3, #127	; 0x7f
 8006ab8:	d8f0      	bhi.n	8006a9c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	1c5a      	adds	r2, r3, #1
 8006abe:	617a      	str	r2, [r7, #20]
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	b2d2      	uxtb	r2, r2
 8006ac4:	701a      	strb	r2, [r3, #0]
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006aca:	221b      	movs	r2, #27
 8006acc:	6879      	ldr	r1, [r7, #4]
 8006ace:	68b8      	ldr	r0, [r7, #8]
 8006ad0:	f7fe fe60 	bl	8005794 <_SendPacket>
  RECORD_END();
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f383 8811 	msr	BASEPRI, r3
}
 8006ada:	bf00      	nop
 8006adc:	3718      	adds	r7, #24
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	20014328 	.word	0x20014328
 8006ae8:	20014324 	.word	0x20014324

08006aec <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 8006aec:	b40f      	push	{r0, r1, r2, r3}
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b082      	sub	sp, #8
 8006af2:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 8006af4:	f107 0314 	add.w	r3, r7, #20
 8006af8:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006afa:	1d3b      	adds	r3, r7, #4
 8006afc:	461a      	mov	r2, r3
 8006afe:	2100      	movs	r1, #0
 8006b00:	6938      	ldr	r0, [r7, #16]
 8006b02:	f7fe ffb5 	bl	8005a70 <_VPrintHost>
  va_end(ParamList);
#endif
}
 8006b06:	bf00      	nop
 8006b08:	3708      	adds	r7, #8
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b10:	b004      	add	sp, #16
 8006b12:	4770      	bx	lr

08006b14 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b08a      	sub	sp, #40	; 0x28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b1c:	f3ef 8311 	mrs	r3, BASEPRI
 8006b20:	f04f 0120 	mov.w	r1, #32
 8006b24:	f381 8811 	msr	BASEPRI, r1
 8006b28:	617b      	str	r3, [r7, #20]
 8006b2a:	4827      	ldr	r0, [pc, #156]	; (8006bc8 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006b2c:	f7fe fd44 	bl	80055b8 <_PreparePacket>
 8006b30:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b32:	2280      	movs	r2, #128	; 0x80
 8006b34:	6879      	ldr	r1, [r7, #4]
 8006b36:	6938      	ldr	r0, [r7, #16]
 8006b38:	f7fe fcee 	bl	8005518 <_EncodeStr>
 8006b3c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	627b      	str	r3, [r7, #36]	; 0x24
 8006b42:	2301      	movs	r3, #1
 8006b44:	623b      	str	r3, [r7, #32]
 8006b46:	e00b      	b.n	8006b60 <SEGGER_SYSVIEW_Warn+0x4c>
 8006b48:	6a3b      	ldr	r3, [r7, #32]
 8006b4a:	b2da      	uxtb	r2, r3
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4e:	1c59      	adds	r1, r3, #1
 8006b50:	6279      	str	r1, [r7, #36]	; 0x24
 8006b52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b56:	b2d2      	uxtb	r2, r2
 8006b58:	701a      	strb	r2, [r3, #0]
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
 8006b5c:	09db      	lsrs	r3, r3, #7
 8006b5e:	623b      	str	r3, [r7, #32]
 8006b60:	6a3b      	ldr	r3, [r7, #32]
 8006b62:	2b7f      	cmp	r3, #127	; 0x7f
 8006b64:	d8f0      	bhi.n	8006b48 <SEGGER_SYSVIEW_Warn+0x34>
 8006b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b68:	1c5a      	adds	r2, r3, #1
 8006b6a:	627a      	str	r2, [r7, #36]	; 0x24
 8006b6c:	6a3a      	ldr	r2, [r7, #32]
 8006b6e:	b2d2      	uxtb	r2, r2
 8006b70:	701a      	strb	r2, [r3, #0]
 8006b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b74:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	61fb      	str	r3, [r7, #28]
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	61bb      	str	r3, [r7, #24]
 8006b7e:	e00b      	b.n	8006b98 <SEGGER_SYSVIEW_Warn+0x84>
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	b2da      	uxtb	r2, r3
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	1c59      	adds	r1, r3, #1
 8006b88:	61f9      	str	r1, [r7, #28]
 8006b8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b8e:	b2d2      	uxtb	r2, r2
 8006b90:	701a      	strb	r2, [r3, #0]
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	09db      	lsrs	r3, r3, #7
 8006b96:	61bb      	str	r3, [r7, #24]
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	2b7f      	cmp	r3, #127	; 0x7f
 8006b9c:	d8f0      	bhi.n	8006b80 <SEGGER_SYSVIEW_Warn+0x6c>
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	1c5a      	adds	r2, r3, #1
 8006ba2:	61fa      	str	r2, [r7, #28]
 8006ba4:	69ba      	ldr	r2, [r7, #24]
 8006ba6:	b2d2      	uxtb	r2, r2
 8006ba8:	701a      	strb	r2, [r3, #0]
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006bae:	221a      	movs	r2, #26
 8006bb0:	68f9      	ldr	r1, [r7, #12]
 8006bb2:	6938      	ldr	r0, [r7, #16]
 8006bb4:	f7fe fdee 	bl	8005794 <_SendPacket>
  RECORD_END();
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	f383 8811 	msr	BASEPRI, r3
}
 8006bbe:	bf00      	nop
 8006bc0:	3728      	adds	r7, #40	; 0x28
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	20014328 	.word	0x20014328

08006bcc <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8006bd0:	4803      	ldr	r0, [pc, #12]	; (8006be0 <_cbSendSystemDesc+0x14>)
 8006bd2:	f7ff fc8d 	bl	80064f0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8006bd6:	4803      	ldr	r0, [pc, #12]	; (8006be4 <_cbSendSystemDesc+0x18>)
 8006bd8:	f7ff fc8a 	bl	80064f0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8006bdc:	bf00      	nop
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	08006fa0 	.word	0x08006fa0
 8006be4:	08006fe4 	.word	0x08006fe4

08006be8 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8006be8:	b580      	push	{r7, lr}
 8006bea:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8006bec:	4b06      	ldr	r3, [pc, #24]	; (8006c08 <SEGGER_SYSVIEW_Conf+0x20>)
 8006bee:	6818      	ldr	r0, [r3, #0]
 8006bf0:	4b05      	ldr	r3, [pc, #20]	; (8006c08 <SEGGER_SYSVIEW_Conf+0x20>)
 8006bf2:	6819      	ldr	r1, [r3, #0]
 8006bf4:	4b05      	ldr	r3, [pc, #20]	; (8006c0c <SEGGER_SYSVIEW_Conf+0x24>)
 8006bf6:	4a06      	ldr	r2, [pc, #24]	; (8006c10 <SEGGER_SYSVIEW_Conf+0x28>)
 8006bf8:	f7fe fff8 	bl	8005bec <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8006bfc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8006c00:	f7ff f838 	bl	8005c74 <SEGGER_SYSVIEW_SetRAMBase>
}
 8006c04:	bf00      	nop
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	20000010 	.word	0x20000010
 8006c0c:	08006bcd 	.word	0x08006bcd
 8006c10:	08007084 	.word	0x08007084

08006c14 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8006c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	607b      	str	r3, [r7, #4]
 8006c1e:	e033      	b.n	8006c88 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8006c20:	491e      	ldr	r1, [pc, #120]	; (8006c9c <_cbSendTaskList+0x88>)
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	4613      	mov	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	4413      	add	r3, r2
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	440b      	add	r3, r1
 8006c2e:	6818      	ldr	r0, [r3, #0]
 8006c30:	491a      	ldr	r1, [pc, #104]	; (8006c9c <_cbSendTaskList+0x88>)
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	4613      	mov	r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	440b      	add	r3, r1
 8006c3e:	3304      	adds	r3, #4
 8006c40:	6819      	ldr	r1, [r3, #0]
 8006c42:	4c16      	ldr	r4, [pc, #88]	; (8006c9c <_cbSendTaskList+0x88>)
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	4613      	mov	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4413      	add	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4423      	add	r3, r4
 8006c50:	3308      	adds	r3, #8
 8006c52:	681c      	ldr	r4, [r3, #0]
 8006c54:	4d11      	ldr	r5, [pc, #68]	; (8006c9c <_cbSendTaskList+0x88>)
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	4413      	add	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	442b      	add	r3, r5
 8006c62:	330c      	adds	r3, #12
 8006c64:	681d      	ldr	r5, [r3, #0]
 8006c66:	4e0d      	ldr	r6, [pc, #52]	; (8006c9c <_cbSendTaskList+0x88>)
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4413      	add	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4433      	add	r3, r6
 8006c74:	3310      	adds	r3, #16
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	9300      	str	r3, [sp, #0]
 8006c7a:	462b      	mov	r3, r5
 8006c7c:	4622      	mov	r2, r4
 8006c7e:	f000 f8bd 	bl	8006dfc <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	3301      	adds	r3, #1
 8006c86:	607b      	str	r3, [r7, #4]
 8006c88:	4b05      	ldr	r3, [pc, #20]	; (8006ca0 <_cbSendTaskList+0x8c>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d3c6      	bcc.n	8006c20 <_cbSendTaskList+0xc>
  }
}
 8006c92:	bf00      	nop
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c9c:	2001440c 	.word	0x2001440c
 8006ca0:	200144ac 	.word	0x200144ac

08006ca4 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8006ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ca8:	b082      	sub	sp, #8
 8006caa:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8006cac:	f7fc fdb8 	bl	8003820 <xTaskGetTickCountFromISR>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	469a      	mov	sl, r3
 8006cb6:	4693      	mov	fp, r2
 8006cb8:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8006cbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	f04f 0a00 	mov.w	sl, #0
 8006cc8:	f04f 0b00 	mov.w	fp, #0
 8006ccc:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8006cd0:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8006cd4:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8006cd8:	4652      	mov	r2, sl
 8006cda:	465b      	mov	r3, fp
 8006cdc:	1a14      	subs	r4, r2, r0
 8006cde:	eb63 0501 	sbc.w	r5, r3, r1
 8006ce2:	f04f 0200 	mov.w	r2, #0
 8006ce6:	f04f 0300 	mov.w	r3, #0
 8006cea:	00ab      	lsls	r3, r5, #2
 8006cec:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8006cf0:	00a2      	lsls	r2, r4, #2
 8006cf2:	4614      	mov	r4, r2
 8006cf4:	461d      	mov	r5, r3
 8006cf6:	eb14 0800 	adds.w	r8, r4, r0
 8006cfa:	eb45 0901 	adc.w	r9, r5, r1
 8006cfe:	f04f 0200 	mov.w	r2, #0
 8006d02:	f04f 0300 	mov.w	r3, #0
 8006d06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d12:	4690      	mov	r8, r2
 8006d14:	4699      	mov	r9, r3
 8006d16:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8006d1a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8006d1e:	4610      	mov	r0, r2
 8006d20:	4619      	mov	r1, r3
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08006d2c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b086      	sub	sp, #24
 8006d30:	af02      	add	r7, sp, #8
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
 8006d38:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8006d3a:	2205      	movs	r2, #5
 8006d3c:	492b      	ldr	r1, [pc, #172]	; (8006dec <SYSVIEW_AddTask+0xc0>)
 8006d3e:	68b8      	ldr	r0, [r7, #8]
 8006d40:	f000 f8a2 	bl	8006e88 <memcmp>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d04b      	beq.n	8006de2 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8006d4a:	4b29      	ldr	r3, [pc, #164]	; (8006df0 <SYSVIEW_AddTask+0xc4>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2b07      	cmp	r3, #7
 8006d50:	d903      	bls.n	8006d5a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8006d52:	4828      	ldr	r0, [pc, #160]	; (8006df4 <SYSVIEW_AddTask+0xc8>)
 8006d54:	f7ff fede 	bl	8006b14 <SEGGER_SYSVIEW_Warn>
    return;
 8006d58:	e044      	b.n	8006de4 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8006d5a:	4b25      	ldr	r3, [pc, #148]	; (8006df0 <SYSVIEW_AddTask+0xc4>)
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	4926      	ldr	r1, [pc, #152]	; (8006df8 <SYSVIEW_AddTask+0xcc>)
 8006d60:	4613      	mov	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4413      	add	r3, r2
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	440b      	add	r3, r1
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8006d6e:	4b20      	ldr	r3, [pc, #128]	; (8006df0 <SYSVIEW_AddTask+0xc4>)
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	4921      	ldr	r1, [pc, #132]	; (8006df8 <SYSVIEW_AddTask+0xcc>)
 8006d74:	4613      	mov	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4413      	add	r3, r2
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	440b      	add	r3, r1
 8006d7e:	3304      	adds	r3, #4
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8006d84:	4b1a      	ldr	r3, [pc, #104]	; (8006df0 <SYSVIEW_AddTask+0xc4>)
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	491b      	ldr	r1, [pc, #108]	; (8006df8 <SYSVIEW_AddTask+0xcc>)
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	4413      	add	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	440b      	add	r3, r1
 8006d94:	3308      	adds	r3, #8
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8006d9a:	4b15      	ldr	r3, [pc, #84]	; (8006df0 <SYSVIEW_AddTask+0xc4>)
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	4916      	ldr	r1, [pc, #88]	; (8006df8 <SYSVIEW_AddTask+0xcc>)
 8006da0:	4613      	mov	r3, r2
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	4413      	add	r3, r2
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	440b      	add	r3, r1
 8006daa:	330c      	adds	r3, #12
 8006dac:	683a      	ldr	r2, [r7, #0]
 8006dae:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8006db0:	4b0f      	ldr	r3, [pc, #60]	; (8006df0 <SYSVIEW_AddTask+0xc4>)
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	4910      	ldr	r1, [pc, #64]	; (8006df8 <SYSVIEW_AddTask+0xcc>)
 8006db6:	4613      	mov	r3, r2
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4413      	add	r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	440b      	add	r3, r1
 8006dc0:	3310      	adds	r3, #16
 8006dc2:	69ba      	ldr	r2, [r7, #24]
 8006dc4:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8006dc6:	4b0a      	ldr	r3, [pc, #40]	; (8006df0 <SYSVIEW_AddTask+0xc4>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	4a08      	ldr	r2, [pc, #32]	; (8006df0 <SYSVIEW_AddTask+0xc4>)
 8006dce:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	9300      	str	r3, [sp, #0]
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	68b9      	ldr	r1, [r7, #8]
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f000 f80e 	bl	8006dfc <SYSVIEW_SendTaskInfo>
 8006de0:	e000      	b.n	8006de4 <SYSVIEW_AddTask+0xb8>
    return;
 8006de2:	bf00      	nop

}
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	08006ff4 	.word	0x08006ff4
 8006df0:	200144ac 	.word	0x200144ac
 8006df4:	08006ffc 	.word	0x08006ffc
 8006df8:	2001440c 	.word	0x2001440c

08006dfc <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b08a      	sub	sp, #40	; 0x28
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
 8006e08:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8006e0a:	f107 0314 	add.w	r3, r7, #20
 8006e0e:	2214      	movs	r2, #20
 8006e10:	2100      	movs	r1, #0
 8006e12:	4618      	mov	r0, r3
 8006e14:	f000 f856 	bl	8006ec4 <memset>
  TaskInfo.TaskID     = TaskID;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8006e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8006e2c:	f107 0314 	add.w	r3, r7, #20
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7ff fa65 	bl	8006300 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8006e36:	bf00      	nop
 8006e38:	3728      	adds	r7, #40	; 0x28
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
	...

08006e40 <__libc_init_array>:
 8006e40:	b570      	push	{r4, r5, r6, lr}
 8006e42:	4d0d      	ldr	r5, [pc, #52]	; (8006e78 <__libc_init_array+0x38>)
 8006e44:	4c0d      	ldr	r4, [pc, #52]	; (8006e7c <__libc_init_array+0x3c>)
 8006e46:	1b64      	subs	r4, r4, r5
 8006e48:	10a4      	asrs	r4, r4, #2
 8006e4a:	2600      	movs	r6, #0
 8006e4c:	42a6      	cmp	r6, r4
 8006e4e:	d109      	bne.n	8006e64 <__libc_init_array+0x24>
 8006e50:	4d0b      	ldr	r5, [pc, #44]	; (8006e80 <__libc_init_array+0x40>)
 8006e52:	4c0c      	ldr	r4, [pc, #48]	; (8006e84 <__libc_init_array+0x44>)
 8006e54:	f000 f83e 	bl	8006ed4 <_init>
 8006e58:	1b64      	subs	r4, r4, r5
 8006e5a:	10a4      	asrs	r4, r4, #2
 8006e5c:	2600      	movs	r6, #0
 8006e5e:	42a6      	cmp	r6, r4
 8006e60:	d105      	bne.n	8006e6e <__libc_init_array+0x2e>
 8006e62:	bd70      	pop	{r4, r5, r6, pc}
 8006e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e68:	4798      	blx	r3
 8006e6a:	3601      	adds	r6, #1
 8006e6c:	e7ee      	b.n	8006e4c <__libc_init_array+0xc>
 8006e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e72:	4798      	blx	r3
 8006e74:	3601      	adds	r6, #1
 8006e76:	e7f2      	b.n	8006e5e <__libc_init_array+0x1e>
 8006e78:	08007094 	.word	0x08007094
 8006e7c:	08007094 	.word	0x08007094
 8006e80:	08007094 	.word	0x08007094
 8006e84:	08007098 	.word	0x08007098

08006e88 <memcmp>:
 8006e88:	b510      	push	{r4, lr}
 8006e8a:	3901      	subs	r1, #1
 8006e8c:	4402      	add	r2, r0
 8006e8e:	4290      	cmp	r0, r2
 8006e90:	d101      	bne.n	8006e96 <memcmp+0xe>
 8006e92:	2000      	movs	r0, #0
 8006e94:	e005      	b.n	8006ea2 <memcmp+0x1a>
 8006e96:	7803      	ldrb	r3, [r0, #0]
 8006e98:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006e9c:	42a3      	cmp	r3, r4
 8006e9e:	d001      	beq.n	8006ea4 <memcmp+0x1c>
 8006ea0:	1b18      	subs	r0, r3, r4
 8006ea2:	bd10      	pop	{r4, pc}
 8006ea4:	3001      	adds	r0, #1
 8006ea6:	e7f2      	b.n	8006e8e <memcmp+0x6>

08006ea8 <memcpy>:
 8006ea8:	440a      	add	r2, r1
 8006eaa:	4291      	cmp	r1, r2
 8006eac:	f100 33ff 	add.w	r3, r0, #4294967295
 8006eb0:	d100      	bne.n	8006eb4 <memcpy+0xc>
 8006eb2:	4770      	bx	lr
 8006eb4:	b510      	push	{r4, lr}
 8006eb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006eba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ebe:	4291      	cmp	r1, r2
 8006ec0:	d1f9      	bne.n	8006eb6 <memcpy+0xe>
 8006ec2:	bd10      	pop	{r4, pc}

08006ec4 <memset>:
 8006ec4:	4402      	add	r2, r0
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d100      	bne.n	8006ece <memset+0xa>
 8006ecc:	4770      	bx	lr
 8006ece:	f803 1b01 	strb.w	r1, [r3], #1
 8006ed2:	e7f9      	b.n	8006ec8 <memset+0x4>

08006ed4 <_init>:
 8006ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ed6:	bf00      	nop
 8006ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eda:	bc08      	pop	{r3}
 8006edc:	469e      	mov	lr, r3
 8006ede:	4770      	bx	lr

08006ee0 <_fini>:
 8006ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ee2:	bf00      	nop
 8006ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ee6:	bc08      	pop	{r3}
 8006ee8:	469e      	mov	lr, r3
 8006eea:	4770      	bx	lr
