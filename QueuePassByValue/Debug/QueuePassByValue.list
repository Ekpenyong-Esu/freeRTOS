
QueuePassByValue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006738  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  080068e8  080068e8  000168e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a18  08006a18  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08006a18  08006a18  00016a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a20  08006a20  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a20  08006a20  00016a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a24  08006a24  00016a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08006a28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002002c  2**0
                  CONTENTS
 10 .bss          0001448c  2000002c  2000002c  0002002c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200144b8  200144b8  0002002c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014884  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f16  00000000  00000000  000348e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001338  00000000  00000000  000377f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011b0  00000000  00000000  00038b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025d39  00000000  00000000  00039ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000155e6  00000000  00000000  0005fa19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6a73  00000000  00000000  00074fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015ba72  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ff4  00000000  00000000  0015bac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000002c 	.word	0x2000002c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080068d0 	.word	0x080068d0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000030 	.word	0x20000030
 80001ec:	080068d0 	.word	0x080068d0

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20012e40 	.word	0x20012e40

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b974 	b.w	8000584 <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9d08      	ldr	r5, [sp, #32]
 80002ba:	4604      	mov	r4, r0
 80002bc:	468e      	mov	lr, r1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d14d      	bne.n	800035e <__udivmoddi4+0xaa>
 80002c2:	428a      	cmp	r2, r1
 80002c4:	4694      	mov	ip, r2
 80002c6:	d969      	bls.n	800039c <__udivmoddi4+0xe8>
 80002c8:	fab2 f282 	clz	r2, r2
 80002cc:	b152      	cbz	r2, 80002e4 <__udivmoddi4+0x30>
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	f1c2 0120 	rsb	r1, r2, #32
 80002d6:	fa20 f101 	lsr.w	r1, r0, r1
 80002da:	fa0c fc02 	lsl.w	ip, ip, r2
 80002de:	ea41 0e03 	orr.w	lr, r1, r3
 80002e2:	4094      	lsls	r4, r2
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	0c21      	lsrs	r1, r4, #16
 80002ea:	fbbe f6f8 	udiv	r6, lr, r8
 80002ee:	fa1f f78c 	uxth.w	r7, ip
 80002f2:	fb08 e316 	mls	r3, r8, r6, lr
 80002f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002fa:	fb06 f107 	mul.w	r1, r6, r7
 80002fe:	4299      	cmp	r1, r3
 8000300:	d90a      	bls.n	8000318 <__udivmoddi4+0x64>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 30ff 	add.w	r0, r6, #4294967295
 800030a:	f080 811f 	bcs.w	800054c <__udivmoddi4+0x298>
 800030e:	4299      	cmp	r1, r3
 8000310:	f240 811c 	bls.w	800054c <__udivmoddi4+0x298>
 8000314:	3e02      	subs	r6, #2
 8000316:	4463      	add	r3, ip
 8000318:	1a5b      	subs	r3, r3, r1
 800031a:	b2a4      	uxth	r4, r4
 800031c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000320:	fb08 3310 	mls	r3, r8, r0, r3
 8000324:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000328:	fb00 f707 	mul.w	r7, r0, r7
 800032c:	42a7      	cmp	r7, r4
 800032e:	d90a      	bls.n	8000346 <__udivmoddi4+0x92>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	f080 810a 	bcs.w	8000550 <__udivmoddi4+0x29c>
 800033c:	42a7      	cmp	r7, r4
 800033e:	f240 8107 	bls.w	8000550 <__udivmoddi4+0x29c>
 8000342:	4464      	add	r4, ip
 8000344:	3802      	subs	r0, #2
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	1be4      	subs	r4, r4, r7
 800034c:	2600      	movs	r6, #0
 800034e:	b11d      	cbz	r5, 8000358 <__udivmoddi4+0xa4>
 8000350:	40d4      	lsrs	r4, r2
 8000352:	2300      	movs	r3, #0
 8000354:	e9c5 4300 	strd	r4, r3, [r5]
 8000358:	4631      	mov	r1, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0xc2>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80ef 	beq.w	8000546 <__udivmoddi4+0x292>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x160>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xd4>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80f9 	bhi.w	800057a <__udivmoddi4+0x2c6>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0303 	sbc.w	r3, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	469e      	mov	lr, r3
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e0      	beq.n	8000358 <__udivmoddi4+0xa4>
 8000396:	e9c5 4e00 	strd	r4, lr, [r5]
 800039a:	e7dd      	b.n	8000358 <__udivmoddi4+0xa4>
 800039c:	b902      	cbnz	r2, 80003a0 <__udivmoddi4+0xec>
 800039e:	deff      	udf	#255	; 0xff
 80003a0:	fab2 f282 	clz	r2, r2
 80003a4:	2a00      	cmp	r2, #0
 80003a6:	f040 8092 	bne.w	80004ce <__udivmoddi4+0x21a>
 80003aa:	eba1 010c 	sub.w	r1, r1, ip
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	2601      	movs	r6, #1
 80003b8:	0c20      	lsrs	r0, r4, #16
 80003ba:	fbb1 f3f7 	udiv	r3, r1, r7
 80003be:	fb07 1113 	mls	r1, r7, r3, r1
 80003c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c6:	fb0e f003 	mul.w	r0, lr, r3
 80003ca:	4288      	cmp	r0, r1
 80003cc:	d908      	bls.n	80003e0 <__udivmoddi4+0x12c>
 80003ce:	eb1c 0101 	adds.w	r1, ip, r1
 80003d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x12a>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f200 80cb 	bhi.w	8000574 <__udivmoddi4+0x2c0>
 80003de:	4643      	mov	r3, r8
 80003e0:	1a09      	subs	r1, r1, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e8:	fb07 1110 	mls	r1, r7, r0, r1
 80003ec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003f0:	fb0e fe00 	mul.w	lr, lr, r0
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x156>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x154>
 8000402:	45a6      	cmp	lr, r4
 8000404:	f200 80bb 	bhi.w	800057e <__udivmoddi4+0x2ca>
 8000408:	4608      	mov	r0, r1
 800040a:	eba4 040e 	sub.w	r4, r4, lr
 800040e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000412:	e79c      	b.n	800034e <__udivmoddi4+0x9a>
 8000414:	f1c6 0720 	rsb	r7, r6, #32
 8000418:	40b3      	lsls	r3, r6
 800041a:	fa22 fc07 	lsr.w	ip, r2, r7
 800041e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000422:	fa20 f407 	lsr.w	r4, r0, r7
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	431c      	orrs	r4, r3
 800042c:	40f9      	lsrs	r1, r7
 800042e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000432:	fa00 f306 	lsl.w	r3, r0, r6
 8000436:	fbb1 f8f9 	udiv	r8, r1, r9
 800043a:	0c20      	lsrs	r0, r4, #16
 800043c:	fa1f fe8c 	uxth.w	lr, ip
 8000440:	fb09 1118 	mls	r1, r9, r8, r1
 8000444:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000448:	fb08 f00e 	mul.w	r0, r8, lr
 800044c:	4288      	cmp	r0, r1
 800044e:	fa02 f206 	lsl.w	r2, r2, r6
 8000452:	d90b      	bls.n	800046c <__udivmoddi4+0x1b8>
 8000454:	eb1c 0101 	adds.w	r1, ip, r1
 8000458:	f108 3aff 	add.w	sl, r8, #4294967295
 800045c:	f080 8088 	bcs.w	8000570 <__udivmoddi4+0x2bc>
 8000460:	4288      	cmp	r0, r1
 8000462:	f240 8085 	bls.w	8000570 <__udivmoddi4+0x2bc>
 8000466:	f1a8 0802 	sub.w	r8, r8, #2
 800046a:	4461      	add	r1, ip
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f9 	udiv	r0, r1, r9
 8000474:	fb09 1110 	mls	r1, r9, r0, r1
 8000478:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800047c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000480:	458e      	cmp	lr, r1
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x1e2>
 8000484:	eb1c 0101 	adds.w	r1, ip, r1
 8000488:	f100 34ff 	add.w	r4, r0, #4294967295
 800048c:	d26c      	bcs.n	8000568 <__udivmoddi4+0x2b4>
 800048e:	458e      	cmp	lr, r1
 8000490:	d96a      	bls.n	8000568 <__udivmoddi4+0x2b4>
 8000492:	3802      	subs	r0, #2
 8000494:	4461      	add	r1, ip
 8000496:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800049a:	fba0 9402 	umull	r9, r4, r0, r2
 800049e:	eba1 010e 	sub.w	r1, r1, lr
 80004a2:	42a1      	cmp	r1, r4
 80004a4:	46c8      	mov	r8, r9
 80004a6:	46a6      	mov	lr, r4
 80004a8:	d356      	bcc.n	8000558 <__udivmoddi4+0x2a4>
 80004aa:	d053      	beq.n	8000554 <__udivmoddi4+0x2a0>
 80004ac:	b15d      	cbz	r5, 80004c6 <__udivmoddi4+0x212>
 80004ae:	ebb3 0208 	subs.w	r2, r3, r8
 80004b2:	eb61 010e 	sbc.w	r1, r1, lr
 80004b6:	fa01 f707 	lsl.w	r7, r1, r7
 80004ba:	fa22 f306 	lsr.w	r3, r2, r6
 80004be:	40f1      	lsrs	r1, r6
 80004c0:	431f      	orrs	r7, r3
 80004c2:	e9c5 7100 	strd	r7, r1, [r5]
 80004c6:	2600      	movs	r6, #0
 80004c8:	4631      	mov	r1, r6
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	40d8      	lsrs	r0, r3
 80004d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d8:	fa21 f303 	lsr.w	r3, r1, r3
 80004dc:	4091      	lsls	r1, r2
 80004de:	4301      	orrs	r1, r0
 80004e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e4:	fa1f fe8c 	uxth.w	lr, ip
 80004e8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004ec:	fb07 3610 	mls	r6, r7, r0, r3
 80004f0:	0c0b      	lsrs	r3, r1, #16
 80004f2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f6:	fb00 f60e 	mul.w	r6, r0, lr
 80004fa:	429e      	cmp	r6, r3
 80004fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x260>
 8000502:	eb1c 0303 	adds.w	r3, ip, r3
 8000506:	f100 38ff 	add.w	r8, r0, #4294967295
 800050a:	d22f      	bcs.n	800056c <__udivmoddi4+0x2b8>
 800050c:	429e      	cmp	r6, r3
 800050e:	d92d      	bls.n	800056c <__udivmoddi4+0x2b8>
 8000510:	3802      	subs	r0, #2
 8000512:	4463      	add	r3, ip
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	b289      	uxth	r1, r1
 8000518:	fbb3 f6f7 	udiv	r6, r3, r7
 800051c:	fb07 3316 	mls	r3, r7, r6, r3
 8000520:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000524:	fb06 f30e 	mul.w	r3, r6, lr
 8000528:	428b      	cmp	r3, r1
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x28a>
 800052c:	eb1c 0101 	adds.w	r1, ip, r1
 8000530:	f106 38ff 	add.w	r8, r6, #4294967295
 8000534:	d216      	bcs.n	8000564 <__udivmoddi4+0x2b0>
 8000536:	428b      	cmp	r3, r1
 8000538:	d914      	bls.n	8000564 <__udivmoddi4+0x2b0>
 800053a:	3e02      	subs	r6, #2
 800053c:	4461      	add	r1, ip
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000544:	e738      	b.n	80003b8 <__udivmoddi4+0x104>
 8000546:	462e      	mov	r6, r5
 8000548:	4628      	mov	r0, r5
 800054a:	e705      	b.n	8000358 <__udivmoddi4+0xa4>
 800054c:	4606      	mov	r6, r0
 800054e:	e6e3      	b.n	8000318 <__udivmoddi4+0x64>
 8000550:	4618      	mov	r0, r3
 8000552:	e6f8      	b.n	8000346 <__udivmoddi4+0x92>
 8000554:	454b      	cmp	r3, r9
 8000556:	d2a9      	bcs.n	80004ac <__udivmoddi4+0x1f8>
 8000558:	ebb9 0802 	subs.w	r8, r9, r2
 800055c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000560:	3801      	subs	r0, #1
 8000562:	e7a3      	b.n	80004ac <__udivmoddi4+0x1f8>
 8000564:	4646      	mov	r6, r8
 8000566:	e7ea      	b.n	800053e <__udivmoddi4+0x28a>
 8000568:	4620      	mov	r0, r4
 800056a:	e794      	b.n	8000496 <__udivmoddi4+0x1e2>
 800056c:	4640      	mov	r0, r8
 800056e:	e7d1      	b.n	8000514 <__udivmoddi4+0x260>
 8000570:	46d0      	mov	r8, sl
 8000572:	e77b      	b.n	800046c <__udivmoddi4+0x1b8>
 8000574:	3b02      	subs	r3, #2
 8000576:	4461      	add	r1, ip
 8000578:	e732      	b.n	80003e0 <__udivmoddi4+0x12c>
 800057a:	4630      	mov	r0, r6
 800057c:	e709      	b.n	8000392 <__udivmoddi4+0xde>
 800057e:	4464      	add	r4, ip
 8000580:	3802      	subs	r0, #2
 8000582:	e742      	b.n	800040a <__udivmoddi4+0x156>

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <GreenOn>:
#include "STM32_Disc1_Gpio.h"
#include "main.h"



void GreenOn ( void ) { HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);}
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
 800058c:	2201      	movs	r2, #1
 800058e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000592:	4802      	ldr	r0, [pc, #8]	; (800059c <GreenOn+0x14>)
 8000594:	f000 fff0 	bl	8001578 <HAL_GPIO_WritePin>
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40021800 	.word	0x40021800

080005a0 <GreenOff>:
void GreenOff ( void ) { HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);}
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	2200      	movs	r2, #0
 80005a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005aa:	4802      	ldr	r0, [pc, #8]	; (80005b4 <GreenOff+0x14>)
 80005ac:	f000 ffe4 	bl	8001578 <HAL_GPIO_WritePin>
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40021800 	.word	0x40021800

080005b8 <BlueOn>:
LED GreenLed = { GreenOn, GreenOff };   // initialize the GreenLed struct




void BlueOn ( void ) { HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_SET);}
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c2:	4802      	ldr	r0, [pc, #8]	; (80005cc <BlueOn+0x14>)
 80005c4:	f000 ffd8 	bl	8001578 <HAL_GPIO_WritePin>
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40021800 	.word	0x40021800

080005d0 <BlueOff>:
void BlueOff ( void ) { HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);}
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	2200      	movs	r2, #0
 80005d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005da:	4802      	ldr	r0, [pc, #8]	; (80005e4 <BlueOff+0x14>)
 80005dc:	f000 ffcc 	bl	8001578 <HAL_GPIO_WritePin>
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40021800 	.word	0x40021800

080005e8 <RedOn>:
LED BlueLed = { BlueOn, BlueOff }; // initialize the BlueLed struct




void RedOn ( void ) { HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);}
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	2201      	movs	r2, #1
 80005ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005f2:	4802      	ldr	r0, [pc, #8]	; (80005fc <RedOn+0x14>)
 80005f4:	f000 ffc0 	bl	8001578 <HAL_GPIO_WritePin>
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40021800 	.word	0x40021800

08000600 <RedOff>:
void RedOff ( void ) { HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);}
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
 8000604:	2200      	movs	r2, #0
 8000606:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800060a:	4802      	ldr	r0, [pc, #8]	; (8000614 <RedOff+0x14>)
 800060c:	f000 ffb4 	bl	8001578 <HAL_GPIO_WritePin>
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40021800 	.word	0x40021800

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061e:	f000 fcdb 	bl	8000fd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000622:	f000 f85b 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000626:	f000 f8c5 	bl	80007b4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_SYSVIEW_Conf();
 800062a:	f005 ffdb 	bl	80065e4 <SEGGER_SYSVIEW_Conf>
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);	//ensure proper priority grouping for freeRTOS
 800062e:	2003      	movs	r0, #3
 8000630:	f000 fdc1 	bl	80011b6 <HAL_NVIC_SetPriorityGrouping>


  //setup tasks, making sure they have been properly created before moving on
  configASSERT(xTaskCreate(recvTask, "recvTask", STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL) == pdPASS);
 8000634:	2300      	movs	r3, #0
 8000636:	9301      	str	r3, [sp, #4]
 8000638:	2301      	movs	r3, #1
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	2300      	movs	r3, #0
 800063e:	2280      	movs	r2, #128	; 0x80
 8000640:	4921      	ldr	r1, [pc, #132]	; (80006c8 <main+0xb0>)
 8000642:	4822      	ldr	r0, [pc, #136]	; (80006cc <main+0xb4>)
 8000644:	f002 fd24 	bl	8003090 <xTaskCreate>
 8000648:	4603      	mov	r3, r0
 800064a:	2b01      	cmp	r3, #1
 800064c:	d00a      	beq.n	8000664 <main+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800064e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000652:	f383 8811 	msr	BASEPRI, r3
 8000656:	f3bf 8f6f 	isb	sy
 800065a:	f3bf 8f4f 	dsb	sy
 800065e:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000660:	bf00      	nop
 8000662:	e7fe      	b.n	8000662 <main+0x4a>
  configASSERT(xTaskCreate(sendingTask, "sendingTask", STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL) == pdPASS);
 8000664:	2300      	movs	r3, #0
 8000666:	9301      	str	r3, [sp, #4]
 8000668:	2302      	movs	r3, #2
 800066a:	9300      	str	r3, [sp, #0]
 800066c:	2300      	movs	r3, #0
 800066e:	2280      	movs	r2, #128	; 0x80
 8000670:	4917      	ldr	r1, [pc, #92]	; (80006d0 <main+0xb8>)
 8000672:	4818      	ldr	r0, [pc, #96]	; (80006d4 <main+0xbc>)
 8000674:	f002 fd0c 	bl	8003090 <xTaskCreate>
 8000678:	4603      	mov	r3, r0
 800067a:	2b01      	cmp	r3, #1
 800067c:	d00a      	beq.n	8000694 <main+0x7c>
        __asm volatile
 800067e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000682:	f383 8811 	msr	BASEPRI, r3
 8000686:	f3bf 8f6f 	isb	sy
 800068a:	f3bf 8f4f 	dsb	sy
 800068e:	60bb      	str	r3, [r7, #8]
    }
 8000690:	bf00      	nop
 8000692:	e7fe      	b.n	8000692 <main+0x7a>


  //create a queue that can store 2 uint8_t's
  //using ledCmdQueue to point to it
  ledCmdQueue = xQueueCreate(8, sizeof(LedStates_t));
 8000694:	2200      	movs	r2, #0
 8000696:	2108      	movs	r1, #8
 8000698:	2008      	movs	r0, #8
 800069a:	f002 f807 	bl	80026ac <xQueueGenericCreate>
 800069e:	4603      	mov	r3, r0
 80006a0:	4a0d      	ldr	r2, [pc, #52]	; (80006d8 <main+0xc0>)
 80006a2:	6013      	str	r3, [r2, #0]
  configASSERT(ledCmdQueue != NULL);
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <main+0xc0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d10a      	bne.n	80006c2 <main+0xaa>
        __asm volatile
 80006ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006b0:	f383 8811 	msr	BASEPRI, r3
 80006b4:	f3bf 8f6f 	isb	sy
 80006b8:	f3bf 8f4f 	dsb	sy
 80006bc:	607b      	str	r3, [r7, #4]
    }
 80006be:	bf00      	nop
 80006c0:	e7fe      	b.n	80006c0 <main+0xa8>


  //start the scheduler - shouldn't return unless there's a problem
  vTaskStartScheduler();
 80006c2:	f002 fe81 	bl	80033c8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c6:	e7fe      	b.n	80006c6 <main+0xae>
 80006c8:	080068e8 	.word	0x080068e8
 80006cc:	08000c8d 	.word	0x08000c8d
 80006d0:	080068f4 	.word	0x080068f4
 80006d4:	08000d15 	.word	0x08000d15
 80006d8:	20000048 	.word	0x20000048

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b094      	sub	sp, #80	; 0x50
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0320 	add.w	r3, r7, #32
 80006e6:	2230      	movs	r2, #48	; 0x30
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f006 f8e8 	bl	80068c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000700:	2300      	movs	r3, #0
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	4b29      	ldr	r3, [pc, #164]	; (80007ac <SystemClock_Config+0xd0>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	4a28      	ldr	r2, [pc, #160]	; (80007ac <SystemClock_Config+0xd0>)
 800070a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070e:	6413      	str	r3, [r2, #64]	; 0x40
 8000710:	4b26      	ldr	r3, [pc, #152]	; (80007ac <SystemClock_Config+0xd0>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	4b23      	ldr	r3, [pc, #140]	; (80007b0 <SystemClock_Config+0xd4>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000728:	4a21      	ldr	r2, [pc, #132]	; (80007b0 <SystemClock_Config+0xd4>)
 800072a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072e:	6013      	str	r3, [r2, #0]
 8000730:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <SystemClock_Config+0xd4>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800073c:	2302      	movs	r3, #2
 800073e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000740:	2301      	movs	r3, #1
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000744:	2310      	movs	r3, #16
 8000746:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000748:	2302      	movs	r3, #2
 800074a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800074c:	2300      	movs	r3, #0
 800074e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000750:	2308      	movs	r3, #8
 8000752:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000754:	2332      	movs	r3, #50	; 0x32
 8000756:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000758:	2304      	movs	r3, #4
 800075a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800075c:	2307      	movs	r3, #7
 800075e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	f107 0320 	add.w	r3, r7, #32
 8000764:	4618      	mov	r0, r3
 8000766:	f000 ff21 	bl	80015ac <HAL_RCC_OscConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000770:	f000 fb2c 	bl	8000dcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000774:	230f      	movs	r3, #15
 8000776:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000778:	2302      	movs	r3, #2
 800077a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000780:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000784:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000786:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800078a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f001 f982 	bl	8001a9c <HAL_RCC_ClockConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800079e:	f000 fb15 	bl	8000dcc <Error_Handler>
  }
}
 80007a2:	bf00      	nop
 80007a4:	3750      	adds	r7, #80	; 0x50
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40007000 	.word	0x40007000

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08e      	sub	sp, #56	; 0x38
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	623b      	str	r3, [r7, #32]
 80007ce:	4bb2      	ldr	r3, [pc, #712]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4ab1      	ldr	r2, [pc, #708]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4baf      	ldr	r3, [pc, #700]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	623b      	str	r3, [r7, #32]
 80007e4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
 80007ea:	4bab      	ldr	r3, [pc, #684]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4aaa      	ldr	r2, [pc, #680]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 80007f0:	f043 0320 	orr.w	r3, r3, #32
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4ba8      	ldr	r3, [pc, #672]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0320 	and.w	r3, r3, #32
 80007fe:	61fb      	str	r3, [r7, #28]
 8000800:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	61bb      	str	r3, [r7, #24]
 8000806:	4ba4      	ldr	r3, [pc, #656]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4aa3      	ldr	r2, [pc, #652]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 800080c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4ba1      	ldr	r3, [pc, #644]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081a:	61bb      	str	r3, [r7, #24]
 800081c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
 8000822:	4b9d      	ldr	r3, [pc, #628]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a9c      	ldr	r2, [pc, #624]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b9a      	ldr	r3, [pc, #616]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	617b      	str	r3, [r7, #20]
 8000838:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	4b96      	ldr	r3, [pc, #600]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a95      	ldr	r2, [pc, #596]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b93      	ldr	r3, [pc, #588]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	4b8f      	ldr	r3, [pc, #572]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a8e      	ldr	r2, [pc, #568]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 8000860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b8c      	ldr	r3, [pc, #560]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	4b88      	ldr	r3, [pc, #544]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a87      	ldr	r2, [pc, #540]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 800087c:	f043 0310 	orr.w	r3, r3, #16
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b85      	ldr	r3, [pc, #532]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0310 	and.w	r3, r3, #16
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b81      	ldr	r3, [pc, #516]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a80      	ldr	r2, [pc, #512]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 8000898:	f043 0308 	orr.w	r3, r3, #8
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b7e      	ldr	r3, [pc, #504]	; (8000a98 <MX_GPIO_Init+0x2e4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0308 	and.w	r3, r3, #8
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2116      	movs	r1, #22
 80008ae:	487b      	ldr	r0, [pc, #492]	; (8000a9c <MX_GPIO_Init+0x2e8>)
 80008b0:	f000 fe62 	bl	8001578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2180      	movs	r1, #128	; 0x80
 80008b8:	4879      	ldr	r0, [pc, #484]	; (8000aa0 <MX_GPIO_Init+0x2ec>)
 80008ba:	f000 fe5d 	bl	8001578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80008c4:	4877      	ldr	r0, [pc, #476]	; (8000aa4 <MX_GPIO_Init+0x2f0>)
 80008c6:	f000 fe57 	bl	8001578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD2_Pin|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80008d0:	4875      	ldr	r0, [pc, #468]	; (8000aa8 <MX_GPIO_Init+0x2f4>)
 80008d2:	f000 fe51 	bl	8001578 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80008d6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e4:	2303      	movs	r3, #3
 80008e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008e8:	230c      	movs	r3, #12
 80008ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f0:	4619      	mov	r1, r3
 80008f2:	486e      	ldr	r0, [pc, #440]	; (8000aac <MX_GPIO_Init+0x2f8>)
 80008f4:	f000 fc94 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80008f8:	f44f 7360 	mov.w	r3, #896	; 0x380
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800090a:	2305      	movs	r3, #5
 800090c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800090e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000912:	4619      	mov	r1, r3
 8000914:	4865      	ldr	r0, [pc, #404]	; (8000aac <MX_GPIO_Init+0x2f8>)
 8000916:	f000 fc83 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 800091a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	2302      	movs	r3, #2
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800092c:	230e      	movs	r3, #14
 800092e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000934:	4619      	mov	r1, r3
 8000936:	485d      	ldr	r0, [pc, #372]	; (8000aac <MX_GPIO_Init+0x2f8>)
 8000938:	f000 fc72 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800093c:	2301      	movs	r3, #1
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000948:	2303      	movs	r3, #3
 800094a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800094c:	230c      	movs	r3, #12
 800094e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000954:	4619      	mov	r1, r3
 8000956:	4851      	ldr	r0, [pc, #324]	; (8000a9c <MX_GPIO_Init+0x2e8>)
 8000958:	f000 fc62 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800095c:	2316      	movs	r3, #22
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000960:	2301      	movs	r3, #1
 8000962:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800096c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000970:	4619      	mov	r1, r3
 8000972:	484a      	ldr	r0, [pc, #296]	; (8000a9c <MX_GPIO_Init+0x2e8>)
 8000974:	f000 fc54 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000978:	f248 0307 	movw	r3, #32775	; 0x8007
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800097e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000988:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098c:	4619      	mov	r1, r3
 800098e:	4844      	ldr	r0, [pc, #272]	; (8000aa0 <MX_GPIO_Init+0x2ec>)
 8000990:	f000 fc46 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000994:	f641 0358 	movw	r3, #6232	; 0x1858
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009a6:	230e      	movs	r3, #14
 80009a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ae:	4619      	mov	r1, r3
 80009b0:	483b      	ldr	r0, [pc, #236]	; (8000aa0 <MX_GPIO_Init+0x2ec>)
 80009b2:	f000 fc35 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80009b6:	2380      	movs	r3, #128	; 0x80
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ca:	4619      	mov	r1, r3
 80009cc:	4834      	ldr	r0, [pc, #208]	; (8000aa0 <MX_GPIO_Init+0x2ec>)
 80009ce:	f000 fc27 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80009d2:	2320      	movs	r3, #32
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009d6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e4:	4619      	mov	r1, r3
 80009e6:	482d      	ldr	r0, [pc, #180]	; (8000a9c <MX_GPIO_Init+0x2e8>)
 80009e8:	f000 fc1a 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80009ec:	2303      	movs	r3, #3
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80009fc:	2309      	movs	r3, #9
 80009fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a04:	4619      	mov	r1, r3
 8000a06:	482a      	ldr	r0, [pc, #168]	; (8000ab0 <MX_GPIO_Init+0x2fc>)
 8000a08:	f000 fc0a 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4824      	ldr	r0, [pc, #144]	; (8000ab0 <MX_GPIO_Init+0x2fc>)
 8000a20:	f000 fbfe 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000a24:	f248 1333 	movw	r3, #33075	; 0x8133
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a32:	2303      	movs	r3, #3
 8000a34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a36:	230c      	movs	r3, #12
 8000a38:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4819      	ldr	r0, [pc, #100]	; (8000aa8 <MX_GPIO_Init+0x2f4>)
 8000a42:	f000 fbed 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000a46:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a54:	2303      	movs	r3, #3
 8000a56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a58:	230c      	movs	r3, #12
 8000a5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a60:	4619      	mov	r1, r3
 8000a62:	4814      	ldr	r0, [pc, #80]	; (8000ab4 <MX_GPIO_Init+0x300>)
 8000a64:	f000 fbdc 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000a68:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a7a:	230e      	movs	r3, #14
 8000a7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a82:	4619      	mov	r1, r3
 8000a84:	480a      	ldr	r0, [pc, #40]	; (8000ab0 <MX_GPIO_Init+0x2fc>)
 8000a86:	f000 fbcb 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000a8a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a94:	e010      	b.n	8000ab8 <MX_GPIO_Init+0x304>
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020800 	.word	0x40020800
 8000aa0:	40020000 	.word	0x40020000
 8000aa4:	40020c00 	.word	0x40020c00
 8000aa8:	40021800 	.word	0x40021800
 8000aac:	40021400 	.word	0x40021400
 8000ab0:	40020400 	.word	0x40020400
 8000ab4:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000ac0:	230c      	movs	r3, #12
 8000ac2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac8:	4619      	mov	r1, r3
 8000aca:	486b      	ldr	r0, [pc, #428]	; (8000c78 <MX_GPIO_Init+0x4c4>)
 8000acc:	f000 fba8 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000ad0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4864      	ldr	r0, [pc, #400]	; (8000c78 <MX_GPIO_Init+0x4c4>)
 8000ae6:	f000 fb9b 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000aea:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af8:	2303      	movs	r3, #3
 8000afa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000afc:	230c      	movs	r3, #12
 8000afe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b04:	4619      	mov	r1, r3
 8000b06:	485d      	ldr	r0, [pc, #372]	; (8000c7c <MX_GPIO_Init+0x4c8>)
 8000b08:	f000 fb8a 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000b0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4856      	ldr	r0, [pc, #344]	; (8000c7c <MX_GPIO_Init+0x4c8>)
 8000b22:	f000 fb7d 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000b26:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	484f      	ldr	r0, [pc, #316]	; (8000c7c <MX_GPIO_Init+0x4c8>)
 8000b40:	f000 fb6e 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000b44:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b56:	230e      	movs	r3, #14
 8000b58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4847      	ldr	r0, [pc, #284]	; (8000c80 <MX_GPIO_Init+0x4cc>)
 8000b62:	f000 fb5d 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000b66:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b78:	230e      	movs	r3, #14
 8000b7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b80:	4619      	mov	r1, r3
 8000b82:	4840      	ldr	r0, [pc, #256]	; (8000c84 <MX_GPIO_Init+0x4d0>)
 8000b84:	f000 fb4c 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000b88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b8e:	2312      	movs	r3, #18
 8000b90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b9a:	2304      	movs	r3, #4
 8000b9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4837      	ldr	r0, [pc, #220]	; (8000c84 <MX_GPIO_Init+0x4d0>)
 8000ba6:	f000 fb3b 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000baa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bb0:	2312      	movs	r3, #18
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bbc:	2304      	movs	r3, #4
 8000bbe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4830      	ldr	r0, [pc, #192]	; (8000c88 <MX_GPIO_Init+0x4d4>)
 8000bc8:	f000 fb2a 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000bcc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bde:	2307      	movs	r3, #7
 8000be0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be6:	4619      	mov	r1, r3
 8000be8:	4827      	ldr	r0, [pc, #156]	; (8000c88 <MX_GPIO_Init+0x4d4>)
 8000bea:	f000 fb19 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000bee:	2348      	movs	r3, #72	; 0x48
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bfe:	230e      	movs	r3, #14
 8000c00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c06:	4619      	mov	r1, r3
 8000c08:	481c      	ldr	r0, [pc, #112]	; (8000c7c <MX_GPIO_Init+0x4c8>)
 8000c0a:	f000 fb09 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pin : G3_Pin */
  GPIO_InitStruct.Pin = G3_Pin;
 8000c0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c20:	2309      	movs	r3, #9
 8000c22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(G3_GPIO_Port, &GPIO_InitStruct);
 8000c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4815      	ldr	r0, [pc, #84]	; (8000c80 <MX_GPIO_Init+0x4cc>)
 8000c2c:	f000 faf8 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD4_Pin;
 8000c30:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c36:	2301      	movs	r3, #1
 8000c38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c46:	4619      	mov	r1, r3
 8000c48:	480d      	ldr	r0, [pc, #52]	; (8000c80 <MX_GPIO_Init+0x4cc>)
 8000c4a:	f000 fae9 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000c4e:	2360      	movs	r3, #96	; 0x60
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	2302      	movs	r3, #2
 8000c54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c5e:	230c      	movs	r3, #12
 8000c60:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c66:	4619      	mov	r1, r3
 8000c68:	4803      	ldr	r0, [pc, #12]	; (8000c78 <MX_GPIO_Init+0x4c4>)
 8000c6a:	f000 fad9 	bl	8001220 <HAL_GPIO_Init>

}
 8000c6e:	bf00      	nop
 8000c70:	3738      	adds	r7, #56	; 0x38
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40020400 	.word	0x40020400
 8000c7c:	40020c00 	.word	0x40020c00
 8000c80:	40021800 	.word	0x40021800
 8000c84:	40020800 	.word	0x40020800
 8000c88:	40020000 	.word	0x40020000

08000c8c <recvTask>:

/**
 * This receive task watches a queue for a new ledCmd to be added to it
 */
void recvTask( void* NotUsed )
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	LedStates_t nextCmd;

	while(1)
	{
		if(xQueueReceive(ledCmdQueue, &nextCmd, portMAX_DELAY) == pdTRUE)
 8000c94:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <recvTask+0x78>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f107 0108 	add.w	r1, r7, #8
 8000c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f001 ff6f 	bl	8002b84 <xQueueReceive>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d126      	bne.n	8000cfa <recvTask+0x6e>
		{
			if(nextCmd.redLEDState == 1)
 8000cac:	7a3b      	ldrb	r3, [r7, #8]
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d003      	beq.n	8000cc0 <recvTask+0x34>
				RedLed.On();
 8000cb8:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <recvTask+0x7c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4798      	blx	r3
 8000cbe:	e002      	b.n	8000cc6 <recvTask+0x3a>
			else
				RedLed.Off();
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <recvTask+0x7c>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	4798      	blx	r3

			if(nextCmd.blueLEDState == 1)
 8000cc6:	7a3b      	ldrb	r3, [r7, #8]
 8000cc8:	f003 0302 	and.w	r3, r3, #2
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d003      	beq.n	8000cda <recvTask+0x4e>
				BlueLed.On();
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <recvTask+0x80>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4798      	blx	r3
 8000cd8:	e002      	b.n	8000ce0 <recvTask+0x54>
			else
				BlueLed.Off();
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <recvTask+0x80>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	4798      	blx	r3

			if(nextCmd.greenLEDState == 1)
 8000ce0:	7a3b      	ldrb	r3, [r7, #8]
 8000ce2:	f003 0304 	and.w	r3, r3, #4
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d003      	beq.n	8000cf4 <recvTask+0x68>
				GreenLed.On();
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <recvTask+0x84>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4798      	blx	r3
 8000cf2:	e002      	b.n	8000cfa <recvTask+0x6e>
			else
				GreenLed.Off();
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <recvTask+0x84>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	4798      	blx	r3
		}

		vTaskDelay(nextCmd.msDelayTime/portTICK_PERIOD_MS);
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f002 fb2b 	bl	8003358 <vTaskDelay>
		if(xQueueReceive(ledCmdQueue, &nextCmd, portMAX_DELAY) == pdTRUE)
 8000d02:	e7c7      	b.n	8000c94 <recvTask+0x8>
 8000d04:	20000048 	.word	0x20000048
 8000d08:	20000010 	.word	0x20000010
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	20000000 	.word	0x20000000

08000d14 <sendingTask>:
 * Each time the variable is passed to the queue, its
 * value is copied into the queue, which is allowed to
 * fill to capacity.
 */
void sendingTask( void* NotUsed )
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	//a single instance of  of nextStates is defined here
	LedStates_t nextStates;

	while(1)
	{
		nextStates.redLEDState = 1;
 8000d1c:	7a3b      	ldrb	r3, [r7, #8]
 8000d1e:	f043 0301 	orr.w	r3, r3, #1
 8000d22:	723b      	strb	r3, [r7, #8]
		nextStates.greenLEDState = 1;
 8000d24:	7a3b      	ldrb	r3, [r7, #8]
 8000d26:	f043 0304 	orr.w	r3, r3, #4
 8000d2a:	723b      	strb	r3, [r7, #8]
		nextStates.blueLEDState = 1;
 8000d2c:	7a3b      	ldrb	r3, [r7, #8]
 8000d2e:	f043 0302 	orr.w	r3, r3, #2
 8000d32:	723b      	strb	r3, [r7, #8]
		nextStates.msDelayTime = 100;
 8000d34:	2364      	movs	r3, #100	; 0x64
 8000d36:	60fb      	str	r3, [r7, #12]

		xQueueSend(ledCmdQueue, &nextStates, portMAX_DELAY);
 8000d38:	4b1a      	ldr	r3, [pc, #104]	; (8000da4 <sendingTask+0x90>)
 8000d3a:	6818      	ldr	r0, [r3, #0]
 8000d3c:	f107 0108 	add.w	r1, r7, #8
 8000d40:	2300      	movs	r3, #0
 8000d42:	f04f 32ff 	mov.w	r2, #4294967295
 8000d46:	f001 fd39 	bl	80027bc <xQueueGenericSend>

		nextStates.blueLEDState = 0;	//turn off just the blue LED
 8000d4a:	7a3b      	ldrb	r3, [r7, #8]
 8000d4c:	f36f 0341 	bfc	r3, #1, #1
 8000d50:	723b      	strb	r3, [r7, #8]
		nextStates.msDelayTime = 1500;
 8000d52:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000d56:	60fb      	str	r3, [r7, #12]
		xQueueSend(ledCmdQueue, &nextStates, portMAX_DELAY);
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <sendingTask+0x90>)
 8000d5a:	6818      	ldr	r0, [r3, #0]
 8000d5c:	f107 0108 	add.w	r1, r7, #8
 8000d60:	2300      	movs	r3, #0
 8000d62:	f04f 32ff 	mov.w	r2, #4294967295
 8000d66:	f001 fd29 	bl	80027bc <xQueueGenericSend>

		nextStates.greenLEDState = 0;	//turn off just the green LED
 8000d6a:	7a3b      	ldrb	r3, [r7, #8]
 8000d6c:	f36f 0382 	bfc	r3, #2, #1
 8000d70:	723b      	strb	r3, [r7, #8]
		nextStates.msDelayTime = 200;
 8000d72:	23c8      	movs	r3, #200	; 0xc8
 8000d74:	60fb      	str	r3, [r7, #12]
		xQueueSend(ledCmdQueue, &nextStates, portMAX_DELAY);
 8000d76:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <sendingTask+0x90>)
 8000d78:	6818      	ldr	r0, [r3, #0]
 8000d7a:	f107 0108 	add.w	r1, r7, #8
 8000d7e:	2300      	movs	r3, #0
 8000d80:	f04f 32ff 	mov.w	r2, #4294967295
 8000d84:	f001 fd1a 	bl	80027bc <xQueueGenericSend>

		nextStates.redLEDState = 0;
 8000d88:	7a3b      	ldrb	r3, [r7, #8]
 8000d8a:	f36f 0300 	bfc	r3, #0, #1
 8000d8e:	723b      	strb	r3, [r7, #8]
		xQueueSend(ledCmdQueue, &nextStates, portMAX_DELAY);
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <sendingTask+0x90>)
 8000d92:	6818      	ldr	r0, [r3, #0]
 8000d94:	f107 0108 	add.w	r1, r7, #8
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8000d9e:	f001 fd0d 	bl	80027bc <xQueueGenericSend>
		nextStates.redLEDState = 1;
 8000da2:	e7bb      	b.n	8000d1c <sendingTask+0x8>
 8000da4:	20000048 	.word	0x20000048

08000da8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a04      	ldr	r2, [pc, #16]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d101      	bne.n	8000dbe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dba:	f000 f92f 	bl	800101c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40001000 	.word	0x40001000

08000dcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd0:	b672      	cpsid	i
}
 8000dd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <Error_Handler+0x8>
	...

08000dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <HAL_MspInit+0x4c>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	4a0f      	ldr	r2, [pc, #60]	; (8000e24 <HAL_MspInit+0x4c>)
 8000de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dec:	6453      	str	r3, [r2, #68]	; 0x44
 8000dee:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <HAL_MspInit+0x4c>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	603b      	str	r3, [r7, #0]
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <HAL_MspInit+0x4c>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e02:	4a08      	ldr	r2, [pc, #32]	; (8000e24 <HAL_MspInit+0x4c>)
 8000e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e08:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_MspInit+0x4c>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e16:	2007      	movs	r0, #7
 8000e18:	f000 f9cd 	bl	80011b6 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40023800 	.word	0x40023800

08000e28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08e      	sub	sp, #56	; 0x38
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	4b33      	ldr	r3, [pc, #204]	; (8000f0c <HAL_InitTick+0xe4>)
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e40:	4a32      	ldr	r2, [pc, #200]	; (8000f0c <HAL_InitTick+0xe4>)
 8000e42:	f043 0310 	orr.w	r3, r3, #16
 8000e46:	6413      	str	r3, [r2, #64]	; 0x40
 8000e48:	4b30      	ldr	r3, [pc, #192]	; (8000f0c <HAL_InitTick+0xe4>)
 8000e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4c:	f003 0310 	and.w	r3, r3, #16
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e54:	f107 0210 	add.w	r2, r7, #16
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	4611      	mov	r1, r2
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f001 f828 	bl	8001eb4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e64:	6a3b      	ldr	r3, [r7, #32]
 8000e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d103      	bne.n	8000e76 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e6e:	f001 f80d 	bl	8001e8c <HAL_RCC_GetPCLK1Freq>
 8000e72:	6378      	str	r0, [r7, #52]	; 0x34
 8000e74:	e004      	b.n	8000e80 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e76:	f001 f809 	bl	8001e8c <HAL_RCC_GetPCLK1Freq>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e82:	4a23      	ldr	r2, [pc, #140]	; (8000f10 <HAL_InitTick+0xe8>)
 8000e84:	fba2 2303 	umull	r2, r3, r2, r3
 8000e88:	0c9b      	lsrs	r3, r3, #18
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e8e:	4b21      	ldr	r3, [pc, #132]	; (8000f14 <HAL_InitTick+0xec>)
 8000e90:	4a21      	ldr	r2, [pc, #132]	; (8000f18 <HAL_InitTick+0xf0>)
 8000e92:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e94:	4b1f      	ldr	r3, [pc, #124]	; (8000f14 <HAL_InitTick+0xec>)
 8000e96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e9a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e9c:	4a1d      	ldr	r2, [pc, #116]	; (8000f14 <HAL_InitTick+0xec>)
 8000e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ea0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <HAL_InitTick+0xec>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <HAL_InitTick+0xec>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eae:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <HAL_InitTick+0xec>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000eb4:	4817      	ldr	r0, [pc, #92]	; (8000f14 <HAL_InitTick+0xec>)
 8000eb6:	f001 f82f 	bl	8001f18 <HAL_TIM_Base_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ec0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d11b      	bne.n	8000f00 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ec8:	4812      	ldr	r0, [pc, #72]	; (8000f14 <HAL_InitTick+0xec>)
 8000eca:	f001 f87f 	bl	8001fcc <HAL_TIM_Base_Start_IT>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ed4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d111      	bne.n	8000f00 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000edc:	2036      	movs	r0, #54	; 0x36
 8000ede:	f000 f991 	bl	8001204 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b0f      	cmp	r3, #15
 8000ee6:	d808      	bhi.n	8000efa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	2036      	movs	r0, #54	; 0x36
 8000eee:	f000 f96d 	bl	80011cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ef2:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <HAL_InitTick+0xf4>)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6013      	str	r3, [r2, #0]
 8000ef8:	e002      	b.n	8000f00 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f00:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3738      	adds	r7, #56	; 0x38
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40023800 	.word	0x40023800
 8000f10:	431bde83 	.word	0x431bde83
 8000f14:	2000004c 	.word	0x2000004c
 8000f18:	40001000 	.word	0x40001000
 8000f1c:	2000001c 	.word	0x2000001c

08000f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <NMI_Handler+0x4>

08000f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <HardFault_Handler+0x4>

08000f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <MemManage_Handler+0x4>

08000f32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <BusFault_Handler+0x4>

08000f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <UsageFault_Handler+0x4>

08000f3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f50:	4802      	ldr	r0, [pc, #8]	; (8000f5c <TIM6_DAC_IRQHandler+0x10>)
 8000f52:	f001 f8ab 	bl	80020ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	2000004c 	.word	0x2000004c

08000f60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <SystemInit+0x20>)
 8000f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f6a:	4a05      	ldr	r2, [pc, #20]	; (8000f80 <SystemInit+0x20>)
 8000f6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fbc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f88:	480d      	ldr	r0, [pc, #52]	; (8000fc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f8a:	490e      	ldr	r1, [pc, #56]	; (8000fc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f8c:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f90:	e002      	b.n	8000f98 <LoopCopyDataInit>

08000f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f96:	3304      	adds	r3, #4

08000f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f9c:	d3f9      	bcc.n	8000f92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9e:	4a0b      	ldr	r2, [pc, #44]	; (8000fcc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fa0:	4c0b      	ldr	r4, [pc, #44]	; (8000fd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa4:	e001      	b.n	8000faa <LoopFillZerobss>

08000fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa8:	3204      	adds	r2, #4

08000faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fac:	d3fb      	bcc.n	8000fa6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fae:	f7ff ffd7 	bl	8000f60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fb2:	f005 fc43 	bl	800683c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fb6:	f7ff fb2f 	bl	8000618 <main>
  bx  lr    
 8000fba:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000fbc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000fc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc4:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000fc8:	08006a28 	.word	0x08006a28
  ldr r2, =_sbss
 8000fcc:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000fd0:	200144b8 	.word	0x200144b8

08000fd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fd4:	e7fe      	b.n	8000fd4 <ADC_IRQHandler>
	...

08000fd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fdc:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <HAL_Init+0x40>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a0d      	ldr	r2, [pc, #52]	; (8001018 <HAL_Init+0x40>)
 8000fe2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fe6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <HAL_Init+0x40>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <HAL_Init+0x40>)
 8000fee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ff2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <HAL_Init+0x40>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a07      	ldr	r2, [pc, #28]	; (8001018 <HAL_Init+0x40>)
 8000ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ffe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001000:	2003      	movs	r0, #3
 8001002:	f000 f8d8 	bl	80011b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001006:	2000      	movs	r0, #0
 8001008:	f7ff ff0e 	bl	8000e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800100c:	f7ff fee4 	bl	8000dd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40023c00 	.word	0x40023c00

0800101c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_IncTick+0x20>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_IncTick+0x24>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4413      	add	r3, r2
 800102c:	4a04      	ldr	r2, [pc, #16]	; (8001040 <HAL_IncTick+0x24>)
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000020 	.word	0x20000020
 8001040:	20000094 	.word	0x20000094

08001044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return uwTick;
 8001048:	4b03      	ldr	r3, [pc, #12]	; (8001058 <HAL_GetTick+0x14>)
 800104a:	681b      	ldr	r3, [r3, #0]
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000094 	.word	0x20000094

0800105c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <__NVIC_SetPriorityGrouping+0x44>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001078:	4013      	ands	r3, r2
 800107a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001084:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800108c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800108e:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	60d3      	str	r3, [r2, #12]
}
 8001094:	bf00      	nop
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <__NVIC_GetPriorityGrouping+0x18>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	0a1b      	lsrs	r3, r3, #8
 80010ae:	f003 0307 	and.w	r3, r3, #7
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	db0b      	blt.n	80010ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	f003 021f 	and.w	r2, r3, #31
 80010d8:	4907      	ldr	r1, [pc, #28]	; (80010f8 <__NVIC_EnableIRQ+0x38>)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	095b      	lsrs	r3, r3, #5
 80010e0:	2001      	movs	r0, #1
 80010e2:	fa00 f202 	lsl.w	r2, r0, r2
 80010e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000e100 	.word	0xe000e100

080010fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	6039      	str	r1, [r7, #0]
 8001106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110c:	2b00      	cmp	r3, #0
 800110e:	db0a      	blt.n	8001126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	b2da      	uxtb	r2, r3
 8001114:	490c      	ldr	r1, [pc, #48]	; (8001148 <__NVIC_SetPriority+0x4c>)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	0112      	lsls	r2, r2, #4
 800111c:	b2d2      	uxtb	r2, r2
 800111e:	440b      	add	r3, r1
 8001120:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001124:	e00a      	b.n	800113c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4908      	ldr	r1, [pc, #32]	; (800114c <__NVIC_SetPriority+0x50>)
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	f003 030f 	and.w	r3, r3, #15
 8001132:	3b04      	subs	r3, #4
 8001134:	0112      	lsls	r2, r2, #4
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	440b      	add	r3, r1
 800113a:	761a      	strb	r2, [r3, #24]
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	e000e100 	.word	0xe000e100
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001150:	b480      	push	{r7}
 8001152:	b089      	sub	sp, #36	; 0x24
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f1c3 0307 	rsb	r3, r3, #7
 800116a:	2b04      	cmp	r3, #4
 800116c:	bf28      	it	cs
 800116e:	2304      	movcs	r3, #4
 8001170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3304      	adds	r3, #4
 8001176:	2b06      	cmp	r3, #6
 8001178:	d902      	bls.n	8001180 <NVIC_EncodePriority+0x30>
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3b03      	subs	r3, #3
 800117e:	e000      	b.n	8001182 <NVIC_EncodePriority+0x32>
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001184:	f04f 32ff 	mov.w	r2, #4294967295
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43da      	mvns	r2, r3
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	401a      	ands	r2, r3
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001198:	f04f 31ff 	mov.w	r1, #4294967295
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	fa01 f303 	lsl.w	r3, r1, r3
 80011a2:	43d9      	mvns	r1, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	4313      	orrs	r3, r2
         );
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3724      	adds	r7, #36	; 0x24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff ff4c 	bl	800105c <__NVIC_SetPriorityGrouping>
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
 80011d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011de:	f7ff ff61 	bl	80010a4 <__NVIC_GetPriorityGrouping>
 80011e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	68b9      	ldr	r1, [r7, #8]
 80011e8:	6978      	ldr	r0, [r7, #20]
 80011ea:	f7ff ffb1 	bl	8001150 <NVIC_EncodePriority>
 80011ee:	4602      	mov	r2, r0
 80011f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f4:	4611      	mov	r1, r2
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff ff80 	bl	80010fc <__NVIC_SetPriority>
}
 80011fc:	bf00      	nop
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff ff54 	bl	80010c0 <__NVIC_EnableIRQ>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001220:	b480      	push	{r7}
 8001222:	b089      	sub	sp, #36	; 0x24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001232:	2300      	movs	r3, #0
 8001234:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
 800123a:	e177      	b.n	800152c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800123c:	2201      	movs	r2, #1
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	429a      	cmp	r2, r3
 8001256:	f040 8166 	bne.w	8001526 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f003 0303 	and.w	r3, r3, #3
 8001262:	2b01      	cmp	r3, #1
 8001264:	d005      	beq.n	8001272 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800126e:	2b02      	cmp	r3, #2
 8001270:	d130      	bne.n	80012d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	2203      	movs	r2, #3
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4013      	ands	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	68da      	ldr	r2, [r3, #12]
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012a8:	2201      	movs	r2, #1
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	091b      	lsrs	r3, r3, #4
 80012be:	f003 0201 	and.w	r2, r3, #1
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 0303 	and.w	r3, r3, #3
 80012dc:	2b03      	cmp	r3, #3
 80012de:	d017      	beq.n	8001310 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	2203      	movs	r2, #3
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d123      	bne.n	8001364 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	08da      	lsrs	r2, r3, #3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3208      	adds	r2, #8
 8001324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001328:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	f003 0307 	and.w	r3, r3, #7
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	220f      	movs	r2, #15
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	691a      	ldr	r2, [r3, #16]
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	08da      	lsrs	r2, r3, #3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	3208      	adds	r2, #8
 800135e:	69b9      	ldr	r1, [r7, #24]
 8001360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	2203      	movs	r2, #3
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 0203 	and.w	r2, r3, #3
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f000 80c0 	beq.w	8001526 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	4b66      	ldr	r3, [pc, #408]	; (8001544 <HAL_GPIO_Init+0x324>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	4a65      	ldr	r2, [pc, #404]	; (8001544 <HAL_GPIO_Init+0x324>)
 80013b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b4:	6453      	str	r3, [r2, #68]	; 0x44
 80013b6:	4b63      	ldr	r3, [pc, #396]	; (8001544 <HAL_GPIO_Init+0x324>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013c2:	4a61      	ldr	r2, [pc, #388]	; (8001548 <HAL_GPIO_Init+0x328>)
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	089b      	lsrs	r3, r3, #2
 80013c8:	3302      	adds	r3, #2
 80013ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f003 0303 	and.w	r3, r3, #3
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	220f      	movs	r2, #15
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43db      	mvns	r3, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4013      	ands	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a58      	ldr	r2, [pc, #352]	; (800154c <HAL_GPIO_Init+0x32c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d037      	beq.n	800145e <HAL_GPIO_Init+0x23e>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a57      	ldr	r2, [pc, #348]	; (8001550 <HAL_GPIO_Init+0x330>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d031      	beq.n	800145a <HAL_GPIO_Init+0x23a>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a56      	ldr	r2, [pc, #344]	; (8001554 <HAL_GPIO_Init+0x334>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d02b      	beq.n	8001456 <HAL_GPIO_Init+0x236>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a55      	ldr	r2, [pc, #340]	; (8001558 <HAL_GPIO_Init+0x338>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d025      	beq.n	8001452 <HAL_GPIO_Init+0x232>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a54      	ldr	r2, [pc, #336]	; (800155c <HAL_GPIO_Init+0x33c>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d01f      	beq.n	800144e <HAL_GPIO_Init+0x22e>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a53      	ldr	r2, [pc, #332]	; (8001560 <HAL_GPIO_Init+0x340>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d019      	beq.n	800144a <HAL_GPIO_Init+0x22a>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a52      	ldr	r2, [pc, #328]	; (8001564 <HAL_GPIO_Init+0x344>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d013      	beq.n	8001446 <HAL_GPIO_Init+0x226>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a51      	ldr	r2, [pc, #324]	; (8001568 <HAL_GPIO_Init+0x348>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d00d      	beq.n	8001442 <HAL_GPIO_Init+0x222>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a50      	ldr	r2, [pc, #320]	; (800156c <HAL_GPIO_Init+0x34c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d007      	beq.n	800143e <HAL_GPIO_Init+0x21e>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a4f      	ldr	r2, [pc, #316]	; (8001570 <HAL_GPIO_Init+0x350>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d101      	bne.n	800143a <HAL_GPIO_Init+0x21a>
 8001436:	2309      	movs	r3, #9
 8001438:	e012      	b.n	8001460 <HAL_GPIO_Init+0x240>
 800143a:	230a      	movs	r3, #10
 800143c:	e010      	b.n	8001460 <HAL_GPIO_Init+0x240>
 800143e:	2308      	movs	r3, #8
 8001440:	e00e      	b.n	8001460 <HAL_GPIO_Init+0x240>
 8001442:	2307      	movs	r3, #7
 8001444:	e00c      	b.n	8001460 <HAL_GPIO_Init+0x240>
 8001446:	2306      	movs	r3, #6
 8001448:	e00a      	b.n	8001460 <HAL_GPIO_Init+0x240>
 800144a:	2305      	movs	r3, #5
 800144c:	e008      	b.n	8001460 <HAL_GPIO_Init+0x240>
 800144e:	2304      	movs	r3, #4
 8001450:	e006      	b.n	8001460 <HAL_GPIO_Init+0x240>
 8001452:	2303      	movs	r3, #3
 8001454:	e004      	b.n	8001460 <HAL_GPIO_Init+0x240>
 8001456:	2302      	movs	r3, #2
 8001458:	e002      	b.n	8001460 <HAL_GPIO_Init+0x240>
 800145a:	2301      	movs	r3, #1
 800145c:	e000      	b.n	8001460 <HAL_GPIO_Init+0x240>
 800145e:	2300      	movs	r3, #0
 8001460:	69fa      	ldr	r2, [r7, #28]
 8001462:	f002 0203 	and.w	r2, r2, #3
 8001466:	0092      	lsls	r2, r2, #2
 8001468:	4093      	lsls	r3, r2
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001470:	4935      	ldr	r1, [pc, #212]	; (8001548 <HAL_GPIO_Init+0x328>)
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	089b      	lsrs	r3, r3, #2
 8001476:	3302      	adds	r3, #2
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800147e:	4b3d      	ldr	r3, [pc, #244]	; (8001574 <HAL_GPIO_Init+0x354>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	43db      	mvns	r3, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4013      	ands	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014a2:	4a34      	ldr	r2, [pc, #208]	; (8001574 <HAL_GPIO_Init+0x354>)
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014a8:	4b32      	ldr	r3, [pc, #200]	; (8001574 <HAL_GPIO_Init+0x354>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d003      	beq.n	80014cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014cc:	4a29      	ldr	r2, [pc, #164]	; (8001574 <HAL_GPIO_Init+0x354>)
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014d2:	4b28      	ldr	r3, [pc, #160]	; (8001574 <HAL_GPIO_Init+0x354>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	43db      	mvns	r3, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4013      	ands	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014f6:	4a1f      	ldr	r2, [pc, #124]	; (8001574 <HAL_GPIO_Init+0x354>)
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014fc:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <HAL_GPIO_Init+0x354>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	43db      	mvns	r3, r3
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4013      	ands	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	4313      	orrs	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001520:	4a14      	ldr	r2, [pc, #80]	; (8001574 <HAL_GPIO_Init+0x354>)
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3301      	adds	r3, #1
 800152a:	61fb      	str	r3, [r7, #28]
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	2b0f      	cmp	r3, #15
 8001530:	f67f ae84 	bls.w	800123c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001534:	bf00      	nop
 8001536:	bf00      	nop
 8001538:	3724      	adds	r7, #36	; 0x24
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40023800 	.word	0x40023800
 8001548:	40013800 	.word	0x40013800
 800154c:	40020000 	.word	0x40020000
 8001550:	40020400 	.word	0x40020400
 8001554:	40020800 	.word	0x40020800
 8001558:	40020c00 	.word	0x40020c00
 800155c:	40021000 	.word	0x40021000
 8001560:	40021400 	.word	0x40021400
 8001564:	40021800 	.word	0x40021800
 8001568:	40021c00 	.word	0x40021c00
 800156c:	40022000 	.word	0x40022000
 8001570:	40022400 	.word	0x40022400
 8001574:	40013c00 	.word	0x40013c00

08001578 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	807b      	strh	r3, [r7, #2]
 8001584:	4613      	mov	r3, r2
 8001586:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001588:	787b      	ldrb	r3, [r7, #1]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800158e:	887a      	ldrh	r2, [r7, #2]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001594:	e003      	b.n	800159e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001596:	887b      	ldrh	r3, [r7, #2]
 8001598:	041a      	lsls	r2, r3, #16
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	619a      	str	r2, [r3, #24]
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e267      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d075      	beq.n	80016b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015ca:	4b88      	ldr	r3, [pc, #544]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 030c 	and.w	r3, r3, #12
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	d00c      	beq.n	80015f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015d6:	4b85      	ldr	r3, [pc, #532]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d112      	bne.n	8001608 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015e2:	4b82      	ldr	r3, [pc, #520]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015ee:	d10b      	bne.n	8001608 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f0:	4b7e      	ldr	r3, [pc, #504]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d05b      	beq.n	80016b4 <HAL_RCC_OscConfig+0x108>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d157      	bne.n	80016b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e242      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001610:	d106      	bne.n	8001620 <HAL_RCC_OscConfig+0x74>
 8001612:	4b76      	ldr	r3, [pc, #472]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a75      	ldr	r2, [pc, #468]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 8001618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	e01d      	b.n	800165c <HAL_RCC_OscConfig+0xb0>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001628:	d10c      	bne.n	8001644 <HAL_RCC_OscConfig+0x98>
 800162a:	4b70      	ldr	r3, [pc, #448]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a6f      	ldr	r2, [pc, #444]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 8001630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	4b6d      	ldr	r3, [pc, #436]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a6c      	ldr	r2, [pc, #432]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 800163c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	e00b      	b.n	800165c <HAL_RCC_OscConfig+0xb0>
 8001644:	4b69      	ldr	r3, [pc, #420]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a68      	ldr	r2, [pc, #416]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 800164a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	4b66      	ldr	r3, [pc, #408]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a65      	ldr	r2, [pc, #404]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 8001656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800165a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d013      	beq.n	800168c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001664:	f7ff fcee 	bl	8001044 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800166c:	f7ff fcea 	bl	8001044 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b64      	cmp	r3, #100	; 0x64
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e207      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167e:	4b5b      	ldr	r3, [pc, #364]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0f0      	beq.n	800166c <HAL_RCC_OscConfig+0xc0>
 800168a:	e014      	b.n	80016b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168c:	f7ff fcda 	bl	8001044 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001694:	f7ff fcd6 	bl	8001044 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b64      	cmp	r3, #100	; 0x64
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e1f3      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a6:	4b51      	ldr	r3, [pc, #324]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0xe8>
 80016b2:	e000      	b.n	80016b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d063      	beq.n	800178a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016c2:	4b4a      	ldr	r3, [pc, #296]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f003 030c 	and.w	r3, r3, #12
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00b      	beq.n	80016e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ce:	4b47      	ldr	r3, [pc, #284]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016d6:	2b08      	cmp	r3, #8
 80016d8:	d11c      	bne.n	8001714 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016da:	4b44      	ldr	r3, [pc, #272]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d116      	bne.n	8001714 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016e6:	4b41      	ldr	r3, [pc, #260]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d005      	beq.n	80016fe <HAL_RCC_OscConfig+0x152>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d001      	beq.n	80016fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e1c7      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fe:	4b3b      	ldr	r3, [pc, #236]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	4937      	ldr	r1, [pc, #220]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 800170e:	4313      	orrs	r3, r2
 8001710:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001712:	e03a      	b.n	800178a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d020      	beq.n	800175e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800171c:	4b34      	ldr	r3, [pc, #208]	; (80017f0 <HAL_RCC_OscConfig+0x244>)
 800171e:	2201      	movs	r2, #1
 8001720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001722:	f7ff fc8f 	bl	8001044 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800172a:	f7ff fc8b 	bl	8001044 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e1a8      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800173c:	4b2b      	ldr	r3, [pc, #172]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0f0      	beq.n	800172a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001748:	4b28      	ldr	r3, [pc, #160]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	4925      	ldr	r1, [pc, #148]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 8001758:	4313      	orrs	r3, r2
 800175a:	600b      	str	r3, [r1, #0]
 800175c:	e015      	b.n	800178a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800175e:	4b24      	ldr	r3, [pc, #144]	; (80017f0 <HAL_RCC_OscConfig+0x244>)
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001764:	f7ff fc6e 	bl	8001044 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800176c:	f7ff fc6a 	bl	8001044 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e187      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800177e:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f0      	bne.n	800176c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	2b00      	cmp	r3, #0
 8001794:	d036      	beq.n	8001804 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d016      	beq.n	80017cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <HAL_RCC_OscConfig+0x248>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a4:	f7ff fc4e 	bl	8001044 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ac:	f7ff fc4a 	bl	8001044 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e167      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017be:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <HAL_RCC_OscConfig+0x240>)
 80017c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0f0      	beq.n	80017ac <HAL_RCC_OscConfig+0x200>
 80017ca:	e01b      	b.n	8001804 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017cc:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <HAL_RCC_OscConfig+0x248>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d2:	f7ff fc37 	bl	8001044 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d8:	e00e      	b.n	80017f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017da:	f7ff fc33 	bl	8001044 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d907      	bls.n	80017f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e150      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
 80017ec:	40023800 	.word	0x40023800
 80017f0:	42470000 	.word	0x42470000
 80017f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f8:	4b88      	ldr	r3, [pc, #544]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 80017fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1ea      	bne.n	80017da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 8097 	beq.w	8001940 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001812:	2300      	movs	r3, #0
 8001814:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001816:	4b81      	ldr	r3, [pc, #516]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10f      	bne.n	8001842 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	4b7d      	ldr	r3, [pc, #500]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	4a7c      	ldr	r2, [pc, #496]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 800182c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001830:	6413      	str	r3, [r2, #64]	; 0x40
 8001832:	4b7a      	ldr	r3, [pc, #488]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800183e:	2301      	movs	r3, #1
 8001840:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001842:	4b77      	ldr	r3, [pc, #476]	; (8001a20 <HAL_RCC_OscConfig+0x474>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184a:	2b00      	cmp	r3, #0
 800184c:	d118      	bne.n	8001880 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800184e:	4b74      	ldr	r3, [pc, #464]	; (8001a20 <HAL_RCC_OscConfig+0x474>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a73      	ldr	r2, [pc, #460]	; (8001a20 <HAL_RCC_OscConfig+0x474>)
 8001854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001858:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800185a:	f7ff fbf3 	bl	8001044 <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001862:	f7ff fbef 	bl	8001044 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e10c      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001874:	4b6a      	ldr	r3, [pc, #424]	; (8001a20 <HAL_RCC_OscConfig+0x474>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0f0      	beq.n	8001862 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d106      	bne.n	8001896 <HAL_RCC_OscConfig+0x2ea>
 8001888:	4b64      	ldr	r3, [pc, #400]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 800188a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188c:	4a63      	ldr	r2, [pc, #396]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	6713      	str	r3, [r2, #112]	; 0x70
 8001894:	e01c      	b.n	80018d0 <HAL_RCC_OscConfig+0x324>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	2b05      	cmp	r3, #5
 800189c:	d10c      	bne.n	80018b8 <HAL_RCC_OscConfig+0x30c>
 800189e:	4b5f      	ldr	r3, [pc, #380]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 80018a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a2:	4a5e      	ldr	r2, [pc, #376]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 80018a4:	f043 0304 	orr.w	r3, r3, #4
 80018a8:	6713      	str	r3, [r2, #112]	; 0x70
 80018aa:	4b5c      	ldr	r3, [pc, #368]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 80018ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ae:	4a5b      	ldr	r2, [pc, #364]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6713      	str	r3, [r2, #112]	; 0x70
 80018b6:	e00b      	b.n	80018d0 <HAL_RCC_OscConfig+0x324>
 80018b8:	4b58      	ldr	r3, [pc, #352]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 80018ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018bc:	4a57      	ldr	r2, [pc, #348]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 80018be:	f023 0301 	bic.w	r3, r3, #1
 80018c2:	6713      	str	r3, [r2, #112]	; 0x70
 80018c4:	4b55      	ldr	r3, [pc, #340]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 80018c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c8:	4a54      	ldr	r2, [pc, #336]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 80018ca:	f023 0304 	bic.w	r3, r3, #4
 80018ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d015      	beq.n	8001904 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d8:	f7ff fbb4 	bl	8001044 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018de:	e00a      	b.n	80018f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e0:	f7ff fbb0 	bl	8001044 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e0cb      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f6:	4b49      	ldr	r3, [pc, #292]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 80018f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0ee      	beq.n	80018e0 <HAL_RCC_OscConfig+0x334>
 8001902:	e014      	b.n	800192e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001904:	f7ff fb9e 	bl	8001044 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800190a:	e00a      	b.n	8001922 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800190c:	f7ff fb9a 	bl	8001044 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	f241 3288 	movw	r2, #5000	; 0x1388
 800191a:	4293      	cmp	r3, r2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e0b5      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001922:	4b3e      	ldr	r3, [pc, #248]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 8001924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1ee      	bne.n	800190c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800192e:	7dfb      	ldrb	r3, [r7, #23]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d105      	bne.n	8001940 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001934:	4b39      	ldr	r3, [pc, #228]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	4a38      	ldr	r2, [pc, #224]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 800193a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800193e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 80a1 	beq.w	8001a8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800194a:	4b34      	ldr	r3, [pc, #208]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 030c 	and.w	r3, r3, #12
 8001952:	2b08      	cmp	r3, #8
 8001954:	d05c      	beq.n	8001a10 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	2b02      	cmp	r3, #2
 800195c:	d141      	bne.n	80019e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195e:	4b31      	ldr	r3, [pc, #196]	; (8001a24 <HAL_RCC_OscConfig+0x478>)
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001964:	f7ff fb6e 	bl	8001044 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800196c:	f7ff fb6a 	bl	8001044 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e087      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800197e:	4b27      	ldr	r3, [pc, #156]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69da      	ldr	r2, [r3, #28]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001998:	019b      	lsls	r3, r3, #6
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a0:	085b      	lsrs	r3, r3, #1
 80019a2:	3b01      	subs	r3, #1
 80019a4:	041b      	lsls	r3, r3, #16
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ac:	061b      	lsls	r3, r3, #24
 80019ae:	491b      	ldr	r1, [pc, #108]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019b4:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <HAL_RCC_OscConfig+0x478>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ba:	f7ff fb43 	bl	8001044 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c2:	f7ff fb3f 	bl	8001044 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e05c      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0f0      	beq.n	80019c2 <HAL_RCC_OscConfig+0x416>
 80019e0:	e054      	b.n	8001a8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <HAL_RCC_OscConfig+0x478>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e8:	f7ff fb2c 	bl	8001044 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f0:	f7ff fb28 	bl	8001044 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e045      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <HAL_RCC_OscConfig+0x470>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f0      	bne.n	80019f0 <HAL_RCC_OscConfig+0x444>
 8001a0e:	e03d      	b.n	8001a8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d107      	bne.n	8001a28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e038      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40007000 	.word	0x40007000
 8001a24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a28:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <HAL_RCC_OscConfig+0x4ec>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d028      	beq.n	8001a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d121      	bne.n	8001a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d11a      	bne.n	8001a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a58:	4013      	ands	r3, r2
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d111      	bne.n	8001a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6e:	085b      	lsrs	r3, r3, #1
 8001a70:	3b01      	subs	r3, #1
 8001a72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d107      	bne.n	8001a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d001      	beq.n	8001a8c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e000      	b.n	8001a8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800

08001a9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0cc      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab0:	4b68      	ldr	r3, [pc, #416]	; (8001c54 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 030f 	and.w	r3, r3, #15
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d90c      	bls.n	8001ad8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001abe:	4b65      	ldr	r3, [pc, #404]	; (8001c54 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac6:	4b63      	ldr	r3, [pc, #396]	; (8001c54 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d001      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e0b8      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d020      	beq.n	8001b26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d005      	beq.n	8001afc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001af0:	4b59      	ldr	r3, [pc, #356]	; (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	4a58      	ldr	r2, [pc, #352]	; (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001afa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0308 	and.w	r3, r3, #8
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d005      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b08:	4b53      	ldr	r3, [pc, #332]	; (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	4a52      	ldr	r2, [pc, #328]	; (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b14:	4b50      	ldr	r3, [pc, #320]	; (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	494d      	ldr	r1, [pc, #308]	; (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d044      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d107      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3a:	4b47      	ldr	r3, [pc, #284]	; (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d119      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e07f      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d003      	beq.n	8001b5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	d107      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b5a:	4b3f      	ldr	r3, [pc, #252]	; (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d109      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e06f      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6a:	4b3b      	ldr	r3, [pc, #236]	; (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e067      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b7a:	4b37      	ldr	r3, [pc, #220]	; (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f023 0203 	bic.w	r2, r3, #3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	4934      	ldr	r1, [pc, #208]	; (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b8c:	f7ff fa5a 	bl	8001044 <HAL_GetTick>
 8001b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b92:	e00a      	b.n	8001baa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b94:	f7ff fa56 	bl	8001044 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e04f      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001baa:	4b2b      	ldr	r3, [pc, #172]	; (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 020c 	and.w	r2, r3, #12
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d1eb      	bne.n	8001b94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bbc:	4b25      	ldr	r3, [pc, #148]	; (8001c54 <HAL_RCC_ClockConfig+0x1b8>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 030f 	and.w	r3, r3, #15
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d20c      	bcs.n	8001be4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bca:	4b22      	ldr	r3, [pc, #136]	; (8001c54 <HAL_RCC_ClockConfig+0x1b8>)
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd2:	4b20      	ldr	r3, [pc, #128]	; (8001c54 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d001      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e032      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d008      	beq.n	8001c02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf0:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	4916      	ldr	r1, [pc, #88]	; (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d009      	beq.n	8001c22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c0e:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	490e      	ldr	r1, [pc, #56]	; (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c22:	f000 f821 	bl	8001c68 <HAL_RCC_GetSysClockFreq>
 8001c26:	4602      	mov	r2, r0
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	091b      	lsrs	r3, r3, #4
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	490a      	ldr	r1, [pc, #40]	; (8001c5c <HAL_RCC_ClockConfig+0x1c0>)
 8001c34:	5ccb      	ldrb	r3, [r1, r3]
 8001c36:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3a:	4a09      	ldr	r2, [pc, #36]	; (8001c60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c3e:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <HAL_RCC_ClockConfig+0x1c8>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff f8f0 	bl	8000e28 <HAL_InitTick>

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40023c00 	.word	0x40023c00
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	080069d8 	.word	0x080069d8
 8001c60:	20000018 	.word	0x20000018
 8001c64:	2000001c 	.word	0x2000001c

08001c68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c6c:	b094      	sub	sp, #80	; 0x50
 8001c6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c70:	2300      	movs	r3, #0
 8001c72:	647b      	str	r3, [r7, #68]	; 0x44
 8001c74:	2300      	movs	r3, #0
 8001c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c78:	2300      	movs	r3, #0
 8001c7a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c80:	4b79      	ldr	r3, [pc, #484]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 030c 	and.w	r3, r3, #12
 8001c88:	2b08      	cmp	r3, #8
 8001c8a:	d00d      	beq.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x40>
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	f200 80e1 	bhi.w	8001e54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d002      	beq.n	8001c9c <HAL_RCC_GetSysClockFreq+0x34>
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d003      	beq.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c9a:	e0db      	b.n	8001e54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c9c:	4b73      	ldr	r3, [pc, #460]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x204>)
 8001c9e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001ca0:	e0db      	b.n	8001e5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ca2:	4b73      	ldr	r3, [pc, #460]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ca4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ca6:	e0d8      	b.n	8001e5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ca8:	4b6f      	ldr	r3, [pc, #444]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cb0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cb2:	4b6d      	ldr	r3, [pc, #436]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d063      	beq.n	8001d86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cbe:	4b6a      	ldr	r3, [pc, #424]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	099b      	lsrs	r3, r3, #6
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cc8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cd0:	633b      	str	r3, [r7, #48]	; 0x30
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	637b      	str	r3, [r7, #52]	; 0x34
 8001cd6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001cda:	4622      	mov	r2, r4
 8001cdc:	462b      	mov	r3, r5
 8001cde:	f04f 0000 	mov.w	r0, #0
 8001ce2:	f04f 0100 	mov.w	r1, #0
 8001ce6:	0159      	lsls	r1, r3, #5
 8001ce8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cec:	0150      	lsls	r0, r2, #5
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4621      	mov	r1, r4
 8001cf4:	1a51      	subs	r1, r2, r1
 8001cf6:	6139      	str	r1, [r7, #16]
 8001cf8:	4629      	mov	r1, r5
 8001cfa:	eb63 0301 	sbc.w	r3, r3, r1
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d0c:	4659      	mov	r1, fp
 8001d0e:	018b      	lsls	r3, r1, #6
 8001d10:	4651      	mov	r1, sl
 8001d12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d16:	4651      	mov	r1, sl
 8001d18:	018a      	lsls	r2, r1, #6
 8001d1a:	4651      	mov	r1, sl
 8001d1c:	ebb2 0801 	subs.w	r8, r2, r1
 8001d20:	4659      	mov	r1, fp
 8001d22:	eb63 0901 	sbc.w	r9, r3, r1
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	f04f 0300 	mov.w	r3, #0
 8001d2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d3a:	4690      	mov	r8, r2
 8001d3c:	4699      	mov	r9, r3
 8001d3e:	4623      	mov	r3, r4
 8001d40:	eb18 0303 	adds.w	r3, r8, r3
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	462b      	mov	r3, r5
 8001d48:	eb49 0303 	adc.w	r3, r9, r3
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	f04f 0300 	mov.w	r3, #0
 8001d56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d5a:	4629      	mov	r1, r5
 8001d5c:	024b      	lsls	r3, r1, #9
 8001d5e:	4621      	mov	r1, r4
 8001d60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d64:	4621      	mov	r1, r4
 8001d66:	024a      	lsls	r2, r1, #9
 8001d68:	4610      	mov	r0, r2
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d6e:	2200      	movs	r2, #0
 8001d70:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d78:	f7fe fa84 	bl	8000284 <__aeabi_uldivmod>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4613      	mov	r3, r2
 8001d82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d84:	e058      	b.n	8001e38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d86:	4b38      	ldr	r3, [pc, #224]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	099b      	lsrs	r3, r3, #6
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	4618      	mov	r0, r3
 8001d90:	4611      	mov	r1, r2
 8001d92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d96:	623b      	str	r3, [r7, #32]
 8001d98:	2300      	movs	r3, #0
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001da0:	4642      	mov	r2, r8
 8001da2:	464b      	mov	r3, r9
 8001da4:	f04f 0000 	mov.w	r0, #0
 8001da8:	f04f 0100 	mov.w	r1, #0
 8001dac:	0159      	lsls	r1, r3, #5
 8001dae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001db2:	0150      	lsls	r0, r2, #5
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4641      	mov	r1, r8
 8001dba:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dbe:	4649      	mov	r1, r9
 8001dc0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001dd0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001dd4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001dd8:	ebb2 040a 	subs.w	r4, r2, sl
 8001ddc:	eb63 050b 	sbc.w	r5, r3, fp
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	f04f 0300 	mov.w	r3, #0
 8001de8:	00eb      	lsls	r3, r5, #3
 8001dea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dee:	00e2      	lsls	r2, r4, #3
 8001df0:	4614      	mov	r4, r2
 8001df2:	461d      	mov	r5, r3
 8001df4:	4643      	mov	r3, r8
 8001df6:	18e3      	adds	r3, r4, r3
 8001df8:	603b      	str	r3, [r7, #0]
 8001dfa:	464b      	mov	r3, r9
 8001dfc:	eb45 0303 	adc.w	r3, r5, r3
 8001e00:	607b      	str	r3, [r7, #4]
 8001e02:	f04f 0200 	mov.w	r2, #0
 8001e06:	f04f 0300 	mov.w	r3, #0
 8001e0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e0e:	4629      	mov	r1, r5
 8001e10:	028b      	lsls	r3, r1, #10
 8001e12:	4621      	mov	r1, r4
 8001e14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e18:	4621      	mov	r1, r4
 8001e1a:	028a      	lsls	r2, r1, #10
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	4619      	mov	r1, r3
 8001e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e22:	2200      	movs	r2, #0
 8001e24:	61bb      	str	r3, [r7, #24]
 8001e26:	61fa      	str	r2, [r7, #28]
 8001e28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e2c:	f7fe fa2a 	bl	8000284 <__aeabi_uldivmod>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4613      	mov	r3, r2
 8001e36:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e38:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	0c1b      	lsrs	r3, r3, #16
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	3301      	adds	r3, #1
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001e48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e52:	e002      	b.n	8001e5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x204>)
 8001e56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3750      	adds	r7, #80	; 0x50
 8001e60:	46bd      	mov	sp, r7
 8001e62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e66:	bf00      	nop
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	00f42400 	.word	0x00f42400
 8001e70:	007a1200 	.word	0x007a1200

08001e74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e78:	4b03      	ldr	r3, [pc, #12]	; (8001e88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	20000018 	.word	0x20000018

08001e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e90:	f7ff fff0 	bl	8001e74 <HAL_RCC_GetHCLKFreq>
 8001e94:	4602      	mov	r2, r0
 8001e96:	4b05      	ldr	r3, [pc, #20]	; (8001eac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	0a9b      	lsrs	r3, r3, #10
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	4903      	ldr	r1, [pc, #12]	; (8001eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ea2:	5ccb      	ldrb	r3, [r1, r3]
 8001ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	080069e8 	.word	0x080069e8

08001eb4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	220f      	movs	r2, #15
 8001ec2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ec4:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <HAL_RCC_GetClockConfig+0x5c>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 0203 	and.w	r2, r3, #3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ed0:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <HAL_RCC_GetClockConfig+0x5c>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001edc:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <HAL_RCC_GetClockConfig+0x5c>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ee8:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <HAL_RCC_GetClockConfig+0x5c>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	08db      	lsrs	r3, r3, #3
 8001eee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ef6:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <HAL_RCC_GetClockConfig+0x60>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 020f 	and.w	r2, r3, #15
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	601a      	str	r2, [r3, #0]
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40023c00 	.word	0x40023c00

08001f18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e041      	b.n	8001fae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d106      	bne.n	8001f44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f839 	bl	8001fb6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2202      	movs	r2, #2
 8001f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3304      	adds	r3, #4
 8001f54:	4619      	mov	r1, r3
 8001f56:	4610      	mov	r0, r2
 8001f58:	f000 f9d8 	bl	800230c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
	...

08001fcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d001      	beq.n	8001fe4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e04e      	b.n	8002082 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68da      	ldr	r2, [r3, #12]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f042 0201 	orr.w	r2, r2, #1
 8001ffa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a23      	ldr	r2, [pc, #140]	; (8002090 <HAL_TIM_Base_Start_IT+0xc4>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d022      	beq.n	800204c <HAL_TIM_Base_Start_IT+0x80>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800200e:	d01d      	beq.n	800204c <HAL_TIM_Base_Start_IT+0x80>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a1f      	ldr	r2, [pc, #124]	; (8002094 <HAL_TIM_Base_Start_IT+0xc8>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d018      	beq.n	800204c <HAL_TIM_Base_Start_IT+0x80>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a1e      	ldr	r2, [pc, #120]	; (8002098 <HAL_TIM_Base_Start_IT+0xcc>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d013      	beq.n	800204c <HAL_TIM_Base_Start_IT+0x80>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a1c      	ldr	r2, [pc, #112]	; (800209c <HAL_TIM_Base_Start_IT+0xd0>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d00e      	beq.n	800204c <HAL_TIM_Base_Start_IT+0x80>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a1b      	ldr	r2, [pc, #108]	; (80020a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d009      	beq.n	800204c <HAL_TIM_Base_Start_IT+0x80>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a19      	ldr	r2, [pc, #100]	; (80020a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d004      	beq.n	800204c <HAL_TIM_Base_Start_IT+0x80>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a18      	ldr	r2, [pc, #96]	; (80020a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d111      	bne.n	8002070 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2b06      	cmp	r3, #6
 800205c:	d010      	beq.n	8002080 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f042 0201 	orr.w	r2, r2, #1
 800206c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800206e:	e007      	b.n	8002080 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 0201 	orr.w	r2, r2, #1
 800207e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40010000 	.word	0x40010000
 8002094:	40000400 	.word	0x40000400
 8002098:	40000800 	.word	0x40000800
 800209c:	40000c00 	.word	0x40000c00
 80020a0:	40010400 	.word	0x40010400
 80020a4:	40014000 	.word	0x40014000
 80020a8:	40001800 	.word	0x40001800

080020ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d122      	bne.n	8002108 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d11b      	bne.n	8002108 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f06f 0202 	mvn.w	r2, #2
 80020d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f8ee 	bl	80022d0 <HAL_TIM_IC_CaptureCallback>
 80020f4:	e005      	b.n	8002102 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f8e0 	bl	80022bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 f8f1 	bl	80022e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	2b04      	cmp	r3, #4
 8002114:	d122      	bne.n	800215c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b04      	cmp	r3, #4
 8002122:	d11b      	bne.n	800215c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f06f 0204 	mvn.w	r2, #4
 800212c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2202      	movs	r2, #2
 8002132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f8c4 	bl	80022d0 <HAL_TIM_IC_CaptureCallback>
 8002148:	e005      	b.n	8002156 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f8b6 	bl	80022bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 f8c7 	bl	80022e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	f003 0308 	and.w	r3, r3, #8
 8002166:	2b08      	cmp	r3, #8
 8002168:	d122      	bne.n	80021b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	2b08      	cmp	r3, #8
 8002176:	d11b      	bne.n	80021b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f06f 0208 	mvn.w	r2, #8
 8002180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2204      	movs	r2, #4
 8002186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f89a 	bl	80022d0 <HAL_TIM_IC_CaptureCallback>
 800219c:	e005      	b.n	80021aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f88c 	bl	80022bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 f89d 	bl	80022e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	f003 0310 	and.w	r3, r3, #16
 80021ba:	2b10      	cmp	r3, #16
 80021bc:	d122      	bne.n	8002204 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f003 0310 	and.w	r3, r3, #16
 80021c8:	2b10      	cmp	r3, #16
 80021ca:	d11b      	bne.n	8002204 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f06f 0210 	mvn.w	r2, #16
 80021d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2208      	movs	r2, #8
 80021da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f870 	bl	80022d0 <HAL_TIM_IC_CaptureCallback>
 80021f0:	e005      	b.n	80021fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f862 	bl	80022bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f873 	bl	80022e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b01      	cmp	r3, #1
 8002210:	d10e      	bne.n	8002230 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b01      	cmp	r3, #1
 800221e:	d107      	bne.n	8002230 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f06f 0201 	mvn.w	r2, #1
 8002228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7fe fdbc 	bl	8000da8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800223a:	2b80      	cmp	r3, #128	; 0x80
 800223c:	d10e      	bne.n	800225c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002248:	2b80      	cmp	r3, #128	; 0x80
 800224a:	d107      	bne.n	800225c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f902 	bl	8002460 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002266:	2b40      	cmp	r3, #64	; 0x40
 8002268:	d10e      	bne.n	8002288 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002274:	2b40      	cmp	r3, #64	; 0x40
 8002276:	d107      	bne.n	8002288 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f838 	bl	80022f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	f003 0320 	and.w	r3, r3, #32
 8002292:	2b20      	cmp	r3, #32
 8002294:	d10e      	bne.n	80022b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f003 0320 	and.w	r3, r3, #32
 80022a0:	2b20      	cmp	r3, #32
 80022a2:	d107      	bne.n	80022b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f06f 0220 	mvn.w	r2, #32
 80022ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f8cc 	bl	800244c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a40      	ldr	r2, [pc, #256]	; (8002420 <TIM_Base_SetConfig+0x114>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d013      	beq.n	800234c <TIM_Base_SetConfig+0x40>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800232a:	d00f      	beq.n	800234c <TIM_Base_SetConfig+0x40>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a3d      	ldr	r2, [pc, #244]	; (8002424 <TIM_Base_SetConfig+0x118>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d00b      	beq.n	800234c <TIM_Base_SetConfig+0x40>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a3c      	ldr	r2, [pc, #240]	; (8002428 <TIM_Base_SetConfig+0x11c>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d007      	beq.n	800234c <TIM_Base_SetConfig+0x40>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a3b      	ldr	r2, [pc, #236]	; (800242c <TIM_Base_SetConfig+0x120>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d003      	beq.n	800234c <TIM_Base_SetConfig+0x40>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a3a      	ldr	r2, [pc, #232]	; (8002430 <TIM_Base_SetConfig+0x124>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d108      	bne.n	800235e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002352:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	4313      	orrs	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a2f      	ldr	r2, [pc, #188]	; (8002420 <TIM_Base_SetConfig+0x114>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d02b      	beq.n	80023be <TIM_Base_SetConfig+0xb2>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800236c:	d027      	beq.n	80023be <TIM_Base_SetConfig+0xb2>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a2c      	ldr	r2, [pc, #176]	; (8002424 <TIM_Base_SetConfig+0x118>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d023      	beq.n	80023be <TIM_Base_SetConfig+0xb2>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a2b      	ldr	r2, [pc, #172]	; (8002428 <TIM_Base_SetConfig+0x11c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d01f      	beq.n	80023be <TIM_Base_SetConfig+0xb2>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a2a      	ldr	r2, [pc, #168]	; (800242c <TIM_Base_SetConfig+0x120>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d01b      	beq.n	80023be <TIM_Base_SetConfig+0xb2>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a29      	ldr	r2, [pc, #164]	; (8002430 <TIM_Base_SetConfig+0x124>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d017      	beq.n	80023be <TIM_Base_SetConfig+0xb2>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a28      	ldr	r2, [pc, #160]	; (8002434 <TIM_Base_SetConfig+0x128>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d013      	beq.n	80023be <TIM_Base_SetConfig+0xb2>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a27      	ldr	r2, [pc, #156]	; (8002438 <TIM_Base_SetConfig+0x12c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d00f      	beq.n	80023be <TIM_Base_SetConfig+0xb2>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a26      	ldr	r2, [pc, #152]	; (800243c <TIM_Base_SetConfig+0x130>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d00b      	beq.n	80023be <TIM_Base_SetConfig+0xb2>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a25      	ldr	r2, [pc, #148]	; (8002440 <TIM_Base_SetConfig+0x134>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d007      	beq.n	80023be <TIM_Base_SetConfig+0xb2>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a24      	ldr	r2, [pc, #144]	; (8002444 <TIM_Base_SetConfig+0x138>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d003      	beq.n	80023be <TIM_Base_SetConfig+0xb2>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a23      	ldr	r2, [pc, #140]	; (8002448 <TIM_Base_SetConfig+0x13c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d108      	bne.n	80023d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	4313      	orrs	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a0a      	ldr	r2, [pc, #40]	; (8002420 <TIM_Base_SetConfig+0x114>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d003      	beq.n	8002404 <TIM_Base_SetConfig+0xf8>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a0c      	ldr	r2, [pc, #48]	; (8002430 <TIM_Base_SetConfig+0x124>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d103      	bne.n	800240c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	691a      	ldr	r2, [r3, #16]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	615a      	str	r2, [r3, #20]
}
 8002412:	bf00      	nop
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40010000 	.word	0x40010000
 8002424:	40000400 	.word	0x40000400
 8002428:	40000800 	.word	0x40000800
 800242c:	40000c00 	.word	0x40000c00
 8002430:	40010400 	.word	0x40010400
 8002434:	40014000 	.word	0x40014000
 8002438:	40014400 	.word	0x40014400
 800243c:	40014800 	.word	0x40014800
 8002440:	40001800 	.word	0x40001800
 8002444:	40001c00 	.word	0x40001c00
 8002448:	40002000 	.word	0x40002000

0800244c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f103 0208 	add.w	r2, r3, #8
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f04f 32ff 	mov.w	r2, #4294967295
 800248c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f103 0208 	add.w	r2, r3, #8
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f103 0208 	add.w	r2, r3, #8
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80024ce:	b480      	push	{r7}
 80024d0:	b085      	sub	sp, #20
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	1c5a      	adds	r2, r3, #1
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	601a      	str	r2, [r3, #0]
}
 800250a:	bf00      	nop
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002516:	b480      	push	{r7}
 8002518:	b085      	sub	sp, #20
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252c:	d103      	bne.n	8002536 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	e00c      	b.n	8002550 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3308      	adds	r3, #8
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	e002      	b.n	8002544 <vListInsert+0x2e>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	429a      	cmp	r2, r3
 800254e:	d2f6      	bcs.n	800253e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	1c5a      	adds	r2, r3, #1
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	601a      	str	r2, [r3, #0]
}
 800257c:	bf00      	nop
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6892      	ldr	r2, [r2, #8]
 800259e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6852      	ldr	r2, [r2, #4]
 80025a8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d103      	bne.n	80025bc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	1e5a      	subs	r2, r3, #1
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10a      	bne.n	8002606 <xQueueGenericReset+0x2a>
        __asm volatile
 80025f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f4:	f383 8811 	msr	BASEPRI, r3
 80025f8:	f3bf 8f6f 	isb	sy
 80025fc:	f3bf 8f4f 	dsb	sy
 8002600:	60bb      	str	r3, [r7, #8]
    }
 8002602:	bf00      	nop
 8002604:	e7fe      	b.n	8002604 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002606:	f002 f87f 	bl	8004708 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002612:	68f9      	ldr	r1, [r7, #12]
 8002614:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002616:	fb01 f303 	mul.w	r3, r1, r3
 800261a:	441a      	add	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002636:	3b01      	subs	r3, #1
 8002638:	68f9      	ldr	r1, [r7, #12]
 800263a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800263c:	fb01 f303 	mul.w	r3, r1, r3
 8002640:	441a      	add	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	22ff      	movs	r2, #255	; 0xff
 800264a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	22ff      	movs	r2, #255	; 0xff
 8002652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d114      	bne.n	8002686 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d01a      	beq.n	800269a <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	3310      	adds	r3, #16
 8002668:	4618      	mov	r0, r3
 800266a:	f001 f957 	bl	800391c <xTaskRemoveFromEventList>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d012      	beq.n	800269a <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002674:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <xQueueGenericReset+0xcc>)
 8002676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	f3bf 8f4f 	dsb	sy
 8002680:	f3bf 8f6f 	isb	sy
 8002684:	e009      	b.n	800269a <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	3310      	adds	r3, #16
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff fef2 	bl	8002474 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	3324      	adds	r3, #36	; 0x24
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff feed 	bl	8002474 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800269a:	f002 f865 	bl	8004768 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800269e:	2301      	movs	r3, #1
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	e000ed04 	.word	0xe000ed04

080026ac <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08c      	sub	sp, #48	; 0x30
 80026b0:	af02      	add	r7, sp, #8
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	4613      	mov	r3, r2
 80026b8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10a      	bne.n	80026d6 <xQueueGenericCreate+0x2a>
        __asm volatile
 80026c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c4:	f383 8811 	msr	BASEPRI, r3
 80026c8:	f3bf 8f6f 	isb	sy
 80026cc:	f3bf 8f4f 	dsb	sy
 80026d0:	61bb      	str	r3, [r7, #24]
    }
 80026d2:	bf00      	nop
 80026d4:	e7fe      	b.n	80026d4 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	fb02 f303 	mul.w	r3, r2, r3
 80026de:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d006      	beq.n	80026f4 <xQueueGenericCreate+0x48>
 80026e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d101      	bne.n	80026f8 <xQueueGenericCreate+0x4c>
 80026f4:	2301      	movs	r3, #1
 80026f6:	e000      	b.n	80026fa <xQueueGenericCreate+0x4e>
 80026f8:	2300      	movs	r3, #0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10a      	bne.n	8002714 <xQueueGenericCreate+0x68>
        __asm volatile
 80026fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002702:	f383 8811 	msr	BASEPRI, r3
 8002706:	f3bf 8f6f 	isb	sy
 800270a:	f3bf 8f4f 	dsb	sy
 800270e:	617b      	str	r3, [r7, #20]
    }
 8002710:	bf00      	nop
 8002712:	e7fe      	b.n	8002712 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800271a:	d90a      	bls.n	8002732 <xQueueGenericCreate+0x86>
        __asm volatile
 800271c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002720:	f383 8811 	msr	BASEPRI, r3
 8002724:	f3bf 8f6f 	isb	sy
 8002728:	f3bf 8f4f 	dsb	sy
 800272c:	613b      	str	r3, [r7, #16]
    }
 800272e:	bf00      	nop
 8002730:	e7fe      	b.n	8002730 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	3350      	adds	r3, #80	; 0x50
 8002736:	4618      	mov	r0, r3
 8002738:	f002 f910 	bl	800495c <pvPortMalloc>
 800273c:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800273e:	6a3b      	ldr	r3, [r7, #32]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00d      	beq.n	8002760 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002744:	6a3b      	ldr	r3, [r7, #32]
 8002746:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	3350      	adds	r3, #80	; 0x50
 800274c:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800274e:	79fa      	ldrb	r2, [r7, #7]
 8002750:	6a3b      	ldr	r3, [r7, #32]
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	4613      	mov	r3, r2
 8002756:	69fa      	ldr	r2, [r7, #28]
 8002758:	68b9      	ldr	r1, [r7, #8]
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 f805 	bl	800276a <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002760:	6a3b      	ldr	r3, [r7, #32]
    }
 8002762:	4618      	mov	r0, r3
 8002764:	3728      	adds	r7, #40	; 0x28
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b084      	sub	sp, #16
 800276e:	af00      	add	r7, sp, #0
 8002770:	60f8      	str	r0, [r7, #12]
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	607a      	str	r2, [r7, #4]
 8002776:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d103      	bne.n	8002786 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	e002      	b.n	800278c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	68ba      	ldr	r2, [r7, #8]
 8002796:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002798:	2101      	movs	r1, #1
 800279a:	69b8      	ldr	r0, [r7, #24]
 800279c:	f7ff ff1e 	bl	80025dc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	78fa      	ldrb	r2, [r7, #3]
 80027a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80027a8:	78fb      	ldrb	r3, [r7, #3]
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	68f9      	ldr	r1, [r7, #12]
 80027ae:	2073      	movs	r0, #115	; 0x73
 80027b0:	f003 f836 	bl	8005820 <SEGGER_SYSVIEW_RecordU32x3>
}
 80027b4:	bf00      	nop
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b090      	sub	sp, #64	; 0x40
 80027c0:	af02      	add	r7, sp, #8
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
 80027c8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80027ca:	2300      	movs	r3, #0
 80027cc:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80027d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10a      	bne.n	80027ee <xQueueGenericSend+0x32>
        __asm volatile
 80027d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027dc:	f383 8811 	msr	BASEPRI, r3
 80027e0:	f3bf 8f6f 	isb	sy
 80027e4:	f3bf 8f4f 	dsb	sy
 80027e8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80027ea:	bf00      	nop
 80027ec:	e7fe      	b.n	80027ec <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d103      	bne.n	80027fc <xQueueGenericSend+0x40>
 80027f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <xQueueGenericSend+0x44>
 80027fc:	2301      	movs	r3, #1
 80027fe:	e000      	b.n	8002802 <xQueueGenericSend+0x46>
 8002800:	2300      	movs	r3, #0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10a      	bne.n	800281c <xQueueGenericSend+0x60>
        __asm volatile
 8002806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800280a:	f383 8811 	msr	BASEPRI, r3
 800280e:	f3bf 8f6f 	isb	sy
 8002812:	f3bf 8f4f 	dsb	sy
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002818:	bf00      	nop
 800281a:	e7fe      	b.n	800281a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	2b02      	cmp	r3, #2
 8002820:	d103      	bne.n	800282a <xQueueGenericSend+0x6e>
 8002822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002826:	2b01      	cmp	r3, #1
 8002828:	d101      	bne.n	800282e <xQueueGenericSend+0x72>
 800282a:	2301      	movs	r3, #1
 800282c:	e000      	b.n	8002830 <xQueueGenericSend+0x74>
 800282e:	2300      	movs	r3, #0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10a      	bne.n	800284a <xQueueGenericSend+0x8e>
        __asm volatile
 8002834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002838:	f383 8811 	msr	BASEPRI, r3
 800283c:	f3bf 8f6f 	isb	sy
 8002840:	f3bf 8f4f 	dsb	sy
 8002844:	623b      	str	r3, [r7, #32]
    }
 8002846:	bf00      	nop
 8002848:	e7fe      	b.n	8002848 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800284a:	f001 fa07 	bl	8003c5c <xTaskGetSchedulerState>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d102      	bne.n	800285a <xQueueGenericSend+0x9e>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <xQueueGenericSend+0xa2>
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <xQueueGenericSend+0xa4>
 800285e:	2300      	movs	r3, #0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10a      	bne.n	800287a <xQueueGenericSend+0xbe>
        __asm volatile
 8002864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002868:	f383 8811 	msr	BASEPRI, r3
 800286c:	f3bf 8f6f 	isb	sy
 8002870:	f3bf 8f4f 	dsb	sy
 8002874:	61fb      	str	r3, [r7, #28]
    }
 8002876:	bf00      	nop
 8002878:	e7fe      	b.n	8002878 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800287a:	f001 ff45 	bl	8004708 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800287e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002880:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002886:	429a      	cmp	r2, r3
 8002888:	d302      	bcc.n	8002890 <xQueueGenericSend+0xd4>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	2b02      	cmp	r3, #2
 800288e:	d136      	bne.n	80028fe <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8002890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002892:	4618      	mov	r0, r3
 8002894:	f003 fd50 	bl	8006338 <SEGGER_SYSVIEW_ShrinkId>
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	460b      	mov	r3, r1
 80028a2:	4601      	mov	r1, r0
 80028a4:	205a      	movs	r0, #90	; 0x5a
 80028a6:	f003 f831 	bl	800590c <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	68b9      	ldr	r1, [r7, #8]
 80028ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028b0:	f000 fa78 	bl	8002da4 <prvCopyDataToQueue>
 80028b4:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d010      	beq.n	80028e0 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c0:	3324      	adds	r3, #36	; 0x24
 80028c2:	4618      	mov	r0, r3
 80028c4:	f001 f82a 	bl	800391c <xTaskRemoveFromEventList>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d013      	beq.n	80028f6 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80028ce:	4b4d      	ldr	r3, [pc, #308]	; (8002a04 <xQueueGenericSend+0x248>)
 80028d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	f3bf 8f4f 	dsb	sy
 80028da:	f3bf 8f6f 	isb	sy
 80028de:	e00a      	b.n	80028f6 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80028e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d007      	beq.n	80028f6 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80028e6:	4b47      	ldr	r3, [pc, #284]	; (8002a04 <xQueueGenericSend+0x248>)
 80028e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	f3bf 8f4f 	dsb	sy
 80028f2:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80028f6:	f001 ff37 	bl	8004768 <vPortExitCritical>
                return pdPASS;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e07d      	b.n	80029fa <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d110      	bne.n	8002926 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002904:	f001 ff30 	bl	8004768 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290a:	4618      	mov	r0, r3
 800290c:	f003 fd14 	bl	8006338 <SEGGER_SYSVIEW_ShrinkId>
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	460b      	mov	r3, r1
 800291a:	4601      	mov	r1, r0
 800291c:	205a      	movs	r0, #90	; 0x5a
 800291e:	f002 fff5 	bl	800590c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002922:	2300      	movs	r3, #0
 8002924:	e069      	b.n	80029fa <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002928:	2b00      	cmp	r3, #0
 800292a:	d106      	bne.n	800293a <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800292c:	f107 0314 	add.w	r3, r7, #20
 8002930:	4618      	mov	r0, r3
 8002932:	f001 f859 	bl	80039e8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002936:	2301      	movs	r3, #1
 8002938:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800293a:	f001 ff15 	bl	8004768 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800293e:	f000 fda5 	bl	800348c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002942:	f001 fee1 	bl	8004708 <vPortEnterCritical>
 8002946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002948:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800294c:	b25b      	sxtb	r3, r3
 800294e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002952:	d103      	bne.n	800295c <xQueueGenericSend+0x1a0>
 8002954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800295c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002962:	b25b      	sxtb	r3, r3
 8002964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002968:	d103      	bne.n	8002972 <xQueueGenericSend+0x1b6>
 800296a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002972:	f001 fef9 	bl	8004768 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002976:	1d3a      	adds	r2, r7, #4
 8002978:	f107 0314 	add.w	r3, r7, #20
 800297c:	4611      	mov	r1, r2
 800297e:	4618      	mov	r0, r3
 8002980:	f001 f848 	bl	8003a14 <xTaskCheckForTimeOut>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d124      	bne.n	80029d4 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800298a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800298c:	f000 fb02 	bl	8002f94 <prvIsQueueFull>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d018      	beq.n	80029c8 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002998:	3310      	adds	r3, #16
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	4611      	mov	r1, r2
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 ff6a 	bl	8003878 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80029a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029a6:	f000 fa8d 	bl	8002ec4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80029aa:	f000 fd7d 	bl	80034a8 <xTaskResumeAll>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f47f af62 	bne.w	800287a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80029b6:	4b13      	ldr	r3, [pc, #76]	; (8002a04 <xQueueGenericSend+0x248>)
 80029b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	f3bf 8f4f 	dsb	sy
 80029c2:	f3bf 8f6f 	isb	sy
 80029c6:	e758      	b.n	800287a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80029c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029ca:	f000 fa7b 	bl	8002ec4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80029ce:	f000 fd6b 	bl	80034a8 <xTaskResumeAll>
 80029d2:	e752      	b.n	800287a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80029d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029d6:	f000 fa75 	bl	8002ec4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80029da:	f000 fd65 	bl	80034a8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80029de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e0:	4618      	mov	r0, r3
 80029e2:	f003 fca9 	bl	8006338 <SEGGER_SYSVIEW_ShrinkId>
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	460b      	mov	r3, r1
 80029f0:	4601      	mov	r1, r0
 80029f2:	205a      	movs	r0, #90	; 0x5a
 80029f4:	f002 ff8a 	bl	800590c <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80029f8:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3738      	adds	r7, #56	; 0x38
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	e000ed04 	.word	0xe000ed04

08002a08 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b090      	sub	sp, #64	; 0x40
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
 8002a14:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10a      	bne.n	8002a36 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a24:	f383 8811 	msr	BASEPRI, r3
 8002a28:	f3bf 8f6f 	isb	sy
 8002a2c:	f3bf 8f4f 	dsb	sy
 8002a30:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002a32:	bf00      	nop
 8002a34:	e7fe      	b.n	8002a34 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d103      	bne.n	8002a44 <xQueueGenericSendFromISR+0x3c>
 8002a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <xQueueGenericSendFromISR+0x40>
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <xQueueGenericSendFromISR+0x42>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10a      	bne.n	8002a64 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a52:	f383 8811 	msr	BASEPRI, r3
 8002a56:	f3bf 8f6f 	isb	sy
 8002a5a:	f3bf 8f4f 	dsb	sy
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002a60:	bf00      	nop
 8002a62:	e7fe      	b.n	8002a62 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d103      	bne.n	8002a72 <xQueueGenericSendFromISR+0x6a>
 8002a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d101      	bne.n	8002a76 <xQueueGenericSendFromISR+0x6e>
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <xQueueGenericSendFromISR+0x70>
 8002a76:	2300      	movs	r3, #0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10a      	bne.n	8002a92 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a80:	f383 8811 	msr	BASEPRI, r3
 8002a84:	f3bf 8f6f 	isb	sy
 8002a88:	f3bf 8f4f 	dsb	sy
 8002a8c:	623b      	str	r3, [r7, #32]
    }
 8002a8e:	bf00      	nop
 8002a90:	e7fe      	b.n	8002a90 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a92:	f001 ff23 	bl	80048dc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002a96:	f3ef 8211 	mrs	r2, BASEPRI
 8002a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9e:	f383 8811 	msr	BASEPRI, r3
 8002aa2:	f3bf 8f6f 	isb	sy
 8002aa6:	f3bf 8f4f 	dsb	sy
 8002aaa:	61fa      	str	r2, [r7, #28]
 8002aac:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002aae:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ab0:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d302      	bcc.n	8002ac4 <xQueueGenericSendFromISR+0xbc>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d148      	bne.n	8002b56 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad2:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f003 fc2e 	bl	8006338 <SEGGER_SYSVIEW_ShrinkId>
 8002adc:	4601      	mov	r1, r0
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	2060      	movs	r0, #96	; 0x60
 8002ae4:	f002 fe42 	bl	800576c <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	68b9      	ldr	r1, [r7, #8]
 8002aec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002aee:	f000 f959 	bl	8002da4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002af2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afa:	d112      	bne.n	8002b22 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d025      	beq.n	8002b50 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b06:	3324      	adds	r3, #36	; 0x24
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f000 ff07 	bl	800391c <xTaskRemoveFromEventList>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d01d      	beq.n	8002b50 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d01a      	beq.n	8002b50 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	e016      	b.n	8002b50 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002b22:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002b26:	2b7f      	cmp	r3, #127	; 0x7f
 8002b28:	d10a      	bne.n	8002b40 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2e:	f383 8811 	msr	BASEPRI, r3
 8002b32:	f3bf 8f6f 	isb	sy
 8002b36:	f3bf 8f4f 	dsb	sy
 8002b3a:	617b      	str	r3, [r7, #20]
    }
 8002b3c:	bf00      	nop
 8002b3e:	e7fe      	b.n	8002b3e <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002b40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b44:	3301      	adds	r3, #1
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	b25a      	sxtb	r2, r3
 8002b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002b50:	2301      	movs	r3, #1
 8002b52:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002b54:	e00b      	b.n	8002b6e <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f003 fbed 	bl	8006338 <SEGGER_SYSVIEW_ShrinkId>
 8002b5e:	4601      	mov	r1, r0
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	461a      	mov	r2, r3
 8002b64:	2060      	movs	r0, #96	; 0x60
 8002b66:	f002 fe01 	bl	800576c <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b70:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002b78:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3740      	adds	r7, #64	; 0x40
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002b84:	b590      	push	{r4, r7, lr}
 8002b86:	b08f      	sub	sp, #60	; 0x3c
 8002b88:	af02      	add	r7, sp, #8
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002b90:	2300      	movs	r3, #0
 8002b92:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10a      	bne.n	8002bb4 <xQueueReceive+0x30>
        __asm volatile
 8002b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba2:	f383 8811 	msr	BASEPRI, r3
 8002ba6:	f3bf 8f6f 	isb	sy
 8002baa:	f3bf 8f4f 	dsb	sy
 8002bae:	623b      	str	r3, [r7, #32]
    }
 8002bb0:	bf00      	nop
 8002bb2:	e7fe      	b.n	8002bb2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d103      	bne.n	8002bc2 <xQueueReceive+0x3e>
 8002bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <xQueueReceive+0x42>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <xQueueReceive+0x44>
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10a      	bne.n	8002be2 <xQueueReceive+0x5e>
        __asm volatile
 8002bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd0:	f383 8811 	msr	BASEPRI, r3
 8002bd4:	f3bf 8f6f 	isb	sy
 8002bd8:	f3bf 8f4f 	dsb	sy
 8002bdc:	61fb      	str	r3, [r7, #28]
    }
 8002bde:	bf00      	nop
 8002be0:	e7fe      	b.n	8002be0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002be2:	f001 f83b 	bl	8003c5c <xTaskGetSchedulerState>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d102      	bne.n	8002bf2 <xQueueReceive+0x6e>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <xQueueReceive+0x72>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <xQueueReceive+0x74>
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10a      	bne.n	8002c12 <xQueueReceive+0x8e>
        __asm volatile
 8002bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c00:	f383 8811 	msr	BASEPRI, r3
 8002c04:	f3bf 8f6f 	isb	sy
 8002c08:	f3bf 8f4f 	dsb	sy
 8002c0c:	61bb      	str	r3, [r7, #24]
    }
 8002c0e:	bf00      	nop
 8002c10:	e7fe      	b.n	8002c10 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002c12:	f001 fd79 	bl	8004708 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d02f      	beq.n	8002c82 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c22:	68b9      	ldr	r1, [r7, #8]
 8002c24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c26:	f000 f927 	bl	8002e78 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f003 fb83 	bl	8006338 <SEGGER_SYSVIEW_ShrinkId>
 8002c32:	4604      	mov	r4, r0
 8002c34:	2000      	movs	r0, #0
 8002c36:	f003 fb7f 	bl	8006338 <SEGGER_SYSVIEW_ShrinkId>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2101      	movs	r1, #1
 8002c40:	9100      	str	r1, [sp, #0]
 8002c42:	4621      	mov	r1, r4
 8002c44:	205c      	movs	r0, #92	; 0x5c
 8002c46:	f002 fe61 	bl	800590c <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	1e5a      	subs	r2, r3, #1
 8002c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c50:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00f      	beq.n	8002c7a <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5c:	3310      	adds	r3, #16
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 fe5c 	bl	800391c <xTaskRemoveFromEventList>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d007      	beq.n	8002c7a <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002c6a:	4b4d      	ldr	r3, [pc, #308]	; (8002da0 <xQueueReceive+0x21c>)
 8002c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	f3bf 8f4f 	dsb	sy
 8002c76:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002c7a:	f001 fd75 	bl	8004768 <vPortExitCritical>
                return pdPASS;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e08a      	b.n	8002d98 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d113      	bne.n	8002cb0 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002c88:	f001 fd6e 	bl	8004768 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f003 fb52 	bl	8006338 <SEGGER_SYSVIEW_ShrinkId>
 8002c94:	4604      	mov	r4, r0
 8002c96:	2000      	movs	r0, #0
 8002c98:	f003 fb4e 	bl	8006338 <SEGGER_SYSVIEW_ShrinkId>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	9100      	str	r1, [sp, #0]
 8002ca4:	4621      	mov	r1, r4
 8002ca6:	205c      	movs	r0, #92	; 0x5c
 8002ca8:	f002 fe30 	bl	800590c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002cac:	2300      	movs	r3, #0
 8002cae:	e073      	b.n	8002d98 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d106      	bne.n	8002cc4 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002cb6:	f107 0310 	add.w	r3, r7, #16
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 fe94 	bl	80039e8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002cc4:	f001 fd50 	bl	8004768 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002cc8:	f000 fbe0 	bl	800348c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002ccc:	f001 fd1c 	bl	8004708 <vPortEnterCritical>
 8002cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cd6:	b25b      	sxtb	r3, r3
 8002cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cdc:	d103      	bne.n	8002ce6 <xQueueReceive+0x162>
 8002cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cec:	b25b      	sxtb	r3, r3
 8002cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf2:	d103      	bne.n	8002cfc <xQueueReceive+0x178>
 8002cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cfc:	f001 fd34 	bl	8004768 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d00:	1d3a      	adds	r2, r7, #4
 8002d02:	f107 0310 	add.w	r3, r7, #16
 8002d06:	4611      	mov	r1, r2
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f000 fe83 	bl	8003a14 <xTaskCheckForTimeOut>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d124      	bne.n	8002d5e <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d16:	f000 f927 	bl	8002f68 <prvIsQueueEmpty>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d018      	beq.n	8002d52 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d22:	3324      	adds	r3, #36	; 0x24
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	4611      	mov	r1, r2
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f000 fda5 	bl	8003878 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002d2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d30:	f000 f8c8 	bl	8002ec4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002d34:	f000 fbb8 	bl	80034a8 <xTaskResumeAll>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f47f af69 	bne.w	8002c12 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002d40:	4b17      	ldr	r3, [pc, #92]	; (8002da0 <xQueueReceive+0x21c>)
 8002d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	f3bf 8f4f 	dsb	sy
 8002d4c:	f3bf 8f6f 	isb	sy
 8002d50:	e75f      	b.n	8002c12 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002d52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d54:	f000 f8b6 	bl	8002ec4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002d58:	f000 fba6 	bl	80034a8 <xTaskResumeAll>
 8002d5c:	e759      	b.n	8002c12 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002d5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d60:	f000 f8b0 	bl	8002ec4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002d64:	f000 fba0 	bl	80034a8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d6a:	f000 f8fd 	bl	8002f68 <prvIsQueueEmpty>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f43f af4e 	beq.w	8002c12 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f003 fadd 	bl	8006338 <SEGGER_SYSVIEW_ShrinkId>
 8002d7e:	4604      	mov	r4, r0
 8002d80:	2000      	movs	r0, #0
 8002d82:	f003 fad9 	bl	8006338 <SEGGER_SYSVIEW_ShrinkId>
 8002d86:	4602      	mov	r2, r0
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	9100      	str	r1, [sp, #0]
 8002d8e:	4621      	mov	r1, r4
 8002d90:	205c      	movs	r0, #92	; 0x5c
 8002d92:	f002 fdbb 	bl	800590c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002d96:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3734      	adds	r7, #52	; 0x34
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd90      	pop	{r4, r7, pc}
 8002da0:	e000ed04 	.word	0xe000ed04

08002da4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10d      	bne.n	8002dde <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d14d      	bne.n	8002e66 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 ff62 	bl	8003c98 <xTaskPriorityDisinherit>
 8002dd4:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	609a      	str	r2, [r3, #8]
 8002ddc:	e043      	b.n	8002e66 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d119      	bne.n	8002e18 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6858      	ldr	r0, [r3, #4]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	461a      	mov	r2, r3
 8002dee:	68b9      	ldr	r1, [r7, #8]
 8002df0:	f003 fd58 	bl	80068a4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	441a      	add	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d32b      	bcc.n	8002e66 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	605a      	str	r2, [r3, #4]
 8002e16:	e026      	b.n	8002e66 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	68d8      	ldr	r0, [r3, #12]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	461a      	mov	r2, r3
 8002e22:	68b9      	ldr	r1, [r7, #8]
 8002e24:	f003 fd3e 	bl	80068a4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	68da      	ldr	r2, [r3, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	425b      	negs	r3, r3
 8002e32:	441a      	add	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	68da      	ldr	r2, [r3, #12]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d207      	bcs.n	8002e54 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	425b      	negs	r3, r3
 8002e4e:	441a      	add	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d105      	bne.n	8002e66 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d002      	beq.n	8002e66 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1c5a      	adds	r2, r3, #1
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002e6e:	697b      	ldr	r3, [r7, #20]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d018      	beq.n	8002ebc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	441a      	add	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d303      	bcc.n	8002eac <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68d9      	ldr	r1, [r3, #12]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	6838      	ldr	r0, [r7, #0]
 8002eb8:	f003 fcf4 	bl	80068a4 <memcpy>
    }
}
 8002ebc:	bf00      	nop
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002ecc:	f001 fc1c 	bl	8004708 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ed6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ed8:	e011      	b.n	8002efe <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d012      	beq.n	8002f08 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	3324      	adds	r3, #36	; 0x24
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 fd18 	bl	800391c <xTaskRemoveFromEventList>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002ef2:	f000 fdf5 	bl	8003ae0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002ef6:	7bfb      	ldrb	r3, [r7, #15]
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	dce9      	bgt.n	8002eda <prvUnlockQueue+0x16>
 8002f06:	e000      	b.n	8002f0a <prvUnlockQueue+0x46>
                        break;
 8002f08:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	22ff      	movs	r2, #255	; 0xff
 8002f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002f12:	f001 fc29 	bl	8004768 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002f16:	f001 fbf7 	bl	8004708 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f20:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f22:	e011      	b.n	8002f48 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d012      	beq.n	8002f52 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3310      	adds	r3, #16
 8002f30:	4618      	mov	r0, r3
 8002f32:	f000 fcf3 	bl	800391c <xTaskRemoveFromEventList>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002f3c:	f000 fdd0 	bl	8003ae0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002f40:	7bbb      	ldrb	r3, [r7, #14]
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	dce9      	bgt.n	8002f24 <prvUnlockQueue+0x60>
 8002f50:	e000      	b.n	8002f54 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002f52:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	22ff      	movs	r2, #255	; 0xff
 8002f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002f5c:	f001 fc04 	bl	8004768 <vPortExitCritical>
}
 8002f60:	bf00      	nop
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002f70:	f001 fbca 	bl	8004708 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d102      	bne.n	8002f82 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	e001      	b.n	8002f86 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002f82:	2300      	movs	r3, #0
 8002f84:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002f86:	f001 fbef 	bl	8004768 <vPortExitCritical>

    return xReturn;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002f9c:	f001 fbb4 	bl	8004708 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d102      	bne.n	8002fb2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002fac:	2301      	movs	r3, #1
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	e001      	b.n	8002fb6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002fb6:	f001 fbd7 	bl	8004768 <vPortExitCritical>

    return xReturn;
 8002fba:	68fb      	ldr	r3, [r7, #12]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60fb      	str	r3, [r7, #12]
 8002fd2:	e01e      	b.n	8003012 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002fd4:	4a13      	ldr	r2, [pc, #76]	; (8003024 <vQueueAddToRegistry+0x60>)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d115      	bne.n	800300c <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002fe0:	4910      	ldr	r1, [pc, #64]	; (8003024 <vQueueAddToRegistry+0x60>)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002fea:	4a0e      	ldr	r2, [pc, #56]	; (8003024 <vQueueAddToRegistry+0x60>)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f003 f99d 	bl	8006338 <SEGGER_SYSVIEW_ShrinkId>
 8002ffe:	4601      	mov	r1, r0
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	461a      	mov	r2, r3
 8003004:	2071      	movs	r0, #113	; 0x71
 8003006:	f002 fbb1 	bl	800576c <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800300a:	e006      	b.n	800301a <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	3301      	adds	r3, #1
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2b07      	cmp	r3, #7
 8003016:	d9dd      	bls.n	8002fd4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003018:	bf00      	nop
 800301a:	bf00      	nop
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	20000098 	.word	0x20000098

08003028 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003038:	f001 fb66 	bl	8004708 <vPortEnterCritical>
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003042:	b25b      	sxtb	r3, r3
 8003044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003048:	d103      	bne.n	8003052 <vQueueWaitForMessageRestricted+0x2a>
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003058:	b25b      	sxtb	r3, r3
 800305a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305e:	d103      	bne.n	8003068 <vQueueWaitForMessageRestricted+0x40>
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003068:	f001 fb7e 	bl	8004768 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003070:	2b00      	cmp	r3, #0
 8003072:	d106      	bne.n	8003082 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	3324      	adds	r3, #36	; 0x24
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	68b9      	ldr	r1, [r7, #8]
 800307c:	4618      	mov	r0, r3
 800307e:	f000 fc1f 	bl	80038c0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003082:	6978      	ldr	r0, [r7, #20]
 8003084:	f7ff ff1e 	bl	8002ec4 <prvUnlockQueue>
    }
 8003088:	bf00      	nop
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003090:	b580      	push	{r7, lr}
 8003092:	b08c      	sub	sp, #48	; 0x30
 8003094:	af04      	add	r7, sp, #16
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	603b      	str	r3, [r7, #0]
 800309c:	4613      	mov	r3, r2
 800309e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80030a0:	88fb      	ldrh	r3, [r7, #6]
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4618      	mov	r0, r3
 80030a6:	f001 fc59 	bl	800495c <pvPortMalloc>
 80030aa:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00e      	beq.n	80030d0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80030b2:	2058      	movs	r0, #88	; 0x58
 80030b4:	f001 fc52 	bl	800495c <pvPortMalloc>
 80030b8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d003      	beq.n	80030c8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	631a      	str	r2, [r3, #48]	; 0x30
 80030c6:	e005      	b.n	80030d4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80030c8:	6978      	ldr	r0, [r7, #20]
 80030ca:	f001 fd27 	bl	8004b1c <vPortFree>
 80030ce:	e001      	b.n	80030d4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80030d0:	2300      	movs	r3, #0
 80030d2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d013      	beq.n	8003102 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80030da:	88fa      	ldrh	r2, [r7, #6]
 80030dc:	2300      	movs	r3, #0
 80030de:	9303      	str	r3, [sp, #12]
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	9302      	str	r3, [sp, #8]
 80030e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e6:	9301      	str	r3, [sp, #4]
 80030e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	68b9      	ldr	r1, [r7, #8]
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 f80e 	bl	8003112 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80030f6:	69f8      	ldr	r0, [r7, #28]
 80030f8:	f000 f8a2 	bl	8003240 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80030fc:	2301      	movs	r3, #1
 80030fe:	61bb      	str	r3, [r7, #24]
 8003100:	e002      	b.n	8003108 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003102:	f04f 33ff 	mov.w	r3, #4294967295
 8003106:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003108:	69bb      	ldr	r3, [r7, #24]
    }
 800310a:	4618      	mov	r0, r3
 800310c:	3720      	adds	r7, #32
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b088      	sub	sp, #32
 8003116:	af00      	add	r7, sp, #0
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	607a      	str	r2, [r7, #4]
 800311e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003122:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	461a      	mov	r2, r3
 800312a:	21a5      	movs	r1, #165	; 0xa5
 800312c:	f003 fbc8 	bl	80068c0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003132:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800313a:	3b01      	subs	r3, #1
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	f023 0307 	bic.w	r3, r3, #7
 8003148:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00a      	beq.n	800316a <prvInitialiseNewTask+0x58>
        __asm volatile
 8003154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003158:	f383 8811 	msr	BASEPRI, r3
 800315c:	f3bf 8f6f 	isb	sy
 8003160:	f3bf 8f4f 	dsb	sy
 8003164:	617b      	str	r3, [r7, #20]
    }
 8003166:	bf00      	nop
 8003168:	e7fe      	b.n	8003168 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d01f      	beq.n	80031b0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003170:	2300      	movs	r3, #0
 8003172:	61fb      	str	r3, [r7, #28]
 8003174:	e012      	b.n	800319c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	4413      	add	r3, r2
 800317c:	7819      	ldrb	r1, [r3, #0]
 800317e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	4413      	add	r3, r2
 8003184:	3334      	adds	r3, #52	; 0x34
 8003186:	460a      	mov	r2, r1
 8003188:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	4413      	add	r3, r2
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d006      	beq.n	80031a4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	3301      	adds	r3, #1
 800319a:	61fb      	str	r3, [r7, #28]
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	2b09      	cmp	r3, #9
 80031a0:	d9e9      	bls.n	8003176 <prvInitialiseNewTask+0x64>
 80031a2:	e000      	b.n	80031a6 <prvInitialiseNewTask+0x94>
            {
                break;
 80031a4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80031a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80031ae:	e003      	b.n	80031b8 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80031b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80031b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d901      	bls.n	80031c2 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80031be:	2304      	movs	r3, #4
 80031c0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80031c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031c6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80031c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031cc:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80031ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d0:	2200      	movs	r2, #0
 80031d2:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80031d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d6:	3304      	adds	r3, #4
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff f96b 	bl	80024b4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80031de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e0:	3318      	adds	r3, #24
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff f966 	bl	80024b4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80031e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031ec:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f0:	f1c3 0205 	rsb	r2, r3, #5
 80031f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80031f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031fc:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80031fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003200:	3350      	adds	r3, #80	; 0x50
 8003202:	2204      	movs	r2, #4
 8003204:	2100      	movs	r1, #0
 8003206:	4618      	mov	r0, r3
 8003208:	f003 fb5a 	bl	80068c0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800320c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320e:	3354      	adds	r3, #84	; 0x54
 8003210:	2201      	movs	r2, #1
 8003212:	2100      	movs	r1, #0
 8003214:	4618      	mov	r0, r3
 8003216:	f003 fb53 	bl	80068c0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	68f9      	ldr	r1, [r7, #12]
 800321e:	69b8      	ldr	r0, [r7, #24]
 8003220:	f001 f944 	bl	80044ac <pxPortInitialiseStack>
 8003224:	4602      	mov	r2, r0
 8003226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003228:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800322a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322c:	2b00      	cmp	r3, #0
 800322e:	d002      	beq.n	8003236 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003234:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003236:	bf00      	nop
 8003238:	3720      	adds	r7, #32
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
	...

08003240 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003240:	b5b0      	push	{r4, r5, r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af02      	add	r7, sp, #8
 8003246:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003248:	f001 fa5e 	bl	8004708 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800324c:	4b3b      	ldr	r3, [pc, #236]	; (800333c <prvAddNewTaskToReadyList+0xfc>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	3301      	adds	r3, #1
 8003252:	4a3a      	ldr	r2, [pc, #232]	; (800333c <prvAddNewTaskToReadyList+0xfc>)
 8003254:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003256:	4b3a      	ldr	r3, [pc, #232]	; (8003340 <prvAddNewTaskToReadyList+0x100>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d109      	bne.n	8003272 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800325e:	4a38      	ldr	r2, [pc, #224]	; (8003340 <prvAddNewTaskToReadyList+0x100>)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003264:	4b35      	ldr	r3, [pc, #212]	; (800333c <prvAddNewTaskToReadyList+0xfc>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d110      	bne.n	800328e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800326c:	f000 fc5c 	bl	8003b28 <prvInitialiseTaskLists>
 8003270:	e00d      	b.n	800328e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003272:	4b34      	ldr	r3, [pc, #208]	; (8003344 <prvAddNewTaskToReadyList+0x104>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d109      	bne.n	800328e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800327a:	4b31      	ldr	r3, [pc, #196]	; (8003340 <prvAddNewTaskToReadyList+0x100>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003284:	429a      	cmp	r2, r3
 8003286:	d802      	bhi.n	800328e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003288:	4a2d      	ldr	r2, [pc, #180]	; (8003340 <prvAddNewTaskToReadyList+0x100>)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800328e:	4b2e      	ldr	r3, [pc, #184]	; (8003348 <prvAddNewTaskToReadyList+0x108>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	3301      	adds	r3, #1
 8003294:	4a2c      	ldr	r2, [pc, #176]	; (8003348 <prvAddNewTaskToReadyList+0x108>)
 8003296:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003298:	4b2b      	ldr	r3, [pc, #172]	; (8003348 <prvAddNewTaskToReadyList+0x108>)
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d016      	beq.n	80032d4 <prvAddNewTaskToReadyList+0x94>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f002 ff1f 	bl	80060ec <SEGGER_SYSVIEW_OnTaskCreate>
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032be:	461d      	mov	r5, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	461c      	mov	r4, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	1ae3      	subs	r3, r4, r3
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	462b      	mov	r3, r5
 80032d0:	f003 fa2a 	bl	8006728 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f002 ff8c 	bl	80061f4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e0:	2201      	movs	r2, #1
 80032e2:	409a      	lsls	r2, r3
 80032e4:	4b19      	ldr	r3, [pc, #100]	; (800334c <prvAddNewTaskToReadyList+0x10c>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	4a18      	ldr	r2, [pc, #96]	; (800334c <prvAddNewTaskToReadyList+0x10c>)
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f2:	4613      	mov	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4a15      	ldr	r2, [pc, #84]	; (8003350 <prvAddNewTaskToReadyList+0x110>)
 80032fc:	441a      	add	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	3304      	adds	r3, #4
 8003302:	4619      	mov	r1, r3
 8003304:	4610      	mov	r0, r2
 8003306:	f7ff f8e2 	bl	80024ce <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800330a:	f001 fa2d 	bl	8004768 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800330e:	4b0d      	ldr	r3, [pc, #52]	; (8003344 <prvAddNewTaskToReadyList+0x104>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00e      	beq.n	8003334 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003316:	4b0a      	ldr	r3, [pc, #40]	; (8003340 <prvAddNewTaskToReadyList+0x100>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	429a      	cmp	r2, r3
 8003322:	d207      	bcs.n	8003334 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003324:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <prvAddNewTaskToReadyList+0x114>)
 8003326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	f3bf 8f4f 	dsb	sy
 8003330:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003334:	bf00      	nop
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bdb0      	pop	{r4, r5, r7, pc}
 800333c:	200001b0 	.word	0x200001b0
 8003340:	200000d8 	.word	0x200000d8
 8003344:	200001bc 	.word	0x200001bc
 8003348:	200001cc 	.word	0x200001cc
 800334c:	200001b8 	.word	0x200001b8
 8003350:	200000dc 	.word	0x200000dc
 8003354:	e000ed04 	.word	0xe000ed04

08003358 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003360:	2300      	movs	r3, #0
 8003362:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d01b      	beq.n	80033a2 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800336a:	4b15      	ldr	r3, [pc, #84]	; (80033c0 <vTaskDelay+0x68>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00a      	beq.n	8003388 <vTaskDelay+0x30>
        __asm volatile
 8003372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003376:	f383 8811 	msr	BASEPRI, r3
 800337a:	f3bf 8f6f 	isb	sy
 800337e:	f3bf 8f4f 	dsb	sy
 8003382:	60bb      	str	r3, [r7, #8]
    }
 8003384:	bf00      	nop
 8003386:	e7fe      	b.n	8003386 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8003388:	f000 f880 	bl	800348c <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	2023      	movs	r0, #35	; 0x23
 8003390:	f002 f9b0 	bl	80056f4 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003394:	2100      	movs	r1, #0
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 fcfe 	bl	8003d98 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800339c:	f000 f884 	bl	80034a8 <xTaskResumeAll>
 80033a0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d107      	bne.n	80033b8 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 80033a8:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <vTaskDelay+0x6c>)
 80033aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	f3bf 8f4f 	dsb	sy
 80033b4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80033b8:	bf00      	nop
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	200001d8 	.word	0x200001d8
 80033c4:	e000ed04 	.word	0xe000ed04

080033c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80033ce:	4b27      	ldr	r3, [pc, #156]	; (800346c <vTaskStartScheduler+0xa4>)
 80033d0:	9301      	str	r3, [sp, #4]
 80033d2:	2300      	movs	r3, #0
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	2300      	movs	r3, #0
 80033d8:	2282      	movs	r2, #130	; 0x82
 80033da:	4925      	ldr	r1, [pc, #148]	; (8003470 <vTaskStartScheduler+0xa8>)
 80033dc:	4825      	ldr	r0, [pc, #148]	; (8003474 <vTaskStartScheduler+0xac>)
 80033de:	f7ff fe57 	bl	8003090 <xTaskCreate>
 80033e2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d102      	bne.n	80033f0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80033ea:	f000 fd4d 	bl	8003e88 <xTimerCreateTimerTask>
 80033ee:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d124      	bne.n	8003440 <vTaskStartScheduler+0x78>
        __asm volatile
 80033f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fa:	f383 8811 	msr	BASEPRI, r3
 80033fe:	f3bf 8f6f 	isb	sy
 8003402:	f3bf 8f4f 	dsb	sy
 8003406:	60bb      	str	r3, [r7, #8]
    }
 8003408:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800340a:	4b1b      	ldr	r3, [pc, #108]	; (8003478 <vTaskStartScheduler+0xb0>)
 800340c:	f04f 32ff 	mov.w	r2, #4294967295
 8003410:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003412:	4b1a      	ldr	r3, [pc, #104]	; (800347c <vTaskStartScheduler+0xb4>)
 8003414:	2201      	movs	r2, #1
 8003416:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003418:	4b19      	ldr	r3, [pc, #100]	; (8003480 <vTaskStartScheduler+0xb8>)
 800341a:	2200      	movs	r2, #0
 800341c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800341e:	4b19      	ldr	r3, [pc, #100]	; (8003484 <vTaskStartScheduler+0xbc>)
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	4b12      	ldr	r3, [pc, #72]	; (800346c <vTaskStartScheduler+0xa4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d102      	bne.n	8003430 <vTaskStartScheduler+0x68>
 800342a:	f002 fe43 	bl	80060b4 <SEGGER_SYSVIEW_OnIdle>
 800342e:	e004      	b.n	800343a <vTaskStartScheduler+0x72>
 8003430:	4b14      	ldr	r3, [pc, #80]	; (8003484 <vTaskStartScheduler+0xbc>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f002 fe9b 	bl	8006170 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800343a:	f001 f8c3 	bl	80045c4 <xPortStartScheduler>
 800343e:	e00e      	b.n	800345e <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003446:	d10a      	bne.n	800345e <vTaskStartScheduler+0x96>
        __asm volatile
 8003448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344c:	f383 8811 	msr	BASEPRI, r3
 8003450:	f3bf 8f6f 	isb	sy
 8003454:	f3bf 8f4f 	dsb	sy
 8003458:	607b      	str	r3, [r7, #4]
    }
 800345a:	bf00      	nop
 800345c:	e7fe      	b.n	800345c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800345e:	4b0a      	ldr	r3, [pc, #40]	; (8003488 <vTaskStartScheduler+0xc0>)
 8003460:	681b      	ldr	r3, [r3, #0]
}
 8003462:	bf00      	nop
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	200001d4 	.word	0x200001d4
 8003470:	08006900 	.word	0x08006900
 8003474:	08003af9 	.word	0x08003af9
 8003478:	200001d0 	.word	0x200001d0
 800347c:	200001bc 	.word	0x200001bc
 8003480:	200001b4 	.word	0x200001b4
 8003484:	200000d8 	.word	0x200000d8
 8003488:	20000024 	.word	0x20000024

0800348c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003490:	4b04      	ldr	r3, [pc, #16]	; (80034a4 <vTaskSuspendAll+0x18>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	3301      	adds	r3, #1
 8003496:	4a03      	ldr	r2, [pc, #12]	; (80034a4 <vTaskSuspendAll+0x18>)
 8003498:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800349a:	bf00      	nop
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	200001d8 	.word	0x200001d8

080034a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80034ae:	2300      	movs	r3, #0
 80034b0:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80034b6:	4b43      	ldr	r3, [pc, #268]	; (80035c4 <xTaskResumeAll+0x11c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10a      	bne.n	80034d4 <xTaskResumeAll+0x2c>
        __asm volatile
 80034be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c2:	f383 8811 	msr	BASEPRI, r3
 80034c6:	f3bf 8f6f 	isb	sy
 80034ca:	f3bf 8f4f 	dsb	sy
 80034ce:	603b      	str	r3, [r7, #0]
    }
 80034d0:	bf00      	nop
 80034d2:	e7fe      	b.n	80034d2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80034d4:	f001 f918 	bl	8004708 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80034d8:	4b3a      	ldr	r3, [pc, #232]	; (80035c4 <xTaskResumeAll+0x11c>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3b01      	subs	r3, #1
 80034de:	4a39      	ldr	r2, [pc, #228]	; (80035c4 <xTaskResumeAll+0x11c>)
 80034e0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034e2:	4b38      	ldr	r3, [pc, #224]	; (80035c4 <xTaskResumeAll+0x11c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d165      	bne.n	80035b6 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80034ea:	4b37      	ldr	r3, [pc, #220]	; (80035c8 <xTaskResumeAll+0x120>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d061      	beq.n	80035b6 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034f2:	e032      	b.n	800355a <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034f4:	4b35      	ldr	r3, [pc, #212]	; (80035cc <xTaskResumeAll+0x124>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	3318      	adds	r3, #24
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff f841 	bl	8002588 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	3304      	adds	r3, #4
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff f83c 	bl	8002588 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4618      	mov	r0, r3
 8003514:	f002 fe6e 	bl	80061f4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351c:	2201      	movs	r2, #1
 800351e:	409a      	lsls	r2, r3
 8003520:	4b2b      	ldr	r3, [pc, #172]	; (80035d0 <xTaskResumeAll+0x128>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4313      	orrs	r3, r2
 8003526:	4a2a      	ldr	r2, [pc, #168]	; (80035d0 <xTaskResumeAll+0x128>)
 8003528:	6013      	str	r3, [r2, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800352e:	4613      	mov	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4a27      	ldr	r2, [pc, #156]	; (80035d4 <xTaskResumeAll+0x12c>)
 8003538:	441a      	add	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	3304      	adds	r3, #4
 800353e:	4619      	mov	r1, r3
 8003540:	4610      	mov	r0, r2
 8003542:	f7fe ffc4 	bl	80024ce <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800354a:	4b23      	ldr	r3, [pc, #140]	; (80035d8 <xTaskResumeAll+0x130>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003550:	429a      	cmp	r2, r3
 8003552:	d302      	bcc.n	800355a <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8003554:	4b21      	ldr	r3, [pc, #132]	; (80035dc <xTaskResumeAll+0x134>)
 8003556:	2201      	movs	r2, #1
 8003558:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800355a:	4b1c      	ldr	r3, [pc, #112]	; (80035cc <xTaskResumeAll+0x124>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1c8      	bne.n	80034f4 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003568:	f000 fb5c 	bl	8003c24 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800356c:	4b1c      	ldr	r3, [pc, #112]	; (80035e0 <xTaskResumeAll+0x138>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d010      	beq.n	800359a <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003578:	f000 f858 	bl	800362c <xTaskIncrementTick>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d002      	beq.n	8003588 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8003582:	4b16      	ldr	r3, [pc, #88]	; (80035dc <xTaskResumeAll+0x134>)
 8003584:	2201      	movs	r2, #1
 8003586:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3b01      	subs	r3, #1
 800358c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1f1      	bne.n	8003578 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8003594:	4b12      	ldr	r3, [pc, #72]	; (80035e0 <xTaskResumeAll+0x138>)
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800359a:	4b10      	ldr	r3, [pc, #64]	; (80035dc <xTaskResumeAll+0x134>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d009      	beq.n	80035b6 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80035a2:	2301      	movs	r3, #1
 80035a4:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80035a6:	4b0f      	ldr	r3, [pc, #60]	; (80035e4 <xTaskResumeAll+0x13c>)
 80035a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	f3bf 8f4f 	dsb	sy
 80035b2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80035b6:	f001 f8d7 	bl	8004768 <vPortExitCritical>

    return xAlreadyYielded;
 80035ba:	68bb      	ldr	r3, [r7, #8]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	200001d8 	.word	0x200001d8
 80035c8:	200001b0 	.word	0x200001b0
 80035cc:	20000170 	.word	0x20000170
 80035d0:	200001b8 	.word	0x200001b8
 80035d4:	200000dc 	.word	0x200000dc
 80035d8:	200000d8 	.word	0x200000d8
 80035dc:	200001c4 	.word	0x200001c4
 80035e0:	200001c0 	.word	0x200001c0
 80035e4:	e000ed04 	.word	0xe000ed04

080035e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80035ee:	4b05      	ldr	r3, [pc, #20]	; (8003604 <xTaskGetTickCount+0x1c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80035f4:	687b      	ldr	r3, [r7, #4]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	200001b4 	.word	0x200001b4

08003608 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800360e:	f001 f965 	bl	80048dc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003612:	2300      	movs	r3, #0
 8003614:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003616:	4b04      	ldr	r3, [pc, #16]	; (8003628 <xTaskGetTickCountFromISR+0x20>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800361c:	683b      	ldr	r3, [r7, #0]
}
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	200001b4 	.word	0x200001b4

0800362c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003632:	2300      	movs	r3, #0
 8003634:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003636:	4b50      	ldr	r3, [pc, #320]	; (8003778 <xTaskIncrementTick+0x14c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	f040 8092 	bne.w	8003764 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003640:	4b4e      	ldr	r3, [pc, #312]	; (800377c <xTaskIncrementTick+0x150>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	3301      	adds	r3, #1
 8003646:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003648:	4a4c      	ldr	r2, [pc, #304]	; (800377c <xTaskIncrementTick+0x150>)
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d120      	bne.n	8003696 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003654:	4b4a      	ldr	r3, [pc, #296]	; (8003780 <xTaskIncrementTick+0x154>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00a      	beq.n	8003674 <xTaskIncrementTick+0x48>
        __asm volatile
 800365e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003662:	f383 8811 	msr	BASEPRI, r3
 8003666:	f3bf 8f6f 	isb	sy
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	603b      	str	r3, [r7, #0]
    }
 8003670:	bf00      	nop
 8003672:	e7fe      	b.n	8003672 <xTaskIncrementTick+0x46>
 8003674:	4b42      	ldr	r3, [pc, #264]	; (8003780 <xTaskIncrementTick+0x154>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	60fb      	str	r3, [r7, #12]
 800367a:	4b42      	ldr	r3, [pc, #264]	; (8003784 <xTaskIncrementTick+0x158>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a40      	ldr	r2, [pc, #256]	; (8003780 <xTaskIncrementTick+0x154>)
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	4a40      	ldr	r2, [pc, #256]	; (8003784 <xTaskIncrementTick+0x158>)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6013      	str	r3, [r2, #0]
 8003688:	4b3f      	ldr	r3, [pc, #252]	; (8003788 <xTaskIncrementTick+0x15c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	3301      	adds	r3, #1
 800368e:	4a3e      	ldr	r2, [pc, #248]	; (8003788 <xTaskIncrementTick+0x15c>)
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	f000 fac7 	bl	8003c24 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003696:	4b3d      	ldr	r3, [pc, #244]	; (800378c <xTaskIncrementTick+0x160>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	429a      	cmp	r2, r3
 800369e:	d34c      	bcc.n	800373a <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036a0:	4b37      	ldr	r3, [pc, #220]	; (8003780 <xTaskIncrementTick+0x154>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d104      	bne.n	80036b4 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036aa:	4b38      	ldr	r3, [pc, #224]	; (800378c <xTaskIncrementTick+0x160>)
 80036ac:	f04f 32ff 	mov.w	r2, #4294967295
 80036b0:	601a      	str	r2, [r3, #0]
                    break;
 80036b2:	e042      	b.n	800373a <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036b4:	4b32      	ldr	r3, [pc, #200]	; (8003780 <xTaskIncrementTick+0x154>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d203      	bcs.n	80036d4 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80036cc:	4a2f      	ldr	r2, [pc, #188]	; (800378c <xTaskIncrementTick+0x160>)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80036d2:	e032      	b.n	800373a <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	3304      	adds	r3, #4
 80036d8:	4618      	mov	r0, r3
 80036da:	f7fe ff55 	bl	8002588 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d004      	beq.n	80036f0 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	3318      	adds	r3, #24
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7fe ff4c 	bl	8002588 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f002 fd7e 	bl	80061f4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	2201      	movs	r2, #1
 80036fe:	409a      	lsls	r2, r3
 8003700:	4b23      	ldr	r3, [pc, #140]	; (8003790 <xTaskIncrementTick+0x164>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4313      	orrs	r3, r2
 8003706:	4a22      	ldr	r2, [pc, #136]	; (8003790 <xTaskIncrementTick+0x164>)
 8003708:	6013      	str	r3, [r2, #0]
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800370e:	4613      	mov	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4a1f      	ldr	r2, [pc, #124]	; (8003794 <xTaskIncrementTick+0x168>)
 8003718:	441a      	add	r2, r3
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	3304      	adds	r3, #4
 800371e:	4619      	mov	r1, r3
 8003720:	4610      	mov	r0, r2
 8003722:	f7fe fed4 	bl	80024ce <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800372a:	4b1b      	ldr	r3, [pc, #108]	; (8003798 <xTaskIncrementTick+0x16c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003730:	429a      	cmp	r2, r3
 8003732:	d3b5      	bcc.n	80036a0 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8003734:	2301      	movs	r3, #1
 8003736:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003738:	e7b2      	b.n	80036a0 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800373a:	4b17      	ldr	r3, [pc, #92]	; (8003798 <xTaskIncrementTick+0x16c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003740:	4914      	ldr	r1, [pc, #80]	; (8003794 <xTaskIncrementTick+0x168>)
 8003742:	4613      	mov	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	440b      	add	r3, r1
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d901      	bls.n	8003756 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8003752:	2301      	movs	r3, #1
 8003754:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003756:	4b11      	ldr	r3, [pc, #68]	; (800379c <xTaskIncrementTick+0x170>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d007      	beq.n	800376e <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 800375e:	2301      	movs	r3, #1
 8003760:	617b      	str	r3, [r7, #20]
 8003762:	e004      	b.n	800376e <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003764:	4b0e      	ldr	r3, [pc, #56]	; (80037a0 <xTaskIncrementTick+0x174>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	3301      	adds	r3, #1
 800376a:	4a0d      	ldr	r2, [pc, #52]	; (80037a0 <xTaskIncrementTick+0x174>)
 800376c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800376e:	697b      	ldr	r3, [r7, #20]
}
 8003770:	4618      	mov	r0, r3
 8003772:	3718      	adds	r7, #24
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	200001d8 	.word	0x200001d8
 800377c:	200001b4 	.word	0x200001b4
 8003780:	20000168 	.word	0x20000168
 8003784:	2000016c 	.word	0x2000016c
 8003788:	200001c8 	.word	0x200001c8
 800378c:	200001d0 	.word	0x200001d0
 8003790:	200001b8 	.word	0x200001b8
 8003794:	200000dc 	.word	0x200000dc
 8003798:	200000d8 	.word	0x200000d8
 800379c:	200001c4 	.word	0x200001c4
 80037a0:	200001c0 	.word	0x200001c0

080037a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80037aa:	4b2d      	ldr	r3, [pc, #180]	; (8003860 <vTaskSwitchContext+0xbc>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80037b2:	4b2c      	ldr	r3, [pc, #176]	; (8003864 <vTaskSwitchContext+0xc0>)
 80037b4:	2201      	movs	r2, #1
 80037b6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80037b8:	e04d      	b.n	8003856 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80037ba:	4b2a      	ldr	r3, [pc, #168]	; (8003864 <vTaskSwitchContext+0xc0>)
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037c0:	4b29      	ldr	r3, [pc, #164]	; (8003868 <vTaskSwitchContext+0xc4>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	fab3 f383 	clz	r3, r3
 80037cc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80037ce:	7afb      	ldrb	r3, [r7, #11]
 80037d0:	f1c3 031f 	rsb	r3, r3, #31
 80037d4:	617b      	str	r3, [r7, #20]
 80037d6:	4925      	ldr	r1, [pc, #148]	; (800386c <vTaskSwitchContext+0xc8>)
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	4613      	mov	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	440b      	add	r3, r1
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10a      	bne.n	8003800 <vTaskSwitchContext+0x5c>
        __asm volatile
 80037ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ee:	f383 8811 	msr	BASEPRI, r3
 80037f2:	f3bf 8f6f 	isb	sy
 80037f6:	f3bf 8f4f 	dsb	sy
 80037fa:	607b      	str	r3, [r7, #4]
    }
 80037fc:	bf00      	nop
 80037fe:	e7fe      	b.n	80037fe <vTaskSwitchContext+0x5a>
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	4613      	mov	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4413      	add	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4a18      	ldr	r2, [pc, #96]	; (800386c <vTaskSwitchContext+0xc8>)
 800380c:	4413      	add	r3, r2
 800380e:	613b      	str	r3, [r7, #16]
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	605a      	str	r2, [r3, #4]
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	3308      	adds	r3, #8
 8003822:	429a      	cmp	r2, r3
 8003824:	d104      	bne.n	8003830 <vTaskSwitchContext+0x8c>
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	605a      	str	r2, [r3, #4]
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	4a0e      	ldr	r2, [pc, #56]	; (8003870 <vTaskSwitchContext+0xcc>)
 8003838:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800383a:	4b0d      	ldr	r3, [pc, #52]	; (8003870 <vTaskSwitchContext+0xcc>)
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	4b0d      	ldr	r3, [pc, #52]	; (8003874 <vTaskSwitchContext+0xd0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	429a      	cmp	r2, r3
 8003844:	d102      	bne.n	800384c <vTaskSwitchContext+0xa8>
 8003846:	f002 fc35 	bl	80060b4 <SEGGER_SYSVIEW_OnIdle>
}
 800384a:	e004      	b.n	8003856 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 800384c:	4b08      	ldr	r3, [pc, #32]	; (8003870 <vTaskSwitchContext+0xcc>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4618      	mov	r0, r3
 8003852:	f002 fc8d 	bl	8006170 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003856:	bf00      	nop
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	200001d8 	.word	0x200001d8
 8003864:	200001c4 	.word	0x200001c4
 8003868:	200001b8 	.word	0x200001b8
 800386c:	200000dc 	.word	0x200000dc
 8003870:	200000d8 	.word	0x200000d8
 8003874:	200001d4 	.word	0x200001d4

08003878 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10a      	bne.n	800389e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388c:	f383 8811 	msr	BASEPRI, r3
 8003890:	f3bf 8f6f 	isb	sy
 8003894:	f3bf 8f4f 	dsb	sy
 8003898:	60fb      	str	r3, [r7, #12]
    }
 800389a:	bf00      	nop
 800389c:	e7fe      	b.n	800389c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800389e:	4b07      	ldr	r3, [pc, #28]	; (80038bc <vTaskPlaceOnEventList+0x44>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	3318      	adds	r3, #24
 80038a4:	4619      	mov	r1, r3
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7fe fe35 	bl	8002516 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80038ac:	2101      	movs	r1, #1
 80038ae:	6838      	ldr	r0, [r7, #0]
 80038b0:	f000 fa72 	bl	8003d98 <prvAddCurrentTaskToDelayedList>
}
 80038b4:	bf00      	nop
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	200000d8 	.word	0x200000d8

080038c0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10a      	bne.n	80038e8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80038d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d6:	f383 8811 	msr	BASEPRI, r3
 80038da:	f3bf 8f6f 	isb	sy
 80038de:	f3bf 8f4f 	dsb	sy
 80038e2:	617b      	str	r3, [r7, #20]
    }
 80038e4:	bf00      	nop
 80038e6:	e7fe      	b.n	80038e6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038e8:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <vTaskPlaceOnEventListRestricted+0x58>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3318      	adds	r3, #24
 80038ee:	4619      	mov	r1, r3
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f7fe fdec 	bl	80024ce <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80038fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003900:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003902:	2024      	movs	r0, #36	; 0x24
 8003904:	f001 fed8 	bl	80056b8 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	68b8      	ldr	r0, [r7, #8]
 800390c:	f000 fa44 	bl	8003d98 <prvAddCurrentTaskToDelayedList>
    }
 8003910:	bf00      	nop
 8003912:	3718      	adds	r7, #24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	200000d8 	.word	0x200000d8

0800391c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10a      	bne.n	8003948 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003936:	f383 8811 	msr	BASEPRI, r3
 800393a:	f3bf 8f6f 	isb	sy
 800393e:	f3bf 8f4f 	dsb	sy
 8003942:	60fb      	str	r3, [r7, #12]
    }
 8003944:	bf00      	nop
 8003946:	e7fe      	b.n	8003946 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	3318      	adds	r3, #24
 800394c:	4618      	mov	r0, r3
 800394e:	f7fe fe1b 	bl	8002588 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003952:	4b1f      	ldr	r3, [pc, #124]	; (80039d0 <xTaskRemoveFromEventList+0xb4>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d120      	bne.n	800399c <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	3304      	adds	r3, #4
 800395e:	4618      	mov	r0, r3
 8003960:	f7fe fe12 	bl	8002588 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	4618      	mov	r0, r3
 8003968:	f002 fc44 	bl	80061f4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003970:	2201      	movs	r2, #1
 8003972:	409a      	lsls	r2, r3
 8003974:	4b17      	ldr	r3, [pc, #92]	; (80039d4 <xTaskRemoveFromEventList+0xb8>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4313      	orrs	r3, r2
 800397a:	4a16      	ldr	r2, [pc, #88]	; (80039d4 <xTaskRemoveFromEventList+0xb8>)
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003982:	4613      	mov	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4413      	add	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4a13      	ldr	r2, [pc, #76]	; (80039d8 <xTaskRemoveFromEventList+0xbc>)
 800398c:	441a      	add	r2, r3
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	3304      	adds	r3, #4
 8003992:	4619      	mov	r1, r3
 8003994:	4610      	mov	r0, r2
 8003996:	f7fe fd9a 	bl	80024ce <vListInsertEnd>
 800399a:	e005      	b.n	80039a8 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	3318      	adds	r3, #24
 80039a0:	4619      	mov	r1, r3
 80039a2:	480e      	ldr	r0, [pc, #56]	; (80039dc <xTaskRemoveFromEventList+0xc0>)
 80039a4:	f7fe fd93 	bl	80024ce <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ac:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <xTaskRemoveFromEventList+0xc4>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d905      	bls.n	80039c2 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80039b6:	2301      	movs	r3, #1
 80039b8:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80039ba:	4b0a      	ldr	r3, [pc, #40]	; (80039e4 <xTaskRemoveFromEventList+0xc8>)
 80039bc:	2201      	movs	r2, #1
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	e001      	b.n	80039c6 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 80039c2:	2300      	movs	r3, #0
 80039c4:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80039c6:	697b      	ldr	r3, [r7, #20]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3718      	adds	r7, #24
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	200001d8 	.word	0x200001d8
 80039d4:	200001b8 	.word	0x200001b8
 80039d8:	200000dc 	.word	0x200000dc
 80039dc:	20000170 	.word	0x20000170
 80039e0:	200000d8 	.word	0x200000d8
 80039e4:	200001c4 	.word	0x200001c4

080039e8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80039f0:	4b06      	ldr	r3, [pc, #24]	; (8003a0c <vTaskInternalSetTimeOutState+0x24>)
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80039f8:	4b05      	ldr	r3, [pc, #20]	; (8003a10 <vTaskInternalSetTimeOutState+0x28>)
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	605a      	str	r2, [r3, #4]
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr
 8003a0c:	200001c8 	.word	0x200001c8
 8003a10:	200001b4 	.word	0x200001b4

08003a14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b088      	sub	sp, #32
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10a      	bne.n	8003a3a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a28:	f383 8811 	msr	BASEPRI, r3
 8003a2c:	f3bf 8f6f 	isb	sy
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	613b      	str	r3, [r7, #16]
    }
 8003a36:	bf00      	nop
 8003a38:	e7fe      	b.n	8003a38 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10a      	bne.n	8003a56 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a44:	f383 8811 	msr	BASEPRI, r3
 8003a48:	f3bf 8f6f 	isb	sy
 8003a4c:	f3bf 8f4f 	dsb	sy
 8003a50:	60fb      	str	r3, [r7, #12]
    }
 8003a52:	bf00      	nop
 8003a54:	e7fe      	b.n	8003a54 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003a56:	f000 fe57 	bl	8004708 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003a5a:	4b1f      	ldr	r3, [pc, #124]	; (8003ad8 <xTaskCheckForTimeOut+0xc4>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a72:	d102      	bne.n	8003a7a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003a74:	2300      	movs	r3, #0
 8003a76:	61fb      	str	r3, [r7, #28]
 8003a78:	e026      	b.n	8003ac8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	4b17      	ldr	r3, [pc, #92]	; (8003adc <xTaskCheckForTimeOut+0xc8>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d00a      	beq.n	8003a9c <xTaskCheckForTimeOut+0x88>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d305      	bcc.n	8003a9c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003a90:	2301      	movs	r3, #1
 8003a92:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]
 8003a9a:	e015      	b.n	8003ac8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d20b      	bcs.n	8003abe <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	1ad2      	subs	r2, r2, r3
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7ff ff98 	bl	80039e8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	61fb      	str	r3, [r7, #28]
 8003abc:	e004      	b.n	8003ac8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003ac8:	f000 fe4e 	bl	8004768 <vPortExitCritical>

    return xReturn;
 8003acc:	69fb      	ldr	r3, [r7, #28]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3720      	adds	r7, #32
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	200001b4 	.word	0x200001b4
 8003adc:	200001c8 	.word	0x200001c8

08003ae0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003ae4:	4b03      	ldr	r3, [pc, #12]	; (8003af4 <vTaskMissedYield+0x14>)
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]
}
 8003aea:	bf00      	nop
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	200001c4 	.word	0x200001c4

08003af8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003b00:	f000 f852 	bl	8003ba8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b04:	4b06      	ldr	r3, [pc, #24]	; (8003b20 <prvIdleTask+0x28>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d9f9      	bls.n	8003b00 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003b0c:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <prvIdleTask+0x2c>)
 8003b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	f3bf 8f4f 	dsb	sy
 8003b18:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003b1c:	e7f0      	b.n	8003b00 <prvIdleTask+0x8>
 8003b1e:	bf00      	nop
 8003b20:	200000dc 	.word	0x200000dc
 8003b24:	e000ed04 	.word	0xe000ed04

08003b28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b2e:	2300      	movs	r3, #0
 8003b30:	607b      	str	r3, [r7, #4]
 8003b32:	e00c      	b.n	8003b4e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	4a12      	ldr	r2, [pc, #72]	; (8003b88 <prvInitialiseTaskLists+0x60>)
 8003b40:	4413      	add	r3, r2
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fe fc96 	bl	8002474 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	607b      	str	r3, [r7, #4]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b04      	cmp	r3, #4
 8003b52:	d9ef      	bls.n	8003b34 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003b54:	480d      	ldr	r0, [pc, #52]	; (8003b8c <prvInitialiseTaskLists+0x64>)
 8003b56:	f7fe fc8d 	bl	8002474 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003b5a:	480d      	ldr	r0, [pc, #52]	; (8003b90 <prvInitialiseTaskLists+0x68>)
 8003b5c:	f7fe fc8a 	bl	8002474 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003b60:	480c      	ldr	r0, [pc, #48]	; (8003b94 <prvInitialiseTaskLists+0x6c>)
 8003b62:	f7fe fc87 	bl	8002474 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003b66:	480c      	ldr	r0, [pc, #48]	; (8003b98 <prvInitialiseTaskLists+0x70>)
 8003b68:	f7fe fc84 	bl	8002474 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003b6c:	480b      	ldr	r0, [pc, #44]	; (8003b9c <prvInitialiseTaskLists+0x74>)
 8003b6e:	f7fe fc81 	bl	8002474 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003b72:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <prvInitialiseTaskLists+0x78>)
 8003b74:	4a05      	ldr	r2, [pc, #20]	; (8003b8c <prvInitialiseTaskLists+0x64>)
 8003b76:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b78:	4b0a      	ldr	r3, [pc, #40]	; (8003ba4 <prvInitialiseTaskLists+0x7c>)
 8003b7a:	4a05      	ldr	r2, [pc, #20]	; (8003b90 <prvInitialiseTaskLists+0x68>)
 8003b7c:	601a      	str	r2, [r3, #0]
}
 8003b7e:	bf00      	nop
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	200000dc 	.word	0x200000dc
 8003b8c:	20000140 	.word	0x20000140
 8003b90:	20000154 	.word	0x20000154
 8003b94:	20000170 	.word	0x20000170
 8003b98:	20000184 	.word	0x20000184
 8003b9c:	2000019c 	.word	0x2000019c
 8003ba0:	20000168 	.word	0x20000168
 8003ba4:	2000016c 	.word	0x2000016c

08003ba8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bae:	e019      	b.n	8003be4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003bb0:	f000 fdaa 	bl	8004708 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bb4:	4b10      	ldr	r3, [pc, #64]	; (8003bf8 <prvCheckTasksWaitingTermination+0x50>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	3304      	adds	r3, #4
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7fe fce1 	bl	8002588 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003bc6:	4b0d      	ldr	r3, [pc, #52]	; (8003bfc <prvCheckTasksWaitingTermination+0x54>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	4a0b      	ldr	r2, [pc, #44]	; (8003bfc <prvCheckTasksWaitingTermination+0x54>)
 8003bce:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003bd0:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <prvCheckTasksWaitingTermination+0x58>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	4a0a      	ldr	r2, [pc, #40]	; (8003c00 <prvCheckTasksWaitingTermination+0x58>)
 8003bd8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003bda:	f000 fdc5 	bl	8004768 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f810 	bl	8003c04 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003be4:	4b06      	ldr	r3, [pc, #24]	; (8003c00 <prvCheckTasksWaitingTermination+0x58>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1e1      	bne.n	8003bb0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003bec:	bf00      	nop
 8003bee:	bf00      	nop
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	20000184 	.word	0x20000184
 8003bfc:	200001b0 	.word	0x200001b0
 8003c00:	20000198 	.word	0x20000198

08003c04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 ff83 	bl	8004b1c <vPortFree>
                vPortFree( pxTCB );
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 ff80 	bl	8004b1c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003c1c:	bf00      	nop
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c28:	4b0a      	ldr	r3, [pc, #40]	; (8003c54 <prvResetNextTaskUnblockTime+0x30>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d104      	bne.n	8003c3c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003c32:	4b09      	ldr	r3, [pc, #36]	; (8003c58 <prvResetNextTaskUnblockTime+0x34>)
 8003c34:	f04f 32ff 	mov.w	r2, #4294967295
 8003c38:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003c3a:	e005      	b.n	8003c48 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c3c:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <prvResetNextTaskUnblockTime+0x30>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a04      	ldr	r2, [pc, #16]	; (8003c58 <prvResetNextTaskUnblockTime+0x34>)
 8003c46:	6013      	str	r3, [r2, #0]
}
 8003c48:	bf00      	nop
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	20000168 	.word	0x20000168
 8003c58:	200001d0 	.word	0x200001d0

08003c5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003c62:	4b0b      	ldr	r3, [pc, #44]	; (8003c90 <xTaskGetSchedulerState+0x34>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d102      	bne.n	8003c70 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	607b      	str	r3, [r7, #4]
 8003c6e:	e008      	b.n	8003c82 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c70:	4b08      	ldr	r3, [pc, #32]	; (8003c94 <xTaskGetSchedulerState+0x38>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d102      	bne.n	8003c7e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003c78:	2302      	movs	r3, #2
 8003c7a:	607b      	str	r3, [r7, #4]
 8003c7c:	e001      	b.n	8003c82 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003c82:	687b      	ldr	r3, [r7, #4]
    }
 8003c84:	4618      	mov	r0, r3
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	200001bc 	.word	0x200001bc
 8003c94:	200001d8 	.word	0x200001d8

08003c98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d068      	beq.n	8003d80 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003cae:	4b37      	ldr	r3, [pc, #220]	; (8003d8c <xTaskPriorityDisinherit+0xf4>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d00a      	beq.n	8003cce <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbc:	f383 8811 	msr	BASEPRI, r3
 8003cc0:	f3bf 8f6f 	isb	sy
 8003cc4:	f3bf 8f4f 	dsb	sy
 8003cc8:	60fb      	str	r3, [r7, #12]
    }
 8003cca:	bf00      	nop
 8003ccc:	e7fe      	b.n	8003ccc <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10a      	bne.n	8003cec <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cda:	f383 8811 	msr	BASEPRI, r3
 8003cde:	f3bf 8f6f 	isb	sy
 8003ce2:	f3bf 8f4f 	dsb	sy
 8003ce6:	60bb      	str	r3, [r7, #8]
    }
 8003ce8:	bf00      	nop
 8003cea:	e7fe      	b.n	8003cea <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf0:	1e5a      	subs	r2, r3, #1
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d03e      	beq.n	8003d80 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d13a      	bne.n	8003d80 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7fe fc3a 	bl	8002588 <uxListRemove>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10a      	bne.n	8003d30 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1e:	2201      	movs	r2, #1
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	43da      	mvns	r2, r3
 8003d26:	4b1a      	ldr	r3, [pc, #104]	; (8003d90 <xTaskPriorityDisinherit+0xf8>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	4a18      	ldr	r2, [pc, #96]	; (8003d90 <xTaskPriorityDisinherit+0xf8>)
 8003d2e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4619      	mov	r1, r3
 8003d34:	204a      	movs	r0, #74	; 0x4a
 8003d36:	f001 fcdd 	bl	80056f4 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d46:	f1c3 0205 	rsb	r2, r3, #5
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d52:	2201      	movs	r2, #1
 8003d54:	409a      	lsls	r2, r3
 8003d56:	4b0e      	ldr	r3, [pc, #56]	; (8003d90 <xTaskPriorityDisinherit+0xf8>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	4a0c      	ldr	r2, [pc, #48]	; (8003d90 <xTaskPriorityDisinherit+0xf8>)
 8003d5e:	6013      	str	r3, [r2, #0]
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d64:	4613      	mov	r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4413      	add	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4a09      	ldr	r2, [pc, #36]	; (8003d94 <xTaskPriorityDisinherit+0xfc>)
 8003d6e:	441a      	add	r2, r3
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	3304      	adds	r3, #4
 8003d74:	4619      	mov	r1, r3
 8003d76:	4610      	mov	r0, r2
 8003d78:	f7fe fba9 	bl	80024ce <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003d80:	697b      	ldr	r3, [r7, #20]
    }
 8003d82:	4618      	mov	r0, r3
 8003d84:	3718      	adds	r7, #24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	200000d8 	.word	0x200000d8
 8003d90:	200001b8 	.word	0x200001b8
 8003d94:	200000dc 	.word	0x200000dc

08003d98 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003da2:	4b32      	ldr	r3, [pc, #200]	; (8003e6c <prvAddCurrentTaskToDelayedList+0xd4>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003da8:	4b31      	ldr	r3, [pc, #196]	; (8003e70 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3304      	adds	r3, #4
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fe fbea 	bl	8002588 <uxListRemove>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10b      	bne.n	8003dd2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003dba:	4b2d      	ldr	r3, [pc, #180]	; (8003e70 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	43da      	mvns	r2, r3
 8003dc8:	4b2a      	ldr	r3, [pc, #168]	; (8003e74 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	4a29      	ldr	r2, [pc, #164]	; (8003e74 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003dd0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd8:	d110      	bne.n	8003dfc <prvAddCurrentTaskToDelayedList+0x64>
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00d      	beq.n	8003dfc <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003de0:	4b23      	ldr	r3, [pc, #140]	; (8003e70 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	211b      	movs	r1, #27
 8003de6:	4618      	mov	r0, r3
 8003de8:	f002 fa46 	bl	8006278 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003dec:	4b20      	ldr	r3, [pc, #128]	; (8003e70 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	3304      	adds	r3, #4
 8003df2:	4619      	mov	r1, r3
 8003df4:	4820      	ldr	r0, [pc, #128]	; (8003e78 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003df6:	f7fe fb6a 	bl	80024ce <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003dfa:	e032      	b.n	8003e62 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4413      	add	r3, r2
 8003e02:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e04:	4b1a      	ldr	r3, [pc, #104]	; (8003e70 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d20f      	bcs.n	8003e34 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003e14:	4b16      	ldr	r3, [pc, #88]	; (8003e70 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2104      	movs	r1, #4
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f002 fa2c 	bl	8006278 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e20:	4b16      	ldr	r3, [pc, #88]	; (8003e7c <prvAddCurrentTaskToDelayedList+0xe4>)
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	4b12      	ldr	r3, [pc, #72]	; (8003e70 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3304      	adds	r3, #4
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	f7fe fb72 	bl	8002516 <vListInsert>
}
 8003e32:	e016      	b.n	8003e62 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003e34:	4b0e      	ldr	r3, [pc, #56]	; (8003e70 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2104      	movs	r1, #4
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f002 fa1c 	bl	8006278 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e40:	4b0f      	ldr	r3, [pc, #60]	; (8003e80 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	4b0a      	ldr	r3, [pc, #40]	; (8003e70 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	4610      	mov	r0, r2
 8003e4e:	f7fe fb62 	bl	8002516 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003e52:	4b0c      	ldr	r3, [pc, #48]	; (8003e84 <prvAddCurrentTaskToDelayedList+0xec>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d202      	bcs.n	8003e62 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003e5c:	4a09      	ldr	r2, [pc, #36]	; (8003e84 <prvAddCurrentTaskToDelayedList+0xec>)
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	6013      	str	r3, [r2, #0]
}
 8003e62:	bf00      	nop
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	200001b4 	.word	0x200001b4
 8003e70:	200000d8 	.word	0x200000d8
 8003e74:	200001b8 	.word	0x200001b8
 8003e78:	2000019c 	.word	0x2000019c
 8003e7c:	2000016c 	.word	0x2000016c
 8003e80:	20000168 	.word	0x20000168
 8003e84:	200001d0 	.word	0x200001d0

08003e88 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003e92:	f000 fad5 	bl	8004440 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003e96:	4b11      	ldr	r3, [pc, #68]	; (8003edc <xTimerCreateTimerTask+0x54>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00b      	beq.n	8003eb6 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003e9e:	4b10      	ldr	r3, [pc, #64]	; (8003ee0 <xTimerCreateTimerTask+0x58>)
 8003ea0:	9301      	str	r3, [sp, #4]
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003eac:	490d      	ldr	r1, [pc, #52]	; (8003ee4 <xTimerCreateTimerTask+0x5c>)
 8003eae:	480e      	ldr	r0, [pc, #56]	; (8003ee8 <xTimerCreateTimerTask+0x60>)
 8003eb0:	f7ff f8ee 	bl	8003090 <xTaskCreate>
 8003eb4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10a      	bne.n	8003ed2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec0:	f383 8811 	msr	BASEPRI, r3
 8003ec4:	f3bf 8f6f 	isb	sy
 8003ec8:	f3bf 8f4f 	dsb	sy
 8003ecc:	603b      	str	r3, [r7, #0]
    }
 8003ece:	bf00      	nop
 8003ed0:	e7fe      	b.n	8003ed0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003ed2:	687b      	ldr	r3, [r7, #4]
    }
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	2000020c 	.word	0x2000020c
 8003ee0:	20000210 	.word	0x20000210
 8003ee4:	08006908 	.word	0x08006908
 8003ee8:	08004021 	.word	0x08004021

08003eec <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b08a      	sub	sp, #40	; 0x28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
 8003ef8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003efa:	2300      	movs	r3, #0
 8003efc:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10a      	bne.n	8003f1a <xTimerGenericCommand+0x2e>
        __asm volatile
 8003f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f08:	f383 8811 	msr	BASEPRI, r3
 8003f0c:	f3bf 8f6f 	isb	sy
 8003f10:	f3bf 8f4f 	dsb	sy
 8003f14:	623b      	str	r3, [r7, #32]
    }
 8003f16:	bf00      	nop
 8003f18:	e7fe      	b.n	8003f18 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003f1a:	4b1a      	ldr	r3, [pc, #104]	; (8003f84 <xTimerGenericCommand+0x98>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d02a      	beq.n	8003f78 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2b05      	cmp	r3, #5
 8003f32:	dc18      	bgt.n	8003f66 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003f34:	f7ff fe92 	bl	8003c5c <xTaskGetSchedulerState>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d109      	bne.n	8003f52 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003f3e:	4b11      	ldr	r3, [pc, #68]	; (8003f84 <xTimerGenericCommand+0x98>)
 8003f40:	6818      	ldr	r0, [r3, #0]
 8003f42:	f107 0114 	add.w	r1, r7, #20
 8003f46:	2300      	movs	r3, #0
 8003f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f4a:	f7fe fc37 	bl	80027bc <xQueueGenericSend>
 8003f4e:	6278      	str	r0, [r7, #36]	; 0x24
 8003f50:	e012      	b.n	8003f78 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003f52:	4b0c      	ldr	r3, [pc, #48]	; (8003f84 <xTimerGenericCommand+0x98>)
 8003f54:	6818      	ldr	r0, [r3, #0]
 8003f56:	f107 0114 	add.w	r1, r7, #20
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f7fe fc2d 	bl	80027bc <xQueueGenericSend>
 8003f62:	6278      	str	r0, [r7, #36]	; 0x24
 8003f64:	e008      	b.n	8003f78 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003f66:	4b07      	ldr	r3, [pc, #28]	; (8003f84 <xTimerGenericCommand+0x98>)
 8003f68:	6818      	ldr	r0, [r3, #0]
 8003f6a:	f107 0114 	add.w	r1, r7, #20
 8003f6e:	2300      	movs	r3, #0
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	f7fe fd49 	bl	8002a08 <xQueueGenericSendFromISR>
 8003f76:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3728      	adds	r7, #40	; 0x28
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	2000020c 	.word	0x2000020c

08003f88 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b088      	sub	sp, #32
 8003f8c:	af02      	add	r7, sp, #8
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f92:	4b22      	ldr	r3, [pc, #136]	; (800401c <prvProcessExpiredTimer+0x94>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fe faf1 	bl	8002588 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fac:	f003 0304 	and.w	r3, r3, #4
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d022      	beq.n	8003ffa <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	699a      	ldr	r2, [r3, #24]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	18d1      	adds	r1, r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	6978      	ldr	r0, [r7, #20]
 8003fc2:	f000 f8d1 	bl	8004168 <prvInsertTimerInActiveList>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d01f      	beq.n	800400c <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003fcc:	2300      	movs	r3, #0
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	6978      	ldr	r0, [r7, #20]
 8003fd8:	f7ff ff88 	bl	8003eec <xTimerGenericCommand>
 8003fdc:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d113      	bne.n	800400c <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe8:	f383 8811 	msr	BASEPRI, r3
 8003fec:	f3bf 8f6f 	isb	sy
 8003ff0:	f3bf 8f4f 	dsb	sy
 8003ff4:	60fb      	str	r3, [r7, #12]
    }
 8003ff6:	bf00      	nop
 8003ff8:	e7fe      	b.n	8003ff8 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004000:	f023 0301 	bic.w	r3, r3, #1
 8004004:	b2da      	uxtb	r2, r3
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	6978      	ldr	r0, [r7, #20]
 8004012:	4798      	blx	r3
    }
 8004014:	bf00      	nop
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	20000204 	.word	0x20000204

08004020 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004028:	f107 0308 	add.w	r3, r7, #8
 800402c:	4618      	mov	r0, r3
 800402e:	f000 f857 	bl	80040e0 <prvGetNextExpireTime>
 8004032:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	4619      	mov	r1, r3
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f000 f803 	bl	8004044 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800403e:	f000 f8d5 	bl	80041ec <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004042:	e7f1      	b.n	8004028 <prvTimerTask+0x8>

08004044 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800404e:	f7ff fa1d 	bl	800348c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004052:	f107 0308 	add.w	r3, r7, #8
 8004056:	4618      	mov	r0, r3
 8004058:	f000 f866 	bl	8004128 <prvSampleTimeNow>
 800405c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d130      	bne.n	80040c6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10a      	bne.n	8004080 <prvProcessTimerOrBlockTask+0x3c>
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	429a      	cmp	r2, r3
 8004070:	d806      	bhi.n	8004080 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004072:	f7ff fa19 	bl	80034a8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004076:	68f9      	ldr	r1, [r7, #12]
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7ff ff85 	bl	8003f88 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800407e:	e024      	b.n	80040ca <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d008      	beq.n	8004098 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004086:	4b13      	ldr	r3, [pc, #76]	; (80040d4 <prvProcessTimerOrBlockTask+0x90>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <prvProcessTimerOrBlockTask+0x50>
 8004090:	2301      	movs	r3, #1
 8004092:	e000      	b.n	8004096 <prvProcessTimerOrBlockTask+0x52>
 8004094:	2300      	movs	r3, #0
 8004096:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004098:	4b0f      	ldr	r3, [pc, #60]	; (80040d8 <prvProcessTimerOrBlockTask+0x94>)
 800409a:	6818      	ldr	r0, [r3, #0]
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	4619      	mov	r1, r3
 80040a6:	f7fe ffbf 	bl	8003028 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80040aa:	f7ff f9fd 	bl	80034a8 <xTaskResumeAll>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10a      	bne.n	80040ca <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80040b4:	4b09      	ldr	r3, [pc, #36]	; (80040dc <prvProcessTimerOrBlockTask+0x98>)
 80040b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	f3bf 8f4f 	dsb	sy
 80040c0:	f3bf 8f6f 	isb	sy
    }
 80040c4:	e001      	b.n	80040ca <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80040c6:	f7ff f9ef 	bl	80034a8 <xTaskResumeAll>
    }
 80040ca:	bf00      	nop
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	20000208 	.word	0x20000208
 80040d8:	2000020c 	.word	0x2000020c
 80040dc:	e000ed04 	.word	0xe000ed04

080040e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80040e8:	4b0e      	ldr	r3, [pc, #56]	; (8004124 <prvGetNextExpireTime+0x44>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <prvGetNextExpireTime+0x16>
 80040f2:	2201      	movs	r2, #1
 80040f4:	e000      	b.n	80040f8 <prvGetNextExpireTime+0x18>
 80040f6:	2200      	movs	r2, #0
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d105      	bne.n	8004110 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004104:	4b07      	ldr	r3, [pc, #28]	; (8004124 <prvGetNextExpireTime+0x44>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	e001      	b.n	8004114 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004114:	68fb      	ldr	r3, [r7, #12]
    }
 8004116:	4618      	mov	r0, r3
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	20000204 	.word	0x20000204

08004128 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004130:	f7ff fa5a 	bl	80035e8 <xTaskGetTickCount>
 8004134:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004136:	4b0b      	ldr	r3, [pc, #44]	; (8004164 <prvSampleTimeNow+0x3c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	429a      	cmp	r2, r3
 800413e:	d205      	bcs.n	800414c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004140:	f000 f91a 	bl	8004378 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	601a      	str	r2, [r3, #0]
 800414a:	e002      	b.n	8004152 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004152:	4a04      	ldr	r2, [pc, #16]	; (8004164 <prvSampleTimeNow+0x3c>)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004158:	68fb      	ldr	r3, [r7, #12]
    }
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	20000214 	.word	0x20000214

08004168 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
 8004174:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004176:	2300      	movs	r3, #0
 8004178:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	429a      	cmp	r2, r3
 800418c:	d812      	bhi.n	80041b4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	1ad2      	subs	r2, r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	429a      	cmp	r2, r3
 800419a:	d302      	bcc.n	80041a2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800419c:	2301      	movs	r3, #1
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	e01b      	b.n	80041da <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80041a2:	4b10      	ldr	r3, [pc, #64]	; (80041e4 <prvInsertTimerInActiveList+0x7c>)
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	3304      	adds	r3, #4
 80041aa:	4619      	mov	r1, r3
 80041ac:	4610      	mov	r0, r2
 80041ae:	f7fe f9b2 	bl	8002516 <vListInsert>
 80041b2:	e012      	b.n	80041da <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d206      	bcs.n	80041ca <prvInsertTimerInActiveList+0x62>
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d302      	bcc.n	80041ca <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80041c4:	2301      	movs	r3, #1
 80041c6:	617b      	str	r3, [r7, #20]
 80041c8:	e007      	b.n	80041da <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80041ca:	4b07      	ldr	r3, [pc, #28]	; (80041e8 <prvInsertTimerInActiveList+0x80>)
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	3304      	adds	r3, #4
 80041d2:	4619      	mov	r1, r3
 80041d4:	4610      	mov	r0, r2
 80041d6:	f7fe f99e 	bl	8002516 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80041da:	697b      	ldr	r3, [r7, #20]
    }
 80041dc:	4618      	mov	r0, r3
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	20000208 	.word	0x20000208
 80041e8:	20000204 	.word	0x20000204

080041ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b08c      	sub	sp, #48	; 0x30
 80041f0:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80041f2:	e0ae      	b.n	8004352 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f2c0 80aa 	blt.w	8004350 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d004      	beq.n	8004212 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420a:	3304      	adds	r3, #4
 800420c:	4618      	mov	r0, r3
 800420e:	f7fe f9bb 	bl	8002588 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004212:	1d3b      	adds	r3, r7, #4
 8004214:	4618      	mov	r0, r3
 8004216:	f7ff ff87 	bl	8004128 <prvSampleTimeNow>
 800421a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2b09      	cmp	r3, #9
 8004220:	f200 8097 	bhi.w	8004352 <prvProcessReceivedCommands+0x166>
 8004224:	a201      	add	r2, pc, #4	; (adr r2, 800422c <prvProcessReceivedCommands+0x40>)
 8004226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422a:	bf00      	nop
 800422c:	08004255 	.word	0x08004255
 8004230:	08004255 	.word	0x08004255
 8004234:	08004255 	.word	0x08004255
 8004238:	080042c9 	.word	0x080042c9
 800423c:	080042dd 	.word	0x080042dd
 8004240:	08004327 	.word	0x08004327
 8004244:	08004255 	.word	0x08004255
 8004248:	08004255 	.word	0x08004255
 800424c:	080042c9 	.word	0x080042c9
 8004250:	080042dd 	.word	0x080042dd
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800425a:	f043 0301 	orr.w	r3, r3, #1
 800425e:	b2da      	uxtb	r2, r3
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	18d1      	adds	r1, r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6a3a      	ldr	r2, [r7, #32]
 8004272:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004274:	f7ff ff78 	bl	8004168 <prvInsertTimerInActiveList>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d069      	beq.n	8004352 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004284:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	2b00      	cmp	r3, #0
 8004292:	d05e      	beq.n	8004352 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	441a      	add	r2, r3
 800429c:	2300      	movs	r3, #0
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	2300      	movs	r3, #0
 80042a2:	2100      	movs	r1, #0
 80042a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042a6:	f7ff fe21 	bl	8003eec <xTimerGenericCommand>
 80042aa:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d14f      	bne.n	8004352 <prvProcessReceivedCommands+0x166>
        __asm volatile
 80042b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b6:	f383 8811 	msr	BASEPRI, r3
 80042ba:	f3bf 8f6f 	isb	sy
 80042be:	f3bf 8f4f 	dsb	sy
 80042c2:	61bb      	str	r3, [r7, #24]
    }
 80042c4:	bf00      	nop
 80042c6:	e7fe      	b.n	80042c6 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80042c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042ce:	f023 0301 	bic.w	r3, r3, #1
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80042da:	e03a      	b.n	8004352 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042e2:	f043 0301 	orr.w	r3, r3, #1
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10a      	bne.n	8004312 <prvProcessReceivedCommands+0x126>
        __asm volatile
 80042fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004300:	f383 8811 	msr	BASEPRI, r3
 8004304:	f3bf 8f6f 	isb	sy
 8004308:	f3bf 8f4f 	dsb	sy
 800430c:	617b      	str	r3, [r7, #20]
    }
 800430e:	bf00      	nop
 8004310:	e7fe      	b.n	8004310 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	699a      	ldr	r2, [r3, #24]
 8004316:	6a3b      	ldr	r3, [r7, #32]
 8004318:	18d1      	adds	r1, r2, r3
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	6a3a      	ldr	r2, [r7, #32]
 800431e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004320:	f7ff ff22 	bl	8004168 <prvInsertTimerInActiveList>
                        break;
 8004324:	e015      	b.n	8004352 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d103      	bne.n	800433c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8004334:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004336:	f000 fbf1 	bl	8004b1c <vPortFree>
 800433a:	e00a      	b.n	8004352 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004342:	f023 0301 	bic.w	r3, r3, #1
 8004346:	b2da      	uxtb	r2, r3
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800434e:	e000      	b.n	8004352 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004350:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004352:	4b08      	ldr	r3, [pc, #32]	; (8004374 <prvProcessReceivedCommands+0x188>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f107 0108 	add.w	r1, r7, #8
 800435a:	2200      	movs	r2, #0
 800435c:	4618      	mov	r0, r3
 800435e:	f7fe fc11 	bl	8002b84 <xQueueReceive>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	f47f af45 	bne.w	80041f4 <prvProcessReceivedCommands+0x8>
        }
    }
 800436a:	bf00      	nop
 800436c:	bf00      	nop
 800436e:	3728      	adds	r7, #40	; 0x28
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	2000020c 	.word	0x2000020c

08004378 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004378:	b580      	push	{r7, lr}
 800437a:	b088      	sub	sp, #32
 800437c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800437e:	e048      	b.n	8004412 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004380:	4b2d      	ldr	r3, [pc, #180]	; (8004438 <prvSwitchTimerLists+0xc0>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800438a:	4b2b      	ldr	r3, [pc, #172]	; (8004438 <prvSwitchTimerLists+0xc0>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	3304      	adds	r3, #4
 8004398:	4618      	mov	r0, r3
 800439a:	f7fe f8f5 	bl	8002588 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d02e      	beq.n	8004412 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	4413      	add	r3, r2
 80043bc:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d90e      	bls.n	80043e4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80043d2:	4b19      	ldr	r3, [pc, #100]	; (8004438 <prvSwitchTimerLists+0xc0>)
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	3304      	adds	r3, #4
 80043da:	4619      	mov	r1, r3
 80043dc:	4610      	mov	r0, r2
 80043de:	f7fe f89a 	bl	8002516 <vListInsert>
 80043e2:	e016      	b.n	8004412 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80043e4:	2300      	movs	r3, #0
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	2300      	movs	r3, #0
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	2100      	movs	r1, #0
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f7ff fd7c 	bl	8003eec <xTimerGenericCommand>
 80043f4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10a      	bne.n	8004412 <prvSwitchTimerLists+0x9a>
        __asm volatile
 80043fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004400:	f383 8811 	msr	BASEPRI, r3
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	603b      	str	r3, [r7, #0]
    }
 800440e:	bf00      	nop
 8004410:	e7fe      	b.n	8004410 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004412:	4b09      	ldr	r3, [pc, #36]	; (8004438 <prvSwitchTimerLists+0xc0>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1b1      	bne.n	8004380 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800441c:	4b06      	ldr	r3, [pc, #24]	; (8004438 <prvSwitchTimerLists+0xc0>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004422:	4b06      	ldr	r3, [pc, #24]	; (800443c <prvSwitchTimerLists+0xc4>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a04      	ldr	r2, [pc, #16]	; (8004438 <prvSwitchTimerLists+0xc0>)
 8004428:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800442a:	4a04      	ldr	r2, [pc, #16]	; (800443c <prvSwitchTimerLists+0xc4>)
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	6013      	str	r3, [r2, #0]
    }
 8004430:	bf00      	nop
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	20000204 	.word	0x20000204
 800443c:	20000208 	.word	0x20000208

08004440 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004444:	f000 f960 	bl	8004708 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004448:	4b12      	ldr	r3, [pc, #72]	; (8004494 <prvCheckForValidListAndQueue+0x54>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d11d      	bne.n	800448c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004450:	4811      	ldr	r0, [pc, #68]	; (8004498 <prvCheckForValidListAndQueue+0x58>)
 8004452:	f7fe f80f 	bl	8002474 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004456:	4811      	ldr	r0, [pc, #68]	; (800449c <prvCheckForValidListAndQueue+0x5c>)
 8004458:	f7fe f80c 	bl	8002474 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800445c:	4b10      	ldr	r3, [pc, #64]	; (80044a0 <prvCheckForValidListAndQueue+0x60>)
 800445e:	4a0e      	ldr	r2, [pc, #56]	; (8004498 <prvCheckForValidListAndQueue+0x58>)
 8004460:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004462:	4b10      	ldr	r3, [pc, #64]	; (80044a4 <prvCheckForValidListAndQueue+0x64>)
 8004464:	4a0d      	ldr	r2, [pc, #52]	; (800449c <prvCheckForValidListAndQueue+0x5c>)
 8004466:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004468:	2200      	movs	r2, #0
 800446a:	210c      	movs	r1, #12
 800446c:	200a      	movs	r0, #10
 800446e:	f7fe f91d 	bl	80026ac <xQueueGenericCreate>
 8004472:	4603      	mov	r3, r0
 8004474:	4a07      	ldr	r2, [pc, #28]	; (8004494 <prvCheckForValidListAndQueue+0x54>)
 8004476:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004478:	4b06      	ldr	r3, [pc, #24]	; (8004494 <prvCheckForValidListAndQueue+0x54>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d005      	beq.n	800448c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004480:	4b04      	ldr	r3, [pc, #16]	; (8004494 <prvCheckForValidListAndQueue+0x54>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4908      	ldr	r1, [pc, #32]	; (80044a8 <prvCheckForValidListAndQueue+0x68>)
 8004486:	4618      	mov	r0, r3
 8004488:	f7fe fd9c 	bl	8002fc4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800448c:	f000 f96c 	bl	8004768 <vPortExitCritical>
    }
 8004490:	bf00      	nop
 8004492:	bd80      	pop	{r7, pc}
 8004494:	2000020c 	.word	0x2000020c
 8004498:	200001dc 	.word	0x200001dc
 800449c:	200001f0 	.word	0x200001f0
 80044a0:	20000204 	.word	0x20000204
 80044a4:	20000208 	.word	0x20000208
 80044a8:	08006910 	.word	0x08006910

080044ac <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	3b04      	subs	r3, #4
 80044bc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044c4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	3b04      	subs	r3, #4
 80044ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	f023 0201 	bic.w	r2, r3, #1
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	3b04      	subs	r3, #4
 80044da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80044dc:	4a0c      	ldr	r2, [pc, #48]	; (8004510 <pxPortInitialiseStack+0x64>)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	3b14      	subs	r3, #20
 80044e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	3b04      	subs	r3, #4
 80044f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f06f 0202 	mvn.w	r2, #2
 80044fa:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	3b20      	subs	r3, #32
 8004500:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004502:	68fb      	ldr	r3, [r7, #12]
}
 8004504:	4618      	mov	r0, r3
 8004506:	3714      	adds	r7, #20
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr
 8004510:	08004515 	.word	0x08004515

08004514 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800451a:	2300      	movs	r3, #0
 800451c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800451e:	4b12      	ldr	r3, [pc, #72]	; (8004568 <prvTaskExitError+0x54>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004526:	d00a      	beq.n	800453e <prvTaskExitError+0x2a>
        __asm volatile
 8004528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452c:	f383 8811 	msr	BASEPRI, r3
 8004530:	f3bf 8f6f 	isb	sy
 8004534:	f3bf 8f4f 	dsb	sy
 8004538:	60fb      	str	r3, [r7, #12]
    }
 800453a:	bf00      	nop
 800453c:	e7fe      	b.n	800453c <prvTaskExitError+0x28>
        __asm volatile
 800453e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004542:	f383 8811 	msr	BASEPRI, r3
 8004546:	f3bf 8f6f 	isb	sy
 800454a:	f3bf 8f4f 	dsb	sy
 800454e:	60bb      	str	r3, [r7, #8]
    }
 8004550:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004552:	bf00      	nop
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0fc      	beq.n	8004554 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800455a:	bf00      	nop
 800455c:	bf00      	nop
 800455e:	3714      	adds	r7, #20
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	20000028 	.word	0x20000028
 800456c:	00000000 	.word	0x00000000

08004570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004570:	4b07      	ldr	r3, [pc, #28]	; (8004590 <pxCurrentTCBConst2>)
 8004572:	6819      	ldr	r1, [r3, #0]
 8004574:	6808      	ldr	r0, [r1, #0]
 8004576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800457a:	f380 8809 	msr	PSP, r0
 800457e:	f3bf 8f6f 	isb	sy
 8004582:	f04f 0000 	mov.w	r0, #0
 8004586:	f380 8811 	msr	BASEPRI, r0
 800458a:	4770      	bx	lr
 800458c:	f3af 8000 	nop.w

08004590 <pxCurrentTCBConst2>:
 8004590:	200000d8 	.word	0x200000d8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004594:	bf00      	nop
 8004596:	bf00      	nop

08004598 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004598:	4808      	ldr	r0, [pc, #32]	; (80045bc <prvPortStartFirstTask+0x24>)
 800459a:	6800      	ldr	r0, [r0, #0]
 800459c:	6800      	ldr	r0, [r0, #0]
 800459e:	f380 8808 	msr	MSP, r0
 80045a2:	f04f 0000 	mov.w	r0, #0
 80045a6:	f380 8814 	msr	CONTROL, r0
 80045aa:	b662      	cpsie	i
 80045ac:	b661      	cpsie	f
 80045ae:	f3bf 8f4f 	dsb	sy
 80045b2:	f3bf 8f6f 	isb	sy
 80045b6:	df00      	svc	0
 80045b8:	bf00      	nop
 80045ba:	0000      	.short	0x0000
 80045bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80045c0:	bf00      	nop
 80045c2:	bf00      	nop

080045c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80045ca:	4b46      	ldr	r3, [pc, #280]	; (80046e4 <xPortStartScheduler+0x120>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a46      	ldr	r2, [pc, #280]	; (80046e8 <xPortStartScheduler+0x124>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d10a      	bne.n	80045ea <xPortStartScheduler+0x26>
        __asm volatile
 80045d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d8:	f383 8811 	msr	BASEPRI, r3
 80045dc:	f3bf 8f6f 	isb	sy
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	613b      	str	r3, [r7, #16]
    }
 80045e6:	bf00      	nop
 80045e8:	e7fe      	b.n	80045e8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80045ea:	4b3e      	ldr	r3, [pc, #248]	; (80046e4 <xPortStartScheduler+0x120>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a3f      	ldr	r2, [pc, #252]	; (80046ec <xPortStartScheduler+0x128>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d10a      	bne.n	800460a <xPortStartScheduler+0x46>
        __asm volatile
 80045f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f8:	f383 8811 	msr	BASEPRI, r3
 80045fc:	f3bf 8f6f 	isb	sy
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	60fb      	str	r3, [r7, #12]
    }
 8004606:	bf00      	nop
 8004608:	e7fe      	b.n	8004608 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800460a:	4b39      	ldr	r3, [pc, #228]	; (80046f0 <xPortStartScheduler+0x12c>)
 800460c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	b2db      	uxtb	r3, r3
 8004614:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	22ff      	movs	r2, #255	; 0xff
 800461a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	b2db      	uxtb	r3, r3
 8004622:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004624:	78fb      	ldrb	r3, [r7, #3]
 8004626:	b2db      	uxtb	r3, r3
 8004628:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800462c:	b2da      	uxtb	r2, r3
 800462e:	4b31      	ldr	r3, [pc, #196]	; (80046f4 <xPortStartScheduler+0x130>)
 8004630:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004632:	4b31      	ldr	r3, [pc, #196]	; (80046f8 <xPortStartScheduler+0x134>)
 8004634:	2207      	movs	r2, #7
 8004636:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004638:	e009      	b.n	800464e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800463a:	4b2f      	ldr	r3, [pc, #188]	; (80046f8 <xPortStartScheduler+0x134>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	3b01      	subs	r3, #1
 8004640:	4a2d      	ldr	r2, [pc, #180]	; (80046f8 <xPortStartScheduler+0x134>)
 8004642:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004644:	78fb      	ldrb	r3, [r7, #3]
 8004646:	b2db      	uxtb	r3, r3
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	b2db      	uxtb	r3, r3
 800464c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800464e:	78fb      	ldrb	r3, [r7, #3]
 8004650:	b2db      	uxtb	r3, r3
 8004652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004656:	2b80      	cmp	r3, #128	; 0x80
 8004658:	d0ef      	beq.n	800463a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800465a:	4b27      	ldr	r3, [pc, #156]	; (80046f8 <xPortStartScheduler+0x134>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f1c3 0307 	rsb	r3, r3, #7
 8004662:	2b04      	cmp	r3, #4
 8004664:	d00a      	beq.n	800467c <xPortStartScheduler+0xb8>
        __asm volatile
 8004666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466a:	f383 8811 	msr	BASEPRI, r3
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	f3bf 8f4f 	dsb	sy
 8004676:	60bb      	str	r3, [r7, #8]
    }
 8004678:	bf00      	nop
 800467a:	e7fe      	b.n	800467a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800467c:	4b1e      	ldr	r3, [pc, #120]	; (80046f8 <xPortStartScheduler+0x134>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	021b      	lsls	r3, r3, #8
 8004682:	4a1d      	ldr	r2, [pc, #116]	; (80046f8 <xPortStartScheduler+0x134>)
 8004684:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004686:	4b1c      	ldr	r3, [pc, #112]	; (80046f8 <xPortStartScheduler+0x134>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800468e:	4a1a      	ldr	r2, [pc, #104]	; (80046f8 <xPortStartScheduler+0x134>)
 8004690:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	b2da      	uxtb	r2, r3
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800469a:	4b18      	ldr	r3, [pc, #96]	; (80046fc <xPortStartScheduler+0x138>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a17      	ldr	r2, [pc, #92]	; (80046fc <xPortStartScheduler+0x138>)
 80046a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046a4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80046a6:	4b15      	ldr	r3, [pc, #84]	; (80046fc <xPortStartScheduler+0x138>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a14      	ldr	r2, [pc, #80]	; (80046fc <xPortStartScheduler+0x138>)
 80046ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80046b0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80046b2:	f000 f8e3 	bl	800487c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80046b6:	4b12      	ldr	r3, [pc, #72]	; (8004700 <xPortStartScheduler+0x13c>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80046bc:	f000 f902 	bl	80048c4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80046c0:	4b10      	ldr	r3, [pc, #64]	; (8004704 <xPortStartScheduler+0x140>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a0f      	ldr	r2, [pc, #60]	; (8004704 <xPortStartScheduler+0x140>)
 80046c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80046ca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80046cc:	f7ff ff64 	bl	8004598 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80046d0:	f7ff f868 	bl	80037a4 <vTaskSwitchContext>
    prvTaskExitError();
 80046d4:	f7ff ff1e 	bl	8004514 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3718      	adds	r7, #24
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	e000ed00 	.word	0xe000ed00
 80046e8:	410fc271 	.word	0x410fc271
 80046ec:	410fc270 	.word	0x410fc270
 80046f0:	e000e400 	.word	0xe000e400
 80046f4:	20000218 	.word	0x20000218
 80046f8:	2000021c 	.word	0x2000021c
 80046fc:	e000ed20 	.word	0xe000ed20
 8004700:	20000028 	.word	0x20000028
 8004704:	e000ef34 	.word	0xe000ef34

08004708 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
        __asm volatile
 800470e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	607b      	str	r3, [r7, #4]
    }
 8004720:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004722:	4b0f      	ldr	r3, [pc, #60]	; (8004760 <vPortEnterCritical+0x58>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	3301      	adds	r3, #1
 8004728:	4a0d      	ldr	r2, [pc, #52]	; (8004760 <vPortEnterCritical+0x58>)
 800472a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800472c:	4b0c      	ldr	r3, [pc, #48]	; (8004760 <vPortEnterCritical+0x58>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d10f      	bne.n	8004754 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004734:	4b0b      	ldr	r3, [pc, #44]	; (8004764 <vPortEnterCritical+0x5c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00a      	beq.n	8004754 <vPortEnterCritical+0x4c>
        __asm volatile
 800473e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004742:	f383 8811 	msr	BASEPRI, r3
 8004746:	f3bf 8f6f 	isb	sy
 800474a:	f3bf 8f4f 	dsb	sy
 800474e:	603b      	str	r3, [r7, #0]
    }
 8004750:	bf00      	nop
 8004752:	e7fe      	b.n	8004752 <vPortEnterCritical+0x4a>
    }
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr
 8004760:	20000028 	.word	0x20000028
 8004764:	e000ed04 	.word	0xe000ed04

08004768 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800476e:	4b12      	ldr	r3, [pc, #72]	; (80047b8 <vPortExitCritical+0x50>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10a      	bne.n	800478c <vPortExitCritical+0x24>
        __asm volatile
 8004776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477a:	f383 8811 	msr	BASEPRI, r3
 800477e:	f3bf 8f6f 	isb	sy
 8004782:	f3bf 8f4f 	dsb	sy
 8004786:	607b      	str	r3, [r7, #4]
    }
 8004788:	bf00      	nop
 800478a:	e7fe      	b.n	800478a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800478c:	4b0a      	ldr	r3, [pc, #40]	; (80047b8 <vPortExitCritical+0x50>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	3b01      	subs	r3, #1
 8004792:	4a09      	ldr	r2, [pc, #36]	; (80047b8 <vPortExitCritical+0x50>)
 8004794:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004796:	4b08      	ldr	r3, [pc, #32]	; (80047b8 <vPortExitCritical+0x50>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d105      	bne.n	80047aa <vPortExitCritical+0x42>
 800479e:	2300      	movs	r3, #0
 80047a0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	f383 8811 	msr	BASEPRI, r3
    }
 80047a8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80047aa:	bf00      	nop
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	20000028 	.word	0x20000028
 80047bc:	00000000 	.word	0x00000000

080047c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80047c0:	f3ef 8009 	mrs	r0, PSP
 80047c4:	f3bf 8f6f 	isb	sy
 80047c8:	4b15      	ldr	r3, [pc, #84]	; (8004820 <pxCurrentTCBConst>)
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	f01e 0f10 	tst.w	lr, #16
 80047d0:	bf08      	it	eq
 80047d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80047d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047da:	6010      	str	r0, [r2, #0]
 80047dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80047e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80047e4:	f380 8811 	msr	BASEPRI, r0
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	f3bf 8f6f 	isb	sy
 80047f0:	f7fe ffd8 	bl	80037a4 <vTaskSwitchContext>
 80047f4:	f04f 0000 	mov.w	r0, #0
 80047f8:	f380 8811 	msr	BASEPRI, r0
 80047fc:	bc09      	pop	{r0, r3}
 80047fe:	6819      	ldr	r1, [r3, #0]
 8004800:	6808      	ldr	r0, [r1, #0]
 8004802:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004806:	f01e 0f10 	tst.w	lr, #16
 800480a:	bf08      	it	eq
 800480c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004810:	f380 8809 	msr	PSP, r0
 8004814:	f3bf 8f6f 	isb	sy
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	f3af 8000 	nop.w

08004820 <pxCurrentTCBConst>:
 8004820:	200000d8 	.word	0x200000d8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004824:	bf00      	nop
 8004826:	bf00      	nop

08004828 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
        __asm volatile
 800482e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004832:	f383 8811 	msr	BASEPRI, r3
 8004836:	f3bf 8f6f 	isb	sy
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	607b      	str	r3, [r7, #4]
    }
 8004840:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004842:	f001 fbbd 	bl	8005fc0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004846:	f7fe fef1 	bl	800362c <xTaskIncrementTick>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d006      	beq.n	800485e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004850:	f001 fc14 	bl	800607c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004854:	4b08      	ldr	r3, [pc, #32]	; (8004878 <SysTick_Handler+0x50>)
 8004856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	e001      	b.n	8004862 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800485e:	f001 fbf1 	bl	8006044 <SEGGER_SYSVIEW_RecordExitISR>
 8004862:	2300      	movs	r3, #0
 8004864:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	f383 8811 	msr	BASEPRI, r3
    }
 800486c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800486e:	bf00      	nop
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	e000ed04 	.word	0xe000ed04

0800487c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800487c:	b480      	push	{r7}
 800487e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004880:	4b0b      	ldr	r3, [pc, #44]	; (80048b0 <vPortSetupTimerInterrupt+0x34>)
 8004882:	2200      	movs	r2, #0
 8004884:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004886:	4b0b      	ldr	r3, [pc, #44]	; (80048b4 <vPortSetupTimerInterrupt+0x38>)
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800488c:	4b0a      	ldr	r3, [pc, #40]	; (80048b8 <vPortSetupTimerInterrupt+0x3c>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a0a      	ldr	r2, [pc, #40]	; (80048bc <vPortSetupTimerInterrupt+0x40>)
 8004892:	fba2 2303 	umull	r2, r3, r2, r3
 8004896:	099b      	lsrs	r3, r3, #6
 8004898:	4a09      	ldr	r2, [pc, #36]	; (80048c0 <vPortSetupTimerInterrupt+0x44>)
 800489a:	3b01      	subs	r3, #1
 800489c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800489e:	4b04      	ldr	r3, [pc, #16]	; (80048b0 <vPortSetupTimerInterrupt+0x34>)
 80048a0:	2207      	movs	r2, #7
 80048a2:	601a      	str	r2, [r3, #0]
}
 80048a4:	bf00      	nop
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	e000e010 	.word	0xe000e010
 80048b4:	e000e018 	.word	0xe000e018
 80048b8:	20000018 	.word	0x20000018
 80048bc:	10624dd3 	.word	0x10624dd3
 80048c0:	e000e014 	.word	0xe000e014

080048c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80048c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80048d4 <vPortEnableVFP+0x10>
 80048c8:	6801      	ldr	r1, [r0, #0]
 80048ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80048ce:	6001      	str	r1, [r0, #0]
 80048d0:	4770      	bx	lr
 80048d2:	0000      	.short	0x0000
 80048d4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80048d8:	bf00      	nop
 80048da:	bf00      	nop

080048dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80048e2:	f3ef 8305 	mrs	r3, IPSR
 80048e6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2b0f      	cmp	r3, #15
 80048ec:	d914      	bls.n	8004918 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80048ee:	4a17      	ldr	r2, [pc, #92]	; (800494c <vPortValidateInterruptPriority+0x70>)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4413      	add	r3, r2
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80048f8:	4b15      	ldr	r3, [pc, #84]	; (8004950 <vPortValidateInterruptPriority+0x74>)
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	7afa      	ldrb	r2, [r7, #11]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d20a      	bcs.n	8004918 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004906:	f383 8811 	msr	BASEPRI, r3
 800490a:	f3bf 8f6f 	isb	sy
 800490e:	f3bf 8f4f 	dsb	sy
 8004912:	607b      	str	r3, [r7, #4]
    }
 8004914:	bf00      	nop
 8004916:	e7fe      	b.n	8004916 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004918:	4b0e      	ldr	r3, [pc, #56]	; (8004954 <vPortValidateInterruptPriority+0x78>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004920:	4b0d      	ldr	r3, [pc, #52]	; (8004958 <vPortValidateInterruptPriority+0x7c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	429a      	cmp	r2, r3
 8004926:	d90a      	bls.n	800493e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492c:	f383 8811 	msr	BASEPRI, r3
 8004930:	f3bf 8f6f 	isb	sy
 8004934:	f3bf 8f4f 	dsb	sy
 8004938:	603b      	str	r3, [r7, #0]
    }
 800493a:	bf00      	nop
 800493c:	e7fe      	b.n	800493c <vPortValidateInterruptPriority+0x60>
    }
 800493e:	bf00      	nop
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	e000e3f0 	.word	0xe000e3f0
 8004950:	20000218 	.word	0x20000218
 8004954:	e000ed0c 	.word	0xe000ed0c
 8004958:	2000021c 	.word	0x2000021c

0800495c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b08a      	sub	sp, #40	; 0x28
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004964:	2300      	movs	r3, #0
 8004966:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004968:	f7fe fd90 	bl	800348c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800496c:	4b65      	ldr	r3, [pc, #404]	; (8004b04 <pvPortMalloc+0x1a8>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004974:	f000 f934 	bl	8004be0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004978:	4b63      	ldr	r3, [pc, #396]	; (8004b08 <pvPortMalloc+0x1ac>)
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4013      	ands	r3, r2
 8004980:	2b00      	cmp	r3, #0
 8004982:	f040 80a7 	bne.w	8004ad4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d02d      	beq.n	80049e8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800498c:	2208      	movs	r2, #8
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	429a      	cmp	r2, r3
 8004996:	d227      	bcs.n	80049e8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004998:	2208      	movs	r2, #8
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4413      	add	r3, r2
 800499e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f003 0307 	and.w	r3, r3, #7
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d021      	beq.n	80049ee <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f023 0307 	bic.w	r3, r3, #7
 80049b0:	3308      	adds	r3, #8
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d214      	bcs.n	80049e2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f023 0307 	bic.w	r3, r3, #7
 80049be:	3308      	adds	r3, #8
 80049c0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f003 0307 	and.w	r3, r3, #7
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d010      	beq.n	80049ee <pvPortMalloc+0x92>
        __asm volatile
 80049cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d0:	f383 8811 	msr	BASEPRI, r3
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	617b      	str	r3, [r7, #20]
    }
 80049de:	bf00      	nop
 80049e0:	e7fe      	b.n	80049e0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80049e2:	2300      	movs	r3, #0
 80049e4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049e6:	e002      	b.n	80049ee <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80049e8:	2300      	movs	r3, #0
 80049ea:	607b      	str	r3, [r7, #4]
 80049ec:	e000      	b.n	80049f0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049ee:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d06e      	beq.n	8004ad4 <pvPortMalloc+0x178>
 80049f6:	4b45      	ldr	r3, [pc, #276]	; (8004b0c <pvPortMalloc+0x1b0>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d869      	bhi.n	8004ad4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004a00:	4b43      	ldr	r3, [pc, #268]	; (8004b10 <pvPortMalloc+0x1b4>)
 8004a02:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004a04:	4b42      	ldr	r3, [pc, #264]	; (8004b10 <pvPortMalloc+0x1b4>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a0a:	e004      	b.n	8004a16 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d903      	bls.n	8004a28 <pvPortMalloc+0xcc>
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1f1      	bne.n	8004a0c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004a28:	4b36      	ldr	r3, [pc, #216]	; (8004b04 <pvPortMalloc+0x1a8>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d050      	beq.n	8004ad4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a32:	6a3b      	ldr	r3, [r7, #32]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2208      	movs	r2, #8
 8004a38:	4413      	add	r3, r2
 8004a3a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	6a3b      	ldr	r3, [r7, #32]
 8004a42:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	1ad2      	subs	r2, r2, r3
 8004a4c:	2308      	movs	r3, #8
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d91f      	bls.n	8004a94 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4413      	add	r3, r2
 8004a5a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	f003 0307 	and.w	r3, r3, #7
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00a      	beq.n	8004a7c <pvPortMalloc+0x120>
        __asm volatile
 8004a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6a:	f383 8811 	msr	BASEPRI, r3
 8004a6e:	f3bf 8f6f 	isb	sy
 8004a72:	f3bf 8f4f 	dsb	sy
 8004a76:	613b      	str	r3, [r7, #16]
    }
 8004a78:	bf00      	nop
 8004a7a:	e7fe      	b.n	8004a7a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	1ad2      	subs	r2, r2, r3
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a8e:	69b8      	ldr	r0, [r7, #24]
 8004a90:	f000 f908 	bl	8004ca4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a94:	4b1d      	ldr	r3, [pc, #116]	; (8004b0c <pvPortMalloc+0x1b0>)
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	4a1b      	ldr	r2, [pc, #108]	; (8004b0c <pvPortMalloc+0x1b0>)
 8004aa0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004aa2:	4b1a      	ldr	r3, [pc, #104]	; (8004b0c <pvPortMalloc+0x1b0>)
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	4b1b      	ldr	r3, [pc, #108]	; (8004b14 <pvPortMalloc+0x1b8>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d203      	bcs.n	8004ab6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004aae:	4b17      	ldr	r3, [pc, #92]	; (8004b0c <pvPortMalloc+0x1b0>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a18      	ldr	r2, [pc, #96]	; (8004b14 <pvPortMalloc+0x1b8>)
 8004ab4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	4b13      	ldr	r3, [pc, #76]	; (8004b08 <pvPortMalloc+0x1ac>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004aca:	4b13      	ldr	r3, [pc, #76]	; (8004b18 <pvPortMalloc+0x1bc>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	3301      	adds	r3, #1
 8004ad0:	4a11      	ldr	r2, [pc, #68]	; (8004b18 <pvPortMalloc+0x1bc>)
 8004ad2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004ad4:	f7fe fce8 	bl	80034a8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00a      	beq.n	8004af8 <pvPortMalloc+0x19c>
        __asm volatile
 8004ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae6:	f383 8811 	msr	BASEPRI, r3
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	60fb      	str	r3, [r7, #12]
    }
 8004af4:	bf00      	nop
 8004af6:	e7fe      	b.n	8004af6 <pvPortMalloc+0x19a>
    return pvReturn;
 8004af8:	69fb      	ldr	r3, [r7, #28]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3728      	adds	r7, #40	; 0x28
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	20012e28 	.word	0x20012e28
 8004b08:	20012e3c 	.word	0x20012e3c
 8004b0c:	20012e2c 	.word	0x20012e2c
 8004b10:	20012e20 	.word	0x20012e20
 8004b14:	20012e30 	.word	0x20012e30
 8004b18:	20012e34 	.word	0x20012e34

08004b1c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d04d      	beq.n	8004bca <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004b2e:	2308      	movs	r3, #8
 8004b30:	425b      	negs	r3, r3
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	4413      	add	r3, r2
 8004b36:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	4b24      	ldr	r3, [pc, #144]	; (8004bd4 <vPortFree+0xb8>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4013      	ands	r3, r2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10a      	bne.n	8004b60 <vPortFree+0x44>
        __asm volatile
 8004b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4e:	f383 8811 	msr	BASEPRI, r3
 8004b52:	f3bf 8f6f 	isb	sy
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	60fb      	str	r3, [r7, #12]
    }
 8004b5c:	bf00      	nop
 8004b5e:	e7fe      	b.n	8004b5e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00a      	beq.n	8004b7e <vPortFree+0x62>
        __asm volatile
 8004b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6c:	f383 8811 	msr	BASEPRI, r3
 8004b70:	f3bf 8f6f 	isb	sy
 8004b74:	f3bf 8f4f 	dsb	sy
 8004b78:	60bb      	str	r3, [r7, #8]
    }
 8004b7a:	bf00      	nop
 8004b7c:	e7fe      	b.n	8004b7c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	685a      	ldr	r2, [r3, #4]
 8004b82:	4b14      	ldr	r3, [pc, #80]	; (8004bd4 <vPortFree+0xb8>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4013      	ands	r3, r2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d01e      	beq.n	8004bca <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d11a      	bne.n	8004bca <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	4b0e      	ldr	r3, [pc, #56]	; (8004bd4 <vPortFree+0xb8>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	43db      	mvns	r3, r3
 8004b9e:	401a      	ands	r2, r3
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004ba4:	f7fe fc72 	bl	800348c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	4b0a      	ldr	r3, [pc, #40]	; (8004bd8 <vPortFree+0xbc>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	4a09      	ldr	r2, [pc, #36]	; (8004bd8 <vPortFree+0xbc>)
 8004bb4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004bb6:	6938      	ldr	r0, [r7, #16]
 8004bb8:	f000 f874 	bl	8004ca4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004bbc:	4b07      	ldr	r3, [pc, #28]	; (8004bdc <vPortFree+0xc0>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	4a06      	ldr	r2, [pc, #24]	; (8004bdc <vPortFree+0xc0>)
 8004bc4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004bc6:	f7fe fc6f 	bl	80034a8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004bca:	bf00      	nop
 8004bcc:	3718      	adds	r7, #24
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	20012e3c 	.word	0x20012e3c
 8004bd8:	20012e2c 	.word	0x20012e2c
 8004bdc:	20012e38 	.word	0x20012e38

08004be0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004be6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004bea:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004bec:	4b27      	ldr	r3, [pc, #156]	; (8004c8c <prvHeapInit+0xac>)
 8004bee:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f003 0307 	and.w	r3, r3, #7
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00c      	beq.n	8004c14 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	3307      	adds	r3, #7
 8004bfe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f023 0307 	bic.w	r3, r3, #7
 8004c06:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	4a1f      	ldr	r2, [pc, #124]	; (8004c8c <prvHeapInit+0xac>)
 8004c10:	4413      	add	r3, r2
 8004c12:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c18:	4a1d      	ldr	r2, [pc, #116]	; (8004c90 <prvHeapInit+0xb0>)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004c1e:	4b1c      	ldr	r3, [pc, #112]	; (8004c90 <prvHeapInit+0xb0>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	4413      	add	r3, r2
 8004c2a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004c2c:	2208      	movs	r2, #8
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	1a9b      	subs	r3, r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f023 0307 	bic.w	r3, r3, #7
 8004c3a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4a15      	ldr	r2, [pc, #84]	; (8004c94 <prvHeapInit+0xb4>)
 8004c40:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004c42:	4b14      	ldr	r3, [pc, #80]	; (8004c94 <prvHeapInit+0xb4>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2200      	movs	r2, #0
 8004c48:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004c4a:	4b12      	ldr	r3, [pc, #72]	; (8004c94 <prvHeapInit+0xb4>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	1ad2      	subs	r2, r2, r3
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c60:	4b0c      	ldr	r3, [pc, #48]	; (8004c94 <prvHeapInit+0xb4>)
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	4a0a      	ldr	r2, [pc, #40]	; (8004c98 <prvHeapInit+0xb8>)
 8004c6e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	4a09      	ldr	r2, [pc, #36]	; (8004c9c <prvHeapInit+0xbc>)
 8004c76:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004c78:	4b09      	ldr	r3, [pc, #36]	; (8004ca0 <prvHeapInit+0xc0>)
 8004c7a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c7e:	601a      	str	r2, [r3, #0]
}
 8004c80:	bf00      	nop
 8004c82:	3714      	adds	r7, #20
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	20000220 	.word	0x20000220
 8004c90:	20012e20 	.word	0x20012e20
 8004c94:	20012e28 	.word	0x20012e28
 8004c98:	20012e30 	.word	0x20012e30
 8004c9c:	20012e2c 	.word	0x20012e2c
 8004ca0:	20012e3c 	.word	0x20012e3c

08004ca4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004cac:	4b28      	ldr	r3, [pc, #160]	; (8004d50 <prvInsertBlockIntoFreeList+0xac>)
 8004cae:	60fb      	str	r3, [r7, #12]
 8004cb0:	e002      	b.n	8004cb8 <prvInsertBlockIntoFreeList+0x14>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d8f7      	bhi.n	8004cb2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	4413      	add	r3, r2
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d108      	bne.n	8004ce6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	441a      	add	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	441a      	add	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d118      	bne.n	8004d2c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	4b15      	ldr	r3, [pc, #84]	; (8004d54 <prvInsertBlockIntoFreeList+0xb0>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d00d      	beq.n	8004d22 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685a      	ldr	r2, [r3, #4]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	441a      	add	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	601a      	str	r2, [r3, #0]
 8004d20:	e008      	b.n	8004d34 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d22:	4b0c      	ldr	r3, [pc, #48]	; (8004d54 <prvInsertBlockIntoFreeList+0xb0>)
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	601a      	str	r2, [r3, #0]
 8004d2a:	e003      	b.n	8004d34 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d002      	beq.n	8004d42 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004d42:	bf00      	nop
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	20012e20 	.word	0x20012e20
 8004d54:	20012e28 	.word	0x20012e28

08004d58 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004d5e:	4b26      	ldr	r3, [pc, #152]	; (8004df8 <_DoInit+0xa0>)
 8004d60:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004d62:	22a8      	movs	r2, #168	; 0xa8
 8004d64:	2100      	movs	r1, #0
 8004d66:	6838      	ldr	r0, [r7, #0]
 8004d68:	f001 fdaa 	bl	80068c0 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	2203      	movs	r2, #3
 8004d70:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2203      	movs	r2, #3
 8004d76:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	4a20      	ldr	r2, [pc, #128]	; (8004dfc <_DoInit+0xa4>)
 8004d7c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	4a1f      	ldr	r2, [pc, #124]	; (8004e00 <_DoInit+0xa8>)
 8004d82:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d8a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2200      	movs	r2, #0
 8004d96:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	4a16      	ldr	r2, [pc, #88]	; (8004dfc <_DoInit+0xa4>)
 8004da2:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	4a17      	ldr	r2, [pc, #92]	; (8004e04 <_DoInit+0xac>)
 8004da8:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2210      	movs	r2, #16
 8004dae:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	2200      	movs	r2, #0
 8004db4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2200      	movs	r2, #0
 8004dba:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004dc2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	607b      	str	r3, [r7, #4]
 8004dca:	e00c      	b.n	8004de6 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f1c3 030f 	rsb	r3, r3, #15
 8004dd2:	4a0d      	ldr	r2, [pc, #52]	; (8004e08 <_DoInit+0xb0>)
 8004dd4:	5cd1      	ldrb	r1, [r2, r3]
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4413      	add	r3, r2
 8004ddc:	460a      	mov	r2, r1
 8004dde:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	3301      	adds	r3, #1
 8004de4:	607b      	str	r3, [r7, #4]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b0f      	cmp	r3, #15
 8004dea:	d9ef      	bls.n	8004dcc <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004dec:	f3bf 8f5f 	dmb	sy
}
 8004df0:	bf00      	nop
 8004df2:	3708      	adds	r7, #8
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	20012e40 	.word	0x20012e40
 8004dfc:	08006918 	.word	0x08006918
 8004e00:	20012ee8 	.word	0x20012ee8
 8004e04:	200132e8 	.word	0x200132e8
 8004e08:	080069f0 	.word	0x080069f0

08004e0c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b08c      	sub	sp, #48	; 0x30
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004e18:	4b3e      	ldr	r3, [pc, #248]	; (8004f14 <SEGGER_RTT_ReadNoLock+0x108>)
 8004e1a:	623b      	str	r3, [r7, #32]
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <SEGGER_RTT_ReadNoLock+0x1e>
 8004e26:	f7ff ff97 	bl	8004d58 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	4413      	add	r3, r2
 8004e32:	00db      	lsls	r3, r3, #3
 8004e34:	3360      	adds	r3, #96	; 0x60
 8004e36:	4a37      	ldr	r2, [pc, #220]	; (8004f14 <SEGGER_RTT_ReadNoLock+0x108>)
 8004e38:	4413      	add	r3, r2
 8004e3a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004e50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d92b      	bls.n	8004eb0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	689a      	ldr	r2, [r3, #8]
 8004e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4293      	cmp	r3, r2
 8004e68:	bf28      	it	cs
 8004e6a:	4613      	movcs	r3, r2
 8004e6c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e74:	4413      	add	r3, r2
 8004e76:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	6939      	ldr	r1, [r7, #16]
 8004e7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e7e:	f001 fd11 	bl	80068a4 <memcpy>
    NumBytesRead += NumBytesRem;
 8004e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	4413      	add	r3, r2
 8004e88:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	4413      	add	r3, r2
 8004e90:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d101      	bne.n	8004eb0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004eac:	2300      	movs	r3, #0
 8004eae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	bf28      	it	cs
 8004ec0:	4613      	movcs	r3, r2
 8004ec2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d019      	beq.n	8004efe <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed0:	4413      	add	r3, r2
 8004ed2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	6939      	ldr	r1, [r7, #16]
 8004ed8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004eda:	f001 fce3 	bl	80068a4 <memcpy>
    NumBytesRead += NumBytesRem;
 8004ede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	4413      	add	r3, r2
 8004eec:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004ef6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	4413      	add	r3, r2
 8004efc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d002      	beq.n	8004f0a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f08:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3730      	adds	r7, #48	; 0x30
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	20012e40 	.word	0x20012e40

08004f18 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b088      	sub	sp, #32
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
 8004f24:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004f26:	4b3d      	ldr	r3, [pc, #244]	; (800501c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004f28:	61bb      	str	r3, [r7, #24]
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d101      	bne.n	8004f38 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004f34:	f7ff ff10 	bl	8004d58 <_DoInit>
  SEGGER_RTT_LOCK();
 8004f38:	f3ef 8311 	mrs	r3, BASEPRI
 8004f3c:	f04f 0120 	mov.w	r1, #32
 8004f40:	f381 8811 	msr	BASEPRI, r1
 8004f44:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004f46:	4b35      	ldr	r3, [pc, #212]	; (800501c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004f48:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004f4e:	6939      	ldr	r1, [r7, #16]
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	1c5a      	adds	r2, r3, #1
 8004f54:	4613      	mov	r3, r2
 8004f56:	005b      	lsls	r3, r3, #1
 8004f58:	4413      	add	r3, r2
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	440b      	add	r3, r1
 8004f5e:	3304      	adds	r3, #4
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d008      	beq.n	8004f78 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	69fa      	ldr	r2, [r7, #28]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	dbeb      	blt.n	8004f4e <SEGGER_RTT_AllocUpBuffer+0x36>
 8004f76:	e000      	b.n	8004f7a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004f78:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	69fa      	ldr	r2, [r7, #28]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	da3f      	bge.n	8005004 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004f84:	6939      	ldr	r1, [r7, #16]
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	1c5a      	adds	r2, r3, #1
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	005b      	lsls	r3, r3, #1
 8004f8e:	4413      	add	r3, r2
 8004f90:	00db      	lsls	r3, r3, #3
 8004f92:	440b      	add	r3, r1
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004f98:	6939      	ldr	r1, [r7, #16]
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	1c5a      	adds	r2, r3, #1
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	4413      	add	r3, r2
 8004fa4:	00db      	lsls	r3, r3, #3
 8004fa6:	440b      	add	r3, r1
 8004fa8:	3304      	adds	r3, #4
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004fae:	6939      	ldr	r1, [r7, #16]
 8004fb0:	69fa      	ldr	r2, [r7, #28]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	4413      	add	r3, r2
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	440b      	add	r3, r1
 8004fbc:	3320      	adds	r3, #32
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004fc2:	6939      	ldr	r1, [r7, #16]
 8004fc4:	69fa      	ldr	r2, [r7, #28]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	4413      	add	r3, r2
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	440b      	add	r3, r1
 8004fd0:	3328      	adds	r3, #40	; 0x28
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004fd6:	6939      	ldr	r1, [r7, #16]
 8004fd8:	69fa      	ldr	r2, [r7, #28]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	4413      	add	r3, r2
 8004fe0:	00db      	lsls	r3, r3, #3
 8004fe2:	440b      	add	r3, r1
 8004fe4:	3324      	adds	r3, #36	; 0x24
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004fea:	6939      	ldr	r1, [r7, #16]
 8004fec:	69fa      	ldr	r2, [r7, #28]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	005b      	lsls	r3, r3, #1
 8004ff2:	4413      	add	r3, r2
 8004ff4:	00db      	lsls	r3, r3, #3
 8004ff6:	440b      	add	r3, r1
 8004ff8:	332c      	adds	r3, #44	; 0x2c
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004ffe:	f3bf 8f5f 	dmb	sy
 8005002:	e002      	b.n	800500a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005004:	f04f 33ff 	mov.w	r3, #4294967295
 8005008:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005010:	69fb      	ldr	r3, [r7, #28]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3720      	adds	r7, #32
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	20012e40 	.word	0x20012e40

08005020 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005020:	b580      	push	{r7, lr}
 8005022:	b08a      	sub	sp, #40	; 0x28
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
 800502c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800502e:	4b21      	ldr	r3, [pc, #132]	; (80050b4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005030:	623b      	str	r3, [r7, #32]
 8005032:	6a3b      	ldr	r3, [r7, #32]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800503c:	f7ff fe8c 	bl	8004d58 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005040:	4b1c      	ldr	r3, [pc, #112]	; (80050b4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005042:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2b02      	cmp	r3, #2
 8005048:	d82c      	bhi.n	80050a4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800504a:	f3ef 8311 	mrs	r3, BASEPRI
 800504e:	f04f 0120 	mov.w	r1, #32
 8005052:	f381 8811 	msr	BASEPRI, r1
 8005056:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	4613      	mov	r3, r2
 800505c:	005b      	lsls	r3, r3, #1
 800505e:	4413      	add	r3, r2
 8005060:	00db      	lsls	r3, r3, #3
 8005062:	3360      	adds	r3, #96	; 0x60
 8005064:	69fa      	ldr	r2, [r7, #28]
 8005066:	4413      	add	r3, r2
 8005068:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00e      	beq.n	800508e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	2200      	movs	r2, #0
 8005086:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	2200      	movs	r2, #0
 800508c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005092:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005094:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800509e:	2300      	movs	r3, #0
 80050a0:	627b      	str	r3, [r7, #36]	; 0x24
 80050a2:	e002      	b.n	80050aa <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80050a4:	f04f 33ff 	mov.w	r3, #4294967295
 80050a8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3728      	adds	r7, #40	; 0x28
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	20012e40 	.word	0x20012e40

080050b8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80050b8:	b480      	push	{r7}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80050c4:	2300      	movs	r3, #0
 80050c6:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00f      	beq.n	80050ee <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80050ce:	e002      	b.n	80050d6 <_EncodeStr+0x1e>
      Len++;
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	3301      	adds	r3, #1
 80050d4:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	4413      	add	r3, r2
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1f6      	bne.n	80050d0 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d901      	bls.n	80050ee <_EncodeStr+0x36>
      Len = Limit;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	2bfe      	cmp	r3, #254	; 0xfe
 80050f2:	d806      	bhi.n	8005102 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	1c5a      	adds	r2, r3, #1
 80050f8:	60fa      	str	r2, [r7, #12]
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	b2d2      	uxtb	r2, r2
 80050fe:	701a      	strb	r2, [r3, #0]
 8005100:	e011      	b.n	8005126 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	1c5a      	adds	r2, r3, #1
 8005106:	60fa      	str	r2, [r7, #12]
 8005108:	22ff      	movs	r2, #255	; 0xff
 800510a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	1c5a      	adds	r2, r3, #1
 8005110:	60fa      	str	r2, [r7, #12]
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	b2d2      	uxtb	r2, r2
 8005116:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	0a19      	lsrs	r1, r3, #8
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	1c5a      	adds	r2, r3, #1
 8005120:	60fa      	str	r2, [r7, #12]
 8005122:	b2ca      	uxtb	r2, r1
 8005124:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005126:	2300      	movs	r3, #0
 8005128:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800512a:	e00a      	b.n	8005142 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	1c53      	adds	r3, r2, #1
 8005130:	60bb      	str	r3, [r7, #8]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	1c59      	adds	r1, r3, #1
 8005136:	60f9      	str	r1, [r7, #12]
 8005138:	7812      	ldrb	r2, [r2, #0]
 800513a:	701a      	strb	r2, [r3, #0]
    n++;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	3301      	adds	r3, #1
 8005140:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	429a      	cmp	r2, r3
 8005148:	d3f0      	bcc.n	800512c <_EncodeStr+0x74>
  }
  return pPayload;
 800514a:	68fb      	ldr	r3, [r7, #12]
}
 800514c:	4618      	mov	r0, r3
 800514e:	371c      	adds	r7, #28
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	3307      	adds	r3, #7
}
 8005164:	4618      	mov	r0, r3
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005176:	4b35      	ldr	r3, [pc, #212]	; (800524c <_HandleIncomingPacket+0xdc>)
 8005178:	7e1b      	ldrb	r3, [r3, #24]
 800517a:	4618      	mov	r0, r3
 800517c:	1cfb      	adds	r3, r7, #3
 800517e:	2201      	movs	r2, #1
 8005180:	4619      	mov	r1, r3
 8005182:	f7ff fe43 	bl	8004e0c <SEGGER_RTT_ReadNoLock>
 8005186:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d052      	beq.n	8005234 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 800518e:	78fb      	ldrb	r3, [r7, #3]
 8005190:	2b80      	cmp	r3, #128	; 0x80
 8005192:	d031      	beq.n	80051f8 <_HandleIncomingPacket+0x88>
 8005194:	2b80      	cmp	r3, #128	; 0x80
 8005196:	dc40      	bgt.n	800521a <_HandleIncomingPacket+0xaa>
 8005198:	2b07      	cmp	r3, #7
 800519a:	dc15      	bgt.n	80051c8 <_HandleIncomingPacket+0x58>
 800519c:	2b00      	cmp	r3, #0
 800519e:	dd3c      	ble.n	800521a <_HandleIncomingPacket+0xaa>
 80051a0:	3b01      	subs	r3, #1
 80051a2:	2b06      	cmp	r3, #6
 80051a4:	d839      	bhi.n	800521a <_HandleIncomingPacket+0xaa>
 80051a6:	a201      	add	r2, pc, #4	; (adr r2, 80051ac <_HandleIncomingPacket+0x3c>)
 80051a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ac:	080051cf 	.word	0x080051cf
 80051b0:	080051d5 	.word	0x080051d5
 80051b4:	080051db 	.word	0x080051db
 80051b8:	080051e1 	.word	0x080051e1
 80051bc:	080051e7 	.word	0x080051e7
 80051c0:	080051ed 	.word	0x080051ed
 80051c4:	080051f3 	.word	0x080051f3
 80051c8:	2b7f      	cmp	r3, #127	; 0x7f
 80051ca:	d035      	beq.n	8005238 <_HandleIncomingPacket+0xc8>
 80051cc:	e025      	b.n	800521a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80051ce:	f000 fc2f 	bl	8005a30 <SEGGER_SYSVIEW_Start>
      break;
 80051d2:	e036      	b.n	8005242 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80051d4:	f000 fce6 	bl	8005ba4 <SEGGER_SYSVIEW_Stop>
      break;
 80051d8:	e033      	b.n	8005242 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80051da:	f000 febf 	bl	8005f5c <SEGGER_SYSVIEW_RecordSystime>
      break;
 80051de:	e030      	b.n	8005242 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80051e0:	f000 fe84 	bl	8005eec <SEGGER_SYSVIEW_SendTaskList>
      break;
 80051e4:	e02d      	b.n	8005242 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80051e6:	f000 fd03 	bl	8005bf0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80051ea:	e02a      	b.n	8005242 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80051ec:	f001 f952 	bl	8006494 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80051f0:	e027      	b.n	8005242 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80051f2:	f001 f931 	bl	8006458 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80051f6:	e024      	b.n	8005242 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80051f8:	4b14      	ldr	r3, [pc, #80]	; (800524c <_HandleIncomingPacket+0xdc>)
 80051fa:	7e1b      	ldrb	r3, [r3, #24]
 80051fc:	4618      	mov	r0, r3
 80051fe:	1cfb      	adds	r3, r7, #3
 8005200:	2201      	movs	r2, #1
 8005202:	4619      	mov	r1, r3
 8005204:	f7ff fe02 	bl	8004e0c <SEGGER_RTT_ReadNoLock>
 8005208:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d015      	beq.n	800523c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005210:	78fb      	ldrb	r3, [r7, #3]
 8005212:	4618      	mov	r0, r3
 8005214:	f001 f8a0 	bl	8006358 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005218:	e010      	b.n	800523c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800521a:	78fb      	ldrb	r3, [r7, #3]
 800521c:	b25b      	sxtb	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	da0e      	bge.n	8005240 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005222:	4b0a      	ldr	r3, [pc, #40]	; (800524c <_HandleIncomingPacket+0xdc>)
 8005224:	7e1b      	ldrb	r3, [r3, #24]
 8005226:	4618      	mov	r0, r3
 8005228:	1cfb      	adds	r3, r7, #3
 800522a:	2201      	movs	r2, #1
 800522c:	4619      	mov	r1, r3
 800522e:	f7ff fded 	bl	8004e0c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005232:	e005      	b.n	8005240 <_HandleIncomingPacket+0xd0>
    }
  }
 8005234:	bf00      	nop
 8005236:	e004      	b.n	8005242 <_HandleIncomingPacket+0xd2>
      break;
 8005238:	bf00      	nop
 800523a:	e002      	b.n	8005242 <_HandleIncomingPacket+0xd2>
      break;
 800523c:	bf00      	nop
 800523e:	e000      	b.n	8005242 <_HandleIncomingPacket+0xd2>
      break;
 8005240:	bf00      	nop
}
 8005242:	bf00      	nop
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	20014300 	.word	0x20014300

08005250 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005250:	b580      	push	{r7, lr}
 8005252:	b08c      	sub	sp, #48	; 0x30
 8005254:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005256:	2301      	movs	r3, #1
 8005258:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800525a:	1d3b      	adds	r3, r7, #4
 800525c:	3301      	adds	r3, #1
 800525e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005264:	4b31      	ldr	r3, [pc, #196]	; (800532c <_TrySendOverflowPacket+0xdc>)
 8005266:	695b      	ldr	r3, [r3, #20]
 8005268:	62bb      	str	r3, [r7, #40]	; 0x28
 800526a:	e00b      	b.n	8005284 <_TrySendOverflowPacket+0x34>
 800526c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526e:	b2da      	uxtb	r2, r3
 8005270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005272:	1c59      	adds	r1, r3, #1
 8005274:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005276:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800527a:	b2d2      	uxtb	r2, r2
 800527c:	701a      	strb	r2, [r3, #0]
 800527e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005280:	09db      	lsrs	r3, r3, #7
 8005282:	62bb      	str	r3, [r7, #40]	; 0x28
 8005284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005286:	2b7f      	cmp	r3, #127	; 0x7f
 8005288:	d8f0      	bhi.n	800526c <_TrySendOverflowPacket+0x1c>
 800528a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528c:	1c5a      	adds	r2, r3, #1
 800528e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005290:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005292:	b2d2      	uxtb	r2, r2
 8005294:	701a      	strb	r2, [r3, #0]
 8005296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005298:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800529a:	4b25      	ldr	r3, [pc, #148]	; (8005330 <_TrySendOverflowPacket+0xe0>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80052a0:	4b22      	ldr	r3, [pc, #136]	; (800532c <_TrySendOverflowPacket+0xdc>)
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	627b      	str	r3, [r7, #36]	; 0x24
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	623b      	str	r3, [r7, #32]
 80052b2:	e00b      	b.n	80052cc <_TrySendOverflowPacket+0x7c>
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ba:	1c59      	adds	r1, r3, #1
 80052bc:	6279      	str	r1, [r7, #36]	; 0x24
 80052be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052c2:	b2d2      	uxtb	r2, r2
 80052c4:	701a      	strb	r2, [r3, #0]
 80052c6:	6a3b      	ldr	r3, [r7, #32]
 80052c8:	09db      	lsrs	r3, r3, #7
 80052ca:	623b      	str	r3, [r7, #32]
 80052cc:	6a3b      	ldr	r3, [r7, #32]
 80052ce:	2b7f      	cmp	r3, #127	; 0x7f
 80052d0:	d8f0      	bhi.n	80052b4 <_TrySendOverflowPacket+0x64>
 80052d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d4:	1c5a      	adds	r2, r3, #1
 80052d6:	627a      	str	r2, [r7, #36]	; 0x24
 80052d8:	6a3a      	ldr	r2, [r7, #32]
 80052da:	b2d2      	uxtb	r2, r2
 80052dc:	701a      	strb	r2, [r3, #0]
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80052e2:	4b12      	ldr	r3, [pc, #72]	; (800532c <_TrySendOverflowPacket+0xdc>)
 80052e4:	785b      	ldrb	r3, [r3, #1]
 80052e6:	4618      	mov	r0, r3
 80052e8:	1d3b      	adds	r3, r7, #4
 80052ea:	69fa      	ldr	r2, [r7, #28]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	461a      	mov	r2, r3
 80052f0:	1d3b      	adds	r3, r7, #4
 80052f2:	4619      	mov	r1, r3
 80052f4:	f7fa ff7c 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80052f8:	4603      	mov	r3, r0
 80052fa:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d009      	beq.n	8005316 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005302:	4a0a      	ldr	r2, [pc, #40]	; (800532c <_TrySendOverflowPacket+0xdc>)
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005308:	4b08      	ldr	r3, [pc, #32]	; (800532c <_TrySendOverflowPacket+0xdc>)
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	3b01      	subs	r3, #1
 800530e:	b2da      	uxtb	r2, r3
 8005310:	4b06      	ldr	r3, [pc, #24]	; (800532c <_TrySendOverflowPacket+0xdc>)
 8005312:	701a      	strb	r2, [r3, #0]
 8005314:	e004      	b.n	8005320 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005316:	4b05      	ldr	r3, [pc, #20]	; (800532c <_TrySendOverflowPacket+0xdc>)
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	3301      	adds	r3, #1
 800531c:	4a03      	ldr	r2, [pc, #12]	; (800532c <_TrySendOverflowPacket+0xdc>)
 800531e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005320:	693b      	ldr	r3, [r7, #16]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3730      	adds	r7, #48	; 0x30
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	20014300 	.word	0x20014300
 8005330:	e0001004 	.word	0xe0001004

08005334 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005334:	b580      	push	{r7, lr}
 8005336:	b08a      	sub	sp, #40	; 0x28
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005340:	4b98      	ldr	r3, [pc, #608]	; (80055a4 <_SendPacket+0x270>)
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d010      	beq.n	800536a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005348:	4b96      	ldr	r3, [pc, #600]	; (80055a4 <_SendPacket+0x270>)
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 812d 	beq.w	80055ac <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005352:	4b94      	ldr	r3, [pc, #592]	; (80055a4 <_SendPacket+0x270>)
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	2b02      	cmp	r3, #2
 8005358:	d109      	bne.n	800536e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800535a:	f7ff ff79 	bl	8005250 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800535e:	4b91      	ldr	r3, [pc, #580]	; (80055a4 <_SendPacket+0x270>)
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	2b01      	cmp	r3, #1
 8005364:	f040 8124 	bne.w	80055b0 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8005368:	e001      	b.n	800536e <_SendPacket+0x3a>
    goto Send;
 800536a:	bf00      	nop
 800536c:	e000      	b.n	8005370 <_SendPacket+0x3c>
Send:
 800536e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b1f      	cmp	r3, #31
 8005374:	d809      	bhi.n	800538a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005376:	4b8b      	ldr	r3, [pc, #556]	; (80055a4 <_SendPacket+0x270>)
 8005378:	69da      	ldr	r2, [r3, #28]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	fa22 f303 	lsr.w	r3, r2, r3
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	2b00      	cmp	r3, #0
 8005386:	f040 8115 	bne.w	80055b4 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b17      	cmp	r3, #23
 800538e:	d807      	bhi.n	80053a0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	3b01      	subs	r3, #1
 8005394:	60fb      	str	r3, [r7, #12]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	b2da      	uxtb	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	701a      	strb	r2, [r3, #0]
 800539e:	e0c4      	b.n	800552a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	2b7f      	cmp	r3, #127	; 0x7f
 80053ac:	d912      	bls.n	80053d4 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	09da      	lsrs	r2, r3, #7
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	3b01      	subs	r3, #1
 80053b6:	60fb      	str	r3, [r7, #12]
 80053b8:	b2d2      	uxtb	r2, r2
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	3a01      	subs	r2, #1
 80053c6:	60fa      	str	r2, [r7, #12]
 80053c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80053cc:	b2da      	uxtb	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	701a      	strb	r2, [r3, #0]
 80053d2:	e006      	b.n	80053e2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	3b01      	subs	r3, #1
 80053d8:	60fb      	str	r3, [r7, #12]
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	b2da      	uxtb	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2b7e      	cmp	r3, #126	; 0x7e
 80053e6:	d807      	bhi.n	80053f8 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	3b01      	subs	r3, #1
 80053ec:	60fb      	str	r3, [r7, #12]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	b2da      	uxtb	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	701a      	strb	r2, [r3, #0]
 80053f6:	e098      	b.n	800552a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053fe:	d212      	bcs.n	8005426 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	09da      	lsrs	r2, r3, #7
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	3b01      	subs	r3, #1
 8005408:	60fb      	str	r3, [r7, #12]
 800540a:	b2d2      	uxtb	r2, r2
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	b2db      	uxtb	r3, r3
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	3a01      	subs	r2, #1
 8005418:	60fa      	str	r2, [r7, #12]
 800541a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800541e:	b2da      	uxtb	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	701a      	strb	r2, [r3, #0]
 8005424:	e081      	b.n	800552a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800542c:	d21d      	bcs.n	800546a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	0b9a      	lsrs	r2, r3, #14
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	3b01      	subs	r3, #1
 8005436:	60fb      	str	r3, [r7, #12]
 8005438:	b2d2      	uxtb	r2, r2
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	09db      	lsrs	r3, r3, #7
 8005442:	b2db      	uxtb	r3, r3
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	3a01      	subs	r2, #1
 8005448:	60fa      	str	r2, [r7, #12]
 800544a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800544e:	b2da      	uxtb	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	b2db      	uxtb	r3, r3
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	3a01      	subs	r2, #1
 800545c:	60fa      	str	r2, [r7, #12]
 800545e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005462:	b2da      	uxtb	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	701a      	strb	r2, [r3, #0]
 8005468:	e05f      	b.n	800552a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005470:	d228      	bcs.n	80054c4 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	0d5a      	lsrs	r2, r3, #21
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	3b01      	subs	r3, #1
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	b2d2      	uxtb	r2, r2
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	0b9b      	lsrs	r3, r3, #14
 8005486:	b2db      	uxtb	r3, r3
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	3a01      	subs	r2, #1
 800548c:	60fa      	str	r2, [r7, #12]
 800548e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005492:	b2da      	uxtb	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	09db      	lsrs	r3, r3, #7
 800549c:	b2db      	uxtb	r3, r3
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	3a01      	subs	r2, #1
 80054a2:	60fa      	str	r2, [r7, #12]
 80054a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	3a01      	subs	r2, #1
 80054b6:	60fa      	str	r2, [r7, #12]
 80054b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	701a      	strb	r2, [r3, #0]
 80054c2:	e032      	b.n	800552a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	0f1a      	lsrs	r2, r3, #28
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	3b01      	subs	r3, #1
 80054cc:	60fb      	str	r3, [r7, #12]
 80054ce:	b2d2      	uxtb	r2, r2
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	0d5b      	lsrs	r3, r3, #21
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	3a01      	subs	r2, #1
 80054de:	60fa      	str	r2, [r7, #12]
 80054e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	0b9b      	lsrs	r3, r3, #14
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	3a01      	subs	r2, #1
 80054f4:	60fa      	str	r2, [r7, #12]
 80054f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80054fa:	b2da      	uxtb	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	09db      	lsrs	r3, r3, #7
 8005504:	b2db      	uxtb	r3, r3
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	3a01      	subs	r2, #1
 800550a:	60fa      	str	r2, [r7, #12]
 800550c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005510:	b2da      	uxtb	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	b2db      	uxtb	r3, r3
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	3a01      	subs	r2, #1
 800551e:	60fa      	str	r2, [r7, #12]
 8005520:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005524:	b2da      	uxtb	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800552a:	4b1f      	ldr	r3, [pc, #124]	; (80055a8 <_SendPacket+0x274>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005530:	4b1c      	ldr	r3, [pc, #112]	; (80055a4 <_SendPacket+0x270>)
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	627b      	str	r3, [r7, #36]	; 0x24
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	623b      	str	r3, [r7, #32]
 8005542:	e00b      	b.n	800555c <_SendPacket+0x228>
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	b2da      	uxtb	r2, r3
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	1c59      	adds	r1, r3, #1
 800554c:	6279      	str	r1, [r7, #36]	; 0x24
 800554e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005552:	b2d2      	uxtb	r2, r2
 8005554:	701a      	strb	r2, [r3, #0]
 8005556:	6a3b      	ldr	r3, [r7, #32]
 8005558:	09db      	lsrs	r3, r3, #7
 800555a:	623b      	str	r3, [r7, #32]
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	2b7f      	cmp	r3, #127	; 0x7f
 8005560:	d8f0      	bhi.n	8005544 <_SendPacket+0x210>
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	1c5a      	adds	r2, r3, #1
 8005566:	627a      	str	r2, [r7, #36]	; 0x24
 8005568:	6a3a      	ldr	r2, [r7, #32]
 800556a:	b2d2      	uxtb	r2, r2
 800556c:	701a      	strb	r2, [r3, #0]
 800556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005570:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005572:	4b0c      	ldr	r3, [pc, #48]	; (80055a4 <_SendPacket+0x270>)
 8005574:	785b      	ldrb	r3, [r3, #1]
 8005576:	4618      	mov	r0, r3
 8005578:	68ba      	ldr	r2, [r7, #8]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	461a      	mov	r2, r3
 8005580:	68f9      	ldr	r1, [r7, #12]
 8005582:	f7fa fe35 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005586:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800558e:	4a05      	ldr	r2, [pc, #20]	; (80055a4 <_SendPacket+0x270>)
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	60d3      	str	r3, [r2, #12]
 8005594:	e00f      	b.n	80055b6 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005596:	4b03      	ldr	r3, [pc, #12]	; (80055a4 <_SendPacket+0x270>)
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	3301      	adds	r3, #1
 800559c:	b2da      	uxtb	r2, r3
 800559e:	4b01      	ldr	r3, [pc, #4]	; (80055a4 <_SendPacket+0x270>)
 80055a0:	701a      	strb	r2, [r3, #0]
 80055a2:	e008      	b.n	80055b6 <_SendPacket+0x282>
 80055a4:	20014300 	.word	0x20014300
 80055a8:	e0001004 	.word	0xe0001004
    goto SendDone;
 80055ac:	bf00      	nop
 80055ae:	e002      	b.n	80055b6 <_SendPacket+0x282>
      goto SendDone;
 80055b0:	bf00      	nop
 80055b2:	e000      	b.n	80055b6 <_SendPacket+0x282>
      goto SendDone;
 80055b4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80055b6:	4b14      	ldr	r3, [pc, #80]	; (8005608 <_SendPacket+0x2d4>)
 80055b8:	7e1b      	ldrb	r3, [r3, #24]
 80055ba:	4619      	mov	r1, r3
 80055bc:	4a13      	ldr	r2, [pc, #76]	; (800560c <_SendPacket+0x2d8>)
 80055be:	460b      	mov	r3, r1
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	440b      	add	r3, r1
 80055c4:	00db      	lsls	r3, r3, #3
 80055c6:	4413      	add	r3, r2
 80055c8:	336c      	adds	r3, #108	; 0x6c
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	4b0e      	ldr	r3, [pc, #56]	; (8005608 <_SendPacket+0x2d4>)
 80055ce:	7e1b      	ldrb	r3, [r3, #24]
 80055d0:	4618      	mov	r0, r3
 80055d2:	490e      	ldr	r1, [pc, #56]	; (800560c <_SendPacket+0x2d8>)
 80055d4:	4603      	mov	r3, r0
 80055d6:	005b      	lsls	r3, r3, #1
 80055d8:	4403      	add	r3, r0
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	440b      	add	r3, r1
 80055de:	3370      	adds	r3, #112	; 0x70
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d00b      	beq.n	80055fe <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80055e6:	4b08      	ldr	r3, [pc, #32]	; (8005608 <_SendPacket+0x2d4>)
 80055e8:	789b      	ldrb	r3, [r3, #2]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d107      	bne.n	80055fe <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80055ee:	4b06      	ldr	r3, [pc, #24]	; (8005608 <_SendPacket+0x2d4>)
 80055f0:	2201      	movs	r2, #1
 80055f2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80055f4:	f7ff fdbc 	bl	8005170 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80055f8:	4b03      	ldr	r3, [pc, #12]	; (8005608 <_SendPacket+0x2d4>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80055fe:	bf00      	nop
 8005600:	3728      	adds	r7, #40	; 0x28
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	20014300 	.word	0x20014300
 800560c:	20012e40 	.word	0x20012e40

08005610 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af02      	add	r7, sp, #8
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
 800561c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800561e:	2300      	movs	r3, #0
 8005620:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005624:	4917      	ldr	r1, [pc, #92]	; (8005684 <SEGGER_SYSVIEW_Init+0x74>)
 8005626:	4818      	ldr	r0, [pc, #96]	; (8005688 <SEGGER_SYSVIEW_Init+0x78>)
 8005628:	f7ff fc76 	bl	8004f18 <SEGGER_RTT_AllocUpBuffer>
 800562c:	4603      	mov	r3, r0
 800562e:	b2da      	uxtb	r2, r3
 8005630:	4b16      	ldr	r3, [pc, #88]	; (800568c <SEGGER_SYSVIEW_Init+0x7c>)
 8005632:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005634:	4b15      	ldr	r3, [pc, #84]	; (800568c <SEGGER_SYSVIEW_Init+0x7c>)
 8005636:	785a      	ldrb	r2, [r3, #1]
 8005638:	4b14      	ldr	r3, [pc, #80]	; (800568c <SEGGER_SYSVIEW_Init+0x7c>)
 800563a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800563c:	4b13      	ldr	r3, [pc, #76]	; (800568c <SEGGER_SYSVIEW_Init+0x7c>)
 800563e:	7e1b      	ldrb	r3, [r3, #24]
 8005640:	4618      	mov	r0, r3
 8005642:	2300      	movs	r3, #0
 8005644:	9300      	str	r3, [sp, #0]
 8005646:	2308      	movs	r3, #8
 8005648:	4a11      	ldr	r2, [pc, #68]	; (8005690 <SEGGER_SYSVIEW_Init+0x80>)
 800564a:	490f      	ldr	r1, [pc, #60]	; (8005688 <SEGGER_SYSVIEW_Init+0x78>)
 800564c:	f7ff fce8 	bl	8005020 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005650:	4b0e      	ldr	r3, [pc, #56]	; (800568c <SEGGER_SYSVIEW_Init+0x7c>)
 8005652:	2200      	movs	r2, #0
 8005654:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005656:	4b0f      	ldr	r3, [pc, #60]	; (8005694 <SEGGER_SYSVIEW_Init+0x84>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a0c      	ldr	r2, [pc, #48]	; (800568c <SEGGER_SYSVIEW_Init+0x7c>)
 800565c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800565e:	4a0b      	ldr	r2, [pc, #44]	; (800568c <SEGGER_SYSVIEW_Init+0x7c>)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005664:	4a09      	ldr	r2, [pc, #36]	; (800568c <SEGGER_SYSVIEW_Init+0x7c>)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800566a:	4a08      	ldr	r2, [pc, #32]	; (800568c <SEGGER_SYSVIEW_Init+0x7c>)
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005670:	4a06      	ldr	r2, [pc, #24]	; (800568c <SEGGER_SYSVIEW_Init+0x7c>)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005676:	4b05      	ldr	r3, [pc, #20]	; (800568c <SEGGER_SYSVIEW_Init+0x7c>)
 8005678:	2200      	movs	r2, #0
 800567a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800567c:	bf00      	nop
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	200132f8 	.word	0x200132f8
 8005688:	08006924 	.word	0x08006924
 800568c:	20014300 	.word	0x20014300
 8005690:	200142f8 	.word	0x200142f8
 8005694:	e0001004 	.word	0xe0001004

08005698 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80056a0:	4a04      	ldr	r2, [pc, #16]	; (80056b4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6113      	str	r3, [r2, #16]
}
 80056a6:	bf00      	nop
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	20014300 	.word	0x20014300

080056b8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80056c0:	f3ef 8311 	mrs	r3, BASEPRI
 80056c4:	f04f 0120 	mov.w	r1, #32
 80056c8:	f381 8811 	msr	BASEPRI, r1
 80056cc:	60fb      	str	r3, [r7, #12]
 80056ce:	4808      	ldr	r0, [pc, #32]	; (80056f0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80056d0:	f7ff fd42 	bl	8005158 <_PreparePacket>
 80056d4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	68b9      	ldr	r1, [r7, #8]
 80056da:	68b8      	ldr	r0, [r7, #8]
 80056dc:	f7ff fe2a 	bl	8005334 <_SendPacket>
  RECORD_END();
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f383 8811 	msr	BASEPRI, r3
}
 80056e6:	bf00      	nop
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	20014330 	.word	0x20014330

080056f4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b088      	sub	sp, #32
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80056fe:	f3ef 8311 	mrs	r3, BASEPRI
 8005702:	f04f 0120 	mov.w	r1, #32
 8005706:	f381 8811 	msr	BASEPRI, r1
 800570a:	617b      	str	r3, [r7, #20]
 800570c:	4816      	ldr	r0, [pc, #88]	; (8005768 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800570e:	f7ff fd23 	bl	8005158 <_PreparePacket>
 8005712:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	61fb      	str	r3, [r7, #28]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	61bb      	str	r3, [r7, #24]
 8005720:	e00b      	b.n	800573a <SEGGER_SYSVIEW_RecordU32+0x46>
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	b2da      	uxtb	r2, r3
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	1c59      	adds	r1, r3, #1
 800572a:	61f9      	str	r1, [r7, #28]
 800572c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005730:	b2d2      	uxtb	r2, r2
 8005732:	701a      	strb	r2, [r3, #0]
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	09db      	lsrs	r3, r3, #7
 8005738:	61bb      	str	r3, [r7, #24]
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	2b7f      	cmp	r3, #127	; 0x7f
 800573e:	d8f0      	bhi.n	8005722 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	1c5a      	adds	r2, r3, #1
 8005744:	61fa      	str	r2, [r7, #28]
 8005746:	69ba      	ldr	r2, [r7, #24]
 8005748:	b2d2      	uxtb	r2, r2
 800574a:	701a      	strb	r2, [r3, #0]
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	68f9      	ldr	r1, [r7, #12]
 8005754:	6938      	ldr	r0, [r7, #16]
 8005756:	f7ff fded 	bl	8005334 <_SendPacket>
  RECORD_END();
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	f383 8811 	msr	BASEPRI, r3
}
 8005760:	bf00      	nop
 8005762:	3720      	adds	r7, #32
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	20014330 	.word	0x20014330

0800576c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800576c:	b580      	push	{r7, lr}
 800576e:	b08c      	sub	sp, #48	; 0x30
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005778:	f3ef 8311 	mrs	r3, BASEPRI
 800577c:	f04f 0120 	mov.w	r1, #32
 8005780:	f381 8811 	msr	BASEPRI, r1
 8005784:	61fb      	str	r3, [r7, #28]
 8005786:	4825      	ldr	r0, [pc, #148]	; (800581c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005788:	f7ff fce6 	bl	8005158 <_PreparePacket>
 800578c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	62bb      	str	r3, [r7, #40]	; 0x28
 800579a:	e00b      	b.n	80057b4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800579c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a2:	1c59      	adds	r1, r3, #1
 80057a4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80057a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057aa:	b2d2      	uxtb	r2, r2
 80057ac:	701a      	strb	r2, [r3, #0]
 80057ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b0:	09db      	lsrs	r3, r3, #7
 80057b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80057b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b6:	2b7f      	cmp	r3, #127	; 0x7f
 80057b8:	d8f0      	bhi.n	800579c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80057ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057bc:	1c5a      	adds	r2, r3, #1
 80057be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057c2:	b2d2      	uxtb	r2, r2
 80057c4:	701a      	strb	r2, [r3, #0]
 80057c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	627b      	str	r3, [r7, #36]	; 0x24
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	623b      	str	r3, [r7, #32]
 80057d2:	e00b      	b.n	80057ec <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	1c59      	adds	r1, r3, #1
 80057dc:	6279      	str	r1, [r7, #36]	; 0x24
 80057de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057e2:	b2d2      	uxtb	r2, r2
 80057e4:	701a      	strb	r2, [r3, #0]
 80057e6:	6a3b      	ldr	r3, [r7, #32]
 80057e8:	09db      	lsrs	r3, r3, #7
 80057ea:	623b      	str	r3, [r7, #32]
 80057ec:	6a3b      	ldr	r3, [r7, #32]
 80057ee:	2b7f      	cmp	r3, #127	; 0x7f
 80057f0:	d8f0      	bhi.n	80057d4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	1c5a      	adds	r2, r3, #1
 80057f6:	627a      	str	r2, [r7, #36]	; 0x24
 80057f8:	6a3a      	ldr	r2, [r7, #32]
 80057fa:	b2d2      	uxtb	r2, r2
 80057fc:	701a      	strb	r2, [r3, #0]
 80057fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005800:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	6979      	ldr	r1, [r7, #20]
 8005806:	69b8      	ldr	r0, [r7, #24]
 8005808:	f7ff fd94 	bl	8005334 <_SendPacket>
  RECORD_END();
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	f383 8811 	msr	BASEPRI, r3
}
 8005812:	bf00      	nop
 8005814:	3730      	adds	r7, #48	; 0x30
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	20014330 	.word	0x20014330

08005820 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005820:	b580      	push	{r7, lr}
 8005822:	b08e      	sub	sp, #56	; 0x38
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
 800582c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800582e:	f3ef 8311 	mrs	r3, BASEPRI
 8005832:	f04f 0120 	mov.w	r1, #32
 8005836:	f381 8811 	msr	BASEPRI, r1
 800583a:	61fb      	str	r3, [r7, #28]
 800583c:	4832      	ldr	r0, [pc, #200]	; (8005908 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800583e:	f7ff fc8b 	bl	8005158 <_PreparePacket>
 8005842:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	637b      	str	r3, [r7, #52]	; 0x34
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	633b      	str	r3, [r7, #48]	; 0x30
 8005850:	e00b      	b.n	800586a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005854:	b2da      	uxtb	r2, r3
 8005856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005858:	1c59      	adds	r1, r3, #1
 800585a:	6379      	str	r1, [r7, #52]	; 0x34
 800585c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005860:	b2d2      	uxtb	r2, r2
 8005862:	701a      	strb	r2, [r3, #0]
 8005864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005866:	09db      	lsrs	r3, r3, #7
 8005868:	633b      	str	r3, [r7, #48]	; 0x30
 800586a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586c:	2b7f      	cmp	r3, #127	; 0x7f
 800586e:	d8f0      	bhi.n	8005852 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005872:	1c5a      	adds	r2, r3, #1
 8005874:	637a      	str	r2, [r7, #52]	; 0x34
 8005876:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005878:	b2d2      	uxtb	r2, r2
 800587a:	701a      	strb	r2, [r3, #0]
 800587c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800587e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	62bb      	str	r3, [r7, #40]	; 0x28
 8005888:	e00b      	b.n	80058a2 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800588a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588c:	b2da      	uxtb	r2, r3
 800588e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005890:	1c59      	adds	r1, r3, #1
 8005892:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005894:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005898:	b2d2      	uxtb	r2, r2
 800589a:	701a      	strb	r2, [r3, #0]
 800589c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589e:	09db      	lsrs	r3, r3, #7
 80058a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80058a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a4:	2b7f      	cmp	r3, #127	; 0x7f
 80058a6:	d8f0      	bhi.n	800588a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80058a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058aa:	1c5a      	adds	r2, r3, #1
 80058ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058b0:	b2d2      	uxtb	r2, r2
 80058b2:	701a      	strb	r2, [r3, #0]
 80058b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	627b      	str	r3, [r7, #36]	; 0x24
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	623b      	str	r3, [r7, #32]
 80058c0:	e00b      	b.n	80058da <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80058c2:	6a3b      	ldr	r3, [r7, #32]
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c8:	1c59      	adds	r1, r3, #1
 80058ca:	6279      	str	r1, [r7, #36]	; 0x24
 80058cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058d0:	b2d2      	uxtb	r2, r2
 80058d2:	701a      	strb	r2, [r3, #0]
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	09db      	lsrs	r3, r3, #7
 80058d8:	623b      	str	r3, [r7, #32]
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	2b7f      	cmp	r3, #127	; 0x7f
 80058de:	d8f0      	bhi.n	80058c2 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80058e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e2:	1c5a      	adds	r2, r3, #1
 80058e4:	627a      	str	r2, [r7, #36]	; 0x24
 80058e6:	6a3a      	ldr	r2, [r7, #32]
 80058e8:	b2d2      	uxtb	r2, r2
 80058ea:	701a      	strb	r2, [r3, #0]
 80058ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ee:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	6979      	ldr	r1, [r7, #20]
 80058f4:	69b8      	ldr	r0, [r7, #24]
 80058f6:	f7ff fd1d 	bl	8005334 <_SendPacket>
  RECORD_END();
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	f383 8811 	msr	BASEPRI, r3
}
 8005900:	bf00      	nop
 8005902:	3738      	adds	r7, #56	; 0x38
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	20014330 	.word	0x20014330

0800590c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800590c:	b580      	push	{r7, lr}
 800590e:	b090      	sub	sp, #64	; 0x40
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
 8005918:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800591a:	f3ef 8311 	mrs	r3, BASEPRI
 800591e:	f04f 0120 	mov.w	r1, #32
 8005922:	f381 8811 	msr	BASEPRI, r1
 8005926:	61fb      	str	r3, [r7, #28]
 8005928:	4840      	ldr	r0, [pc, #256]	; (8005a2c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800592a:	f7ff fc15 	bl	8005158 <_PreparePacket>
 800592e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	63bb      	str	r3, [r7, #56]	; 0x38
 800593c:	e00b      	b.n	8005956 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800593e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005940:	b2da      	uxtb	r2, r3
 8005942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005944:	1c59      	adds	r1, r3, #1
 8005946:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005948:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800594c:	b2d2      	uxtb	r2, r2
 800594e:	701a      	strb	r2, [r3, #0]
 8005950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005952:	09db      	lsrs	r3, r3, #7
 8005954:	63bb      	str	r3, [r7, #56]	; 0x38
 8005956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005958:	2b7f      	cmp	r3, #127	; 0x7f
 800595a:	d8f0      	bhi.n	800593e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800595c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800595e:	1c5a      	adds	r2, r3, #1
 8005960:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005962:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005964:	b2d2      	uxtb	r2, r2
 8005966:	701a      	strb	r2, [r3, #0]
 8005968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800596a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	637b      	str	r3, [r7, #52]	; 0x34
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	633b      	str	r3, [r7, #48]	; 0x30
 8005974:	e00b      	b.n	800598e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005978:	b2da      	uxtb	r2, r3
 800597a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597c:	1c59      	adds	r1, r3, #1
 800597e:	6379      	str	r1, [r7, #52]	; 0x34
 8005980:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005984:	b2d2      	uxtb	r2, r2
 8005986:	701a      	strb	r2, [r3, #0]
 8005988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598a:	09db      	lsrs	r3, r3, #7
 800598c:	633b      	str	r3, [r7, #48]	; 0x30
 800598e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005990:	2b7f      	cmp	r3, #127	; 0x7f
 8005992:	d8f0      	bhi.n	8005976 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005996:	1c5a      	adds	r2, r3, #1
 8005998:	637a      	str	r2, [r7, #52]	; 0x34
 800599a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800599c:	b2d2      	uxtb	r2, r2
 800599e:	701a      	strb	r2, [r3, #0]
 80059a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80059ac:	e00b      	b.n	80059c6 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80059ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b0:	b2da      	uxtb	r2, r3
 80059b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b4:	1c59      	adds	r1, r3, #1
 80059b6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80059b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059bc:	b2d2      	uxtb	r2, r2
 80059be:	701a      	strb	r2, [r3, #0]
 80059c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c2:	09db      	lsrs	r3, r3, #7
 80059c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80059c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c8:	2b7f      	cmp	r3, #127	; 0x7f
 80059ca:	d8f0      	bhi.n	80059ae <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80059cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ce:	1c5a      	adds	r2, r3, #1
 80059d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059d4:	b2d2      	uxtb	r2, r2
 80059d6:	701a      	strb	r2, [r3, #0]
 80059d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	627b      	str	r3, [r7, #36]	; 0x24
 80059e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059e2:	623b      	str	r3, [r7, #32]
 80059e4:	e00b      	b.n	80059fe <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	b2da      	uxtb	r2, r3
 80059ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ec:	1c59      	adds	r1, r3, #1
 80059ee:	6279      	str	r1, [r7, #36]	; 0x24
 80059f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059f4:	b2d2      	uxtb	r2, r2
 80059f6:	701a      	strb	r2, [r3, #0]
 80059f8:	6a3b      	ldr	r3, [r7, #32]
 80059fa:	09db      	lsrs	r3, r3, #7
 80059fc:	623b      	str	r3, [r7, #32]
 80059fe:	6a3b      	ldr	r3, [r7, #32]
 8005a00:	2b7f      	cmp	r3, #127	; 0x7f
 8005a02:	d8f0      	bhi.n	80059e6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a06:	1c5a      	adds	r2, r3, #1
 8005a08:	627a      	str	r2, [r7, #36]	; 0x24
 8005a0a:	6a3a      	ldr	r2, [r7, #32]
 8005a0c:	b2d2      	uxtb	r2, r2
 8005a0e:	701a      	strb	r2, [r3, #0]
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a12:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	6979      	ldr	r1, [r7, #20]
 8005a18:	69b8      	ldr	r0, [r7, #24]
 8005a1a:	f7ff fc8b 	bl	8005334 <_SendPacket>
  RECORD_END();
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	f383 8811 	msr	BASEPRI, r3
}
 8005a24:	bf00      	nop
 8005a26:	3740      	adds	r7, #64	; 0x40
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	20014330 	.word	0x20014330

08005a30 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b08c      	sub	sp, #48	; 0x30
 8005a34:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005a36:	4b58      	ldr	r3, [pc, #352]	; (8005b98 <SEGGER_SYSVIEW_Start+0x168>)
 8005a38:	2201      	movs	r2, #1
 8005a3a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005a3c:	f3ef 8311 	mrs	r3, BASEPRI
 8005a40:	f04f 0120 	mov.w	r1, #32
 8005a44:	f381 8811 	msr	BASEPRI, r1
 8005a48:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005a4a:	4b53      	ldr	r3, [pc, #332]	; (8005b98 <SEGGER_SYSVIEW_Start+0x168>)
 8005a4c:	785b      	ldrb	r3, [r3, #1]
 8005a4e:	220a      	movs	r2, #10
 8005a50:	4952      	ldr	r1, [pc, #328]	; (8005b9c <SEGGER_SYSVIEW_Start+0x16c>)
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7fa fbcc 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005a5e:	200a      	movs	r0, #10
 8005a60:	f7ff fe2a 	bl	80056b8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005a64:	f3ef 8311 	mrs	r3, BASEPRI
 8005a68:	f04f 0120 	mov.w	r1, #32
 8005a6c:	f381 8811 	msr	BASEPRI, r1
 8005a70:	60bb      	str	r3, [r7, #8]
 8005a72:	484b      	ldr	r0, [pc, #300]	; (8005ba0 <SEGGER_SYSVIEW_Start+0x170>)
 8005a74:	f7ff fb70 	bl	8005158 <_PreparePacket>
 8005a78:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a82:	4b45      	ldr	r3, [pc, #276]	; (8005b98 <SEGGER_SYSVIEW_Start+0x168>)
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a88:	e00b      	b.n	8005aa2 <SEGGER_SYSVIEW_Start+0x72>
 8005a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8c:	b2da      	uxtb	r2, r3
 8005a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a90:	1c59      	adds	r1, r3, #1
 8005a92:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a98:	b2d2      	uxtb	r2, r2
 8005a9a:	701a      	strb	r2, [r3, #0]
 8005a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9e:	09db      	lsrs	r3, r3, #7
 8005aa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa4:	2b7f      	cmp	r3, #127	; 0x7f
 8005aa6:	d8f0      	bhi.n	8005a8a <SEGGER_SYSVIEW_Start+0x5a>
 8005aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aaa:	1c5a      	adds	r2, r3, #1
 8005aac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005aae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ab0:	b2d2      	uxtb	r2, r2
 8005ab2:	701a      	strb	r2, [r3, #0]
 8005ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	627b      	str	r3, [r7, #36]	; 0x24
 8005abc:	4b36      	ldr	r3, [pc, #216]	; (8005b98 <SEGGER_SYSVIEW_Start+0x168>)
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	623b      	str	r3, [r7, #32]
 8005ac2:	e00b      	b.n	8005adc <SEGGER_SYSVIEW_Start+0xac>
 8005ac4:	6a3b      	ldr	r3, [r7, #32]
 8005ac6:	b2da      	uxtb	r2, r3
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	1c59      	adds	r1, r3, #1
 8005acc:	6279      	str	r1, [r7, #36]	; 0x24
 8005ace:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ad2:	b2d2      	uxtb	r2, r2
 8005ad4:	701a      	strb	r2, [r3, #0]
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	09db      	lsrs	r3, r3, #7
 8005ada:	623b      	str	r3, [r7, #32]
 8005adc:	6a3b      	ldr	r3, [r7, #32]
 8005ade:	2b7f      	cmp	r3, #127	; 0x7f
 8005ae0:	d8f0      	bhi.n	8005ac4 <SEGGER_SYSVIEW_Start+0x94>
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae4:	1c5a      	adds	r2, r3, #1
 8005ae6:	627a      	str	r2, [r7, #36]	; 0x24
 8005ae8:	6a3a      	ldr	r2, [r7, #32]
 8005aea:	b2d2      	uxtb	r2, r2
 8005aec:	701a      	strb	r2, [r3, #0]
 8005aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	61fb      	str	r3, [r7, #28]
 8005af6:	4b28      	ldr	r3, [pc, #160]	; (8005b98 <SEGGER_SYSVIEW_Start+0x168>)
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	61bb      	str	r3, [r7, #24]
 8005afc:	e00b      	b.n	8005b16 <SEGGER_SYSVIEW_Start+0xe6>
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	1c59      	adds	r1, r3, #1
 8005b06:	61f9      	str	r1, [r7, #28]
 8005b08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b0c:	b2d2      	uxtb	r2, r2
 8005b0e:	701a      	strb	r2, [r3, #0]
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	09db      	lsrs	r3, r3, #7
 8005b14:	61bb      	str	r3, [r7, #24]
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	2b7f      	cmp	r3, #127	; 0x7f
 8005b1a:	d8f0      	bhi.n	8005afe <SEGGER_SYSVIEW_Start+0xce>
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	1c5a      	adds	r2, r3, #1
 8005b20:	61fa      	str	r2, [r7, #28]
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	b2d2      	uxtb	r2, r2
 8005b26:	701a      	strb	r2, [r3, #0]
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	617b      	str	r3, [r7, #20]
 8005b30:	2300      	movs	r3, #0
 8005b32:	613b      	str	r3, [r7, #16]
 8005b34:	e00b      	b.n	8005b4e <SEGGER_SYSVIEW_Start+0x11e>
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	1c59      	adds	r1, r3, #1
 8005b3e:	6179      	str	r1, [r7, #20]
 8005b40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b44:	b2d2      	uxtb	r2, r2
 8005b46:	701a      	strb	r2, [r3, #0]
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	09db      	lsrs	r3, r3, #7
 8005b4c:	613b      	str	r3, [r7, #16]
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	2b7f      	cmp	r3, #127	; 0x7f
 8005b52:	d8f0      	bhi.n	8005b36 <SEGGER_SYSVIEW_Start+0x106>
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	1c5a      	adds	r2, r3, #1
 8005b58:	617a      	str	r2, [r7, #20]
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	b2d2      	uxtb	r2, r2
 8005b5e:	701a      	strb	r2, [r3, #0]
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005b64:	2218      	movs	r2, #24
 8005b66:	6839      	ldr	r1, [r7, #0]
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f7ff fbe3 	bl	8005334 <_SendPacket>
      RECORD_END();
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005b74:	4b08      	ldr	r3, [pc, #32]	; (8005b98 <SEGGER_SYSVIEW_Start+0x168>)
 8005b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d002      	beq.n	8005b82 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005b7c:	4b06      	ldr	r3, [pc, #24]	; (8005b98 <SEGGER_SYSVIEW_Start+0x168>)
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b80:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005b82:	f000 f9eb 	bl	8005f5c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005b86:	f000 f9b1 	bl	8005eec <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005b8a:	f000 fc83 	bl	8006494 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005b8e:	bf00      	nop
 8005b90:	3730      	adds	r7, #48	; 0x30
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	20014300 	.word	0x20014300
 8005b9c:	08006a04 	.word	0x08006a04
 8005ba0:	20014330 	.word	0x20014330

08005ba4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005baa:	f3ef 8311 	mrs	r3, BASEPRI
 8005bae:	f04f 0120 	mov.w	r1, #32
 8005bb2:	f381 8811 	msr	BASEPRI, r1
 8005bb6:	607b      	str	r3, [r7, #4]
 8005bb8:	480b      	ldr	r0, [pc, #44]	; (8005be8 <SEGGER_SYSVIEW_Stop+0x44>)
 8005bba:	f7ff facd 	bl	8005158 <_PreparePacket>
 8005bbe:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005bc0:	4b0a      	ldr	r3, [pc, #40]	; (8005bec <SEGGER_SYSVIEW_Stop+0x48>)
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d007      	beq.n	8005bd8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005bc8:	220b      	movs	r2, #11
 8005bca:	6839      	ldr	r1, [r7, #0]
 8005bcc:	6838      	ldr	r0, [r7, #0]
 8005bce:	f7ff fbb1 	bl	8005334 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005bd2:	4b06      	ldr	r3, [pc, #24]	; (8005bec <SEGGER_SYSVIEW_Stop+0x48>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f383 8811 	msr	BASEPRI, r3
}
 8005bde:	bf00      	nop
 8005be0:	3708      	adds	r7, #8
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	20014330 	.word	0x20014330
 8005bec:	20014300 	.word	0x20014300

08005bf0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b08c      	sub	sp, #48	; 0x30
 8005bf4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005bf6:	f3ef 8311 	mrs	r3, BASEPRI
 8005bfa:	f04f 0120 	mov.w	r1, #32
 8005bfe:	f381 8811 	msr	BASEPRI, r1
 8005c02:	60fb      	str	r3, [r7, #12]
 8005c04:	4845      	ldr	r0, [pc, #276]	; (8005d1c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005c06:	f7ff faa7 	bl	8005158 <_PreparePacket>
 8005c0a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c14:	4b42      	ldr	r3, [pc, #264]	; (8005d20 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c1a:	e00b      	b.n	8005c34 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1e:	b2da      	uxtb	r2, r3
 8005c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c22:	1c59      	adds	r1, r3, #1
 8005c24:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005c26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c2a:	b2d2      	uxtb	r2, r2
 8005c2c:	701a      	strb	r2, [r3, #0]
 8005c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c30:	09db      	lsrs	r3, r3, #7
 8005c32:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c36:	2b7f      	cmp	r3, #127	; 0x7f
 8005c38:	d8f0      	bhi.n	8005c1c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3c:	1c5a      	adds	r2, r3, #1
 8005c3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c42:	b2d2      	uxtb	r2, r2
 8005c44:	701a      	strb	r2, [r3, #0]
 8005c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c48:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c4e:	4b34      	ldr	r3, [pc, #208]	; (8005d20 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	623b      	str	r3, [r7, #32]
 8005c54:	e00b      	b.n	8005c6e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005c56:	6a3b      	ldr	r3, [r7, #32]
 8005c58:	b2da      	uxtb	r2, r3
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5c:	1c59      	adds	r1, r3, #1
 8005c5e:	6279      	str	r1, [r7, #36]	; 0x24
 8005c60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c64:	b2d2      	uxtb	r2, r2
 8005c66:	701a      	strb	r2, [r3, #0]
 8005c68:	6a3b      	ldr	r3, [r7, #32]
 8005c6a:	09db      	lsrs	r3, r3, #7
 8005c6c:	623b      	str	r3, [r7, #32]
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	2b7f      	cmp	r3, #127	; 0x7f
 8005c72:	d8f0      	bhi.n	8005c56 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	1c5a      	adds	r2, r3, #1
 8005c78:	627a      	str	r2, [r7, #36]	; 0x24
 8005c7a:	6a3a      	ldr	r2, [r7, #32]
 8005c7c:	b2d2      	uxtb	r2, r2
 8005c7e:	701a      	strb	r2, [r3, #0]
 8005c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c82:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	61fb      	str	r3, [r7, #28]
 8005c88:	4b25      	ldr	r3, [pc, #148]	; (8005d20 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	61bb      	str	r3, [r7, #24]
 8005c8e:	e00b      	b.n	8005ca8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	b2da      	uxtb	r2, r3
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	1c59      	adds	r1, r3, #1
 8005c98:	61f9      	str	r1, [r7, #28]
 8005c9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c9e:	b2d2      	uxtb	r2, r2
 8005ca0:	701a      	strb	r2, [r3, #0]
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	09db      	lsrs	r3, r3, #7
 8005ca6:	61bb      	str	r3, [r7, #24]
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	2b7f      	cmp	r3, #127	; 0x7f
 8005cac:	d8f0      	bhi.n	8005c90 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	1c5a      	adds	r2, r3, #1
 8005cb2:	61fa      	str	r2, [r7, #28]
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	b2d2      	uxtb	r2, r2
 8005cb8:	701a      	strb	r2, [r3, #0]
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	617b      	str	r3, [r7, #20]
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	613b      	str	r3, [r7, #16]
 8005cc6:	e00b      	b.n	8005ce0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	b2da      	uxtb	r2, r3
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	1c59      	adds	r1, r3, #1
 8005cd0:	6179      	str	r1, [r7, #20]
 8005cd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cd6:	b2d2      	uxtb	r2, r2
 8005cd8:	701a      	strb	r2, [r3, #0]
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	09db      	lsrs	r3, r3, #7
 8005cde:	613b      	str	r3, [r7, #16]
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ce4:	d8f0      	bhi.n	8005cc8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	617a      	str	r2, [r7, #20]
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	b2d2      	uxtb	r2, r2
 8005cf0:	701a      	strb	r2, [r3, #0]
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005cf6:	2218      	movs	r2, #24
 8005cf8:	6879      	ldr	r1, [r7, #4]
 8005cfa:	68b8      	ldr	r0, [r7, #8]
 8005cfc:	f7ff fb1a 	bl	8005334 <_SendPacket>
  RECORD_END();
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005d06:	4b06      	ldr	r3, [pc, #24]	; (8005d20 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d002      	beq.n	8005d14 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005d0e:	4b04      	ldr	r3, [pc, #16]	; (8005d20 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d12:	4798      	blx	r3
  }
}
 8005d14:	bf00      	nop
 8005d16:	3730      	adds	r7, #48	; 0x30
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	20014330 	.word	0x20014330
 8005d20:	20014300 	.word	0x20014300

08005d24 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b092      	sub	sp, #72	; 0x48
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005d2c:	f3ef 8311 	mrs	r3, BASEPRI
 8005d30:	f04f 0120 	mov.w	r1, #32
 8005d34:	f381 8811 	msr	BASEPRI, r1
 8005d38:	617b      	str	r3, [r7, #20]
 8005d3a:	486a      	ldr	r0, [pc, #424]	; (8005ee4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005d3c:	f7ff fa0c 	bl	8005158 <_PreparePacket>
 8005d40:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	647b      	str	r3, [r7, #68]	; 0x44
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	4b66      	ldr	r3, [pc, #408]	; (8005ee8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	643b      	str	r3, [r7, #64]	; 0x40
 8005d56:	e00b      	b.n	8005d70 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d5e:	1c59      	adds	r1, r3, #1
 8005d60:	6479      	str	r1, [r7, #68]	; 0x44
 8005d62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d66:	b2d2      	uxtb	r2, r2
 8005d68:	701a      	strb	r2, [r3, #0]
 8005d6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d6c:	09db      	lsrs	r3, r3, #7
 8005d6e:	643b      	str	r3, [r7, #64]	; 0x40
 8005d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d72:	2b7f      	cmp	r3, #127	; 0x7f
 8005d74:	d8f0      	bhi.n	8005d58 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005d76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d78:	1c5a      	adds	r2, r3, #1
 8005d7a:	647a      	str	r2, [r7, #68]	; 0x44
 8005d7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d7e:	b2d2      	uxtb	r2, r2
 8005d80:	701a      	strb	r2, [r3, #0]
 8005d82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d84:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d90:	e00b      	b.n	8005daa <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d98:	1c59      	adds	r1, r3, #1
 8005d9a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005d9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005da0:	b2d2      	uxtb	r2, r2
 8005da2:	701a      	strb	r2, [r3, #0]
 8005da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da6:	09db      	lsrs	r3, r3, #7
 8005da8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dac:	2b7f      	cmp	r3, #127	; 0x7f
 8005dae:	d8f0      	bhi.n	8005d92 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005db2:	1c5a      	adds	r2, r3, #1
 8005db4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005db6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005db8:	b2d2      	uxtb	r2, r2
 8005dba:	701a      	strb	r2, [r3, #0]
 8005dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dbe:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f7ff f975 	bl	80050b8 <_EncodeStr>
 8005dce:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005dd0:	2209      	movs	r2, #9
 8005dd2:	68f9      	ldr	r1, [r7, #12]
 8005dd4:	6938      	ldr	r0, [r7, #16]
 8005dd6:	f7ff faad 	bl	8005334 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	637b      	str	r3, [r7, #52]	; 0x34
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	4b40      	ldr	r3, [pc, #256]	; (8005ee8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	633b      	str	r3, [r7, #48]	; 0x30
 8005dee:	e00b      	b.n	8005e08 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df2:	b2da      	uxtb	r2, r3
 8005df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df6:	1c59      	adds	r1, r3, #1
 8005df8:	6379      	str	r1, [r7, #52]	; 0x34
 8005dfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dfe:	b2d2      	uxtb	r2, r2
 8005e00:	701a      	strb	r2, [r3, #0]
 8005e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e04:	09db      	lsrs	r3, r3, #7
 8005e06:	633b      	str	r3, [r7, #48]	; 0x30
 8005e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0a:	2b7f      	cmp	r3, #127	; 0x7f
 8005e0c:	d8f0      	bhi.n	8005df0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e10:	1c5a      	adds	r2, r3, #1
 8005e12:	637a      	str	r2, [r7, #52]	; 0x34
 8005e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e16:	b2d2      	uxtb	r2, r2
 8005e18:	701a      	strb	r2, [r3, #0]
 8005e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e1c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e28:	e00b      	b.n	8005e42 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2c:	b2da      	uxtb	r2, r3
 8005e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e30:	1c59      	adds	r1, r3, #1
 8005e32:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005e34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e38:	b2d2      	uxtb	r2, r2
 8005e3a:	701a      	strb	r2, [r3, #0]
 8005e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3e:	09db      	lsrs	r3, r3, #7
 8005e40:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e44:	2b7f      	cmp	r3, #127	; 0x7f
 8005e46:	d8f0      	bhi.n	8005e2a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4a:	1c5a      	adds	r2, r3, #1
 8005e4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e50:	b2d2      	uxtb	r2, r2
 8005e52:	701a      	strb	r2, [r3, #0]
 8005e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e56:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	623b      	str	r3, [r7, #32]
 8005e62:	e00b      	b.n	8005e7c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005e64:	6a3b      	ldr	r3, [r7, #32]
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6a:	1c59      	adds	r1, r3, #1
 8005e6c:	6279      	str	r1, [r7, #36]	; 0x24
 8005e6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e72:	b2d2      	uxtb	r2, r2
 8005e74:	701a      	strb	r2, [r3, #0]
 8005e76:	6a3b      	ldr	r3, [r7, #32]
 8005e78:	09db      	lsrs	r3, r3, #7
 8005e7a:	623b      	str	r3, [r7, #32]
 8005e7c:	6a3b      	ldr	r3, [r7, #32]
 8005e7e:	2b7f      	cmp	r3, #127	; 0x7f
 8005e80:	d8f0      	bhi.n	8005e64 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e84:	1c5a      	adds	r2, r3, #1
 8005e86:	627a      	str	r2, [r7, #36]	; 0x24
 8005e88:	6a3a      	ldr	r2, [r7, #32]
 8005e8a:	b2d2      	uxtb	r2, r2
 8005e8c:	701a      	strb	r2, [r3, #0]
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e90:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	61fb      	str	r3, [r7, #28]
 8005e96:	2300      	movs	r3, #0
 8005e98:	61bb      	str	r3, [r7, #24]
 8005e9a:	e00b      	b.n	8005eb4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	1c59      	adds	r1, r3, #1
 8005ea4:	61f9      	str	r1, [r7, #28]
 8005ea6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005eaa:	b2d2      	uxtb	r2, r2
 8005eac:	701a      	strb	r2, [r3, #0]
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	09db      	lsrs	r3, r3, #7
 8005eb2:	61bb      	str	r3, [r7, #24]
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	2b7f      	cmp	r3, #127	; 0x7f
 8005eb8:	d8f0      	bhi.n	8005e9c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	1c5a      	adds	r2, r3, #1
 8005ebe:	61fa      	str	r2, [r7, #28]
 8005ec0:	69ba      	ldr	r2, [r7, #24]
 8005ec2:	b2d2      	uxtb	r2, r2
 8005ec4:	701a      	strb	r2, [r3, #0]
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005eca:	2215      	movs	r2, #21
 8005ecc:	68f9      	ldr	r1, [r7, #12]
 8005ece:	6938      	ldr	r0, [r7, #16]
 8005ed0:	f7ff fa30 	bl	8005334 <_SendPacket>
  RECORD_END();
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f383 8811 	msr	BASEPRI, r3
}
 8005eda:	bf00      	nop
 8005edc:	3748      	adds	r7, #72	; 0x48
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	20014330 	.word	0x20014330
 8005ee8:	20014300 	.word	0x20014300

08005eec <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005eec:	b580      	push	{r7, lr}
 8005eee:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005ef0:	4b07      	ldr	r3, [pc, #28]	; (8005f10 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005ef2:	6a1b      	ldr	r3, [r3, #32]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d008      	beq.n	8005f0a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005ef8:	4b05      	ldr	r3, [pc, #20]	; (8005f10 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005efa:	6a1b      	ldr	r3, [r3, #32]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005f02:	4b03      	ldr	r3, [pc, #12]	; (8005f10 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	4798      	blx	r3
  }
}
 8005f0a:	bf00      	nop
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	20014300 	.word	0x20014300

08005f14 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005f1c:	f3ef 8311 	mrs	r3, BASEPRI
 8005f20:	f04f 0120 	mov.w	r1, #32
 8005f24:	f381 8811 	msr	BASEPRI, r1
 8005f28:	617b      	str	r3, [r7, #20]
 8005f2a:	480b      	ldr	r0, [pc, #44]	; (8005f58 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005f2c:	f7ff f914 	bl	8005158 <_PreparePacket>
 8005f30:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005f32:	2280      	movs	r2, #128	; 0x80
 8005f34:	6879      	ldr	r1, [r7, #4]
 8005f36:	6938      	ldr	r0, [r7, #16]
 8005f38:	f7ff f8be 	bl	80050b8 <_EncodeStr>
 8005f3c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005f3e:	220e      	movs	r2, #14
 8005f40:	68f9      	ldr	r1, [r7, #12]
 8005f42:	6938      	ldr	r0, [r7, #16]
 8005f44:	f7ff f9f6 	bl	8005334 <_SendPacket>
  RECORD_END();
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	f383 8811 	msr	BASEPRI, r3
}
 8005f4e:	bf00      	nop
 8005f50:	3718      	adds	r7, #24
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	20014330 	.word	0x20014330

08005f5c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005f5c:	b590      	push	{r4, r7, lr}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005f62:	4b15      	ldr	r3, [pc, #84]	; (8005fb8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d01a      	beq.n	8005fa0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005f6a:	4b13      	ldr	r3, [pc, #76]	; (8005fb8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d015      	beq.n	8005fa0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005f74:	4b10      	ldr	r3, [pc, #64]	; (8005fb8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005f76:	6a1b      	ldr	r3, [r3, #32]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4798      	blx	r3
 8005f7c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005f80:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005f82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f86:	f04f 0200 	mov.w	r2, #0
 8005f8a:	f04f 0300 	mov.w	r3, #0
 8005f8e:	000a      	movs	r2, r1
 8005f90:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005f92:	4613      	mov	r3, r2
 8005f94:	461a      	mov	r2, r3
 8005f96:	4621      	mov	r1, r4
 8005f98:	200d      	movs	r0, #13
 8005f9a:	f7ff fbe7 	bl	800576c <SEGGER_SYSVIEW_RecordU32x2>
 8005f9e:	e006      	b.n	8005fae <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005fa0:	4b06      	ldr	r3, [pc, #24]	; (8005fbc <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	200c      	movs	r0, #12
 8005fa8:	f7ff fba4 	bl	80056f4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005fac:	bf00      	nop
 8005fae:	bf00      	nop
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd90      	pop	{r4, r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	20014300 	.word	0x20014300
 8005fbc:	e0001004 	.word	0xe0001004

08005fc0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005fc6:	f3ef 8311 	mrs	r3, BASEPRI
 8005fca:	f04f 0120 	mov.w	r1, #32
 8005fce:	f381 8811 	msr	BASEPRI, r1
 8005fd2:	60fb      	str	r3, [r7, #12]
 8005fd4:	4819      	ldr	r0, [pc, #100]	; (800603c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005fd6:	f7ff f8bf 	bl	8005158 <_PreparePacket>
 8005fda:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005fe0:	4b17      	ldr	r3, [pc, #92]	; (8006040 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fe8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	617b      	str	r3, [r7, #20]
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	613b      	str	r3, [r7, #16]
 8005ff2:	e00b      	b.n	800600c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	b2da      	uxtb	r2, r3
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	1c59      	adds	r1, r3, #1
 8005ffc:	6179      	str	r1, [r7, #20]
 8005ffe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006002:	b2d2      	uxtb	r2, r2
 8006004:	701a      	strb	r2, [r3, #0]
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	09db      	lsrs	r3, r3, #7
 800600a:	613b      	str	r3, [r7, #16]
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	2b7f      	cmp	r3, #127	; 0x7f
 8006010:	d8f0      	bhi.n	8005ff4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	1c5a      	adds	r2, r3, #1
 8006016:	617a      	str	r2, [r7, #20]
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	b2d2      	uxtb	r2, r2
 800601c:	701a      	strb	r2, [r3, #0]
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006022:	2202      	movs	r2, #2
 8006024:	6879      	ldr	r1, [r7, #4]
 8006026:	68b8      	ldr	r0, [r7, #8]
 8006028:	f7ff f984 	bl	8005334 <_SendPacket>
  RECORD_END();
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f383 8811 	msr	BASEPRI, r3
}
 8006032:	bf00      	nop
 8006034:	3718      	adds	r7, #24
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	20014330 	.word	0x20014330
 8006040:	e000ed04 	.word	0xe000ed04

08006044 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800604a:	f3ef 8311 	mrs	r3, BASEPRI
 800604e:	f04f 0120 	mov.w	r1, #32
 8006052:	f381 8811 	msr	BASEPRI, r1
 8006056:	607b      	str	r3, [r7, #4]
 8006058:	4807      	ldr	r0, [pc, #28]	; (8006078 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800605a:	f7ff f87d 	bl	8005158 <_PreparePacket>
 800605e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006060:	2203      	movs	r2, #3
 8006062:	6839      	ldr	r1, [r7, #0]
 8006064:	6838      	ldr	r0, [r7, #0]
 8006066:	f7ff f965 	bl	8005334 <_SendPacket>
  RECORD_END();
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f383 8811 	msr	BASEPRI, r3
}
 8006070:	bf00      	nop
 8006072:	3708      	adds	r7, #8
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	20014330 	.word	0x20014330

0800607c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006082:	f3ef 8311 	mrs	r3, BASEPRI
 8006086:	f04f 0120 	mov.w	r1, #32
 800608a:	f381 8811 	msr	BASEPRI, r1
 800608e:	607b      	str	r3, [r7, #4]
 8006090:	4807      	ldr	r0, [pc, #28]	; (80060b0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006092:	f7ff f861 	bl	8005158 <_PreparePacket>
 8006096:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006098:	2212      	movs	r2, #18
 800609a:	6839      	ldr	r1, [r7, #0]
 800609c:	6838      	ldr	r0, [r7, #0]
 800609e:	f7ff f949 	bl	8005334 <_SendPacket>
  RECORD_END();
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f383 8811 	msr	BASEPRI, r3
}
 80060a8:	bf00      	nop
 80060aa:	3708      	adds	r7, #8
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	20014330 	.word	0x20014330

080060b4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80060ba:	f3ef 8311 	mrs	r3, BASEPRI
 80060be:	f04f 0120 	mov.w	r1, #32
 80060c2:	f381 8811 	msr	BASEPRI, r1
 80060c6:	607b      	str	r3, [r7, #4]
 80060c8:	4807      	ldr	r0, [pc, #28]	; (80060e8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80060ca:	f7ff f845 	bl	8005158 <_PreparePacket>
 80060ce:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80060d0:	2211      	movs	r2, #17
 80060d2:	6839      	ldr	r1, [r7, #0]
 80060d4:	6838      	ldr	r0, [r7, #0]
 80060d6:	f7ff f92d 	bl	8005334 <_SendPacket>
  RECORD_END();
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f383 8811 	msr	BASEPRI, r3
}
 80060e0:	bf00      	nop
 80060e2:	3708      	adds	r7, #8
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	20014330 	.word	0x20014330

080060ec <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b088      	sub	sp, #32
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80060f4:	f3ef 8311 	mrs	r3, BASEPRI
 80060f8:	f04f 0120 	mov.w	r1, #32
 80060fc:	f381 8811 	msr	BASEPRI, r1
 8006100:	617b      	str	r3, [r7, #20]
 8006102:	4819      	ldr	r0, [pc, #100]	; (8006168 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006104:	f7ff f828 	bl	8005158 <_PreparePacket>
 8006108:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800610e:	4b17      	ldr	r3, [pc, #92]	; (800616c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	61fb      	str	r3, [r7, #28]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	61bb      	str	r3, [r7, #24]
 8006120:	e00b      	b.n	800613a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	b2da      	uxtb	r2, r3
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	1c59      	adds	r1, r3, #1
 800612a:	61f9      	str	r1, [r7, #28]
 800612c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006130:	b2d2      	uxtb	r2, r2
 8006132:	701a      	strb	r2, [r3, #0]
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	09db      	lsrs	r3, r3, #7
 8006138:	61bb      	str	r3, [r7, #24]
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	2b7f      	cmp	r3, #127	; 0x7f
 800613e:	d8f0      	bhi.n	8006122 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	1c5a      	adds	r2, r3, #1
 8006144:	61fa      	str	r2, [r7, #28]
 8006146:	69ba      	ldr	r2, [r7, #24]
 8006148:	b2d2      	uxtb	r2, r2
 800614a:	701a      	strb	r2, [r3, #0]
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006150:	2208      	movs	r2, #8
 8006152:	68f9      	ldr	r1, [r7, #12]
 8006154:	6938      	ldr	r0, [r7, #16]
 8006156:	f7ff f8ed 	bl	8005334 <_SendPacket>
  RECORD_END();
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f383 8811 	msr	BASEPRI, r3
}
 8006160:	bf00      	nop
 8006162:	3720      	adds	r7, #32
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	20014330 	.word	0x20014330
 800616c:	20014300 	.word	0x20014300

08006170 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006170:	b580      	push	{r7, lr}
 8006172:	b088      	sub	sp, #32
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006178:	f3ef 8311 	mrs	r3, BASEPRI
 800617c:	f04f 0120 	mov.w	r1, #32
 8006180:	f381 8811 	msr	BASEPRI, r1
 8006184:	617b      	str	r3, [r7, #20]
 8006186:	4819      	ldr	r0, [pc, #100]	; (80061ec <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006188:	f7fe ffe6 	bl	8005158 <_PreparePacket>
 800618c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006192:	4b17      	ldr	r3, [pc, #92]	; (80061f0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	61fb      	str	r3, [r7, #28]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	61bb      	str	r3, [r7, #24]
 80061a4:	e00b      	b.n	80061be <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	b2da      	uxtb	r2, r3
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	1c59      	adds	r1, r3, #1
 80061ae:	61f9      	str	r1, [r7, #28]
 80061b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061b4:	b2d2      	uxtb	r2, r2
 80061b6:	701a      	strb	r2, [r3, #0]
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	09db      	lsrs	r3, r3, #7
 80061bc:	61bb      	str	r3, [r7, #24]
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	2b7f      	cmp	r3, #127	; 0x7f
 80061c2:	d8f0      	bhi.n	80061a6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	1c5a      	adds	r2, r3, #1
 80061c8:	61fa      	str	r2, [r7, #28]
 80061ca:	69ba      	ldr	r2, [r7, #24]
 80061cc:	b2d2      	uxtb	r2, r2
 80061ce:	701a      	strb	r2, [r3, #0]
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80061d4:	2204      	movs	r2, #4
 80061d6:	68f9      	ldr	r1, [r7, #12]
 80061d8:	6938      	ldr	r0, [r7, #16]
 80061da:	f7ff f8ab 	bl	8005334 <_SendPacket>
  RECORD_END();
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	f383 8811 	msr	BASEPRI, r3
}
 80061e4:	bf00      	nop
 80061e6:	3720      	adds	r7, #32
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	20014330 	.word	0x20014330
 80061f0:	20014300 	.word	0x20014300

080061f4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b088      	sub	sp, #32
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80061fc:	f3ef 8311 	mrs	r3, BASEPRI
 8006200:	f04f 0120 	mov.w	r1, #32
 8006204:	f381 8811 	msr	BASEPRI, r1
 8006208:	617b      	str	r3, [r7, #20]
 800620a:	4819      	ldr	r0, [pc, #100]	; (8006270 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800620c:	f7fe ffa4 	bl	8005158 <_PreparePacket>
 8006210:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006216:	4b17      	ldr	r3, [pc, #92]	; (8006274 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	61fb      	str	r3, [r7, #28]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	61bb      	str	r3, [r7, #24]
 8006228:	e00b      	b.n	8006242 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	b2da      	uxtb	r2, r3
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	1c59      	adds	r1, r3, #1
 8006232:	61f9      	str	r1, [r7, #28]
 8006234:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006238:	b2d2      	uxtb	r2, r2
 800623a:	701a      	strb	r2, [r3, #0]
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	09db      	lsrs	r3, r3, #7
 8006240:	61bb      	str	r3, [r7, #24]
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	2b7f      	cmp	r3, #127	; 0x7f
 8006246:	d8f0      	bhi.n	800622a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	1c5a      	adds	r2, r3, #1
 800624c:	61fa      	str	r2, [r7, #28]
 800624e:	69ba      	ldr	r2, [r7, #24]
 8006250:	b2d2      	uxtb	r2, r2
 8006252:	701a      	strb	r2, [r3, #0]
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006258:	2206      	movs	r2, #6
 800625a:	68f9      	ldr	r1, [r7, #12]
 800625c:	6938      	ldr	r0, [r7, #16]
 800625e:	f7ff f869 	bl	8005334 <_SendPacket>
  RECORD_END();
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	f383 8811 	msr	BASEPRI, r3
}
 8006268:	bf00      	nop
 800626a:	3720      	adds	r7, #32
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	20014330 	.word	0x20014330
 8006274:	20014300 	.word	0x20014300

08006278 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006278:	b580      	push	{r7, lr}
 800627a:	b08a      	sub	sp, #40	; 0x28
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006282:	f3ef 8311 	mrs	r3, BASEPRI
 8006286:	f04f 0120 	mov.w	r1, #32
 800628a:	f381 8811 	msr	BASEPRI, r1
 800628e:	617b      	str	r3, [r7, #20]
 8006290:	4827      	ldr	r0, [pc, #156]	; (8006330 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006292:	f7fe ff61 	bl	8005158 <_PreparePacket>
 8006296:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800629c:	4b25      	ldr	r3, [pc, #148]	; (8006334 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	627b      	str	r3, [r7, #36]	; 0x24
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	623b      	str	r3, [r7, #32]
 80062ae:	e00b      	b.n	80062c8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	b2da      	uxtb	r2, r3
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	1c59      	adds	r1, r3, #1
 80062b8:	6279      	str	r1, [r7, #36]	; 0x24
 80062ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062be:	b2d2      	uxtb	r2, r2
 80062c0:	701a      	strb	r2, [r3, #0]
 80062c2:	6a3b      	ldr	r3, [r7, #32]
 80062c4:	09db      	lsrs	r3, r3, #7
 80062c6:	623b      	str	r3, [r7, #32]
 80062c8:	6a3b      	ldr	r3, [r7, #32]
 80062ca:	2b7f      	cmp	r3, #127	; 0x7f
 80062cc:	d8f0      	bhi.n	80062b0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80062ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d0:	1c5a      	adds	r2, r3, #1
 80062d2:	627a      	str	r2, [r7, #36]	; 0x24
 80062d4:	6a3a      	ldr	r2, [r7, #32]
 80062d6:	b2d2      	uxtb	r2, r2
 80062d8:	701a      	strb	r2, [r3, #0]
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	61fb      	str	r3, [r7, #28]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	61bb      	str	r3, [r7, #24]
 80062e6:	e00b      	b.n	8006300 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	1c59      	adds	r1, r3, #1
 80062f0:	61f9      	str	r1, [r7, #28]
 80062f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062f6:	b2d2      	uxtb	r2, r2
 80062f8:	701a      	strb	r2, [r3, #0]
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	09db      	lsrs	r3, r3, #7
 80062fe:	61bb      	str	r3, [r7, #24]
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	2b7f      	cmp	r3, #127	; 0x7f
 8006304:	d8f0      	bhi.n	80062e8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	1c5a      	adds	r2, r3, #1
 800630a:	61fa      	str	r2, [r7, #28]
 800630c:	69ba      	ldr	r2, [r7, #24]
 800630e:	b2d2      	uxtb	r2, r2
 8006310:	701a      	strb	r2, [r3, #0]
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006316:	2207      	movs	r2, #7
 8006318:	68f9      	ldr	r1, [r7, #12]
 800631a:	6938      	ldr	r0, [r7, #16]
 800631c:	f7ff f80a 	bl	8005334 <_SendPacket>
  RECORD_END();
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f383 8811 	msr	BASEPRI, r3
}
 8006326:	bf00      	nop
 8006328:	3728      	adds	r7, #40	; 0x28
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	20014330 	.word	0x20014330
 8006334:	20014300 	.word	0x20014300

08006338 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006340:	4b04      	ldr	r3, [pc, #16]	; (8006354 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	1ad3      	subs	r3, r2, r3
}
 8006348:	4618      	mov	r0, r3
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr
 8006354:	20014300 	.word	0x20014300

08006358 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006358:	b580      	push	{r7, lr}
 800635a:	b08c      	sub	sp, #48	; 0x30
 800635c:	af00      	add	r7, sp, #0
 800635e:	4603      	mov	r3, r0
 8006360:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006362:	4b3b      	ldr	r3, [pc, #236]	; (8006450 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d06d      	beq.n	8006446 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800636a:	4b39      	ldr	r3, [pc, #228]	; (8006450 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006370:	2300      	movs	r3, #0
 8006372:	62bb      	str	r3, [r7, #40]	; 0x28
 8006374:	e008      	b.n	8006388 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800637c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637e:	2b00      	cmp	r3, #0
 8006380:	d007      	beq.n	8006392 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006384:	3301      	adds	r3, #1
 8006386:	62bb      	str	r3, [r7, #40]	; 0x28
 8006388:	79fb      	ldrb	r3, [r7, #7]
 800638a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800638c:	429a      	cmp	r2, r3
 800638e:	d3f2      	bcc.n	8006376 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006390:	e000      	b.n	8006394 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006392:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006396:	2b00      	cmp	r3, #0
 8006398:	d055      	beq.n	8006446 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800639a:	f3ef 8311 	mrs	r3, BASEPRI
 800639e:	f04f 0120 	mov.w	r1, #32
 80063a2:	f381 8811 	msr	BASEPRI, r1
 80063a6:	617b      	str	r3, [r7, #20]
 80063a8:	482a      	ldr	r0, [pc, #168]	; (8006454 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80063aa:	f7fe fed5 	bl	8005158 <_PreparePacket>
 80063ae:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	627b      	str	r3, [r7, #36]	; 0x24
 80063b8:	79fb      	ldrb	r3, [r7, #7]
 80063ba:	623b      	str	r3, [r7, #32]
 80063bc:	e00b      	b.n	80063d6 <SEGGER_SYSVIEW_SendModule+0x7e>
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c4:	1c59      	adds	r1, r3, #1
 80063c6:	6279      	str	r1, [r7, #36]	; 0x24
 80063c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063cc:	b2d2      	uxtb	r2, r2
 80063ce:	701a      	strb	r2, [r3, #0]
 80063d0:	6a3b      	ldr	r3, [r7, #32]
 80063d2:	09db      	lsrs	r3, r3, #7
 80063d4:	623b      	str	r3, [r7, #32]
 80063d6:	6a3b      	ldr	r3, [r7, #32]
 80063d8:	2b7f      	cmp	r3, #127	; 0x7f
 80063da:	d8f0      	bhi.n	80063be <SEGGER_SYSVIEW_SendModule+0x66>
 80063dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063de:	1c5a      	adds	r2, r3, #1
 80063e0:	627a      	str	r2, [r7, #36]	; 0x24
 80063e2:	6a3a      	ldr	r2, [r7, #32]
 80063e4:	b2d2      	uxtb	r2, r2
 80063e6:	701a      	strb	r2, [r3, #0]
 80063e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ea:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	61fb      	str	r3, [r7, #28]
 80063f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	61bb      	str	r3, [r7, #24]
 80063f6:	e00b      	b.n	8006410 <SEGGER_SYSVIEW_SendModule+0xb8>
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	b2da      	uxtb	r2, r3
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	1c59      	adds	r1, r3, #1
 8006400:	61f9      	str	r1, [r7, #28]
 8006402:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006406:	b2d2      	uxtb	r2, r2
 8006408:	701a      	strb	r2, [r3, #0]
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	09db      	lsrs	r3, r3, #7
 800640e:	61bb      	str	r3, [r7, #24]
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	2b7f      	cmp	r3, #127	; 0x7f
 8006414:	d8f0      	bhi.n	80063f8 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	1c5a      	adds	r2, r3, #1
 800641a:	61fa      	str	r2, [r7, #28]
 800641c:	69ba      	ldr	r2, [r7, #24]
 800641e:	b2d2      	uxtb	r2, r2
 8006420:	701a      	strb	r2, [r3, #0]
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2280      	movs	r2, #128	; 0x80
 800642c:	4619      	mov	r1, r3
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f7fe fe42 	bl	80050b8 <_EncodeStr>
 8006434:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006436:	2216      	movs	r2, #22
 8006438:	68f9      	ldr	r1, [r7, #12]
 800643a:	6938      	ldr	r0, [r7, #16]
 800643c:	f7fe ff7a 	bl	8005334 <_SendPacket>
      RECORD_END();
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006446:	bf00      	nop
 8006448:	3730      	adds	r7, #48	; 0x30
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	20014328 	.word	0x20014328
 8006454:	20014330 	.word	0x20014330

08006458 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800645e:	4b0c      	ldr	r3, [pc, #48]	; (8006490 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00f      	beq.n	8006486 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006466:	4b0a      	ldr	r3, [pc, #40]	; (8006490 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d002      	beq.n	800647a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1f2      	bne.n	800646c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006486:	bf00      	nop
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	20014328 	.word	0x20014328

08006494 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800649a:	f3ef 8311 	mrs	r3, BASEPRI
 800649e:	f04f 0120 	mov.w	r1, #32
 80064a2:	f381 8811 	msr	BASEPRI, r1
 80064a6:	60fb      	str	r3, [r7, #12]
 80064a8:	4817      	ldr	r0, [pc, #92]	; (8006508 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80064aa:	f7fe fe55 	bl	8005158 <_PreparePacket>
 80064ae:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	617b      	str	r3, [r7, #20]
 80064b8:	4b14      	ldr	r3, [pc, #80]	; (800650c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	613b      	str	r3, [r7, #16]
 80064be:	e00b      	b.n	80064d8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	b2da      	uxtb	r2, r3
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	1c59      	adds	r1, r3, #1
 80064c8:	6179      	str	r1, [r7, #20]
 80064ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064ce:	b2d2      	uxtb	r2, r2
 80064d0:	701a      	strb	r2, [r3, #0]
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	09db      	lsrs	r3, r3, #7
 80064d6:	613b      	str	r3, [r7, #16]
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	2b7f      	cmp	r3, #127	; 0x7f
 80064dc:	d8f0      	bhi.n	80064c0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	1c5a      	adds	r2, r3, #1
 80064e2:	617a      	str	r2, [r7, #20]
 80064e4:	693a      	ldr	r2, [r7, #16]
 80064e6:	b2d2      	uxtb	r2, r2
 80064e8:	701a      	strb	r2, [r3, #0]
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80064ee:	221b      	movs	r2, #27
 80064f0:	6879      	ldr	r1, [r7, #4]
 80064f2:	68b8      	ldr	r0, [r7, #8]
 80064f4:	f7fe ff1e 	bl	8005334 <_SendPacket>
  RECORD_END();
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f383 8811 	msr	BASEPRI, r3
}
 80064fe:	bf00      	nop
 8006500:	3718      	adds	r7, #24
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	20014330 	.word	0x20014330
 800650c:	2001432c 	.word	0x2001432c

08006510 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006510:	b580      	push	{r7, lr}
 8006512:	b08a      	sub	sp, #40	; 0x28
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006518:	f3ef 8311 	mrs	r3, BASEPRI
 800651c:	f04f 0120 	mov.w	r1, #32
 8006520:	f381 8811 	msr	BASEPRI, r1
 8006524:	617b      	str	r3, [r7, #20]
 8006526:	4827      	ldr	r0, [pc, #156]	; (80065c4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006528:	f7fe fe16 	bl	8005158 <_PreparePacket>
 800652c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800652e:	2280      	movs	r2, #128	; 0x80
 8006530:	6879      	ldr	r1, [r7, #4]
 8006532:	6938      	ldr	r0, [r7, #16]
 8006534:	f7fe fdc0 	bl	80050b8 <_EncodeStr>
 8006538:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	627b      	str	r3, [r7, #36]	; 0x24
 800653e:	2301      	movs	r3, #1
 8006540:	623b      	str	r3, [r7, #32]
 8006542:	e00b      	b.n	800655c <SEGGER_SYSVIEW_Warn+0x4c>
 8006544:	6a3b      	ldr	r3, [r7, #32]
 8006546:	b2da      	uxtb	r2, r3
 8006548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654a:	1c59      	adds	r1, r3, #1
 800654c:	6279      	str	r1, [r7, #36]	; 0x24
 800654e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006552:	b2d2      	uxtb	r2, r2
 8006554:	701a      	strb	r2, [r3, #0]
 8006556:	6a3b      	ldr	r3, [r7, #32]
 8006558:	09db      	lsrs	r3, r3, #7
 800655a:	623b      	str	r3, [r7, #32]
 800655c:	6a3b      	ldr	r3, [r7, #32]
 800655e:	2b7f      	cmp	r3, #127	; 0x7f
 8006560:	d8f0      	bhi.n	8006544 <SEGGER_SYSVIEW_Warn+0x34>
 8006562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006564:	1c5a      	adds	r2, r3, #1
 8006566:	627a      	str	r2, [r7, #36]	; 0x24
 8006568:	6a3a      	ldr	r2, [r7, #32]
 800656a:	b2d2      	uxtb	r2, r2
 800656c:	701a      	strb	r2, [r3, #0]
 800656e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006570:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	61fb      	str	r3, [r7, #28]
 8006576:	2300      	movs	r3, #0
 8006578:	61bb      	str	r3, [r7, #24]
 800657a:	e00b      	b.n	8006594 <SEGGER_SYSVIEW_Warn+0x84>
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	b2da      	uxtb	r2, r3
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	1c59      	adds	r1, r3, #1
 8006584:	61f9      	str	r1, [r7, #28]
 8006586:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800658a:	b2d2      	uxtb	r2, r2
 800658c:	701a      	strb	r2, [r3, #0]
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	09db      	lsrs	r3, r3, #7
 8006592:	61bb      	str	r3, [r7, #24]
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	2b7f      	cmp	r3, #127	; 0x7f
 8006598:	d8f0      	bhi.n	800657c <SEGGER_SYSVIEW_Warn+0x6c>
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	1c5a      	adds	r2, r3, #1
 800659e:	61fa      	str	r2, [r7, #28]
 80065a0:	69ba      	ldr	r2, [r7, #24]
 80065a2:	b2d2      	uxtb	r2, r2
 80065a4:	701a      	strb	r2, [r3, #0]
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80065aa:	221a      	movs	r2, #26
 80065ac:	68f9      	ldr	r1, [r7, #12]
 80065ae:	6938      	ldr	r0, [r7, #16]
 80065b0:	f7fe fec0 	bl	8005334 <_SendPacket>
  RECORD_END();
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	f383 8811 	msr	BASEPRI, r3
}
 80065ba:	bf00      	nop
 80065bc:	3728      	adds	r7, #40	; 0x28
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	20014330 	.word	0x20014330

080065c8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80065c8:	b580      	push	{r7, lr}
 80065ca:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80065cc:	4803      	ldr	r0, [pc, #12]	; (80065dc <_cbSendSystemDesc+0x14>)
 80065ce:	f7ff fca1 	bl	8005f14 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80065d2:	4803      	ldr	r0, [pc, #12]	; (80065e0 <_cbSendSystemDesc+0x18>)
 80065d4:	f7ff fc9e 	bl	8005f14 <SEGGER_SYSVIEW_SendSysDesc>
}
 80065d8:	bf00      	nop
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	0800692c 	.word	0x0800692c
 80065e0:	08006970 	.word	0x08006970

080065e4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80065e4:	b580      	push	{r7, lr}
 80065e6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80065e8:	4b06      	ldr	r3, [pc, #24]	; (8006604 <SEGGER_SYSVIEW_Conf+0x20>)
 80065ea:	6818      	ldr	r0, [r3, #0]
 80065ec:	4b05      	ldr	r3, [pc, #20]	; (8006604 <SEGGER_SYSVIEW_Conf+0x20>)
 80065ee:	6819      	ldr	r1, [r3, #0]
 80065f0:	4b05      	ldr	r3, [pc, #20]	; (8006608 <SEGGER_SYSVIEW_Conf+0x24>)
 80065f2:	4a06      	ldr	r2, [pc, #24]	; (800660c <SEGGER_SYSVIEW_Conf+0x28>)
 80065f4:	f7ff f80c 	bl	8005610 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80065f8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80065fc:	f7ff f84c 	bl	8005698 <SEGGER_SYSVIEW_SetRAMBase>
}
 8006600:	bf00      	nop
 8006602:	bd80      	pop	{r7, pc}
 8006604:	20000018 	.word	0x20000018
 8006608:	080065c9 	.word	0x080065c9
 800660c:	08006a10 	.word	0x08006a10

08006610 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8006610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006612:	b085      	sub	sp, #20
 8006614:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8006616:	2300      	movs	r3, #0
 8006618:	607b      	str	r3, [r7, #4]
 800661a:	e033      	b.n	8006684 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800661c:	491e      	ldr	r1, [pc, #120]	; (8006698 <_cbSendTaskList+0x88>)
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	4613      	mov	r3, r2
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	4413      	add	r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	440b      	add	r3, r1
 800662a:	6818      	ldr	r0, [r3, #0]
 800662c:	491a      	ldr	r1, [pc, #104]	; (8006698 <_cbSendTaskList+0x88>)
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	4613      	mov	r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	440b      	add	r3, r1
 800663a:	3304      	adds	r3, #4
 800663c:	6819      	ldr	r1, [r3, #0]
 800663e:	4c16      	ldr	r4, [pc, #88]	; (8006698 <_cbSendTaskList+0x88>)
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	4613      	mov	r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	4413      	add	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	4423      	add	r3, r4
 800664c:	3308      	adds	r3, #8
 800664e:	681c      	ldr	r4, [r3, #0]
 8006650:	4d11      	ldr	r5, [pc, #68]	; (8006698 <_cbSendTaskList+0x88>)
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	4613      	mov	r3, r2
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4413      	add	r3, r2
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	442b      	add	r3, r5
 800665e:	330c      	adds	r3, #12
 8006660:	681d      	ldr	r5, [r3, #0]
 8006662:	4e0d      	ldr	r6, [pc, #52]	; (8006698 <_cbSendTaskList+0x88>)
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	4613      	mov	r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	4413      	add	r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4433      	add	r3, r6
 8006670:	3310      	adds	r3, #16
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	462b      	mov	r3, r5
 8006678:	4622      	mov	r2, r4
 800667a:	f000 f8bd 	bl	80067f8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	3301      	adds	r3, #1
 8006682:	607b      	str	r3, [r7, #4]
 8006684:	4b05      	ldr	r3, [pc, #20]	; (800669c <_cbSendTaskList+0x8c>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	429a      	cmp	r2, r3
 800668c:	d3c6      	bcc.n	800661c <_cbSendTaskList+0xc>
  }
}
 800668e:	bf00      	nop
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006698:	20014414 	.word	0x20014414
 800669c:	200144b4 	.word	0x200144b4

080066a0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80066a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066a4:	b082      	sub	sp, #8
 80066a6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80066a8:	f7fc ffae 	bl	8003608 <xTaskGetTickCountFromISR>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2200      	movs	r2, #0
 80066b0:	469a      	mov	sl, r3
 80066b2:	4693      	mov	fp, r2
 80066b4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80066b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066bc:	4602      	mov	r2, r0
 80066be:	460b      	mov	r3, r1
 80066c0:	f04f 0a00 	mov.w	sl, #0
 80066c4:	f04f 0b00 	mov.w	fp, #0
 80066c8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80066cc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80066d0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80066d4:	4652      	mov	r2, sl
 80066d6:	465b      	mov	r3, fp
 80066d8:	1a14      	subs	r4, r2, r0
 80066da:	eb63 0501 	sbc.w	r5, r3, r1
 80066de:	f04f 0200 	mov.w	r2, #0
 80066e2:	f04f 0300 	mov.w	r3, #0
 80066e6:	00ab      	lsls	r3, r5, #2
 80066e8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80066ec:	00a2      	lsls	r2, r4, #2
 80066ee:	4614      	mov	r4, r2
 80066f0:	461d      	mov	r5, r3
 80066f2:	eb14 0800 	adds.w	r8, r4, r0
 80066f6:	eb45 0901 	adc.w	r9, r5, r1
 80066fa:	f04f 0200 	mov.w	r2, #0
 80066fe:	f04f 0300 	mov.w	r3, #0
 8006702:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006706:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800670a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800670e:	4690      	mov	r8, r2
 8006710:	4699      	mov	r9, r3
 8006712:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8006716:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800671a:	4610      	mov	r0, r2
 800671c:	4619      	mov	r1, r3
 800671e:	3708      	adds	r7, #8
 8006720:	46bd      	mov	sp, r7
 8006722:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08006728 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af02      	add	r7, sp, #8
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
 8006734:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8006736:	2205      	movs	r2, #5
 8006738:	492b      	ldr	r1, [pc, #172]	; (80067e8 <SYSVIEW_AddTask+0xc0>)
 800673a:	68b8      	ldr	r0, [r7, #8]
 800673c:	f000 f8a2 	bl	8006884 <memcmp>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d04b      	beq.n	80067de <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8006746:	4b29      	ldr	r3, [pc, #164]	; (80067ec <SYSVIEW_AddTask+0xc4>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b07      	cmp	r3, #7
 800674c:	d903      	bls.n	8006756 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800674e:	4828      	ldr	r0, [pc, #160]	; (80067f0 <SYSVIEW_AddTask+0xc8>)
 8006750:	f7ff fede 	bl	8006510 <SEGGER_SYSVIEW_Warn>
    return;
 8006754:	e044      	b.n	80067e0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8006756:	4b25      	ldr	r3, [pc, #148]	; (80067ec <SYSVIEW_AddTask+0xc4>)
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	4926      	ldr	r1, [pc, #152]	; (80067f4 <SYSVIEW_AddTask+0xcc>)
 800675c:	4613      	mov	r3, r2
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	4413      	add	r3, r2
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	440b      	add	r3, r1
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800676a:	4b20      	ldr	r3, [pc, #128]	; (80067ec <SYSVIEW_AddTask+0xc4>)
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	4921      	ldr	r1, [pc, #132]	; (80067f4 <SYSVIEW_AddTask+0xcc>)
 8006770:	4613      	mov	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	440b      	add	r3, r1
 800677a:	3304      	adds	r3, #4
 800677c:	68ba      	ldr	r2, [r7, #8]
 800677e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8006780:	4b1a      	ldr	r3, [pc, #104]	; (80067ec <SYSVIEW_AddTask+0xc4>)
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	491b      	ldr	r1, [pc, #108]	; (80067f4 <SYSVIEW_AddTask+0xcc>)
 8006786:	4613      	mov	r3, r2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4413      	add	r3, r2
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	440b      	add	r3, r1
 8006790:	3308      	adds	r3, #8
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8006796:	4b15      	ldr	r3, [pc, #84]	; (80067ec <SYSVIEW_AddTask+0xc4>)
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	4916      	ldr	r1, [pc, #88]	; (80067f4 <SYSVIEW_AddTask+0xcc>)
 800679c:	4613      	mov	r3, r2
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4413      	add	r3, r2
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	440b      	add	r3, r1
 80067a6:	330c      	adds	r3, #12
 80067a8:	683a      	ldr	r2, [r7, #0]
 80067aa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80067ac:	4b0f      	ldr	r3, [pc, #60]	; (80067ec <SYSVIEW_AddTask+0xc4>)
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	4910      	ldr	r1, [pc, #64]	; (80067f4 <SYSVIEW_AddTask+0xcc>)
 80067b2:	4613      	mov	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	4413      	add	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	440b      	add	r3, r1
 80067bc:	3310      	adds	r3, #16
 80067be:	69ba      	ldr	r2, [r7, #24]
 80067c0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80067c2:	4b0a      	ldr	r3, [pc, #40]	; (80067ec <SYSVIEW_AddTask+0xc4>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	3301      	adds	r3, #1
 80067c8:	4a08      	ldr	r2, [pc, #32]	; (80067ec <SYSVIEW_AddTask+0xc4>)
 80067ca:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	9300      	str	r3, [sp, #0]
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	68b9      	ldr	r1, [r7, #8]
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f000 f80e 	bl	80067f8 <SYSVIEW_SendTaskInfo>
 80067dc:	e000      	b.n	80067e0 <SYSVIEW_AddTask+0xb8>
    return;
 80067de:	bf00      	nop

}
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	08006980 	.word	0x08006980
 80067ec:	200144b4 	.word	0x200144b4
 80067f0:	08006988 	.word	0x08006988
 80067f4:	20014414 	.word	0x20014414

080067f8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b08a      	sub	sp, #40	; 0x28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
 8006804:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8006806:	f107 0314 	add.w	r3, r7, #20
 800680a:	2214      	movs	r2, #20
 800680c:	2100      	movs	r1, #0
 800680e:	4618      	mov	r0, r3
 8006810:	f000 f856 	bl	80068c0 <memset>
  TaskInfo.TaskID     = TaskID;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8006824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006826:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8006828:	f107 0314 	add.w	r3, r7, #20
 800682c:	4618      	mov	r0, r3
 800682e:	f7ff fa79 	bl	8005d24 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8006832:	bf00      	nop
 8006834:	3728      	adds	r7, #40	; 0x28
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
	...

0800683c <__libc_init_array>:
 800683c:	b570      	push	{r4, r5, r6, lr}
 800683e:	4d0d      	ldr	r5, [pc, #52]	; (8006874 <__libc_init_array+0x38>)
 8006840:	4c0d      	ldr	r4, [pc, #52]	; (8006878 <__libc_init_array+0x3c>)
 8006842:	1b64      	subs	r4, r4, r5
 8006844:	10a4      	asrs	r4, r4, #2
 8006846:	2600      	movs	r6, #0
 8006848:	42a6      	cmp	r6, r4
 800684a:	d109      	bne.n	8006860 <__libc_init_array+0x24>
 800684c:	4d0b      	ldr	r5, [pc, #44]	; (800687c <__libc_init_array+0x40>)
 800684e:	4c0c      	ldr	r4, [pc, #48]	; (8006880 <__libc_init_array+0x44>)
 8006850:	f000 f83e 	bl	80068d0 <_init>
 8006854:	1b64      	subs	r4, r4, r5
 8006856:	10a4      	asrs	r4, r4, #2
 8006858:	2600      	movs	r6, #0
 800685a:	42a6      	cmp	r6, r4
 800685c:	d105      	bne.n	800686a <__libc_init_array+0x2e>
 800685e:	bd70      	pop	{r4, r5, r6, pc}
 8006860:	f855 3b04 	ldr.w	r3, [r5], #4
 8006864:	4798      	blx	r3
 8006866:	3601      	adds	r6, #1
 8006868:	e7ee      	b.n	8006848 <__libc_init_array+0xc>
 800686a:	f855 3b04 	ldr.w	r3, [r5], #4
 800686e:	4798      	blx	r3
 8006870:	3601      	adds	r6, #1
 8006872:	e7f2      	b.n	800685a <__libc_init_array+0x1e>
 8006874:	08006a20 	.word	0x08006a20
 8006878:	08006a20 	.word	0x08006a20
 800687c:	08006a20 	.word	0x08006a20
 8006880:	08006a24 	.word	0x08006a24

08006884 <memcmp>:
 8006884:	b510      	push	{r4, lr}
 8006886:	3901      	subs	r1, #1
 8006888:	4402      	add	r2, r0
 800688a:	4290      	cmp	r0, r2
 800688c:	d101      	bne.n	8006892 <memcmp+0xe>
 800688e:	2000      	movs	r0, #0
 8006890:	e005      	b.n	800689e <memcmp+0x1a>
 8006892:	7803      	ldrb	r3, [r0, #0]
 8006894:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006898:	42a3      	cmp	r3, r4
 800689a:	d001      	beq.n	80068a0 <memcmp+0x1c>
 800689c:	1b18      	subs	r0, r3, r4
 800689e:	bd10      	pop	{r4, pc}
 80068a0:	3001      	adds	r0, #1
 80068a2:	e7f2      	b.n	800688a <memcmp+0x6>

080068a4 <memcpy>:
 80068a4:	440a      	add	r2, r1
 80068a6:	4291      	cmp	r1, r2
 80068a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80068ac:	d100      	bne.n	80068b0 <memcpy+0xc>
 80068ae:	4770      	bx	lr
 80068b0:	b510      	push	{r4, lr}
 80068b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068ba:	4291      	cmp	r1, r2
 80068bc:	d1f9      	bne.n	80068b2 <memcpy+0xe>
 80068be:	bd10      	pop	{r4, pc}

080068c0 <memset>:
 80068c0:	4402      	add	r2, r0
 80068c2:	4603      	mov	r3, r0
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d100      	bne.n	80068ca <memset+0xa>
 80068c8:	4770      	bx	lr
 80068ca:	f803 1b01 	strb.w	r1, [r3], #1
 80068ce:	e7f9      	b.n	80068c4 <memset+0x4>

080068d0 <_init>:
 80068d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068d2:	bf00      	nop
 80068d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068d6:	bc08      	pop	{r3}
 80068d8:	469e      	mov	lr, r3
 80068da:	4770      	bx	lr

080068dc <_fini>:
 80068dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068de:	bf00      	nop
 80068e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068e2:	bc08      	pop	{r3}
 80068e4:	469e      	mov	lr, r3
 80068e6:	4770      	bx	lr
